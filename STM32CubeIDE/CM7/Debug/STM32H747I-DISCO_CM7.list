
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026a0c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d1c  08026cb0  08026cb0  00027cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000b7a  0802a9cc  0802a9cc  0002b9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000038  0802b548  0802b548  0002c548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00220d80  90000000  90000000  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000008c  90220d80  90220d80  0024ed80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802b580  0802b580  0024ee0c  2**0
                  CONTENTS
  8 .ARM          00000008  0802b580  0802b580  0002c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802b588  0802b588  0024ee0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  0802b588  0802b588  0002c588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0802b5a4  0802b5a4  0002c5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000140  24000000  0802b5ac  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  0802b6ec  0002d140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  0802b7ec  0002d240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00026df8  24000340  0802b8ec  0002d340  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  24027138  0802b8ec  0002e138  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0024ee0c  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  0024f000  2**2
                  ALLOC
 19 .debug_info   0010cdd0  00000000  00000000  0024ee3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001b1f6  00000000  00000000  0035bc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004138  00000000  00000000  00376e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00005248  00000000  00000000  0037af38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0005615c  00000000  00000000  00380180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0007ab43  00000000  00000000  003d62dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001e9280  00000000  00000000  00450e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0063a09f  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b580  00000000  00000000  0063a164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 000288b6  00000000  00000000  006456e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000006f  00000000  00000000  0066df9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08026c94 	.word	0x08026c94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	08026c94 	.word	0x08026c94

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00f bb78 	b.w	800fdf0 <vTaskSetApplicationTaskTag>
 8000700:	0800239d 	.word	0x0800239d

08000704 <MAX7219_CS_Enable>:
void MAX7219_ClearAll(void);
void MAX7219_ResetAll(void);
void MAX7219_LightSingleLed(uint8_t matrix_index, uint8_t row, uint8_t bit_position);

void MAX7219_CS_Enable(void) {
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070a:	4801      	ldr	r0, [pc, #4]	@ (8000710 <MAX7219_CS_Enable+0xc>)
 800070c:	f009 bc7a 	b.w	800a004 <HAL_GPIO_WritePin>
 8000710:	58022400 	.word	0x58022400

08000714 <MAX7219_CS_Disable>:
}

void MAX7219_CS_Disable(void) {
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800071a:	4801      	ldr	r0, [pc, #4]	@ (8000720 <MAX7219_CS_Disable+0xc>)
 800071c:	f009 bc72 	b.w	800a004 <HAL_GPIO_WritePin>
 8000720:	58022400 	.word	0x58022400

08000724 <MAX7219_UpdateMatrix>:
		}
	}
	MAX7219_UpdateMatrix(matrix_pattern);
}

void MAX7219_UpdateMatrix(uint8_t matrix_update[NUM_MATRICES][NUM_FILAS]){
 8000724:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000726:	4c14      	ldr	r4, [pc, #80]	@ (8000778 <MAX7219_UpdateMatrix+0x54>)
 8000728:	2501      	movs	r5, #1
            posicion_spi = (NUM_MATRICES - 1 - matriz) * 2;
        	spi_packet[posicion_spi] = fila;
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
        }
		MAX7219_CS_Enable();
		HAL_SPI_Transmit(&hspi5, spi_packet, sizeof(spi_packet), 100);
 800072a:	4e14      	ldr	r6, [pc, #80]	@ (800077c <MAX7219_UpdateMatrix+0x58>)
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 800072c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000730:	b2eb      	uxtb	r3, r5
	for(uint8_t fila = 1; fila <= NUM_FILAS ; fila++){
 8000732:	3501      	adds	r5, #1
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 8000734:	f88d 2007 	strb.w	r2, [sp, #7]
 8000738:	79e2      	ldrb	r2, [r4, #7]
        	spi_packet[posicion_spi] = fila;
 800073a:	f88d 3006 	strb.w	r3, [sp, #6]
 800073e:	f88d 3004 	strb.w	r3, [sp, #4]
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 8000742:	f88d 2005 	strb.w	r2, [sp, #5]
        	spi_packet[posicion_spi] = fila;
 8000746:	f88d 3002 	strb.w	r3, [sp, #2]
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 800074a:	7be2      	ldrb	r2, [r4, #15]
        	spi_packet[posicion_spi] = fila;
 800074c:	f88d 3000 	strb.w	r3, [sp]
        	spi_packet[posicion_spi + 1] = matrix_pattern[matriz][fila-1];
 8000750:	7de3      	ldrb	r3, [r4, #23]
 8000752:	f88d 2003 	strb.w	r2, [sp, #3]
 8000756:	f88d 3001 	strb.w	r3, [sp, #1]
		MAX7219_CS_Enable();
 800075a:	f7ff ffd3 	bl	8000704 <MAX7219_CS_Enable>
		HAL_SPI_Transmit(&hspi5, spi_packet, sizeof(spi_packet), 100);
 800075e:	2364      	movs	r3, #100	@ 0x64
 8000760:	2208      	movs	r2, #8
 8000762:	4669      	mov	r1, sp
 8000764:	4630      	mov	r0, r6
 8000766:	f00d fa69 	bl	800dc3c <HAL_SPI_Transmit>
		MAX7219_CS_Disable();
 800076a:	f7ff ffd3 	bl	8000714 <MAX7219_CS_Disable>
	for(uint8_t fila = 1; fila <= NUM_FILAS ; fila++){
 800076e:	2d09      	cmp	r5, #9
 8000770:	d1dc      	bne.n	800072c <MAX7219_UpdateMatrix+0x8>
	}
}
 8000772:	b002      	add	sp, #8
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	bf00      	nop
 8000778:	2400035c 	.word	0x2400035c
 800077c:	240003e8 	.word	0x240003e8

08000780 <MatrizLedSelect>:
	if(num_mx >= NUM_MATRICES || row >= NUM_FILAS || column >= 8){
 8000780:	2803      	cmp	r0, #3
void MatrizLedSelect(uint8_t num_mx, uint8_t row, uint8_t column){
 8000782:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(num_mx >= NUM_MATRICES || row >= NUM_FILAS || column >= 8){
 8000784:	d832      	bhi.n	80007ec <MatrizLedSelect+0x6c>
 8000786:	ea41 0302 	orr.w	r3, r1, r2
 800078a:	2b07      	cmp	r3, #7
 800078c:	d82e      	bhi.n	80007ec <MatrizLedSelect+0x6c>
	uint8_t current_row = row * 2 - 1;
 800078e:	0049      	lsls	r1, r1, #1
 8000790:	4e17      	ldr	r6, [pc, #92]	@ (80007f0 <MatrizLedSelect+0x70>)
 8000792:	2500      	movs	r5, #0
 8000794:	3901      	subs	r1, #1
 8000796:	b2c9      	uxtb	r1, r1
				if( (fila == current_row) || (fila == (current_row-1))){
 8000798:	f101 3eff 	add.w	lr, r1, #4294967295
void MatrizLedSelect(uint8_t num_mx, uint8_t row, uint8_t column){
 800079c:	4637      	mov	r7, r6
 800079e:	2400      	movs	r4, #0
			if(matriz != num_mx){
 80007a0:	fa5f fc85 	uxtb.w	ip, r5
 80007a4:	4584      	cmp	ip, r0
 80007a6:	d11d      	bne.n	80007e4 <MatrizLedSelect+0x64>
				if( (fila == current_row) || (fila == (current_row-1))){
 80007a8:	b2e3      	uxtb	r3, r4
 80007aa:	428b      	cmp	r3, r1
 80007ac:	d001      	beq.n	80007b2 <MatrizLedSelect+0x32>
 80007ae:	45a6      	cmp	lr, r4
 80007b0:	d118      	bne.n	80007e4 <MatrizLedSelect+0x64>
					switch (column) {
 80007b2:	2a03      	cmp	r2, #3
 80007b4:	d816      	bhi.n	80007e4 <MatrizLedSelect+0x64>
 80007b6:	e8df f002 	tbb	[pc, r2]
 80007ba:	0217      	.short	0x0217
 80007bc:	1311      	.short	0x1311
 80007be:	230c      	movs	r3, #12
		for(uint8_t fila = 0; fila < NUM_FILAS ; fila++){
 80007c0:	3401      	adds	r4, #1
				matrix_pattern[matriz][fila] = 0x00;
 80007c2:	f807 3b01 	strb.w	r3, [r7], #1
		for(uint8_t fila = 0; fila < NUM_FILAS ; fila++){
 80007c6:	2c08      	cmp	r4, #8
 80007c8:	d1ec      	bne.n	80007a4 <MatrizLedSelect+0x24>
	for (uint8_t matriz = 0 ; matriz < NUM_MATRICES; matriz++){
 80007ca:	3501      	adds	r5, #1
 80007cc:	3608      	adds	r6, #8
 80007ce:	2d04      	cmp	r5, #4
 80007d0:	d1e4      	bne.n	800079c <MatrizLedSelect+0x1c>
	MAX7219_UpdateMatrix(matrix_pattern);
 80007d2:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <MatrizLedSelect+0x70>)
}
 80007d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	MAX7219_UpdateMatrix(matrix_pattern);
 80007d8:	f7ff bfa4 	b.w	8000724 <MAX7219_UpdateMatrix>
					        break;
 80007dc:	2330      	movs	r3, #48	@ 0x30
 80007de:	e7ef      	b.n	80007c0 <MatrizLedSelect+0x40>
					        break;
 80007e0:	23c0      	movs	r3, #192	@ 0xc0
 80007e2:	e7ed      	b.n	80007c0 <MatrizLedSelect+0x40>
 80007e4:	2300      	movs	r3, #0
 80007e6:	e7eb      	b.n	80007c0 <MatrizLedSelect+0x40>
					switch (column) {
 80007e8:	2303      	movs	r3, #3
 80007ea:	e7e9      	b.n	80007c0 <MatrizLedSelect+0x40>
}
 80007ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2400035c 	.word	0x2400035c

080007f4 <MAX7219_ClearAll>:





void MAX7219_ClearAll(void) {
 80007f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for (uint8_t fila = 1; fila <= 8; fila++) {
 80007f6:	2401      	movs	r4, #1
        uint8_t tx[NUM_MATRICES * 2];

        for (int i = 0; i < NUM_MATRICES; i++) {
            tx[i * 2]     = fila;
            tx[i * 2 + 1] = 0x00;
 80007f8:	2500      	movs	r5, #0
        }
        MAX7219_CS_Enable();
        HAL_SPI_Transmit(&hspi5, tx, sizeof(tx), 500);
 80007fa:	4e11      	ldr	r6, [pc, #68]	@ (8000840 <MAX7219_ClearAll+0x4c>)
            tx[i * 2]     = fila;
 80007fc:	f88d 4000 	strb.w	r4, [sp]
 8000800:	f88d 4002 	strb.w	r4, [sp, #2]
 8000804:	f88d 4004 	strb.w	r4, [sp, #4]
 8000808:	f88d 4006 	strb.w	r4, [sp, #6]
    for (uint8_t fila = 1; fila <= 8; fila++) {
 800080c:	3401      	adds	r4, #1
            tx[i * 2 + 1] = 0x00;
 800080e:	f88d 5001 	strb.w	r5, [sp, #1]
    for (uint8_t fila = 1; fila <= 8; fila++) {
 8000812:	b2e4      	uxtb	r4, r4
            tx[i * 2 + 1] = 0x00;
 8000814:	f88d 5003 	strb.w	r5, [sp, #3]
 8000818:	f88d 5005 	strb.w	r5, [sp, #5]
 800081c:	f88d 5007 	strb.w	r5, [sp, #7]
        MAX7219_CS_Enable();
 8000820:	f7ff ff70 	bl	8000704 <MAX7219_CS_Enable>
        HAL_SPI_Transmit(&hspi5, tx, sizeof(tx), 500);
 8000824:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000828:	2208      	movs	r2, #8
 800082a:	4669      	mov	r1, sp
 800082c:	4630      	mov	r0, r6
 800082e:	f00d fa05 	bl	800dc3c <HAL_SPI_Transmit>
        MAX7219_CS_Disable();
 8000832:	f7ff ff6f 	bl	8000714 <MAX7219_CS_Disable>
    for (uint8_t fila = 1; fila <= 8; fila++) {
 8000836:	2c09      	cmp	r4, #9
 8000838:	d1e0      	bne.n	80007fc <MAX7219_ClearAll+0x8>
    }
}
 800083a:	b002      	add	sp, #8
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	bf00      	nop
 8000840:	240003e8 	.word	0x240003e8

08000844 <MAX7219_SendToAll>:


HAL_StatusTypeDef MAX7219_SendToAll(uint8_t address, uint8_t data, uint8_t pos) {
 8000844:	b513      	push	{r0, r1, r4, lr}
    uint8_t tx[NUM_MATRICES * 2];

    for (int i = 0; i < NUM_MATRICES; i++) {
        if (i == pos) {
 8000846:	2a00      	cmp	r2, #0
 8000848:	d037      	beq.n	80008ba <MAX7219_SendToAll+0x76>
 800084a:	2300      	movs	r3, #0
 800084c:	461c      	mov	r4, r3
 800084e:	2a01      	cmp	r2, #1
            tx[i * 2]     = address;
 8000850:	f88d 3000 	strb.w	r3, [sp]
            tx[i * 2 + 1] = data;
 8000854:	f88d 4001 	strb.w	r4, [sp, #1]
        if (i == pos) {
 8000858:	bf13      	iteet	ne
 800085a:	2300      	movne	r3, #0
 800085c:	4603      	moveq	r3, r0
 800085e:	460c      	moveq	r4, r1
 8000860:	461c      	movne	r4, r3
 8000862:	2a02      	cmp	r2, #2
            tx[i * 2]     = address;
 8000864:	f88d 3002 	strb.w	r3, [sp, #2]
        if (i == pos) {
 8000868:	bf14      	ite	ne
 800086a:	2300      	movne	r3, #0
 800086c:	4603      	moveq	r3, r0
            tx[i * 2 + 1] = data;
 800086e:	f88d 4003 	strb.w	r4, [sp, #3]
        if (i == pos) {
 8000872:	bf0c      	ite	eq
 8000874:	460c      	moveq	r4, r1
 8000876:	461c      	movne	r4, r3
 8000878:	2a03      	cmp	r2, #3
            tx[i * 2]     = address;
 800087a:	f88d 3004 	strb.w	r3, [sp, #4]
        if (i == pos) {
 800087e:	bf18      	it	ne
 8000880:	2000      	movne	r0, #0
            tx[i * 2 + 1] = data;
 8000882:	f88d 4005 	strb.w	r4, [sp, #5]
        if (i == pos) {
 8000886:	bf18      	it	ne
 8000888:	4601      	movne	r1, r0
            tx[i * 2]     = address;
 800088a:	f88d 0006 	strb.w	r0, [sp, #6]
            tx[i * 2 + 1] = data;
 800088e:	f88d 1007 	strb.w	r1, [sp, #7]
            tx[i * 2]     = 0x00;  // No-op (no hace nada)
            tx[i * 2 + 1] = 0x00;
        }
    }

    MAX7219_CS_Enable();
 8000892:	f7ff ff37 	bl	8000704 <MAX7219_CS_Enable>
    HAL_Delay(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f008 fbaa 	bl	8008ff0 <HAL_Delay>
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi5, tx, NUM_MATRICES * 2, 100);
 800089c:	2364      	movs	r3, #100	@ 0x64
 800089e:	2208      	movs	r2, #8
 80008a0:	4669      	mov	r1, sp
 80008a2:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <MAX7219_SendToAll+0x7c>)
 80008a4:	f00d f9ca 	bl	800dc3c <HAL_SPI_Transmit>
 80008a8:	4604      	mov	r4, r0
    HAL_Delay(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f008 fba0 	bl	8008ff0 <HAL_Delay>
    MAX7219_CS_Disable();
 80008b0:	f7ff ff30 	bl	8000714 <MAX7219_CS_Disable>

    return ret;
}
 80008b4:	4620      	mov	r0, r4
 80008b6:	b002      	add	sp, #8
 80008b8:	bd10      	pop	{r4, pc}
        if (i == pos) {
 80008ba:	4603      	mov	r3, r0
 80008bc:	460c      	mov	r4, r1
 80008be:	e7c6      	b.n	800084e <MAX7219_SendToAll+0xa>
 80008c0:	240003e8 	.word	0x240003e8

080008c4 <MAX7219_ResetAll>:
void MAX7219_ResetAll(void) {
 80008c4:	b538      	push	{r3, r4, r5, lr}
 80008c6:	2500      	movs	r5, #0
 80008c8:	b2ec      	uxtb	r4, r5
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
        MAX7219_SendToAll(0x0F, 0x00, i);  // Display test off
 80008ca:	2100      	movs	r1, #0
 80008cc:	200f      	movs	r0, #15
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
 80008ce:	3501      	adds	r5, #1
        MAX7219_SendToAll(0x0F, 0x00, i);  // Display test off
 80008d0:	4622      	mov	r2, r4
 80008d2:	f7ff ffb7 	bl	8000844 <MAX7219_SendToAll>
        MAX7219_SendToAll(0x09, 0x00, i);  // Decode mode off
 80008d6:	4622      	mov	r2, r4
 80008d8:	2100      	movs	r1, #0
 80008da:	2009      	movs	r0, #9
 80008dc:	f7ff ffb2 	bl	8000844 <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0B, 0x07, i);  // Scan limit = 8
 80008e0:	4622      	mov	r2, r4
 80008e2:	2107      	movs	r1, #7
 80008e4:	200b      	movs	r0, #11
 80008e6:	f7ff ffad 	bl	8000844 <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0C, 0x01, i);  // Normal operation
 80008ea:	4622      	mov	r2, r4
 80008ec:	2101      	movs	r1, #1
 80008ee:	200c      	movs	r0, #12
 80008f0:	f7ff ffa8 	bl	8000844 <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0A, 0x08, i);  // Medium intensity
 80008f4:	4622      	mov	r2, r4
 80008f6:	2108      	movs	r1, #8
 80008f8:	200a      	movs	r0, #10
 80008fa:	f7ff ffa3 	bl	8000844 <MAX7219_SendToAll>
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
 80008fe:	2d04      	cmp	r5, #4
 8000900:	d1e2      	bne.n	80008c8 <MAX7219_ResetAll+0x4>
    }
}
 8000902:	bd38      	pop	{r3, r4, r5, pc}

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000906:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000908:	224c      	movs	r2, #76	@ 0x4c
 800090a:	2100      	movs	r1, #0
 800090c:	a809      	add	r0, sp, #36	@ 0x24
 800090e:	f025 fc2b 	bl	8026168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	a801      	add	r0, sp, #4
 8000918:	f025 fc26 	bl	8026168 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800091c:	2004      	movs	r0, #4
 800091e:	f00b f9f5 	bl	800bd0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000922:	2300      	movs	r3, #0
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <SystemClock_Config+0xbc>)
 8000928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800092a:	f022 0201 	bic.w	r2, r2, #1
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <SystemClock_Config+0xc0>)
 800093a:	699a      	ldr	r2, [r3, #24]
 800093c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000940:	619a      	str	r2, [r3, #24]
 8000942:	699a      	ldr	r2, [r3, #24]
 8000944:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000948:	9200      	str	r2, [sp, #0]
 800094a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094c:	699a      	ldr	r2, [r3, #24]
 800094e:	0491      	lsls	r1, r2, #18
 8000950:	d5fc      	bpl.n	800094c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000956:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800095a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800095e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000962:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000964:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2301      	movs	r3, #1
 800096a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800096e:	23a0      	movs	r3, #160	@ 0xa0
 8000970:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000974:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800097a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800097e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000982:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f00b fcc2 	bl	800c30c <HAL_RCC_OscConfig>
 8000988:	b108      	cbz	r0, 800098e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000990:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800099a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a8:	f00c f84c 	bl	800ca44 <HAL_RCC_ClockConfig>
 80009ac:	4601      	mov	r1, r0
 80009ae:	b108      	cbz	r0, 80009b4 <SystemClock_Config+0xb0>
 80009b0:	b672      	cpsid	i
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009b8:	f00b ff54 	bl	800c864 <HAL_RCC_MCOConfig>
}
 80009bc:	b01d      	add	sp, #116	@ 0x74
 80009be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c0:	58000400 	.word	0x58000400
 80009c4:	58024800 	.word	0x58024800

080009c8 <main>:
{
 80009c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009cc:	b0bd      	sub	sp, #244	@ 0xf4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009ce:	2210      	movs	r2, #16
 80009d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009d4:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80009d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009d8:	f025 fbc6 	bl	8026168 <memset>
  HAL_MPU_Disable();
 80009dc:	f008 fb84 	bl	80090e8 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80009e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80009e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ce0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009e6:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009e8:	f8ad 40bc 	strh.w	r4, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009ec:	9432      	str	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80009ee:	e9cd 1330 	strd	r1, r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009f2:	f008 fb97 	bl	8009124 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80009f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009f8:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80009fa:	f88d 40bd 	strb.w	r4, [sp, #189]	@ 0xbd
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80009fe:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a02:	f008 fb8f 	bl	8009124 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000a06:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a08:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000a0a:	f88d 40ca 	strb.w	r4, [sp, #202]	@ 0xca
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000a0e:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000a12:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a16:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000a18:	2318      	movs	r3, #24
 8000a1a:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a1e:	f008 fb81 	bl	8009124 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000a22:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a24:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000a26:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000a2a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000a2e:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000a30:	2312      	movs	r3, #18
 8000a32:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f88d 30c8 	strb.w	r3, [sp, #200]	@ 0xc8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a3c:	f008 fb72 	bl	8009124 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000a40:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a44:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000a46:	f88d 50bd 	strb.w	r5, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000a4a:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000a4c:	2311      	movs	r3, #17
 8000a4e:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a52:	f008 fb67 	bl	8009124 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000a56:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a58:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a5a:	f88d 40c8 	strb.w	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000a5e:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000a62:	4ba0      	ldr	r3, [pc, #640]	@ (8000ce4 <main+0x31c>)
 8000a64:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000a66:	230e      	movs	r3, #14
 8000a68:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a6c:	f008 fb5a 	bl	8009124 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a70:	4628      	mov	r0, r5
 8000a72:	f008 fb47 	bl	8009104 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a76:	4b9c      	ldr	r3, [pc, #624]	@ (8000ce8 <main+0x320>)
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000a7e:	d111      	bne.n	8000aa4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a84:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a88:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a90:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a94:	695a      	ldr	r2, [r3, #20]
 8000a96:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000a9a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000aa0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000aa4:	4a90      	ldr	r2, [pc, #576]	@ (8000ce8 <main+0x320>)
 8000aa6:	6953      	ldr	r3, [r2, #20]
 8000aa8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000aac:	d123      	bne.n	8000af6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000aae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ab6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000abe:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ac2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000ac6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ac8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000acc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ace:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ad2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ad4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000ad8:	d2f9      	bcs.n	8000ace <main+0x106>
    } while(sets-- != 0U);
 8000ada:	3b20      	subs	r3, #32
 8000adc:	f113 0f20 	cmn.w	r3, #32
 8000ae0:	d1f2      	bne.n	8000ac8 <main+0x100>
 8000ae2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ae6:	6953      	ldr	r3, [r2, #20]
 8000ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aec:	6153      	str	r3, [r2, #20]
 8000aee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000af2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000af6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000afa:	4d7c      	ldr	r5, [pc, #496]	@ (8000cec <main+0x324>)
 8000afc:	682c      	ldr	r4, [r5, #0]
 8000afe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000b02:	f000 8344 	beq.w	800118e <main+0x7c6>
 8000b06:	3b01      	subs	r3, #1
 8000b08:	d2f8      	bcs.n	8000afc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0a:	b672      	cpsid	i
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <main+0x144>
 8000b0e:	b672      	cpsid	i
 8000b10:	e7fe      	b.n	8000b10 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000b12:	4877      	ldr	r0, [pc, #476]	@ (8000cf0 <main+0x328>)
 8000b14:	4a77      	ldr	r2, [pc, #476]	@ (8000cf4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b16:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000b18:	f8c0 9020 	str.w	r9, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000b1c:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b20:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b24:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b28:	f00b fa10 	bl	800bf4c <HAL_QSPI_Init>
 8000b2c:	b108      	cbz	r0, 8000b32 <main+0x16a>
 8000b2e:	b672      	cpsid	i
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <main+0x168>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000b32:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000b36:	a92f      	add	r1, sp, #188	@ 0xbc
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000b38:	f88d 90be 	strb.w	r9, [sp, #190]	@ 0xbe
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000b3c:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000b40:	f007 fdb2 	bl	80086a8 <BSP_QSPI_Init>
 8000b44:	b108      	cbz	r0, 8000b4a <main+0x182>
 8000b46:	b672      	cpsid	i
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <main+0x180>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000b4a:	f007 fd59 	bl	8008600 <BSP_QSPI_EnableMemoryMappedMode>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b108      	cbz	r0, 8000b56 <main+0x18e>
 8000b52:	b672      	cpsid	i
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <main+0x18c>
  hdma2d.Instance = DMA2D;
 8000b56:	4868      	ldr	r0, [pc, #416]	@ (8000cf8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b58:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b5c:	4f67      	ldr	r7, [pc, #412]	@ (8000cfc <main+0x334>)
  hdma2d.Init.OutputOffset = 0;
 8000b5e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b62:	e9c0 7200 	strd	r7, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b66:	f008 fb6a 	bl	800923e <HAL_DMA2D_Init>
 8000b6a:	4607      	mov	r7, r0
 8000b6c:	b108      	cbz	r0, 8000b72 <main+0x1aa>
 8000b6e:	b672      	cpsid	i
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000b72:	4602      	mov	r2, r0
 8000b74:	4641      	mov	r1, r8
 8000b76:	4862      	ldr	r0, [pc, #392]	@ (8000d00 <main+0x338>)
 8000b78:	f009 fa44 	bl	800a004 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000b7c:	2014      	movs	r0, #20
 8000b7e:	f008 fa37 	bl	8008ff0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000b82:	4641      	mov	r1, r8
 8000b84:	462a      	mov	r2, r5
 8000b86:	485e      	ldr	r0, [pc, #376]	@ (8000d00 <main+0x338>)
 8000b88:	f009 fa3c 	bl	800a004 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000b8c:	200a      	movs	r0, #10
 8000b8e:	f008 fa2f 	bl	8008ff0 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b92:	2224      	movs	r2, #36	@ 0x24
 8000b94:	4639      	mov	r1, r7
 8000b96:	a819      	add	r0, sp, #100	@ 0x64
 8000b98:	f025 fae6 	bl	8026168 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b9c:	2218      	movs	r2, #24
 8000b9e:	4639      	mov	r1, r7
 8000ba0:	a813      	add	r0, sp, #76	@ 0x4c
 8000ba2:	f025 fae1 	bl	8026168 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000ba6:	2234      	movs	r2, #52	@ 0x34
 8000ba8:	4639      	mov	r1, r7
 8000baa:	a82f      	add	r0, sp, #188	@ 0xbc
 8000bac:	f025 fadc 	bl	8026168 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000bb0:	4639      	mov	r1, r7
 8000bb2:	222c      	movs	r2, #44	@ 0x2c
 8000bb4:	a822      	add	r0, sp, #136	@ 0x88
 8000bb6:	f025 fad7 	bl	8026168 <memset>
  hdsi.Instance = DSI;
 8000bba:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 8000d04 <main+0x33c>
 8000bbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000bc2:	a910      	add	r1, sp, #64	@ 0x40
 8000bc4:	4640      	mov	r0, r8
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000bc6:	9512      	str	r5, [sp, #72]	@ 0x48
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000bc8:	e9c8 3700 	strd	r3, r7, [r8]
  PLLInit.PLLNDIV = 119;
 8000bcc:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000bce:	e9c8 4502 	strd	r4, r5, [r8, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000bd2:	e9cd 3610 	strd	r3, r6, [sp, #64]	@ 0x40
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000bd6:	f008 fc7f 	bl	80094d8 <HAL_DSI_Init>
 8000bda:	b108      	cbz	r0, 8000be0 <main+0x218>
 8000bdc:	b672      	cpsid	i
  while (1)
 8000bde:	e7fe      	b.n	8000bde <main+0x216>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000be0:	e9cd 5019 	strd	r5, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000be4:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000be8:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000bec:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  HostTimeouts.BTATimeout = 0;
 8000bf0:	9021      	str	r0, [sp, #132]	@ 0x84
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000bf2:	a919      	add	r1, sp, #100	@ 0x64
 8000bf4:	4640      	mov	r0, r8
 8000bf6:	f008 fedb 	bl	80099b0 <HAL_DSI_ConfigHostTimeouts>
 8000bfa:	b108      	cbz	r0, 8000c00 <main+0x238>
 8000bfc:	b672      	cpsid	i
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <main+0x236>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000c00:	2321      	movs	r3, #33	@ 0x21
 8000c02:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000c04:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c06:	a913      	add	r1, sp, #76	@ 0x4c
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000c08:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 8000c0c:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000c0e:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c12:	4640      	mov	r0, r8
  PhyTimings.DataLaneLP2HSTime = 25;
 8000c14:	e9cd 6315 	strd	r6, r3, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000c18:	f008 fe8d 	bl	8009936 <HAL_DSI_ConfigPhyTimer>
 8000c1c:	b108      	cbz	r0, 8000c22 <main+0x25a>
 8000c1e:	b672      	cpsid	i
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <main+0x258>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000c22:	2104      	movs	r1, #4
 8000c24:	4837      	ldr	r0, [pc, #220]	@ (8000d04 <main+0x33c>)
 8000c26:	f008 fe75 	bl	8009914 <HAL_DSI_ConfigFlowControl>
 8000c2a:	b108      	cbz	r0, 8000c30 <main+0x268>
 8000c2c:	b672      	cpsid	i
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <main+0x266>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c30:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000c34:	4833      	ldr	r0, [pc, #204]	@ (8000d04 <main+0x33c>)
 8000c36:	f009 f844 	bl	8009cc2 <HAL_DSI_SetLowPowerRXFilter>
 8000c3a:	4601      	mov	r1, r0
 8000c3c:	b108      	cbz	r0, 8000c42 <main+0x27a>
 8000c3e:	b672      	cpsid	i
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <main+0x278>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000c42:	4830      	ldr	r0, [pc, #192]	@ (8000d04 <main+0x33c>)
 8000c44:	f008 fbe5 	bl	8009412 <HAL_DSI_ConfigErrorMonitor>
 8000c48:	b108      	cbz	r0, 8000c4e <main+0x286>
 8000c4a:	b672      	cpsid	i
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <main+0x284>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c52:	f44f 7a80 	mov.w	sl, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c56:	f44f 6b80 	mov.w	fp, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000c5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000c5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c62:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c66:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000c6a:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000c6e:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000c76:	f8cd 80ec 	str.w	r8, [sp, #236]	@ 0xec
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c7a:	e9cd b331 	strd	fp, r3, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c82:	e9cd 2333 	strd	r2, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000c86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8a:	e9cd 1335 	strd	r1, r3, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c8e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c92:	a92f      	add	r1, sp, #188	@ 0xbc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c94:	e9cd 0337 	strd	r0, r3, [sp, #220]	@ 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c9c:	4819      	ldr	r0, [pc, #100]	@ (8000d04 <main+0x33c>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c9e:	e9cd 4339 	strd	r4, r3, [sp, #228]	@ 0xe4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ca2:	f008 fe03 	bl	80098ac <HAL_DSI_ConfigCommand>
 8000ca6:	b108      	cbz	r0, 8000cac <main+0x2e4>
 8000ca8:	b672      	cpsid	i
  while (1)
 8000caa:	e7fe      	b.n	8000caa <main+0x2e2>
  CmdCfg.CommandSize = 400;
 8000cac:	2305      	movs	r3, #5
 8000cae:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000cb2:	2601      	movs	r6, #1
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000cb4:	a922      	add	r1, sp, #136	@ 0x88
  CmdCfg.VirtualChannelID = 0;
 8000cb6:	9022      	str	r0, [sp, #136]	@ 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000cb8:	9029      	str	r0, [sp, #164]	@ 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000cba:	962c      	str	r6, [sp, #176]	@ 0xb0
  CmdCfg.CommandSize = 400;
 8000cbc:	e9cd 3723 	strd	r3, r7, [sp, #140]	@ 0x8c
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000cc0:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000cc2:	e9cd 3025 	strd	r3, r0, [sp, #148]	@ 0x94
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000cc6:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000cc8:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000ccc:	e9cd 302a 	strd	r3, r0, [sp, #168]	@ 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <main+0x33c>)
 8000cd2:	f008 fd79 	bl	80097c8 <HAL_DSI_ConfigAdaptedCommandMode>
 8000cd6:	4601      	mov	r1, r0
 8000cd8:	b1b0      	cbz	r0, 8000d08 <main+0x340>
 8000cda:	b672      	cpsid	i
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0x314>
 8000cde:	bf00      	nop
 8000ce0:	0300001b 	.word	0x0300001b
 8000ce4:	10040000 	.word	0x10040000
 8000ce8:	e000ed00 	.word	0xe000ed00
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	24000470 	.word	0x24000470
 8000cf4:	52005000 	.word	0x52005000
 8000cf8:	240006b0 	.word	0x240006b0
 8000cfc:	52001000 	.word	0x52001000
 8000d00:	58021800 	.word	0x58021800
 8000d04:	24000694 	.word	0x24000694
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000d08:	4880      	ldr	r0, [pc, #512]	@ (8000f0c <main+0x544>)
 8000d0a:	f008 fd4c 	bl	80097a6 <HAL_DSI_SetGenericVCID>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	b108      	cbz	r0, 8000d16 <main+0x34e>
 8000d12:	b672      	cpsid	i
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d16:	2234      	movs	r2, #52	@ 0x34
 8000d18:	4601      	mov	r1, r0
 8000d1a:	a822      	add	r0, sp, #136	@ 0x88
  hltdc.Instance = LTDC;
 8000d1c:	4d7c      	ldr	r5, [pc, #496]	@ (8000f10 <main+0x548>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d1e:	f025 fa23 	bl	8026168 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000d22:	f8df e238 	ldr.w	lr, [pc, #568]	@ 8000f5c <main+0x594>
 8000d26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedVBP = 2;
 8000d2a:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.TotalHeigh = 483;
 8000d2e:	f240 1993 	movw	r9, #403	@ 0x193
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000d34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000d36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000d3a:	e9c5 e300 	strd	lr, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.AccumulatedHBP = 2;
 8000d42:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d46:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000d4a:	f44f 78c9 	mov.w	r8, #402	@ 0x192
 8000d4e:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8000d52:	e9c5 8309 	strd	r8, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000d56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000d5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000d5e:	e9c5 930b 	strd	r9, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d62:	f00a fcbb 	bl	800b6dc <HAL_LTDC_Init>
 8000d66:	4602      	mov	r2, r0
 8000d68:	b108      	cbz	r0, 8000d6e <main+0x3a6>
 8000d6a:	b672      	cpsid	i
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000d6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d70:	f44f 6cc0 	mov.w	ip, #1536	@ 0x600
  pLayerCfg.WindowY1 = 480;
 8000d74:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000d78:	9024      	str	r0, [sp, #144]	@ 0x90
  pLayerCfg.Backcolor.Blue = 0;
 8000d7a:	f8ad 00b8 	strh.w	r0, [sp, #184]	@ 0xb8
  pLayerCfg.Backcolor.Red = 0;
 8000d7e:	f88d 00ba 	strb.w	r0, [sp, #186]	@ 0xba
  pLayerCfg.ImageHeight = 480;
 8000d82:	932d      	str	r3, [sp, #180]	@ 0xb4
  pLayerCfg.Alpha0 = 0;
 8000d84:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d88:	2107      	movs	r1, #7
 8000d8a:	e9cd c129 	strd	ip, r1, [sp, #164]	@ 0xa4
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000d8e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000d92:	e9cd 0722 	strd	r0, r7, [sp, #136]	@ 0x88
  pLayerCfg.ImageWidth = 400;
 8000d96:	e9cd 172b 	strd	r1, r7, [sp, #172]	@ 0xac
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d9a:	4628      	mov	r0, r5
 8000d9c:	a922      	add	r1, sp, #136	@ 0x88
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d9e:	e9cd 3625 	strd	r3, r6, [sp, #148]	@ 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000da2:	f00a fd50 	bl	800b846 <HAL_LTDC_ConfigLayer>
 8000da6:	4604      	mov	r4, r0
 8000da8:	b108      	cbz	r0, 8000dae <main+0x3e6>
 8000daa:	b672      	cpsid	i
  while (1)
 8000dac:	e7fe      	b.n	8000dac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000dae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000db0:	4856      	ldr	r0, [pc, #344]	@ (8000f0c <main+0x544>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000db2:	6993      	ldr	r3, [r2, #24]
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000dba:	f008 fe5f 	bl	8009a7c <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000dbe:	4955      	ldr	r1, [pc, #340]	@ (8000f14 <main+0x54c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000dc0:	4b55      	ldr	r3, [pc, #340]	@ (8000f18 <main+0x550>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000dc2:	4856      	ldr	r0, [pc, #344]	@ (8000f1c <main+0x554>)
  IOCtx.GetTick     = BSP_GetTick;
 8000dc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000dc6:	4b56      	ldr	r3, [pc, #344]	@ (8000f20 <main+0x558>)
  IOCtx.Address     = 0;
 8000dc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000dca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000dcc:	4b55      	ldr	r3, [pc, #340]	@ (8000f24 <main+0x55c>)
 8000dce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000dd0:	f007 fa0e 	bl	80081f0 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000dd4:	4632      	mov	r2, r6
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	4850      	ldr	r0, [pc, #320]	@ (8000f1c <main+0x554>)
 8000dda:	f006 fe79 	bl	8007ad0 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000dde:	2328      	movs	r3, #40	@ 0x28
 8000de0:	2215      	movs	r2, #21
 8000de2:	4621      	mov	r1, r4
 8000de4:	4849      	ldr	r0, [pc, #292]	@ (8000f0c <main+0x544>)
 8000de6:	9400      	str	r4, [sp, #0]
 8000de8:	f008 fe7b 	bl	8009ae2 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000dec:	a92f      	add	r1, sp, #188	@ 0xbc
 8000dee:	4847      	ldr	r0, [pc, #284]	@ (8000f0c <main+0x544>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000df0:	9439      	str	r4, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000df2:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000df6:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000dfa:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000dfe:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000e02:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000e06:	f008 fd51 	bl	80098ac <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000e10:	4628      	mov	r0, r5
 8000e12:	f00a fd45 	bl	800b8a0 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000e16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000e18:	4843      	ldr	r0, [pc, #268]	@ (8000f28 <main+0x560>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000e1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000e24:	4b41      	ldr	r3, [pc, #260]	@ (8000f2c <main+0x564>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000e28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e2e:	f008 f9a5 	bl	800917c <HAL_CRC_Init>
 8000e32:	b108      	cbz	r0, 8000e38 <main+0x470>
 8000e34:	b672      	cpsid	i
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000e38:	483d      	ldr	r0, [pc, #244]	@ (8000f30 <main+0x568>)
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f34 <main+0x56c>)
 8000e3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000e3e:	f009 fe3b 	bl	800aab8 <HAL_JPEG_Init>
 8000e42:	b108      	cbz	r0, 8000e48 <main+0x480>
 8000e44:	b672      	cpsid	i
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <main+0x47e>
  hspi5.Instance = SPI5;
 8000e48:	483b      	ldr	r0, [pc, #236]	@ (8000f38 <main+0x570>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e4e:	4a3b      	ldr	r2, [pc, #236]	@ (8000f3c <main+0x574>)
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e50:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e54:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e58:	e9c0 2300 	strd	r2, r3, [r0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e5c:	2307      	movs	r3, #7
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e5e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e62:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e66:	e9c0 4206 	strd	r4, r2, [r0, #24]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e6a:	2300      	movs	r3, #0
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e70:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e74:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi5.Init.CRCPolynomial = 0x0;
 8000e78:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e7c:	e9c0 230d 	strd	r2, r3, [r0, #52]	@ 0x34
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e80:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e84:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e88:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e8c:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e90:	f00c fe30 	bl	800daf4 <HAL_SPI_Init>
 8000e94:	4604      	mov	r4, r0
 8000e96:	b108      	cbz	r0, 8000e9c <main+0x4d4>
 8000e98:	b672      	cpsid	i
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <main+0x4d2>
  MX_TouchGFX_Init();
 8000e9c:	f000 fe2a 	bl	8001af4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000ea0:	f000 fe27 	bl	8001af2 <MX_TouchGFX_PreOSInit>
  HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);  // CS desactivado por defecto
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eaa:	4825      	ldr	r0, [pc, #148]	@ (8000f40 <main+0x578>)
 8000eac:	f009 f8aa 	bl	800a004 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000eb0:	2064      	movs	r0, #100	@ 0x64
 8000eb2:	f008 f89d 	bl	8008ff0 <HAL_Delay>
  MAX7219_ResetAll();  // Inicializa todas las matrices
 8000eb6:	f7ff fd05 	bl	80008c4 <MAX7219_ResetAll>
  HAL_Delay(50);
 8000eba:	2032      	movs	r0, #50	@ 0x32
 8000ebc:	f008 f898 	bl	8008ff0 <HAL_Delay>
  HAL_Delay(500);
 8000ec0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ec4:	f008 f894 	bl	8008ff0 <HAL_Delay>
  MAX7219_ClearAll();
 8000ec8:	f7ff fc94 	bl	80007f4 <MAX7219_ClearAll>
  HAL_Delay(500);
 8000ecc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ed0:	f008 f88e 	bl	8008ff0 <HAL_Delay>
  MAX7219_ResetAll();
 8000ed4:	f7ff fcf6 	bl	80008c4 <MAX7219_ResetAll>
  HAL_Delay(500);
 8000ed8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000edc:	f008 f888 	bl	8008ff0 <HAL_Delay>
  MAX7219_ClearAll();
 8000ee0:	f7ff fc88 	bl	80007f4 <MAX7219_ClearAll>
  osKernelInitialize();
 8000ee4:	f00d fa26 	bl	800e334 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000ee8:	4a16      	ldr	r2, [pc, #88]	@ (8000f44 <main+0x57c>)
 8000eea:	4621      	mov	r1, r4
 8000eec:	4816      	ldr	r0, [pc, #88]	@ (8000f48 <main+0x580>)
 8000eee:	f00d fa4d 	bl	800e38c <osThreadNew>
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <main+0x584>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000ef4:	4a16      	ldr	r2, [pc, #88]	@ (8000f50 <main+0x588>)
 8000ef6:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000ef8:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000efa:	4816      	ldr	r0, [pc, #88]	@ (8000f54 <main+0x58c>)
 8000efc:	f00d fa46 	bl	800e38c <osThreadNew>
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <main+0x590>)
 8000f02:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000f04:	f00d fa28 	bl	800e358 <osKernelStart>
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <main+0x540>
 8000f0a:	bf00      	nop
 8000f0c:	24000694 	.word	0x24000694
 8000f10:	240004bc 	.word	0x240004bc
 8000f14:	2400037c 	.word	0x2400037c
 8000f18:	080085d1 	.word	0x080085d1
 8000f1c:	2400038c 	.word	0x2400038c
 8000f20:	0800209d 	.word	0x0800209d
 8000f24:	080020d5 	.word	0x080020d5
 8000f28:	24000718 	.word	0x24000718
 8000f2c:	58024c00 	.word	0x58024c00
 8000f30:	2400063c 	.word	0x2400063c
 8000f34:	52003000 	.word	0x52003000
 8000f38:	240003e8 	.word	0x240003e8
 8000f3c:	40015000 	.word	0x40015000
 8000f40:	58022400 	.word	0x58022400
 8000f44:	08026d2c 	.word	0x08026d2c
 8000f48:	08001b03 	.word	0x08001b03
 8000f4c:	240003b0 	.word	0x240003b0
 8000f50:	08026d08 	.word	0x08026d08
 8000f54:	08003c3d 	.word	0x08003c3d
 8000f58:	240003ac 	.word	0x240003ac
 8000f5c:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2214      	movs	r2, #20
 8000f62:	2100      	movs	r1, #0
 8000f64:	a82f      	add	r0, sp, #188	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f025 f8fe 	bl	8026168 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f6c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8000f70:	2200      	movs	r2, #0
 8000f72:	f641 3108 	movw	r1, #6920	@ 0x1b08
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8000f7a:	4896      	ldr	r0, [pc, #600]	@ (80011d4 <main+0x80c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	f04f 0b00 	mov.w	fp, #0
 8000f80:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f82:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2702      	movs	r7, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f88:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	f44f 7980 	mov.w	r9, #256	@ 0x100
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000f90:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f94:	f44f 6a00 	mov.w	sl, #2048	@ 0x800
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9c:	9305      	str	r3, [sp, #20]
 8000f9e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	9306      	str	r3, [sp, #24]
 8000fb6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fc4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fcc:	9307      	str	r3, [sp, #28]
 8000fce:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fdc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	9308      	str	r3, [sp, #32]
 8000fe6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000ff4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001000:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800100c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	930a      	str	r3, [sp, #40]	@ 0x28
 8001016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001018:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800101c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001020:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001024:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800102c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800102e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001030:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800103c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	930c      	str	r3, [sp, #48]	@ 0x30
 8001046:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001054:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	930d      	str	r3, [sp, #52]	@ 0x34
 800105e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001060:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800106c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001070:	f003 0320 	and.w	r3, r3, #32
 8001074:	930e      	str	r3, [sp, #56]	@ 0x38
 8001076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001078:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800107c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001080:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001084:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800108c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800108e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8001090:	f008 ffb8 	bl	800a004 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2108      	movs	r1, #8
 8001098:	484f      	ldr	r0, [pc, #316]	@ (80011d8 <main+0x810>)
 800109a:	f008 ffb3 	bl	800a004 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a4:	484d      	ldr	r0, [pc, #308]	@ (80011dc <main+0x814>)
 80010a6:	f008 ffad 	bl	800a004 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ae:	a92f      	add	r1, sp, #188	@ 0xbc
 80010b0:	4848      	ldr	r0, [pc, #288]	@ (80011d4 <main+0x80c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	e9cd 352f 	strd	r3, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	e9cd b631 	strd	fp, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ba:	f008 fe19 	bl	8009cf0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	a92f      	add	r1, sp, #188	@ 0xbc
 80010c0:	4847      	ldr	r0, [pc, #284]	@ (80011e0 <main+0x818>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80010c2:	f8cd b0cc 	str.w	fp, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	e9cd 972f 	strd	r9, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	e9cd bb31 	strd	fp, fp, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f008 fe0f 	bl	8009cf0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80010d2:	a92f      	add	r1, sp, #188	@ 0xbc
 80010d4:	4840      	ldr	r0, [pc, #256]	@ (80011d8 <main+0x810>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	e9cd 852f 	strd	r8, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	e9cd 5631 	strd	r5, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80010de:	f008 fe07 	bl	8009cf0 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010e2:	a92f      	add	r1, sp, #188	@ 0xbc
 80010e4:	483d      	ldr	r0, [pc, #244]	@ (80011dc <main+0x814>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	e9cd 952f 	strd	r9, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	e9cd b631 	strd	fp, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f008 fdff 	bl	8009cf0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010f2:	a92f      	add	r1, sp, #188	@ 0xbc
 80010f4:	4837      	ldr	r0, [pc, #220]	@ (80011d4 <main+0x80c>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010f6:	f04f 0940 	mov.w	r9, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	e9cd a52f 	strd	sl, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	e9cd bb31 	strd	fp, fp, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001102:	f008 fdf5 	bl	8009cf0 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001106:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 800110a:	465a      	mov	r2, fp
 800110c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 800110e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001110:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001112:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8001116:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800111a:	2404      	movs	r4, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 800111c:	402b      	ands	r3, r5
 800111e:	9304      	str	r3, [sp, #16]
 8001120:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001122:	f007 ff8f 	bl	8009044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001126:	207a      	movs	r0, #122	@ 0x7a
 8001128:	f007 ffbe 	bl	80090a8 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 800112c:	4a2d      	ldr	r2, [pc, #180]	@ (80011e4 <main+0x81c>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800112e:	482e      	ldr	r0, [pc, #184]	@ (80011e8 <main+0x820>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001130:	a92f      	add	r1, sp, #188	@ 0xbc
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8001132:	6813      	ldr	r3, [r2, #0]
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	6013      	str	r3, [r2, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800113a:	4b2c      	ldr	r3, [pc, #176]	@ (80011ec <main+0x824>)
  SdramTiming.LoadToActiveDelay = 2;
 800113c:	972f      	str	r7, [sp, #188]	@ 0xbc
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800113e:	6085      	str	r5, [r0, #8]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001140:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001144:	2320      	movs	r3, #32
 8001146:	e9c0 4303 	strd	r4, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800114a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800114e:	e9c0 9305 	strd	r9, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001156:	e9c0 3b09 	strd	r3, fp, [r0, #36]	@ 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 800115a:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 800115c:	e9cd 7734 	strd	r7, r7, [sp, #208]	@ 0xd0
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001160:	e9c0 ba07 	strd	fp, sl, [r0, #28]
  SdramTiming.SelfRefreshTime = 4;
 8001164:	e9cd 3430 	strd	r3, r4, [sp, #192]	@ 0xc0
  SdramTiming.WriteRecoveryTime = 3;
 8001168:	e9cd 3632 	strd	r3, r6, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800116c:	f00c fbfe 	bl	800d96c <HAL_SDRAM_Init>
 8001170:	4607      	mov	r7, r0
 8001172:	2800      	cmp	r0, #0
 8001174:	f47f accb 	bne.w	8000b0e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8001178:	f007 fc50 	bl	8008a1c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800117c:	4638      	mov	r0, r7
 800117e:	f007 fc9b 	bl	8008ab8 <BSP_SDRAM_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2800      	cmp	r0, #0
 8001186:	f43f acc4 	beq.w	8000b12 <main+0x14a>
 800118a:	b672      	cpsid	i
  while (1)
 800118c:	e7fe      	b.n	800118c <main+0x7c4>
  HAL_Init();
 800118e:	f007 feef 	bl	8008f70 <HAL_Init>
  SystemClock_Config();
 8001192:	f7ff fbb7 	bl	8000904 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8001196:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 800119a:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 800119c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011a0:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80011a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80011a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ac:	9303      	str	r3, [sp, #12]
 80011ae:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 80011b0:	f008 ff36 	bl	800a020 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 80011b4:	4621      	mov	r1, r4
 80011b6:	4620      	mov	r0, r4
 80011b8:	f008 ff40 	bl	800a03c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80011bc:	4c0c      	ldr	r4, [pc, #48]	@ (80011f0 <main+0x828>)
timeout = 0xFFFF;
 80011be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80011c2:	6822      	ldr	r2, [r4, #0]
 80011c4:	0412      	lsls	r2, r2, #16
 80011c6:	f53f aecb 	bmi.w	8000f60 <main+0x598>
 80011ca:	3b01      	subs	r3, #1
 80011cc:	d2f9      	bcs.n	80011c2 <main+0x7fa>
 80011ce:	b672      	cpsid	i
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <main+0x808>
 80011d2:	bf00      	nop
 80011d4:	58022400 	.word	0x58022400
 80011d8:	58021800 	.word	0x58021800
 80011dc:	58021400 	.word	0x58021400
 80011e0:	58020000 	.word	0x58020000
 80011e4:	52004000 	.word	0x52004000
 80011e8:	240003b4 	.word	0x240003b4
 80011ec:	52004140 	.word	0x52004140
 80011f0:	58024400 	.word	0x58024400

080011f4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80011f4:	6802      	ldr	r2, [r0, #0]
 80011f6:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d101      	bne.n	8001200 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80011fc:	f007 bee6 	b.w	8008fcc <HAL_IncTick>
}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40001000 	.word	0x40001000

08001208 <Error_Handler>:
 8001208:	b672      	cpsid	i
  while (1)
 800120a:	e7fe      	b.n	800120a <Error_Handler+0x2>

0800120c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_MspInit+0x2c>)
{
 800120e:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001210:	210f      	movs	r1, #15
 8001212:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800121a:	f042 0202 	orr.w	r2, r2, #2
 800121e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001222:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001230:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001232:	f007 bf07 	b.w	8009044 <HAL_NVIC_SetPriority>
 8001236:	bf00      	nop
 8001238:	58024400 	.word	0x58024400

0800123c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800123c:	6802      	ldr	r2, [r0, #0]
{
 800123e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <HAL_CRC_MspInit+0x2c>)
 8001242:	429a      	cmp	r2, r3
 8001244:	d10d      	bne.n	8001262 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001246:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800124a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800124e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001252:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001262:	b002      	add	sp, #8
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	58024c00 	.word	0x58024c00

0800126c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_DMA2D_MspInit+0x40>)
{
 800126e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001270:	6802      	ldr	r2, [r0, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d117      	bne.n	80012a6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001278:	2107      	movs	r1, #7
 800127a:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800127c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001280:	f042 0210 	orr.w	r2, r2, #16
 8001284:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001288:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800128a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001296:	f007 fed5 	bl	8009044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800129a:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800129c:	b003      	add	sp, #12
 800129e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80012a2:	f007 bf01 	b.w	80090a8 <HAL_NVIC_EnableIRQ>
}
 80012a6:	b003      	add	sp, #12
 80012a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ac:	52001000 	.word	0x52001000
 80012b0:	58024400 	.word	0x58024400

080012b4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80012b4:	b510      	push	{r4, lr}
 80012b6:	b0ba      	sub	sp, #232	@ 0xe8
 80012b8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	2214      	movs	r2, #20
 80012bc:	2100      	movs	r1, #0
 80012be:	a803      	add	r0, sp, #12
 80012c0:	f024 ff52 	bl	8026168 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	22c8      	movs	r2, #200	@ 0xc8
 80012c6:	2100      	movs	r1, #0
 80012c8:	a808      	add	r0, sp, #32
 80012ca:	f024 ff4d 	bl	8026168 <memset>
  if(hdsi->Instance==DSI)
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d4:	d138      	bne.n	8001348 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80012d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012da:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012dc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80012de:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e2:	f00b fe35 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	b108      	cbz	r0, 80012ec <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80012e8:	f7ff ff8e 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80012ec:	4b17      	ldr	r3, [pc, #92]	@ (800134c <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012f0:	a903      	add	r1, sp, #12
 80012f2:	4817      	ldr	r0, [pc, #92]	@ (8001350 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80012f4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80012f8:	f042 0210 	orr.w	r2, r2, #16
 80012fc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8001300:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001304:	f002 0210 	and.w	r2, r2, #16
 8001308:	9201      	str	r2, [sp, #4]
 800130a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800130c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001314:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800132c:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001332:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001334:	f008 fcdc 	bl	8009cf0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001338:	207b      	movs	r0, #123	@ 0x7b
 800133a:	4622      	mov	r2, r4
 800133c:	2107      	movs	r1, #7
 800133e:	f007 fe81 	bl	8009044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001342:	207b      	movs	r0, #123	@ 0x7b
 8001344:	f007 feb0 	bl	80090a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001348:	b03a      	add	sp, #232	@ 0xe8
 800134a:	bd10      	pop	{r4, pc}
 800134c:	58024400 	.word	0x58024400
 8001350:	58022400 	.word	0x58022400

08001354 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001354:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001356:	4b3c      	ldr	r3, [pc, #240]	@ (8001448 <HAL_JPEG_MspInit+0xf4>)
{
 8001358:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 800135a:	6802      	ldr	r2, [r0, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d170      	bne.n	8001442 <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001360:	4b3a      	ldr	r3, [pc, #232]	@ (800144c <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001362:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001364:	4c3a      	ldr	r4, [pc, #232]	@ (8001450 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001366:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 800136a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800136e:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 800145c <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001372:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800137c:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800137e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800138a:	2311      	movs	r3, #17
 800138c:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001396:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800139a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800139c:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800139e:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80013a2:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80013a6:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80013aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80013ae:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80013b2:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80013b6:	f00a fade 	bl	800b976 <HAL_MDMA_Init>
 80013ba:	b108      	cbz	r0, 80013c0 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80013bc:	f7ff ff24 	bl	8001208 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80013c0:	2200      	movs	r2, #0
 80013c2:	4823      	ldr	r0, [pc, #140]	@ (8001450 <HAL_JPEG_MspInit+0xfc>)
 80013c4:	4611      	mov	r1, r2
 80013c6:	f00a fb64 	bl	800ba92 <HAL_MDMA_ConfigPostRequestMask>
 80013ca:	b108      	cbz	r0, 80013d0 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 80013cc:	f7ff ff1c 	bl	8001208 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80013d0:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80013d2:	2313      	movs	r3, #19
 80013d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001454 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80013d6:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80013d8:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80013da:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80013de:	4c1e      	ldr	r4, [pc, #120]	@ (8001458 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80013e0:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	22c0      	movs	r2, #192	@ 0xc0
 80013e8:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80013ec:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80013ee:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80013f0:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80013f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80013f8:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80013fc:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 8001400:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001404:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001406:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 800140a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800140e:	f00a fab2 	bl	800b976 <HAL_MDMA_Init>
 8001412:	b108      	cbz	r0, 8001418 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001414:	f7ff fef8 	bl	8001208 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001418:	2200      	movs	r2, #0
 800141a:	480f      	ldr	r0, [pc, #60]	@ (8001458 <HAL_JPEG_MspInit+0x104>)
 800141c:	4611      	mov	r1, r2
 800141e:	f00a fb38 	bl	800ba92 <HAL_MDMA_ConfigPostRequestMask>
 8001422:	b108      	cbz	r0, 8001428 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001424:	f7ff fef0 	bl	8001208 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001428:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001430:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001432:	f007 fe07 	bl	8009044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001436:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001438:	b003      	add	sp, #12
 800143a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800143e:	f007 be33 	b.w	80090a8 <HAL_NVIC_EnableIRQ>
}
 8001442:	b003      	add	sp, #12
 8001444:	bd30      	pop	{r4, r5, pc}
 8001446:	bf00      	nop
 8001448:	52003000 	.word	0x52003000
 800144c:	58024400 	.word	0x58024400
 8001450:	240005d0 	.word	0x240005d0
 8001454:	520001c0 	.word	0x520001c0
 8001458:	24000564 	.word	0x24000564
 800145c:	52000200 	.word	0x52000200

08001460 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001460:	b510      	push	{r4, lr}
 8001462:	b0b4      	sub	sp, #208	@ 0xd0
 8001464:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001466:	22c8      	movs	r2, #200	@ 0xc8
 8001468:	2100      	movs	r1, #0
 800146a:	a802      	add	r0, sp, #8
 800146c:	f024 fe7c 	bl	8026168 <memset>
  if(hltdc->Instance==LTDC)
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_LTDC_MspInit+0x74>)
 8001474:	429a      	cmp	r2, r3
 8001476:	d12b      	bne.n	80014d0 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001478:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800147c:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800147e:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001482:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001486:	23a1      	movs	r3, #161	@ 0xa1
 8001488:	2205      	movs	r2, #5
 800148a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800148e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001490:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001494:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001498:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149c:	f00b fd58 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 80014a0:	b108      	cbz	r0, 80014a6 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80014a2:	f7ff feb1 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80014a8:	2058      	movs	r0, #88	@ 0x58
 80014aa:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014ac:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80014b0:	f042 0208 	orr.w	r2, r2, #8
 80014b4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80014b8:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80014c6:	f007 fdbd 	bl	8009044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014ca:	2058      	movs	r0, #88	@ 0x58
 80014cc:	f007 fdec 	bl	80090a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80014d0:	b034      	add	sp, #208	@ 0xd0
 80014d2:	bd10      	pop	{r4, pc}
 80014d4:	50001000 	.word	0x50001000
 80014d8:	58024400 	.word	0x58024400

080014dc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	b0bf      	sub	sp, #252	@ 0xfc
 80014e0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	2214      	movs	r2, #20
 80014e4:	2100      	movs	r1, #0
 80014e6:	a807      	add	r0, sp, #28
 80014e8:	f024 fe3e 	bl	8026168 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ec:	22c8      	movs	r2, #200	@ 0xc8
 80014ee:	2100      	movs	r1, #0
 80014f0:	a80c      	add	r0, sp, #48	@ 0x30
 80014f2:	f024 fe39 	bl	8026168 <memset>
  if(hqspi->Instance==QUADSPI)
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <HAL_QSPI_MspInit+0x16c>)
 80014fa:	429a      	cmp	r2, r3
 80014fc:	f040 80a1 	bne.w	8001642 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001504:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001506:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001508:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150c:	f00b fd20 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 8001510:	b108      	cbz	r0, 8001516 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 8001512:	f7ff fe79 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001516:	4b4d      	ldr	r3, [pc, #308]	@ (800164c <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800151c:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800151e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001522:	a907      	add	r1, sp, #28
 8001524:	484a      	ldr	r0, [pc, #296]	@ (8001650 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001526:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001528:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800152c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001530:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001534:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001538:	9201      	str	r2, [sp, #4]
 800153a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800153c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001544:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001548:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800154c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001550:	9202      	str	r2, [sp, #8]
 8001552:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001554:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001560:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001564:	f002 0220 	and.w	r2, r2, #32
 8001568:	9203      	str	r2, [sp, #12]
 800156a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800156c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001570:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001574:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001578:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800157c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001580:	9204      	str	r2, [sp, #16]
 8001582:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001588:	f042 0202 	orr.w	r2, r2, #2
 800158c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001590:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001594:	f002 0202 	and.w	r2, r2, #2
 8001598:	9205      	str	r2, [sp, #20]
 800159a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80015a0:	f042 0208 	orr.w	r2, r2, #8
 80015a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ac:	f003 0308 	and.w	r3, r3, #8
 80015b0:	9306      	str	r3, [sp, #24]
 80015b2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80015b8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015c0:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c2:	f008 fb95 	bl	8009cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c6:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c8:	a907      	add	r1, sp, #28
 80015ca:	4821      	ldr	r0, [pc, #132]	@ (8001650 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015cc:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d6:	f008 fb8b 	bl	8009cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015da:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015dc:	a907      	add	r1, sp, #28
 80015de:	481d      	ldr	r0, [pc, #116]	@ (8001654 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015e0:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ea:	f008 fb81 	bl	8009cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015f2:	a907      	add	r1, sp, #28
 80015f4:	4817      	ldr	r0, [pc, #92]	@ (8001654 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015f6:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001600:	f008 fb76 	bl	8009cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001604:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001606:	a907      	add	r1, sp, #28
 8001608:	4813      	ldr	r0, [pc, #76]	@ (8001658 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800160a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001614:	f008 fb6c 	bl	8009cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001618:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	a907      	add	r1, sp, #28
 800161c:	480f      	ldr	r0, [pc, #60]	@ (800165c <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800161e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f008 fb62 	bl	8009cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800162c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001630:	a907      	add	r1, sp, #28
 8001632:	480b      	ldr	r0, [pc, #44]	@ (8001660 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001634:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163e:	f008 fb57 	bl	8009cf0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001642:	b03f      	add	sp, #252	@ 0xfc
 8001644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001646:	bf00      	nop
 8001648:	52005000 	.word	0x52005000
 800164c:	58024400 	.word	0x58024400
 8001650:	58021800 	.word	0x58021800
 8001654:	58021400 	.word	0x58021400
 8001658:	58021c00 	.word	0x58021c00
 800165c:	58020400 	.word	0x58020400
 8001660:	58020c00 	.word	0x58020c00

08001664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	b0ba      	sub	sp, #232	@ 0xe8
 8001668:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	2214      	movs	r2, #20
 800166c:	2100      	movs	r1, #0
 800166e:	a803      	add	r0, sp, #12
 8001670:	f024 fd7a 	bl	8026168 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001674:	22c8      	movs	r2, #200	@ 0xc8
 8001676:	2100      	movs	r1, #0
 8001678:	a808      	add	r0, sp, #32
 800167a:	f024 fd75 	bl	8026168 <memset>
  if(hspi->Instance==SPI5)
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	4b26      	ldr	r3, [pc, #152]	@ (800171c <HAL_SPI_MspInit+0xb8>)
 8001682:	429a      	cmp	r2, r3
 8001684:	d147      	bne.n	8001716 <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001686:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800168a:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800168e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001692:	f00b fc5d 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	b108      	cbz	r0, 800169c <HAL_SPI_MspInit+0x38>
    {
      Error_Handler();
 8001698:	f7ff fdb6 	bl	8001208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_SPI_MspInit+0xbc>)
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016a2:	2505      	movs	r5, #5
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016a4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80016a8:	a903      	add	r1, sp, #12
 80016aa:	481e      	ldr	r0, [pc, #120]	@ (8001724 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80016ac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80016b0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80016b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80016b8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80016bc:	9200      	str	r2, [sp, #0]
 80016be:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80016c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80016c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016d0:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80016d4:	9201      	str	r2, [sp, #4]
 80016d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016e8:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80016fc:	f008 faf8 	bl	8009cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001704:	a903      	add	r1, sp, #12
 8001706:	4808      	ldr	r0, [pc, #32]	@ (8001728 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001708:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001712:	f008 faed 	bl	8009cf0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001716:	b03a      	add	sp, #232	@ 0xe8
 8001718:	bd70      	pop	{r4, r5, r6, pc}
 800171a:	bf00      	nop
 800171c:	40015000 	.word	0x40015000
 8001720:	58024400 	.word	0x58024400
 8001724:	58022800 	.word	0x58022800
 8001728:	58022400 	.word	0x58022400

0800172c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001730:	2100      	movs	r1, #0
 8001732:	2214      	movs	r2, #20
 8001734:	a801      	add	r0, sp, #4
 8001736:	f024 fd17 	bl	8026168 <memset>
  if (FMC_Initialized) {
 800173a:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <HAL_SDRAM_MspInit+0x10c>)
 800173c:	6819      	ldr	r1, [r3, #0]
 800173e:	2900      	cmp	r1, #0
 8001740:	d177      	bne.n	8001832 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 8001742:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001744:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001746:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001748:	22c0      	movs	r2, #192	@ 0xc0
 800174a:	f024 fd0d 	bl	8026168 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800174e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001752:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001754:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001756:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175a:	f00b fbf9 	bl	800cf50 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	b108      	cbz	r0, 8001764 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001760:	f7ff fd52 	bl	8001208 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001764:	4b35      	ldr	r3, [pc, #212]	@ (800183c <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2600      	movs	r6, #0
 800176a:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800176c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001770:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001772:	a901      	add	r1, sp, #4
 8001774:	4832      	ldr	r0, [pc, #200]	@ (8001840 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001776:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800177a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800177e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001782:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001798:	f008 faaa 	bl	8009cf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800179c:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	a901      	add	r1, sp, #4
 80017a0:	4828      	ldr	r0, [pc, #160]	@ (8001844 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f008 faa0 	bl	8009cf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80017b0:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b4:	a901      	add	r1, sp, #4
 80017b6:	4824      	ldr	r0, [pc, #144]	@ (8001848 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c2:	f008 fa95 	bl	8009cf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80017c6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ca:	a901      	add	r1, sp, #4
 80017cc:	481f      	ldr	r0, [pc, #124]	@ (800184c <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017d8:	f008 fa8a 	bl	8009cf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80017dc:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e0:	a901      	add	r1, sp, #4
 80017e2:	481b      	ldr	r0, [pc, #108]	@ (8001850 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017e4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ee:	f008 fa7f 	bl	8009cf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80017f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f6:	a901      	add	r1, sp, #4
 80017f8:	4816      	ldr	r0, [pc, #88]	@ (8001854 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	f008 fa74 	bl	8009cf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001808:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800180c:	a901      	add	r1, sp, #4
 800180e:	4812      	ldr	r0, [pc, #72]	@ (8001858 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001810:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800181a:	f008 fa69 	bl	8009cf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800181e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	a901      	add	r1, sp, #4
 8001822:	480e      	ldr	r0, [pc, #56]	@ (800185c <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001824:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f008 fa5f 	bl	8009cf0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001832:	b039      	add	sp, #228	@ 0xe4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	bf00      	nop
 8001838:	24000740 	.word	0x24000740
 800183c:	58024400 	.word	0x58024400
 8001840:	58022000 	.word	0x58022000
 8001844:	58020400 	.word	0x58020400
 8001848:	58021000 	.word	0x58021000
 800184c:	58021c00 	.word	0x58021c00
 8001850:	58021800 	.word	0x58021800
 8001854:	58020c00 	.word	0x58020c00
 8001858:	58021400 	.word	0x58021400
 800185c:	58020800 	.word	0x58020800

08001860 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_SDRAM_MspDeInit+0x6c>)
 8001862:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001864:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 8001866:	bb82      	cbnz	r2, 80018ca <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 800186a:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 800186c:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001870:	4818      	ldr	r0, [pc, #96]	@ (80018d4 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 8001872:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001874:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001878:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800187c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001880:	f008 fb1e 	bl	8009ec0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001884:	2160      	movs	r1, #96	@ 0x60
 8001886:	4814      	ldr	r0, [pc, #80]	@ (80018d8 <HAL_SDRAM_MspDeInit+0x78>)
 8001888:	f008 fb1a 	bl	8009ec0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800188c:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001890:	4812      	ldr	r0, [pc, #72]	@ (80018dc <HAL_SDRAM_MspDeInit+0x7c>)
 8001892:	f008 fb15 	bl	8009ec0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001896:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800189a:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <HAL_SDRAM_MspDeInit+0x80>)
 800189c:	f008 fb10 	bl	8009ec0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80018a0:	f248 1133 	movw	r1, #33075	@ 0x8133
 80018a4:	480f      	ldr	r0, [pc, #60]	@ (80018e4 <HAL_SDRAM_MspDeInit+0x84>)
 80018a6:	f008 fb0b 	bl	8009ec0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80018aa:	f24c 7103 	movw	r1, #50947	@ 0xc703
 80018ae:	480e      	ldr	r0, [pc, #56]	@ (80018e8 <HAL_SDRAM_MspDeInit+0x88>)
 80018b0:	f008 fb06 	bl	8009ec0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80018b4:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <HAL_SDRAM_MspDeInit+0x8c>)
 80018ba:	f008 fb01 	bl	8009ec0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 80018be:	4621      	mov	r1, r4
 80018c0:	480b      	ldr	r0, [pc, #44]	@ (80018f0 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80018c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 80018c6:	f008 bafb 	b.w	8009ec0 <HAL_GPIO_DeInit>
}
 80018ca:	bd10      	pop	{r4, pc}
 80018cc:	2400073c 	.word	0x2400073c
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58022000 	.word	0x58022000
 80018d8:	58020400 	.word	0x58020400
 80018dc:	58021000 	.word	0x58021000
 80018e0:	58021c00 	.word	0x58021c00
 80018e4:	58021800 	.word	0x58021800
 80018e8:	58020c00 	.word	0x58020c00
 80018ec:	58021400 	.word	0x58021400
 80018f0:	58020800 	.word	0x58020800

080018f4 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f4:	280f      	cmp	r0, #15
{
 80018f6:	b510      	push	{r4, lr}
 80018f8:	4604      	mov	r4, r0
 80018fa:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fc:	d902      	bls.n	8001904 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80018fe:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001900:	b00a      	add	sp, #40	@ 0x28
 8001902:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001904:	4601      	mov	r1, r0
 8001906:	2200      	movs	r2, #0
 8001908:	2036      	movs	r0, #54	@ 0x36
 800190a:	f007 fb9b 	bl	8009044 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800190e:	2036      	movs	r0, #54	@ 0x36
 8001910:	f007 fbca 	bl	80090a8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001916:	4669      	mov	r1, sp
 8001918:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 800191a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_InitTick+0x88>)
 800191e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001922:	f042 0210 	orr.w	r2, r2, #16
 8001926:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800192a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001936:	f00b f9f1 	bl	800cd1c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800193a:	9b07      	ldr	r3, [sp, #28]
 800193c:	b9c3      	cbnz	r3, 8001970 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800193e:	f00b f9c9 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001942:	4c0f      	ldr	r4, [pc, #60]	@ (8001980 <HAL_InitTick+0x8c>)
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_InitTick+0x90>)
 8001946:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001948:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800194c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_InitTick+0x94>)
 8001950:	fbb0 f0f3 	udiv	r0, r0, r3
 8001954:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001956:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001958:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800195a:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800195c:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001960:	f00c fc0e 	bl	800e180 <HAL_TIM_Base_Init>
 8001964:	2800      	cmp	r0, #0
 8001966:	d1ca      	bne.n	80018fe <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001968:	4620      	mov	r0, r4
 800196a:	f00c fabd 	bl	800dee8 <HAL_TIM_Base_Start_IT>
 800196e:	e7c7      	b.n	8001900 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001970:	f00b f9b0 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 8001974:	0040      	lsls	r0, r0, #1
 8001976:	e7e4      	b.n	8001942 <HAL_InitTick+0x4e>
 8001978:	24000078 	.word	0x24000078
 800197c:	58024400 	.word	0x58024400
 8001980:	24000744 	.word	0x24000744
 8001984:	40001000 	.word	0x40001000
 8001988:	000f4240 	.word	0x000f4240

0800198c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler>

0800198e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler>

08001990 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler>

08001992 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <BusFault_Handler>

08001994 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler>

08001996 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	4770      	bx	lr

08001998 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001998:	4801      	ldr	r0, [pc, #4]	@ (80019a0 <TIM6_DAC_IRQHandler+0x8>)
 800199a:	f00c bae7 	b.w	800df6c <HAL_TIM_IRQHandler>
 800199e:	bf00      	nop
 80019a0:	24000744 	.word	0x24000744

080019a4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019a4:	4801      	ldr	r0, [pc, #4]	@ (80019ac <LTDC_IRQHandler+0x8>)
 80019a6:	f009 bef1 	b.w	800b78c <HAL_LTDC_IRQHandler>
 80019aa:	bf00      	nop
 80019ac:	240004bc 	.word	0x240004bc

080019b0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019b0:	4801      	ldr	r0, [pc, #4]	@ (80019b8 <DMA2D_IRQHandler+0x8>)
 80019b2:	f007 bc83 	b.w	80092bc <HAL_DMA2D_IRQHandler>
 80019b6:	bf00      	nop
 80019b8:	240006b0 	.word	0x240006b0

080019bc <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 80019bc:	4801      	ldr	r0, [pc, #4]	@ (80019c4 <JPEG_IRQHandler+0x8>)
 80019be:	f009 bdb3 	b.w	800b528 <HAL_JPEG_IRQHandler>
 80019c2:	bf00      	nop
 80019c4:	2400063c 	.word	0x2400063c

080019c8 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <MDMA_IRQHandler+0x14>)
{
 80019ca:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 80019cc:	f00a f8e6 	bl	800bb9c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80019d0:	4803      	ldr	r0, [pc, #12]	@ (80019e0 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80019d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80019d6:	f00a b8e1 	b.w	800bb9c <HAL_MDMA_IRQHandler>
 80019da:	bf00      	nop
 80019dc:	24000564 	.word	0x24000564
 80019e0:	240005d0 	.word	0x240005d0

080019e4 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80019e4:	4801      	ldr	r0, [pc, #4]	@ (80019ec <DSI_IRQHandler+0x8>)
 80019e6:	f007 be6c 	b.w	80096c2 <HAL_DSI_IRQHandler>
 80019ea:	bf00      	nop
 80019ec:	24000694 	.word	0x24000694

080019f0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80019f0:	2001      	movs	r0, #1
 80019f2:	4770      	bx	lr

080019f4 <_kill>:

int _kill(int pid, int sig)
{
 80019f4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019f6:	f024 fc6b 	bl	80262d0 <__errno>
 80019fa:	2316      	movs	r3, #22
 80019fc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80019fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001a02:	bd08      	pop	{r3, pc}

08001a04 <_exit>:

void _exit (int status)
{
 8001a04:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a06:	f024 fc63 	bl	80262d0 <__errno>
 8001a0a:	2316      	movs	r3, #22
 8001a0c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001a0e:	e7fe      	b.n	8001a0e <_exit+0xa>

08001a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	460d      	mov	r5, r1
 8001a14:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	460e      	mov	r6, r1
 8001a18:	1b73      	subs	r3, r6, r5
 8001a1a:	429c      	cmp	r4, r3
 8001a1c:	dc01      	bgt.n	8001a22 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001a1e:	4620      	mov	r0, r4
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	e7f5      	b.n	8001a18 <_read+0x8>

08001a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	460d      	mov	r5, r1
 8001a30:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	460e      	mov	r6, r1
 8001a34:	1b73      	subs	r3, r6, r5
 8001a36:	429c      	cmp	r4, r3
 8001a38:	dc01      	bgt.n	8001a3e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001a3e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001a42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	e7f5      	b.n	8001a34 <_write+0x8>

08001a48 <_close>:

int _close(int file)
{
	return -1;
}
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	4770      	bx	lr

08001a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001a52:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001a54:	604b      	str	r3, [r1, #4]
}
 8001a56:	4770      	bx	lr

08001a58 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a58:	2001      	movs	r0, #1
 8001a5a:	4770      	bx	lr

08001a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	4770      	bx	lr

08001a60 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <_sbrk+0x30>)
{
 8001a62:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001a64:	6811      	ldr	r1, [r2, #0]
{
 8001a66:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001a68:	b909      	cbnz	r1, 8001a6e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001a6a:	490a      	ldr	r1, [pc, #40]	@ (8001a94 <_sbrk+0x34>)
 8001a6c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	6810      	ldr	r0, [r2, #0]
 8001a70:	4909      	ldr	r1, [pc, #36]	@ (8001a98 <_sbrk+0x38>)
 8001a72:	4c0a      	ldr	r4, [pc, #40]	@ (8001a9c <_sbrk+0x3c>)
 8001a74:	4403      	add	r3, r0
 8001a76:	1b09      	subs	r1, r1, r4
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	d906      	bls.n	8001a8a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001a7c:	f024 fc28 	bl	80262d0 <__errno>
 8001a80:	230c      	movs	r3, #12
 8001a82:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001a88:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001a8a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001a8c:	e7fc      	b.n	8001a88 <_sbrk+0x28>
 8001a8e:	bf00      	nop
 8001a90:	24000790 	.word	0x24000790
 8001a94:	24027138 	.word	0x24027138
 8001a98:	24080000 	.word	0x24080000
 8001a9c:	00001000 	.word	0x00001000

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa4:	f007 f9f4 	bl	8008e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aaa:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8001aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ace:	f024 fc05 	bl	80262dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7fe ff79 	bl	80009c8 <main>
  bx  lr
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001adc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ae0:	24000140 	.word	0x24000140
  ldr r2, =_sidata
 8001ae4:	0802b5ac 	.word	0x0802b5ac
  ldr r2, =_sbss
 8001ae8:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001aec:	24027138 	.word	0x24027138

08001af0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC3_IRQHandler>

08001af2 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001af2:	4770      	bx	lr

08001af4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001af4:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001af6:	f001 fd17 	bl	8003528 <touchgfx_components_init>
    touchgfx_init();
}
 8001afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001afe:	f001 bc99 	b.w	8003434 <touchgfx_init>

08001b02 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001b02:	f001 bd13 	b.w	800352c <touchgfx_taskEntry>

08001b06 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001b06:	6840      	ldr	r0, [r0, #4]
    }
 8001b08:	4770      	bx	lr

08001b0a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001b0a:	6041      	str	r1, [r0, #4]
    }
 8001b0c:	4770      	bx	lr

08001b0e <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001b0e:	1a52      	subs	r2, r2, r1
 8001b10:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001b14:	fbb2 f0f3 	udiv	r0, r2, r3
 8001b18:	4770      	bx	lr
	...

08001b1c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	@ (8001b28 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001b1e:	68c0      	ldr	r0, [r0, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001b24:	4358      	muls	r0, r3
 8001b26:	4770      	bx	lr
 8001b28:	24000794 	.word	0x24000794

08001b2c <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001b2c:	4770      	bx	lr
	...

08001b30 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b32:	4a1e      	ldr	r2, [pc, #120]	@ (8001bac <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001b34:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001b38:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001b3a:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b4a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001b58:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001b5c:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001b62:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001b64:	2101      	movs	r1, #1
 8001b66:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001b68:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b70:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001b74:	fab2 f282 	clz	r2, r2
 8001b78:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb4 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	b983      	cbnz	r3, 8001ba2 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001b80:	f00b f886 	bl	800cc90 <HAL_RCC_GetHCLKFreq>
 8001b84:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001b86:	f00a febb 	bl	800c900 <HAL_RCC_GetSysClockFreq>
 8001b8a:	fbb0 f0f4 	udiv	r0, r0, r4
 8001b8e:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001b90:	4807      	ldr	r0, [pc, #28]	@ (8001bb0 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001b92:	f00c faf5 	bl	800e180 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001b96:	4806      	ldr	r0, [pc, #24]	@ (8001bb0 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001b98:	b003      	add	sp, #12
 8001b9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001b9e:	f00c b969 	b.w	800de74 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001ba2:	f00b f897 	bl	800ccd4 <HAL_RCC_GetPCLK1Freq>
 8001ba6:	0044      	lsls	r4, r0, #1
 8001ba8:	e7ed      	b.n	8001b86 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001baa:	bf00      	nop
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	24000794 	.word	0x24000794
 8001bb4:	080298f4 	.word	0x080298f4

08001bb8 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	4604      	mov	r4, r0
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	f023 fcbe 	bl	802553e <_ZdlPvj>
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	bd10      	pop	{r4, pc}

08001bc6 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001bc6:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001bc8:	6803      	ldr	r3, [r0, #0]
{
 8001bca:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001bcc:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001bce:	b131      	cbz	r1, 8001bde <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001bd0:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001bd2:	4798      	blx	r3
 8001bd4:	6863      	ldr	r3, [r4, #4]
 8001bd6:	1b5b      	subs	r3, r3, r5
 8001bd8:	4403      	add	r3, r0
 8001bda:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001bdc:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001bde:	4798      	blx	r3
 8001be0:	60a0      	str	r0, [r4, #8]
}
 8001be2:	e7fb      	b.n	8001bdc <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001be4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001be4:	4770      	bx	lr
	...

08001be8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001bec:	460f      	mov	r7, r1
 8001bee:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001bf0:	781d      	ldrb	r5, [r3, #0]
 8001bf2:	b915      	cbnz	r5, 8001bfa <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001bf4:	2500      	movs	r5, #0
}
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001bfa:	4c07      	ldr	r4, [pc, #28]	@ (8001c18 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	4621      	mov	r1, r4
 8001c00:	f007 f8ea 	bl	8008dd8 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f4      	beq.n	8001bf4 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001c0a:	6863      	ldr	r3, [r4, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001c0e:	68a3      	ldr	r3, [r4, #8]
 8001c10:	6033      	str	r3, [r6, #0]
            return true;
 8001c12:	e7f0      	b.n	8001bf6 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001c14:	240007f0 	.word	0x240007f0
 8001c18:	240007e0 	.word	0x240007e0

08001c1c <_ZN20STM32TouchControllerD0Ev>:
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	4604      	mov	r4, r0
 8001c20:	2104      	movs	r1, #4
 8001c22:	f023 fc8c 	bl	802553e <_ZdlPvj>
 8001c26:	4620      	mov	r0, r4
 8001c28:	bd10      	pop	{r4, pc}
	...

08001c2c <_ZN20STM32TouchController4initEv>:
{
 8001c2c:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001c30:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001c34:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001c36:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001c38:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001c3c:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001c40:	230c      	movs	r3, #12
 8001c42:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001c46:	f007 f837 	bl	8008cb8 <BSP_TS_Init>
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <_ZN20STM32TouchController4initEv+0x40>)
 8001c4c:	b910      	cbnz	r0, 8001c54 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
}
 8001c52:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1fb      	bne.n	8001c52 <_ZN20STM32TouchController4initEv+0x26>
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <_ZN20STM32TouchController4initEv+0x44>)
 8001c5c:	212e      	movs	r1, #46	@ 0x2e
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <_ZN20STM32TouchController4initEv+0x48>)
 8001c60:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <_ZN20STM32TouchController4initEv+0x4c>)
 8001c62:	f023 ffe5 	bl	8025c30 <__assert_func>
 8001c66:	bf00      	nop
 8001c68:	240007ec 	.word	0x240007ec
 8001c6c:	240007f0 	.word	0x240007f0
 8001c70:	08026d78 	.word	0x08026d78
 8001c74:	08026d8b 	.word	0x08026d8b
 8001c78:	08026db5 	.word	0x08026db5

08001c7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001c7c:	2803      	cmp	r0, #3
 8001c7e:	d825      	bhi.n	8001ccc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001c80:	e8df f000 	tbb	[pc, r0]
 8001c84:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c8a:	2108      	movs	r1, #8
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	fab2 f282 	clz	r2, r2
 8001c92:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001c94:	480f      	ldr	r0, [pc, #60]	@ (8001cd4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001c96:	f008 b9b5 	b.w	800a004 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	0952      	lsrs	r2, r2, #5
 8001ca8:	e7f4      	b.n	8001c94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001cac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	0952      	lsrs	r2, r2, #5
 8001cb8:	e7ec      	b.n	8001c94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc0:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	0952      	lsrs	r2, r2, #5
 8001cca:	e7e4      	b.n	8001c96 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	240007f4 	.word	0x240007f4
 8001cd4:	58022400 	.word	0x58022400
 8001cd8:	58021400 	.word	0x58021400

08001cdc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001cdc:	2803      	cmp	r0, #3
 8001cde:	d825      	bhi.n	8001d2c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001ce0:	e8df f000 	tbb	[pc, r0]
 8001ce4:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001cea:	2108      	movs	r1, #8
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	3a00      	subs	r2, #0
 8001cf0:	bf18      	it	ne
 8001cf2:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001cf4:	480f      	ldr	r0, [pc, #60]	@ (8001d34 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001cf6:	f008 b985 	b.w	800a004 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001cfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	3a00      	subs	r2, #0
 8001d04:	bf18      	it	ne
 8001d06:	2201      	movne	r2, #1
 8001d08:	e7f4      	b.n	8001cf4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001d0a:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001d0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	3a00      	subs	r2, #0
 8001d14:	bf18      	it	ne
 8001d16:	2201      	movne	r2, #1
 8001d18:	e7ec      	b.n	8001cf4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	3a00      	subs	r2, #0
 8001d26:	bf18      	it	ne
 8001d28:	2201      	movne	r2, #1
 8001d2a:	e7e4      	b.n	8001cf6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	240007f4 	.word	0x240007f4
 8001d34:	58022400 	.word	0x58022400
 8001d38:	58021400 	.word	0x58021400

08001d3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001d3c:	2803      	cmp	r0, #3
 8001d3e:	d811      	bhi.n	8001d64 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001d40:	e8df f000 	tbb	[pc, r0]
 8001d44:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001d48:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001d4a:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d4c:	f008 b95f 	b.w	800a00e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001d50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d54:	e7f9      	b.n	8001d4a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001d56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d5a:	e7f6      	b.n	8001d4a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001d62:	e7f3      	b.n	8001d4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	58022400 	.word	0x58022400
 8001d6c:	58021400 	.word	0x58021400

08001d70 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001d70:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001d72:	2803      	cmp	r0, #3
 8001d74:	d815      	bhi.n	8001da2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001d76:	e8df f000 	tbb	[pc, r0]
 8001d7a:	0a02      	.short	0x0a02
 8001d7c:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001d7e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001d80:	4809      	ldr	r0, [pc, #36]	@ (8001da8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d82:	f008 f939 	bl	8009ff8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001d86:	1e43      	subs	r3, r0, #1
 8001d88:	4258      	negs	r0, r3
 8001d8a:	4158      	adcs	r0, r3
 8001d8c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001d8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d92:	e7f5      	b.n	8001d80 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001d94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d98:	e7f2      	b.n	8001d80 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d9e:	4803      	ldr	r0, [pc, #12]	@ (8001dac <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001da0:	e7ef      	b.n	8001d82 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001da2:	2000      	movs	r0, #0
 8001da4:	e7ef      	b.n	8001d86 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001da6:	bf00      	nop
 8001da8:	58022400 	.word	0x58022400
 8001dac:	58021400 	.word	0x58021400

08001db0 <_ZN8touchgfx4GPIO4initEv>:
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	4d08      	ldr	r5, [pc, #32]	@ (8001dd4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001db4:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001db6:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001db8:	b2e0      	uxtb	r0, r4
 8001dba:	f7ff ffd9 	bl	8001d70 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001dbe:	b118      	cbz	r0, 8001dc8 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001dc4:	bf18      	it	ne
 8001dc6:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001dc8:	3401      	adds	r4, #1
 8001dca:	3504      	adds	r5, #4
 8001dcc:	2c05      	cmp	r4, #5
 8001dce:	d1f3      	bne.n	8001db8 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}
 8001dd2:	bf00      	nop
 8001dd4:	240007f4 	.word	0x240007f4

08001dd8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001dd8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001dda:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001dde:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001de2:	4770      	bx	lr

08001de4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001de4:	2000      	movs	r0, #0
 8001de6:	4770      	bx	lr

08001de8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001de8:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001dea:	3900      	subs	r1, #0
 8001dec:	4b02      	ldr	r3, [pc, #8]	@ (8001df8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001dee:	bf18      	it	ne
 8001df0:	2101      	movne	r1, #1
 8001df2:	7019      	strb	r1, [r3, #0]
    }
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	24026417 	.word	0x24026417

08001dfc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	4770      	bx	lr

08001e00 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001e00:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001e02:	b10b      	cbz	r3, 8001e08 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001e04:	4608      	mov	r0, r1
 8001e06:	4718      	bx	r3
        }
    }
 8001e08:	4770      	bx	lr

08001e0a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001e0a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e0e:	4770      	bx	lr

08001e10 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001e10:	6840      	ldr	r0, [r0, #4]
 8001e12:	6803      	ldr	r3, [r0, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4718      	bx	r3

08001e18 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001e18:	4b01      	ldr	r3, [pc, #4]	@ (8001e20 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	24000818 	.word	0x24000818

08001e24 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001e24:	4770      	bx	lr

08001e26 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001e26:	f001 bc7e 	b.w	8003726 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001e2a <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001e2a:	f001 bc0d 	b.w	8003648 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001e2e <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001e2e:	f001 bddf 	b.w	80039f0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001e32 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001e32:	f001 bdd1 	b.w	80039d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001e38 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001e3c:	f001 fd94 	bl	8003968 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001e40:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001e44:	b113      	cbz	r3, 8001e4c <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001e46:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
    }
}
 8001e4c:	bd10      	pop	{r4, pc}
 8001e4e:	bf00      	nop
 8001e50:	2400000c 	.word	0x2400000c

08001e54 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001e54:	f001 bc00 	b.w	8003658 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001e58 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001e58:	b510      	push	{r4, lr}
 8001e5a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001e5c:	f00f ff6c 	bl	8011d38 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	4620      	mov	r0, r4
 8001e64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001e6c:	4718      	bx	r3

08001e6e <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001e6e:	b510      	push	{r4, lr}
 8001e70:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001e72:	f00f faf7 	bl	8011464 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001e76:	6860      	ldr	r0, [r4, #4]
 8001e78:	6803      	ldr	r3, [r0, #0]
    }
 8001e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	4718      	bx	r3

08001e82 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001e82:	f00f b9c5 	b.w	8011210 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001e86 <_ZN11TouchGFXHALD0Ev>:
 8001e86:	b510      	push	{r4, lr}
 8001e88:	4604      	mov	r4, r0
 8001e8a:	217c      	movs	r1, #124	@ 0x7c
 8001e8c:	f023 fb57 	bl	802553e <_ZdlPvj>
 8001e90:	4620      	mov	r0, r4
 8001e92:	bd10      	pop	{r4, pc}

08001e94 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001e94:	4b02      	ldr	r3, [pc, #8]	@ (8001ea0 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001e9a:	f00f b9f5 	b.w	8011288 <_ZN8touchgfx3HAL10beginFrameEv>
 8001e9e:	bf00      	nop
 8001ea0:	2400000c 	.word	0x2400000c

08001ea4 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001ea4:	b538      	push	{r3, r4, r5, lr}
 8001ea6:	4604      	mov	r4, r0
    mcuInstr.init();
 8001ea8:	4d06      	ldr	r5, [pc, #24]	@ (8001ec4 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001eaa:	f001 fbfd 	bl	80036a8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001eae:	2300      	movs	r3, #0
    mcuInstr.init();
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001eb6:	f7ff fe3b 	bl	8001b30 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001eba:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001ebc:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001ebe:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
 8001ec4:	24000808 	.word	0x24000808

08001ec8 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001ec8:	6803      	ldr	r3, [r0, #0]
{
 8001eca:	4604      	mov	r4, r0
 8001ecc:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed2:	4798      	blx	r3
    enableInterrupts();
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001eda:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001edc:	f000 ff5c 	bl	8002d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2329      	movs	r3, #41	@ 0x29
 8001eec:	2215      	movs	r2, #21
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	f007 fdf6 	bl	8009ae2 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001ef6:	f000 ff4f 	bl	8002d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	4620      	mov	r0, r4
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4798      	blx	r3
    for (;;)
 8001f02:	e7f8      	b.n	8001ef6 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001f04:	24000694 	.word	0x24000694

08001f08 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001f08:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001f0e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001f10:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001f14:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001f16:	428c      	cmp	r4, r1
 8001f18:	d009      	beq.n	8001f2e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001f1a:	b93a      	cbnz	r2, 8001f2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001f1c:	490a      	ldr	r1, [pc, #40]	@ (8001f48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001f20:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f22:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001f24:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001f26:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f28:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001f2a:	701a      	strb	r2, [r3, #0]
        }
    }
 8001f2c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d0fc      	beq.n	8001f2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f32:	4a06      	ldr	r2, [pc, #24]	@ (8001f4c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001f34:	4904      	ldr	r1, [pc, #16]	@ (8001f48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f36:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001f38:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001f3a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001f3c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e7f3      	b.n	8001f2a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001f42:	bf00      	nop
 8001f44:	24026410 	.word	0x24026410
 8001f48:	2402640e 	.word	0x2402640e
 8001f4c:	2402640c 	.word	0x2402640c

08001f50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001f50:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	428b      	cmp	r3, r1
 8001f58:	d803      	bhi.n	8001f62 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d905      	bls.n	8001f6e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001f62:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001f64:	219e      	movs	r1, #158	@ 0x9e
 8001f66:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001f6a:	f023 fe61 	bl	8025c30 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001f70:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001f72:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001f74:	801a      	strh	r2, [r3, #0]
    }
 8001f76:	bd08      	pop	{r3, pc}
 8001f78:	2402640c 	.word	0x2402640c
 8001f7c:	2402640e 	.word	0x2402640e
 8001f80:	08026e20 	.word	0x08026e20
 8001f84:	08026e83 	.word	0x08026e83
 8001f88:	08026ec6 	.word	0x08026ec6
 8001f8c:	24026412 	.word	0x24026412
 8001f90:	24026414 	.word	0x24026414

08001f94 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001f94:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001f96:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001f9a:	b118      	cbz	r0, 8001fa4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001f9c:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001f9e:	6803      	ldr	r3, [r0, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4718      	bx	r3
    }
 8001fa4:	4770      	bx	lr
	...

08001fa8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	460d      	mov	r5, r1
 8001fac:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001fb0:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001fb2:	b935      	cbnz	r5, 8001fc2 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001fb6:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001fbc:	480a      	ldr	r0, [pc, #40]	@ (8001fe8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001fbe:	f023 fe37 	bl	8025c30 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001fc2:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001fc6:	3a00      	subs	r2, #0
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001fca:	bf18      	it	ne
 8001fcc:	2201      	movne	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001fd0:	6803      	ldr	r3, [r0, #0]
}
 8001fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fda:	4718      	bx	r3
 8001fdc:	24000818 	.word	0x24000818
 8001fe0:	08026f19 	.word	0x08026f19
 8001fe4:	08026f51 	.word	0x08026f51
 8001fe8:	08026ec6 	.word	0x08026ec6
 8001fec:	24026416 	.word	0x24026416

08001ff0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001ff0:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001ff4:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001ffa:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001ffc:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8002000:	4a1d      	ldr	r2, [pc, #116]	@ (8002078 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8002002:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8002004:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002008:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800200a:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 800200c:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8002010:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8002012:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8002016:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8002018:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 800201a:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 800201e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002022:	4a16      	ldr	r2, [pc, #88]	@ (800207c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8002024:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8002028:	3520      	adds	r5, #32
          buttonController(0),
 800202a:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 800202e:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8002032:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8002036:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 800203a:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800203e:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8002042:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002046:	6782      	str	r2, [r0, #120]	@ 0x78
 8002048:	b2ad      	uxth	r5, r5
        instance = this;
 800204a:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800204c:	42b5      	cmp	r5, r6
        instance = this;
 800204e:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002050:	4a0c      	ldr	r2, [pc, #48]	@ (8002084 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8002052:	8015      	strh	r5, [r2, #0]
 8002054:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8002056:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002058:	bf28      	it	cs
 800205a:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800205c:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800205e:	bf38      	it	cc
 8002060:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002062:	8016      	strh	r6, [r2, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002066:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800206a:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800206c:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 800206e:	7013      	strb	r3, [r2, #0]
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8002072:	6003      	str	r3, [r0, #0]
}
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	bf00      	nop
 8002078:	01000001 	.word	0x01000001
 800207c:	01010000 	.word	0x01010000
 8002080:	24026418 	.word	0x24026418
 8002084:	2402640c 	.word	0x2402640c
 8002088:	24026412 	.word	0x24026412
 800208c:	2402640e 	.word	0x2402640e
 8002090:	24026414 	.word	0x24026414
 8002094:	24026410 	.word	0x24026410
 8002098:	08026fa8 	.word	0x08026fa8

0800209c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 800209c:	2b01      	cmp	r3, #1
    {
 800209e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 80020a0:	d80e      	bhi.n	80020c0 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	2215      	movs	r2, #21
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	460b      	mov	r3, r1
 80020aa:	4601      	mov	r1, r0
 80020ac:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <DSI_IO_Write+0x34>)
 80020ae:	f007 fd18 	bl	8009ae2 <HAL_DSI_ShortWrite>
 80020b2:	b118      	cbz	r0, 80020bc <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80020b4:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 80020b8:	b002      	add	sp, #8
 80020ba:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 80020bc:	2000      	movs	r0, #0
 80020be:	e7fb      	b.n	80020b8 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80020c0:	e9cd 1200 	strd	r1, r2, [sp]
 80020c4:	4601      	mov	r1, r0
 80020c6:	2239      	movs	r2, #57	@ 0x39
 80020c8:	4801      	ldr	r0, [pc, #4]	@ (80020d0 <DSI_IO_Write+0x34>)
 80020ca:	f007 fd1b 	bl	8009b04 <HAL_DSI_LongWrite>
 80020ce:	e7f0      	b.n	80020b2 <DSI_IO_Write+0x16>
 80020d0:	24000694 	.word	0x24000694

080020d4 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 80020d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80020d6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80020da:	2106      	movs	r1, #6
 80020dc:	9100      	str	r1, [sp, #0]
 80020de:	4601      	mov	r1, r0
 80020e0:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <DSI_IO_Read+0x24>)
 80020e2:	f007 fd6f 	bl	8009bc4 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 80020e6:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 80020e8:	bf14      	ite	ne
 80020ea:	f06f 0007 	mvnne.w	r0, #7
 80020ee:	2000      	moveq	r0, #0
 80020f0:	b005      	add	sp, #20
 80020f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020f6:	bf00      	nop
 80020f8:	24000694 	.word	0x24000694

080020fc <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80020fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80020fe:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8002102:	4c0b      	ldr	r4, [pc, #44]	@ (8002130 <LCD_ReqTear+0x34>)
 8002104:	2239      	movs	r2, #57	@ 0x39
 8002106:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8002108:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 800210c:	ab03      	add	r3, sp, #12
 800210e:	4620      	mov	r0, r4
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	2344      	movs	r3, #68	@ 0x44
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2302      	movs	r3, #2
 8002118:	f007 fcf4 	bl	8009b04 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 800211c:	2100      	movs	r1, #0
 800211e:	2335      	movs	r3, #53	@ 0x35
 8002120:	2215      	movs	r2, #21
 8002122:	4620      	mov	r0, r4
 8002124:	9100      	str	r1, [sp, #0]
 8002126:	f007 fcdc 	bl	8009ae2 <HAL_DSI_ShortWrite>
    }
 800212a:	b004      	add	sp, #16
 800212c:	bd10      	pop	{r4, pc}
 800212e:	bf00      	nop
 8002130:	24000694 	.word	0x24000694

08002134 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8002134:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8002136:	f7ff ffe1 	bl	80020fc <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 800213a:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 800213c:	2202      	movs	r2, #2
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8002144:	2201      	movs	r2, #1
 8002146:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 800214a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8002156:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800215a:	f042 0202 	orr.w	r2, r2, #2
 800215e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8002162:	2203      	movs	r2, #3
 8002164:	4b02      	ldr	r3, [pc, #8]	@ (8002170 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8002166:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002168:	bd08      	pop	{r3, pc}
 800216a:	bf00      	nop
 800216c:	24000694 	.word	0x24000694
 8002170:	50001000 	.word	0x50001000

08002174 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <LCD_ReqEnable+0x20>)
    {
 8002176:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8002178:	7819      	ldrb	r1, [r3, #0]
 800217a:	b939      	cbnz	r1, 800218c <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 800217c:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 800217e:	4806      	ldr	r0, [pc, #24]	@ (8002198 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002180:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8002182:	2329      	movs	r3, #41	@ 0x29
 8002184:	2215      	movs	r2, #21
 8002186:	9100      	str	r1, [sp, #0]
 8002188:	f007 fcab 	bl	8009ae2 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 800218c:	b003      	add	sp, #12
 800218e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002192:	bf00      	nop
 8002194:	24000804 	.word	0x24000804
 8002198:	24000694 	.word	0x24000694

0800219c <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 800219e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	232a      	movs	r3, #42	@ 0x2a
 80021a4:	2239      	movs	r2, #57	@ 0x39
 80021a6:	2100      	movs	r1, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2304      	movs	r3, #4
 80021ac:	4803      	ldr	r0, [pc, #12]	@ (80021bc <LCD_SetUpdateRegionLeft+0x20>)
 80021ae:	f007 fca9 	bl	8009b04 <HAL_DSI_LongWrite>
    }
 80021b2:	b003      	add	sp, #12
 80021b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80021b8:	24000008 	.word	0x24000008
 80021bc:	24000694 	.word	0x24000694

080021c0 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <LCD_SetUpdateRegionRight+0x1c>)
    {
 80021c2:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	232a      	movs	r3, #42	@ 0x2a
 80021c8:	2239      	movs	r2, #57	@ 0x39
 80021ca:	2100      	movs	r1, #0
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2304      	movs	r3, #4
 80021d0:	4803      	ldr	r0, [pc, #12]	@ (80021e0 <LCD_SetUpdateRegionRight+0x20>)
 80021d2:	f007 fc97 	bl	8009b04 <HAL_DSI_LongWrite>
    }
 80021d6:	b003      	add	sp, #12
 80021d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021dc:	24000004 	.word	0x24000004
 80021e0:	24000694 	.word	0x24000694

080021e4 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80021e4:	b538      	push	{r3, r4, r5, lr}
        return instance;
 80021e6:	4d14      	ldr	r5, [pc, #80]	@ (8002238 <HAL_DSI_TearingEffectCallback+0x54>)
 80021e8:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7ff fd46 	bl	8001c7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80021f0:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 80021f2:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80021f6:	3301      	adds	r3, #1
 80021f8:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80021fc:	f000 fdc0 	bl	8002d80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8002200:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8002202:	682a      	ldr	r2, [r5, #0]
 8002204:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 800220c:	b173      	cbz	r3, 800222c <HAL_DSI_TearingEffectCallback+0x48>
 800220e:	4d0c      	ldr	r5, [pc, #48]	@ (8002240 <HAL_DSI_TearingEffectCallback+0x5c>)
 8002210:	782b      	ldrb	r3, [r5, #0]
 8002212:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002216:	b94b      	cbnz	r3, 800222c <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8002218:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_DSI_TearingEffectCallback+0x60>)
 800221a:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 800221c:	f7ff ffbe 	bl	800219c <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8002220:	4620      	mov	r0, r4
 8002222:	f007 fc4e 	bl	8009ac2 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8002226:	2301      	movs	r3, #1
 8002228:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800222a:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800222c:	2000      	movs	r0, #0
    }
 800222e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002232:	f7ff bd53 	b.w	8001cdc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8002236:	bf00      	nop
 8002238:	24026418 	.word	0x24026418
 800223c:	2400000c 	.word	0x2400000c
 8002240:	24000820 	.word	0x24000820
 8002244:	2400081c 	.word	0x2400081c

08002248 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8002248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 800224c:	4e48      	ldr	r6, [pc, #288]	@ (8002370 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 800224e:	b085      	sub	sp, #20
 8002250:	4604      	mov	r4, r0
        if (displayRefreshing)
 8002252:	7833      	ldrb	r3, [r6, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8088 	beq.w	800236a <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 800225a:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002394 <HAL_DSI_EndOfRefreshCallback+0x14c>
 800225e:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8002398 <HAL_DSI_EndOfRefreshCallback+0x150>
 8002262:	f8d9 5000 	ldr.w	r5, [r9]
 8002266:	4f43      	ldr	r7, [pc, #268]	@ (8002374 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8002268:	2d00      	cmp	r5, #0
 800226a:	d13e      	bne.n	80022ea <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 800226c:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800226e:	4e42      	ldr	r6, [pc, #264]	@ (8002378 <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8002270:	f006 febe 	bl	8008ff0 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	9500      	str	r5, [sp, #0]
 8002278:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800227c:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800227e:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002282:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002286:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800228a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800228e:	f002 0208 	and.w	r2, r2, #8
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002296:	f8d8 2000 	ldr.w	r2, [r8]
 800229a:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800229e:	4837      	ldr	r0, [pc, #220]	@ (800237c <HAL_DSI_EndOfRefreshCallback+0x134>)
 80022a0:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 80022a2:	4e37      	ldr	r6, [pc, #220]	@ (8002380 <HAL_DSI_EndOfRefreshCallback+0x138>)
 80022a4:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 80022a6:	4837      	ldr	r0, [pc, #220]	@ (8002384 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80022a8:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 80022ac:	4836      	ldr	r0, [pc, #216]	@ (8002388 <HAL_DSI_EndOfRefreshCallback+0x140>)
 80022ae:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80022b2:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80022b4:	f041 0101 	orr.w	r1, r1, #1
 80022b8:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80022ba:	9501      	str	r5, [sp, #4]
 80022bc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80022c0:	f042 0208 	orr.w	r2, r2, #8
 80022c4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80022c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 80022d4:	f7ff ff74 	bl	80021c0 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 80022d8:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 80022da:	4620      	mov	r0, r4
                updateRegion = 1;
 80022dc:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 80022e0:	b005      	add	sp, #20
 80022e2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 80022e6:	f007 bbec 	b.w	8009ac2 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80022ea:	6803      	ldr	r3, [r0, #0]
 80022ec:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80022ee:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80022f0:	9502      	str	r5, [sp, #8]
 80022f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80022f6:	4c25      	ldr	r4, [pc, #148]	@ (800238c <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80022f8:	f022 0208 	bic.w	r2, r2, #8
 80022fc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002300:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002304:	f002 0208 	and.w	r2, r2, #8
 8002308:	9202      	str	r2, [sp, #8]
 800230a:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 800230c:	f8d8 2000 	ldr.w	r2, [r8]
 8002310:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8002314:	4819      	ldr	r0, [pc, #100]	@ (800237c <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002316:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8002318:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 800231c:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 800231e:	4819      	ldr	r0, [pc, #100]	@ (8002384 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002320:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8002324:	4818      	ldr	r0, [pc, #96]	@ (8002388 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002326:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 800232a:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 800232c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800232e:	f041 0101 	orr.w	r1, r1, #1
 8002332:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002334:	9503      	str	r5, [sp, #12]
 8002336:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800233a:	f042 0208 	orr.w	r2, r2, #8
 800233e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002342:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	9303      	str	r3, [sp, #12]
 800234c:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 800234e:	f7ff fcc5 	bl	8001cdc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8002352:	f7ff ff0f 	bl	8002174 <LCD_ReqEnable>
        return instance;
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8002358:	7035      	strb	r5, [r6, #0]
 800235a:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 800235c:	b128      	cbz	r0, 800236a <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 800235e:	6803      	ldr	r3, [r0, #0]
 8002360:	6a1b      	ldr	r3, [r3, #32]
    }
 8002362:	b005      	add	sp, #20
 8002364:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002368:	4718      	bx	r3
 800236a:	b005      	add	sp, #20
 800236c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002370:	24000820 	.word	0x24000820
 8002374:	24000818 	.word	0x24000818
 8002378:	01b201e2 	.word	0x01b201e2
 800237c:	50001000 	.word	0x50001000
 8002380:	019201e3 	.word	0x019201e3
 8002384:	01920003 	.word	0x01920003
 8002388:	09c004b3 	.word	0x09c004b3
 800238c:	019201e2 	.word	0x019201e2
 8002390:	24026418 	.word	0x24026418
 8002394:	2400081c 	.word	0x2400081c
 8002398:	240004bc 	.word	0x240004bc

0800239c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800239c:	4601      	mov	r1, r0
 800239e:	b508      	push	{r3, lr}
        return instance;
 80023a0:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <IdleTaskHook+0x14>)
 80023a2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 80023a4:	b101      	cbz	r1, 80023a8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 80023a6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 80023a8:	f00f fce0 	bl	8011d6c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 80023ac:	2001      	movs	r0, #1
 80023ae:	bd08      	pop	{r3, pc}
 80023b0:	24026418 	.word	0x24026418

080023b4 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	605a      	str	r2, [r3, #4]
          cc_in(0)
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	4a02      	ldr	r2, [pc, #8]	@ (80023c8 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 80023be:	601a      	str	r2, [r3, #0]

}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	24000808 	.word	0x24000808
 80023c8:	08026d58 	.word	0x08026d58

080023cc <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80023cc:	6940      	ldr	r0, [r0, #20]
 80023ce:	4770      	bx	lr

080023d0 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80023d0:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80023d4:	4770      	bx	lr

080023d6 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80023d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80023d8:	b923      	cbnz	r3, 80023e4 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80023da:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80023dc:	3800      	subs	r0, #0
 80023de:	bf18      	it	ne
 80023e0:	2001      	movne	r0, #1
 80023e2:	4770      	bx	lr
 80023e4:	2001      	movs	r0, #1
}
 80023e6:	4770      	bx	lr

080023e8 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80023e8:	6880      	ldr	r0, [r0, #8]
 80023ea:	4770      	bx	lr

080023ec <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80023ec:	4770      	bx	lr

080023ee <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80023ee:	3004      	adds	r0, #4
{
 80023f0:	b510      	push	{r4, lr}
 80023f2:	460c      	mov	r4, r1
    *data = videoInfo;
 80023f4:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80023f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80023fa:	bd10      	pop	{r4, pc}

080023fc <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80023fc:	4770      	bx	lr
	...

08002400 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002400:	b508      	push	{r3, lr}
    assert(0);
 8002402:	4a03      	ldr	r2, [pc, #12]	@ (8002410 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002404:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 8002408:	4b02      	ldr	r3, [pc, #8]	@ (8002414 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800240a:	4803      	ldr	r0, [pc, #12]	@ (8002418 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800240c:	f023 fc10 	bl	8025c30 <__assert_func>
 8002410:	08027078 	.word	0x08027078
 8002414:	080293f7 	.word	0x080293f7
 8002418:	080270d3 	.word	0x080270d3

0800241c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800241c:	b510      	push	{r4, lr}
 800241e:	4604      	mov	r4, r0
 8002420:	2148      	movs	r1, #72	@ 0x48
 8002422:	f023 f88c 	bl	802553e <_ZdlPvj>
 8002426:	4620      	mov	r0, r4
 8002428:	bd10      	pop	{r4, pc}
	...

0800242c <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800242c:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002430:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 8002432:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002434:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002436:	6003      	str	r3, [r0, #0]
 8002438:	63c2      	str	r2, [r0, #60]	@ 0x3c
 800243a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800243e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002442:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002446:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800244a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800244e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8002452:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002456:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 800245a:	2001      	movs	r0, #1
 800245c:	f00c f854 	bl	800e508 <osSemaphoreNew>
 8002460:	4b02      	ldr	r3, [pc, #8]	@ (800246c <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 8002462:	6018      	str	r0, [r3, #0]
}
 8002464:	4620      	mov	r0, r4
 8002466:	bd10      	pop	{r4, pc}
 8002468:	08027308 	.word	0x08027308
 800246c:	24000840 	.word	0x24000840

08002470 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002470:	b410      	push	{r4}
 8002472:	460c      	mov	r4, r1
 8002474:	4611      	mov	r1, r2
 8002476:	461a      	mov	r2, r3
    if (reader != 0)
 8002478:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800247a:	b13b      	cbz	r3, 800248c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800247c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800247e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002480:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002482:	4420      	add	r0, r4
}
 8002484:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002488:	f023 be76 	b.w	8026178 <strncmp>
        src = (const char*)movieData + offset;
 800248c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800248e:	e7f8      	b.n	8002482 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002490 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002490:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002492:	b510      	push	{r4, lr}
    if (reader != 0)
 8002494:	b173      	cbz	r3, 80024b4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002496:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002498:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800249a:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800249c:	1853      	adds	r3, r2, r1
 800249e:	5c52      	ldrb	r2, [r2, r1]
 80024a0:	7898      	ldrb	r0, [r3, #2]
 80024a2:	785c      	ldrb	r4, [r3, #1]
 80024a4:	0400      	lsls	r0, r0, #16
 80024a6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 80024aa:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 80024ac:	78db      	ldrb	r3, [r3, #3]
 80024ae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80024b2:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 80024b4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80024b6:	1853      	adds	r3, r2, r1
        val |= d[0];
 80024b8:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 80024ba:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 80024bc:	7898      	ldrb	r0, [r3, #2]
 80024be:	0400      	lsls	r0, r0, #16
 80024c0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80024c4:	e7f1      	b.n	80024aa <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

080024c6 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80024c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80024c8:	b143      	cbz	r3, 80024dc <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80024ca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80024cc:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80024ce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80024d0:	185a      	adds	r2, r3, r1
 80024d2:	5c58      	ldrb	r0, [r3, r1]
 80024d4:	7852      	ldrb	r2, [r2, #1]
 80024d6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80024da:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80024dc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80024de:	185a      	adds	r2, r3, r1
        val |= d[0];
 80024e0:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80024e2:	7853      	ldrb	r3, [r2, #1]
 80024e4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80024e8:	4770      	bx	lr
	...

080024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	4604      	mov	r4, r0
    if (reader != 0)
 80024f0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80024f2:	460d      	mov	r5, r1
 80024f4:	4616      	mov	r6, r2
    if (reader != 0)
 80024f6:	b1d8      	cbz	r0, 8002530 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80024f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d208      	bcs.n	8002510 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80024fe:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002500:	4a0d      	ldr	r2, [pc, #52]	@ (8002538 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002502:	219e      	movs	r1, #158	@ 0x9e
 8002504:	480d      	ldr	r0, [pc, #52]	@ (800253c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002506:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800250a:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 800250c:	f023 fb90 	bl	8025c30 <__assert_func>
        reader->seek(offset);
 8002510:	6803      	ldr	r3, [r0, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002516:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002518:	4632      	mov	r2, r6
 800251a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800251c:	6803      	ldr	r3, [r0, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	4798      	blx	r3
 8002522:	b910      	cbnz	r0, 800252a <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002524:	230d      	movs	r3, #13
 8002526:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800252a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 800252c:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 800252e:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002530:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002532:	4408      	add	r0, r1
 8002534:	e7fb      	b.n	800252e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 8002536:	bf00      	nop
 8002538:	08027141 	.word	0x08027141
 800253c:	080270d3 	.word	0x080270d3
 8002540:	0802712e 	.word	0x0802712e

08002544 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002548:	6943      	ldr	r3, [r0, #20]
{
 800254a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800254c:	b92b      	cbnz	r3, 800255a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800254e:	4b22      	ldr	r3, [pc, #136]	@ (80025d8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002550:	21e4      	movs	r1, #228	@ 0xe4
 8002552:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002554:	4822      	ldr	r0, [pc, #136]	@ (80025e0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002556:	f023 fb6b 	bl	8025c30 <__assert_func>
    readData(currentMovieOffset, 8);
 800255a:	2208      	movs	r2, #8
 800255c:	6981      	ldr	r1, [r0, #24]
 800255e:	f7ff ffc5 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002562:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002564:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002568:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800256c:	3104      	adds	r1, #4
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff ff8e 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002574:	69a3      	ldr	r3, [r4, #24]
 8002576:	4418      	add	r0, r3
 8002578:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800257a:	f100 0208 	add.w	r2, r0, #8
 800257e:	429a      	cmp	r2, r3
 8002580:	d306      	bcc.n	8002590 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002582:	2301      	movs	r3, #1
    return false;
 8002584:	2000      	movs	r0, #0
    frameNumber = 1;
 8002586:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002588:	6a23      	ldr	r3, [r4, #32]
 800258a:	61a3      	str	r3, [r4, #24]
}
 800258c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002590:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002592:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 8002596:	2208      	movs	r2, #8
 8002598:	4620      	mov	r0, r4
        frameNumber++;
 800259a:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800259c:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 80025a0:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80025a2:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 80025a4:	f7ff ffa2 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80025a8:	f8d4 9018 	ldr.w	r9, [r4, #24]
 80025ac:	4620      	mov	r0, r4
 80025ae:	4649      	mov	r1, r9
 80025b0:	f7ff ff89 	bl	80024c6 <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80025b4:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 80025b8:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80025ba:	4620      	mov	r0, r4
 80025bc:	f7ff ff83 	bl	80024c6 <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 80025c0:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80025c4:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80025c6:	4620      	mov	r0, r4
 80025c8:	f7ff ff62 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80025cc:	45b0      	cmp	r8, r6
 80025ce:	d1d1      	bne.n	8002574 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80025d0:	42bd      	cmp	r5, r7
 80025d2:	d1cf      	bne.n	8002574 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e7d9      	b.n	800258c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80025d8:	08027183 	.word	0x08027183
 80025dc:	080271cc 	.word	0x080271cc
 80025e0:	080270d3 	.word	0x080270d3

080025e4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80025e4:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	bf38      	it	cc
 80025ea:	2101      	movcc	r1, #1
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80025ee:	b570      	push	{r4, r5, r6, lr}
 80025f0:	460d      	mov	r5, r1
 80025f2:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80025f4:	4798      	blx	r3
 80025f6:	42a8      	cmp	r0, r5
 80025f8:	d204      	bcs.n	8002604 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	4620      	mov	r0, r4
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	4798      	blx	r3
 8002602:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002604:	1e6b      	subs	r3, r5, #1
 8002606:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002608:	2210      	movs	r2, #16
 800260a:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800260c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002610:	f106 0108 	add.w	r1, r6, #8
 8002614:	f7ff ff6a 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002618:	f106 0110 	add.w	r1, r6, #16
 800261c:	4620      	mov	r0, r4
 800261e:	f7ff ff37 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002622:	6a23      	ldr	r3, [r4, #32]
 8002624:	3b04      	subs	r3, #4
 8002626:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002628:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 800262c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002630:	2100      	movs	r1, #0
    readData(0, 72);
 8002632:	2248      	movs	r2, #72	@ 0x48
{
 8002634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002638:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 800263a:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 800263c:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002640:	f7ff ff54 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002644:	69a6      	ldr	r6, [r4, #24]
 8002646:	2304      	movs	r3, #4
 8002648:	4a63      	ldr	r2, [pc, #396]	@ (80027d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800264a:	4631      	mov	r1, r6
 800264c:	4620      	mov	r0, r4
 800264e:	f7ff ff0f 	bl	8002470 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002652:	b148      	cbz	r0, 8002668 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002654:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002656:	4a61      	ldr	r2, [pc, #388]	@ (80027dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002658:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 800265c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002660:	4b5f      	ldr	r3, [pc, #380]	@ (80027e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002662:	4860      	ldr	r0, [pc, #384]	@ (80027e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002664:	f023 fae4 	bl	8025c30 <__assert_func>
    currentMovieOffset += 8;
 8002668:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800266c:	2304      	movs	r3, #4
 800266e:	4a5e      	ldr	r2, [pc, #376]	@ (80027e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002670:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002672:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002674:	f7ff fefc 	bl	8002470 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002678:	b138      	cbz	r0, 800268a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800267a:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800267c:	4a57      	ldr	r2, [pc, #348]	@ (80027dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800267e:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002682:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 8002686:	4b59      	ldr	r3, [pc, #356]	@ (80027ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002688:	e7eb      	b.n	8002662 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800268a:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800268e:	2304      	movs	r3, #4
 8002690:	4a57      	ldr	r2, [pc, #348]	@ (80027f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002692:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002694:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002696:	f7ff feeb 	bl	8002470 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800269a:	4607      	mov	r7, r0
 800269c:	b138      	cbz	r0, 80026ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800269e:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80026a0:	4a4e      	ldr	r2, [pc, #312]	@ (80027dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026a2:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80026a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 80026aa:	4b52      	ldr	r3, [pc, #328]	@ (80027f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80026ac:	e7d9      	b.n	8002662 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80026ae:	f106 0110 	add.w	r1, r6, #16
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7ff feec 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80026b8:	4605      	mov	r5, r0
 80026ba:	b920      	cbnz	r0, 80026c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80026bc:	4b4e      	ldr	r3, [pc, #312]	@ (80027f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80026be:	f240 1141 	movw	r1, #321	@ 0x141
 80026c2:	4a46      	ldr	r2, [pc, #280]	@ (80027dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026c4:	e7cd      	b.n	8002662 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80026c6:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80026ca:	2304      	movs	r3, #4
 80026cc:	4a4b      	ldr	r2, [pc, #300]	@ (80027fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80026ce:	4620      	mov	r0, r4
 80026d0:	4641      	mov	r1, r8
 80026d2:	f7ff fecd 	bl	8002470 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d049      	beq.n	800276e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80026da:	2306      	movs	r3, #6
 80026dc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80026e0:	2304      	movs	r3, #4
 80026e2:	4a47      	ldr	r2, [pc, #284]	@ (8002800 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80026e4:	f106 0118 	add.w	r1, r6, #24
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff fec1 	bl	8002470 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d03f      	beq.n	8002772 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80026f2:	2307      	movs	r3, #7
 80026f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80026f8:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80026fa:	4f42      	ldr	r7, [pc, #264]	@ (8002804 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80026fc:	220c      	movs	r2, #12
 80026fe:	4620      	mov	r0, r4
 8002700:	4629      	mov	r1, r5
 8002702:	f7ff fef3 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002706:	f105 0608 	add.w	r6, r5, #8
 800270a:	2304      	movs	r3, #4
 800270c:	463a      	mov	r2, r7
 800270e:	4620      	mov	r0, r4
 8002710:	4631      	mov	r1, r6
 8002712:	f7ff fead 	bl	8002470 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002716:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800271a:	2800      	cmp	r0, #0
 800271c:	d048      	beq.n	80027b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d148      	bne.n	80027b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002722:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002724:	42ab      	cmp	r3, r5
 8002726:	d849      	bhi.n	80027bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002728:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800272c:	3504      	adds	r5, #4
 800272e:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002730:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002732:	4629      	mov	r1, r5
 8002734:	f7ff feac 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002738:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800273a:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800273c:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff fea6 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002744:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002746:	2204      	movs	r2, #4
 8002748:	4620      	mov	r0, r4
 800274a:	4631      	mov	r1, r6
 800274c:	f7ff fece 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002750:	2304      	movs	r3, #4
 8002752:	4a2d      	ldr	r2, [pc, #180]	@ (8002808 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002754:	4631      	mov	r1, r6
 8002756:	4620      	mov	r0, r4
 8002758:	f7ff fe8a 	bl	8002470 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800275c:	2800      	cmp	r0, #0
 800275e:	d138      	bne.n	80027d2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002760:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002762:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002764:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002766:	69a3      	ldr	r3, [r4, #24]
 8002768:	6223      	str	r3, [r4, #32]
}
 800276a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800276e:	2701      	movs	r7, #1
 8002770:	e7b6      	b.n	80026e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8002772:	2f00      	cmp	r7, #0
 8002774:	d0c0      	beq.n	80026f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002776:	f106 0120 	add.w	r1, r6, #32
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff fe88 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002780:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002784:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002788:	fbb0 f0f3 	udiv	r0, r0, r3
 800278c:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff fe7e 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002794:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002798:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff fe78 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80027a0:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80027a4:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80027a6:	4620      	mov	r0, r4
 80027a8:	f7ff fe72 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027ac:	6120      	str	r0, [r4, #16]
 80027ae:	e7a3      	b.n	80026f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0b9      	beq.n	8002728 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80027b4:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80027b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 80027ba:	e7d6      	b.n	800276a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027bc:	1d29      	adds	r1, r5, #4
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff fe66 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 80027c4:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 80027c6:	220c      	movs	r2, #12
 80027c8:	4620      	mov	r0, r4
 80027ca:	4629      	mov	r1, r5
 80027cc:	f7ff fe8e 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80027d0:	e799      	b.n	8002706 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80027d2:	230b      	movs	r3, #11
 80027d4:	e7ef      	b.n	80027b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80027d6:	bf00      	nop
 80027d8:	080271ff 	.word	0x080271ff
 80027dc:	0802721d 	.word	0x0802721d
 80027e0:	08027204 	.word	0x08027204
 80027e4:	080270d3 	.word	0x080270d3
 80027e8:	0802724a 	.word	0x0802724a
 80027ec:	0802724f 	.word	0x0802724f
 80027f0:	08027267 	.word	0x08027267
 80027f4:	0802726c 	.word	0x0802726c
 80027f8:	08027282 	.word	0x08027282
 80027fc:	0802728e 	.word	0x0802728e
 8002800:	08027293 	.word	0x08027293
 8002804:	08027298 	.word	0x08027298
 8002808:	0802729d 	.word	0x0802729d

0800280c <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 800280c:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002810:	2200      	movs	r2, #0
 8002812:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002814:	f7ff bf0c 	b.w	8002630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08002818 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002818:	b510      	push	{r4, lr}
    movieData = 0;
 800281a:	2300      	movs	r3, #0
{
 800281c:	4604      	mov	r4, r0
 800281e:	4608      	mov	r0, r1
    movieData = 0;
 8002820:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002822:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002824:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4798      	blx	r3
 800282a:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 800282c:	4620      	mov	r0, r4
}
 800282e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002832:	f7ff befd 	b.w	8002630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08002838 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002838:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 800283a:	4c14      	ldr	r4, [pc, #80]	@ (800288c <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 800283c:	4d14      	ldr	r5, [pc, #80]	@ (8002890 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 800283e:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8002840:	2400      	movs	r4, #0
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <JPEG_Decode_DMA+0x5c>)
 8002844:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <JPEG_Decode_DMA+0x60>)
 8002848:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 800284c:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 800284e:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <JPEG_Decode_DMA+0x68>)
 8002852:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <JPEG_Decode_DMA+0x6c>)
 8002856:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <JPEG_Decode_DMA+0x70>)
 800285a:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800285c:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800285e:	682a      	ldr	r2, [r5, #0]
 8002860:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002864:	701c      	strb	r4, [r3, #0]
 8002866:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002868:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800286c:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002870:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002874:	4a0e      	ldr	r2, [pc, #56]	@ (80028b0 <JPEG_Decode_DMA+0x78>)
 8002876:	68d2      	ldr	r2, [r2, #12]
 8002878:	436a      	muls	r2, r5
 800287a:	9200      	str	r2, [sp, #0]
 800287c:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f008 fac7 	bl	800ae14 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002886:	4620      	mov	r0, r4
 8002888:	b003      	add	sp, #12
 800288a:	bd30      	pop	{r4, r5, pc}
 800288c:	24009e6c 	.word	0x24009e6c
 8002890:	24009e48 	.word	0x24009e48
 8002894:	24009e58 	.word	0x24009e58
 8002898:	2400083c 	.word	0x2400083c
 800289c:	24009e68 	.word	0x24009e68
 80028a0:	24009e60 	.word	0x24009e60
 80028a4:	24009e64 	.word	0x24009e64
 80028a8:	24000844 	.word	0x24000844
 80028ac:	24000010 	.word	0x24000010
 80028b0:	24000824 	.word	0x24000824

080028b4 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80028b4:	684b      	ldr	r3, [r1, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d115      	bne.n	80028e6 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 80028ba:	68cb      	ldr	r3, [r1, #12]
 80028bc:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80028be:	bf1e      	ittt	ne
 80028c0:	f023 030f 	bicne.w	r3, r3, #15
 80028c4:	3310      	addne	r3, #16
 80028c6:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 80028c8:	688b      	ldr	r3, [r1, #8]
 80028ca:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80028cc:	bf1e      	ittt	ne
 80028ce:	f023 030f 	bicne.w	r3, r3, #15
 80028d2:	3310      	addne	r3, #16
 80028d4:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80028d6:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80028d8:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80028da:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80028dc:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 80028de:	4353      	muls	r3, r2
 80028e0:	4a0e      	ldr	r2, [pc, #56]	@ (800291c <HAL_JPEG_InfoReadyCallback+0x68>)
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d10e      	bne.n	8002908 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 80028ea:	68cb      	ldr	r3, [r1, #12]
 80028ec:	071a      	lsls	r2, r3, #28
 80028ee:	d003      	beq.n	80028f8 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80028f0:	f023 030f 	bic.w	r3, r3, #15
 80028f4:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80028f6:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 80028f8:	688b      	ldr	r3, [r1, #8]
 80028fa:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80028fc:	bf1e      	ittt	ne
 80028fe:	f023 0307 	bicne.w	r3, r3, #7
 8002902:	3308      	addne	r3, #8
 8002904:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 8002906:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1fc      	bne.n	8002906 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 800290c:	68cb      	ldr	r3, [r1, #12]
 800290e:	0758      	lsls	r0, r3, #29
 8002910:	d0f2      	beq.n	80028f8 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002912:	f023 0307 	bic.w	r3, r3, #7
 8002916:	3308      	adds	r3, #8
 8002918:	e7ed      	b.n	80028f6 <HAL_JPEG_InfoReadyCallback+0x42>
 800291a:	bf00      	nop
 800291c:	24009e50 	.word	0x24009e50

08002920 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002920:	4a0b      	ldr	r2, [pc, #44]	@ (8002950 <HAL_JPEG_GetDataCallback+0x30>)
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	440b      	add	r3, r1
    {
 8002926:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8002928:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800292a:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <HAL_JPEG_GetDataCallback+0x34>)
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	4293      	cmp	r3, r2
 8002930:	d20c      	bcs.n	800294c <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002932:	4c09      	ldr	r4, [pc, #36]	@ (8002958 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002934:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002936:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002938:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800293c:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800293e:	bf28      	it	cs
 8002940:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002944:	6021      	str	r1, [r4, #0]
        }
    }
 8002946:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002948:	f008 bac6 	b.w	800aed8 <HAL_JPEG_ConfigInputBuffer>
    }
 800294c:	bc30      	pop	{r4, r5}
 800294e:	4770      	bx	lr
 8002950:	24009e68 	.word	0x24009e68
 8002954:	24009e64 	.word	0x24009e64
 8002958:	24009e60 	.word	0x24009e60

0800295c <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800295e:	4c20      	ldr	r4, [pc, #128]	@ (80029e0 <HAL_JPEG_DataReadyCallback+0x84>)
 8002960:	2101      	movs	r1, #1
 8002962:	4d20      	ldr	r5, [pc, #128]	@ (80029e4 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002964:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002966:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002968:	4f1f      	ldr	r7, [pc, #124]	@ (80029e8 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002974:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002976:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <HAL_JPEG_DataReadyCallback+0x90>)
 8002978:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002980:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	440a      	add	r2, r1
 8002988:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d901      	bls.n	800299a <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	5ceb      	ldrb	r3, [r5, r3]
 80029a0:	b133      	cbz	r3, 80029b0 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80029a2:	2102      	movs	r1, #2
 80029a4:	4630      	mov	r0, r6
 80029a6:	f008 fa69 	bl	800ae7c <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 80029aa:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_JPEG_DataReadyCallback+0x94>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80029b0:	6822      	ldr	r2, [r4, #0]
 80029b2:	4630      	mov	r0, r6
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 80029ba:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80029be:	6869      	ldr	r1, [r5, #4]
 80029c0:	435a      	muls	r2, r3
 80029c2:	f008 fa8c 	bl	800aede <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_JPEG_DataReadyCallback+0x98>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	7a1a      	ldrb	r2, [r3, #8]
 80029cc:	b93a      	cbnz	r2, 80029de <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 80029ce:	7a9b      	ldrb	r3, [r3, #10]
 80029d0:	b92b      	cbnz	r3, 80029de <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 80029d2:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_JPEG_DataReadyCallback+0x9c>)
 80029d4:	6818      	ldr	r0, [r3, #0]
        }
    }
 80029d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 80029da:	f00b be0b 	b.w	800e5f4 <osSemaphoreRelease>
    }
 80029de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e0:	24009e48 	.word	0x24009e48
 80029e4:	24000010 	.word	0x24000010
 80029e8:	24000824 	.word	0x24000824
 80029ec:	24000844 	.word	0x24000844
 80029f0:	24009e58 	.word	0x24009e58
 80029f4:	24009e4c 	.word	0x24009e4c
 80029f8:	24000840 	.word	0x24000840

080029fc <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 80029fc:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 80029fe:	e7fe      	b.n	80029fe <HAL_JPEG_ErrorCallback+0x2>

08002a00 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002a00:	4b01      	ldr	r3, [pc, #4]	@ (8002a08 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    }
 8002a06:	4770      	bx	lr
 8002a08:	24009e5c 	.word	0x24009e5c

08002a0c <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002a0c:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002a0e:	4d16      	ldr	r5, [pc, #88]	@ (8002a68 <JPEG_OutputHandler+0x5c>)
{
 8002a10:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	b113      	cbz	r3, 8002a1c <JPEG_OutputHandler+0x10>
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <JPEG_OutputHandler+0x60>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	bb1b      	cbnz	r3, 8002a64 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002a1c:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <JPEG_OutputHandler+0x64>)
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	7a03      	ldrb	r3, [r0, #8]
 8002a22:	b963      	cbnz	r3, 8002a3e <JPEG_OutputHandler+0x32>
 8002a24:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <JPEG_OutputHandler+0x68>)
 8002a26:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <JPEG_OutputHandler+0x6c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	5cd3      	ldrb	r3, [r2, r3]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <JPEG_OutputHandler+0x32>
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <JPEG_OutputHandler+0x60>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	b913      	cbnz	r3, 8002a3e <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002a38:	6803      	ldr	r3, [r0, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a7c <JPEG_OutputHandler+0x70>)
 8002a40:	6813      	ldr	r3, [r2, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d10c      	bne.n	8002a60 <JPEG_OutputHandler+0x54>
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <JPEG_OutputHandler+0x74>)
 8002a48:	490b      	ldr	r1, [pc, #44]	@ (8002a78 <JPEG_OutputHandler+0x6c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	b933      	cbnz	r3, 8002a60 <JPEG_OutputHandler+0x54>
 8002a52:	682b      	ldr	r3, [r5, #0]
 8002a54:	b923      	cbnz	r3, 8002a60 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002a56:	2102      	movs	r1, #2
 8002a58:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002a5a:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002a5c:	f008 fc6d 	bl	800b33a <HAL_JPEG_Resume>
        return 1;
 8002a60:	2002      	movs	r0, #2
    }

    return 2;
}
 8002a62:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002a64:	2001      	movs	r0, #1
 8002a66:	e7fc      	b.n	8002a62 <JPEG_OutputHandler+0x56>
 8002a68:	24009e5c 	.word	0x24009e5c
 8002a6c:	24000838 	.word	0x24000838
 8002a70:	24009e4c 	.word	0x24009e4c
 8002a74:	2400083c 	.word	0x2400083c
 8002a78:	24000010 	.word	0x24000010
 8002a7c:	24009e58 	.word	0x24009e58
 8002a80:	24009e48 	.word	0x24009e48

08002a84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	4605      	mov	r5, r0
    if (length == 0)
 8002a88:	2a00      	cmp	r2, #0
 8002a8a:	d035      	beq.n	8002af8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d033      	beq.n	8002af8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002a90:	481a      	ldr	r0, [pc, #104]	@ (8002afc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002a92:	2403      	movs	r4, #3
 8002a94:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002a96:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002a98:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002a9a:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002a9e:	bf18      	it	ne
 8002aa0:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002aa4:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002aa6:	bf18      	it	ne
 8002aa8:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002aaa:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002aac:	0924      	lsrs	r4, r4, #4
 8002aae:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002ab0:	692c      	ldr	r4, [r5, #16]
 8002ab2:	f014 040f 	ands.w	r4, r4, #15
 8002ab6:	bf18      	it	ne
 8002ab8:	f1c4 0410 	rsbne	r4, r4, #16
 8002abc:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002abe:	4810      	ldr	r0, [pc, #64]	@ (8002b00 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002ac0:	f7ff feba 	bl	8002838 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ac4:	4c0f      	ldr	r4, [pc, #60]	@ (8002b04 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 8002ac6:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b08 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002aca:	4d0d      	ldr	r5, [pc, #52]	@ (8002b00 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002acc:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ace:	4628      	mov	r0, r5
 8002ad0:	f7ff ff9c 	bl	8002a0c <JPEG_OutputHandler>
 8002ad4:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d105      	bne.n	8002ae8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002ade:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	f00b fd5a 	bl	800e59c <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d1ef      	bne.n	8002ace <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	4a07      	ldr	r2, [pc, #28]	@ (8002b10 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002af2:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002af4:	4a07      	ldr	r2, [pc, #28]	@ (8002b14 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
 8002afa:	bf00      	nop
 8002afc:	24000824 	.word	0x24000824
 8002b00:	2400063c 	.word	0x2400063c
 8002b04:	24009e54 	.word	0x24009e54
 8002b08:	24009e4c 	.word	0x24009e4c
 8002b0c:	24000840 	.word	0x24000840
 8002b10:	24009e5c 	.word	0x24009e5c
 8002b14:	24000838 	.word	0x24000838

08002b18 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1c:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002b1e:	6943      	ldr	r3, [r0, #20]
{
 8002b20:	b085      	sub	sp, #20
 8002b22:	4604      	mov	r4, r0
 8002b24:	460f      	mov	r7, r1
 8002b26:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002b28:	b92b      	cbnz	r3, 8002b36 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002b2a:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002b2c:	21b0      	movs	r1, #176	@ 0xb0
 8002b2e:	4a29      	ldr	r2, [pc, #164]	@ (8002bd4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002b30:	4829      	ldr	r0, [pc, #164]	@ (8002bd8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002b32:	f023 f87d 	bl	8025c30 <__assert_func>
    readData(currentMovieOffset, 8);
 8002b36:	2208      	movs	r2, #8
 8002b38:	6981      	ldr	r1, [r0, #24]
 8002b3a:	f7ff fcd7 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002b3e:	69a6      	ldr	r6, [r4, #24]
 8002b40:	4620      	mov	r0, r4
 8002b42:	4631      	mov	r1, r6
 8002b44:	f7ff fcbf 	bl	80024c6 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b48:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002b4a:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7ff fcba 	bl	80024c6 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b52:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002b54:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7ff fc9a 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002b5c:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002b60:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b62:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002b64:	1842      	adds	r2, r0, r1
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d226      	bcs.n	8002bb8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002b6a:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002b6e:	459b      	cmp	fp, r3
 8002b70:	d117      	bne.n	8002ba2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002b72:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002b76:	459a      	cmp	sl, r3
 8002b78:	d113      	bne.n	8002ba2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002b7a:	b190      	cbz	r0, 8002ba2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b7c:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002b7e:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7ff fcb3 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b88:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002b8a:	462a      	mov	r2, r5
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f8cd 8000 	str.w	r8, [sp]
 8002b92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002b96:	463b      	mov	r3, r7
 8002b98:	f7ff ff74 	bl	8002a84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002b9c:	6963      	ldr	r3, [r4, #20]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002ba2:	69a3      	ldr	r3, [r4, #24]
 8002ba4:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002ba6:	b905      	cbnz	r5, 8002baa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002ba8:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002baa:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002bac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002bae:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002bb2:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002bb4:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002bb6:	d109      	bne.n	8002bcc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002bb8:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002bba:	2001      	movs	r0, #1
        frameNumber = 1;
 8002bbc:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002bbe:	6a23      	ldr	r3, [r4, #32]
 8002bc0:	61a3      	str	r3, [r4, #24]
}
 8002bc2:	f080 0001 	eor.w	r0, r0, #1
 8002bc6:	b005      	add	sp, #20
 8002bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002bcc:	2000      	movs	r0, #0
 8002bce:	e7f8      	b.n	8002bc2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002bd0:	08027183 	.word	0x08027183
 8002bd4:	080272a2 	.word	0x080272a2
 8002bd8:	080270d3 	.word	0x080270d3

08002bdc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002be0:	6981      	ldr	r1, [r0, #24]
{
 8002be2:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002be4:	2208      	movs	r2, #8
 8002be6:	f7ff fc81 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002bea:	69a7      	ldr	r7, [r4, #24]
 8002bec:	4620      	mov	r0, r4
 8002bee:	1d39      	adds	r1, r7, #4
 8002bf0:	f7ff fc4e 	bl	8002490 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002bf4:	f107 0108 	add.w	r1, r7, #8
 8002bf8:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002bfa:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f7ff fc75 	bl	80024ec <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002c02:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002c04:	b16e      	cbz	r6, 8002c22 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002c06:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c08:	4c07      	ldr	r4, [pc, #28]	@ (8002c28 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002c0a:	4d08      	ldr	r5, [pc, #32]	@ (8002c2c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002c0c:	4633      	mov	r3, r6
 8002c0e:	4807      	ldr	r0, [pc, #28]	@ (8002c2c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002c10:	f7ff fe12 	bl	8002838 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c14:	4628      	mov	r0, r5
 8002c16:	f7ff fef9 	bl	8002a0c <JPEG_OutputHandler>
 8002c1a:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f8      	beq.n	8002c14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002c22:	2001      	movs	r0, #1
 8002c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	24009e54 	.word	0x24009e54
 8002c2c:	2400063c 	.word	0x2400063c

08002c30 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002c30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca0 <DMA2D_CopyBuffer+0x70>)
 8002c32:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002c36:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002c38:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8002c3c:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002c3e:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002c40:	4e18      	ldr	r6, [pc, #96]	@ (8002ca4 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002c42:	4f19      	ldr	r7, [pc, #100]	@ (8002ca8 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002c44:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002c48:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002c4c:	434d      	muls	r5, r1
 8002c4e:	6911      	ldr	r1, [r2, #16]
 8002c50:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002c54:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002c56:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002c58:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002c5a:	683f      	ldr	r7, [r7, #0]
 8002c5c:	68d3      	ldr	r3, [r2, #12]
 8002c5e:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c60:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002c62:	45bc      	cmp	ip, r7
 8002c64:	d317      	bcc.n	8002c96 <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c66:	6892      	ldr	r2, [r2, #8]
 8002c68:	f1c2 0210 	rsb	r2, r2, #16
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c70:	4a0e      	ldr	r2, [pc, #56]	@ (8002cac <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c72:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c76:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c78:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca4 <DMA2D_CopyBuffer+0x74>)
 8002c7c:	4421      	add	r1, r4
 8002c7e:	4429      	add	r1, r5
 8002c80:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c82:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002c84:	2300      	movs	r3, #0
 8002c86:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <DMA2D_CopyBuffer+0x80>)
 8002c8a:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002c8c:	6843      	ldr	r3, [r0, #4]
 8002c8e:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <DMA2D_CopyBuffer+0x84>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c96:	f041 0110 	orr.w	r1, r1, #16
 8002c9a:	6471      	str	r1, [r6, #68]	@ 0x44
 8002c9c:	e7e8      	b.n	8002c70 <DMA2D_CopyBuffer+0x40>
 8002c9e:	bf00      	nop
 8002ca0:	24000824 	.word	0x24000824
 8002ca4:	52001000 	.word	0x52001000
 8002ca8:	24009e50 	.word	0x24009e50
 8002cac:	24009e6c 	.word	0x24009e6c
 8002cb0:	ff09000b 	.word	0xff09000b
 8002cb4:	00012301 	.word	0x00012301

08002cb8 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cec <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002cba:	2200      	movs	r2, #0
 8002cbc:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002cbe:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002cc0:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002cc2:	3101      	adds	r1, #1
 8002cc4:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	2901      	cmp	r1, #1
 8002cca:	d900      	bls.n	8002cce <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002ccc:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002cce:	4b08      	ldr	r3, [pc, #32]	@ (8002cf0 <DMA2D_ExternalJobCompleted+0x38>)
 8002cd0:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <DMA2D_ExternalJobCompleted+0x3c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	68c2      	ldr	r2, [r0, #12]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <DMA2D_ExternalJobCompleted+0x40>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <DMA2D_ExternalJobCompleted+0x44>)
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	f00b bc84 	b.w	800e5f4 <osSemaphoreRelease>
 8002cec:	2400083c 	.word	0x2400083c
 8002cf0:	24009e50 	.word	0x24009e50
 8002cf4:	24000824 	.word	0x24000824
 8002cf8:	24000838 	.word	0x24000838
 8002cfc:	24000840 	.word	0x24000840

08002d00 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002d00:	2101      	movs	r1, #1
 8002d02:	2200      	movs	r2, #0
{
 8002d04:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002d06:	4608      	mov	r0, r1
 8002d08:	f00b fbfe 	bl	800e508 <osSemaphoreNew>
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002d0e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002d10:	b928      	cbnz	r0, 8002d1e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002d14:	2128      	movs	r1, #40	@ 0x28
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002d18:	480a      	ldr	r0, [pc, #40]	@ (8002d44 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002d1a:	f022 ff89 	bl	8025c30 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2104      	movs	r1, #4
 8002d22:	2001      	movs	r0, #1
 8002d24:	f00b fc8f 	bl	800e646 <osMessageQueueNew>
 8002d28:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002d2a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002d2c:	b918      	cbnz	r0, 8002d36 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002d2e:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002d30:	212c      	movs	r1, #44	@ 0x2c
 8002d32:	4a03      	ldr	r2, [pc, #12]	@ (8002d40 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002d34:	e7f0      	b.n	8002d18 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002d36:	bd08      	pop	{r3, pc}
 8002d38:	24009e74 	.word	0x24009e74
 8002d3c:	08027344 	.word	0x08027344
 8002d40:	0802738d 	.word	0x0802738d
 8002d44:	080273bc 	.word	0x080273bc
 8002d48:	24009e70 	.word	0x24009e70
 8002d4c:	0802740d 	.word	0x0802740d

08002d50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002d50:	4b02      	ldr	r3, [pc, #8]	@ (8002d5c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002d52:	f04f 31ff 	mov.w	r1, #4294967295
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	f00b bc20 	b.w	800e59c <osSemaphoreAcquire>
 8002d5c:	24009e74 	.word	0x24009e74

08002d60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002d60:	4b01      	ldr	r3, [pc, #4]	@ (8002d68 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	f00b bc46 	b.w	800e5f4 <osSemaphoreRelease>
 8002d68:	24009e74 	.word	0x24009e74

08002d6c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002d6c:	4b02      	ldr	r3, [pc, #8]	@ (8002d78 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002d6e:	2100      	movs	r1, #0
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	f00b bc13 	b.w	800e59c <osSemaphoreAcquire>
 8002d76:	bf00      	nop
 8002d78:	24009e74 	.word	0x24009e74

08002d7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002d7c:	f7ff bff0 	b.w	8002d60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002d80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002d80:	2300      	movs	r3, #0
 8002d82:	4803      	ldr	r0, [pc, #12]	@ (8002d90 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002d84:	4903      	ldr	r1, [pc, #12]	@ (8002d94 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002d86:	461a      	mov	r2, r3
 8002d88:	6800      	ldr	r0, [r0, #0]
 8002d8a:	f00b bc97 	b.w	800e6bc <osMessageQueuePut>
 8002d8e:	bf00      	nop
 8002d90:	24009e70 	.word	0x24009e70
 8002d94:	24000030 	.word	0x24000030

08002d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002d98:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	4c07      	ldr	r4, [pc, #28]	@ (8002dbc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002d9e:	a901      	add	r1, sp, #4
 8002da0:	461a      	mov	r2, r3
 8002da2:	6820      	ldr	r0, [r4, #0]
 8002da4:	f00b fcbb 	bl	800e71e <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dac:	2200      	movs	r2, #0
 8002dae:	a901      	add	r1, sp, #4
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	f00b fcb4 	bl	800e71e <osMessageQueueGet>
}
 8002db6:	b002      	add	sp, #8
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	bf00      	nop
 8002dbc:	24009e70 	.word	0x24009e70

08002dc0 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002dc0:	6803      	ldr	r3, [r0, #0]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc4:	4718      	bx	r3

08002dc6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	4770      	bx	lr

08002dca <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002dca:	e7fe      	b.n	8002dca <DMA2D_XferErrorCallback>

08002dcc <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002dcc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002dd0:	4770      	bx	lr
	...

08002dd4 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002de0:	f00b fb50 	bl	800e484 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002de4:	6860      	ldr	r0, [r4, #4]
 8002de6:	6803      	ldr	r3, [r0, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4798      	blx	r3
 8002dec:	b978      	cbnz	r0, 8002e0e <_ZN8STM32DMA5startEv+0x3a>
 8002dee:	7a63      	ldrb	r3, [r4, #9]
 8002df0:	b16b      	cbz	r3, 8002e0e <_ZN8STM32DMA5startEv+0x3a>
 8002df2:	7a23      	ldrb	r3, [r4, #8]
 8002df4:	b95b      	cbnz	r3, 8002e0e <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002df6:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002e02:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002e0a:	f00b bb5e 	b.w	800e4ca <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002e0e:	490b      	ldr	r1, [pc, #44]	@ (8002e3c <_ZN8STM32DMA5startEv+0x68>)
 8002e10:	4a0b      	ldr	r2, [pc, #44]	@ (8002e40 <_ZN8STM32DMA5startEv+0x6c>)
 8002e12:	680b      	ldr	r3, [r1, #0]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d1f2      	bne.n	8002e02 <_ZN8STM32DMA5startEv+0x2e>
 8002e1c:	7a20      	ldrb	r0, [r4, #8]
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d1ef      	bne.n	8002e02 <_ZN8STM32DMA5startEv+0x2e>
 8002e22:	7aa0      	ldrb	r0, [r4, #10]
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d1ec      	bne.n	8002e02 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e28:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002e2a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e2e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002e32:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002e34:	f7ff fefc 	bl	8002c30 <DMA2D_CopyBuffer>
    }
 8002e38:	e7e3      	b.n	8002e02 <_ZN8STM32DMA5startEv+0x2e>
 8002e3a:	bf00      	nop
 8002e3c:	2400083c 	.word	0x2400083c
 8002e40:	24000010 	.word	0x24000010

08002e44 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e4a:	6003      	str	r3, [r0, #0]
 8002e4c:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <_ZN8STM32DMAD1Ev+0x1c>)
 8002e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002e52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e56:	f3bf 8f6f 	isb	sy
}
 8002e5a:	4770      	bx	lr
 8002e5c:	080275b0 	.word	0x080275b0
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002e64:	b510      	push	{r4, lr}
 8002e66:	4604      	mov	r4, r0
}
 8002e68:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002e6c:	f7ff ffea 	bl	8002e44 <_ZN8STM32DMAD1Ev>
 8002e70:	4620      	mov	r0, r4
 8002e72:	f022 fb64 	bl	802553e <_ZdlPvj>
 8002e76:	4620      	mov	r0, r4
 8002e78:	bd10      	pop	{r4, pc}
	...

08002e7c <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e7c:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002e7e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e80:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002e84:	f042 0210 	orr.w	r2, r2, #16
 8002e88:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002e8c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002e90:	f002 0210 	and.w	r2, r2, #16
 8002e94:	9201      	str	r2, [sp, #4]
 8002e96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002e98:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002e9a:	f042 0210 	orr.w	r2, r2, #16
 8002e9e:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002ea0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002ea2:	f022 0210 	bic.w	r2, r2, #16
 8002ea6:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <_ZN8STM32DMA10initializeEv+0x48>)
 8002eaa:	4a07      	ldr	r2, [pc, #28]	@ (8002ec8 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002eac:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002eae:	4a07      	ldr	r2, [pc, #28]	@ (8002ecc <_ZN8STM32DMA10initializeEv+0x50>)
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb2:	4b07      	ldr	r3, [pc, #28]	@ (8002ed0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002eb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002eb8:	609a      	str	r2, [r3, #8]
}
 8002eba:	b002      	add	sp, #8
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	240006b0 	.word	0x240006b0
 8002ec8:	08003119 	.word	0x08003119
 8002ecc:	08002dcb 	.word	0x08002dcb
 8002ed0:	e000e100 	.word	0xe000e100

08002ed4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002ed4:	b508      	push	{r3, lr}
    switch (format)
 8002ed6:	280a      	cmp	r0, #10
 8002ed8:	d809      	bhi.n	8002eee <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002eda:	e8df f000 	tbb	[pc, r0]
 8002ede:	1006      	.short	0x1006
 8002ee0:	0808080e 	.word	0x0808080e
 8002ee4:	10101008 	.word	0x10101008
 8002ee8:	10          	.byte	0x10
 8002ee9:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002eea:	2002      	movs	r0, #2
}
 8002eec:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002eee:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002ef0:	2191      	movs	r1, #145	@ 0x91
 8002ef2:	4a05      	ldr	r2, [pc, #20]	@ (8002f08 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002ef4:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002ef6:	f022 fe9b 	bl	8025c30 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002efa:	2000      	movs	r0, #0
 8002efc:	e7f6      	b.n	8002eec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002efe:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002f00:	e7f4      	b.n	8002eec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002f02:	bf00      	nop
 8002f04:	0802744f 	.word	0x0802744f
 8002f08:	0802746a 	.word	0x0802746a
 8002f0c:	080274b5 	.word	0x080274b5

08002f10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002f14:	7f88      	ldrb	r0, [r1, #30]
 8002f16:	f7ff ffdd 	bl	8002ed4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002f1c:	8aa5      	ldrh	r5, [r4, #20]
 8002f1e:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002f20:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002f22:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f26:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f2a:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f2c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f2e:	1b52      	subs	r2, r2, r5
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002f32:	6825      	ldr	r5, [r4, #0]
 8002f34:	2d08      	cmp	r5, #8
 8002f36:	d10e      	bne.n	8002f56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f38:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f3a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f3c:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002f40:	7f20      	ldrb	r0, [r4, #28]
 8002f42:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002f46:	61da      	str	r2, [r3, #28]
        return color;
 8002f48:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002f4a:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002f4c:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f4e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f50:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002f52:	601a      	str	r2, [r3, #0]
    }
}
 8002f54:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002f56:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002f58:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002f5a:	611a      	str	r2, [r3, #16]
 8002f5c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002f5e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002f60:	4a03      	ldr	r2, [pc, #12]	@ (8002f70 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002f62:	e7f6      	b.n	8002f52 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002f64:	52001000 	.word	0x52001000
 8002f68:	00010009 	.word	0x00010009
 8002f6c:	00022301 	.word	0x00022301
 8002f70:	00032301 	.word	0x00032301

08002f74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002f74:	b508      	push	{r3, lr}
    switch (format)
 8002f76:	280b      	cmp	r0, #11
 8002f78:	d80b      	bhi.n	8002f92 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002f7a:	e8df f000 	tbb	[pc, r0]
 8002f7e:	1206      	.short	0x1206
 8002f80:	0a0a0a10 	.word	0x0a0a0a10
 8002f84:	0808080a 	.word	0x0808080a
 8002f88:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002f8a:	2002      	movs	r0, #2
}
 8002f8c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002f8e:	2005      	movs	r0, #5
        break;
 8002f90:	e7fc      	b.n	8002f8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002f94:	2170      	movs	r1, #112	@ 0x70
 8002f96:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002f98:	4805      	ldr	r0, [pc, #20]	@ (8002fb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002f9a:	f022 fe49 	bl	8025c30 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e7f4      	b.n	8002f8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002fa2:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002fa4:	e7f2      	b.n	8002f8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002fa6:	bf00      	nop
 8002fa8:	0802744f 	.word	0x0802744f
 8002fac:	08027504 	.word	0x08027504
 8002fb0:	080274b5 	.word	0x080274b5

08002fb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002fb8:	7f4f      	ldrb	r7, [r1, #29]
{
 8002fba:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002fbc:	4638      	mov	r0, r7
 8002fbe:	f7ff ffd9 	bl	8002f74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fc2:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002fc6:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f7ff ffd3 	bl	8002f74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002fce:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f7ff ff7f 	bl	8002ed4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fd6:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002fda:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002fde:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fe2:	4b45      	ldr	r3, [pc, #276]	@ (80030f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002fe4:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002fe6:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fe8:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fea:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002fec:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fee:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002ff2:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ff8:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002ffe:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003002:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8003004:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8003006:	f8d9 4000 	ldr.w	r4, [r9]
 800300a:	f899 201c 	ldrb.w	r2, [r9, #28]
 800300e:	2c80      	cmp	r4, #128	@ 0x80
 8003010:	d022      	beq.n	8003058 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8003012:	d80f      	bhi.n	8003034 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8003014:	2c20      	cmp	r4, #32
 8003016:	d066      	beq.n	80030e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8003018:	2c40      	cmp	r4, #64	@ 0x40
 800301a:	d064      	beq.n	80030e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 800301c:	2c04      	cmp	r4, #4
 800301e:	d05c      	beq.n	80030da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003020:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8003024:	4b34      	ldr	r3, [pc, #208]	@ (80030f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003026:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003028:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800302c:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 800302e:	d060      	beq.n	80030f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003030:	4a32      	ldr	r2, [pc, #200]	@ (80030fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8003032:	e03f      	b.n	80030b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8003034:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8003038:	d004      	beq.n	8003044 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800303a:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 800303e:	d1ef      	bne.n	8003020 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003040:	482f      	ldr	r0, [pc, #188]	@ (8003100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8003042:	e000      	b.n	8003046 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003044:	482f      	ldr	r0, [pc, #188]	@ (8003104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003046:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 800304a:	61da      	str	r2, [r3, #28]
 800304c:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003050:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003052:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003054:	6159      	str	r1, [r3, #20]
 8003056:	e02c      	b.n	80030b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003058:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800305c:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003060:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003064:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003066:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003068:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800306a:	1d21      	adds	r1, r4, #4
 800306c:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800306e:	7821      	ldrb	r1, [r4, #0]
 8003070:	b141      	cbz	r1, 8003084 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003072:	2901      	cmp	r1, #1
 8003074:	d021      	beq.n	80030ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8003078:	f240 110b 	movw	r1, #267	@ 0x10b
 800307c:	4a23      	ldr	r2, [pc, #140]	@ (800310c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 800307e:	4824      	ldr	r0, [pc, #144]	@ (8003110 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003080:	f022 fdd6 	bl	8025c30 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	8861      	ldrh	r1, [r4, #2]
 8003088:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800308c:	3901      	subs	r1, #1
 800308e:	f022 0210 	bic.w	r2, r2, #16
 8003092:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003096:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8003098:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800309a:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800309c:	69d9      	ldr	r1, [r3, #28]
 800309e:	f041 0120 	orr.w	r1, r1, #32
 80030a2:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80030a4:	69d9      	ldr	r1, [r3, #28]
 80030a6:	0689      	lsls	r1, r1, #26
 80030a8:	d4fc      	bmi.n	80030a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80030aa:	2110      	movs	r1, #16
 80030ac:	6099      	str	r1, [r3, #8]
            if (blend)
 80030ae:	2a00      	cmp	r2, #0
 80030b0:	d0be      	beq.n	8003030 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80030b2:	4a18      	ldr	r2, [pc, #96]	@ (8003114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80030ba:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 80030bc:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80030be:	8860      	ldrh	r0, [r4, #2]
 80030c0:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 80030c4:	bf18      	it	ne
 80030c6:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80030c8:	3801      	subs	r0, #1
 80030ca:	f021 0110 	bic.w	r1, r1, #16
 80030ce:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80030d2:	f041 0110 	orr.w	r1, r1, #16
 80030d6:	61d9      	str	r1, [r3, #28]
                break;
 80030d8:	e7df      	b.n	800309a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030da:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80030de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030e2:	61da      	str	r2, [r3, #28]
 80030e4:	e7b5      	b.n	8003052 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80030e6:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80030ea:	4b03      	ldr	r3, [pc, #12]	@ (80030f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80030ec:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80030f0:	e7f7      	b.n	80030e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80030f2:	f242 3201 	movw	r2, #8961	@ 0x2301
 80030f6:	e7dd      	b.n	80030b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80030f8:	52001000 	.word	0x52001000
 80030fc:	00012301 	.word	0x00012301
 8003100:	00020009 	.word	0x00020009
 8003104:	0002000a 	.word	0x0002000a
 8003108:	0802754e 	.word	0x0802754e
 800310c:	08027568 	.word	0x08027568
 8003110:	080274b5 	.word	0x080274b5
 8003114:	00022301 	.word	0x00022301

08003118 <DMA2D_XferCpltCallback>:
 8003118:	4b02      	ldr	r3, [pc, #8]	@ (8003124 <DMA2D_XferCpltCallback+0xc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800311e:	6803      	ldr	r3, [r0, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	4718      	bx	r3
 8003124:	24026418 	.word	0x24026418

08003128 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8003128:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 800312c:	b510      	push	{r4, lr}
 800312e:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8003130:	b9d3      	cbnz	r3, 8003168 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003136:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8003138:	4919      	ldr	r1, [pc, #100]	@ (80031a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800313a:	4a1a      	ldr	r2, [pc, #104]	@ (80031a4 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800313c:	680b      	ldr	r3, [r1, #0]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d12a      	bne.n	800319c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003146:	4818      	ldr	r0, [pc, #96]	@ (80031a8 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8003148:	6800      	ldr	r0, [r0, #0]
 800314a:	bb38      	cbnz	r0, 800319c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800314c:	7a20      	ldrb	r0, [r4, #8]
 800314e:	bb28      	cbnz	r0, 800319c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003150:	7aa0      	ldrb	r0, [r4, #10]
 8003152:	bb18      	cbnz	r0, 800319c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003154:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8003156:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 800315a:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800315c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003164:	f7ff bd64 	b.w	8002c30 <DMA2D_CopyBuffer>
        if (isRunning)
 8003168:	7a03      	ldrb	r3, [r0, #8]
 800316a:	b143      	cbz	r3, 800317e <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 800316c:	2300      	movs	r3, #0
 800316e:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003176:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800317a:	f7ff fd9d 	bl	8002cb8 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 800317e:	6860      	ldr	r0, [r4, #4]
 8003180:	6803      	ldr	r3, [r0, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4798      	blx	r3
 8003186:	b948      	cbnz	r0, 800319c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003188:	7a63      	ldrb	r3, [r4, #9]
 800318a:	b13b      	cbz	r3, 800319c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 800318c:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 800318e:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8003192:	4620      	mov	r0, r4
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8003196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 800319a:	4718      	bx	r3
    }
 800319c:	bd10      	pop	{r4, pc}
 800319e:	bf00      	nop
 80031a0:	2400083c 	.word	0x2400083c
 80031a4:	24000010 	.word	0x24000010
 80031a8:	24000838 	.word	0x24000838

080031ac <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80031b0:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <_ZN8STM32DMAC1Ev+0x40>)
 80031b2:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80031b4:	2600      	movs	r6, #0
 80031b6:	4625      	mov	r5, r4
 80031b8:	2260      	movs	r2, #96	@ 0x60
 80031ba:	6060      	str	r0, [r4, #4]
 80031bc:	7226      	strb	r6, [r4, #8]
 80031be:	7266      	strb	r6, [r4, #9]
 80031c0:	f845 3b20 	str.w	r3, [r5], #32
 80031c4:	4629      	mov	r1, r5
 80031c6:	f00e ff15 	bl	8011ff4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80031ca:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80031ce:	60ee      	str	r6, [r5, #12]
 80031d0:	3524      	adds	r5, #36	@ 0x24
 80031d2:	429d      	cmp	r5, r3
 80031d4:	d1fb      	bne.n	80031ce <_ZN8STM32DMAC1Ev+0x22>
 80031d6:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 80031da:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80031dc:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 80031e0:	f00b f91b 	bl	800e41a <osMutexNew>
 80031e4:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 80031e8:	4620      	mov	r0, r4
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	080275b0 	.word	0x080275b0

080031f0 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80031f0:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	07d2      	lsls	r2, r2, #31
 80031f6:	d4fc      	bmi.n	80031f2 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031f8:	2223      	movs	r2, #35	@ 0x23
 80031fa:	609a      	str	r2, [r3, #8]
}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	52001000 	.word	0x52001000

08003204 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003204:	4a0b      	ldr	r2, [pc, #44]	@ (8003234 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8003206:	6953      	ldr	r3, [r2, #20]
 8003208:	03db      	lsls	r3, r3, #15
 800320a:	d511      	bpl.n	8003230 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800320c:	2900      	cmp	r1, #0
 800320e:	dd0f      	ble.n	8003230 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003210:	f000 031f 	and.w	r3, r0, #31
 8003214:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8003216:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800321a:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800321c:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003220:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8003222:	1a0b      	subs	r3, r1, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	dcf9      	bgt.n	800321c <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8003228:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800322c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8003238:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800323a:	4c10      	ldr	r4, [pc, #64]	@ (800327c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 800323c:	6825      	ldr	r5, [r4, #0]
 800323e:	07ed      	lsls	r5, r5, #31
 8003240:	d4fc      	bmi.n	800323c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003242:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003244:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8003246:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003248:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800324a:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800324e:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003252:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003254:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003256:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8003258:	d00c      	beq.n	8003274 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800325a:	4909      	ldr	r1, [pc, #36]	@ (8003280 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800325c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003260:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003262:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8003266:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800326a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 800326c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800326e:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003270:	6023      	str	r3, [r4, #0]
    }
}
 8003272:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003274:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003276:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003278:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800327a:	e7f9      	b.n	8003270 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 800327c:	52001000 	.word	0x52001000
 8003280:	00010009 	.word	0x00010009
 8003284:	00020001 	.word	0x00020001
 8003288:	00030001 	.word	0x00030001

0800328c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 800328c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800328e:	4c0e      	ldr	r4, [pc, #56]	@ (80032c8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003290:	6825      	ldr	r5, [r4, #0]
 8003292:	07ed      	lsls	r5, r5, #31
 8003294:	d4fc      	bmi.n	8003290 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003296:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003298:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 800329a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800329c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800329e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032a2:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80032a6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032a8:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80032aa:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80032ac:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 80032ae:	d007      	beq.n	80032c0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032b0:	4a06      	ldr	r2, [pc, #24]	@ (80032cc <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 80032b2:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 80032b6:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80032b8:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80032ba:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80032bc:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 80032be:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 80032c2:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 80032c4:	6025      	str	r5, [r4, #0]
}
 80032c6:	e7fa      	b.n	80032be <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 80032c8:	52001000 	.word	0x52001000
 80032cc:	00020001 	.word	0x00020001
 80032d0:	ff020001 	.word	0xff020001

080032d4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80032d4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80032d6:	4c0b      	ldr	r4, [pc, #44]	@ (8003304 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 80032d8:	6825      	ldr	r5, [r4, #0]
 80032da:	07ed      	lsls	r5, r5, #31
 80032dc:	d4fc      	bmi.n	80032d8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032de:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032e0:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032e2:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032e4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80032e6:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032ec:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80032ee:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80032f0:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80032f2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80032f4:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80032f6:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80032f8:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80032fa:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80032fc:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80032fe:	6023      	str	r3, [r4, #0]
}
 8003300:	bd30      	pop	{r4, r5, pc}
 8003302:	bf00      	nop
 8003304:	52001000 	.word	0x52001000
 8003308:	00020001 	.word	0x00020001

0800330c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800330c:	2001      	movs	r0, #1
 800330e:	4770      	bx	lr

08003310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8003310:	2040      	movs	r0, #64	@ 0x40
 8003312:	4770      	bx	lr

08003314 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8003314:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
 8003318:	3008      	adds	r0, #8
 800331a:	4770      	bx	lr

0800331c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800331c:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
 8003320:	3008      	adds	r0, #8
 8003322:	4770      	bx	lr

08003324 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003324:	2001      	movs	r0, #1
 8003326:	4770      	bx	lr

08003328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003328:	f241 3004 	movw	r0, #4868	@ 0x1304
 800332c:	4770      	bx	lr

0800332e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800332e:	f241 3304 	movw	r3, #4868	@ 0x1304
 8003332:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003336:	3008      	adds	r0, #8
 8003338:	4770      	bx	lr

0800333a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800333a:	f241 3304 	movw	r3, #4868	@ 0x1304
 800333e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003342:	3008      	adds	r0, #8
 8003344:	4770      	bx	lr

08003346 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003346:	2001      	movs	r0, #1
 8003348:	4770      	bx	lr

0800334a <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800334a:	2010      	movs	r0, #16
 800334c:	4770      	bx	lr

0800334e <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800334e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003352:	3008      	adds	r0, #8
 8003354:	4770      	bx	lr

08003356 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003356:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800335a:	3008      	adds	r0, #8
 800335c:	4770      	bx	lr

0800335e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 800335e:	4608      	mov	r0, r1
 8003360:	f001 b82c 	b.w	80043bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08003364 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8003366:	b510      	push	{r4, lr}
 8003368:	4604      	mov	r4, r0
 800336a:	6003      	str	r3, [r0, #0]
 800336c:	f00d f9af 	bl	80106ce <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003370:	4620      	mov	r0, r4
 8003372:	bd10      	pop	{r4, pc}
 8003374:	08027668 	.word	0x08027668

08003378 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003378:	b510      	push	{r4, lr}
 800337a:	4604      	mov	r4, r0
 800337c:	f7ff fff2 	bl	8003364 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003380:	2148      	movs	r1, #72	@ 0x48
 8003382:	4620      	mov	r0, r4
 8003384:	f022 f8db 	bl	802553e <_ZdlPvj>
 8003388:	4620      	mov	r0, r4
 800338a:	bd10      	pop	{r4, pc}

0800338c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800338e:	b510      	push	{r4, lr}
 8003390:	4604      	mov	r4, r0
 8003392:	6003      	str	r3, [r0, #0]
 8003394:	f00d f99b 	bl	80106ce <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003398:	4620      	mov	r0, r4
 800339a:	bd10      	pop	{r4, pc}
 800339c:	08027634 	.word	0x08027634

080033a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4604      	mov	r4, r0
 80033a4:	f7ff fff2 	bl	800338c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033a8:	f241 310c 	movw	r1, #4876	@ 0x130c
 80033ac:	4620      	mov	r0, r4
 80033ae:	f022 f8c6 	bl	802553e <_ZdlPvj>
 80033b2:	4620      	mov	r0, r4
 80033b4:	bd10      	pop	{r4, pc}
	...

080033b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80033b8:	4b03      	ldr	r3, [pc, #12]	@ (80033c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
 80033be:	6003      	str	r3, [r0, #0]
 80033c0:	f00d f985 	bl	80106ce <_ZN8touchgfx17AbstractPartitionD1Ev>
 80033c4:	4620      	mov	r0, r4
 80033c6:	bd10      	pop	{r4, pc}
 80033c8:	08027600 	.word	0x08027600

080033cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80033cc:	b510      	push	{r4, lr}
 80033ce:	4604      	mov	r4, r0
 80033d0:	f7ff fff2 	bl	80033b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033d4:	2118      	movs	r1, #24
 80033d6:	4620      	mov	r0, r4
 80033d8:	f022 f8b1 	bl	802553e <_ZdlPvj>
 80033dc:	4620      	mov	r0, r4
 80033de:	bd10      	pop	{r4, pc}

080033e0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <_ZN12FrontendHeapD1Ev+0x28>)
 80033e2:	b510      	push	{r4, lr}
 80033e4:	4604      	mov	r4, r0
 80033e6:	6003      	str	r3, [r0, #0]
 80033e8:	f500 5099 	add.w	r0, r0, #4896	@ 0x1320
 80033ec:	3018      	adds	r0, #24
 80033ee:	f7ff ffb9 	bl	8003364 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80033f2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80033f6:	f7ff ffc9 	bl	800338c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033fa:	f104 0014 	add.w	r0, r4, #20
 80033fe:	f7ff ffdb 	bl	80033b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003402:	4620      	mov	r0, r4
 8003404:	bd10      	pop	{r4, pc}
 8003406:	bf00      	nop
 8003408:	0802769c 	.word	0x0802769c

0800340c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800340c:	b508      	push	{r3, lr}
 800340e:	4802      	ldr	r0, [pc, #8]	@ (8003418 <__tcf_0+0xc>)
 8003410:	f7ff ffe6 	bl	80033e0 <_ZN12FrontendHeapD1Ev>
 8003414:	bd08      	pop	{r3, pc}
 8003416:	bf00      	nop
 8003418:	2400ad30 	.word	0x2400ad30

0800341c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800341c:	b510      	push	{r4, lr}
 800341e:	4604      	mov	r4, r0
 8003420:	f7ff ffde 	bl	80033e0 <_ZN12FrontendHeapD1Ev>
 8003424:	f44f 51a7 	mov.w	r1, #5344	@ 0x14e0
 8003428:	4620      	mov	r0, r4
 800342a:	f022 f888 	bl	802553e <_ZdlPvj>
 800342e:	4620      	mov	r0, r4
 8003430:	bd10      	pop	{r4, pc}
	...

08003434 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003438:	f000 fc54 	bl	8003ce4 <_ZN14BitmapDatabase11getInstanceEv>
 800343c:	2400      	movs	r4, #0
 800343e:	4605      	mov	r5, r0
 8003440:	f000 fc54 	bl	8003cec <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003444:	4623      	mov	r3, r4
 8003446:	4601      	mov	r1, r0
 8003448:	4622      	mov	r2, r4
 800344a:	4628      	mov	r0, r5
 800344c:	9400      	str	r4, [sp, #0]
 800344e:	f017 fa9f 	bl	801a990 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003452:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <touchgfx_init+0xbc>)
 8003454:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003456:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003458:	4d27      	ldr	r5, [pc, #156]	@ (80034f8 <touchgfx_init+0xc4>)
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	f003 fc52 	bl	8006d04 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003460:	4b26      	ldr	r3, [pc, #152]	@ (80034fc <touchgfx_init+0xc8>)
 8003462:	4a27      	ldr	r2, [pc, #156]	@ (8003500 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003464:	4827      	ldr	r0, [pc, #156]	@ (8003504 <touchgfx_init+0xd0>)
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	f017 f93e 	bl	801a6e8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	f3bf 8f5b 	dmb	ish
 8003472:	07db      	lsls	r3, r3, #31
 8003474:	d436      	bmi.n	80034e4 <touchgfx_init+0xb0>
 8003476:	4628      	mov	r0, r5
 8003478:	f022 f863 	bl	8025542 <__cxa_guard_acquire>
 800347c:	b390      	cbz	r0, 80034e4 <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800347e:	4c22      	ldr	r4, [pc, #136]	@ (8003508 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 8003480:	4f22      	ldr	r7, [pc, #136]	@ (800350c <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003482:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 8003484:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003488:	f107 064c 	add.w	r6, r7, #76	@ 0x4c
          screenStorage(scr),
 800348c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8003490:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003492:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003494:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003498:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 800349a:	6126      	str	r6, [r4, #16]
 800349c:	f00d f918 	bl	80106d0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80034a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <touchgfx_init+0xe0>)
 80034a2:	4640      	mov	r0, r8
 80034a4:	6163      	str	r3, [r4, #20]
 80034a6:	f00d f913 	bl	80106d0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80034aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <touchgfx_init+0xe4>)
 80034ac:	4638      	mov	r0, r7
 80034ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80034b0:	f00d f90e 	bl	80106d0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80034b4:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80034b8:	4a18      	ldr	r2, [pc, #96]	@ (800351c <touchgfx_init+0xe8>)
 80034ba:	f504 509c 	add.w	r0, r4, #4992	@ 0x1380
 80034be:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
 80034c2:	f003 fe21 	bl	8007108 <_ZN5ModelC1Ev>
 80034c6:	4622      	mov	r2, r4
 80034c8:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80034cc:	4630      	mov	r0, r6
 80034ce:	f003 fe11 	bl	80070f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80034d2:	4630      	mov	r0, r6
 80034d4:	f000 ff72 	bl	80043bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80034d8:	4811      	ldr	r0, [pc, #68]	@ (8003520 <touchgfx_init+0xec>)
 80034da:	f022 fbc7 	bl	8025c6c <atexit>
 80034de:	4628      	mov	r0, r5
 80034e0:	f022 f83b 	bl	802555a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80034e4:	480f      	ldr	r0, [pc, #60]	@ (8003524 <touchgfx_init+0xf0>)
}
 80034e6:	b002      	add	sp, #8
 80034e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80034ec:	f7fe bcda 	b.w	8001ea4 <_ZN11TouchGFXHAL10initializeEv>
 80034f0:	2402647c 	.word	0x2402647c
 80034f4:	24009ef4 	.word	0x24009ef4
 80034f8:	2400ad2c 	.word	0x2400ad2c
 80034fc:	24009f14 	.word	0x24009f14
 8003500:	24009ef8 	.word	0x24009ef8
 8003504:	24000034 	.word	0x24000034
 8003508:	2400ad30 	.word	0x2400ad30
 800350c:	2400c068 	.word	0x2400c068
 8003510:	0802769c 	.word	0x0802769c
 8003514:	08027600 	.word	0x08027600
 8003518:	08027634 	.word	0x08027634
 800351c:	08027668 	.word	0x08027668
 8003520:	0800340d 	.word	0x0800340d
 8003524:	24009e78 	.word	0x24009e78

08003528 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003528:	4770      	bx	lr
	...

0800352c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800352c:	4801      	ldr	r0, [pc, #4]	@ (8003534 <touchgfx_taskEntry+0x8>)
 800352e:	f7fe bccb 	b.w	8001ec8 <_ZN11TouchGFXHAL9taskEntryEv>
 8003532:	bf00      	nop
 8003534:	24009e78 	.word	0x24009e78

08003538 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003538:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 800353a:	4c0e      	ldr	r4, [pc, #56]	@ (8003574 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 800353c:	4b0e      	ldr	r3, [pc, #56]	@ (8003578 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800353e:	4e0f      	ldr	r6, [pc, #60]	@ (800357c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8003540:	4620      	mov	r0, r4
static LCD24bpp display;
 8003542:	4d0f      	ldr	r5, [pc, #60]	@ (8003580 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003544:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003546:	f7ff fe31 	bl	80031ac <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800354a:	4628      	mov	r0, r5
 800354c:	f01b f88a 	bl	801e664 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003550:	480c      	ldr	r0, [pc, #48]	@ (8003584 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8003552:	f014 fe07 	bl	8018164 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003556:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800355a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800355e:	4621      	mov	r1, r4
 8003560:	4809      	ldr	r0, [pc, #36]	@ (8003588 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003562:	e9cd 3200 	strd	r3, r2, [sp]
 8003566:	4633      	mov	r3, r6
 8003568:	462a      	mov	r2, r5
 800356a:	f7fe fd41 	bl	8001ff0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800356e:	b002      	add	sp, #8
 8003570:	bd70      	pop	{r4, r5, r6, pc}
 8003572:	bf00      	nop
 8003574:	24009f80 	.word	0x24009f80
 8003578:	08026e10 	.word	0x08026e10
 800357c:	2400ad28 	.word	0x2400ad28
 8003580:	24009f14 	.word	0x24009f14
 8003584:	24009ef8 	.word	0x24009ef8
 8003588:	24009e78 	.word	0x24009e78

0800358c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800358c:	4801      	ldr	r0, [pc, #4]	@ (8003594 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800358e:	f7ff bc59 	b.w	8002e44 <_ZN8STM32DMAD1Ev>
 8003592:	bf00      	nop
 8003594:	24009f80 	.word	0x24009f80

08003598 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003598:	2000      	movs	r0, #0
 800359a:	4770      	bx	lr

0800359c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800359c:	8081      	strh	r1, [r0, #4]
    }
 800359e:	4770      	bx	lr

080035a0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80035a0:	80c1      	strh	r1, [r0, #6]
    }
 80035a2:	4770      	bx	lr

080035a4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80035a4:	8101      	strh	r1, [r0, #8]
    }
 80035a6:	4770      	bx	lr

080035a8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80035a8:	8141      	strh	r1, [r0, #10]
    }
 80035aa:	4770      	bx	lr

080035ac <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80035ac:	4770      	bx	lr

080035ae <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80035ae:	4770      	bx	lr

080035b0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80035b0:	4770      	bx	lr

080035b2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80035b2:	4770      	bx	lr

080035b4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80035b4:	4770      	bx	lr

080035b6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80035b6:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80035b8:	88c4      	ldrh	r4, [r0, #6]
 80035ba:	6803      	ldr	r3, [r0, #0]
 80035bc:	1b12      	subs	r2, r2, r4
 80035be:	8884      	ldrh	r4, [r0, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	1b09      	subs	r1, r1, r4
 80035c4:	b212      	sxth	r2, r2
    }
 80035c6:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80035ca:	b209      	sxth	r1, r1
 80035cc:	4718      	bx	r3

080035ce <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80035ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035d2:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
 80035d8:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80035da:	6813      	ldr	r3, [r2, #0]
 80035dc:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80035de:	6010      	str	r0, [r2, #0]
    }
 80035e0:	4770      	bx	lr

080035e2 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80035e2:	2000      	movs	r0, #0
 80035e4:	4770      	bx	lr

080035e6 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80035e6:	888b      	ldrh	r3, [r1, #4]
 80035e8:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80035ea:	2001      	movs	r0, #1
 80035ec:	4770      	bx	lr

080035ee <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80035ee:	4770      	bx	lr

080035f0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80035f0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80035f4:	4770      	bx	lr

080035f6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80035f6:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80035fa:	4770      	bx	lr

080035fc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80035fc:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80035fe:	b510      	push	{r4, lr}
        return rect.width;
 8003600:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003604:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003608:	8002      	strh	r2, [r0, #0]
 800360a:	8042      	strh	r2, [r0, #2]
 800360c:	8084      	strh	r4, [r0, #4]
 800360e:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003610:	bd10      	pop	{r4, pc}

08003612 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003612:	2200      	movs	r2, #0
 8003614:	8002      	strh	r2, [r0, #0]
 8003616:	8042      	strh	r2, [r0, #2]
 8003618:	8082      	strh	r2, [r0, #4]
 800361a:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800361c:	4770      	bx	lr

0800361e <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 800361e:	7701      	strb	r1, [r0, #28]
    }
 8003620:	4770      	bx	lr

08003622 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8003622:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003626:	4770      	bx	lr

08003628 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003628:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 800362c:	4770      	bx	lr

0800362e <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800362e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 8003632:	4770      	bx	lr

08003634 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003634:	2001      	movs	r0, #1
 8003636:	4770      	bx	lr

08003638 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003638:	3098      	adds	r0, #152	@ 0x98
 800363a:	4770      	bx	lr

0800363c <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 800363c:	308c      	adds	r0, #140	@ 0x8c
 800363e:	4770      	bx	lr

08003640 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8003640:	3084      	adds	r0, #132	@ 0x84
 8003642:	4770      	bx	lr

08003644 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003644:	4770      	bx	lr
	...

08003648 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	4b02      	ldr	r3, [pc, #8]	@ (8003654 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800364a:	2290      	movs	r2, #144	@ 0x90
 800364c:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000e100 	.word	0xe000e100

08003658 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003658:	4770      	bx	lr

0800365a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800365a:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800365c:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003660:	4770      	bx	lr

08003662 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003662:	4770      	bx	lr

08003664 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003664:	4770      	bx	lr

08003666 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003666:	4770      	bx	lr

08003668 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003668:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800366c:	4611      	mov	r1, r2
 800366e:	6840      	ldr	r0, [r0, #4]
 8003670:	6803      	ldr	r3, [r0, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4718      	bx	r3

08003676 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003676:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800367a:	4770      	bx	lr

0800367c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800367c:	b510      	push	{r4, lr}
 800367e:	4604      	mov	r4, r0
 8003680:	2148      	movs	r1, #72	@ 0x48
 8003682:	f021 ff5c 	bl	802553e <_ZdlPvj>
 8003686:	4620      	mov	r0, r4
 8003688:	bd10      	pop	{r4, pc}

0800368a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800368a:	b510      	push	{r4, lr}
 800368c:	4604      	mov	r4, r0
 800368e:	212c      	movs	r1, #44	@ 0x2c
 8003690:	f021 ff55 	bl	802553e <_ZdlPvj>
 8003694:	4620      	mov	r0, r4
 8003696:	bd10      	pop	{r4, pc}

08003698 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003698:	b510      	push	{r4, lr}
 800369a:	4604      	mov	r4, r0
 800369c:	21bc      	movs	r1, #188	@ 0xbc
 800369e:	f021 ff4e 	bl	802553e <_ZdlPvj>
 80036a2:	4620      	mov	r0, r4
 80036a4:	bd10      	pop	{r4, pc}
	...

080036a8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4604      	mov	r4, r0
    HAL::initialize();
 80036ac:	f00d fe05 	bl	80112ba <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80036b4:	f013 fbde 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 80036b8:	4601      	mov	r1, r0
 80036ba:	4620      	mov	r0, r4
 80036bc:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	4908      	ldr	r1, [pc, #32]	@ (80036e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 80036c2:	4620      	mov	r0, r4
 80036c4:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80036c8:	2300      	movs	r3, #0
 80036ca:	461a      	mov	r2, r3
 80036cc:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 80036ce:	6863      	ldr	r3, [r4, #4]
 80036d0:	4a05      	ldr	r2, [pc, #20]	@ (80036e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80036d2:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80036d6:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80036d8:	4a05      	ldr	r2, [pc, #20]	@ (80036f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80036de:	4a05      	ldr	r2, [pc, #20]	@ (80036f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80036e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	d0119400 	.word	0xd0119400
 80036e8:	2400c318 	.word	0x2400c318
 80036ec:	2400c2d0 	.word	0x2400c2d0
 80036f0:	d0000000 	.word	0xd0000000
 80036f4:	00119400 	.word	0x00119400

080036f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4604      	mov	r4, r0
 80036fc:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80036fe:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003700:	f04f 31ff 	mov.w	r1, #4294967295
 8003704:	f00a febe 	bl	800e484 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003708:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800370a:	f00a fede 	bl	800e4ca <osMutexRelease>
        streams[handle].isActive = false;
 800370e:	2324      	movs	r3, #36	@ 0x24
 8003710:	fb03 4505 	mla	r5, r3, r5, r4
 8003714:	2300      	movs	r3, #0
 8003716:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 800371a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800371e:	b90b      	cbnz	r3, 8003724 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003720:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003722:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003724:	bd38      	pop	{r3, r4, r5, pc}

08003726 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003726:	f00d bd79 	b.w	801121c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

0800372a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 800372a:	f00d beda 	b.w	80114e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800372e <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800372e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003732:	b112      	cbz	r2, 800373a <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003734:	6803      	ldr	r3, [r0, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	4718      	bx	r3
    }
 800373a:	4770      	bx	lr

0800373c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800373c:	4a12      	ldr	r2, [pc, #72]	@ (8003788 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800373e:	6953      	ldr	r3, [r2, #20]
 8003740:	03db      	lsls	r3, r3, #15
{
 8003742:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003744:	d51e      	bpl.n	8003784 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003746:	2300      	movs	r3, #0
 8003748:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800374c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003750:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003754:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003758:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800375c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003760:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003762:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003766:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003768:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800376c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800376e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003772:	d2f9      	bcs.n	8003768 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003774:	3b20      	subs	r3, #32
 8003776:	f113 0f20 	cmn.w	r3, #32
 800377a:	d1f2      	bne.n	8003762 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800377c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003780:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003784:	bd70      	pop	{r4, r5, r6, pc}
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800378c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800378e:	b131      	cbz	r1, 800379e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003790:	4b04      	ldr	r3, [pc, #16]	@ (80037a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003792:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003796:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003798:	4804      	ldr	r0, [pc, #16]	@ (80037ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800379a:	f022 fa49 	bl	8025c30 <__assert_func>
    }
 800379e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80037a2:	bd08      	pop	{r3, pc}
 80037a4:	080276a8 	.word	0x080276a8
 80037a8:	080276bc 	.word	0x080276bc
 80037ac:	08027846 	.word	0x08027846

080037b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80037b0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80037b2:	b131      	cbz	r1, 80037c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 80037b6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80037ba:	4a06      	ldr	r2, [pc, #24]	@ (80037d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 80037bc:	4806      	ldr	r0, [pc, #24]	@ (80037d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 80037be:	f022 fa37 	bl	8025c30 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80037c2:	6840      	ldr	r0, [r0, #4]
 80037c4:	4611      	mov	r1, r2
 80037c6:	6803      	ldr	r3, [r0, #0]
    }
 80037c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	4718      	bx	r3
 80037d0:	080276a8 	.word	0x080276a8
 80037d4:	08027890 	.word	0x08027890
 80037d8:	08027846 	.word	0x08027846

080037dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80037dc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80037de:	b129      	cbz	r1, 80037ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80037e2:	2179      	movs	r1, #121	@ 0x79
 80037e4:	4a03      	ldr	r2, [pc, #12]	@ (80037f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80037e6:	4804      	ldr	r0, [pc, #16]	@ (80037f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80037e8:	f022 fa22 	bl	8025c30 <__assert_func>
    }
 80037ec:	68c0      	ldr	r0, [r0, #12]
 80037ee:	bd08      	pop	{r3, pc}
 80037f0:	080276a8 	.word	0x080276a8
 80037f4:	08027a3e 	.word	0x08027a3e
 80037f8:	08027846 	.word	0x08027846

080037fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80037fc:	b510      	push	{r4, lr}
 80037fe:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003800:	b129      	cbz	r1, 800380e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8003802:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003804:	21a2      	movs	r1, #162	@ 0xa2
 8003806:	4a19      	ldr	r2, [pc, #100]	@ (800386c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003808:	4819      	ldr	r0, [pc, #100]	@ (8003870 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800380a:	f022 fa11 	bl	8025c30 <__assert_func>
        switch (cmd)
 800380e:	2a05      	cmp	r2, #5
 8003810:	d815      	bhi.n	800383e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003812:	e8df f002 	tbb	[pc, r2]
 8003816:	1103      	.short	0x1103
 8003818:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 800381c:	6840      	ldr	r0, [r0, #4]
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4798      	blx	r3
 8003824:	b158      	cbz	r0, 800383e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003826:	2301      	movs	r3, #1
 8003828:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 800382c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8003830:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8003832:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003836:	e002      	b.n	800383e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003838:	2300      	movs	r3, #0
 800383a:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 800383e:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003840:	6203      	str	r3, [r0, #32]
 8003842:	e7f5      	b.n	8003830 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003844:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003846:	2301      	movs	r3, #1
 8003848:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 800384c:	e7f0      	b.n	8003830 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800384e:	2300      	movs	r3, #0
 8003850:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003854:	2301      	movs	r3, #1
 8003856:	6203      	str	r3, [r0, #32]
            break;
 8003858:	e7f1      	b.n	800383e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 800385a:	3b00      	subs	r3, #0
 800385c:	bf18      	it	ne
 800385e:	2301      	movne	r3, #1
 8003860:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003864:	e7eb      	b.n	800383e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003866:	bf00      	nop
 8003868:	080276a8 	.word	0x080276a8
 800386c:	08027bf3 	.word	0x08027bf3
 8003870:	08027846 	.word	0x08027846

08003874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003874:	b510      	push	{r4, lr}
 8003876:	460c      	mov	r4, r1
 8003878:	4611      	mov	r1, r2
 800387a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800387c:	b12c      	cbz	r4, 800388a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003880:	2190      	movs	r1, #144	@ 0x90
 8003882:	4a06      	ldr	r2, [pc, #24]	@ (800389c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003884:	4806      	ldr	r0, [pc, #24]	@ (80038a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003886:	f022 f9d3 	bl	8025c30 <__assert_func>
        stream.frameNumber = 0;
 800388a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800388c:	6840      	ldr	r0, [r0, #4]
 800388e:	6803      	ldr	r3, [r0, #0]
    }
 8003890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4718      	bx	r3
 8003898:	080276a8 	.word	0x080276a8
 800389c:	08027dc7 	.word	0x08027dc7
 80038a0:	08027846 	.word	0x08027846

080038a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80038a4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80038a6:	b129      	cbz	r1, 80038b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 80038aa:	2182      	movs	r1, #130	@ 0x82
 80038ac:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 80038ae:	4806      	ldr	r0, [pc, #24]	@ (80038c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 80038b0:	f022 f9be 	bl	8025c30 <__assert_func>
        stream.tickCount = 0;
 80038b4:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 80038b8:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 80038bc:	bd08      	pop	{r3, pc}
 80038be:	bf00      	nop
 80038c0:	080276a8 	.word	0x080276a8
 80038c4:	08027fa2 	.word	0x08027fa2
 80038c8:	08027846 	.word	0x08027846

080038cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80038cc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80038d4:	b153      	cbz	r3, 80038ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80038d6:	f04f 31ff 	mov.w	r1, #4294967295
 80038da:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80038dc:	f00a fdd2 	bl	800e484 <osMutexAcquire>
            firstDrawThisFrame = false;
 80038e0:	2300      	movs	r3, #0
 80038e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80038ec:	bd10      	pop	{r4, pc}

080038ee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80038ee:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80038f2:	b11a      	cbz	r2, 80038fc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80038f4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80038f8:	b102      	cbz	r2, 80038fc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80038fa:	6018      	str	r0, [r3, #0]
        }
    }
 80038fc:	4770      	bx	lr
	...

08003900 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003900:	b510      	push	{r4, lr}
 8003902:	4604      	mov	r4, r0
 8003904:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003906:	b129      	cbz	r1, 8003914 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003908:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 800390a:	21d0      	movs	r1, #208	@ 0xd0
 800390c:	4a13      	ldr	r2, [pc, #76]	@ (800395c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800390e:	4814      	ldr	r0, [pc, #80]	@ (8003960 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003910:	f022 f98e 	bl	8025c30 <__assert_func>
        if (stream.isPlaying)
 8003914:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003918:	b133      	cbz	r3, 8003928 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 800391a:	4b12      	ldr	r3, [pc, #72]	@ (8003964 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003922:	6963      	ldr	r3, [r4, #20]
 8003924:	4413      	add	r3, r2
 8003926:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003928:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 800392c:	b90b      	cbnz	r3, 8003932 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800392e:	2001      	movs	r0, #1
    }
 8003930:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003932:	68a3      	ldr	r3, [r4, #8]
 8003934:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003936:	6803      	ldr	r3, [r0, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 800393c:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 800393e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8003942:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003946:	2800      	cmp	r0, #0
 8003948:	d1f1      	bne.n	800392e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 800394a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ee      	bne.n	8003930 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003952:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003956:	e7eb      	b.n	8003930 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003958:	080276a8 	.word	0x080276a8
 800395c:	0802815e 	.word	0x0802815e
 8003960:	08027846 	.word	0x08027846
 8003964:	24026418 	.word	0x24026418

08003968 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003968:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 800396a:	4c1a      	ldr	r4, [pc, #104]	@ (80039d4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 800396c:	4605      	mov	r5, r0
    HAL::endFrame();
 800396e:	f00d fc97 	bl	80112a0 <_ZN8touchgfx3HAL8endFrameEv>
 8003972:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003976:	b913      	cbnz	r3, 800397e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003978:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800397c:	b1ab      	cbz	r3, 80039aa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800397e:	69e1      	ldr	r1, [r4, #28]
 8003980:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003984:	4353      	muls	r3, r2
 8003986:	6922      	ldr	r2, [r4, #16]
 8003988:	434a      	muls	r2, r1
 800398a:	4293      	cmp	r3, r2
 800398c:	d30d      	bcc.n	80039aa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800398e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003992:	b138      	cbz	r0, 80039a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800399a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 800399c:	bf98      	it	ls
 800399e:	f102 32ff 	addls.w	r2, r2, #4294967295
 80039a2:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 80039aa:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80039ac:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 80039ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 80039b2:	f00a fe1f 	bl	800e5f4 <osSemaphoreRelease>
        if (uiHasMutex)
 80039b6:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80039ba:	b12b      	cbz	r3, 80039c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 80039bc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80039be:	f00a fd84 	bl	800e4ca <osMutexRelease>
            uiHasMutex = false;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 80039c8:	6868      	ldr	r0, [r5, #4]
 80039ca:	6803      	ldr	r3, [r0, #0]
}
 80039cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	4718      	bx	r3
 80039d4:	2400c2d0 	.word	0x2400c2d0

080039d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80039da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80039e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039e6:	f3bf 8f6f 	isb	sy
}
 80039ea:	4770      	bx	lr
 80039ec:	e000e100 	.word	0xe000e100

080039f0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f0:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80039f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039f6:	609a      	str	r2, [r3, #8]
}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e100 	.word	0xe000e100

08003a00 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003a04:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003a08:	b9d8      	cbnz	r0, 8003a42 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003a0e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003a10:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003a12:	60d8      	str	r0, [r3, #12]
 8003a14:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003a16:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003a1a:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003a1c:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003a20:	6158      	str	r0, [r3, #20]
 8003a22:	6198      	str	r0, [r3, #24]
 8003a24:	61d8      	str	r0, [r3, #28]
 8003a26:	6218      	str	r0, [r3, #32]
 8003a28:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003a2a:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003a2c:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003a30:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003a34:	443c      	add	r4, r7
 8003a36:	42a2      	cmp	r2, r4
 8003a38:	d90a      	bls.n	8003a50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003a3c:	2152      	movs	r1, #82	@ 0x52
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8003a6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003a40:	e003      	b.n	8003a4a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003a42:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003a44:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003a48:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003a4a:	480b      	ldr	r0, [pc, #44]	@ (8003a78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003a4c:	f022 f8f0 	bl	8025c30 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003a50:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003a52:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003a54:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003a58:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003a5c:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003a5e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003a62:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003a64:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a68:	080284b6 	.word	0x080284b6
 8003a6c:	080284f1 	.word	0x080284f1
 8003a70:	080282ff 	.word	0x080282ff
 8003a74:	0802832f 	.word	0x0802832f
 8003a78:	08027846 	.word	0x08027846

08003a7c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003a7c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003a7e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003a80:	4e12      	ldr	r6, [pc, #72]	@ (8003acc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003a82:	4604      	mov	r4, r0
 8003a84:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003a88:	6003      	str	r3, [r0, #0]
 8003a8a:	6833      	ldr	r3, [r6, #0]
 8003a8c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003a90:	b10a      	cbz	r2, 8003a96 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003a92:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003a94:	b900      	cbnz	r0, 8003a98 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003a96:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003a98:	6803      	ldr	r3, [r0, #0]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	4798      	blx	r3
 8003a9e:	1e43      	subs	r3, r0, #1
 8003aa0:	425d      	negs	r5, r3
 8003aa2:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003aa8:	b130      	cbz	r0, 8003ab8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003aaa:	6803      	ldr	r3, [r0, #0]
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aae:	4798      	blx	r3
 8003ab0:	2801      	cmp	r0, #1
 8003ab2:	bf08      	it	eq
 8003ab4:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003ab8:	b92d      	cbnz	r5, 8003ac6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003abc:	2127      	movs	r1, #39	@ 0x27
 8003abe:	4a06      	ldr	r2, [pc, #24]	@ (8003ad8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003ac0:	4806      	ldr	r0, [pc, #24]	@ (8003adc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003ac2:	f022 f8b5 	bl	8025c30 <__assert_func>
    }
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
 8003aca:	bf00      	nop
 8003acc:	24026418 	.word	0x24026418
 8003ad0:	080287a4 	.word	0x080287a4
 8003ad4:	08028694 	.word	0x08028694
 8003ad8:	080286f2 	.word	0x080286f2
 8003adc:	0802872b 	.word	0x0802872b

08003ae0 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003ae0:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003ae2:	4e24      	ldr	r6, [pc, #144]	@ (8003b74 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003ae4:	6835      	ldr	r5, [r6, #0]
 8003ae6:	f3bf 8f5b 	dmb	ish
 8003aea:	f015 0501 	ands.w	r5, r5, #1
 8003aee:	d13f      	bne.n	8003b70 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003af0:	4630      	mov	r0, r6
 8003af2:	f021 fd26 	bl	8025542 <__cxa_guard_acquire>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d03a      	beq.n	8003b70 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003afa:	4c1f      	ldr	r4, [pc, #124]	@ (8003b78 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003afc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b7c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003afe:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003b02:	6125      	str	r5, [r4, #16]
 8003b04:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003b06:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003b08:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003b0a:	e9c4 3500 	strd	r3, r5, [r4]
 8003b0e:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003b12:	f014 fd86 	bl	8018622 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003b16:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b1a:	f00f fdf1 	bl	8013700 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003b1e:	4b18      	ldr	r3, [pc, #96]	@ (8003b80 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003b20:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003b22:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003b24:	4b17      	ldr	r3, [pc, #92]	@ (8003b84 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003b26:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003b2a:	f7ff ffa7 	bl	8003a7c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003b2e:	4b16      	ldr	r3, [pc, #88]	@ (8003b88 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003b30:	4816      	ldr	r0, [pc, #88]	@ (8003b8c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003b32:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003b36:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003b38:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003b3c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003b40:	2364      	movs	r3, #100	@ 0x64
 8003b42:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003b46:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003b4a:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003b54:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003b58:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003b5c:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003b62:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003b66:	f022 f881 	bl	8025c6c <atexit>
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f021 fcf5 	bl	802555a <__cxa_guard_release>
}
 8003b70:	4801      	ldr	r0, [pc, #4]	@ (8003b78 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	2400c210 	.word	0x2400c210
 8003b78:	2400c214 	.word	0x2400c214
 8003b7c:	08029f18 	.word	0x08029f18
 8003b80:	080287c4 	.word	0x080287c4
 8003b84:	0802883c 	.word	0x0802883c
 8003b88:	08029f64 	.word	0x08029f64
 8003b8c:	08003645 	.word	0x08003645
 8003b90:	08029f9c 	.word	0x08029f9c

08003b94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b98:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003b9a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003b9c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003ba6:	f00a fcf9 	bl	800e59c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003baa:	f04f 31ff 	mov.w	r1, #4294967295
 8003bae:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003bb0:	f00a fc68 	bl	800e484 <osMutexAcquire>
                if (stream.doDecode)
 8003bb4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003bb8:	b343      	cbz	r3, 8003c0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003bba:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003bbc:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003bc0:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003bc2:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003bc6:	f1b8 0f00 	cmp.w	r8, #0
 8003bca:	d023      	beq.n	8003c14 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	4641      	mov	r1, r8
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003bde:	9700      	str	r7, [sp, #0]
 8003be0:	4628      	mov	r0, r5
 8003be2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003be6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003bea:	68a1      	ldr	r1, [r4, #8]
 8003bec:	47c0      	blx	r8
                    stream.frameCount++;
 8003bee:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003bf0:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003bf8:	b1f0      	cbz	r0, 8003c38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	4798      	blx	r3
 8003c02:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003c04:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003c06:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003c08:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003c0c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c0e:	f00a fc5c 	bl	800e4ca <osMutexRelease>
        while (1)
 8003c12:	e7c5      	b.n	8003ba0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003c14:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	d0de      	beq.n	8003bd8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003c20:	4798      	blx	r3
 8003c22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003c24:	4401      	add	r1, r0
 8003c26:	4628      	mov	r0, r5
 8003c28:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003c2a:	6923      	ldr	r3, [r4, #16]
 8003c2c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003c2e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003c32:	4413      	add	r3, r2
 8003c34:	6123      	str	r3, [r4, #16]
 8003c36:	e7cf      	b.n	8003bd8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003c38:	2001      	movs	r0, #1
 8003c3a:	e7e3      	b.n	8003c04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003c3c <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003c3c:	4801      	ldr	r0, [pc, #4]	@ (8003c44 <videoTaskFunc+0x8>)
{
 8003c3e:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003c40:	f7ff ffa8 	bl	8003b94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003c44:	2400c2d0 	.word	0x2400c2d0

08003c48 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003c48:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003c4a:	4814      	ldr	r0, [pc, #80]	@ (8003c9c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003c4c:	2500      	movs	r5, #0
 8003c4e:	f7fe fbed 	bl	800242c <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c52:	4c13      	ldr	r4, [pc, #76]	@ (8003ca0 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003c54:	4b13      	ldr	r3, [pc, #76]	@ (8003ca4 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003c56:	462a      	mov	r2, r5
 8003c58:	4629      	mov	r1, r5
 8003c5a:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003c62:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c64:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c66:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c68:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003c6c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003c70:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c74:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003c78:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c7c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003c80:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003c84:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c88:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003c8c:	f00a fc3c 	bl	800e508 <osSemaphoreNew>
 8003c90:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003c92:	4628      	mov	r0, r5
 8003c94:	f00a fbc1 	bl	800e41a <osMutexNew>
 8003c98:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
 8003c9c:	2400c318 	.word	0x2400c318
 8003ca0:	2400c2d0 	.word	0x2400c2d0
 8003ca4:	08028888 	.word	0x08028888

08003ca8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003ca8:	4770      	bx	lr

08003caa <_ZN23ApplicationFontProviderD0Ev>:
 8003caa:	b510      	push	{r4, lr}
 8003cac:	4604      	mov	r4, r0
 8003cae:	2104      	movs	r1, #4
 8003cb0:	f021 fc45 	bl	802553e <_ZdlPvj>
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003cb8:	b508      	push	{r3, lr}
    switch (typography)
 8003cba:	2903      	cmp	r1, #3
 8003cbc:	d80f      	bhi.n	8003cde <_ZN23ApplicationFontProvider7getFontEt+0x26>
 8003cbe:	e8df f001 	tbb	[pc, r1]
 8003cc2:	020a      	.short	0x020a
 8003cc4:	0a06      	.short	0x0a06
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003cc6:	f003 f869 	bl	8006d9c <_ZN17TypedTextDatabase8getFontsEv>
 8003cca:	6840      	ldr	r0, [r0, #4]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 8003ccc:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003cce:	f003 f865 	bl	8006d9c <_ZN17TypedTextDatabase8getFontsEv>
 8003cd2:	6880      	ldr	r0, [r0, #8]
 8003cd4:	e7fa      	b.n	8003ccc <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003cd6:	f003 f861 	bl	8006d9c <_ZN17TypedTextDatabase8getFontsEv>
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	e7f6      	b.n	8003ccc <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8003cde:	2000      	movs	r0, #0
 8003ce0:	e7f4      	b.n	8003ccc <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08003ce4 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003ce4:	4800      	ldr	r0, [pc, #0]	@ (8003ce8 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003ce6:	4770      	bx	lr
 8003ce8:	080288d8 	.word	0x080288d8

08003cec <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003cec:	200b      	movs	r0, #11
 8003cee:	4770      	bx	lr

08003cf0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003cf0:	b513      	push	{r0, r1, r4, lr}
 8003cf2:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003cf4:	b151      	cbz	r1, 8003d0c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003cf6:	6803      	ldr	r3, [r0, #0]
 8003cf8:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003cfa:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003cfc:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003d00:	689c      	ldr	r4, [r3, #8]
 8003d02:	f10d 0303 	add.w	r3, sp, #3
 8003d06:	47a0      	blx	r4
        return glyph;
    }
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd10      	pop	{r4, pc}
            return 0;
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	e7fb      	b.n	8003d08 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003d10 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003d10:	89c0      	ldrh	r0, [r0, #14]
 8003d12:	4770      	bx	lr

08003d14 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003d14:	8a00      	ldrh	r0, [r0, #16]
 8003d16:	4770      	bx	lr

08003d18 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003d18:	88c0      	ldrh	r0, [r0, #6]
 8003d1a:	4770      	bx	lr

08003d1c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003d1c:	8880      	ldrh	r0, [r0, #4]
 8003d1e:	4770      	bx	lr

08003d20 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003d20:	7a80      	ldrb	r0, [r0, #10]
    }
 8003d22:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003d26:	4770      	bx	lr

08003d28 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003d28:	7a80      	ldrb	r0, [r0, #10]
    }
 8003d2a:	09c0      	lsrs	r0, r0, #7
 8003d2c:	4770      	bx	lr

08003d2e <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003d2e:	2000      	movs	r0, #0
 8003d30:	4770      	bx	lr
	...

08003d34 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003d34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003d3c <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	00000000 	.word	0x00000000

08003d40 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003d40:	4770      	bx	lr

08003d42 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003d42:	b510      	push	{r4, lr}
 8003d44:	4604      	mov	r4, r0
    }
 8003d46:	2108      	movs	r1, #8
 8003d48:	f021 fbf9 	bl	802553e <_ZdlPvj>
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	bd10      	pop	{r4, pc}

08003d50 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003d50:	4770      	bx	lr

08003d52 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003d52:	4770      	bx	lr

08003d54 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003d54:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003d58:	6808      	ldr	r0, [r1, #0]
 8003d5a:	6849      	ldr	r1, [r1, #4]
 8003d5c:	c303      	stmia	r3!, {r0, r1}
    }
 8003d5e:	4770      	bx	lr

08003d60 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003d60:	4770      	bx	lr

08003d62 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003d62:	4770      	bx	lr

08003d64 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003d64:	6041      	str	r1, [r0, #4]
    }
 8003d66:	4770      	bx	lr

08003d68 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003d68:	4770      	bx	lr
	...

08003d6c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003d6c:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003d6e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003d72:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003d7c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003d80:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	080041f1 	.word	0x080041f1

08003d8c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	7203      	strb	r3, [r0, #8]
    }
 8003d90:	4770      	bx	lr

08003d92 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
 * Screen transitioning to.
 *
 * @see Transition
 */
template <Direction templateDirection>
class SlideTransition : public Transition
 8003d92:	4770      	bx	lr

08003d94 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003d94:	4770      	bx	lr

08003d96 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003d96:	4770      	bx	lr

08003d98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003d98:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003d9a:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003d9c:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003d9e:	68c2      	ldr	r2, [r0, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	1054      	asrs	r4, r2, #1
 8003da4:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003da8:	07d2      	lsls	r2, r2, #31
 8003daa:	bf48      	it	mi
 8003dac:	590a      	ldrmi	r2, [r1, r4]
    }
 8003dae:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003db2:	bf48      	it	mi
 8003db4:	58d3      	ldrmi	r3, [r2, r3]
 8003db6:	4718      	bx	r3

08003db8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003db8:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003dba:	6840      	ldr	r0, [r0, #4]
 8003dbc:	b130      	cbz	r0, 8003dcc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	b91a      	cbnz	r2, 8003dca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003dc2:	68d8      	ldr	r0, [r3, #12]
 8003dc4:	f000 0001 	and.w	r0, r0, #1
 8003dc8:	4770      	bx	lr
 8003dca:	2001      	movs	r0, #1
    }
 8003dcc:	4770      	bx	lr

08003dce <_ZN8touchgfx12NoTransitionD0Ev>:
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	210c      	movs	r1, #12
 8003dd4:	f021 fbb3 	bl	802553e <_ZdlPvj>
 8003dd8:	4620      	mov	r0, r4
 8003dda:	bd10      	pop	{r4, pc}

08003ddc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	4604      	mov	r4, r0
 8003de0:	2110      	movs	r1, #16
 8003de2:	f021 fbac 	bl	802553e <_ZdlPvj>
 8003de6:	4620      	mov	r0, r4
 8003de8:	bd10      	pop	{r4, pc}

08003dea <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003dea:	b510      	push	{r4, lr}
 8003dec:	4604      	mov	r4, r0
 8003dee:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003df2:	f021 fba4 	bl	802553e <_ZdlPvj>
 8003df6:	4620      	mov	r0, r4
 8003df8:	bd10      	pop	{r4, pc}

08003dfa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	2140      	movs	r1, #64	@ 0x40
 8003e00:	f021 fb9d 	bl	802553e <_ZdlPvj>
 8003e04:	4620      	mov	r0, r4
 8003e06:	bd10      	pop	{r4, pc}

08003e08 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003e08:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003e0a:	f013 f833 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 8003e0e:	6803      	ldr	r3, [r0, #0]
    }
 8003e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e16:	4718      	bx	r3

08003e18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
        screenContainer->invalidate();
    }

    virtual void tearDown()
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x18>)
    virtual void tearDown()
 8003e1a:	4601      	mov	r1, r0
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b12b      	cbz	r3, 8003e2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x14>
 8003e20:	6840      	ldr	r0, [r0, #4]
 8003e22:	b118      	cbz	r0, 8003e2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x14>
        {
            screenContainer->remove(snapshot);
 8003e24:	6803      	ldr	r3, [r0, #0]
 8003e26:	310c      	adds	r1, #12
 8003e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e2a:	4718      	bx	r3
        }
    }
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	24026417 	.word	0x24026417

08003e34 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
    {
        Transition::init();

        if (done)
 8003e34:	7a03      	ldrb	r3, [r0, #8]
    virtual void init()
 8003e36:	b570      	push	{r4, r5, r6, lr}
 8003e38:	4605      	mov	r5, r0
        if (done)
 8003e3a:	b9bb      	cbnz	r3, 8003e6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x38>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8003e3c:	6840      	ldr	r0, [r0, #4]
 8003e3e:	6803      	ldr	r3, [r0, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4798      	blx	r3
 8003e44:	4604      	mov	r4, r0
        while (d)
 8003e46:	b93c      	cbnz	r4, 8003e58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x24>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(snapshot);
 8003e48:	6868      	ldr	r0, [r5, #4]
 8003e4a:	f105 010c 	add.w	r1, r5, #12
 8003e4e:	6803      	ldr	r3, [r0, #0]
    }
 8003e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8003e58:	88a1      	ldrh	r1, [r4, #4]
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	8f6b      	ldrh	r3, [r5, #58]	@ 0x3a
 8003e5e:	1ac9      	subs	r1, r1, r3
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	b209      	sxth	r1, r1
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	4798      	blx	r3
        return nextSibling;
 8003e68:	69a4      	ldr	r4, [r4, #24]
 8003e6a:	e7ec      	b.n	8003e46 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x12>
    }
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}

08003e6e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003e72:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003e76:	b158      	cbz	r0, 8003e90 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003e78:	6803      	ldr	r3, [r0, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4798      	blx	r3
 8003e7e:	b138      	cbz	r0, 8003e90 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003e80:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003e84:	6803      	ldr	r3, [r0, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8003e92:	b570      	push	{r4, r5, r6, lr}
 8003e94:	4604      	mov	r4, r0
        animationCounter++;
 8003e96:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8003e9a:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8003e9c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
        animationCounter++;
 8003ea0:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8003ea2:	4298      	cmp	r0, r3
        animationCounter++;
 8003ea4:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
        if (animationCounter > animationSteps)
 8003ea8:	d905      	bls.n	8003eb6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x24>
            done = true;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    }
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8003eb6:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f015 f8a6 	bl	801900c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8003ec0:	07c3      	lsls	r3, r0, #31
 8003ec2:	d506      	bpl.n	8003ed2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003eca:	bfc8      	it	gt
 8003ecc:	2301      	movgt	r3, #1
 8003ece:	4418      	add	r0, r3
 8003ed0:	b200      	sxth	r0, r0
            relativeValue = calculatedValue - snapshot.getX();
 8003ed2:	8a23      	ldrh	r3, [r4, #16]
 8003ed4:	1ac0      	subs	r0, r0, r3
 8003ed6:	87a0      	strh	r0, [r4, #60]	@ 0x3c
        Drawable* d = screenContainer->getFirstChild();
 8003ed8:	6860      	ldr	r0, [r4, #4]
 8003eda:	6803      	ldr	r3, [r0, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4798      	blx	r3
 8003ee0:	4605      	mov	r5, r0
        while (d)
 8003ee2:	b92d      	cbnz	r5, 8003ef0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
 8003ee4:	6860      	ldr	r0, [r4, #4]
        screenContainer->invalidate();
 8003ee6:	6803      	ldr	r3, [r0, #0]
    }
 8003ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
 8003ef0:	88a9      	ldrh	r1, [r5, #4]
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8003ef6:	4419      	add	r1, r3
 8003ef8:	682b      	ldr	r3, [r5, #0]
 8003efa:	b209      	sxth	r1, r1
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	4798      	blx	r3
 8003f00:	69ad      	ldr	r5, [r5, #24]
 8003f02:	e7ee      	b.n	8003ee2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>

08003f04 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoWaitingScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoWaitingScreenScreenNoTransitionImpl()
{
 8003f04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<WaitingScreenView, WaitingScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003f08:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003f0c:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003f0e:	68b0      	ldr	r0, [r6, #8]
 8003f10:	6803      	ldr	r3, [r0, #0]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	4798      	blx	r3
 8003f16:	f5b0 7f18 	cmp.w	r0, #608	@ 0x260
 8003f1a:	d205      	bcs.n	8003f28 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x24>
 8003f1c:	4b44      	ldr	r3, [pc, #272]	@ (8004030 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x12c>)
 8003f1e:	21a3      	movs	r1, #163	@ 0xa3
 8003f20:	4a44      	ldr	r2, [pc, #272]	@ (8004034 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003f22:	4845      	ldr	r0, [pc, #276]	@ (8004038 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x134>)
 8003f24:	f021 fe84 	bl	8025c30 <__assert_func>
 8003f28:	6870      	ldr	r0, [r6, #4]
 8003f2a:	6803      	ldr	r3, [r0, #0]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4798      	blx	r3
 8003f30:	280f      	cmp	r0, #15
 8003f32:	d803      	bhi.n	8003f3c <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x38>
 8003f34:	4b41      	ldr	r3, [pc, #260]	@ (800403c <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x138>)
 8003f36:	21a4      	movs	r1, #164	@ 0xa4
 8003f38:	4a3e      	ldr	r2, [pc, #248]	@ (8004034 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
 8003f3a:	e7f2      	b.n	8003f22 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003f3c:	68f0      	ldr	r0, [r6, #12]
 8003f3e:	6803      	ldr	r3, [r0, #0]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	4798      	blx	r3
 8003f44:	280b      	cmp	r0, #11
 8003f46:	d803      	bhi.n	8003f50 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x4c>
 8003f48:	4b3d      	ldr	r3, [pc, #244]	@ (8004040 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x13c>)
 8003f4a:	21a5      	movs	r1, #165	@ 0xa5
 8003f4c:	4a39      	ldr	r2, [pc, #228]	@ (8004034 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
 8003f4e:	e7e8      	b.n	8003f22 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003f50:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004048 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003f54:	f012 ff8e 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003f58:	3004      	adds	r0, #4
 8003f5a:	f012 ffc9 	bl	8016ef0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003f5e:	f8d9 0000 	ldr.w	r0, [r9]
 8003f62:	b110      	cbz	r0, 8003f6a <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003f64:	6803      	ldr	r3, [r0, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4798      	blx	r3
    if (*currentTrans)
 8003f6a:	f8d9 0000 	ldr.w	r0, [r9]
 8003f6e:	b110      	cbz	r0, 8003f76 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003f70:	6803      	ldr	r3, [r0, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4798      	blx	r3
    if (*currentScreen)
 8003f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800404c <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x148>
 8003f7a:	f8d8 0000 	ldr.w	r0, [r8]
 8003f7e:	b110      	cbz	r0, 8003f86 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003f80:	6803      	ldr	r3, [r0, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	4798      	blx	r3
    if (*currentPresenter)
 8003f86:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f8a:	b110      	cbz	r0, 8003f92 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003f8c:	6803      	ldr	r3, [r0, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4798      	blx	r3
    if (*currentScreen)
 8003f92:	f8d8 0000 	ldr.w	r0, [r8]
 8003f96:	b110      	cbz	r0, 8003f9e <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003f98:	6803      	ldr	r3, [r0, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4798      	blx	r3
    if (*currentPresenter)
 8003f9e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003fa2:	b110      	cbz	r0, 8003faa <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003fa4:	6803      	ldr	r3, [r0, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003faa:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003fac:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003fae:	f04f 0b00 	mov.w	fp, #0
 8003fb2:	6803      	ldr	r3, [r0, #0]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	4798      	blx	r3
 8003fb8:	4b22      	ldr	r3, [pc, #136]	@ (8004044 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x140>)
 8003fba:	4604      	mov	r4, r0
 8003fbc:	f8c0 b004 	str.w	fp, [r0, #4]
 8003fc0:	f880 b008 	strb.w	fp, [r0, #8]
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003fc8:	68b0      	ldr	r0, [r6, #8]
 8003fca:	6803      	ldr	r3, [r0, #0]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	4798      	blx	r3
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	f003 f977 	bl	80072c4 <_ZN17WaitingScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003fd6:	6870      	ldr	r0, [r6, #4]
 8003fd8:	4659      	mov	r1, fp
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	4798      	blx	r3
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	f003 f94c 	bl	8007280 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003fe8:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003fea:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003fee:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003ff0:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003ff4:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003ff8:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003ffc:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003ffe:	f8c6 a008 	str.w	sl, [r6, #8]
 8004002:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8004004:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004006:	4798      	blx	r3
    newPresenter->activate();
 8004008:	6833      	ldr	r3, [r6, #0]
 800400a:	4630      	mov	r0, r6
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004010:	4621      	mov	r1, r4
 8004012:	4628      	mov	r0, r5
 8004014:	f014 fff4 	bl	8019000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	4620      	mov	r0, r4
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	4798      	blx	r3
    newTransition->invalidate();
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	4620      	mov	r0, r4
 8004024:	695b      	ldr	r3, [r3, #20]
}
 8004026:	b001      	add	sp, #4
 8004028:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	4718      	bx	r3
 800402e:	bf00      	nop
 8004030:	080289c4 	.word	0x080289c4
 8004034:	08028a52 	.word	0x08028a52
 8004038:	08028b30 	.word	0x08028b30
 800403c:	08028b85 	.word	0x08028b85
 8004040:	08028c28 	.word	0x08028c28
 8004044:	08028ef8 	.word	0x08028ef8
 8004048:	24026460 	.word	0x24026460
 800404c:	2402645c 	.word	0x2402645c

08004050 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:
{
 8004050:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004054:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004058:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800405a:	68b0      	ldr	r0, [r6, #8]
 800405c:	6803      	ldr	r3, [r0, #0]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4798      	blx	r3
 8004062:	f241 3303 	movw	r3, #4867	@ 0x1303
 8004066:	4298      	cmp	r0, r3
 8004068:	d805      	bhi.n	8004076 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x26>
 800406a:	4b56      	ldr	r3, [pc, #344]	@ (80041c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x174>)
 800406c:	21a3      	movs	r1, #163	@ 0xa3
 800406e:	4a56      	ldr	r2, [pc, #344]	@ (80041c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004070:	4856      	ldr	r0, [pc, #344]	@ (80041cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x17c>)
 8004072:	f021 fddd 	bl	8025c30 <__assert_func>
 8004076:	6870      	ldr	r0, [r6, #4]
 8004078:	6803      	ldr	r3, [r0, #0]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4798      	blx	r3
 800407e:	280f      	cmp	r0, #15
 8004080:	d803      	bhi.n	800408a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x3a>
 8004082:	4b53      	ldr	r3, [pc, #332]	@ (80041d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x180>)
 8004084:	21a4      	movs	r1, #164	@ 0xa4
 8004086:	4a50      	ldr	r2, [pc, #320]	@ (80041c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
 8004088:	e7f2      	b.n	8004070 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800408a:	68f0      	ldr	r0, [r6, #12]
 800408c:	6803      	ldr	r3, [r0, #0]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4798      	blx	r3
 8004092:	283f      	cmp	r0, #63	@ 0x3f
 8004094:	d803      	bhi.n	800409e <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x4e>
 8004096:	4b4f      	ldr	r3, [pc, #316]	@ (80041d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x184>)
 8004098:	21a5      	movs	r1, #165	@ 0xa5
 800409a:	4a4b      	ldr	r2, [pc, #300]	@ (80041c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
 800409c:	e7e8      	b.n	8004070 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20>
    if (*currentTrans)
 800409e:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 80041e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 80040a2:	f012 fee7 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 80040a6:	3004      	adds	r0, #4
 80040a8:	f012 ff22 	bl	8016ef0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80040ac:	f8d9 0000 	ldr.w	r0, [r9]
 80040b0:	b110      	cbz	r0, 80040b8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x68>
        (*currentTrans)->tearDown();
 80040b2:	6803      	ldr	r3, [r0, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4798      	blx	r3
    if (*currentTrans)
 80040b8:	f8d9 0000 	ldr.w	r0, [r9]
 80040bc:	b110      	cbz	r0, 80040c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x74>
        (*currentTrans)->~Transition();
 80040be:	6803      	ldr	r3, [r0, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4798      	blx	r3
    if (*currentScreen)
 80040c4:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 80041ec <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x19c>
 80040c8:	f8d8 0000 	ldr.w	r0, [r8]
 80040cc:	b110      	cbz	r0, 80040d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80040ce:	6803      	ldr	r3, [r0, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	4798      	blx	r3
    if (*currentPresenter)
 80040d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80040d8:	b110      	cbz	r0, 80040e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x90>
        (*currentPresenter)->deactivate();
 80040da:	6803      	ldr	r3, [r0, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4798      	blx	r3
    if (*currentScreen)
 80040e0:	f8d8 0000 	ldr.w	r0, [r8]
 80040e4:	b110      	cbz	r0, 80040ec <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9c>
        (*currentScreen)->~Screen();
 80040e6:	6803      	ldr	r3, [r0, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4798      	blx	r3
    if (*currentPresenter)
 80040ec:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80040f0:	b110      	cbz	r0, 80040f8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80040f2:	6803      	ldr	r3, [r0, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80040f8:	68f0      	ldr	r0, [r6, #12]
 80040fa:	2100      	movs	r1, #0
 80040fc:	6803      	ldr	r3, [r0, #0]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	4798      	blx	r3
 8004102:	2300      	movs	r3, #0
          relativeValue(0)
 8004104:	4a34      	ldr	r2, [pc, #208]	@ (80041d8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x188>)
 8004106:	4605      	mov	r5, r0
 8004108:	6043      	str	r3, [r0, #4]
 800410a:	4604      	mov	r4, r0
 800410c:	7203      	strb	r3, [r0, #8]
 800410e:	f845 2b0c 	str.w	r2, [r5], #12
          snapshot(),
 8004112:	4628      	mov	r0, r5
 8004114:	f00f fbce 	bl	80138b4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          animationSteps(transitionSteps),
 8004118:	2214      	movs	r2, #20
          relativeValue(0)
 800411a:	2300      	movs	r3, #0
          animationSteps(transitionSteps),
 800411c:	8722      	strh	r2, [r4, #56]	@ 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
 800411e:	4a2f      	ldr	r2, [pc, #188]	@ (80041dc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x18c>)
          relativeValue(0)
 8004120:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	2a00      	cmp	r2, #0
 8004126:	d135      	bne.n	8004194 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
            done = true;
 8004128:	2301      	movs	r3, #1
 800412a:	7223      	strb	r3, [r4, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800412c:	68b0      	ldr	r0, [r6, #8]
 800412e:	2100      	movs	r1, #0
 8004130:	6803      	ldr	r3, [r0, #0]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	4798      	blx	r3
 8004136:	4605      	mov	r5, r0
 8004138:	f003 f888 	bl	800724c <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800413c:	6870      	ldr	r0, [r6, #4]
 800413e:	2100      	movs	r1, #0
 8004140:	6803      	ldr	r3, [r0, #0]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	4798      	blx	r3
 8004146:	4606      	mov	r6, r0
 8004148:	4629      	mov	r1, r5
 800414a:	f003 f851 	bl	80071f0 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 800414e:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004150:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004154:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004156:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800415a:	f8c8 5000 	str.w	r5, [r8]
 800415e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	f8c6 a008 	str.w	sl, [r6, #8]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800416c:	4798      	blx	r3
    newPresenter->activate();
 800416e:	6833      	ldr	r3, [r6, #0]
 8004170:	4630      	mov	r0, r6
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004176:	4621      	mov	r1, r4
 8004178:	4628      	mov	r0, r5
 800417a:	f014 ff41 	bl	8019000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	4620      	mov	r0, r4
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4798      	blx	r3
    newTransition->invalidate();
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	4620      	mov	r0, r4
 800418a:	695b      	ldr	r3, [r3, #20]
}
 800418c:	b001      	add	sp, #4
 800418e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004192:	4718      	bx	r3
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004194:	4912      	ldr	r1, [pc, #72]	@ (80041e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x190>)
        setWidth(width);
 8004196:	4628      	mov	r0, r5
 8004198:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>)
 800419a:	f9b1 b000 	ldrsh.w	fp, [r1]
        setX(x);
 800419e:	68e1      	ldr	r1, [r4, #12]
        rect.x = x;
 80041a0:	6123      	str	r3, [r4, #16]
        setWidth(width);
 80041a2:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80041a4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80041a8:	4798      	blx	r3
        setHeight(height);
 80041aa:	68e3      	ldr	r3, [r4, #12]
 80041ac:	4659      	mov	r1, fp
 80041ae:	4628      	mov	r0, r5
 80041b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b2:	4798      	blx	r3
        snapshot.makeSnapshot();
 80041b4:	4628      	mov	r0, r5
 80041b6:	f00f faf8 	bl	80137aa <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = -HAL::DISPLAY_WIDTH;
 80041ba:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>)
 80041bc:	8813      	ldrh	r3, [r2, #0]
 80041be:	425b      	negs	r3, r3
 80041c0:	8763      	strh	r3, [r4, #58]	@ 0x3a
            break;
 80041c2:	e7b3      	b.n	800412c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xdc>
 80041c4:	080289c4 	.word	0x080289c4
 80041c8:	08028ccb 	.word	0x08028ccb
 80041cc:	08028b30 	.word	0x08028b30
 80041d0:	08028b85 	.word	0x08028b85
 80041d4:	08028c28 	.word	0x08028c28
 80041d8:	08028f1c 	.word	0x08028f1c
 80041dc:	24026417 	.word	0x24026417
 80041e0:	2402640e 	.word	0x2402640e
 80041e4:	2402640c 	.word	0x2402640c
 80041e8:	24026460 	.word	0x24026460
 80041ec:	2402645c 	.word	0x2402645c

080041f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 80041f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80041f4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80041f8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80041fa:	68b0      	ldr	r0, [r6, #8]
 80041fc:	6803      	ldr	r3, [r0, #0]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4798      	blx	r3
 8004202:	f5b0 7f2d 	cmp.w	r0, #692	@ 0x2b4
 8004206:	d205      	bcs.n	8004214 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8004208:	4b44      	ldr	r3, [pc, #272]	@ (800431c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800420a:	21a3      	movs	r1, #163	@ 0xa3
 800420c:	4a44      	ldr	r2, [pc, #272]	@ (8004320 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800420e:	4845      	ldr	r0, [pc, #276]	@ (8004324 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8004210:	f021 fd0e 	bl	8025c30 <__assert_func>
 8004214:	6870      	ldr	r0, [r6, #4]
 8004216:	6803      	ldr	r3, [r0, #0]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4798      	blx	r3
 800421c:	280f      	cmp	r0, #15
 800421e:	d803      	bhi.n	8004228 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8004220:	4b41      	ldr	r3, [pc, #260]	@ (8004328 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8004222:	21a4      	movs	r1, #164	@ 0xa4
 8004224:	4a3e      	ldr	r2, [pc, #248]	@ (8004320 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8004226:	e7f2      	b.n	800420e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004228:	68f0      	ldr	r0, [r6, #12]
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4798      	blx	r3
 8004230:	280b      	cmp	r0, #11
 8004232:	d803      	bhi.n	800423c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8004234:	4b3d      	ldr	r3, [pc, #244]	@ (800432c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8004236:	21a5      	movs	r1, #165	@ 0xa5
 8004238:	4a39      	ldr	r2, [pc, #228]	@ (8004320 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800423a:	e7e8      	b.n	800420e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 800423c:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004334 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8004240:	f012 fe18 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 8004244:	3004      	adds	r0, #4
 8004246:	f012 fe53 	bl	8016ef0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800424a:	f8d9 0000 	ldr.w	r0, [r9]
 800424e:	b110      	cbz	r0, 8004256 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8004250:	6803      	ldr	r3, [r0, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4798      	blx	r3
    if (*currentTrans)
 8004256:	f8d9 0000 	ldr.w	r0, [r9]
 800425a:	b110      	cbz	r0, 8004262 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 800425c:	6803      	ldr	r3, [r0, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4798      	blx	r3
    if (*currentScreen)
 8004262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004338 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8004266:	f8d8 0000 	ldr.w	r0, [r8]
 800426a:	b110      	cbz	r0, 8004272 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 800426c:	6803      	ldr	r3, [r0, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	4798      	blx	r3
    if (*currentPresenter)
 8004272:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004276:	b110      	cbz	r0, 800427e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004278:	6803      	ldr	r3, [r0, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4798      	blx	r3
    if (*currentScreen)
 800427e:	f8d8 0000 	ldr.w	r0, [r8]
 8004282:	b110      	cbz	r0, 800428a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004284:	6803      	ldr	r3, [r0, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4798      	blx	r3
    if (*currentPresenter)
 800428a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800428e:	b110      	cbz	r0, 8004296 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8004290:	6803      	ldr	r3, [r0, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004296:	68f0      	ldr	r0, [r6, #12]
 8004298:	2100      	movs	r1, #0
 800429a:	f04f 0b00 	mov.w	fp, #0
 800429e:	6803      	ldr	r3, [r0, #0]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	4798      	blx	r3
 80042a4:	4b22      	ldr	r3, [pc, #136]	@ (8004330 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80042a6:	4604      	mov	r4, r0
 80042a8:	f8c0 b004 	str.w	fp, [r0, #4]
 80042ac:	f880 b008 	strb.w	fp, [r0, #8]
 80042b0:	4659      	mov	r1, fp
 80042b2:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80042b4:	68b0      	ldr	r0, [r6, #8]
 80042b6:	6803      	ldr	r3, [r0, #0]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	4798      	blx	r3
 80042bc:	4605      	mov	r5, r0
 80042be:	f002 ff69 	bl	8007194 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80042c2:	6870      	ldr	r0, [r6, #4]
 80042c4:	4659      	mov	r1, fp
 80042c6:	6803      	ldr	r3, [r0, #0]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	4798      	blx	r3
 80042cc:	4606      	mov	r6, r0
 80042ce:	4629      	mov	r1, r5
 80042d0:	f002 ff2c 	bl	800712c <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 80042d4:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80042d6:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80042da:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80042dc:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80042e0:	f8c8 5000 	str.w	r5, [r8]
 80042e4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	f8c6 a008 	str.w	sl, [r6, #8]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80042f2:	4798      	blx	r3
    newPresenter->activate();
 80042f4:	6833      	ldr	r3, [r6, #0]
 80042f6:	4630      	mov	r0, r6
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80042fc:	4621      	mov	r1, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	f014 fe7e 	bl	8019000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	4620      	mov	r0, r4
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	4798      	blx	r3
    newTransition->invalidate();
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	4620      	mov	r0, r4
 8004310:	695b      	ldr	r3, [r3, #20]
}
 8004312:	b001      	add	sp, #4
 8004314:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004318:	4718      	bx	r3
 800431a:	bf00      	nop
 800431c:	080289c4 	.word	0x080289c4
 8004320:	08028db0 	.word	0x08028db0
 8004324:	08028b30 	.word	0x08028b30
 8004328:	08028b85 	.word	0x08028b85
 800432c:	08028c28 	.word	0x08028c28
 8004330:	08028ef8 	.word	0x08028ef8
 8004334:	24026460 	.word	0x24026460
 8004338:	2402645c 	.word	0x2402645c

0800433c <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800433c:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004344:	b10a      	cbz	r2, 800434a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8004346:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004348:	b900      	cbnz	r0, 800434c <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800434a:	6898      	ldr	r0, [r3, #8]
    }
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	24026418 	.word	0x24026418

08004354 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	4617      	mov	r7, r2
 8004358:	4604      	mov	r4, r0
 800435a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800435c:	f012 fe9a 	bl	8017094 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004360:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8004362:	2500      	movs	r5, #0
        instance = this;
 8004364:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004366:	4629      	mov	r1, r5
      model(m)
 8004368:	4b11      	ldr	r3, [pc, #68]	@ (80043b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800436a:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 800436c:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800436e:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8004372:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800437a:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 800437c:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8004380:	689b      	ldr	r3, [r3, #8]
      model(m)
 8004382:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004386:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004388:	4628      	mov	r0, r5
 800438a:	f002 fcbb 	bl	8006d04 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800438e:	f7ff ffd5 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8004392:	f01b fa68 	bl	801f866 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004396:	f7ff ffd1 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 800439a:	f01b fadb 	bl	801f954 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800439e:	f7ff ffcd 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 80043a2:	f01b fae3 	bl	801f96c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80043a6:	4620      	mov	r0, r4
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2402646c 	.word	0x2402646c
 80043b0:	08028ea4 	.word	0x08028ea4
 80043b4:	08028e8c 	.word	0x08028e8c
 80043b8:	24026418 	.word	0x24026418

080043bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80043be:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80043c2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80043c6:	2300      	movs	r3, #0
 80043c8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80043cc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80043d0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	080041f1 	.word	0x080041f1

080043dc <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:
 80043dc:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x1c>)
 80043de:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80043e2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80043e6:	2300      	movs	r3, #0
 80043e8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80043ec:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80043f0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	08004051 	.word	0x08004051

080043fc <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv>:
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv+0x1c>)
 80043fe:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8004402:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004406:	2300      	movs	r3, #0
 8004408:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 800440c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8004410:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	08003f05 	.word	0x08003f05

0800441c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800441c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800441e:	4770      	bx	lr

08004420 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8004420:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004422:	4770      	bx	lr

08004424 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004424:	4770      	bx	lr

08004426 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004426:	888b      	ldrh	r3, [r1, #4]
 8004428:	69c0      	ldr	r0, [r0, #28]
 800442a:	0adb      	lsrs	r3, r3, #11
 800442c:	680a      	ldr	r2, [r1, #0]
 800442e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8004432:	4410      	add	r0, r2
 8004434:	4770      	bx	lr

08004436 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004436:	b510      	push	{r4, lr}
 8004438:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 800443a:	b1ba      	cbz	r2, 800446c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800443c:	7b10      	ldrb	r0, [r2, #12]
 800443e:	b168      	cbz	r0, 800445c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004440:	7b53      	ldrb	r3, [r2, #13]
 8004442:	7ad2      	ldrb	r2, [r2, #11]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800444a:	431a      	orrs	r2, r3
 800444c:	6a23      	ldr	r3, [r4, #32]
 800444e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004452:	881a      	ldrh	r2, [r3, #0]
 8004454:	428a      	cmp	r2, r1
 8004456:	d102      	bne.n	800445e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004458:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 800445c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800445e:	d805      	bhi.n	800446c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004460:	3801      	subs	r0, #1
 8004462:	3304      	adds	r3, #4
 8004464:	b280      	uxth	r0, r0
 8004466:	2800      	cmp	r0, #0
 8004468:	d1f3      	bne.n	8004452 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800446a:	e7f7      	b.n	800445c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800446c:	2000      	movs	r0, #0
 800446e:	e7f5      	b.n	800445c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004470 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004470:	b510      	push	{r4, lr}
 8004472:	4604      	mov	r4, r0
 8004474:	212c      	movs	r1, #44	@ 0x2c
 8004476:	f021 f862 	bl	802553e <_ZdlPvj>
 800447a:	4620      	mov	r0, r4
 800447c:	bd10      	pop	{r4, pc}
	...

08004480 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004480:	b530      	push	{r4, r5, lr}
 8004482:	b08b      	sub	sp, #44	@ 0x2c
 8004484:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004486:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800448a:	9508      	str	r5, [sp, #32]
 800448c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8004490:	9507      	str	r5, [sp, #28]
 8004492:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8004496:	9506      	str	r5, [sp, #24]
 8004498:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 800449c:	9505      	str	r5, [sp, #20]
 800449e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80044a2:	9504      	str	r5, [sp, #16]
 80044a4:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80044a8:	9503      	str	r5, [sp, #12]
 80044aa:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80044ae:	9502      	str	r5, [sp, #8]
 80044b0:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80044b4:	9501      	str	r5, [sp, #4]
 80044b6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80044ba:	9500      	str	r5, [sp, #0]
 80044bc:	f014 f96e 	bl	801879c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80044c0:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 80044c2:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80044c4:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80044c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80044c8:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80044ca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80044cc:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80044ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80044d0:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80044d2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80044d4:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80044d6:	b00b      	add	sp, #44	@ 0x2c
 80044d8:	bd30      	pop	{r4, r5, pc}
 80044da:	bf00      	nop
 80044dc:	08028f40 	.word	0x08028f40

080044e0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80044e0:	4770      	bx	lr

080044e2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80044e2:	4770      	bx	lr

080044e4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80044e4:	4770      	bx	lr

080044e6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80044e6:	4770      	bx	lr

080044e8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80044e8:	4770      	bx	lr

080044ea <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80044ea:	b530      	push	{r4, r5, lr}
 80044ec:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80044ee:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80044f0:	4604      	mov	r4, r0
        rect.width = width;
 80044f2:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80044f4:	466d      	mov	r5, sp
 80044f6:	4601      	mov	r1, r0
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fc:	343c      	adds	r4, #60	@ 0x3c
 80044fe:	4628      	mov	r0, r5
 8004500:	4798      	blx	r3
 8004502:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800450a:	b005      	add	sp, #20
 800450c:	bd30      	pop	{r4, r5, pc}

0800450e <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800450e:	b530      	push	{r4, r5, lr}
 8004510:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004512:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8004514:	4604      	mov	r4, r0
        rect.height = height;
 8004516:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8004518:	466d      	mov	r5, sp
 800451a:	4601      	mov	r1, r0
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004520:	343c      	adds	r4, #60	@ 0x3c
 8004522:	4628      	mov	r0, r5
 8004524:	4798      	blx	r3
 8004526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800452a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800452e:	b005      	add	sp, #20
 8004530:	bd30      	pop	{r4, r5, pc}

08004532 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8004532:	2200      	movs	r2, #0
 8004534:	8002      	strh	r2, [r0, #0]
 8004536:	8042      	strh	r2, [r0, #2]
 8004538:	8082      	strh	r2, [r0, #4]
 800453a:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800453c:	4770      	bx	lr

0800453e <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800453e:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8004542:	4770      	bx	lr

08004544 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8004544:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004546:	b570      	push	{r4, r5, r6, lr}
 8004548:	4604      	mov	r4, r0
        setX(x);
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800454c:	4615      	mov	r5, r2
        setX(x);
 800454e:	4798      	blx	r3
        setBaselineY(baselineY);
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	4620      	mov	r0, r4
 8004554:	4629      	mov	r1, r5
 8004556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8004558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800455c:	4718      	bx	r3

0800455e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800455e:	2000      	movs	r0, #0
 8004560:	4770      	bx	lr

08004562 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004562:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8004564:	4770      	bx	lr

08004566 <_ZN15Screen1ViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 8004566:	4770      	bx	lr

08004568 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8004568:	4770      	bx	lr

0800456a <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800456a:	4770      	bx	lr

0800456c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800456c:	4770      	bx	lr

0800456e <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800456e:	4770      	bx	lr

08004570 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004570:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004572:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004574:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004576:	68c2      	ldr	r2, [r0, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	1055      	asrs	r5, r2, #1
 800457c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004580:	07d2      	lsls	r2, r2, #31
 8004582:	bf48      	it	mi
 8004584:	5962      	ldrmi	r2, [r4, r5]
    }
 8004586:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004588:	bf48      	it	mi
 800458a:	58d3      	ldrmi	r3, [r2, r3]
 800458c:	4718      	bx	r3

0800458e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800458e:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004590:	6840      	ldr	r0, [r0, #4]
 8004592:	b130      	cbz	r0, 80045a2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	b91a      	cbnz	r2, 80045a0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8004598:	68d8      	ldr	r0, [r3, #12]
 800459a:	f000 0001 	and.w	r0, r0, #1
 800459e:	4770      	bx	lr
 80045a0:	2001      	movs	r0, #1
    }
 80045a2:	4770      	bx	lr

080045a4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	4604      	mov	r4, r0
 80045a8:	214c      	movs	r1, #76	@ 0x4c
 80045aa:	f020 ffc8 	bl	802553e <_ZdlPvj>
 80045ae:	4620      	mov	r0, r4
 80045b0:	bd10      	pop	{r4, pc}

080045b2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80045b2:	b510      	push	{r4, lr}
 80045b4:	4604      	mov	r4, r0
 80045b6:	2110      	movs	r1, #16
 80045b8:	f020 ffc1 	bl	802553e <_ZdlPvj>
 80045bc:	4620      	mov	r0, r4
 80045be:	bd10      	pop	{r4, pc}

080045c0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80045c0:	b510      	push	{r4, lr}
 80045c2:	4604      	mov	r4, r0
}
 80045c4:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 80045c8:	f020 ffb9 	bl	802553e <_ZdlPvj>
 80045cc:	4620      	mov	r0, r4
 80045ce:	bd10      	pop	{r4, pc}

080045d0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80045d0:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80045d2:	f7ff f8ac 	bl	800372e <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80045d6:	bd08      	pop	{r3, pc}

080045d8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80045d8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80045da:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80045dc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 80045de:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80045e0:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80045e2:	b28d      	uxth	r5, r1
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	b92b      	cbnz	r3, 80045f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80045e8:	4b10      	ldr	r3, [pc, #64]	@ (800462c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80045ea:	216c      	movs	r1, #108	@ 0x6c
 80045ec:	4a10      	ldr	r2, [pc, #64]	@ (8004630 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80045ee:	4811      	ldr	r0, [pc, #68]	@ (8004634 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80045f0:	f021 fb1e 	bl	8025c30 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80045f4:	4910      	ldr	r1, [pc, #64]	@ (8004638 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80045f6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80045f8:	8809      	ldrh	r1, [r1, #0]
 80045fa:	4291      	cmp	r1, r2
 80045fc:	d803      	bhi.n	8004606 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80045fe:	4b0f      	ldr	r3, [pc, #60]	@ (800463c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004600:	216d      	movs	r1, #109	@ 0x6d
 8004602:	4a0b      	ldr	r2, [pc, #44]	@ (8004630 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004604:	e7f3      	b.n	80045ee <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004606:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004612:	6803      	ldr	r3, [r0, #0]
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	4798      	blx	r3
 8004618:	1a29      	subs	r1, r5, r0
 800461a:	4633      	mov	r3, r6
 800461c:	4620      	mov	r0, r4
 800461e:	b209      	sxth	r1, r1
    }
 8004620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004624:	4718      	bx	r3
 8004626:	bf00      	nop
 8004628:	24026470 	.word	0x24026470
 800462c:	08028fa0 	.word	0x08028fa0
 8004630:	08028fe2 	.word	0x08028fe2
 8004634:	0802901d 	.word	0x0802901d
 8004638:	24026474 	.word	0x24026474
 800463c:	08029072 	.word	0x08029072
 8004640:	24026478 	.word	0x24026478

08004644 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8004644:	b538      	push	{r3, r4, r5, lr}
    if (&src == &button1)
 8004646:	f500 739c 	add.w	r3, r0, #312	@ 0x138
{
 800464a:	4604      	mov	r4, r0
 800464c:	460d      	mov	r5, r1
    if (&src == &button1)
 800464e:	4299      	cmp	r1, r3
 8004650:	d103      	bne.n	800465a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8004652:	f012 fc0f 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
 8004656:	f7ff fec1 	bl	80043dc <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
    }
    if (&src == &inc)
 800465a:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 800465e:	429d      	cmp	r5, r3
 8004660:	d103      	bne.n	800466a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //Interaction2
        //When inc clicked execute C++ code
        //Execute C++ code
        presenter->updateBrilloValue(1);
 8004662:	2101      	movs	r1, #1
 8004664:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004666:	f002 fd6b 	bl	8007140 <_ZN16Screen1Presenter17updateBrilloValueEi>
    }
    if (&src == &dec)
 800466a:	f504 730b 	add.w	r3, r4, #556	@ 0x22c
 800466e:	429d      	cmp	r5, r3
 8004670:	d105      	bne.n	800467e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    {
        //Interaction3
        //When dec clicked execute C++ code
        //Execute C++ code
        presenter->updateBrilloValue(0);
 8004672:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004674:	2100      	movs	r1, #0
    }
}
 8004676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        presenter->updateBrilloValue(0);
 800467a:	f002 bd61 	b.w	8007140 <_ZN16Screen1Presenter17updateBrilloValueEi>
}
 800467e:	bd38      	pop	{r3, r4, r5, pc}

08004680 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004680:	2200      	movs	r2, #0
 8004682:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8004686:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004688:	e9c0 2100 	strd	r2, r1, [r0]
    }
 800468c:	4770      	bx	lr

0800468e <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800468e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	4604      	mov	r4, r0
        setX(x);
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8004696:	4615      	mov	r5, r2
        setX(x);
 8004698:	4798      	blx	r3
        setY(y);
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	4620      	mov	r0, r4
 800469e:	4629      	mov	r1, r5
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80046a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80046a6:	4718      	bx	r3

080046a8 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4604      	mov	r4, r0
 80046ac:	461d      	mov	r5, r3
 80046ae:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80046b2:	f7ff ffec 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	4629      	mov	r1, r5
 80046ba:	4620      	mov	r0, r4
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	4798      	blx	r3
        setHeight(height);
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	4631      	mov	r1, r6
 80046c4:	4620      	mov	r0, r4
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80046c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80046cc:	4718      	bx	r3
	...

080046d0 <_ZN8touchgfx6WidgetC1Ev>:
 80046d0:	2200      	movs	r2, #0
 80046d2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80046d6:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80046da:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80046de:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80046e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046e6:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80046e8:	4a01      	ldr	r2, [pc, #4]	@ (80046f0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80046ea:	6002      	str	r2, [r0, #0]
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	08029108 	.word	0x08029108

080046f4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80046f4:	b510      	push	{r4, lr}
 80046f6:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 80046f8:	2226      	movs	r2, #38	@ 0x26
 80046fa:	2100      	movs	r1, #0
 80046fc:	f021 fd34 	bl	8026168 <memset>
 8004700:	4620      	mov	r0, r4
 8004702:	f7ff ffe5 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
 8004706:	4b04      	ldr	r3, [pc, #16]	@ (8004718 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8004708:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	23ff      	movs	r3, #255	@ 0xff
 800470e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        : color(col)
 8004712:	2300      	movs	r3, #0
 8004714:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
 8004716:	bd10      	pop	{r4, pc}
 8004718:	0802a1a4 	.word	0x0802a1a4

0800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4604      	mov	r4, r0
 8004720:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8004722:	2226      	movs	r2, #38	@ 0x26
 8004724:	2100      	movs	r1, #0
 8004726:	f021 fd1f 	bl	8026168 <memset>
 800472a:	4620      	mov	r0, r4
 800472c:	f7ff ffd0 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
 8004730:	4b06      	ldr	r3, [pc, #24]	@ (800474c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 8004732:	4620      	mov	r0, r4
 8004734:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	882b      	ldrh	r3, [r5, #0]
 800473a:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800473c:	23ff      	movs	r3, #255	@ 0xff
 800473e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8004742:	f00f fdd4 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8004746:	4620      	mov	r0, r4
 8004748:	bd38      	pop	{r3, r4, r5, pc}
 800474a:	bf00      	nop
 800474c:	0802a280 	.word	0x0802a280

08004750 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 8004752:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 8004754:	4606      	mov	r6, r0
 8004756:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	428b      	cmp	r3, r1
 800475c:	d92a      	bls.n	80047b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800475e:	4b17      	ldr	r3, [pc, #92]	@ (80047bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b92b      	cbnz	r3, 8004770 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8004764:	4b16      	ldr	r3, [pc, #88]	@ (80047c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8004766:	216c      	movs	r1, #108	@ 0x6c
 8004768:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 800476a:	4817      	ldr	r0, [pc, #92]	@ (80047c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 800476c:	f021 fa60 	bl	8025c30 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004770:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8004774:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 800477c:	4b14      	ldr	r3, [pc, #80]	@ (80047d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	f002 fafc 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	4607      	mov	r7, r0
 8004788:	4628      	mov	r0, r5
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	4798      	blx	r3
 800478e:	682b      	ldr	r3, [r5, #0]
 8004790:	4604      	mov	r4, r0
 8004792:	4639      	mov	r1, r7
 8004794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004796:	4628      	mov	r0, r5
 8004798:	4798      	blx	r3
 800479a:	fb14 f400 	smulbb	r4, r4, r0
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	4639      	mov	r1, r7
 80047a2:	b2a4      	uxth	r4, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	4798      	blx	r3
 80047aa:	1823      	adds	r3, r4, r0
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b4:	2300      	movs	r3, #0
 80047b6:	e7fa      	b.n	80047ae <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 80047b8:	24026474 	.word	0x24026474
 80047bc:	24026470 	.word	0x24026470
 80047c0:	08028fa0 	.word	0x08028fa0
 80047c4:	08028fe2 	.word	0x08028fe2
 80047c8:	0802901d 	.word	0x0802901d
 80047cc:	24026478 	.word	0x24026478
 80047d0:	2402647c 	.word	0x2402647c

080047d4 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80047d8:	2226      	movs	r2, #38	@ 0x26
 80047da:	2100      	movs	r1, #0
 80047dc:	f021 fcc4 	bl	8026168 <memset>
 80047e0:	4620      	mov	r0, r4
 80047e2:	f7ff ff75 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
 80047e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 80047e8:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 80047ec:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80047ee:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 80047f0:	4b08      	ldr	r3, [pc, #32]	@ (8004814 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 80047f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047f8:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 80047fa:	2300      	movs	r3, #0
 80047fc:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	8723      	strh	r3, [r4, #56]	@ 0x38
 8004806:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8004808:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 800480c:	bd10      	pop	{r4, pc}
 800480e:	bf00      	nop
 8004810:	0802a114 	.word	0x0802a114
 8004814:	080289bc 	.word	0x080289bc

08004818 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	4604      	mov	r4, r0
 800481e:	b091      	sub	sp, #68	@ 0x44
        : presenter(0)
 8004820:	2500      	movs	r5, #0
 8004822:	f014 fa41 	bl	8018ca8 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8004826:	4627      	mov	r7, r4
 8004828:	4bc1      	ldr	r3, [pc, #772]	@ (8004b30 <_ZN15Screen1ViewBaseC1Ev+0x318>)
 800482a:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800482e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8004832:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8004836:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8004838:	f847 3b40 	str.w	r3, [r7], #64
 800483c:	4638      	mov	r0, r7
 800483e:	f7ff ff59 	bl	80046f4 <_ZN8touchgfx3BoxC1Ev>
 8004842:	a90e      	add	r1, sp, #56	@ 0x38
 8004844:	4640      	mov	r0, r8
 8004846:	f8ad 6038 	strh.w	r6, [sp, #56]	@ 0x38
 800484a:	f7ff ff67 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800484e:	4650      	mov	r0, sl
 8004850:	f00f fe8e 	bl	8014570 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004854:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 8004858:	a90e      	add	r1, sp, #56	@ 0x38
 800485a:	f8ad 6038 	strh.w	r6, [sp, #56]	@ 0x38
 800485e:	4618      	mov	r0, r3
 8004860:	9304      	str	r3, [sp, #16]
 8004862:	f7ff ff5b 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004866:	f504 7386 	add.w	r3, r4, #268	@ 0x10c
 800486a:	f504 799c 	add.w	r9, r4, #312	@ 0x138
 800486e:	a90e      	add	r1, sp, #56	@ 0x38
 8004870:	4618      	mov	r0, r3
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	f8ad 6038 	strh.w	r6, [sp, #56]	@ 0x38
 8004878:	f7ff ff50 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 800487c:	4629      	mov	r1, r5
 800487e:	2226      	movs	r2, #38	@ 0x26
 8004880:	4648      	mov	r0, r9
 8004882:	f504 7bf0 	add.w	fp, r4, #480	@ 0x1e0
 8004886:	f021 fc6f 	bl	8026168 <memset>
 800488a:	4648      	mov	r0, r9
 800488c:	f7ff ff20 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8004890:	2301      	movs	r3, #1
 8004892:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
 8004896:	f884 315c 	strb.w	r3, [r4, #348]	@ 0x15c
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 800489a:	4ba6      	ldr	r3, [pc, #664]	@ (8004b34 <_ZN15Screen1ViewBaseC1Ev+0x31c>)
 800489c:	f884 5164 	strb.w	r5, [r4, #356]	@ 0x164
 80048a0:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 80048a4:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 80048a8:	f8a4 6166 	strh.w	r6, [r4, #358]	@ 0x166
 80048ac:	4618      	mov	r0, r3
 80048ae:	f8a4 6168 	strh.w	r6, [r4, #360]	@ 0x168
 80048b2:	f884 616a 	strb.w	r6, [r4, #362]	@ 0x16a
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80048b6:	1d26      	adds	r6, r4, #4
 80048b8:	9302      	str	r3, [sp, #8]
 80048ba:	f7ff ff8b 	bl	80047d4 <_ZN8touchgfx8TextAreaC1Ev>
 80048be:	f504 73da 	add.w	r3, r4, #436	@ 0x1b4
 80048c2:	4618      	mov	r0, r3
 80048c4:	9306      	str	r3, [sp, #24]
 80048c6:	f7ff ff15 	bl	80046f4 <_ZN8touchgfx3BoxC1Ev>
        : TextArea()
 80048ca:	4658      	mov	r0, fp
 80048cc:	f7ff ff82 	bl	80047d4 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 80048d0:	4b99      	ldr	r3, [pc, #612]	@ (8004b38 <_ZN15Screen1ViewBaseC1Ev+0x320>)
 80048d2:	f8c4 5228 	str.w	r5, [r4, #552]	@ 0x228
 80048d6:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
 80048da:	f504 730b 	add.w	r3, r4, #556	@ 0x22c
 80048de:	4618      	mov	r0, r3
 80048e0:	9303      	str	r3, [sp, #12]
 80048e2:	f00f fe45 	bl	8014570 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80048e6:	4b95      	ldr	r3, [pc, #596]	@ (8004b3c <_ZN15Screen1ViewBaseC1Ev+0x324>)
    __background.setPosition(0, 0, 800, 480);
 80048e8:	462a      	mov	r2, r5
 80048ea:	4629      	mov	r1, r5
 80048ec:	4638      	mov	r0, r7
 80048ee:	e9c4 34a9 	strd	r3, r4, [r4, #676]	@ 0x2a4
 80048f2:	4b93      	ldr	r3, [pc, #588]	@ (8004b40 <_ZN15Screen1ViewBaseC1Ev+0x328>)
 80048f4:	e9c4 35ab 	strd	r3, r5, [r4, #684]	@ 0x2ac
 80048f8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004902:	f7ff fed1 	bl	80046a8 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004906:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800490a:	4639      	mov	r1, r7
 800490c:	4630      	mov	r0, r6
 800490e:	66a3      	str	r3, [r4, #104]	@ 0x68
        color = col;
 8004910:	f04f 37ff 	mov.w	r7, #4294967295
 8004914:	f00c f9e8 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-103, -45);
 8004918:	f06f 022c 	mvn.w	r2, #44	@ 0x2c
 800491c:	4640      	mov	r0, r8
 800491e:	f06f 0166 	mvn.w	r1, #102	@ 0x66
 8004922:	f7ff feb4 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8004926:	2308      	movs	r3, #8
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 8004928:	4640      	mov	r0, r8
 800492a:	a90e      	add	r1, sp, #56	@ 0x38
 800492c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8004930:	f00f fcdd 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004934:	4641      	mov	r1, r8
 8004936:	4630      	mov	r0, r6
 8004938:	f00c f9d6 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800493c:	f04f 0803 	mov.w	r8, #3
    inc.setXY(604, 230);
 8004940:	4650      	mov	r0, sl
 8004942:	22e6      	movs	r2, #230	@ 0xe6
 8004944:	f44f 7117 	mov.w	r1, #604	@ 0x25c
 8004948:	f7ff fea1 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    inc.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID));
 800494c:	aa0e      	add	r2, sp, #56	@ 0x38
 800494e:	a90d      	add	r1, sp, #52	@ 0x34
 8004950:	4650      	mov	r0, sl
 8004952:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8004956:	f8ad 8038 	strh.w	r8, [sp, #56]	@ 0x38
 800495a:	f00f fba0 	bl	801409e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 800495e:	2302      	movs	r3, #2
        updateTextPosition();
 8004960:	4650      	mov	r0, sl
 8004962:	f8a4 30d0 	strh.w	r3, [r4, #208]	@ 0xd0
 8004966:	f7ff fef3 	bl	8004750 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    inc.setAction(buttonCallback);
 800496a:	f504 7329 	add.w	r3, r4, #676	@ 0x2a4
 800496e:	4651      	mov	r1, sl
 8004970:	4630      	mov	r0, r6
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004972:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8004976:	f04f 0a09 	mov.w	sl, #9
 800497a:	9307      	str	r3, [sp, #28]
        colorPressed = col;
 800497c:	e9c4 7735 	strd	r7, r7, [r4, #212]	@ 0xd4
 8004980:	f00c f9b2 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 8004984:	462a      	mov	r2, r5
 8004986:	4629      	mov	r1, r5
 8004988:	9804      	ldr	r0, [sp, #16]
 800498a:	f7ff fe80 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 800498e:	a90e      	add	r1, sp, #56	@ 0x38
 8004990:	9804      	ldr	r0, [sp, #16]
 8004992:	f8ad a038 	strh.w	sl, [sp, #56]	@ 0x38
 8004996:	f00f fcaa 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800499a:	9904      	ldr	r1, [sp, #16]
 800499c:	4630      	mov	r0, r6
 800499e:	f00c f9a3 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 80049a2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80049a6:	4629      	mov	r1, r5
 80049a8:	9805      	ldr	r0, [sp, #20]
 80049aa:	f7ff fe70 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80049ae:	a90e      	add	r1, sp, #56	@ 0x38
 80049b0:	9805      	ldr	r0, [sp, #20]
 80049b2:	f8ad a038 	strh.w	sl, [sp, #56]	@ 0x38
 80049b6:	f00f fc9a 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80049ba:	9905      	ldr	r1, [sp, #20]
 80049bc:	4630      	mov	r0, r6
 80049be:	f00c f993 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(261, 400);
 80049c2:	4648      	mov	r0, r9
 80049c4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80049c8:	f240 1105 	movw	r1, #261	@ 0x105
 80049cc:	f7ff fe5f 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 80049d0:	230a      	movs	r3, #10
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 80049d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80049d4:	4648      	mov	r0, r9
 80049d6:	a90d      	add	r1, sp, #52	@ 0x34
 80049d8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80049dc:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80049e0:	f00f fb5d 	bl	801409e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80049e4:	9b07      	ldr	r3, [sp, #28]
 80049e6:	4649      	mov	r1, r9
 80049e8:	4630      	mov	r0, r6
        boundingArea = calculateBoundingArea();
 80049ea:	f10d 0920 	add.w	r9, sp, #32
 80049ee:	f8c4 3160 	str.w	r3, [r4, #352]	@ 0x160
 80049f2:	f00c f979 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(377, 430);
 80049f6:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80049fa:	f240 1179 	movw	r1, #377	@ 0x179
 80049fe:	9802      	ldr	r0, [sp, #8]
 8004a00:	f7ff fe45 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8004a04:	9902      	ldr	r1, [sp, #8]
 8004a06:	4648      	mov	r0, r9
        linespace = space;
 8004a08:	f8a4 51a0 	strh.w	r5, [r4, #416]	@ 0x1a0
        color = newColor;
 8004a0c:	f8c4 719c 	str.w	r7, [r4, #412]	@ 0x19c
        boundingArea = calculateBoundingArea();
 8004a10:	f00f f850 	bl	8013ab4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004a14:	f504 73d4 	add.w	r3, r4, #424	@ 0x1a8
        : typedTextId(id)
 8004a18:	f8df a14c 	ldr.w	sl, [pc, #332]	@ 8004b68 <_ZN15Screen1ViewBaseC1Ev+0x350>
 8004a1c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8004a20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004a24:	2307      	movs	r3, #7
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6YQL));
 8004a26:	a90e      	add	r1, sp, #56	@ 0x38
 8004a28:	9802      	ldr	r0, [sp, #8]
 8004a2a:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8004a2e:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8004a32:	f00f fad9 	bl	8013fe8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004a36:	9902      	ldr	r1, [sp, #8]
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f00c f955 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(334, 230, 149, 50);
 8004a3e:	2332      	movs	r3, #50	@ 0x32
 8004a40:	22e6      	movs	r2, #230	@ 0xe6
 8004a42:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8004a46:	9806      	ldr	r0, [sp, #24]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	2395      	movs	r3, #149	@ 0x95
 8004a4c:	f7ff fe2c 	bl	80046a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004a50:	4b3c      	ldr	r3, [pc, #240]	@ (8004b44 <_ZN15Screen1ViewBaseC1Ev+0x32c>)
 8004a52:	9906      	ldr	r1, [sp, #24]
 8004a54:	4630      	mov	r0, r6
 8004a56:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
 8004a5a:	f00c f945 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(363, 245);
 8004a5e:	22f5      	movs	r2, #245	@ 0xf5
 8004a60:	f240 116b 	movw	r1, #363	@ 0x16b
 8004a64:	4658      	mov	r0, fp
 8004a66:	f7ff fe12 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004a6a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8004a6e:	4659      	mov	r1, fp
 8004a70:	4648      	mov	r0, r9
        color = newColor;
 8004a72:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
        boundingArea = calculateBoundingArea();
 8004a76:	f8d4 31e0 	ldr.w	r3, [r4, #480]	@ 0x1e0
        linespace = space;
 8004a7a:	f8a4 5214 	strh.w	r5, [r4, #532]	@ 0x214
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T_NUM_BRILLO).getText());
 8004a7e:	f504 751d 	add.w	r5, r4, #628	@ 0x274
        boundingArea = calculateBoundingArea();
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a86:	4798      	blx	r3
 8004a88:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 8004a8c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8004a90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004a94:	4b2c      	ldr	r3, [pc, #176]	@ (8004b48 <_ZN15Screen1ViewBaseC1Ev+0x330>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	b92b      	cbnz	r3, 8004aa6 <_ZN15Screen1ViewBaseC1Ev+0x28e>
 8004a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8004b4c <_ZN15Screen1ViewBaseC1Ev+0x334>)
 8004a9c:	2160      	movs	r1, #96	@ 0x60
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b50 <_ZN15Screen1ViewBaseC1Ev+0x338>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004aa0:	482c      	ldr	r0, [pc, #176]	@ (8004b54 <_ZN15Screen1ViewBaseC1Ev+0x33c>)
 8004aa2:	f021 f8c5 	bl	8025c30 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b58 <_ZN15Screen1ViewBaseC1Ev+0x340>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d803      	bhi.n	8004ab6 <_ZN15Screen1ViewBaseC1Ev+0x29e>
 8004aae:	4b2b      	ldr	r3, [pc, #172]	@ (8004b5c <_ZN15Screen1ViewBaseC1Ev+0x344>)
 8004ab0:	2161      	movs	r1, #97	@ 0x61
 8004ab2:	4a27      	ldr	r2, [pc, #156]	@ (8004b50 <_ZN15Screen1ViewBaseC1Ev+0x338>)
 8004ab4:	e7f4      	b.n	8004aa0 <_ZN15Screen1ViewBaseC1Ev+0x288>
        return texts->getText(typedTextId);
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <_ZN15Screen1ViewBaseC1Ev+0x348>)
 8004ab8:	2104      	movs	r1, #4
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	f002 f95e 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 8004ac0:	4a28      	ldr	r2, [pc, #160]	@ (8004b64 <_ZN15Screen1ViewBaseC1Ev+0x34c>)
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2118      	movs	r1, #24
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f015 fe00 	bl	801a6cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea2.resizeToCurrentText();
 8004acc:	4658      	mov	r0, fp
        wc1 = value;
 8004ace:	f8c4 5228 	str.w	r5, [r4, #552]	@ 0x228
 8004ad2:	f00f fa69 	bl	8013fa8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004ad6:	2305      	movs	r3, #5
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BP1Y));
 8004ad8:	a90e      	add	r1, sp, #56	@ 0x38
 8004ada:	4658      	mov	r0, fp
 8004adc:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8004ae0:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8004ae4:	f00f fa80 	bl	8013fe8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004ae8:	4659      	mov	r1, fp
 8004aea:	4630      	mov	r0, r6
 8004aec:	f00c f8fc 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dec.setXY(113, 230);
 8004af0:	9803      	ldr	r0, [sp, #12]
 8004af2:	22e6      	movs	r2, #230	@ 0xe6
 8004af4:	2171      	movs	r1, #113	@ 0x71
 8004af6:	f7ff fdca 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    dec.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUNDED_ACTION_ID));
 8004afa:	aa0e      	add	r2, sp, #56	@ 0x38
 8004afc:	a90d      	add	r1, sp, #52	@ 0x34
 8004afe:	9803      	ldr	r0, [sp, #12]
 8004b00:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8004b04:	f8ad 8038 	strh.w	r8, [sp, #56]	@ 0x38
 8004b08:	f00f fac9 	bl	801409e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004b0c:	9803      	ldr	r0, [sp, #12]
class TypedText
 8004b0e:	f8a4 8264 	strh.w	r8, [r4, #612]	@ 0x264
 8004b12:	f7ff fe1d 	bl	8004750 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004b16:	9b07      	ldr	r3, [sp, #28]
 8004b18:	4630      	mov	r0, r6
 8004b1a:	9903      	ldr	r1, [sp, #12]
 8004b1c:	f8c4 3254 	str.w	r3, [r4, #596]	@ 0x254
        colorPressed = col;
 8004b20:	e9c4 779a 	strd	r7, r7, [r4, #616]	@ 0x268
 8004b24:	f00c f8e0 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004b28:	4620      	mov	r0, r4
 8004b2a:	b011      	add	sp, #68	@ 0x44
 8004b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b30:	08029218 	.word	0x08029218
 8004b34:	0802a20c 	.word	0x0802a20c
 8004b38:	08029170 	.word	0x08029170
 8004b3c:	08029200 	.word	0x08029200
 8004b40:	08004645 	.word	0x08004645
 8004b44:	ff91b1bf 	.word	0xff91b1bf
 8004b48:	24026470 	.word	0x24026470
 8004b4c:	08028fa0 	.word	0x08028fa0
 8004b50:	080290b0 	.word	0x080290b0
 8004b54:	0802901d 	.word	0x0802901d
 8004b58:	24026474 	.word	0x24026474
 8004b5c:	08029072 	.word	0x08029072
 8004b60:	2402647c 	.word	0x2402647c
 8004b64:	080290fb 	.word	0x080290fb
 8004b68:	080289bc 	.word	0x080289bc

08004b6c <_ZN15Screen2ViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 8004b6c:	4770      	bx	lr

08004b6e <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8004b6e:	4770      	bx	lr

08004b70 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8004b70:	4770      	bx	lr

08004b72 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004b72:	4770      	bx	lr

08004b74 <_ZN8touchgfx16RadioButtonGroupILt64EED1Ev>:
    }

    /** Finalizes an instance of the RadioButtonGroup class. */
    virtual ~RadioButtonGroup()
    {
    }
 8004b74:	4770      	bx	lr

08004b76 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 8004b76:	4770      	bx	lr

08004b78 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004b78:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004b7a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004b7c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004b7e:	68c2      	ldr	r2, [r0, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	1055      	asrs	r5, r2, #1
 8004b84:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004b88:	07d2      	lsls	r2, r2, #31
 8004b8a:	bf48      	it	mi
 8004b8c:	5962      	ldrmi	r2, [r4, r5]
    }
 8004b8e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004b90:	bf48      	it	mi
 8004b92:	58d3      	ldrmi	r3, [r2, r3]
 8004b94:	4718      	bx	r3

08004b96 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004b96:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004b98:	6840      	ldr	r0, [r0, #4]
 8004b9a:	b130      	cbz	r0, 8004baa <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	b91a      	cbnz	r2, 8004ba8 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8004ba0:	68d8      	ldr	r0, [r3, #12]
 8004ba2:	f000 0001 	and.w	r0, r0, #1
 8004ba6:	4770      	bx	lr
 8004ba8:	2001      	movs	r0, #1
    }
 8004baa:	4770      	bx	lr

08004bac <_ZNK8touchgfx16RadioButtonGroupILt64EE14getRadioButtonEt>:
     *
     * @return the RadioButton at the specified index. Returns 0 if the index is illegal.
     */
    virtual RadioButton* getRadioButton(uint16_t index) const
    {
        return (size > index) ? radioButtons[index] : 0;
 8004bac:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	bf86      	itte	hi
 8004bb4:	eb00 0081 	addhi.w	r0, r0, r1, lsl #2
 8004bb8:	6840      	ldrhi	r0, [r0, #4]
 8004bba:	2000      	movls	r0, #0
    }
 8004bbc:	4770      	bx	lr

08004bbe <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv>:
     * Gets the index of the currently selected RadioButton.
     *
     * @return the index of the selected RadioButton. Returns -1 if no RadioButton is
     *         selected.
     */
    virtual int32_t getSelectedRadioButtonIndex() const
 8004bbe:	4603      	mov	r3, r0
    {
        for (uint16_t i = 0; i < size; i++)
 8004bc0:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 8004bc4:	2000      	movs	r0, #0
    virtual int32_t getSelectedRadioButtonIndex() const
 8004bc6:	b510      	push	{r4, lr}
        for (uint16_t i = 0; i < size; i++)
 8004bc8:	b282      	uxth	r2, r0
 8004bca:	4291      	cmp	r1, r2
 8004bcc:	d802      	bhi.n	8004bd4 <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0x16>
            if (radioButtons[i]->getSelected())
            {
                return i;
            }
        }
        return -1;
 8004bce:	f04f 30ff 	mov.w	r0, #4294967295
    }
 8004bd2:	bd10      	pop	{r4, pc}
     *
     * @return The current selected state.
     */
    bool getSelected() const
    {
        return selected;
 8004bd4:	f853 4f04 	ldr.w	r4, [r3, #4]!
            if (radioButtons[i]->getSelected())
 8004bd8:	1c42      	adds	r2, r0, #1
 8004bda:	f894 4037 	ldrb.w	r4, [r4, #55]	@ 0x37
 8004bde:	2c00      	cmp	r4, #0
 8004be0:	d1f7      	bne.n	8004bd2 <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0x14>
 8004be2:	4610      	mov	r0, r2
 8004be4:	e7f0      	b.n	8004bc8 <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0xa>

08004be6 <_ZNK8touchgfx16RadioButtonGroupILt64EE22getSelectedRadioButtonEv>:
     * @return a pointer to the selected RadioButton. Returns 0 if no RadioButton is
     *         selected.
     */
    virtual RadioButton* getSelectedRadioButton() const
    {
        int32_t index = getSelectedRadioButtonIndex();
 8004be6:	6803      	ldr	r3, [r0, #0]
    virtual RadioButton* getSelectedRadioButton() const
 8004be8:	b510      	push	{r4, lr}
        int32_t index = getSelectedRadioButtonIndex();
 8004bea:	691b      	ldr	r3, [r3, #16]
    virtual RadioButton* getSelectedRadioButton() const
 8004bec:	4604      	mov	r4, r0
        int32_t index = getSelectedRadioButtonIndex();
 8004bee:	4798      	blx	r3
        return (index < 0) ? 0 : getRadioButton(index);
 8004bf0:	1e01      	subs	r1, r0, #0
 8004bf2:	db06      	blt.n	8004c02 <_ZNK8touchgfx16RadioButtonGroupILt64EE22getSelectedRadioButtonEv+0x1c>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	b289      	uxth	r1, r1
 8004bfa:	68db      	ldr	r3, [r3, #12]
    }
 8004bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return (index < 0) ? 0 : getRadioButton(index);
 8004c00:	4718      	bx	r3
    }
 8004c02:	2000      	movs	r0, #0
 8004c04:	bd10      	pop	{r4, pc}

08004c06 <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb>:
     *
     * @param  deselectionEnabled true if it should be possible to deselect by click.
     *
     * @see getDeselectionEnabled
     */
    virtual void setDeselectionEnabled(bool deselectionEnabled)
 8004c06:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 8004c0a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    {
        for (uint16_t i = 0; i < size; i++)
 8004c0e:	4298      	cmp	r0, r3
 8004c10:	d100      	bne.n	8004c14 <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb+0xe>
        {
            radioButtons[i]->setDeselectionEnabled(deselectionEnabled);
        }
    }
 8004c12:	4770      	bx	lr
        deselectionEnabled = state;
 8004c14:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004c18:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
        for (uint16_t i = 0; i < size; i++)
 8004c1c:	e7f7      	b.n	8004c0e <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb+0x8>

08004c1e <_ZNK8touchgfx16RadioButtonGroupILt64EE21getDeselectionEnabledEv>:
     *
     * @return The current deselectionEnabled state.
     *
     * @see setDeselectionEnabled
     */
    virtual bool getDeselectionEnabled() const
 8004c1e:	4603      	mov	r3, r0
    {
        return (size > 0) ? radioButtons[0]->getDeselectionEnabled() : false;
 8004c20:	f8b0 0104 	ldrh.w	r0, [r0, #260]	@ 0x104
 8004c24:	b110      	cbz	r0, 8004c2c <_ZNK8touchgfx16RadioButtonGroupILt64EE21getDeselectionEnabledEv+0xe>
        return deselectionEnabled;
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
    }
 8004c2c:	4770      	bx	lr

08004c2e <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8004c2e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004c30:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004c32:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004c34:	68c2      	ldr	r2, [r0, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	1055      	asrs	r5, r2, #1
 8004c3a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004c3e:	07d2      	lsls	r2, r2, #31
 8004c40:	bf48      	it	mi
 8004c42:	5962      	ldrmi	r2, [r4, r5]
    }
 8004c44:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004c46:	bf48      	it	mi
 8004c48:	58d3      	ldrmi	r3, [r2, r3]
 8004c4a:	4718      	bx	r3

08004c4c <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004c4c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004c4e:	6840      	ldr	r0, [r0, #4]
 8004c50:	b130      	cbz	r0, 8004c60 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	b91a      	cbnz	r2, 8004c5e <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8004c56:	68d8      	ldr	r0, [r3, #12]
 8004c58:	f000 0001 	and.w	r0, r0, #1
 8004c5c:	4770      	bx	lr
 8004c5e:	2001      	movs	r0, #1
    }
 8004c60:	4770      	bx	lr

08004c62 <_ZN8touchgfx16RadioButtonGroupILt64EE11setSelectedERNS_11RadioButtonE>:
    virtual void setSelected(RadioButton& radioButton)
 8004c62:	b570      	push	{r4, r5, r6, lr}
 8004c64:	460d      	mov	r5, r1
 8004c66:	4604      	mov	r4, r0
        radioButton.setSelected(true);
 8004c68:	2101      	movs	r1, #1
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f00f fd50 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
        radioButtonClickedHandler(radioButton);
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	4629      	mov	r1, r5
 8004c74:	4620      	mov	r0, r4
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8004c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        radioButtonClickedHandler(radioButton);
 8004c7c:	4718      	bx	r3

08004c7e <_ZN8touchgfx16RadioButtonGroupILt64EED0Ev>:
    virtual ~RadioButtonGroup()
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	4604      	mov	r4, r0
    }
 8004c82:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8004c86:	f020 fc5a 	bl	802553e <_ZdlPvj>
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	bd10      	pop	{r4, pc}

08004c8e <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	4604      	mov	r4, r0
 8004c92:	2110      	movs	r1, #16
 8004c94:	f020 fc53 	bl	802553e <_ZdlPvj>
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bd10      	pop	{r4, pc}

08004c9c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	2110      	movs	r1, #16
 8004ca2:	f020 fc4c 	bl	802553e <_ZdlPvj>
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	bd10      	pop	{r4, pc}

08004caa <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8004caa:	b510      	push	{r4, lr}
 8004cac:	4604      	mov	r4, r0
}
 8004cae:	f241 3104 	movw	r1, #4868	@ 0x1304
 8004cb2:	f020 fc44 	bl	802553e <_ZdlPvj>
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	bd10      	pop	{r4, pc}

08004cba <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE>:
    }
}

void Screen2ViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &RadioButton_0_1)
 8004cba:	f500 538c 	add.w	r3, r0, #4480	@ 0x1180
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	4299      	cmp	r1, r3
{
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	460d      	mov	r5, r1
    if (&src == &RadioButton_0_1)
 8004cc8:	d105      	bne.n	8004cd6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>
    {
        //Interaction3
        //When RadioButton_0_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 4 , 0);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2204      	movs	r2, #4
 8004cce:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f002 fa97 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_2)
 8004cd6:	f504 538a 	add.w	r3, r4, #4416	@ 0x1140
 8004cda:	3308      	adds	r3, #8
 8004cdc:	429d      	cmp	r5, r3
 8004cde:	d105      	bne.n	8004cec <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
    {
        //Interaction4
        //When RadioButton_0_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 4 , 1);
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ce8:	f002 fa8c 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_3)
 8004cec:	f504 5388 	add.w	r3, r4, #4352	@ 0x1100
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	429d      	cmp	r5, r3
 8004cf4:	d105      	bne.n	8004d02 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x48>
    {
        //Interaction5
        //When RadioButton_0_3 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 4 , 2);
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004cfe:	f002 fa81 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_4)
 8004d02:	f504 5386 	add.w	r3, r4, #4288	@ 0x10c0
 8004d06:	3308      	adds	r3, #8
 8004d08:	429d      	cmp	r5, r3
 8004d0a:	d105      	bne.n	8004d18 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5e>
    {
        //Interaction6
        //When RadioButton_0_4 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 4 , 3);
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	2204      	movs	r2, #4
 8004d10:	2100      	movs	r1, #0
 8004d12:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d14:	f002 fa76 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_5)
 8004d18:	f504 5384 	add.w	r3, r4, #4224	@ 0x1080
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	429d      	cmp	r5, r3
 8004d20:	d105      	bne.n	8004d2e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x74>
    {
        //Interaction7
        //When RadioButton_0_5 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 3 , 0);
 8004d22:	2300      	movs	r3, #0
 8004d24:	2203      	movs	r2, #3
 8004d26:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f002 fa6b 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_6)
 8004d2e:	f504 5382 	add.w	r3, r4, #4160	@ 0x1040
 8004d32:	3308      	adds	r3, #8
 8004d34:	429d      	cmp	r5, r3
 8004d36:	d105      	bne.n	8004d44 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x8a>
    {
        //Interaction8
        //When RadioButton_0_6 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 3 , 1);
 8004d38:	2301      	movs	r3, #1
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d40:	f002 fa60 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_7)
 8004d44:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8004d48:	3308      	adds	r3, #8
 8004d4a:	429d      	cmp	r5, r3
 8004d4c:	d105      	bne.n	8004d5a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa0>
    {
        //Interaction9
        //When RadioButton_0_7 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 3 , 2);
 8004d4e:	2302      	movs	r3, #2
 8004d50:	2203      	movs	r2, #3
 8004d52:	2100      	movs	r1, #0
 8004d54:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d56:	f002 fa55 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_8)
 8004d5a:	f604 73c8 	addw	r3, r4, #4040	@ 0xfc8
 8004d5e:	429d      	cmp	r5, r3
 8004d60:	d105      	bne.n	8004d6e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb4>
    {
        //Interaction10
        //When RadioButton_0_8 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 3 , 3);
 8004d62:	2303      	movs	r3, #3
 8004d64:	2100      	movs	r1, #0
 8004d66:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f002 fa4b 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_9)
 8004d6e:	f604 7388 	addw	r3, r4, #3976	@ 0xf88
 8004d72:	429d      	cmp	r5, r3
 8004d74:	d105      	bne.n	8004d82 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>
    {
        //Interaction11
        //When RadioButton_0_9 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 2 , 0);
 8004d76:	2300      	movs	r3, #0
 8004d78:	2202      	movs	r2, #2
 8004d7a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f002 fa41 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_10)
 8004d82:	f604 7348 	addw	r3, r4, #3912	@ 0xf48
 8004d86:	429d      	cmp	r5, r3
 8004d88:	d105      	bne.n	8004d96 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
    {
        //Interaction12
        //When RadioButton_0_10 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 2 , 1);
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	2100      	movs	r1, #0
 8004d90:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d92:	f002 fa37 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_11)
 8004d96:	f604 7308 	addw	r3, r4, #3848	@ 0xf08
 8004d9a:	429d      	cmp	r5, r3
 8004d9c:	d105      	bne.n	8004daa <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xf0>
    {
        //Interaction13
        //When RadioButton_0_11 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 2 , 2);
 8004d9e:	2302      	movs	r3, #2
 8004da0:	2100      	movs	r1, #0
 8004da2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004da4:	461a      	mov	r2, r3
 8004da6:	f002 fa2d 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_12)
 8004daa:	f604 63c8 	addw	r3, r4, #3784	@ 0xec8
 8004dae:	429d      	cmp	r5, r3
 8004db0:	d105      	bne.n	8004dbe <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x104>
    {
        //Interaction14
        //When RadioButton_0_12 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 2 , 3);
 8004db2:	2303      	movs	r3, #3
 8004db4:	2202      	movs	r2, #2
 8004db6:	2100      	movs	r1, #0
 8004db8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004dba:	f002 fa23 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_13)
 8004dbe:	f604 6388 	addw	r3, r4, #3720	@ 0xe88
 8004dc2:	429d      	cmp	r5, r3
 8004dc4:	d105      	bne.n	8004dd2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x118>
    {
        //Interaction15
        //When RadioButton_0_13 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 1 , 0);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2201      	movs	r2, #1
 8004dca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f002 fa19 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_14)
 8004dd2:	f604 6348 	addw	r3, r4, #3656	@ 0xe48
 8004dd6:	429d      	cmp	r5, r3
 8004dd8:	d105      	bne.n	8004de6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x12c>
    {
        //Interaction16
        //When RadioButton_0_14 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 1 , 1);
 8004dda:	2301      	movs	r3, #1
 8004ddc:	2100      	movs	r1, #0
 8004dde:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004de0:	461a      	mov	r2, r3
 8004de2:	f002 fa0f 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_15)
 8004de6:	f604 6308 	addw	r3, r4, #3592	@ 0xe08
 8004dea:	429d      	cmp	r5, r3
 8004dec:	d105      	bne.n	8004dfa <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x140>
    {
        //Interaction17
        //When RadioButton_0_15 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 1 , 2);
 8004dee:	2302      	movs	r3, #2
 8004df0:	2201      	movs	r2, #1
 8004df2:	2100      	movs	r1, #0
 8004df4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004df6:	f002 fa05 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_16)
 8004dfa:	f604 53c8 	addw	r3, r4, #3528	@ 0xdc8
 8004dfe:	429d      	cmp	r5, r3
 8004e00:	d105      	bne.n	8004e0e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x154>
    {
        //Interaction18
        //When RadioButton_0_16 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 1 , 3);
 8004e02:	2303      	movs	r3, #3
 8004e04:	2201      	movs	r2, #1
 8004e06:	2100      	movs	r1, #0
 8004e08:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e0a:	f002 f9fb 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_1)
 8004e0e:	f604 5388 	addw	r3, r4, #3464	@ 0xd88
 8004e12:	429d      	cmp	r5, r3
 8004e14:	d105      	bne.n	8004e22 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x168>
    {
        //Interaction19
        //When RadioButton_1_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 4 , 0);
 8004e16:	2300      	movs	r3, #0
 8004e18:	2204      	movs	r2, #4
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e1e:	f002 f9f1 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_2)
 8004e22:	f604 5348 	addw	r3, r4, #3400	@ 0xd48
 8004e26:	429d      	cmp	r5, r3
 8004e28:	d105      	bne.n	8004e36 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x17c>
    {
        //Interaction20
        //When RadioButton_1_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 4 , 1);
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e30:	4619      	mov	r1, r3
 8004e32:	f002 f9e7 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_3)
 8004e36:	f604 5308 	addw	r3, r4, #3336	@ 0xd08
 8004e3a:	429d      	cmp	r5, r3
 8004e3c:	d105      	bne.n	8004e4a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x190>
    {
        //Interaction21
        //When RadioButton_1_3 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 4 , 2);
 8004e3e:	2302      	movs	r3, #2
 8004e40:	2204      	movs	r2, #4
 8004e42:	2101      	movs	r1, #1
 8004e44:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e46:	f002 f9dd 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_4)
 8004e4a:	f604 43c8 	addw	r3, r4, #3272	@ 0xcc8
 8004e4e:	429d      	cmp	r5, r3
 8004e50:	d105      	bne.n	8004e5e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1a4>
    {
        //Interaction22
        //When RadioButton_1_4 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 4 , 3);
 8004e52:	2303      	movs	r3, #3
 8004e54:	2204      	movs	r2, #4
 8004e56:	2101      	movs	r1, #1
 8004e58:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e5a:	f002 f9d3 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_5)
 8004e5e:	f604 4388 	addw	r3, r4, #3208	@ 0xc88
 8004e62:	429d      	cmp	r5, r3
 8004e64:	d105      	bne.n	8004e72 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1b8>
    {
        //Interaction23
        //When RadioButton_1_5 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 3 , 0);
 8004e66:	2300      	movs	r3, #0
 8004e68:	2203      	movs	r2, #3
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e6e:	f002 f9c9 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_6)
 8004e72:	f604 4348 	addw	r3, r4, #3144	@ 0xc48
 8004e76:	429d      	cmp	r5, r3
 8004e78:	d105      	bne.n	8004e86 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1cc>
    {
        //Interaction24
        //When RadioButton_1_6 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 3 , 1);
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e80:	4619      	mov	r1, r3
 8004e82:	f002 f9bf 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_7)
 8004e86:	f604 4308 	addw	r3, r4, #3080	@ 0xc08
 8004e8a:	429d      	cmp	r5, r3
 8004e8c:	d105      	bne.n	8004e9a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1e0>
    {
        //Interaction25
        //When RadioButton_1_7 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 3 , 2);
 8004e8e:	2302      	movs	r3, #2
 8004e90:	2203      	movs	r2, #3
 8004e92:	2101      	movs	r1, #1
 8004e94:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004e96:	f002 f9b5 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_8)
 8004e9a:	f604 33c8 	addw	r3, r4, #3016	@ 0xbc8
 8004e9e:	429d      	cmp	r5, r3
 8004ea0:	d105      	bne.n	8004eae <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1f4>
    {
        //Interaction26
        //When RadioButton_1_8 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 3 , 3);
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f002 f9ab 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_9)
 8004eae:	f604 3388 	addw	r3, r4, #2952	@ 0xb88
 8004eb2:	429d      	cmp	r5, r3
 8004eb4:	d105      	bne.n	8004ec2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x208>
    {
        //Interaction27
        //When RadioButton_1_9 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 2 , 0);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2202      	movs	r2, #2
 8004eba:	2101      	movs	r1, #1
 8004ebc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ebe:	f002 f9a1 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_10)
 8004ec2:	f604 3348 	addw	r3, r4, #2888	@ 0xb48
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	d105      	bne.n	8004ed6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x21c>
    {
        //Interaction28
        //When RadioButton_1_10 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 2 , 1);
 8004eca:	2301      	movs	r3, #1
 8004ecc:	2202      	movs	r2, #2
 8004ece:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f002 f997 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_11)
 8004ed6:	f604 3308 	addw	r3, r4, #2824	@ 0xb08
 8004eda:	429d      	cmp	r5, r3
 8004edc:	d105      	bne.n	8004eea <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x230>
    {
        //Interaction29
        //When RadioButton_1_11 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 2 , 2);
 8004ede:	2302      	movs	r3, #2
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f002 f98d 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_12)
 8004eea:	f604 23c8 	addw	r3, r4, #2760	@ 0xac8
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	d105      	bne.n	8004efe <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x244>
    {
        //Interaction30
        //When RadioButton_1_12 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 2 , 3);
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004efa:	f002 f983 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_13)
 8004efe:	f604 2388 	addw	r3, r4, #2696	@ 0xa88
 8004f02:	429d      	cmp	r5, r3
 8004f04:	d105      	bne.n	8004f12 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x258>
    {
        //Interaction31
        //When RadioButton_1_13 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 1 , 0);
 8004f06:	2201      	movs	r2, #1
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	f002 f979 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_14)
 8004f12:	f604 2348 	addw	r3, r4, #2632	@ 0xa48
 8004f16:	429d      	cmp	r5, r3
 8004f18:	d105      	bne.n	8004f26 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26c>
    {
        //Interaction32
        //When RadioButton_1_14 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 1 , 1);
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	f002 f96f 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_15)
 8004f26:	f604 2308 	addw	r3, r4, #2568	@ 0xa08
 8004f2a:	429d      	cmp	r5, r3
 8004f2c:	d105      	bne.n	8004f3a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x280>
    {
        //Interaction33
        //When RadioButton_1_15 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 1 , 2);
 8004f2e:	2201      	movs	r2, #1
 8004f30:	2302      	movs	r3, #2
 8004f32:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f34:	4611      	mov	r1, r2
 8004f36:	f002 f965 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_1_16)
 8004f3a:	f604 13c8 	addw	r3, r4, #2504	@ 0x9c8
 8004f3e:	429d      	cmp	r5, r3
 8004f40:	d105      	bne.n	8004f4e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x294>
    {
        //Interaction34
        //When RadioButton_1_16 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(1, 1 , 3);
 8004f42:	2201      	movs	r2, #1
 8004f44:	2303      	movs	r3, #3
 8004f46:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f48:	4611      	mov	r1, r2
 8004f4a:	f002 f95b 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_1)
 8004f4e:	f604 1388 	addw	r3, r4, #2440	@ 0x988
 8004f52:	429d      	cmp	r5, r3
 8004f54:	d105      	bne.n	8004f62 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a8>
    {
        //Interaction35
        //When RadioButton_2_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 4 , 0);
 8004f56:	2300      	movs	r3, #0
 8004f58:	2204      	movs	r2, #4
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f5e:	f002 f951 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_2)
 8004f62:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 8004f66:	429d      	cmp	r5, r3
 8004f68:	d105      	bne.n	8004f76 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2bc>
    {
        //Interaction36
        //When RadioButton_2_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 4 , 1);
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	2102      	movs	r1, #2
 8004f70:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f72:	f002 f947 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_3)
 8004f76:	f604 1308 	addw	r3, r4, #2312	@ 0x908
 8004f7a:	429d      	cmp	r5, r3
 8004f7c:	d105      	bne.n	8004f8a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2d0>
    {
        //Interaction37
        //When RadioButton_2_3 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 4 , 2);
 8004f7e:	2302      	movs	r3, #2
 8004f80:	2204      	movs	r2, #4
 8004f82:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f84:	4619      	mov	r1, r3
 8004f86:	f002 f93d 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_4)
 8004f8a:	f604 03c8 	addw	r3, r4, #2248	@ 0x8c8
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	d105      	bne.n	8004f9e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e4>
    {
        //Interaction38
        //When RadioButton_2_4 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 4 , 3);
 8004f92:	2303      	movs	r3, #3
 8004f94:	2204      	movs	r2, #4
 8004f96:	2102      	movs	r1, #2
 8004f98:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f9a:	f002 f933 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_5)
 8004f9e:	f604 0388 	addw	r3, r4, #2184	@ 0x888
 8004fa2:	429d      	cmp	r5, r3
 8004fa4:	d105      	bne.n	8004fb2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2f8>
    {
        //Interaction39
        //When RadioButton_2_5 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 3 , 0);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2203      	movs	r2, #3
 8004faa:	2102      	movs	r1, #2
 8004fac:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004fae:	f002 f929 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_6)
 8004fb2:	f604 0348 	addw	r3, r4, #2120	@ 0x848
 8004fb6:	429d      	cmp	r5, r3
 8004fb8:	d105      	bne.n	8004fc6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x30c>
    {
        //Interaction40
        //When RadioButton_2_6 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 3 , 1);
 8004fba:	2301      	movs	r3, #1
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004fc2:	f002 f91f 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_7)
 8004fc6:	f604 0308 	addw	r3, r4, #2056	@ 0x808
 8004fca:	429d      	cmp	r5, r3
 8004fcc:	d105      	bne.n	8004fda <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x320>
    {
        //Interaction41
        //When RadioButton_2_7 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 3 , 2);
 8004fce:	2302      	movs	r3, #2
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	f002 f915 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_8)
 8004fda:	f504 63f9 	add.w	r3, r4, #1992	@ 0x7c8
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	d105      	bne.n	8004fee <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x334>
    {
        //Interaction42
        //When RadioButton_2_8 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 3 , 3);
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f002 f90b 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_9)
 8004fee:	f504 63f1 	add.w	r3, r4, #1928	@ 0x788
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	d105      	bne.n	8005002 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x348>
    {
        //Interaction43
        //When RadioButton_2_9 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 2 , 0);
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	f002 f901 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_10)
 8005002:	f504 63e9 	add.w	r3, r4, #1864	@ 0x748
 8005006:	429d      	cmp	r5, r3
 8005008:	d105      	bne.n	8005016 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x35c>
    {
        //Interaction44
        //When RadioButton_2_10 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 2 , 1);
 800500a:	2202      	movs	r2, #2
 800500c:	2301      	movs	r3, #1
 800500e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005010:	4611      	mov	r1, r2
 8005012:	f002 f8f7 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_11)
 8005016:	f504 63e1 	add.w	r3, r4, #1800	@ 0x708
 800501a:	429d      	cmp	r5, r3
 800501c:	d105      	bne.n	800502a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x370>
    {
        //Interaction45
        //When RadioButton_2_11 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 2 , 2);
 800501e:	2302      	movs	r3, #2
 8005020:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005022:	461a      	mov	r2, r3
 8005024:	4619      	mov	r1, r3
 8005026:	f002 f8ed 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_12)
 800502a:	f504 63d9 	add.w	r3, r4, #1736	@ 0x6c8
 800502e:	429d      	cmp	r5, r3
 8005030:	d105      	bne.n	800503e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x384>
    {
        //Interaction46
        //When RadioButton_2_12 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 2 , 3);
 8005032:	2202      	movs	r2, #2
 8005034:	2303      	movs	r3, #3
 8005036:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005038:	4611      	mov	r1, r2
 800503a:	f002 f8e3 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_13)
 800503e:	f504 63d1 	add.w	r3, r4, #1672	@ 0x688
 8005042:	429d      	cmp	r5, r3
 8005044:	d105      	bne.n	8005052 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x398>
    {
        //Interaction47
        //When RadioButton_2_13 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 1 , 0);
 8005046:	2300      	movs	r3, #0
 8005048:	2201      	movs	r2, #1
 800504a:	2102      	movs	r1, #2
 800504c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800504e:	f002 f8d9 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_14)
 8005052:	f504 63c9 	add.w	r3, r4, #1608	@ 0x648
 8005056:	429d      	cmp	r5, r3
 8005058:	d105      	bne.n	8005066 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3ac>
    {
        //Interaction48
        //When RadioButton_2_14 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 1 , 1);
 800505a:	2301      	movs	r3, #1
 800505c:	2102      	movs	r1, #2
 800505e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005060:	461a      	mov	r2, r3
 8005062:	f002 f8cf 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_15)
 8005066:	f504 63c1 	add.w	r3, r4, #1544	@ 0x608
 800506a:	429d      	cmp	r5, r3
 800506c:	d105      	bne.n	800507a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c0>
    {
        //Interaction49
        //When RadioButton_2_15 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 1 , 2);
 800506e:	2302      	movs	r3, #2
 8005070:	2201      	movs	r2, #1
 8005072:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005074:	4619      	mov	r1, r3
 8005076:	f002 f8c5 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_2_16)
 800507a:	f504 63b9 	add.w	r3, r4, #1480	@ 0x5c8
 800507e:	429d      	cmp	r5, r3
 8005080:	d105      	bne.n	800508e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3d4>
    {
        //Interaction50
        //When RadioButton_2_16 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(2, 1 , 3);
 8005082:	2303      	movs	r3, #3
 8005084:	2201      	movs	r2, #1
 8005086:	2102      	movs	r1, #2
 8005088:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800508a:	f002 f8bb 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_1)
 800508e:	f504 63b1 	add.w	r3, r4, #1416	@ 0x588
 8005092:	429d      	cmp	r5, r3
 8005094:	d105      	bne.n	80050a2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e8>
    {
        //Interaction51
        //When RadioButton_3_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 4 , 0);
 8005096:	2300      	movs	r3, #0
 8005098:	2204      	movs	r2, #4
 800509a:	2103      	movs	r1, #3
 800509c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800509e:	f002 f8b1 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_2)
 80050a2:	f504 63a9 	add.w	r3, r4, #1352	@ 0x548
 80050a6:	429d      	cmp	r5, r3
 80050a8:	d105      	bne.n	80050b6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3fc>
    {
        //Interaction52
        //When RadioButton_3_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 4 , 1);
 80050aa:	2301      	movs	r3, #1
 80050ac:	2204      	movs	r2, #4
 80050ae:	2103      	movs	r1, #3
 80050b0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80050b2:	f002 f8a7 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_3)
 80050b6:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 80050ba:	429d      	cmp	r5, r3
 80050bc:	d105      	bne.n	80050ca <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x410>
    {
        //Interaction53
        //When RadioButton_3_3 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 4 , 2);
 80050be:	2302      	movs	r3, #2
 80050c0:	2204      	movs	r2, #4
 80050c2:	2103      	movs	r1, #3
 80050c4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80050c6:	f002 f89d 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_4)
 80050ca:	f504 6399 	add.w	r3, r4, #1224	@ 0x4c8
 80050ce:	429d      	cmp	r5, r3
 80050d0:	d105      	bne.n	80050de <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x424>
    {
        //Interaction54
        //When RadioButton_3_4 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 4 , 3);
 80050d2:	2303      	movs	r3, #3
 80050d4:	2204      	movs	r2, #4
 80050d6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80050d8:	4619      	mov	r1, r3
 80050da:	f002 f893 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_5)
 80050de:	f504 6391 	add.w	r3, r4, #1160	@ 0x488
 80050e2:	429d      	cmp	r5, r3
 80050e4:	d105      	bne.n	80050f2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x438>
    {
        //Interaction55
        //When RadioButton_3_5 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 3 , 0);
 80050e6:	2203      	movs	r2, #3
 80050e8:	2300      	movs	r3, #0
 80050ea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80050ec:	4611      	mov	r1, r2
 80050ee:	f002 f889 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_6)
 80050f2:	f504 6389 	add.w	r3, r4, #1096	@ 0x448
 80050f6:	429d      	cmp	r5, r3
 80050f8:	d105      	bne.n	8005106 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x44c>
    {
        //Interaction56
        //When RadioButton_3_6 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 3 , 1);
 80050fa:	2203      	movs	r2, #3
 80050fc:	2301      	movs	r3, #1
 80050fe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005100:	4611      	mov	r1, r2
 8005102:	f002 f87f 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_7)
 8005106:	f504 6381 	add.w	r3, r4, #1032	@ 0x408
 800510a:	429d      	cmp	r5, r3
 800510c:	d105      	bne.n	800511a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x460>
    {
        //Interaction57
        //When RadioButton_3_7 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 3 , 2);
 800510e:	2203      	movs	r2, #3
 8005110:	2302      	movs	r3, #2
 8005112:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005114:	4611      	mov	r1, r2
 8005116:	f002 f875 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_8)
 800511a:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 800511e:	429d      	cmp	r5, r3
 8005120:	d105      	bne.n	800512e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x474>
    {
        //Interaction58
        //When RadioButton_3_8 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 3 , 3);
 8005122:	2303      	movs	r3, #3
 8005124:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005126:	461a      	mov	r2, r3
 8005128:	4619      	mov	r1, r3
 800512a:	f002 f86b 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_9)
 800512e:	f504 7362 	add.w	r3, r4, #904	@ 0x388
 8005132:	429d      	cmp	r5, r3
 8005134:	d105      	bne.n	8005142 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x488>
    {
        //Interaction59
        //When RadioButton_3_9 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 2 , 0);
 8005136:	2300      	movs	r3, #0
 8005138:	2202      	movs	r2, #2
 800513a:	2103      	movs	r1, #3
 800513c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800513e:	f002 f861 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_10)
 8005142:	f504 7352 	add.w	r3, r4, #840	@ 0x348
 8005146:	429d      	cmp	r5, r3
 8005148:	d105      	bne.n	8005156 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x49c>
    {
        //Interaction60
        //When RadioButton_3_10 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 2 , 1);
 800514a:	2301      	movs	r3, #1
 800514c:	2202      	movs	r2, #2
 800514e:	2103      	movs	r1, #3
 8005150:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005152:	f002 f857 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_11)
 8005156:	f504 7342 	add.w	r3, r4, #776	@ 0x308
 800515a:	429d      	cmp	r5, r3
 800515c:	d105      	bne.n	800516a <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4b0>
    {
        //Interaction61
        //When RadioButton_3_11 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 2 , 2);
 800515e:	2302      	movs	r3, #2
 8005160:	2103      	movs	r1, #3
 8005162:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005164:	461a      	mov	r2, r3
 8005166:	f002 f84d 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_12)
 800516a:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
 800516e:	429d      	cmp	r5, r3
 8005170:	d105      	bne.n	800517e <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4c4>
    {
        //Interaction62
        //When RadioButton_3_12 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 2 , 3);
 8005172:	2303      	movs	r3, #3
 8005174:	2202      	movs	r2, #2
 8005176:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005178:	4619      	mov	r1, r3
 800517a:	f002 f843 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_13)
 800517e:	f504 7322 	add.w	r3, r4, #648	@ 0x288
 8005182:	429d      	cmp	r5, r3
 8005184:	d105      	bne.n	8005192 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4d8>
    {
        //Interaction63
        //When RadioButton_3_13 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 1 , 0);
 8005186:	2300      	movs	r3, #0
 8005188:	2201      	movs	r2, #1
 800518a:	2103      	movs	r1, #3
 800518c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800518e:	f002 f839 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_14)
 8005192:	f504 7312 	add.w	r3, r4, #584	@ 0x248
 8005196:	429d      	cmp	r5, r3
 8005198:	d105      	bne.n	80051a6 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4ec>
    {
        //Interaction64
        //When RadioButton_3_14 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 1 , 1);
 800519a:	2301      	movs	r3, #1
 800519c:	2103      	movs	r1, #3
 800519e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80051a0:	461a      	mov	r2, r3
 80051a2:	f002 f82f 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_15)
 80051a6:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 80051aa:	429d      	cmp	r5, r3
 80051ac:	d105      	bne.n	80051ba <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x500>
    {
        //Interaction65
        //When RadioButton_3_15 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 1 , 2);
 80051ae:	2302      	movs	r3, #2
 80051b0:	2201      	movs	r2, #1
 80051b2:	2103      	movs	r1, #3
 80051b4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80051b6:	f002 f825 	bl	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_3_16)
 80051ba:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 80051be:	429d      	cmp	r5, r3
 80051c0:	d107      	bne.n	80051d2 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x518>
    {
        //Interaction66
        //When RadioButton_3_16 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(3, 1 , 3);
 80051c2:	2303      	movs	r3, #3
 80051c4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80051c6:	2201      	movs	r2, #1
 80051c8:	4619      	mov	r1, r3
    }
}
 80051ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        presenter->selectMatrizLed(3, 1 , 3);
 80051ce:	f002 b819 	b.w	8007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>
}
 80051d2:	bd70      	pop	{r4, r5, r6, pc}

080051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>:
    virtual void add(RadioButton& radioButton)
 80051d4:	b508      	push	{r3, lr}
        assert(size < CAPACITY && "RadioButtonGroup capacity exceeded!");
 80051d6:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 80051da:	2b3f      	cmp	r3, #63	@ 0x3f
 80051dc:	d905      	bls.n	80051ea <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x16>
 80051de:	4b09      	ldr	r3, [pc, #36]	@ (8005204 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x30>)
 80051e0:	2141      	movs	r1, #65	@ 0x41
 80051e2:	4a09      	ldr	r2, [pc, #36]	@ (8005208 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x34>)
 80051e4:	4809      	ldr	r0, [pc, #36]	@ (800520c <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x38>)
 80051e6:	f020 fd23 	bl	8025c30 <__assert_func>
        radioButton.setAction(radioButtonClicked);
 80051ea:	f500 7284 	add.w	r2, r0, #264	@ 0x108
 80051ee:	628a      	str	r2, [r1, #40]	@ 0x28
        radioButton.setDeselectedAction(radioButtonUnselected);
 80051f0:	f500 728c 	add.w	r2, r0, #280	@ 0x118
        deselectedAction = &callback;
 80051f4:	63ca      	str	r2, [r1, #60]	@ 0x3c
        radioButtons[size++] = &radioButton;
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 80051fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005200:	6041      	str	r1, [r0, #4]
    }
 8005202:	bd08      	pop	{r3, pc}
 8005204:	08029248 	.word	0x08029248
 8005208:	08029281 	.word	0x08029281
 800520c:	080292f0 	.word	0x080292f0

08005210 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
{
 8005210:	b538      	push	{r3, r4, r5, lr}
    if (&src == &Nex)
 8005212:	f500 5391 	add.w	r3, r0, #4640	@ 0x1220
{
 8005216:	4604      	mov	r4, r0
 8005218:	460d      	mov	r5, r1
    if (&src == &Nex)
 800521a:	4299      	cmp	r1, r3
 800521c:	d103      	bne.n	8005226 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800521e:	f011 fe29 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoWaitingScreenScreenNoTransition();
 8005222:	f7ff f8eb 	bl	80043fc <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv>
    if (&src == &Back)
 8005226:	f504 5094 	add.w	r0, r4, #4736	@ 0x1280
 800522a:	301c      	adds	r0, #28
 800522c:	4285      	cmp	r5, r0
 800522e:	d105      	bne.n	800523c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2c>
 8005230:	f011 fe20 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
}
 8005234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        application().gotoScreen1ScreenNoTransition();
 8005238:	f7ff b8c0 	b.w	80043bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
}
 800523c:	bd38      	pop	{r3, r4, r5, pc}

0800523e <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE>:
     * Handles the event that a RadioButton has been selected. deselects all other
     * RadioButtons.
     *
     * @param  radioButton the RadioButton that has been selected.
     */
    virtual void radioButtonClickedHandler(const AbstractButton& radioButton)
 800523e:	b570      	push	{r4, r5, r6, lr}
 8005240:	4604      	mov	r4, r0
 8005242:	460d      	mov	r5, r1
    {
        // Deselect other radio buttons
        for (uint16_t i = 0; i < size; i++)
 8005244:	2600      	movs	r6, #0
 8005246:	f8b4 2104 	ldrh.w	r2, [r4, #260]	@ 0x104
 800524a:	b2b3      	uxth	r3, r6
 800524c:	429a      	cmp	r2, r3
 800524e:	d80e      	bhi.n	800526e <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x30>
                    radioButtons[i]->setSelected(false);
                }
            }
        }

        if (radioButtonSelectedCallback && radioButtonSelectedCallback->isValid())
 8005250:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8005254:	b1c8      	cbz	r0, 800528a <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x4c>
 8005256:	6803      	ldr	r3, [r0, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	4798      	blx	r3
 800525c:	b1a8      	cbz	r0, 800528a <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x4c>
 800525e:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
        {
            radioButtonSelectedCallback->execute(radioButton);
 8005262:	4629      	mov	r1, r5
 8005264:	6803      	ldr	r3, [r0, #0]
        }
    }
 8005266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonSelectedCallback->execute(radioButton);
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4718      	bx	r3
            if (radioButtons[i] != &radioButton)
 800526e:	b2b3      	uxth	r3, r6
 8005270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005274:	6858      	ldr	r0, [r3, #4]
 8005276:	42a8      	cmp	r0, r5
 8005278:	d005      	beq.n	8005286 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x48>
                if (radioButtons[i]->getSelected())
 800527a:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 800527e:	b113      	cbz	r3, 8005286 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x48>
                    radioButtons[i]->setSelected(false);
 8005280:	2100      	movs	r1, #0
 8005282:	f00f fa45 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
        for (uint16_t i = 0; i < size; i++)
 8005286:	3601      	adds	r6, #1
 8005288:	e7dd      	b.n	8005246 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x8>
    }
 800528a:	bd70      	pop	{r4, r5, r6, pc}

0800528c <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE>:
    /**
     * Handles the event that a RadioButton has been deselected.
     *
     * @param  radioButton the RadioButton that has been deselected.
     */
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4604      	mov	r4, r0
    {
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8005290:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 8005294:	460d      	mov	r5, r1
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8005296:	b158      	cbz	r0, 80052b0 <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x24>
 8005298:	6803      	ldr	r3, [r0, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4798      	blx	r3
 800529e:	b138      	cbz	r0, 80052b0 <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x24>
 80052a0:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
        {
            radioButtonDeselectedCallback->execute(radioButton);
 80052a4:	4629      	mov	r1, r5
 80052a6:	6803      	ldr	r3, [r0, #0]
        }
    }
 80052a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonDeselectedCallback->execute(radioButton);
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	4718      	bx	r3
    }
 80052b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080052b4 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4604      	mov	r4, r0
        : Widget(), action(), pressed(false)
 80052b8:	2226      	movs	r2, #38	@ 0x26
 80052ba:	2100      	movs	r1, #0
 80052bc:	f020 ff54 	bl	8026168 <memset>
 80052c0:	4620      	mov	r0, r4
 80052c2:	f7ff fa05 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
 80052c6:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <_ZN8touchgfx14AbstractButtonC1Ev+0x28>)
    }
 80052c8:	4620      	mov	r0, r4
        : Widget(), action(), pressed(false)
 80052ca:	6023      	str	r3, [r4, #0]
 80052cc:	2300      	movs	r3, #0
 80052ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052d0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80052d4:	2301      	movs	r3, #1
 80052d6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    }
 80052da:	bd10      	pop	{r4, pc}
 80052dc:	0802a034 	.word	0x0802a034

080052e0 <_ZN8touchgfx11RadioButtonC1Ev>:
    RadioButton()
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
        : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 80052e4:	f7ff ffe6 	bl	80052b4 <_ZN8touchgfx14AbstractButtonC1Ev>
 80052e8:	4b08      	ldr	r3, [pc, #32]	@ (800530c <_ZN8touchgfx11RadioButtonC1Ev+0x2c>)
 80052ea:	f04f 32ff 	mov.w	r2, #4294967295
    }
 80052ee:	4620      	mov	r0, r4
        : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052f6:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80052f8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80052fc:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8005300:	2300      	movs	r3, #0
 8005302:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8005306:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	0802a360 	.word	0x0802a360

08005310 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	4604      	mov	r4, r0
 8005316:	b0cd      	sub	sp, #308	@ 0x134
 8005318:	2500      	movs	r5, #0
 800531a:	f013 fcc5 	bl	8018ca8 <_ZN8touchgfx6ScreenC1Ev>
    radioButtonSelectedCallback(this, &Screen2ViewBase::radioButtonSelectedCallbackHandler)
 800531e:	4627      	mov	r7, r4
 8005320:	4bda      	ldr	r3, [pc, #872]	@ (800568c <_ZN15Screen2ViewBaseC1Ev+0x37c>)
        : Widget(), alpha(255), color(0)
 8005322:	2226      	movs	r2, #38	@ 0x26
 8005324:	4629      	mov	r1, r5
 8005326:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8005328:	f50d 7b96 	add.w	fp, sp, #300	@ 0x12c
 800532c:	f847 3b40 	str.w	r3, [r7], #64
 8005330:	4638      	mov	r0, r7
 8005332:	f020 ff19 	bl	8026168 <memset>
 8005336:	4638      	mov	r0, r7
 8005338:	f7ff f9ca 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
 800533c:	4bd4      	ldr	r3, [pc, #848]	@ (8005690 <_ZN15Screen2ViewBaseC1Ev+0x380>)
 800533e:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 8005342:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8005346:	6423      	str	r3, [r4, #64]	@ 0x40
 8005348:	23ff      	movs	r3, #255	@ 0xff
 800534a:	4659      	mov	r1, fp
        : color(col)
 800534c:	66a5      	str	r5, [r4, #104]	@ 0x68
 800534e:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8005352:	4640      	mov	r0, r8
 8005354:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005358:	f7ff f9e0 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800535c:	f104 0398 	add.w	r3, r4, #152	@ 0x98
        : pobject(pObject), pmemfun(pmemfun_1)
 8005360:	4acc      	ldr	r2, [pc, #816]	@ (8005694 <_ZN15Screen2ViewBaseC1Ev+0x384>)
 8005362:	2124      	movs	r1, #36	@ 0x24
        : size(0),
 8005364:	f8a4 519c 	strh.w	r5, [r4, #412]	@ 0x19c
 8005368:	9302      	str	r3, [sp, #8]
 800536a:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
          radioButtonDeselectedCallback(0)
 800536e:	4bca      	ldr	r3, [pc, #808]	@ (8005698 <_ZN15Screen2ViewBaseC1Ev+0x388>)
 8005370:	f04f 0a04 	mov.w	sl, #4
 8005374:	f8c4 21a0 	str.w	r2, [r4, #416]	@ 0x1a0
 8005378:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 800537c:	f8c4 21b0 	str.w	r2, [r4, #432]	@ 0x1b0
 8005380:	9b02      	ldr	r3, [sp, #8]
 8005382:	9a02      	ldr	r2, [sp, #8]
 8005384:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
 8005388:	2301      	movs	r3, #1
 800538a:	f8c4 21b4 	str.w	r2, [r4, #436]	@ 0x1b4
 800538e:	2228      	movs	r2, #40	@ 0x28
 8005390:	e9c4 136a 	strd	r1, r3, [r4, #424]	@ 0x1a8
 8005394:	e9c4 236e 	strd	r2, r3, [r4, #440]	@ 0x1b8
 8005398:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 800539c:	e9c4 5570 	strd	r5, r5, [r4, #448]	@ 0x1c0
 80053a0:	4618      	mov	r0, r3
 80053a2:	9303      	str	r3, [sp, #12]
 80053a4:	f7ff ff9c 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80053a8:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 80053ac:	4618      	mov	r0, r3
 80053ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80053b0:	f7ff ff96 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80053b4:	f504 7312 	add.w	r3, r4, #584	@ 0x248
 80053b8:	4618      	mov	r0, r3
 80053ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80053bc:	f7ff ff90 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80053c0:	f504 7322 	add.w	r3, r4, #648	@ 0x288
 80053c4:	4618      	mov	r0, r3
 80053c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80053c8:	f7ff ff8a 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80053cc:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
 80053d0:	4618      	mov	r0, r3
 80053d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80053d4:	f7ff ff84 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80053d8:	f504 7342 	add.w	r3, r4, #776	@ 0x308
 80053dc:	4618      	mov	r0, r3
 80053de:	9310      	str	r3, [sp, #64]	@ 0x40
 80053e0:	f7ff ff7e 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80053e4:	f504 7352 	add.w	r3, r4, #840	@ 0x348
 80053e8:	4618      	mov	r0, r3
 80053ea:	9311      	str	r3, [sp, #68]	@ 0x44
 80053ec:	f7ff ff78 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80053f0:	f504 7362 	add.w	r3, r4, #904	@ 0x388
 80053f4:	4618      	mov	r0, r3
 80053f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80053f8:	f7ff ff72 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80053fc:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 8005400:	4618      	mov	r0, r3
 8005402:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005404:	f7ff ff6c 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005408:	f504 6381 	add.w	r3, r4, #1032	@ 0x408
 800540c:	4618      	mov	r0, r3
 800540e:	9314      	str	r3, [sp, #80]	@ 0x50
 8005410:	f7ff ff66 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005414:	f504 6389 	add.w	r3, r4, #1096	@ 0x448
 8005418:	4618      	mov	r0, r3
 800541a:	9315      	str	r3, [sp, #84]	@ 0x54
 800541c:	f7ff ff60 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005420:	f504 6391 	add.w	r3, r4, #1160	@ 0x488
 8005424:	4618      	mov	r0, r3
 8005426:	9316      	str	r3, [sp, #88]	@ 0x58
 8005428:	f7ff ff5a 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 800542c:	f504 6399 	add.w	r3, r4, #1224	@ 0x4c8
 8005430:	4618      	mov	r0, r3
 8005432:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005434:	f7ff ff54 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005438:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 800543c:	4618      	mov	r0, r3
 800543e:	9318      	str	r3, [sp, #96]	@ 0x60
 8005440:	f7ff ff4e 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005444:	f504 63a9 	add.w	r3, r4, #1352	@ 0x548
 8005448:	4618      	mov	r0, r3
 800544a:	9319      	str	r3, [sp, #100]	@ 0x64
 800544c:	f7ff ff48 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005450:	f504 63b1 	add.w	r3, r4, #1416	@ 0x588
 8005454:	4618      	mov	r0, r3
 8005456:	931a      	str	r3, [sp, #104]	@ 0x68
 8005458:	f7ff ff42 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 800545c:	f504 63b9 	add.w	r3, r4, #1480	@ 0x5c8
 8005460:	4618      	mov	r0, r3
 8005462:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005464:	f7ff ff3c 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005468:	f504 63c1 	add.w	r3, r4, #1544	@ 0x608
 800546c:	4618      	mov	r0, r3
 800546e:	931c      	str	r3, [sp, #112]	@ 0x70
 8005470:	f7ff ff36 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005474:	f504 63c9 	add.w	r3, r4, #1608	@ 0x648
 8005478:	4618      	mov	r0, r3
 800547a:	931d      	str	r3, [sp, #116]	@ 0x74
 800547c:	f7ff ff30 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005480:	f504 63d1 	add.w	r3, r4, #1672	@ 0x688
 8005484:	4618      	mov	r0, r3
 8005486:	931e      	str	r3, [sp, #120]	@ 0x78
 8005488:	f7ff ff2a 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 800548c:	f504 63d9 	add.w	r3, r4, #1736	@ 0x6c8
 8005490:	4618      	mov	r0, r3
 8005492:	931f      	str	r3, [sp, #124]	@ 0x7c
 8005494:	f7ff ff24 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005498:	f504 63e1 	add.w	r3, r4, #1800	@ 0x708
 800549c:	4618      	mov	r0, r3
 800549e:	9320      	str	r3, [sp, #128]	@ 0x80
 80054a0:	f7ff ff1e 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80054a4:	f504 63e9 	add.w	r3, r4, #1864	@ 0x748
 80054a8:	4618      	mov	r0, r3
 80054aa:	9321      	str	r3, [sp, #132]	@ 0x84
 80054ac:	f7ff ff18 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80054b0:	f504 63f1 	add.w	r3, r4, #1928	@ 0x788
 80054b4:	4618      	mov	r0, r3
 80054b6:	9322      	str	r3, [sp, #136]	@ 0x88
 80054b8:	f7ff ff12 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80054bc:	f504 63f9 	add.w	r3, r4, #1992	@ 0x7c8
 80054c0:	4618      	mov	r0, r3
 80054c2:	9323      	str	r3, [sp, #140]	@ 0x8c
 80054c4:	f7ff ff0c 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80054c8:	f604 0308 	addw	r3, r4, #2056	@ 0x808
 80054cc:	4618      	mov	r0, r3
 80054ce:	9324      	str	r3, [sp, #144]	@ 0x90
 80054d0:	f7ff ff06 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80054d4:	f604 0348 	addw	r3, r4, #2120	@ 0x848
 80054d8:	4618      	mov	r0, r3
 80054da:	9325      	str	r3, [sp, #148]	@ 0x94
 80054dc:	f7ff ff00 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80054e0:	f604 0388 	addw	r3, r4, #2184	@ 0x888
 80054e4:	4618      	mov	r0, r3
 80054e6:	9326      	str	r3, [sp, #152]	@ 0x98
 80054e8:	f7ff fefa 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80054ec:	f604 03c8 	addw	r3, r4, #2248	@ 0x8c8
 80054f0:	4618      	mov	r0, r3
 80054f2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80054f4:	f7ff fef4 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80054f8:	f604 1308 	addw	r3, r4, #2312	@ 0x908
 80054fc:	4618      	mov	r0, r3
 80054fe:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005500:	f7ff feee 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005504:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 8005508:	4618      	mov	r0, r3
 800550a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800550c:	f7ff fee8 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005510:	f604 1388 	addw	r3, r4, #2440	@ 0x988
 8005514:	4618      	mov	r0, r3
 8005516:	932a      	str	r3, [sp, #168]	@ 0xa8
 8005518:	f7ff fee2 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 800551c:	f604 13c8 	addw	r3, r4, #2504	@ 0x9c8
 8005520:	4618      	mov	r0, r3
 8005522:	932b      	str	r3, [sp, #172]	@ 0xac
 8005524:	f7ff fedc 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005528:	f604 2308 	addw	r3, r4, #2568	@ 0xa08
 800552c:	4618      	mov	r0, r3
 800552e:	932c      	str	r3, [sp, #176]	@ 0xb0
 8005530:	f7ff fed6 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005534:	f604 2348 	addw	r3, r4, #2632	@ 0xa48
 8005538:	4618      	mov	r0, r3
 800553a:	932d      	str	r3, [sp, #180]	@ 0xb4
 800553c:	f7ff fed0 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005540:	f604 2388 	addw	r3, r4, #2696	@ 0xa88
 8005544:	4618      	mov	r0, r3
 8005546:	932e      	str	r3, [sp, #184]	@ 0xb8
 8005548:	f7ff feca 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 800554c:	f604 23c8 	addw	r3, r4, #2760	@ 0xac8
 8005550:	4618      	mov	r0, r3
 8005552:	932f      	str	r3, [sp, #188]	@ 0xbc
 8005554:	f7ff fec4 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005558:	f604 3308 	addw	r3, r4, #2824	@ 0xb08
 800555c:	4618      	mov	r0, r3
 800555e:	9330      	str	r3, [sp, #192]	@ 0xc0
 8005560:	f7ff febe 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005564:	f604 3348 	addw	r3, r4, #2888	@ 0xb48
 8005568:	4618      	mov	r0, r3
 800556a:	9331      	str	r3, [sp, #196]	@ 0xc4
 800556c:	f7ff feb8 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005570:	f604 3388 	addw	r3, r4, #2952	@ 0xb88
 8005574:	4618      	mov	r0, r3
 8005576:	9332      	str	r3, [sp, #200]	@ 0xc8
 8005578:	f7ff feb2 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 800557c:	f604 33c8 	addw	r3, r4, #3016	@ 0xbc8
 8005580:	4618      	mov	r0, r3
 8005582:	9333      	str	r3, [sp, #204]	@ 0xcc
 8005584:	f7ff feac 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005588:	f604 4308 	addw	r3, r4, #3080	@ 0xc08
 800558c:	4618      	mov	r0, r3
 800558e:	9334      	str	r3, [sp, #208]	@ 0xd0
 8005590:	f7ff fea6 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005594:	f604 4348 	addw	r3, r4, #3144	@ 0xc48
 8005598:	4618      	mov	r0, r3
 800559a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800559c:	f7ff fea0 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80055a0:	f604 4388 	addw	r3, r4, #3208	@ 0xc88
 80055a4:	4618      	mov	r0, r3
 80055a6:	9336      	str	r3, [sp, #216]	@ 0xd8
 80055a8:	f7ff fe9a 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80055ac:	f604 43c8 	addw	r3, r4, #3272	@ 0xcc8
 80055b0:	4618      	mov	r0, r3
 80055b2:	9337      	str	r3, [sp, #220]	@ 0xdc
 80055b4:	f7ff fe94 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80055b8:	f604 5308 	addw	r3, r4, #3336	@ 0xd08
 80055bc:	4618      	mov	r0, r3
 80055be:	9338      	str	r3, [sp, #224]	@ 0xe0
 80055c0:	f7ff fe8e 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80055c4:	f604 5348 	addw	r3, r4, #3400	@ 0xd48
 80055c8:	4618      	mov	r0, r3
 80055ca:	9339      	str	r3, [sp, #228]	@ 0xe4
 80055cc:	f7ff fe88 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80055d0:	f604 5388 	addw	r3, r4, #3464	@ 0xd88
 80055d4:	4618      	mov	r0, r3
 80055d6:	933a      	str	r3, [sp, #232]	@ 0xe8
 80055d8:	f7ff fe82 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80055dc:	f604 53c8 	addw	r3, r4, #3528	@ 0xdc8
 80055e0:	4618      	mov	r0, r3
 80055e2:	933b      	str	r3, [sp, #236]	@ 0xec
 80055e4:	f7ff fe7c 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80055e8:	f604 6308 	addw	r3, r4, #3592	@ 0xe08
 80055ec:	4618      	mov	r0, r3
 80055ee:	933c      	str	r3, [sp, #240]	@ 0xf0
 80055f0:	f7ff fe76 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80055f4:	f604 6348 	addw	r3, r4, #3656	@ 0xe48
 80055f8:	4618      	mov	r0, r3
 80055fa:	933d      	str	r3, [sp, #244]	@ 0xf4
 80055fc:	f7ff fe70 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005600:	f604 6388 	addw	r3, r4, #3720	@ 0xe88
 8005604:	4618      	mov	r0, r3
 8005606:	933e      	str	r3, [sp, #248]	@ 0xf8
 8005608:	f7ff fe6a 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 800560c:	f604 63c8 	addw	r3, r4, #3784	@ 0xec8
 8005610:	4618      	mov	r0, r3
 8005612:	933f      	str	r3, [sp, #252]	@ 0xfc
 8005614:	f7ff fe64 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005618:	f604 7308 	addw	r3, r4, #3848	@ 0xf08
 800561c:	4618      	mov	r0, r3
 800561e:	9340      	str	r3, [sp, #256]	@ 0x100
 8005620:	f7ff fe5e 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005624:	f604 7348 	addw	r3, r4, #3912	@ 0xf48
 8005628:	4618      	mov	r0, r3
 800562a:	9341      	str	r3, [sp, #260]	@ 0x104
 800562c:	f7ff fe58 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005630:	f604 7388 	addw	r3, r4, #3976	@ 0xf88
 8005634:	4618      	mov	r0, r3
 8005636:	9342      	str	r3, [sp, #264]	@ 0x108
 8005638:	f7ff fe52 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 800563c:	f604 73c8 	addw	r3, r4, #4040	@ 0xfc8
 8005640:	4618      	mov	r0, r3
 8005642:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005644:	f7ff fe4c 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005648:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800564c:	3308      	adds	r3, #8
 800564e:	4618      	mov	r0, r3
 8005650:	9304      	str	r3, [sp, #16]
 8005652:	f7ff fe45 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005656:	f504 5382 	add.w	r3, r4, #4160	@ 0x1040
 800565a:	3308      	adds	r3, #8
 800565c:	4618      	mov	r0, r3
 800565e:	9305      	str	r3, [sp, #20]
 8005660:	f7ff fe3e 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005664:	f504 5384 	add.w	r3, r4, #4224	@ 0x1080
 8005668:	3308      	adds	r3, #8
 800566a:	4618      	mov	r0, r3
 800566c:	9306      	str	r3, [sp, #24]
 800566e:	f7ff fe37 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005672:	f504 5386 	add.w	r3, r4, #4288	@ 0x10c0
 8005676:	3308      	adds	r3, #8
 8005678:	4618      	mov	r0, r3
 800567a:	9307      	str	r3, [sp, #28]
 800567c:	f7ff fe30 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 8005680:	f504 5388 	add.w	r3, r4, #4352	@ 0x1100
 8005684:	3308      	adds	r3, #8
 8005686:	4618      	mov	r0, r3
 8005688:	e008      	b.n	800569c <_ZN15Screen2ViewBaseC1Ev+0x38c>
 800568a:	bf00      	nop
 800568c:	080293c0 	.word	0x080293c0
 8005690:	0802a1a4 	.word	0x0802a1a4
 8005694:	0802935c 	.word	0x0802935c
 8005698:	08029374 	.word	0x08029374
 800569c:	9308      	str	r3, [sp, #32]
 800569e:	f7ff fe1f 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80056a2:	f504 538a 	add.w	r3, r4, #4416	@ 0x1140
 80056a6:	3308      	adds	r3, #8
 80056a8:	4618      	mov	r0, r3
 80056aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ac:	f7ff fe18 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80056b0:	f504 538c 	add.w	r3, r4, #4480	@ 0x1180
 80056b4:	3308      	adds	r3, #8
 80056b6:	4618      	mov	r0, r3
 80056b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80056ba:	f7ff fe11 	bl	80052e0 <_ZN8touchgfx11RadioButtonC1Ev>
 80056be:	f504 538e 	add.w	r3, r4, #4544	@ 0x11c0
 80056c2:	4659      	mov	r1, fp
 80056c4:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80056c8:	3308      	adds	r3, #8
 80056ca:	4618      	mov	r0, r3
 80056cc:	9344      	str	r3, [sp, #272]	@ 0x110
 80056ce:	f7ff f825 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80056d2:	f504 538f 	add.w	r3, r4, #4576	@ 0x11e0
 80056d6:	4659      	mov	r1, fp
 80056d8:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80056dc:	3314      	adds	r3, #20
 80056de:	4618      	mov	r0, r3
 80056e0:	9345      	str	r3, [sp, #276]	@ 0x114
 80056e2:	f7ff f81b 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80056e6:	f504 5391 	add.w	r3, r4, #4640	@ 0x1220
 80056ea:	4618      	mov	r0, r3
 80056ec:	9347      	str	r3, [sp, #284]	@ 0x11c
 80056ee:	f00e ff3f 	bl	8014570 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 80056f2:	f504 5393 	add.w	r3, r4, #4704	@ 0x1260
 80056f6:	3308      	adds	r3, #8
 80056f8:	4618      	mov	r0, r3
 80056fa:	9346      	str	r3, [sp, #280]	@ 0x118
 80056fc:	f7ff fdda 	bl	80052b4 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005700:	4bd1      	ldr	r3, [pc, #836]	@ (8005a48 <_ZN15Screen2ViewBaseC1Ev+0x738>)
 8005702:	f8a6 9296 	strh.w	r9, [r6, #662]	@ 0x296
 8005706:	f8c6 3268 	str.w	r3, [r6, #616]	@ 0x268
 800570a:	f504 5394 	add.w	r3, r4, #4736	@ 0x1280
 800570e:	f8a6 9298 	strh.w	r9, [r6, #664]	@ 0x298
 8005712:	331c      	adds	r3, #28
 8005714:	f886 929a 	strb.w	r9, [r6, #666]	@ 0x29a
 8005718:	f04f 0905 	mov.w	r9, #5
 800571c:	4618      	mov	r0, r3
 800571e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005720:	f00e ff26 	bl	8014570 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005724:	4bc9      	ldr	r3, [pc, #804]	@ (8005a4c <_ZN15Screen2ViewBaseC1Ev+0x73c>)
 8005726:	4aca      	ldr	r2, [pc, #808]	@ (8005a50 <_ZN15Screen2ViewBaseC1Ev+0x740>)
        setXY(x, y);
 8005728:	4629      	mov	r1, r5
 800572a:	4638      	mov	r0, r7
 800572c:	e9c6 34b9 	strd	r3, r4, [r6, #740]	@ 0x2e4
 8005730:	e9c6 34bd 	strd	r3, r4, [r6, #756]	@ 0x2f4
 8005734:	4bc7      	ldr	r3, [pc, #796]	@ (8005a54 <_ZN15Screen2ViewBaseC1Ev+0x744>)
 8005736:	e9c6 25bb 	strd	r2, r5, [r6, #748]	@ 0x2ec
 800573a:	e9c6 35bf 	strd	r3, r5, [r6, #764]	@ 0x2fc
 800573e:	462a      	mov	r2, r5
 8005740:	1d26      	adds	r6, r4, #4
 8005742:	f7fe ffa4 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8005746:	4638      	mov	r0, r7
 8005748:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800574c:	f7fd ff2a 	bl	80035a4 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8005750:	4638      	mov	r0, r7
 8005752:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8005756:	f7fd ff27 	bl	80035a8 <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 800575a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800575e:	4639      	mov	r1, r7
 8005760:	4630      	mov	r0, r6
 8005762:	66a3      	str	r3, [r4, #104]	@ 0x68
 8005764:	2707      	movs	r7, #7
 8005766:	f00b fabf 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-99, -42);
 800576a:	f06f 0229 	mvn.w	r2, #41	@ 0x29
 800576e:	4640      	mov	r0, r8
 8005770:	f06f 0162 	mvn.w	r1, #98	@ 0x62
 8005774:	f7fe ff8b 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8005778:	2308      	movs	r3, #8
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 800577a:	4659      	mov	r1, fp
 800577c:	4640      	mov	r0, r8
 800577e:	f8ad 312c 	strh.w	r3, [sp, #300]	@ 0x12c
 8005782:	f00e fdb4 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005786:	4641      	mov	r1, r8
 8005788:	4630      	mov	r0, r6
 800578a:	f00b faad 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
 800578e:	f504 5397 	add.w	r3, r4, #4832	@ 0x12e0
 8005792:	f04f 0806 	mov.w	r8, #6
    RadioButton_3_16.setXY(750, 308);
 8005796:	9803      	ldr	r0, [sp, #12]
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
 8005798:	3314      	adds	r3, #20
    RadioButton_3_16.setXY(750, 308);
 800579a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800579e:	f240 21ee 	movw	r1, #750	@ 0x2ee
        radioButtonSelectedCallback = &callback;
 80057a2:	f8c4 31c0 	str.w	r3, [r4, #448]	@ 0x1c0
 80057a6:	f7fe ff72 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80057aa:	ab4a      	add	r3, sp, #296	@ 0x128
 80057ac:	aa49      	add	r2, sp, #292	@ 0x124
 80057ae:	a948      	add	r1, sp, #288	@ 0x120
 80057b0:	9803      	ldr	r0, [sp, #12]
 80057b2:	f8cd b000 	str.w	fp, [sp]
 80057b6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80057ba:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80057be:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80057c2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80057c6:	f00e ff02 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_16.setSelected(false);
 80057ca:	4629      	mov	r1, r5
 80057cc:	9803      	ldr	r0, [sp, #12]
 80057ce:	f00e ff9f 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
        deselectionEnabled = state;
 80057d2:	f884 5200 	strb.w	r5, [r4, #512]	@ 0x200
    radioButtonGroup1.add(RadioButton_3_16);
 80057d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057da:	f7ff fcfb 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80057de:	9903      	ldr	r1, [sp, #12]
 80057e0:	4630      	mov	r0, r6
 80057e2:	f00b fa81 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_15.setXY(700, 308);
 80057e6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80057e8:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80057ec:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 80057f0:	f7fe ff4d 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80057f4:	ab4a      	add	r3, sp, #296	@ 0x128
 80057f6:	aa49      	add	r2, sp, #292	@ 0x124
 80057f8:	a948      	add	r1, sp, #288	@ 0x120
 80057fa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80057fc:	f8cd b000 	str.w	fp, [sp]
 8005800:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005804:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005808:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800580c:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005810:	f00e fedd 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_15.setSelected(false);
 8005814:	4629      	mov	r1, r5
 8005816:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005818:	f00e ff7a 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_15);
 800581c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800581e:	9802      	ldr	r0, [sp, #8]
 8005820:	f884 5240 	strb.w	r5, [r4, #576]	@ 0x240
 8005824:	f7ff fcd6 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005828:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800582a:	4630      	mov	r0, r6
 800582c:	f00b fa5c 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_14.setXY(650, 308);
 8005830:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005832:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005836:	f240 218a 	movw	r1, #650	@ 0x28a
 800583a:	f7fe ff28 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800583e:	ab4a      	add	r3, sp, #296	@ 0x128
 8005840:	aa49      	add	r2, sp, #292	@ 0x124
 8005842:	a948      	add	r1, sp, #288	@ 0x120
 8005844:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005846:	f8cd b000 	str.w	fp, [sp]
 800584a:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800584e:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005852:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005856:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800585a:	f00e feb8 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_14.setSelected(false);
 800585e:	4629      	mov	r1, r5
 8005860:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005862:	f00e ff55 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_14);
 8005866:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005868:	9802      	ldr	r0, [sp, #8]
 800586a:	f884 5280 	strb.w	r5, [r4, #640]	@ 0x280
 800586e:	f7ff fcb1 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005872:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005874:	4630      	mov	r0, r6
 8005876:	f00b fa37 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_13.setXY(600, 308);
 800587a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800587c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005880:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8005884:	f7fe ff03 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005888:	ab4a      	add	r3, sp, #296	@ 0x128
 800588a:	aa49      	add	r2, sp, #292	@ 0x124
 800588c:	a948      	add	r1, sp, #288	@ 0x120
 800588e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8005890:	f8cd b000 	str.w	fp, [sp]
 8005894:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005898:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800589c:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80058a0:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80058a4:	f00e fe93 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_13.setSelected(false);
 80058a8:	4629      	mov	r1, r5
 80058aa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80058ac:	f00e ff30 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_13);
 80058b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80058b2:	9802      	ldr	r0, [sp, #8]
 80058b4:	f884 52c0 	strb.w	r5, [r4, #704]	@ 0x2c0
 80058b8:	f7ff fc8c 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80058bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80058be:	4630      	mov	r0, r6
 80058c0:	f00b fa12 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_12.setXY(750, 258);
 80058c4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80058c6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80058ca:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80058ce:	f7fe fede 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80058d2:	ab4a      	add	r3, sp, #296	@ 0x128
 80058d4:	aa49      	add	r2, sp, #292	@ 0x124
 80058d6:	a948      	add	r1, sp, #288	@ 0x120
 80058d8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80058da:	f8cd b000 	str.w	fp, [sp]
 80058de:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80058e2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80058e6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80058ea:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80058ee:	f00e fe6e 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_12.setSelected(false);
 80058f2:	4629      	mov	r1, r5
 80058f4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80058f6:	f00e ff0b 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_12);
 80058fa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80058fc:	9802      	ldr	r0, [sp, #8]
 80058fe:	f884 5300 	strb.w	r5, [r4, #768]	@ 0x300
 8005902:	f7ff fc67 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005906:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005908:	4630      	mov	r0, r6
 800590a:	f00b f9ed 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_11.setXY(700, 258);
 800590e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005910:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005914:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8005918:	f7fe feb9 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800591c:	ab4a      	add	r3, sp, #296	@ 0x128
 800591e:	aa49      	add	r2, sp, #292	@ 0x124
 8005920:	a948      	add	r1, sp, #288	@ 0x120
 8005922:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005924:	f8cd b000 	str.w	fp, [sp]
 8005928:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800592c:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005930:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005934:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005938:	f00e fe49 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_11.setSelected(false);
 800593c:	4629      	mov	r1, r5
 800593e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005940:	f00e fee6 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_11);
 8005944:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005946:	9802      	ldr	r0, [sp, #8]
 8005948:	f884 5340 	strb.w	r5, [r4, #832]	@ 0x340
 800594c:	f7ff fc42 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005950:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005952:	4630      	mov	r0, r6
 8005954:	f00b f9c8 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_10.setXY(650, 258);
 8005958:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800595a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800595e:	f240 218a 	movw	r1, #650	@ 0x28a
 8005962:	f7fe fe94 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005966:	ab4a      	add	r3, sp, #296	@ 0x128
 8005968:	aa49      	add	r2, sp, #292	@ 0x124
 800596a:	a948      	add	r1, sp, #288	@ 0x120
 800596c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800596e:	f8cd b000 	str.w	fp, [sp]
 8005972:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005976:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800597a:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800597e:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005982:	f00e fe24 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_10.setSelected(false);
 8005986:	4629      	mov	r1, r5
 8005988:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800598a:	f00e fec1 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_10);
 800598e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005990:	9802      	ldr	r0, [sp, #8]
 8005992:	f884 5380 	strb.w	r5, [r4, #896]	@ 0x380
 8005996:	f7ff fc1d 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800599a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800599c:	4630      	mov	r0, r6
 800599e:	f00b f9a3 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_9.setXY(600, 258);
 80059a2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80059a4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80059a8:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80059ac:	f7fe fe6f 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80059b0:	ab4a      	add	r3, sp, #296	@ 0x128
 80059b2:	aa49      	add	r2, sp, #292	@ 0x124
 80059b4:	a948      	add	r1, sp, #288	@ 0x120
 80059b6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80059b8:	f8cd b000 	str.w	fp, [sp]
 80059bc:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80059c0:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80059c4:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80059c8:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80059cc:	f00e fdff 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_9.setSelected(false);
 80059d0:	4629      	mov	r1, r5
 80059d2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80059d4:	f00e fe9c 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_9);
 80059d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80059da:	9802      	ldr	r0, [sp, #8]
 80059dc:	f884 53c0 	strb.w	r5, [r4, #960]	@ 0x3c0
 80059e0:	f7ff fbf8 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80059e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80059e6:	4630      	mov	r0, r6
 80059e8:	f00b f97e 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_8.setXY(750, 208);
 80059ec:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80059ee:	22d0      	movs	r2, #208	@ 0xd0
 80059f0:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80059f4:	f7fe fe4b 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80059f8:	ab4a      	add	r3, sp, #296	@ 0x128
 80059fa:	aa49      	add	r2, sp, #292	@ 0x124
 80059fc:	a948      	add	r1, sp, #288	@ 0x120
 80059fe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8005a00:	f8cd b000 	str.w	fp, [sp]
 8005a04:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005a08:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005a0c:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005a10:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005a14:	f00e fddb 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_8.setSelected(false);
 8005a18:	4629      	mov	r1, r5
 8005a1a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8005a1c:	f00e fe78 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_8);
 8005a20:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005a22:	9802      	ldr	r0, [sp, #8]
 8005a24:	f884 5400 	strb.w	r5, [r4, #1024]	@ 0x400
 8005a28:	f7ff fbd4 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005a2c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f00b f95a 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_7.setXY(700, 208);
 8005a34:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005a36:	22d0      	movs	r2, #208	@ 0xd0
 8005a38:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8005a3c:	f7fe fe27 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005a40:	ab4a      	add	r3, sp, #296	@ 0x128
 8005a42:	aa49      	add	r2, sp, #292	@ 0x124
 8005a44:	a948      	add	r1, sp, #288	@ 0x120
 8005a46:	e007      	b.n	8005a58 <_ZN15Screen2ViewBaseC1Ev+0x748>
 8005a48:	0802a20c 	.word	0x0802a20c
 8005a4c:	080293a8 	.word	0x080293a8
 8005a50:	08005211 	.word	0x08005211
 8005a54:	08004cbb 	.word	0x08004cbb
 8005a58:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005a5a:	f8cd b000 	str.w	fp, [sp]
 8005a5e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005a62:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005a66:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005a6a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005a6e:	f00e fdae 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_7.setSelected(false);
 8005a72:	4629      	mov	r1, r5
 8005a74:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005a76:	f00e fe4b 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_7);
 8005a7a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8005a7c:	9802      	ldr	r0, [sp, #8]
 8005a7e:	f884 5440 	strb.w	r5, [r4, #1088]	@ 0x440
 8005a82:	f7ff fba7 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005a86:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f00b f92d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_6.setXY(650, 208);
 8005a8e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005a90:	22d0      	movs	r2, #208	@ 0xd0
 8005a92:	f240 218a 	movw	r1, #650	@ 0x28a
 8005a96:	f7fe fdfa 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005a9a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005a9c:	aa49      	add	r2, sp, #292	@ 0x124
 8005a9e:	a948      	add	r1, sp, #288	@ 0x120
 8005aa0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005aa2:	f8cd b000 	str.w	fp, [sp]
 8005aa6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005aaa:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005aae:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005ab2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005ab6:	f00e fd8a 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_6.setSelected(false);
 8005aba:	4629      	mov	r1, r5
 8005abc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005abe:	f00e fe27 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_6);
 8005ac2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8005ac4:	9802      	ldr	r0, [sp, #8]
 8005ac6:	f884 5480 	strb.w	r5, [r4, #1152]	@ 0x480
 8005aca:	f7ff fb83 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005ace:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f00b f909 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_5.setXY(600, 208);
 8005ad6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005ad8:	22d0      	movs	r2, #208	@ 0xd0
 8005ada:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8005ade:	f7fe fdd6 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005ae2:	ab4a      	add	r3, sp, #296	@ 0x128
 8005ae4:	aa49      	add	r2, sp, #292	@ 0x124
 8005ae6:	a948      	add	r1, sp, #288	@ 0x120
 8005ae8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005aea:	f8cd b000 	str.w	fp, [sp]
 8005aee:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005af2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005af6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005afa:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005afe:	f00e fd66 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_5.setSelected(false);
 8005b02:	4629      	mov	r1, r5
 8005b04:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005b06:	f00e fe03 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_5);
 8005b0a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8005b0c:	9802      	ldr	r0, [sp, #8]
 8005b0e:	f884 54c0 	strb.w	r5, [r4, #1216]	@ 0x4c0
 8005b12:	f7ff fb5f 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005b16:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f00b f8e5 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_4.setXY(750, 158);
 8005b1e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005b20:	229e      	movs	r2, #158	@ 0x9e
 8005b22:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8005b26:	f7fe fdb2 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005b2a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005b2c:	aa49      	add	r2, sp, #292	@ 0x124
 8005b2e:	a948      	add	r1, sp, #288	@ 0x120
 8005b30:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005b32:	f8cd b000 	str.w	fp, [sp]
 8005b36:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005b3a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005b3e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005b42:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005b46:	f00e fd42 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_4.setSelected(false);
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005b4e:	f00e fddf 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_4);
 8005b52:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005b54:	9802      	ldr	r0, [sp, #8]
 8005b56:	f884 5500 	strb.w	r5, [r4, #1280]	@ 0x500
 8005b5a:	f7ff fb3b 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005b5e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005b60:	4630      	mov	r0, r6
 8005b62:	f00b f8c1 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_3.setXY(700, 158);
 8005b66:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005b68:	229e      	movs	r2, #158	@ 0x9e
 8005b6a:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8005b6e:	f7fe fd8e 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005b72:	ab4a      	add	r3, sp, #296	@ 0x128
 8005b74:	aa49      	add	r2, sp, #292	@ 0x124
 8005b76:	a948      	add	r1, sp, #288	@ 0x120
 8005b78:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005b7a:	f8cd b000 	str.w	fp, [sp]
 8005b7e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005b82:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005b86:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005b8a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005b8e:	f00e fd1e 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_3.setSelected(false);
 8005b92:	4629      	mov	r1, r5
 8005b94:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005b96:	f00e fdbb 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_3);
 8005b9a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8005b9c:	9802      	ldr	r0, [sp, #8]
 8005b9e:	f884 5540 	strb.w	r5, [r4, #1344]	@ 0x540
 8005ba2:	f7ff fb17 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005ba6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f00b f89d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_2.setXY(650, 158);
 8005bae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005bb0:	229e      	movs	r2, #158	@ 0x9e
 8005bb2:	f240 218a 	movw	r1, #650	@ 0x28a
 8005bb6:	f7fe fd6a 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005bba:	ab4a      	add	r3, sp, #296	@ 0x128
 8005bbc:	aa49      	add	r2, sp, #292	@ 0x124
 8005bbe:	a948      	add	r1, sp, #288	@ 0x120
 8005bc0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005bc2:	f8cd b000 	str.w	fp, [sp]
 8005bc6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005bca:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005bce:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005bd2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005bd6:	f00e fcfa 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_2.setSelected(false);
 8005bda:	4629      	mov	r1, r5
 8005bdc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005bde:	f00e fd97 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_2);
 8005be2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8005be4:	9802      	ldr	r0, [sp, #8]
 8005be6:	f884 5580 	strb.w	r5, [r4, #1408]	@ 0x580
 8005bea:	f7ff faf3 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005bee:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f00b f879 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_1.setXY(600, 158);
 8005bf6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8005bf8:	229e      	movs	r2, #158	@ 0x9e
 8005bfa:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8005bfe:	f7fe fd46 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c02:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c04:	aa49      	add	r2, sp, #292	@ 0x124
 8005c06:	a948      	add	r1, sp, #288	@ 0x120
 8005c08:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8005c0a:	f8cd b000 	str.w	fp, [sp]
 8005c0e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005c12:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005c16:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005c1a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005c1e:	f00e fcd6 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_1.setSelected(false);
 8005c22:	4629      	mov	r1, r5
 8005c24:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8005c26:	f00e fd73 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_1);
 8005c2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c2c:	9802      	ldr	r0, [sp, #8]
 8005c2e:	f884 55c0 	strb.w	r5, [r4, #1472]	@ 0x5c0
 8005c32:	f7ff facf 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005c36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f00b f855 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_16.setXY(550, 308);
 8005c3e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005c40:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005c44:	f240 2126 	movw	r1, #550	@ 0x226
 8005c48:	f7fe fd21 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c4c:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c4e:	aa49      	add	r2, sp, #292	@ 0x124
 8005c50:	a948      	add	r1, sp, #288	@ 0x120
 8005c52:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005c54:	f8cd b000 	str.w	fp, [sp]
 8005c58:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005c5c:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005c60:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005c64:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005c68:	f00e fcb1 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_16.setSelected(false);
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005c70:	f00e fd4e 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_16);
 8005c74:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005c76:	9802      	ldr	r0, [sp, #8]
 8005c78:	f884 5600 	strb.w	r5, [r4, #1536]	@ 0x600
 8005c7c:	f7ff faaa 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005c80:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005c82:	4630      	mov	r0, r6
 8005c84:	f00b f830 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_15.setXY(500, 308);
 8005c88:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8005c8a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005c8e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005c92:	f7fe fcfc 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c96:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c98:	aa49      	add	r2, sp, #292	@ 0x124
 8005c9a:	a948      	add	r1, sp, #288	@ 0x120
 8005c9c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8005c9e:	f8cd b000 	str.w	fp, [sp]
 8005ca2:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005ca6:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005caa:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005cae:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005cb2:	f00e fc8c 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_15.setSelected(false);
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8005cba:	f00e fd29 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_15);
 8005cbe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005cc0:	9802      	ldr	r0, [sp, #8]
 8005cc2:	f884 5640 	strb.w	r5, [r4, #1600]	@ 0x640
 8005cc6:	f7ff fa85 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005cca:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f00b f80b 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_14.setXY(450, 308);
 8005cd2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8005cd4:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005cd8:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8005cdc:	f7fe fcd7 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005ce0:	ab4a      	add	r3, sp, #296	@ 0x128
 8005ce2:	aa49      	add	r2, sp, #292	@ 0x124
 8005ce4:	a948      	add	r1, sp, #288	@ 0x120
 8005ce6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8005ce8:	f8cd b000 	str.w	fp, [sp]
 8005cec:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005cf0:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005cf4:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005cf8:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005cfc:	f00e fc67 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_14.setSelected(false);
 8005d00:	4629      	mov	r1, r5
 8005d02:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8005d04:	f00e fd04 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_14);
 8005d08:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8005d0a:	9802      	ldr	r0, [sp, #8]
 8005d0c:	f884 5680 	strb.w	r5, [r4, #1664]	@ 0x680
 8005d10:	f7ff fa60 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005d14:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8005d16:	4630      	mov	r0, r6
 8005d18:	f00a ffe6 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_13.setXY(400, 308);
 8005d1c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005d1e:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005d22:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005d26:	f7fe fcb2 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005d2a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005d2c:	aa49      	add	r2, sp, #292	@ 0x124
 8005d2e:	a948      	add	r1, sp, #288	@ 0x120
 8005d30:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005d32:	f8cd b000 	str.w	fp, [sp]
 8005d36:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005d3a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005d3e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005d42:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005d46:	f00e fc42 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_13.setSelected(false);
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005d4e:	f00e fcdf 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_13);
 8005d52:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8005d54:	9802      	ldr	r0, [sp, #8]
 8005d56:	f884 56c0 	strb.w	r5, [r4, #1728]	@ 0x6c0
 8005d5a:	f7ff fa3b 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005d5e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8005d60:	4630      	mov	r0, r6
 8005d62:	f00a ffc1 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_12.setXY(550, 258);
 8005d66:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8005d68:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005d6c:	f240 2126 	movw	r1, #550	@ 0x226
 8005d70:	f7fe fc8d 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005d74:	ab4a      	add	r3, sp, #296	@ 0x128
 8005d76:	aa49      	add	r2, sp, #292	@ 0x124
 8005d78:	a948      	add	r1, sp, #288	@ 0x120
 8005d7a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8005d7c:	f8cd b000 	str.w	fp, [sp]
 8005d80:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005d84:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005d88:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005d8c:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005d90:	f00e fc1d 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_12.setSelected(false);
 8005d94:	4629      	mov	r1, r5
 8005d96:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8005d98:	f00e fcba 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_12);
 8005d9c:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005d9e:	9802      	ldr	r0, [sp, #8]
 8005da0:	f884 5700 	strb.w	r5, [r4, #1792]	@ 0x700
 8005da4:	f7ff fa16 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005da8:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005daa:	4630      	mov	r0, r6
 8005dac:	f00a ff9c 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_11.setXY(500, 258);
 8005db0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005db2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005db6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005dba:	f7fe fc68 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005dbe:	ab4a      	add	r3, sp, #296	@ 0x128
 8005dc0:	aa49      	add	r2, sp, #292	@ 0x124
 8005dc2:	a948      	add	r1, sp, #288	@ 0x120
 8005dc4:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005dc6:	f8cd b000 	str.w	fp, [sp]
 8005dca:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005dce:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005dd2:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005dd6:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005dda:	f00e fbf8 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_11.setSelected(false);
 8005dde:	4629      	mov	r1, r5
 8005de0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005de2:	f00e fc95 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_11);
 8005de6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005de8:	9802      	ldr	r0, [sp, #8]
 8005dea:	f884 5740 	strb.w	r5, [r4, #1856]	@ 0x740
 8005dee:	f7ff f9f1 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005df2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005df4:	4630      	mov	r0, r6
 8005df6:	f00a ff77 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_10.setXY(450, 258);
 8005dfa:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8005dfc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005e00:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8005e04:	f7fe fc43 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005e08:	ab4a      	add	r3, sp, #296	@ 0x128
 8005e0a:	aa49      	add	r2, sp, #292	@ 0x124
 8005e0c:	a948      	add	r1, sp, #288	@ 0x120
 8005e0e:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8005e10:	f8cd b000 	str.w	fp, [sp]
 8005e14:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005e18:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005e1c:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005e20:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005e24:	f00e fbd3 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_10.setSelected(false);
 8005e28:	4629      	mov	r1, r5
 8005e2a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8005e2c:	f00e fc70 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_10);
 8005e30:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8005e32:	9802      	ldr	r0, [sp, #8]
 8005e34:	f884 5780 	strb.w	r5, [r4, #1920]	@ 0x780
 8005e38:	f7ff f9cc 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005e3c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f00a ff52 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_9.setXY(400, 258);
 8005e44:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005e46:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005e4a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005e4e:	f7fe fc1e 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005e52:	ab4a      	add	r3, sp, #296	@ 0x128
 8005e54:	aa49      	add	r2, sp, #292	@ 0x124
 8005e56:	a948      	add	r1, sp, #288	@ 0x120
 8005e58:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005e5a:	f8cd b000 	str.w	fp, [sp]
 8005e5e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005e62:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005e66:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005e6a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005e6e:	f00e fbae 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_9.setSelected(false);
 8005e72:	4629      	mov	r1, r5
 8005e74:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005e76:	f00e fc4b 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_9);
 8005e7a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8005e7c:	9802      	ldr	r0, [sp, #8]
 8005e7e:	f884 57c0 	strb.w	r5, [r4, #1984]	@ 0x7c0
 8005e82:	f7ff f9a7 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005e86:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f00a ff2d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_8.setXY(550, 208);
 8005e8e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005e90:	22d0      	movs	r2, #208	@ 0xd0
 8005e92:	f240 2126 	movw	r1, #550	@ 0x226
 8005e96:	f7fe fbfa 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005e9a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005e9c:	aa49      	add	r2, sp, #292	@ 0x124
 8005e9e:	a948      	add	r1, sp, #288	@ 0x120
 8005ea0:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005ea2:	f8cd b000 	str.w	fp, [sp]
 8005ea6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005eaa:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005eae:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005eb2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005eb6:	f00e fb8a 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_8.setSelected(false);
 8005eba:	4629      	mov	r1, r5
 8005ebc:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005ebe:	f00e fc27 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_8);
 8005ec2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005ec4:	9802      	ldr	r0, [sp, #8]
 8005ec6:	f884 5800 	strb.w	r5, [r4, #2048]	@ 0x800
 8005eca:	f7ff f983 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005ece:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f00a ff09 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_7.setXY(500, 208);
 8005ed6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005ed8:	22d0      	movs	r2, #208	@ 0xd0
 8005eda:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005ede:	f7fe fbd6 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005ee2:	ab4a      	add	r3, sp, #296	@ 0x128
 8005ee4:	aa49      	add	r2, sp, #292	@ 0x124
 8005ee6:	a948      	add	r1, sp, #288	@ 0x120
 8005ee8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005eea:	f8cd b000 	str.w	fp, [sp]
 8005eee:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005ef2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005ef6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005efa:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005efe:	f00e fb66 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_7.setSelected(false);
 8005f02:	4629      	mov	r1, r5
 8005f04:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005f06:	f00e fc03 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_7);
 8005f0a:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8005f0c:	9802      	ldr	r0, [sp, #8]
 8005f0e:	f884 5840 	strb.w	r5, [r4, #2112]	@ 0x840
 8005f12:	f7ff f95f 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005f16:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f00a fee5 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_6.setXY(450, 208);
 8005f1e:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8005f20:	22d0      	movs	r2, #208	@ 0xd0
 8005f22:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8005f26:	f7fe fbb2 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005f2a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005f2c:	aa49      	add	r2, sp, #292	@ 0x124
 8005f2e:	a948      	add	r1, sp, #288	@ 0x120
 8005f30:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8005f32:	f8cd b000 	str.w	fp, [sp]
 8005f36:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005f3a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005f3e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005f42:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005f46:	f00e fb42 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_6.setSelected(false);
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8005f4e:	f00e fbdf 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_6);
 8005f52:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8005f54:	9802      	ldr	r0, [sp, #8]
 8005f56:	f884 5880 	strb.w	r5, [r4, #2176]	@ 0x880
 8005f5a:	f7ff f93b 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005f5e:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8005f60:	4630      	mov	r0, r6
 8005f62:	f00a fec1 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_5.setXY(400, 208);
 8005f66:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005f68:	22d0      	movs	r2, #208	@ 0xd0
 8005f6a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8005f6e:	f7fe fb8e 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005f72:	ab4a      	add	r3, sp, #296	@ 0x128
 8005f74:	aa49      	add	r2, sp, #292	@ 0x124
 8005f76:	a948      	add	r1, sp, #288	@ 0x120
 8005f78:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005f7a:	f8cd b000 	str.w	fp, [sp]
 8005f7e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005f82:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005f86:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005f8a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005f8e:	f00e fb1e 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_5.setSelected(false);
 8005f92:	4629      	mov	r1, r5
 8005f94:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005f96:	f00e fbbb 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_5);
 8005f9a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8005f9c:	9802      	ldr	r0, [sp, #8]
 8005f9e:	f884 58c0 	strb.w	r5, [r4, #2240]	@ 0x8c0
 8005fa2:	f7ff f917 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005fa6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f00a fe9d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_4.setXY(550, 158);
 8005fae:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8005fb0:	229e      	movs	r2, #158	@ 0x9e
 8005fb2:	f240 2126 	movw	r1, #550	@ 0x226
 8005fb6:	f7fe fb6a 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005fba:	ab4a      	add	r3, sp, #296	@ 0x128
 8005fbc:	aa49      	add	r2, sp, #292	@ 0x124
 8005fbe:	a948      	add	r1, sp, #288	@ 0x120
 8005fc0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8005fc2:	f8cd b000 	str.w	fp, [sp]
 8005fc6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8005fca:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8005fce:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8005fd2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8005fd6:	f00e fafa 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_4.setSelected(false);
 8005fda:	4629      	mov	r1, r5
 8005fdc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8005fde:	f00e fb97 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_4);
 8005fe2:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8005fe4:	9802      	ldr	r0, [sp, #8]
 8005fe6:	f884 5900 	strb.w	r5, [r4, #2304]	@ 0x900
 8005fea:	f7ff f8f3 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005fee:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f00a fe79 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_3.setXY(500, 158);
 8005ff6:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8005ff8:	229e      	movs	r2, #158	@ 0x9e
 8005ffa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005ffe:	f7fe fb46 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006002:	ab4a      	add	r3, sp, #296	@ 0x128
 8006004:	aa49      	add	r2, sp, #292	@ 0x124
 8006006:	a948      	add	r1, sp, #288	@ 0x120
 8006008:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 800600a:	f8cd b000 	str.w	fp, [sp]
 800600e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006012:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8006016:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800601a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800601e:	f00e fad6 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_3.setSelected(false);
 8006022:	4629      	mov	r1, r5
 8006024:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8006026:	f00e fb73 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_3);
 800602a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800602c:	9802      	ldr	r0, [sp, #8]
 800602e:	f884 5940 	strb.w	r5, [r4, #2368]	@ 0x940
 8006032:	f7ff f8cf 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006036:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8006038:	4630      	mov	r0, r6
 800603a:	f00a fe55 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_2.setXY(450, 158);
 800603e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8006040:	229e      	movs	r2, #158	@ 0x9e
 8006042:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8006046:	f7fe fb22 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800604a:	ab4a      	add	r3, sp, #296	@ 0x128
 800604c:	aa49      	add	r2, sp, #292	@ 0x124
 800604e:	a948      	add	r1, sp, #288	@ 0x120
 8006050:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8006052:	f8cd b000 	str.w	fp, [sp]
 8006056:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800605a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800605e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8006062:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8006066:	f00e fab2 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_2.setSelected(false);
 800606a:	4629      	mov	r1, r5
 800606c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800606e:	f00e fb4f 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_2);
 8006072:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8006074:	9802      	ldr	r0, [sp, #8]
 8006076:	f884 5980 	strb.w	r5, [r4, #2432]	@ 0x980
 800607a:	f7ff f8ab 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800607e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8006080:	4630      	mov	r0, r6
 8006082:	f00a fe31 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_1.setXY(400, 158);
 8006086:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8006088:	229e      	movs	r2, #158	@ 0x9e
 800608a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800608e:	f7fe fafe 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006092:	ab4a      	add	r3, sp, #296	@ 0x128
 8006094:	aa49      	add	r2, sp, #292	@ 0x124
 8006096:	a948      	add	r1, sp, #288	@ 0x120
 8006098:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 800609a:	f8cd b000 	str.w	fp, [sp]
 800609e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80060a2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80060a6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80060aa:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80060ae:	f00e fa8e 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_1.setSelected(false);
 80060b2:	4629      	mov	r1, r5
 80060b4:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 80060b6:	f00e fb2b 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_1);
 80060ba:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80060bc:	9802      	ldr	r0, [sp, #8]
 80060be:	f884 59c0 	strb.w	r5, [r4, #2496]	@ 0x9c0
 80060c2:	f7ff f887 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80060c6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80060c8:	4630      	mov	r0, r6
 80060ca:	f00a fe0d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_16.setXY(350, 308);
 80060ce:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80060d0:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80060d4:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80060d8:	f7fe fad9 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80060dc:	ab4a      	add	r3, sp, #296	@ 0x128
 80060de:	aa49      	add	r2, sp, #292	@ 0x124
 80060e0:	a948      	add	r1, sp, #288	@ 0x120
 80060e2:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80060e4:	f8cd b000 	str.w	fp, [sp]
 80060e8:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80060ec:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80060f0:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80060f4:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80060f8:	f00e fa69 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_16.setSelected(false);
 80060fc:	4629      	mov	r1, r5
 80060fe:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8006100:	f00e fb06 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_16);
 8006104:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8006106:	9802      	ldr	r0, [sp, #8]
 8006108:	f884 5a00 	strb.w	r5, [r4, #2560]	@ 0xa00
 800610c:	f7ff f862 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006110:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8006112:	4630      	mov	r0, r6
 8006114:	f00a fde8 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_15.setXY(300, 308);
 8006118:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800611a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800611e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006122:	f7fe fab4 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006126:	ab4a      	add	r3, sp, #296	@ 0x128
 8006128:	aa49      	add	r2, sp, #292	@ 0x124
 800612a:	a948      	add	r1, sp, #288	@ 0x120
 800612c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800612e:	f8cd b000 	str.w	fp, [sp]
 8006132:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006136:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800613a:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800613e:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8006142:	f00e fa44 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_15.setSelected(false);
 8006146:	4629      	mov	r1, r5
 8006148:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800614a:	f00e fae1 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_15);
 800614e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8006150:	9802      	ldr	r0, [sp, #8]
 8006152:	f884 5a40 	strb.w	r5, [r4, #2624]	@ 0xa40
 8006156:	f7ff f83d 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800615a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800615c:	4630      	mov	r0, r6
 800615e:	f00a fdc3 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_14.setXY(250, 308);
 8006162:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8006164:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8006168:	21fa      	movs	r1, #250	@ 0xfa
 800616a:	f7fe fa90 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800616e:	ab4a      	add	r3, sp, #296	@ 0x128
 8006170:	aa49      	add	r2, sp, #292	@ 0x124
 8006172:	a948      	add	r1, sp, #288	@ 0x120
 8006174:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8006176:	f8cd b000 	str.w	fp, [sp]
 800617a:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800617e:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8006182:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8006186:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800618a:	f00e fa20 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_14.setSelected(false);
 800618e:	4629      	mov	r1, r5
 8006190:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8006192:	f00e fabd 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_14);
 8006196:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8006198:	9802      	ldr	r0, [sp, #8]
 800619a:	f884 5a80 	strb.w	r5, [r4, #2688]	@ 0xa80
 800619e:	f7ff f819 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80061a2:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80061a4:	4630      	mov	r0, r6
 80061a6:	f00a fd9f 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_13.setXY(200, 308);
 80061aa:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80061ac:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80061b0:	21c8      	movs	r1, #200	@ 0xc8
 80061b2:	f7fe fa6c 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80061b6:	ab4a      	add	r3, sp, #296	@ 0x128
 80061b8:	aa49      	add	r2, sp, #292	@ 0x124
 80061ba:	a948      	add	r1, sp, #288	@ 0x120
 80061bc:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80061be:	f8cd b000 	str.w	fp, [sp]
 80061c2:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80061c6:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80061ca:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80061ce:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80061d2:	f00e f9fc 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_13.setSelected(false);
 80061d6:	4629      	mov	r1, r5
 80061d8:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80061da:	f00e fa99 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_13);
 80061de:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80061e0:	9802      	ldr	r0, [sp, #8]
 80061e2:	f884 5ac0 	strb.w	r5, [r4, #2752]	@ 0xac0
 80061e6:	f7fe fff5 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80061ea:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80061ec:	4630      	mov	r0, r6
 80061ee:	f00a fd7b 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_12.setXY(350, 258);
 80061f2:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 80061f4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80061f8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80061fc:	f7fe fa47 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006200:	ab4a      	add	r3, sp, #296	@ 0x128
 8006202:	aa49      	add	r2, sp, #292	@ 0x124
 8006204:	a948      	add	r1, sp, #288	@ 0x120
 8006206:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8006208:	f8cd b000 	str.w	fp, [sp]
 800620c:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006210:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8006214:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8006218:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800621c:	f00e f9d7 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_12.setSelected(false);
 8006220:	4629      	mov	r1, r5
 8006222:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8006224:	f00e fa74 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_12);
 8006228:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800622a:	9802      	ldr	r0, [sp, #8]
 800622c:	f884 5b00 	strb.w	r5, [r4, #2816]	@ 0xb00
 8006230:	f7fe ffd0 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006234:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8006236:	4630      	mov	r0, r6
 8006238:	f00a fd56 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_11.setXY(300, 258);
 800623c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 800623e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006242:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006246:	f7fe fa22 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800624a:	ab4a      	add	r3, sp, #296	@ 0x128
 800624c:	aa49      	add	r2, sp, #292	@ 0x124
 800624e:	a948      	add	r1, sp, #288	@ 0x120
 8006250:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8006252:	f8cd b000 	str.w	fp, [sp]
 8006256:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800625a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800625e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8006262:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8006266:	f00e f9b2 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_11.setSelected(false);
 800626a:	4629      	mov	r1, r5
 800626c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 800626e:	f00e fa4f 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_11);
 8006272:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8006274:	9802      	ldr	r0, [sp, #8]
 8006276:	f884 5b40 	strb.w	r5, [r4, #2880]	@ 0xb40
 800627a:	f7fe ffab 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800627e:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8006280:	4630      	mov	r0, r6
 8006282:	f00a fd31 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_10.setXY(250, 258);
 8006286:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8006288:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800628c:	21fa      	movs	r1, #250	@ 0xfa
 800628e:	f7fe f9fe 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006292:	ab4a      	add	r3, sp, #296	@ 0x128
 8006294:	aa49      	add	r2, sp, #292	@ 0x124
 8006296:	a948      	add	r1, sp, #288	@ 0x120
 8006298:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 800629a:	f8cd b000 	str.w	fp, [sp]
 800629e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80062a2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80062a6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80062aa:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80062ae:	f00e f98e 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_10.setSelected(false);
 80062b2:	4629      	mov	r1, r5
 80062b4:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 80062b6:	f00e fa2b 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_10);
 80062ba:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 80062bc:	9802      	ldr	r0, [sp, #8]
 80062be:	f884 5b80 	strb.w	r5, [r4, #2944]	@ 0xb80
 80062c2:	f7fe ff87 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80062c6:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 80062c8:	4630      	mov	r0, r6
 80062ca:	f00a fd0d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_9.setXY(200, 258);
 80062ce:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 80062d0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80062d4:	21c8      	movs	r1, #200	@ 0xc8
 80062d6:	f7fe f9da 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80062da:	ab4a      	add	r3, sp, #296	@ 0x128
 80062dc:	aa49      	add	r2, sp, #292	@ 0x124
 80062de:	a948      	add	r1, sp, #288	@ 0x120
 80062e0:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 80062e2:	f8cd b000 	str.w	fp, [sp]
 80062e6:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80062ea:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80062ee:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80062f2:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80062f6:	f00e f96a 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_9.setSelected(false);
 80062fa:	4629      	mov	r1, r5
 80062fc:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 80062fe:	f00e fa07 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_9);
 8006302:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8006304:	9802      	ldr	r0, [sp, #8]
 8006306:	f884 5bc0 	strb.w	r5, [r4, #3008]	@ 0xbc0
 800630a:	f7fe ff63 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800630e:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8006310:	4630      	mov	r0, r6
 8006312:	f00a fce9 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_8.setXY(350, 208);
 8006316:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8006318:	22d0      	movs	r2, #208	@ 0xd0
 800631a:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800631e:	f7fe f9b6 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006322:	ab4a      	add	r3, sp, #296	@ 0x128
 8006324:	aa49      	add	r2, sp, #292	@ 0x124
 8006326:	a948      	add	r1, sp, #288	@ 0x120
 8006328:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800632a:	f8cd b000 	str.w	fp, [sp]
 800632e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006332:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 8006336:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 800633a:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 800633e:	f00e f946 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_8.setSelected(false);
 8006342:	4629      	mov	r1, r5
 8006344:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8006346:	f00e f9e3 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_8);
 800634a:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 800634c:	9802      	ldr	r0, [sp, #8]
 800634e:	f884 5c00 	strb.w	r5, [r4, #3072]	@ 0xc00
 8006352:	f7fe ff3f 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006356:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8006358:	4630      	mov	r0, r6
 800635a:	f00a fcc5 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_7.setXY(300, 208);
 800635e:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8006360:	22d0      	movs	r2, #208	@ 0xd0
 8006362:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006366:	f7fe f992 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800636a:	ab4a      	add	r3, sp, #296	@ 0x128
 800636c:	aa49      	add	r2, sp, #292	@ 0x124
 800636e:	a948      	add	r1, sp, #288	@ 0x120
 8006370:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8006372:	f8cd b000 	str.w	fp, [sp]
 8006376:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800637a:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 800637e:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8006382:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8006386:	f00e f922 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_7.setSelected(false);
 800638a:	4629      	mov	r1, r5
 800638c:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 800638e:	f00e f9bf 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_7);
 8006392:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8006394:	9802      	ldr	r0, [sp, #8]
 8006396:	f884 5c40 	strb.w	r5, [r4, #3136]	@ 0xc40
 800639a:	f7fe ff1b 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800639e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80063a0:	4630      	mov	r0, r6
 80063a2:	f00a fca1 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_6.setXY(250, 208);
 80063a6:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80063a8:	22d0      	movs	r2, #208	@ 0xd0
 80063aa:	21fa      	movs	r1, #250	@ 0xfa
 80063ac:	f7fe f96f 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80063b0:	ab4a      	add	r3, sp, #296	@ 0x128
 80063b2:	aa49      	add	r2, sp, #292	@ 0x124
 80063b4:	a948      	add	r1, sp, #288	@ 0x120
 80063b6:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80063b8:	f8cd b000 	str.w	fp, [sp]
 80063bc:	46cb      	mov	fp, r9
 80063be:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80063c2:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80063c6:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 80063ca:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 80063ce:	f00e f8fe 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_6.setSelected(false);
 80063d2:	4629      	mov	r1, r5
 80063d4:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80063d6:	f00e f99b 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_6);
 80063da:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 80063dc:	9802      	ldr	r0, [sp, #8]
 80063de:	f884 5c80 	strb.w	r5, [r4, #3200]	@ 0xc80
 80063e2:	f7fe fef7 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80063e6:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 80063e8:	4630      	mov	r0, r6
 80063ea:	f00a fc7d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_5.setXY(200, 208);
 80063ee:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80063f0:	22d0      	movs	r2, #208	@ 0xd0
 80063f2:	21c8      	movs	r1, #200	@ 0xc8
 80063f4:	f7fe f94b 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 80063f8:	f8ad 9124 	strh.w	r9, [sp, #292]	@ 0x124
 80063fc:	f8ad 8128 	strh.w	r8, [sp, #296]	@ 0x128
 8006400:	46c1      	mov	r9, r8
 8006402:	f8ad 712c 	strh.w	r7, [sp, #300]	@ 0x12c
 8006406:	46b8      	mov	r8, r7
    RadioButton_1_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006408:	af4b      	add	r7, sp, #300	@ 0x12c
 800640a:	ab4a      	add	r3, sp, #296	@ 0x128
 800640c:	aa49      	add	r2, sp, #292	@ 0x124
 800640e:	a948      	add	r1, sp, #288	@ 0x120
 8006410:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8006412:	9700      	str	r7, [sp, #0]
 8006414:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006418:	f00e f8d9 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_5.setSelected(false);
 800641c:	4629      	mov	r1, r5
 800641e:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8006420:	f00e f976 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_5);
 8006424:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8006426:	9802      	ldr	r0, [sp, #8]
 8006428:	f884 5cc0 	strb.w	r5, [r4, #3264]	@ 0xcc0
 800642c:	f7fe fed2 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006430:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8006432:	4630      	mov	r0, r6
 8006434:	f00a fc58 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_4.setXY(350, 158);
 8006438:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 800643a:	229e      	movs	r2, #158	@ 0x9e
 800643c:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8006440:	f7fe f925 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006444:	ab4a      	add	r3, sp, #296	@ 0x128
 8006446:	aa49      	add	r2, sp, #292	@ 0x124
 8006448:	a948      	add	r1, sp, #288	@ 0x120
 800644a:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 800644c:	9700      	str	r7, [sp, #0]
 800644e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006452:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8006456:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800645a:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800645e:	f00e f8b6 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_4.setSelected(false);
 8006462:	4629      	mov	r1, r5
 8006464:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8006466:	f00e f953 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_4);
 800646a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800646c:	9802      	ldr	r0, [sp, #8]
 800646e:	f884 5d00 	strb.w	r5, [r4, #3328]	@ 0xd00
 8006472:	f7fe feaf 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006476:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8006478:	4630      	mov	r0, r6
 800647a:	f00a fc35 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_3.setXY(300, 158);
 800647e:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8006480:	229e      	movs	r2, #158	@ 0x9e
 8006482:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006486:	f7fe f902 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800648a:	ab4a      	add	r3, sp, #296	@ 0x128
 800648c:	aa49      	add	r2, sp, #292	@ 0x124
 800648e:	a948      	add	r1, sp, #288	@ 0x120
 8006490:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8006492:	9700      	str	r7, [sp, #0]
 8006494:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006498:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800649c:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80064a0:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80064a4:	f00e f893 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_3.setSelected(false);
 80064a8:	4629      	mov	r1, r5
 80064aa:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 80064ac:	f00e f930 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_3);
 80064b0:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 80064b2:	9802      	ldr	r0, [sp, #8]
 80064b4:	f884 5d40 	strb.w	r5, [r4, #3392]	@ 0xd40
 80064b8:	f7fe fe8c 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80064bc:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 80064be:	4630      	mov	r0, r6
 80064c0:	f00a fc12 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_2.setXY(250, 158);
 80064c4:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 80064c6:	229e      	movs	r2, #158	@ 0x9e
 80064c8:	21fa      	movs	r1, #250	@ 0xfa
 80064ca:	f7fe f8e0 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80064ce:	ab4a      	add	r3, sp, #296	@ 0x128
 80064d0:	aa49      	add	r2, sp, #292	@ 0x124
 80064d2:	a948      	add	r1, sp, #288	@ 0x120
 80064d4:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 80064d6:	9700      	str	r7, [sp, #0]
 80064d8:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80064dc:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80064e0:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80064e4:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80064e8:	f00e f871 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_2.setSelected(false);
 80064ec:	4629      	mov	r1, r5
 80064ee:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 80064f0:	f00e f90e 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_2);
 80064f4:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 80064f6:	9802      	ldr	r0, [sp, #8]
 80064f8:	f884 5d80 	strb.w	r5, [r4, #3456]	@ 0xd80
 80064fc:	f7fe fe6a 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006500:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 8006502:	4630      	mov	r0, r6
 8006504:	f00a fbf0 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_1.setXY(200, 158);
 8006508:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 800650a:	229e      	movs	r2, #158	@ 0x9e
 800650c:	21c8      	movs	r1, #200	@ 0xc8
 800650e:	f7fe f8be 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006512:	ab4a      	add	r3, sp, #296	@ 0x128
 8006514:	aa49      	add	r2, sp, #292	@ 0x124
 8006516:	a948      	add	r1, sp, #288	@ 0x120
 8006518:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 800651a:	9700      	str	r7, [sp, #0]
 800651c:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006520:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8006524:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8006528:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800652c:	f00e f84f 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_1.setSelected(false);
 8006530:	4629      	mov	r1, r5
 8006532:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 8006534:	f00e f8ec 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_1);
 8006538:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 800653a:	9802      	ldr	r0, [sp, #8]
 800653c:	f884 5dc0 	strb.w	r5, [r4, #3520]	@ 0xdc0
 8006540:	f7fe fe48 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006544:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8006546:	4630      	mov	r0, r6
 8006548:	f00a fbce 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_16.setXY(150, 308);
 800654c:	983b      	ldr	r0, [sp, #236]	@ 0xec
 800654e:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8006552:	2196      	movs	r1, #150	@ 0x96
 8006554:	f7fe f89b 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006558:	ab4a      	add	r3, sp, #296	@ 0x128
 800655a:	aa49      	add	r2, sp, #292	@ 0x124
 800655c:	a948      	add	r1, sp, #288	@ 0x120
 800655e:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8006560:	9700      	str	r7, [sp, #0]
 8006562:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006566:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800656a:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800656e:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006572:	f00e f82c 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_16.setSelected(false);
 8006576:	4629      	mov	r1, r5
 8006578:	983b      	ldr	r0, [sp, #236]	@ 0xec
 800657a:	f00e f8c9 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_16);
 800657e:	993b      	ldr	r1, [sp, #236]	@ 0xec
 8006580:	9802      	ldr	r0, [sp, #8]
 8006582:	f884 5e00 	strb.w	r5, [r4, #3584]	@ 0xe00
 8006586:	f7fe fe25 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800658a:	993b      	ldr	r1, [sp, #236]	@ 0xec
 800658c:	4630      	mov	r0, r6
 800658e:	f00a fbab 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_15.setXY(100, 308);
 8006592:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8006594:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8006598:	2164      	movs	r1, #100	@ 0x64
 800659a:	f7fe f878 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800659e:	ab4a      	add	r3, sp, #296	@ 0x128
 80065a0:	aa49      	add	r2, sp, #292	@ 0x124
 80065a2:	a948      	add	r1, sp, #288	@ 0x120
 80065a4:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 80065a6:	9700      	str	r7, [sp, #0]
 80065a8:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80065ac:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80065b0:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80065b4:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80065b8:	f00e f809 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_15.setSelected(false);
 80065bc:	4629      	mov	r1, r5
 80065be:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 80065c0:	f00e f8a6 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_15);
 80065c4:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 80065c6:	9802      	ldr	r0, [sp, #8]
 80065c8:	f884 5e40 	strb.w	r5, [r4, #3648]	@ 0xe40
 80065cc:	f7fe fe02 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80065d0:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 80065d2:	4630      	mov	r0, r6
 80065d4:	f00a fb88 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_14.setXY(50, 308);
 80065d8:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 80065da:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80065de:	2132      	movs	r1, #50	@ 0x32
 80065e0:	f7fe f855 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80065e4:	ab4a      	add	r3, sp, #296	@ 0x128
 80065e6:	aa49      	add	r2, sp, #292	@ 0x124
 80065e8:	a948      	add	r1, sp, #288	@ 0x120
 80065ea:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 80065ec:	9700      	str	r7, [sp, #0]
 80065ee:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80065f2:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80065f6:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80065fa:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80065fe:	f00d ffe6 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_14.setSelected(false);
 8006602:	4629      	mov	r1, r5
 8006604:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 8006606:	f00e f883 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_14);
 800660a:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800660c:	9802      	ldr	r0, [sp, #8]
 800660e:	f884 5e80 	strb.w	r5, [r4, #3712]	@ 0xe80
 8006612:	f7fe fddf 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006616:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8006618:	4630      	mov	r0, r6
 800661a:	f00a fb65 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_13.setXY(0, 308);
 800661e:	4629      	mov	r1, r5
 8006620:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8006622:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8006626:	f7fe f832 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800662a:	ab4a      	add	r3, sp, #296	@ 0x128
 800662c:	aa49      	add	r2, sp, #292	@ 0x124
 800662e:	a948      	add	r1, sp, #288	@ 0x120
 8006630:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8006632:	9700      	str	r7, [sp, #0]
 8006634:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006638:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800663c:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8006640:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006644:	f00d ffc3 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_13.setSelected(false);
 8006648:	4629      	mov	r1, r5
 800664a:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 800664c:	f00e f860 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_13);
 8006650:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8006652:	9802      	ldr	r0, [sp, #8]
 8006654:	f884 5ec0 	strb.w	r5, [r4, #3776]	@ 0xec0
 8006658:	f7fe fdbc 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800665c:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 800665e:	4630      	mov	r0, r6
 8006660:	f00a fb42 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_12.setXY(150, 258);
 8006664:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8006666:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800666a:	2196      	movs	r1, #150	@ 0x96
 800666c:	f7fe f80f 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006670:	ab4a      	add	r3, sp, #296	@ 0x128
 8006672:	aa49      	add	r2, sp, #292	@ 0x124
 8006674:	a948      	add	r1, sp, #288	@ 0x120
 8006676:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8006678:	9700      	str	r7, [sp, #0]
 800667a:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800667e:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8006682:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8006686:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800668a:	f00d ffa0 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_12.setSelected(false);
 800668e:	4629      	mov	r1, r5
 8006690:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8006692:	f00e f83d 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_12);
 8006696:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8006698:	9802      	ldr	r0, [sp, #8]
 800669a:	f884 5f00 	strb.w	r5, [r4, #3840]	@ 0xf00
 800669e:	f7fe fd99 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80066a2:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 80066a4:	4630      	mov	r0, r6
 80066a6:	f00a fb1f 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_11.setXY(100, 258);
 80066aa:	9840      	ldr	r0, [sp, #256]	@ 0x100
 80066ac:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80066b0:	2164      	movs	r1, #100	@ 0x64
 80066b2:	f7fd ffec 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80066b6:	ab4a      	add	r3, sp, #296	@ 0x128
 80066b8:	aa49      	add	r2, sp, #292	@ 0x124
 80066ba:	a948      	add	r1, sp, #288	@ 0x120
 80066bc:	9840      	ldr	r0, [sp, #256]	@ 0x100
 80066be:	9700      	str	r7, [sp, #0]
 80066c0:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80066c4:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80066c8:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80066cc:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80066d0:	f00d ff7d 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_11.setSelected(false);
 80066d4:	4629      	mov	r1, r5
 80066d6:	9840      	ldr	r0, [sp, #256]	@ 0x100
 80066d8:	f00e f81a 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_11);
 80066dc:	9940      	ldr	r1, [sp, #256]	@ 0x100
 80066de:	9802      	ldr	r0, [sp, #8]
 80066e0:	f884 5f40 	strb.w	r5, [r4, #3904]	@ 0xf40
 80066e4:	f7fe fd76 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80066e8:	9940      	ldr	r1, [sp, #256]	@ 0x100
 80066ea:	4630      	mov	r0, r6
 80066ec:	f00a fafc 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_10.setXY(50, 258);
 80066f0:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80066f2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80066f6:	2132      	movs	r1, #50	@ 0x32
 80066f8:	f7fd ffc9 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80066fc:	ab4a      	add	r3, sp, #296	@ 0x128
 80066fe:	aa49      	add	r2, sp, #292	@ 0x124
 8006700:	a948      	add	r1, sp, #288	@ 0x120
 8006702:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006704:	9700      	str	r7, [sp, #0]
 8006706:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800670a:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800670e:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8006712:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006716:	f00d ff5a 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_10.setSelected(false);
 800671a:	4629      	mov	r1, r5
 800671c:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800671e:	f00d fff7 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_10);
 8006722:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8006724:	9802      	ldr	r0, [sp, #8]
 8006726:	f884 5f80 	strb.w	r5, [r4, #3968]	@ 0xf80
 800672a:	f7fe fd53 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800672e:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8006730:	4630      	mov	r0, r6
 8006732:	f00a fad9 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_9.setXY(0, 258);
 8006736:	4629      	mov	r1, r5
 8006738:	9842      	ldr	r0, [sp, #264]	@ 0x108
 800673a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800673e:	f7fd ffa6 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006742:	ab4a      	add	r3, sp, #296	@ 0x128
 8006744:	aa49      	add	r2, sp, #292	@ 0x124
 8006746:	a948      	add	r1, sp, #288	@ 0x120
 8006748:	9842      	ldr	r0, [sp, #264]	@ 0x108
 800674a:	9700      	str	r7, [sp, #0]
 800674c:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006750:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8006754:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8006758:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800675c:	f00d ff37 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_9.setSelected(false);
 8006760:	4629      	mov	r1, r5
 8006762:	9842      	ldr	r0, [sp, #264]	@ 0x108
 8006764:	f00d ffd4 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_9);
 8006768:	9942      	ldr	r1, [sp, #264]	@ 0x108
 800676a:	9802      	ldr	r0, [sp, #8]
 800676c:	f884 5fc0 	strb.w	r5, [r4, #4032]	@ 0xfc0
 8006770:	f7fe fd30 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006774:	9942      	ldr	r1, [sp, #264]	@ 0x108
 8006776:	4630      	mov	r0, r6
 8006778:	f00a fab6 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_8.setXY(150, 208);
 800677c:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 800677e:	22d0      	movs	r2, #208	@ 0xd0
 8006780:	2196      	movs	r1, #150	@ 0x96
 8006782:	f7fd ff84 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006786:	aa49      	add	r2, sp, #292	@ 0x124
 8006788:	ab4a      	add	r3, sp, #296	@ 0x128
 800678a:	a948      	add	r1, sp, #288	@ 0x120
 800678c:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 800678e:	9700      	str	r7, [sp, #0]
 8006790:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006794:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8006798:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800679c:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80067a0:	f00d ff15 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_8.setSelected(false);
 80067a4:	4629      	mov	r1, r5
 80067a6:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 80067a8:	f00d ffb2 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 80067ac:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
    radioButtonGroup1.add(RadioButton_0_8);
 80067b0:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80067b2:	701d      	strb	r5, [r3, #0]
 80067b4:	9802      	ldr	r0, [sp, #8]
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	f7fe fd0c 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80067bc:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80067be:	4630      	mov	r0, r6
 80067c0:	f00a fa92 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_7.setXY(100, 208);
 80067c4:	9804      	ldr	r0, [sp, #16]
 80067c6:	22d0      	movs	r2, #208	@ 0xd0
 80067c8:	2164      	movs	r1, #100	@ 0x64
 80067ca:	f7fd ff60 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80067ce:	aa49      	add	r2, sp, #292	@ 0x124
 80067d0:	ab4a      	add	r3, sp, #296	@ 0x128
 80067d2:	a948      	add	r1, sp, #288	@ 0x120
 80067d4:	9804      	ldr	r0, [sp, #16]
 80067d6:	9700      	str	r7, [sp, #0]
 80067d8:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80067dc:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80067e0:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80067e4:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80067e8:	f00d fef1 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_7.setSelected(false);
 80067ec:	4629      	mov	r1, r5
 80067ee:	9804      	ldr	r0, [sp, #16]
 80067f0:	f00d ff8e 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 80067f4:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_7);
 80067f6:	9904      	ldr	r1, [sp, #16]
 80067f8:	f883 5040 	strb.w	r5, [r3, #64]	@ 0x40
 80067fc:	9802      	ldr	r0, [sp, #8]
 80067fe:	f7fe fce9 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006802:	9904      	ldr	r1, [sp, #16]
 8006804:	4630      	mov	r0, r6
 8006806:	f00a fa6f 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_6.setXY(50, 208);
 800680a:	9805      	ldr	r0, [sp, #20]
 800680c:	22d0      	movs	r2, #208	@ 0xd0
 800680e:	2132      	movs	r1, #50	@ 0x32
 8006810:	f7fd ff3d 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006814:	aa49      	add	r2, sp, #292	@ 0x124
 8006816:	ab4a      	add	r3, sp, #296	@ 0x128
 8006818:	a948      	add	r1, sp, #288	@ 0x120
 800681a:	9805      	ldr	r0, [sp, #20]
 800681c:	9700      	str	r7, [sp, #0]
 800681e:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006822:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8006826:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800682a:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800682e:	f00d fece 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_6.setSelected(false);
 8006832:	4629      	mov	r1, r5
 8006834:	9805      	ldr	r0, [sp, #20]
 8006836:	f00d ff6b 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 800683a:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_6);
 800683c:	9905      	ldr	r1, [sp, #20]
 800683e:	f883 5080 	strb.w	r5, [r3, #128]	@ 0x80
 8006842:	9802      	ldr	r0, [sp, #8]
 8006844:	f7fe fcc6 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006848:	9905      	ldr	r1, [sp, #20]
 800684a:	4630      	mov	r0, r6
 800684c:	f00a fa4c 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_5.setXY(0, 208);
 8006850:	4629      	mov	r1, r5
 8006852:	9806      	ldr	r0, [sp, #24]
 8006854:	22d0      	movs	r2, #208	@ 0xd0
 8006856:	f7fd ff1a 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800685a:	aa49      	add	r2, sp, #292	@ 0x124
 800685c:	ab4a      	add	r3, sp, #296	@ 0x128
 800685e:	a948      	add	r1, sp, #288	@ 0x120
 8006860:	9806      	ldr	r0, [sp, #24]
 8006862:	9700      	str	r7, [sp, #0]
 8006864:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006868:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800686c:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8006870:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006874:	f00d feab 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_5.setSelected(false);
 8006878:	4629      	mov	r1, r5
 800687a:	9806      	ldr	r0, [sp, #24]
 800687c:	f00d ff48 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8006880:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_5);
 8006882:	9906      	ldr	r1, [sp, #24]
 8006884:	f883 50c0 	strb.w	r5, [r3, #192]	@ 0xc0
 8006888:	9802      	ldr	r0, [sp, #8]
 800688a:	f7fe fca3 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800688e:	9906      	ldr	r1, [sp, #24]
 8006890:	4630      	mov	r0, r6
 8006892:	f00a fa29 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_4.setXY(150, 158);
 8006896:	9807      	ldr	r0, [sp, #28]
 8006898:	229e      	movs	r2, #158	@ 0x9e
 800689a:	2196      	movs	r1, #150	@ 0x96
 800689c:	f7fd fef7 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80068a0:	aa49      	add	r2, sp, #292	@ 0x124
 80068a2:	ab4a      	add	r3, sp, #296	@ 0x128
 80068a4:	a948      	add	r1, sp, #288	@ 0x120
 80068a6:	9807      	ldr	r0, [sp, #28]
 80068a8:	9700      	str	r7, [sp, #0]
 80068aa:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80068ae:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80068b2:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80068b6:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80068ba:	f00d fe88 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_4.setSelected(false);
 80068be:	4629      	mov	r1, r5
 80068c0:	9807      	ldr	r0, [sp, #28]
 80068c2:	f00d ff25 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 80068c6:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_4);
 80068c8:	9907      	ldr	r1, [sp, #28]
 80068ca:	f883 5100 	strb.w	r5, [r3, #256]	@ 0x100
 80068ce:	9802      	ldr	r0, [sp, #8]
 80068d0:	f7fe fc80 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80068d4:	9907      	ldr	r1, [sp, #28]
 80068d6:	4630      	mov	r0, r6
 80068d8:	f00a fa06 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_3.setXY(100, 158);
 80068dc:	9808      	ldr	r0, [sp, #32]
 80068de:	229e      	movs	r2, #158	@ 0x9e
 80068e0:	2164      	movs	r1, #100	@ 0x64
 80068e2:	f7fd fed4 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80068e6:	aa49      	add	r2, sp, #292	@ 0x124
 80068e8:	ab4a      	add	r3, sp, #296	@ 0x128
 80068ea:	a948      	add	r1, sp, #288	@ 0x120
 80068ec:	9808      	ldr	r0, [sp, #32]
 80068ee:	9700      	str	r7, [sp, #0]
 80068f0:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 80068f4:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80068f8:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80068fc:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006900:	f00d fe65 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_3.setSelected(false);
 8006904:	4629      	mov	r1, r5
 8006906:	9808      	ldr	r0, [sp, #32]
 8006908:	f00d ff02 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 800690c:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_3);
 800690e:	9908      	ldr	r1, [sp, #32]
 8006910:	f883 5140 	strb.w	r5, [r3, #320]	@ 0x140
 8006914:	9802      	ldr	r0, [sp, #8]
 8006916:	f7fe fc5d 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800691a:	9908      	ldr	r1, [sp, #32]
 800691c:	4630      	mov	r0, r6
 800691e:	f00a f9e3 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_2.setXY(50, 158);
 8006922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006924:	229e      	movs	r2, #158	@ 0x9e
 8006926:	2132      	movs	r1, #50	@ 0x32
 8006928:	f7fd feb1 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800692c:	aa49      	add	r2, sp, #292	@ 0x124
 800692e:	ab4a      	add	r3, sp, #296	@ 0x128
 8006930:	a948      	add	r1, sp, #288	@ 0x120
 8006932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006934:	9700      	str	r7, [sp, #0]
 8006936:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 800693a:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800693e:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8006942:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006946:	f00d fe42 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_2.setSelected(false);
 800694a:	4629      	mov	r1, r5
 800694c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800694e:	f00d fedf 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8006952:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_2);
 8006954:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006956:	f883 5180 	strb.w	r5, [r3, #384]	@ 0x180
 800695a:	9802      	ldr	r0, [sp, #8]
 800695c:	f7fe fc3a 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006960:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006962:	4630      	mov	r0, r6
 8006964:	f00a f9c0 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_1.setXY(0, 158);
 8006968:	4629      	mov	r1, r5
 800696a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800696c:	229e      	movs	r2, #158	@ 0x9e
 800696e:	f7fd fe8e 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006972:	aa49      	add	r2, sp, #292	@ 0x124
 8006974:	ab4a      	add	r3, sp, #296	@ 0x128
 8006976:	a948      	add	r1, sp, #288	@ 0x120
 8006978:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800697a:	9700      	str	r7, [sp, #0]
 800697c:	f8ad a120 	strh.w	sl, [sp, #288]	@ 0x120
 8006980:	f04f 0a02 	mov.w	sl, #2
 8006984:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8006988:	f04f 0909 	mov.w	r9, #9
 800698c:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
        color = col;
 8006990:	f04f 38ff 	mov.w	r8, #4294967295
 8006994:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006998:	f00d fe19 	bl	80145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_1.setSelected(false);
 800699c:	4629      	mov	r1, r5
 800699e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80069a0:	f00d feb6 	bl	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 80069a4:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_1);
 80069a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069a8:	f883 51c0 	strb.w	r5, [r3, #448]	@ 0x1c0
 80069ac:	9802      	ldr	r0, [sp, #8]
 80069ae:	f7fe fc11 	bl	80051d4 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80069b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069b4:	4630      	mov	r0, r6
 80069b6:	f00a f997 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 80069ba:	462a      	mov	r2, r5
 80069bc:	4629      	mov	r1, r5
 80069be:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80069c0:	f7fd fe65 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80069c4:	4639      	mov	r1, r7
 80069c6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80069c8:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80069cc:	f00d fc8f 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80069d0:	9944      	ldr	r1, [sp, #272]	@ 0x110
 80069d2:	4630      	mov	r0, r6
 80069d4:	f00a f988 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 80069d8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80069dc:	4629      	mov	r1, r5
 80069de:	9845      	ldr	r0, [sp, #276]	@ 0x114
 80069e0:	f7fd fe55 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80069e4:	4639      	mov	r1, r7
 80069e6:	9845      	ldr	r0, [sp, #276]	@ 0x114
    Nex.setAction(buttonCallback);
 80069e8:	f504 5597 	add.w	r5, r4, #4832	@ 0x12e0
 80069ec:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80069f0:	f00d fc7d 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80069f4:	9945      	ldr	r1, [sp, #276]	@ 0x114
 80069f6:	4630      	mov	r0, r6
 80069f8:	f00a f976 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Nex.setXY(615, 415);
 80069fc:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 80069fe:	f240 129f 	movw	r2, #415	@ 0x19f
 8006a02:	f240 2167 	movw	r1, #615	@ 0x267
 8006a06:	f7fd fe42 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8006a0a:	2301      	movs	r3, #1
    Nex.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 8006a0c:	a94a      	add	r1, sp, #296	@ 0x128
 8006a0e:	463a      	mov	r2, r7
 8006a10:	9847      	ldr	r0, [sp, #284]	@ 0x11c
    Nex.setAction(buttonCallback);
 8006a12:	3504      	adds	r5, #4
 8006a14:	f8ad 3128 	strh.w	r3, [sp, #296]	@ 0x128
 8006a18:	f8ad a12c 	strh.w	sl, [sp, #300]	@ 0x12c
    Nex.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 8006a1c:	f00d fb3f 	bl	801409e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8006a20:	2208      	movs	r2, #8
 8006a22:	9b03      	ldr	r3, [sp, #12]
        updateTextPosition();
 8006a24:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 8006a26:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
 8006a2a:	f7fd fe91 	bl	8004750 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8006a32:	4630      	mov	r0, r6
        action = &callback;
 8006a34:	f8c3 5248 	str.w	r5, [r3, #584]	@ 0x248
        colorPressed = col;
 8006a38:	e9c3 8897 	strd	r8, r8, [r3, #604]	@ 0x25c
 8006a3c:	f00a f954 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(268, 400);
 8006a40:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8006a42:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006a46:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8006a4a:	f7fd fe20 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8006a4e:	220a      	movs	r2, #10
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 8006a50:	a94a      	add	r1, sp, #296	@ 0x128
 8006a52:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8006a54:	f8ad 2128 	strh.w	r2, [sp, #296]	@ 0x128
 8006a58:	f8ad 212c 	strh.w	r2, [sp, #300]	@ 0x12c
 8006a5c:	463a      	mov	r2, r7
 8006a5e:	f00d fb1e 	bl	801409e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8006a62:	9946      	ldr	r1, [sp, #280]	@ 0x118
 8006a64:	4630      	mov	r0, r6
 8006a66:	f00a f93f 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Back.setXY(75, 415);
 8006a6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006a6c:	f240 129f 	movw	r2, #415	@ 0x19f
 8006a70:	214b      	movs	r1, #75	@ 0x4b
 8006a72:	f7fd fe0c 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8006a76:	2301      	movs	r3, #1
    Back.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 8006a78:	463a      	mov	r2, r7
 8006a7a:	a94a      	add	r1, sp, #296	@ 0x128
 8006a7c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006a7e:	f8ad 3128 	strh.w	r3, [sp, #296]	@ 0x128
 8006a82:	f8ad a12c 	strh.w	sl, [sp, #300]	@ 0x12c
 8006a86:	f00d fb0a 	bl	801409e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8006a8a:	9b03      	ldr	r3, [sp, #12]
        updateTextPosition();
 8006a8c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006a8e:	f8a3 92d4 	strh.w	r9, [r3, #724]	@ 0x2d4
 8006a92:	f7fd fe5d 	bl	8004750 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	4630      	mov	r0, r6
 8006a9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a9c:	f8c3 52c4 	str.w	r5, [r3, #708]	@ 0x2c4
        colorPressed = col;
 8006aa0:	e9c3 88b6 	strd	r8, r8, [r3, #728]	@ 0x2d8
 8006aa4:	f00a f920 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	b04d      	add	sp, #308	@ 0x134
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ab0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006ab0:	4770      	bx	lr
	...

08006ab4 <_Z23getFont_verdana_10_4bppv>:
{
 8006ab4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006ab6:	4d16      	ldr	r5, [pc, #88]	@ (8006b10 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8006ab8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006aba:	682c      	ldr	r4, [r5, #0]
 8006abc:	f3bf 8f5b 	dmb	ish
 8006ac0:	f014 0401 	ands.w	r4, r4, #1
 8006ac4:	d120      	bne.n	8006b08 <_Z23getFont_verdana_10_4bppv+0x54>
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f01e fd3b 	bl	8025542 <__cxa_guard_acquire>
 8006acc:	b1e0      	cbz	r0, 8006b08 <_Z23getFont_verdana_10_4bppv+0x54>
 8006ace:	233f      	movs	r3, #63	@ 0x3f
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	4910      	ldr	r1, [pc, #64]	@ (8006b14 <_Z23getFont_verdana_10_4bppv+0x60>)
 8006ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad6:	4b10      	ldr	r3, [pc, #64]	@ (8006b18 <_Z23getFont_verdana_10_4bppv+0x64>)
 8006ad8:	4810      	ldr	r0, [pc, #64]	@ (8006b1c <_Z23getFont_verdana_10_4bppv+0x68>)
 8006ada:	9308      	str	r3, [sp, #32]
 8006adc:	4b10      	ldr	r3, [pc, #64]	@ (8006b20 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8006ade:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ae0:	9405      	str	r4, [sp, #20]
 8006ae2:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8006ae6:	2304      	movs	r3, #4
 8006ae8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8006aec:	230a      	movs	r3, #10
 8006aee:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006af8:	f7fd fcc2 	bl	8004480 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006afc:	4809      	ldr	r0, [pc, #36]	@ (8006b24 <_Z23getFont_verdana_10_4bppv+0x70>)
 8006afe:	f01f f8b5 	bl	8025c6c <atexit>
 8006b02:	4628      	mov	r0, r5
 8006b04:	f01e fd29 	bl	802555a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8006b08:	4804      	ldr	r0, [pc, #16]	@ (8006b1c <_Z23getFont_verdana_10_4bppv+0x68>)
 8006b0a:	b00f      	add	sp, #60	@ 0x3c
 8006b0c:	bd30      	pop	{r4, r5, pc}
 8006b0e:	bf00      	nop
 8006b10:	2400c360 	.word	0x2400c360
 8006b14:	0802b374 	.word	0x0802b374
 8006b18:	0802b548 	.word	0x0802b548
 8006b1c:	2400c364 	.word	0x2400c364
 8006b20:	0802b574 	.word	0x0802b574
 8006b24:	08006ab1 	.word	0x08006ab1

08006b28 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 31, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006b28:	4770      	bx	lr
	...

08006b2c <_Z23getFont_verdana_20_4bppv>:
{
 8006b2c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 31, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006b2e:	4d16      	ldr	r5, [pc, #88]	@ (8006b88 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8006b30:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 31, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8006b32:	682c      	ldr	r4, [r5, #0]
 8006b34:	f3bf 8f5b 	dmb	ish
 8006b38:	f014 0401 	ands.w	r4, r4, #1
 8006b3c:	d121      	bne.n	8006b82 <_Z23getFont_verdana_20_4bppv+0x56>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f01e fcff 	bl	8025542 <__cxa_guard_acquire>
 8006b44:	b1e8      	cbz	r0, 8006b82 <_Z23getFont_verdana_20_4bppv+0x56>
 8006b46:	233f      	movs	r3, #63	@ 0x3f
 8006b48:	221f      	movs	r2, #31
 8006b4a:	4910      	ldr	r1, [pc, #64]	@ (8006b8c <_Z23getFont_verdana_20_4bppv+0x60>)
 8006b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b4e:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <_Z23getFont_verdana_20_4bppv+0x64>)
 8006b50:	4810      	ldr	r0, [pc, #64]	@ (8006b94 <_Z23getFont_verdana_20_4bppv+0x68>)
 8006b52:	9308      	str	r3, [sp, #32]
 8006b54:	4b10      	ldr	r3, [pc, #64]	@ (8006b98 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8006b56:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b58:	9307      	str	r3, [sp, #28]
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	9401      	str	r4, [sp, #4]
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006b64:	2304      	movs	r3, #4
 8006b66:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8006b6a:	2314      	movs	r3, #20
 8006b6c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	f7fd fc85 	bl	8004480 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006b76:	4809      	ldr	r0, [pc, #36]	@ (8006b9c <_Z23getFont_verdana_20_4bppv+0x70>)
 8006b78:	f01f f878 	bl	8025c6c <atexit>
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f01e fcec 	bl	802555a <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8006b82:	4804      	ldr	r0, [pc, #16]	@ (8006b94 <_Z23getFont_verdana_20_4bppv+0x68>)
 8006b84:	b00f      	add	sp, #60	@ 0x3c
 8006b86:	bd30      	pop	{r4, r5, pc}
 8006b88:	2400c390 	.word	0x2400c390
 8006b8c:	0802b384 	.word	0x0802b384
 8006b90:	0802b54c 	.word	0x0802b54c
 8006b94:	2400c394 	.word	0x2400c394
 8006b98:	0802b578 	.word	0x0802b578
 8006b9c:	08006b29 	.word	0x08006b29

08006ba0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006ba0:	4770      	bx	lr
	...

08006ba4 <_Z23getFont_verdana_40_4bppv>:
{
 8006ba4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006ba6:	4d16      	ldr	r5, [pc, #88]	@ (8006c00 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8006ba8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006baa:	682c      	ldr	r4, [r5, #0]
 8006bac:	f3bf 8f5b 	dmb	ish
 8006bb0:	f014 0401 	ands.w	r4, r4, #1
 8006bb4:	d120      	bne.n	8006bf8 <_Z23getFont_verdana_40_4bppv+0x54>
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f01e fcc3 	bl	8025542 <__cxa_guard_acquire>
 8006bbc:	b1e0      	cbz	r0, 8006bf8 <_Z23getFont_verdana_40_4bppv+0x54>
 8006bbe:	233f      	movs	r3, #63	@ 0x3f
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4910      	ldr	r1, [pc, #64]	@ (8006c04 <_Z23getFont_verdana_40_4bppv+0x60>)
 8006bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bc6:	4b10      	ldr	r3, [pc, #64]	@ (8006c08 <_Z23getFont_verdana_40_4bppv+0x64>)
 8006bc8:	4810      	ldr	r0, [pc, #64]	@ (8006c0c <_Z23getFont_verdana_40_4bppv+0x68>)
 8006bca:	9308      	str	r3, [sp, #32]
 8006bcc:	4b10      	ldr	r3, [pc, #64]	@ (8006c10 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8006bce:	940a      	str	r4, [sp, #40]	@ 0x28
 8006bd0:	9405      	str	r4, [sp, #20]
 8006bd2:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8006bdc:	2328      	movs	r3, #40	@ 0x28
 8006bde:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006be8:	f7fd fc4a 	bl	8004480 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006bec:	4809      	ldr	r0, [pc, #36]	@ (8006c14 <_Z23getFont_verdana_40_4bppv+0x70>)
 8006bee:	f01f f83d 	bl	8025c6c <atexit>
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f01e fcb1 	bl	802555a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8006bf8:	4804      	ldr	r0, [pc, #16]	@ (8006c0c <_Z23getFont_verdana_40_4bppv+0x68>)
 8006bfa:	b00f      	add	sp, #60	@ 0x3c
 8006bfc:	bd30      	pop	{r4, r5, pc}
 8006bfe:	bf00      	nop
 8006c00:	2400c3c0 	.word	0x2400c3c0
 8006c04:	0802b538 	.word	0x0802b538
 8006c08:	0802b570 	.word	0x0802b570
 8006c0c:	2400c3c4 	.word	0x2400c3c4
 8006c10:	0802b57c 	.word	0x0802b57c
 8006c14:	08006ba1 	.word	0x08006ba1

08006c18 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8006c18:	2000      	movs	r0, #0
 8006c1a:	4770      	bx	lr

08006c1c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	4770      	bx	lr

08006c20 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006c20:	b40e      	push	{r1, r2, r3}
 8006c22:	b503      	push	{r0, r1, lr}
 8006c24:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006c26:	2100      	movs	r1, #0
{
 8006c28:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8006c2c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006c2e:	f011 f8b9 	bl	8017da4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006c32:	b002      	add	sp, #8
 8006c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c38:	b003      	add	sp, #12
 8006c3a:	4770      	bx	lr

08006c3c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006c3c:	b40c      	push	{r2, r3}
 8006c3e:	b507      	push	{r0, r1, r2, lr}
 8006c40:	ab04      	add	r3, sp, #16
 8006c42:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8006c46:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8006c48:	f011 f8ac 	bl	8017da4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006c4c:	b003      	add	sp, #12
 8006c4e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c52:	b002      	add	sp, #8
 8006c54:	4770      	bx	lr
	...

08006c58 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8006c58:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8006c5e:	b373      	cbz	r3, 8006cbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006c60:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8006c62:	b92b      	cbnz	r3, 8006c70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8006c64:	4b18      	ldr	r3, [pc, #96]	@ (8006cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8006c66:	21c5      	movs	r1, #197	@ 0xc5
 8006c68:	4a18      	ldr	r2, [pc, #96]	@ (8006ccc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006c6a:	4819      	ldr	r0, [pc, #100]	@ (8006cd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8006c6c:	f01e ffe0 	bl	8025c30 <__assert_func>
            return buffer[pos];
 8006c70:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8006c72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006c76:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8006c78:	b30b      	cbz	r3, 8006cbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8006c7a:	f012 ff7f 	bl	8019b7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8006c7e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d803      	bhi.n	8006c8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8006c84:	4b13      	ldr	r3, [pc, #76]	@ (8006cd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8006c86:	21cb      	movs	r1, #203	@ 0xcb
 8006c88:	4a13      	ldr	r2, [pc, #76]	@ (8006cd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8006c8a:	e7ee      	b.n	8006c6a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8006c8c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8006c8e:	f640 103f 	movw	r0, #2367	@ 0x93f
 8006c92:	1c53      	adds	r3, r2, #1
 8006c94:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8006c96:	2b09      	cmp	r3, #9
 8006c98:	4619      	mov	r1, r3
 8006c9a:	bf88      	it	hi
 8006c9c:	f1a3 010a 	subhi.w	r1, r3, #10
 8006ca0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8006ca4:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8006ca6:	4281      	cmp	r1, r0
 8006ca8:	d109      	bne.n	8006cbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8006caa:	2b0a      	cmp	r3, #10
 8006cac:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006cb0:	bf28      	it	cs
 8006cb2:	2300      	movcs	r3, #0
            return buffer[pos];
 8006cb4:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8006cb6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8006cba:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8006cbc:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8006cbe:	4620      	mov	r0, r4
}
 8006cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8006cc4:	f012 be5c 	b.w	8019980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006cc8:	080293f0 	.word	0x080293f0
 8006ccc:	080293f9 	.word	0x080293f9
 8006cd0:	080294a4 	.word	0x080294a4
 8006cd4:	080294fc 	.word	0x080294fc
 8006cd8:	0802950a 	.word	0x0802950a

08006cdc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8006cdc:	f012 be19 	b.w	8019912 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08006ce0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	ac02      	add	r4, sp, #8
 8006ce6:	e884 0006 	stmia.w	r4, {r1, r2}
 8006cea:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8006cec:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006cee:	4621      	mov	r1, r4
    va_start(pArg, format);
 8006cf0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	9b08      	ldr	r3, [sp, #32]
 8006cfa:	f00f fc59 	bl	80165b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8006cfe:	b006      	add	sp, #24
 8006d00:	bd10      	pop	{r4, pc}
	...

08006d04 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006d04:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8006d06:	bb18      	cbnz	r0, 8006d50 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8006d08:	4b12      	ldr	r3, [pc, #72]	@ (8006d54 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8006d0a:	4813      	ldr	r0, [pc, #76]	@ (8006d58 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8006d0c:	681c      	ldr	r4, [r3, #0]
 8006d0e:	4913      	ldr	r1, [pc, #76]	@ (8006d5c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8006d10:	b1b4      	cbz	r4, 8006d40 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006d12:	6822      	ldr	r2, [r4, #0]
 8006d14:	4422      	add	r2, r4
 8006d16:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8006d18:	6862      	ldr	r2, [r4, #4]
 8006d1a:	4422      	add	r2, r4
 8006d1c:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006d1e:	68a2      	ldr	r2, [r4, #8]
 8006d20:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8006d22:	4b0f      	ldr	r3, [pc, #60]	@ (8006d60 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8006d28:	f000 f838 	bl	8006d9c <_ZN17TypedTextDatabase8getFontsEv>
 8006d2c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006d2e:	f000 f833 	bl	8006d98 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8006d34:	601c      	str	r4, [r3, #0]
        fonts = f;
 8006d36:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8006d38:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8006d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d6c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8006d3c:	8018      	strh	r0, [r3, #0]
    }
}
 8006d3e:	e007      	b.n	8006d50 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8006d40:	4b0b      	ldr	r3, [pc, #44]	@ (8006d70 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8006d42:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8006d46:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8006d48:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8006d4a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8006d4c:	2c00      	cmp	r4, #0
 8006d4e:	d1e8      	bne.n	8006d22 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8006d50:	bd38      	pop	{r3, r4, r5, pc}
 8006d52:	bf00      	nop
 8006d54:	2400c3fc 	.word	0x2400c3fc
 8006d58:	2400c3f4 	.word	0x2400c3f4
 8006d5c:	2400c3f0 	.word	0x2400c3f0
 8006d60:	2400c3f8 	.word	0x2400c3f8
 8006d64:	24026470 	.word	0x24026470
 8006d68:	24026478 	.word	0x24026478
 8006d6c:	24026474 	.word	0x24026474
 8006d70:	90220da8 	.word	0x90220da8
 8006d74:	90220d80 	.word	0x90220d80
 8006d78:	90220df4 	.word	0x90220df4

08006d7c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006d7c:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006d84:	4b03      	ldr	r3, [pc, #12]	@ (8006d94 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8006d86:	681b      	ldr	r3, [r3, #0]
}
 8006d88:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	2400c3f0 	.word	0x2400c3f0
 8006d94:	2400c3f4 	.word	0x2400c3f4

08006d98 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8006d98:	200a      	movs	r0, #10
 8006d9a:	4770      	bx	lr

08006d9c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8006d9c:	4800      	ldr	r0, [pc, #0]	@ (8006da0 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8006d9e:	4770      	bx	lr
 8006da0:	2400c400 	.word	0x2400c400

08006da4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006da4:	b510      	push	{r4, lr}
};
 8006da6:	4c05      	ldr	r4, [pc, #20]	@ (8006dbc <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8006da8:	f7ff fec0 	bl	8006b2c <_Z23getFont_verdana_20_4bppv>
};
 8006dac:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8006dae:	f7ff fef9 	bl	8006ba4 <_Z23getFont_verdana_40_4bppv>
};
 8006db2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8006db4:	f7ff fe7e 	bl	8006ab4 <_Z23getFont_verdana_10_4bppv>
};
 8006db8:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8006dba:	bd10      	pop	{r4, pc}
 8006dbc:	2400c400 	.word	0x2400c400

08006dc0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8006dc0:	b510      	push	{r4, lr}
    pointArray = 0;
 8006dc2:	2400      	movs	r4, #0
 8006dc4:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8006dc6:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8006dc8:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8006dca:	601c      	str	r4, [r3, #0]
}
 8006dcc:	bd10      	pop	{r4, pc}

08006dce <_ZN21WaitingScreenViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 8006dce:	4770      	bx	lr

08006dd0 <_ZN21WaitingScreenViewBaseD1Ev>:
}

WaitingScreenViewBase::~WaitingScreenViewBase()
{

}
 8006dd0:	4770      	bx	lr

08006dd2 <_ZN21WaitingScreenViewBase11setupScreenEv>:

void WaitingScreenViewBase::setupScreen()
{

}
 8006dd2:	4770      	bx	lr

08006dd4 <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006dd4:	4770      	bx	lr

08006dd6 <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006dd6:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006dd8:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8006dda:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006ddc:	68c2      	ldr	r2, [r0, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	1055      	asrs	r5, r2, #1
 8006de2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006de6:	07d2      	lsls	r2, r2, #31
 8006de8:	bf48      	it	mi
 8006dea:	5962      	ldrmi	r2, [r4, r5]
    }
 8006dec:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8006dee:	bf48      	it	mi
 8006df0:	58d3      	ldrmi	r3, [r2, r3]
 8006df2:	4718      	bx	r3

08006df4 <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006df4:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8006df6:	6840      	ldr	r0, [r0, #4]
 8006df8:	b130      	cbz	r0, 8006e08 <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	b91a      	cbnz	r2, 8006e06 <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8006dfe:	68d8      	ldr	r0, [r3, #12]
 8006e00:	f000 0001 	and.w	r0, r0, #1
 8006e04:	4770      	bx	lr
 8006e06:	2001      	movs	r0, #1
    }
 8006e08:	4770      	bx	lr

08006e0a <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	2110      	movs	r1, #16
 8006e10:	f01e fb95 	bl	802553e <_ZdlPvj>
 8006e14:	4620      	mov	r0, r4
 8006e16:	bd10      	pop	{r4, pc}

08006e18 <_ZN21WaitingScreenViewBaseD0Ev>:
WaitingScreenViewBase::~WaitingScreenViewBase()
 8006e18:	b510      	push	{r4, lr}
 8006e1a:	4604      	mov	r4, r0
}
 8006e1c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8006e20:	f01e fb8d 	bl	802553e <_ZdlPvj>
 8006e24:	4620      	mov	r0, r4
 8006e26:	bd10      	pop	{r4, pc}

08006e28 <_ZN21WaitingScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void WaitingScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8006e28:	30f0      	adds	r0, #240	@ 0xf0
 8006e2a:	4288      	cmp	r0, r1
{
 8006e2c:	b508      	push	{r3, lr}
    if (&src == &button1)
 8006e2e:	d105      	bne.n	8006e3c <_ZN21WaitingScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006e30:	f010 f820 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
 8006e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
 8006e38:	f7fd bad0 	b.w	80043dc <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
}
 8006e3c:	bd08      	pop	{r3, pc}
	...

08006e40 <_ZN21WaitingScreenViewBaseC1Ev>:
WaitingScreenViewBase::WaitingScreenViewBase() :
 8006e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	4604      	mov	r4, r0
 8006e46:	b08d      	sub	sp, #52	@ 0x34
 8006e48:	2500      	movs	r5, #0
 8006e4a:	f011 ff2d 	bl	8018ca8 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &WaitingScreenViewBase::buttonCallbackHandler)
 8006e4e:	4627      	mov	r7, r4
 8006e50:	4b96      	ldr	r3, [pc, #600]	@ (80070ac <_ZN21WaitingScreenViewBaseC1Ev+0x26c>)
        : Widget(), alpha(255), color(0)
 8006e52:	f04f 0826 	mov.w	r8, #38	@ 0x26
 8006e56:	4629      	mov	r1, r5
 8006e58:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006e5a:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8006e5e:	f847 3b40 	str.w	r3, [r7], #64
 8006e62:	4642      	mov	r2, r8
 8006e64:	4638      	mov	r0, r7
 8006e66:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8006e6a:	f01f f97d 	bl	8026168 <memset>
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f7fd fc2e 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
 8006e74:	4b8e      	ldr	r3, [pc, #568]	@ (80070b0 <_ZN21WaitingScreenViewBaseC1Ev+0x270>)
 8006e76:	a90a      	add	r1, sp, #40	@ 0x28
 8006e78:	4658      	mov	r0, fp
 8006e7a:	6423      	str	r3, [r4, #64]	@ 0x40
 8006e7c:	23ff      	movs	r3, #255	@ 0xff
 8006e7e:	66a5      	str	r5, [r4, #104]	@ 0x68
 8006e80:	f104 0af0 	add.w	sl, r4, #240	@ 0xf0
 8006e84:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8006e88:	f504 7992 	add.w	r9, r4, #292	@ 0x124
 8006e8c:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8006e90:	f7fd fc44 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006e94:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8006e98:	a90a      	add	r1, sp, #40	@ 0x28
 8006e9a:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	f7fd fc3b 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006ea6:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8006eaa:	a90a      	add	r1, sp, #40	@ 0x28
 8006eac:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	f7fd fc32 	bl	800471c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), action(), pressed(false)
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4650      	mov	r0, sl
 8006ebe:	f01f f953 	bl	8026168 <memset>
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	f7fd fc04 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8006ec8:	2301      	movs	r3, #1
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006eca:	4642      	mov	r2, r8
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
 8006ed2:	4648      	mov	r0, r9
 8006ed4:	4b77      	ldr	r3, [pc, #476]	@ (80070b4 <_ZN21WaitingScreenViewBaseC1Ev+0x274>)
 8006ed6:	f104 0804 	add.w	r8, r4, #4
 8006eda:	f8a4 611e 	strh.w	r6, [r4, #286]	@ 0x11e
 8006ede:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8006ee2:	f8a4 6120 	strh.w	r6, [r4, #288]	@ 0x120
 8006ee6:	f884 6122 	strb.w	r6, [r4, #290]	@ 0x122
 8006eea:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8006eee:	f884 511c 	strb.w	r5, [r4, #284]	@ 0x11c
 8006ef2:	f01f f939 	bl	8026168 <memset>
 8006ef6:	4648      	mov	r0, r9
 8006ef8:	f7fd fbea 	bl	80046d0 <_ZN8touchgfx6WidgetC1Ev>
 8006efc:	4b6e      	ldr	r3, [pc, #440]	@ (80070b8 <_ZN21WaitingScreenViewBaseC1Ev+0x278>)
        : typedTextId(id)
 8006efe:	f8a4 6150 	strh.w	r6, [r4, #336]	@ 0x150
 8006f02:	f504 76b6 	add.w	r6, r4, #364	@ 0x16c
 8006f06:	f8c4 3124 	str.w	r3, [r4, #292]	@ 0x124
 8006f0a:	4b6c      	ldr	r3, [pc, #432]	@ (80070bc <_ZN21WaitingScreenViewBaseC1Ev+0x27c>)
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
 8006f12:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 8006f16:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8006f1a:	f8a4 515c 	strh.w	r5, [r4, #348]	@ 0x15c
 8006f1e:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006f22:	f04f 33ff 	mov.w	r3, #4294967295
 8006f26:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
              text(0)
 8006f2a:	e9c4 3559 	strd	r3, r5, [r4, #356]	@ 0x164
 8006f2e:	f009 fca1 	bl	8010874 <_ZN8touchgfx11BoxProgressC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8006f32:	4a63      	ldr	r2, [pc, #396]	@ (80070c0 <_ZN21WaitingScreenViewBaseC1Ev+0x280>)
        setXY(x, y);
 8006f34:	4629      	mov	r1, r5
 8006f36:	4638      	mov	r0, r7
 8006f38:	e9c4 2494 	strd	r2, r4, [r4, #592]	@ 0x250
 8006f3c:	4a61      	ldr	r2, [pc, #388]	@ (80070c4 <_ZN21WaitingScreenViewBaseC1Ev+0x284>)
 8006f3e:	e9c4 2596 	strd	r2, r5, [r4, #600]	@ 0x258
 8006f42:	462a      	mov	r2, r5
 8006f44:	f7fd fba3 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8006f48:	4638      	mov	r0, r7
 8006f4a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8006f4e:	f7fc fb29 	bl	80035a4 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8006f52:	4638      	mov	r0, r7
 8006f54:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006f58:	f7fc fb26 	bl	80035a8 <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 8006f5c:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006f60:	4639      	mov	r1, r7
 8006f62:	4640      	mov	r0, r8
 8006f64:	66a2      	str	r2, [r4, #104]	@ 0x68
 8006f66:	2709      	movs	r7, #9
 8006f68:	f009 febe 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-88, -35);
 8006f6c:	4658      	mov	r0, fp
 8006f6e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006f72:	f06f 0157 	mvn.w	r1, #87	@ 0x57
 8006f76:	f7fd fb8a 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8006f7a:	2208      	movs	r2, #8
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 8006f7c:	a90a      	add	r1, sp, #40	@ 0x28
 8006f7e:	4658      	mov	r0, fp
 8006f80:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8006f84:	f00d f9b3 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006f88:	4659      	mov	r1, fp
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	f009 feac 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 8006f90:	462a      	mov	r2, r5
 8006f92:	4629      	mov	r1, r5
 8006f94:	9802      	ldr	r0, [sp, #8]
 8006f96:	f7fd fb7a 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 8006f9a:	a90a      	add	r1, sp, #40	@ 0x28
 8006f9c:	9802      	ldr	r0, [sp, #8]
 8006f9e:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8006fa2:	f00d f9a4 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006fa6:	9902      	ldr	r1, [sp, #8]
 8006fa8:	4640      	mov	r0, r8
 8006faa:	f009 fe9d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 8006fae:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	9803      	ldr	r0, [sp, #12]
 8006fb6:	f7fd fb6a 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 8006fba:	a90a      	add	r1, sp, #40	@ 0x28
 8006fbc:	9803      	ldr	r0, [sp, #12]
 8006fbe:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8006fc2:	f00d f994 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006fc6:	9903      	ldr	r1, [sp, #12]
 8006fc8:	4640      	mov	r0, r8
 8006fca:	f009 fe8d 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8006fce:	270a      	movs	r7, #10
    button1.setXY(268, 400);
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006fd6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8006fda:	f7fd fb58 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 8006fde:	aa0a      	add	r2, sp, #40	@ 0x28
 8006fe0:	a909      	add	r1, sp, #36	@ 0x24
 8006fe2:	4650      	mov	r0, sl
 8006fe4:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8006fe8:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8006fec:	f00d f857 	bl	801409e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8006ff0:	f504 7214 	add.w	r2, r4, #592	@ 0x250
 8006ff4:	4651      	mov	r1, sl
 8006ff6:	4640      	mov	r0, r8
        boundingArea = calculateBoundingArea();
 8006ff8:	f10d 0a10 	add.w	sl, sp, #16
        action = &callback;
 8006ffc:	f8c4 2118 	str.w	r2, [r4, #280]	@ 0x118
 8007000:	f009 fe72 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(377, 430);
 8007004:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8007008:	4648      	mov	r0, r9
 800700a:	f240 1179 	movw	r1, #377	@ 0x179
 800700e:	f7fd fb3e 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8007012:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8007016:	4649      	mov	r1, r9
 8007018:	4650      	mov	r0, sl
        color = newColor;
 800701a:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        linespace = space;
 800701e:	f8a4 5158 	strh.w	r5, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 8007022:	f00c fd47 	bl	8013ab4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8007026:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 800702a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 800702e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007032:	4b22      	ldr	r3, [pc, #136]	@ (80070bc <_ZN21WaitingScreenViewBaseC1Ev+0x27c>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZVLI));
 8007034:	a90a      	add	r1, sp, #40	@ 0x28
 8007036:	4648      	mov	r0, r9
 8007038:	930a      	str	r3, [sp, #40]	@ 0x28
 800703a:	2306      	movs	r3, #6
 800703c:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8007040:	f00c ffd2 	bl	8013fe8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007044:	4649      	mov	r1, r9
 8007046:	4640      	mov	r0, r8
 8007048:	f009 fe4e 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxProgress1.setXY(300, 342);
 800704c:	4630      	mov	r0, r6
 800704e:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8007052:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8007056:	f7fd fb1a 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(0, 0, 300, 10);
 800705a:	462a      	mov	r2, r5
 800705c:	4629      	mov	r1, r5
 800705e:	4630      	mov	r0, r6
 8007060:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007064:	9700      	str	r7, [sp, #0]
 8007066:	f009 fb5e 	bl	8010726 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 100);
 800706a:	462b      	mov	r3, r5
 800706c:	2264      	movs	r2, #100	@ 0x64
 800706e:	4629      	mov	r1, r5
 8007070:	4630      	mov	r0, r6
 8007072:	9500      	str	r5, [sp, #0]
 8007074:	f009 fc76 	bl	8010964 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8007078:	4629      	mov	r1, r5
 800707a:	4630      	mov	r0, r6
 800707c:	f009 fc51 	bl	8010922 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_SMALL_ID));
 8007080:	a90a      	add	r1, sp, #40	@ 0x28
 8007082:	4630      	mov	r0, r6
 8007084:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8007088:	f009 fdc0 	bl	8010c0c <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFromRGB(0, 240, 255));
 800708c:	4630      	mov	r0, r6
 800708e:	490e      	ldr	r1, [pc, #56]	@ (80070c8 <_ZN21WaitingScreenViewBaseC1Ev+0x288>)
 8007090:	f009 fb33 	bl	80106fa <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 8007094:	4630      	mov	r0, r6
 8007096:	213c      	movs	r1, #60	@ 0x3c
 8007098:	f009 fb5d 	bl	8010756 <_ZN8touchgfx11BoxProgress8setValueEi>
 800709c:	4640      	mov	r0, r8
 800709e:	4631      	mov	r1, r6
 80070a0:	f009 fe22 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80070a4:	4620      	mov	r0, r4
 80070a6:	b00d      	add	sp, #52	@ 0x34
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	080295fc 	.word	0x080295fc
 80070b0:	0802a1a4 	.word	0x0802a1a4
 80070b4:	0802a20c 	.word	0x0802a20c
 80070b8:	0802a114 	.word	0x0802a114
 80070bc:	080289bc 	.word	0x080289bc
 80070c0:	080295e4 	.word	0x080295e4
 80070c4:	08006e29 	.word	0x08006e29
 80070c8:	ff00f0ff 	.word	0xff00f0ff

080070cc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80070cc:	4770      	bx	lr

080070ce <_ZN19FrontendApplicationD0Ev>:
 80070ce:	b510      	push	{r4, lr}
 80070d0:	4604      	mov	r4, r0
 80070d2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80070d6:	f01e fa32 	bl	802553e <_ZdlPvj>
 80070da:	4620      	mov	r0, r4
 80070dc:	bd10      	pop	{r4, pc}

080070de <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80070de:	b510      	push	{r4, lr}
 80070e0:	4604      	mov	r4, r0
    {
        model.tick();
 80070e2:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80070e6:	f000 f812 	bl	800710e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80070ea:	4620      	mov	r0, r4
    }
 80070ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80070f0:	f00f bf5c 	b.w	8016fac <_ZN8touchgfx11Application15handleTickEventEv>

080070f4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80070f4:	b510      	push	{r4, lr}
 80070f6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80070f8:	f7fd f92c 	bl	8004354 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80070fc:	4b01      	ldr	r3, [pc, #4]	@ (8007104 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80070fe:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8007100:	6023      	str	r3, [r4, #0]
}
 8007102:	bd10      	pop	{r4, pc}
 8007104:	08029634 	.word	0x08029634

08007108 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8007108:	2200      	movs	r2, #0
 800710a:	6002      	str	r2, [r0, #0]
{

}
 800710c:	4770      	bx	lr

0800710e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800710e:	4770      	bx	lr

08007110 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8007110:	4770      	bx	lr

08007112 <_ZThn4_N16Screen1PresenterD1Ev>:
 8007112:	3804      	subs	r0, #4
 8007114:	4770      	bx	lr

08007116 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8007116:	4770      	bx	lr

08007118 <_ZN16Screen1PresenterD0Ev>:
 8007118:	b510      	push	{r4, lr}
 800711a:	4604      	mov	r4, r0
 800711c:	2110      	movs	r1, #16
 800711e:	f01e fa0e 	bl	802553e <_ZdlPvj>
 8007122:	4620      	mov	r0, r4
 8007124:	bd10      	pop	{r4, pc}

08007126 <_ZThn4_N16Screen1PresenterD0Ev>:
 8007126:	f1a0 0004 	sub.w	r0, r0, #4
 800712a:	e7f5      	b.n	8007118 <_ZN16Screen1PresenterD0Ev>

0800712c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 800712c:	2200      	movs	r2, #0
    : view(v)
 800712e:	60c1      	str	r1, [r0, #12]
 8007130:	6082      	str	r2, [r0, #8]
 8007132:	4a02      	ldr	r2, [pc, #8]	@ (800713c <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8007134:	6002      	str	r2, [r0, #0]
 8007136:	3218      	adds	r2, #24
 8007138:	6042      	str	r2, [r0, #4]
}
 800713a:	4770      	bx	lr
 800713c:	08029688 	.word	0x08029688

08007140 <_ZN16Screen1Presenter17updateBrilloValueEi>:

}
int brillo_actual = 7;
void Screen1Presenter::updateBrilloValue(int value){
	if( value == 1){
		if(brillo_actual < 15){
 8007140:	4a07      	ldr	r2, [pc, #28]	@ (8007160 <_ZN16Screen1Presenter17updateBrilloValueEi+0x20>)
	if( value == 1){
 8007142:	2901      	cmp	r1, #1
		if(brillo_actual < 15){
 8007144:	6813      	ldr	r3, [r2, #0]
	if( value == 1){
 8007146:	d107      	bne.n	8007158 <_ZN16Screen1Presenter17updateBrilloValueEi+0x18>
		if(brillo_actual < 15){
 8007148:	2b0e      	cmp	r3, #14
 800714a:	dc01      	bgt.n	8007150 <_ZN16Screen1Presenter17updateBrilloValueEi+0x10>
			brillo_actual++;
 800714c:	3301      	adds	r3, #1
		}
	} else {
		if(brillo_actual > 0){
			brillo_actual--;
 800714e:	6013      	str	r3, [r2, #0]
		}
	}

	view.sendBrilloValue(brillo_actual);
 8007150:	6811      	ldr	r1, [r2, #0]
 8007152:	68c0      	ldr	r0, [r0, #12]
 8007154:	f000 b82a 	b.w	80071ac <_ZN11Screen1View15sendBrilloValueEi>
		if(brillo_actual > 0){
 8007158:	2b00      	cmp	r3, #0
 800715a:	ddf9      	ble.n	8007150 <_ZN16Screen1Presenter17updateBrilloValueEi+0x10>
			brillo_actual--;
 800715c:	3b01      	subs	r3, #1
 800715e:	e7f6      	b.n	800714e <_ZN16Screen1Presenter17updateBrilloValueEi+0xe>
 8007160:	24000038 	.word	0x24000038

08007164 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8007164:	4770      	bx	lr
	...

08007168 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8007168:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <_ZN11Screen1ViewD1Ev+0x10>)
 800716a:	b510      	push	{r4, lr}
 800716c:	4604      	mov	r4, r0
 800716e:	6003      	str	r3, [r0, #0]
 8007170:	f7fd f9fa 	bl	8004568 <_ZN15Screen1ViewBaseD1Ev>
 8007174:	4620      	mov	r0, r4
 8007176:	bd10      	pop	{r4, pc}
 8007178:	080296b4 	.word	0x080296b4

0800717c <_ZN11Screen1ViewD0Ev>:
 800717c:	b510      	push	{r4, lr}
 800717e:	4604      	mov	r4, r0
 8007180:	f7ff fff2 	bl	8007168 <_ZN11Screen1ViewD1Ev>
 8007184:	f44f 712d 	mov.w	r1, #692	@ 0x2b4
 8007188:	4620      	mov	r0, r4
 800718a:	f01e f9d8 	bl	802553e <_ZdlPvj>
 800718e:	4620      	mov	r0, r4
 8007190:	bd10      	pop	{r4, pc}
	...

08007194 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8007194:	b510      	push	{r4, lr}
 8007196:	4604      	mov	r4, r0
 8007198:	f7fd fb3e 	bl	8004818 <_ZN15Screen1ViewBaseC1Ev>
 800719c:	4b01      	ldr	r3, [pc, #4]	@ (80071a4 <_ZN11Screen1ViewC1Ev+0x10>)
}
 800719e:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80071a0:	6023      	str	r3, [r4, #0]
}
 80071a2:	bd10      	pop	{r4, pc}
 80071a4:	080296b4 	.word	0x080296b4

080071a8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80071a8:	f7fd b9df 	b.w	800456a <_ZN15Screen1ViewBase11setupScreenEv>

080071ac <_ZN11Screen1View15sendBrilloValueEi>:
void Screen1View::sendBrilloValue(int valor)
{
 80071ac:	b538      	push	{r3, r4, r5, lr}
	int test = valor;
	Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%d", test);
 80071ae:	f500 751d 	add.w	r5, r0, #628	@ 0x274
{
 80071b2:	4604      	mov	r4, r0
 80071b4:	460b      	mov	r3, r1
	Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%d", test);
 80071b6:	4a06      	ldr	r2, [pc, #24]	@ (80071d0 <_ZN11Screen1View15sendBrilloValueEi+0x24>)
 80071b8:	4628      	mov	r0, r5
 80071ba:	2118      	movs	r1, #24
 80071bc:	f013 fa86 	bl	801a6cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea2.setWildcard(textArea2Buffer);
    textArea2.invalidate();
 80071c0:	f504 70f0 	add.w	r0, r4, #480	@ 0x1e0
 80071c4:	f8c4 5228 	str.w	r5, [r4, #552]	@ 0x228
}
 80071c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    textArea2.invalidate();
 80071cc:	f010 bf15 	b.w	8017ffa <_ZNK8touchgfx8Drawable10invalidateEv>
 80071d0:	080296a8 	.word	0x080296a8

080071d4 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {}
 80071d4:	4770      	bx	lr

080071d6 <_ZThn4_N16Screen2PresenterD1Ev>:
 80071d6:	3804      	subs	r0, #4
 80071d8:	4770      	bx	lr

080071da <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 80071da:	4770      	bx	lr

080071dc <_ZN16Screen2PresenterD0Ev>:
 80071dc:	b510      	push	{r4, lr}
 80071de:	4604      	mov	r4, r0
 80071e0:	2110      	movs	r1, #16
 80071e2:	f01e f9ac 	bl	802553e <_ZdlPvj>
 80071e6:	4620      	mov	r0, r4
 80071e8:	bd10      	pop	{r4, pc}

080071ea <_ZThn4_N16Screen2PresenterD0Ev>:
 80071ea:	f1a0 0004 	sub.w	r0, r0, #4
 80071ee:	e7f5      	b.n	80071dc <_ZN16Screen2PresenterD0Ev>

080071f0 <_ZN16Screen2PresenterC1ER11Screen2View>:
 80071f0:	2200      	movs	r2, #0
    : view(v)
 80071f2:	60c1      	str	r1, [r0, #12]
 80071f4:	6082      	str	r2, [r0, #8]
 80071f6:	4a02      	ldr	r2, [pc, #8]	@ (8007200 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 80071f8:	6002      	str	r2, [r0, #0]
 80071fa:	3218      	adds	r2, #24
 80071fc:	6042      	str	r2, [r0, #4]
}
 80071fe:	4770      	bx	lr
 8007200:	080296ec 	.word	0x080296ec

08007204 <_ZN16Screen2Presenter15selectMatrizLedEiii>:

}


void Screen2Presenter:: selectMatrizLed(int matriz, int row, int column)
{
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	460c      	mov	r4, r1
 8007208:	4615      	mov	r5, r2
 800720a:	461e      	mov	r6, r3
	uint8_t columna = (uint8_t)column;
	//MatrizLedSelect(num_mx, fila, columna);
    // Avanzamos una posición por cada toque

    // Apagar todo primero
    MAX7219_ClearAll();
 800720c:	f7f9 faf2 	bl	80007f4 <MAX7219_ClearAll>

    // Prender el nuevo LED
    MatrizLedSelect(num_mx, fila, columna);
 8007210:	b2e9      	uxtb	r1, r5
 8007212:	b2f2      	uxtb	r2, r6
 8007214:	b2e0      	uxtb	r0, r4
    //MAX7219_LightSingleLed(current_matrix, current_row, current_bit);
}
 8007216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MatrizLedSelect(num_mx, fila, columna);
 800721a:	f7f9 bab1 	b.w	8000780 <MatrizLedSelect>

0800721e <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 800721e:	4770      	bx	lr

08007220 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8007220:	4b03      	ldr	r3, [pc, #12]	@ (8007230 <_ZN11Screen2ViewD1Ev+0x10>)
 8007222:	b510      	push	{r4, lr}
 8007224:	4604      	mov	r4, r0
 8007226:	6003      	str	r3, [r0, #0]
 8007228:	f7fd fca1 	bl	8004b6e <_ZN15Screen2ViewBaseD1Ev>
 800722c:	4620      	mov	r0, r4
 800722e:	bd10      	pop	{r4, pc}
 8007230:	08029714 	.word	0x08029714

08007234 <_ZN11Screen2ViewD0Ev>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	f7ff fff2 	bl	8007220 <_ZN11Screen2ViewD1Ev>
 800723c:	f241 3104 	movw	r1, #4868	@ 0x1304
 8007240:	4620      	mov	r0, r4
 8007242:	f01e f97c 	bl	802553e <_ZdlPvj>
 8007246:	4620      	mov	r0, r4
 8007248:	bd10      	pop	{r4, pc}
	...

0800724c <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 800724c:	b510      	push	{r4, lr}
 800724e:	4604      	mov	r4, r0
 8007250:	f7fe f85e 	bl	8005310 <_ZN15Screen2ViewBaseC1Ev>
 8007254:	4b01      	ldr	r3, [pc, #4]	@ (800725c <_ZN11Screen2ViewC1Ev+0x10>)
}
 8007256:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8007258:	6023      	str	r3, [r4, #0]
}
 800725a:	bd10      	pop	{r4, pc}
 800725c:	08029714 	.word	0x08029714

08007260 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8007260:	f7fd bc86 	b.w	8004b70 <_ZN15Screen2ViewBase11setupScreenEv>

08007264 <_ZN22WaitingScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~WaitingScreenPresenter() {}
 8007264:	4770      	bx	lr

08007266 <_ZThn4_N22WaitingScreenPresenterD1Ev>:
 8007266:	3804      	subs	r0, #4
 8007268:	4770      	bx	lr

0800726a <_ZN22WaitingScreenPresenter10deactivateEv>:
}

void WaitingScreenPresenter::activate()
{

}
 800726a:	4770      	bx	lr

0800726c <_ZN22WaitingScreenPresenterD0Ev>:
 800726c:	b510      	push	{r4, lr}
 800726e:	4604      	mov	r4, r0
 8007270:	2110      	movs	r1, #16
 8007272:	f01e f964 	bl	802553e <_ZdlPvj>
 8007276:	4620      	mov	r0, r4
 8007278:	bd10      	pop	{r4, pc}

0800727a <_ZThn4_N22WaitingScreenPresenterD0Ev>:
 800727a:	f1a0 0004 	sub.w	r0, r0, #4
 800727e:	e7f5      	b.n	800726c <_ZN22WaitingScreenPresenterD0Ev>

08007280 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView>:
 8007280:	2200      	movs	r2, #0
    : view(v)
 8007282:	60c1      	str	r1, [r0, #12]
 8007284:	6082      	str	r2, [r0, #8]
 8007286:	4a02      	ldr	r2, [pc, #8]	@ (8007290 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView+0x10>)
 8007288:	6002      	str	r2, [r0, #0]
 800728a:	3218      	adds	r2, #24
 800728c:	6042      	str	r2, [r0, #4]
}
 800728e:	4770      	bx	lr
 8007290:	0802974c 	.word	0x0802974c

08007294 <_ZN17WaitingScreenView14tearDownScreenEv>:
}

void WaitingScreenView::tearDownScreen()
{
    WaitingScreenViewBase::tearDownScreen();
}
 8007294:	4770      	bx	lr
	...

08007298 <_ZN17WaitingScreenViewD1Ev>:

class WaitingScreenView : public WaitingScreenViewBase
{
public:
    WaitingScreenView();
    virtual ~WaitingScreenView() {}
 8007298:	4b03      	ldr	r3, [pc, #12]	@ (80072a8 <_ZN17WaitingScreenViewD1Ev+0x10>)
 800729a:	b510      	push	{r4, lr}
 800729c:	4604      	mov	r4, r0
 800729e:	6003      	str	r3, [r0, #0]
 80072a0:	f7ff fd96 	bl	8006dd0 <_ZN21WaitingScreenViewBaseD1Ev>
 80072a4:	4620      	mov	r0, r4
 80072a6:	bd10      	pop	{r4, pc}
 80072a8:	08029774 	.word	0x08029774

080072ac <_ZN17WaitingScreenViewD0Ev>:
 80072ac:	b510      	push	{r4, lr}
 80072ae:	4604      	mov	r4, r0
 80072b0:	f7ff fff2 	bl	8007298 <_ZN17WaitingScreenViewD1Ev>
 80072b4:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80072b8:	4620      	mov	r0, r4
 80072ba:	f01e f940 	bl	802553e <_ZdlPvj>
 80072be:	4620      	mov	r0, r4
 80072c0:	bd10      	pop	{r4, pc}
	...

080072c4 <_ZN17WaitingScreenViewC1Ev>:
WaitingScreenView::WaitingScreenView()
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4604      	mov	r4, r0
 80072c8:	f7ff fdba 	bl	8006e40 <_ZN21WaitingScreenViewBaseC1Ev>
 80072cc:	4b01      	ldr	r3, [pc, #4]	@ (80072d4 <_ZN17WaitingScreenViewC1Ev+0x10>)
}
 80072ce:	4620      	mov	r0, r4
WaitingScreenView::WaitingScreenView()
 80072d0:	6023      	str	r3, [r4, #0]
}
 80072d2:	bd10      	pop	{r4, pc}
 80072d4:	08029774 	.word	0x08029774

080072d8 <_ZN17WaitingScreenView11setupScreenEv>:
    WaitingScreenViewBase::setupScreen();
 80072d8:	f7ff bd7b 	b.w	8006dd2 <_ZN21WaitingScreenViewBase11setupScreenEv>

080072dc <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80072dc:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80072de:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80072e2:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80072e4:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80072e6:	2302      	movs	r3, #2
 80072e8:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80072ea:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80072ee:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80072f2:	4770      	bx	lr

080072f4 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80072f4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80072f8:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80072fa:	bf04      	itt	eq
 80072fc:	2300      	moveq	r3, #0
 80072fe:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8007302:	2000      	movs	r0, #0
 8007304:	4770      	bx	lr

08007306 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8007306:	2000      	movs	r0, #0
 8007308:	4770      	bx	lr

0800730a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800730a:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800730c:	6904      	ldr	r4, [r0, #16]
 800730e:	8900      	ldrh	r0, [r0, #8]
 8007310:	46a4      	mov	ip, r4
}
 8007312:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007316:	4760      	bx	ip

08007318 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8007318:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800731a:	68c4      	ldr	r4, [r0, #12]
 800731c:	8900      	ldrh	r0, [r0, #8]
 800731e:	46a4      	mov	ip, r4
}
 8007320:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007324:	4760      	bx	ip

08007326 <FT6X06_GestureConfig>:
{
 8007326:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8007328:	f100 0518 	add.w	r5, r0, #24
{
 800732c:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800732e:	7809      	ldrb	r1, [r1, #0]
 8007330:	4628      	mov	r0, r5
 8007332:	f000 f911 	bl	8007558 <ft6x06_radian_value>
 8007336:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8007338:	7931      	ldrb	r1, [r6, #4]
 800733a:	4628      	mov	r0, r5
 800733c:	f000 f918 	bl	8007570 <ft6x06_offset_left_right>
 8007340:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8007342:	7a31      	ldrb	r1, [r6, #8]
 8007344:	4628      	mov	r0, r5
 8007346:	f000 f91f 	bl	8007588 <ft6x06_offset_up_down>
 800734a:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800734c:	7b31      	ldrb	r1, [r6, #12]
 800734e:	4628      	mov	r0, r5
 8007350:	f000 f926 	bl	80075a0 <ft6x06_disatnce_left_right>
 8007354:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8007356:	7c31      	ldrb	r1, [r6, #16]
 8007358:	4628      	mov	r0, r5
 800735a:	f000 f92d 	bl	80075b8 <ft6x06_distance_up_down>
 800735e:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8007360:	7d31      	ldrb	r1, [r6, #20]
 8007362:	4628      	mov	r0, r5
 8007364:	f000 f934 	bl	80075d0 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8007368:	42c4      	cmn	r4, r0
}
 800736a:	bf14      	ite	ne
 800736c:	f04f 30ff 	movne.w	r0, #4294967295
 8007370:	2000      	moveq	r0, #0
 8007372:	bd70      	pop	{r4, r5, r6, pc}

08007374 <FT6X06_ReadID>:
{
 8007374:	b513      	push	{r0, r1, r4, lr}
 8007376:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8007378:	3018      	adds	r0, #24
 800737a:	f10d 0107 	add.w	r1, sp, #7
 800737e:	f000 f93f 	bl	8007600 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8007382:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007386:	6023      	str	r3, [r4, #0]
}
 8007388:	b002      	add	sp, #8
 800738a:	bd10      	pop	{r4, pc}

0800738c <FT6X06_GetState>:
{
 800738c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800738e:	f100 0518 	add.w	r5, r0, #24
{
 8007392:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8007394:	a901      	add	r1, sp, #4
 8007396:	4628      	mov	r0, r5
 8007398:	f000 f8d1 	bl	800753e <ft6x06_td_status>
 800739c:	bb08      	cbnz	r0, 80073e2 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800739e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	bf98      	it	ls
 80073a6:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80073a8:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80073aa:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80073ac:	2103      	movs	r1, #3
 80073ae:	4628      	mov	r0, r5
 80073b0:	eb0d 0203 	add.w	r2, sp, r3
 80073b4:	f000 f8b0 	bl	8007518 <ft6x06_read_reg>
 80073b8:	b9b0      	cbnz	r0, 80073e8 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80073ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80073be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80073c2:	021b      	lsls	r3, r3, #8
 80073c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80073c8:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80073ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80073ce:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80073d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80073da:	4313      	orrs	r3, r2
 80073dc:	60a3      	str	r3, [r4, #8]
}
 80073de:	b003      	add	sp, #12
 80073e0:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80073e2:	f04f 30ff 	mov.w	r0, #4294967295
 80073e6:	e7df      	b.n	80073a8 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80073ec:	e7f7      	b.n	80073de <FT6X06_GetState+0x52>

080073ee <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80073ee:	3018      	adds	r0, #24
 80073f0:	f000 b8a0 	b.w	8007534 <ft6x06_gest_id>

080073f4 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80073f4:	2101      	movs	r1, #1
 80073f6:	3018      	adds	r0, #24
 80073f8:	f000 b8f6 	b.w	80075e8 <ft6x06_g_mode>

080073fc <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80073fc:	2100      	movs	r1, #0
 80073fe:	3018      	adds	r0, #24
 8007400:	f000 b8f2 	b.w	80075e8 <ft6x06_g_mode>

08007404 <FT6X06_Init>:
{
 8007404:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8007406:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800740a:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800740c:	b96b      	cbnz	r3, 800742a <FT6X06_Init+0x26>
    pObj->IO.Init();
 800740e:	6803      	ldr	r3, [r0, #0]
 8007410:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8007412:	4620      	mov	r0, r4
 8007414:	f7ff fff2 	bl	80073fc <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8007418:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800741a:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800741e:	bf18      	it	ne
 8007420:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8007422:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8007426:	4240      	negs	r0, r0
}
 8007428:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 800742a:	2000      	movs	r0, #0
  return ret;
 800742c:	e7fc      	b.n	8007428 <FT6X06_Init+0x24>

0800742e <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 800742e:	2000      	movs	r0, #0
 8007430:	4770      	bx	lr

08007432 <FT6X06_GetMultiTouchState>:
{
 8007432:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8007434:	f100 0518 	add.w	r5, r0, #24
{
 8007438:	b085      	sub	sp, #20
 800743a:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800743c:	4628      	mov	r0, r5
 800743e:	a901      	add	r1, sp, #4
 8007440:	f000 f87d 	bl	800753e <ft6x06_td_status>
 8007444:	2800      	cmp	r0, #0
 8007446:	d145      	bne.n	80074d4 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8007448:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800744c:	2b02      	cmp	r3, #2
 800744e:	bf98      	it	ls
 8007450:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8007452:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8007454:	230c      	movs	r3, #12
 8007456:	aa01      	add	r2, sp, #4
 8007458:	2103      	movs	r1, #3
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f85c 	bl	8007518 <ft6x06_read_reg>
 8007460:	2800      	cmp	r0, #0
 8007462:	d13a      	bne.n	80074da <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8007464:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007468:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800746c:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800746e:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8007470:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8007474:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8007476:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8007478:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800747c:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8007480:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8007482:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800748c:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800748e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8007492:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8007494:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007498:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800749a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800749e:	091b      	lsrs	r3, r3, #4
 80074a0:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80074a2:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80074a4:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80074a6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80074aa:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80074ac:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80074ae:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80074b2:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80074b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80074b8:	021b      	lsls	r3, r3, #8
 80074ba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80074be:	430b      	orrs	r3, r1
 80074c0:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 80074c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80074c6:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80074c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80074cc:	091b      	lsrs	r3, r3, #4
 80074ce:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80074d0:	b005      	add	sp, #20
 80074d2:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	e7bb      	b.n	8007452 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80074de:	e7f7      	b.n	80074d0 <FT6X06_GetMultiTouchState+0x9e>

080074e0 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80074e0:	b190      	cbz	r0, 8007508 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80074e2:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80074e4:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80074e6:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80074e8:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80074ea:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80074ec:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80074ee:	68ca      	ldr	r2, [r1, #12]
 80074f0:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80074f2:	690a      	ldr	r2, [r1, #16]
 80074f4:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80074f6:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80074f8:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80074fa:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80074fc:	4a04      	ldr	r2, [pc, #16]	@ (8007510 <FT6X06_RegisterBusIO+0x30>)
 80074fe:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8007500:	4a04      	ldr	r2, [pc, #16]	@ (8007514 <FT6X06_RegisterBusIO+0x34>)
 8007502:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8007504:	b103      	cbz	r3, 8007508 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8007506:	4718      	bx	r3
}
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	0800730b 	.word	0x0800730b
 8007514:	08007319 	.word	0x08007319

08007518 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8007518:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800751a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800751e:	46a4      	mov	ip, r4
}
 8007520:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007524:	4760      	bx	ip

08007526 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8007526:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8007528:	6804      	ldr	r4, [r0, #0]
 800752a:	6880      	ldr	r0, [r0, #8]
 800752c:	46a4      	mov	ip, r4
}
 800752e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8007532:	4760      	bx	ip

08007534 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8007534:	2301      	movs	r3, #1
{
 8007536:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8007538:	4619      	mov	r1, r3
 800753a:	f7ff bfed 	b.w	8007518 <ft6x06_read_reg>

0800753e <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800753e:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8007540:	460a      	mov	r2, r1
{
 8007542:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8007544:	2301      	movs	r3, #1
 8007546:	2102      	movs	r1, #2
 8007548:	f7ff ffe6 	bl	8007518 <ft6x06_read_reg>
  
  if(ret == 0)
 800754c:	b918      	cbnz	r0, 8007556 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 800754e:	7823      	ldrb	r3, [r4, #0]
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8007556:	bd10      	pop	{r4, pc}

08007558 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007558:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800755a:	2301      	movs	r3, #1
{
 800755c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8007560:	f10d 0207 	add.w	r2, sp, #7
 8007564:	2191      	movs	r1, #145	@ 0x91
 8007566:	f7ff ffde 	bl	8007526 <ft6x06_write_reg>
}
 800756a:	b003      	add	sp, #12
 800756c:	f85d fb04 	ldr.w	pc, [sp], #4

08007570 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007570:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8007572:	2301      	movs	r3, #1
{
 8007574:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8007578:	f10d 0207 	add.w	r2, sp, #7
 800757c:	2192      	movs	r1, #146	@ 0x92
 800757e:	f7ff ffd2 	bl	8007526 <ft6x06_write_reg>
}
 8007582:	b003      	add	sp, #12
 8007584:	f85d fb04 	ldr.w	pc, [sp], #4

08007588 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8007588:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800758a:	2301      	movs	r3, #1
{
 800758c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8007590:	f10d 0207 	add.w	r2, sp, #7
 8007594:	2193      	movs	r1, #147	@ 0x93
 8007596:	f7ff ffc6 	bl	8007526 <ft6x06_write_reg>
}
 800759a:	b003      	add	sp, #12
 800759c:	f85d fb04 	ldr.w	pc, [sp], #4

080075a0 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80075a0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80075a2:	2301      	movs	r3, #1
{
 80075a4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80075a8:	f10d 0207 	add.w	r2, sp, #7
 80075ac:	2194      	movs	r1, #148	@ 0x94
 80075ae:	f7ff ffba 	bl	8007526 <ft6x06_write_reg>
}
 80075b2:	b003      	add	sp, #12
 80075b4:	f85d fb04 	ldr.w	pc, [sp], #4

080075b8 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80075b8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80075ba:	2301      	movs	r3, #1
{
 80075bc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80075c0:	f10d 0207 	add.w	r2, sp, #7
 80075c4:	2195      	movs	r1, #149	@ 0x95
 80075c6:	f7ff ffae 	bl	8007526 <ft6x06_write_reg>
}
 80075ca:	b003      	add	sp, #12
 80075cc:	f85d fb04 	ldr.w	pc, [sp], #4

080075d0 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80075d0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80075d2:	2301      	movs	r3, #1
{
 80075d4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80075d8:	f10d 0207 	add.w	r2, sp, #7
 80075dc:	2196      	movs	r1, #150	@ 0x96
 80075de:	f7ff ffa2 	bl	8007526 <ft6x06_write_reg>
}
 80075e2:	b003      	add	sp, #12
 80075e4:	f85d fb04 	ldr.w	pc, [sp], #4

080075e8 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80075e8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80075ea:	2301      	movs	r3, #1
{
 80075ec:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80075f0:	f10d 0207 	add.w	r2, sp, #7
 80075f4:	21a4      	movs	r1, #164	@ 0xa4
 80075f6:	f7ff ff96 	bl	8007526 <ft6x06_write_reg>
}
 80075fa:	b003      	add	sp, #12
 80075fc:	f85d fb04 	ldr.w	pc, [sp], #4

08007600 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8007600:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8007602:	2301      	movs	r3, #1
 8007604:	21a8      	movs	r1, #168	@ 0xa8
 8007606:	f7ff bf87 	b.w	8007518 <ft6x06_read_reg>
	...

0800760c <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800760c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800760e:	2201      	movs	r2, #1
 8007610:	4b07      	ldr	r3, [pc, #28]	@ (8007630 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8007612:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8007616:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007618:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800761a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 800761c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800761e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007622:	f006 f9d9 	bl	800d9d8 <HAL_SDRAM_SendCommand>
 8007626:	3800      	subs	r0, #0
 8007628:	bf18      	it	ne
 800762a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800762c:	4240      	negs	r0, r0
 800762e:	bd08      	pop	{r3, pc}
 8007630:	2400c40c 	.word	0x2400c40c

08007634 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8007634:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8007636:	2202      	movs	r2, #2
 8007638:	4b08      	ldr	r3, [pc, #32]	@ (800765c <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800763a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 800763e:	2101      	movs	r1, #1
 8007640:	2200      	movs	r2, #0
 8007642:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8007646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800764a:	4619      	mov	r1, r3
 800764c:	f006 f9c4 	bl	800d9d8 <HAL_SDRAM_SendCommand>
 8007650:	3800      	subs	r0, #0
 8007652:	bf18      	it	ne
 8007654:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8007656:	4240      	negs	r0, r0
 8007658:	bd08      	pop	{r3, pc}
 800765a:	bf00      	nop
 800765c:	2400c40c 	.word	0x2400c40c

08007660 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8007660:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8007662:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8007666:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8007668:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 800766a:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800766c:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 800766e:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8007670:	6991      	ldr	r1, [r2, #24]
 8007672:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8007674:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8007676:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8007678:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800767a:	4907      	ldr	r1, [pc, #28]	@ (8007698 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 800767c:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 800767e:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8007680:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8007682:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8007686:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800768a:	f006 f9a5 	bl	800d9d8 <HAL_SDRAM_SendCommand>
 800768e:	3800      	subs	r0, #0
 8007690:	bf18      	it	ne
 8007692:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8007694:	4240      	negs	r0, r0
 8007696:	bd10      	pop	{r4, pc}
 8007698:	2400c40c 	.word	0x2400c40c

0800769c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800769c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800769e:	4b08      	ldr	r3, [pc, #32]	@ (80076c0 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80076a0:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80076a4:	2108      	movs	r1, #8
 80076a6:	2200      	movs	r2, #0
 80076a8:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80076ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076b0:	4619      	mov	r1, r3
 80076b2:	f006 f991 	bl	800d9d8 <HAL_SDRAM_SendCommand>
 80076b6:	3800      	subs	r0, #0
 80076b8:	bf18      	it	ne
 80076ba:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80076bc:	4240      	negs	r0, r0
 80076be:	bd08      	pop	{r3, pc}
 80076c0:	2400c40c 	.word	0x2400c40c

080076c4 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80076c4:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80076c6:	f006 f9a6 	bl	800da16 <HAL_SDRAM_ProgramRefreshRate>
 80076ca:	3800      	subs	r0, #0
 80076cc:	bf18      	it	ne
 80076ce:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80076d0:	4240      	negs	r0, r0
 80076d2:	bd08      	pop	{r3, pc}

080076d4 <IS42S32800J_Init>:
{
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80076d8:	6809      	ldr	r1, [r1, #0]
{
 80076da:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80076dc:	f7ff ff96 	bl	800760c <IS42S32800J_ClockEnable>
 80076e0:	b110      	cbz	r0, 80076e8 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80076e8:	f001 fc7c 	bl	8008fe4 <HAL_GetTick>
 80076ec:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80076ee:	f001 fc79 	bl	8008fe4 <HAL_GetTick>
 80076f2:	4286      	cmp	r6, r0
 80076f4:	d0fb      	beq.n	80076ee <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80076f6:	6821      	ldr	r1, [r4, #0]
 80076f8:	4628      	mov	r0, r5
 80076fa:	f7ff ff9b 	bl	8007634 <IS42S32800J_Precharge>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d1ef      	bne.n	80076e2 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8007702:	4628      	mov	r0, r5
 8007704:	e9d4 1200 	ldrd	r1, r2, [r4]
 8007708:	f7ff ffc8 	bl	800769c <IS42S32800J_RefreshMode>
 800770c:	2800      	cmp	r0, #0
 800770e:	d1e8      	bne.n	80076e2 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8007710:	4621      	mov	r1, r4
 8007712:	4628      	mov	r0, r5
 8007714:	f7ff ffa4 	bl	8007660 <IS42S32800J_ModeRegConfig>
 8007718:	2800      	cmp	r0, #0
 800771a:	d1e2      	bne.n	80076e2 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 800771c:	68a1      	ldr	r1, [r4, #8]
 800771e:	4628      	mov	r0, r5
 8007720:	f7ff ffd0 	bl	80076c4 <IS42S32800J_RefreshRate>
 8007724:	3800      	subs	r0, #0
 8007726:	bf18      	it	ne
 8007728:	2001      	movne	r0, #1
 800772a:	4240      	negs	r0, r0
  return ret;
 800772c:	e7db      	b.n	80076e6 <IS42S32800J_Init+0x12>

0800772e <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800772e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8007736:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800773a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800773e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007742:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8007746:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800774a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 800774c:	2000      	movs	r0, #0
 800774e:	4770      	bx	lr

08007750 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8007750:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007752:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8007756:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8007758:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800775c:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800775e:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8007760:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8007762:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8007764:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007766:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8007768:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800776a:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800776c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 800776e:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8007770:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8007772:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007774:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007776:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800777a:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 800777e:	2310      	movs	r3, #16
 8007780:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8007782:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007786:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8007788:	f240 1301 	movw	r3, #257	@ 0x101
 800778c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800778e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007792:	f004 fd28 	bl	800c1e6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8007796:	2800      	cmp	r0, #0

}
 8007798:	bf14      	ite	ne
 800779a:	f06f 0004 	mvnne.w	r0, #4
 800779e:	2000      	moveq	r0, #0
 80077a0:	b015      	add	sp, #84	@ 0x54
 80077a2:	f85d fb04 	ldr.w	pc, [sp], #4

080077a6 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80077a6:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80077a8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80077ac:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80077ae:	bf08      	it	eq
 80077b0:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80077b4:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80077b6:	bf18      	it	ne
 80077b8:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80077bc:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80077be:	a906      	add	r1, sp, #24
{
 80077c0:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80077c2:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80077c4:	2306      	movs	r3, #6
 80077c6:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80077c8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80077ca:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80077ce:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 80077d0:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80077d2:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80077d4:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80077d8:	f004 fc04 	bl	800bfe4 <HAL_QSPI_Command>
 80077dc:	bb20      	cbnz	r0, 8007828 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80077de:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80077e2:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80077e4:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80077e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80077ea:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80077ec:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80077ee:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80077f2:	f04f 0310 	mov.w	r3, #16
 80077f6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80077fa:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80077fe:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8007800:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8007804:	bf14      	ite	ne
 8007806:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 800780a:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800780e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8007810:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007812:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007816:	f004 fce6 	bl	800c1e6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800781a:	2800      	cmp	r0, #0
 800781c:	bf14      	ite	ne
 800781e:	f06f 0004 	mvnne.w	r0, #4
 8007822:	2000      	moveq	r0, #0
}
 8007824:	b015      	add	sp, #84	@ 0x54
 8007826:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8007828:	f06f 0001 	mvn.w	r0, #1
 800782c:	e7fa      	b.n	8007824 <MT25TL01G_WriteEnable+0x7e>

0800782e <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800782e:	2903      	cmp	r1, #3
{
 8007830:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007832:	bf08      	it	eq
 8007834:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8007838:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800783a:	bf18      	it	ne
 800783c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8007840:	4604      	mov	r4, r0
 8007842:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007844:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8007846:	23b7      	movs	r3, #183	@ 0xb7
 8007848:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800784a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800784c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007850:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8007852:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007854:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007856:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800785a:	f7ff ffa4 	bl	80077a6 <MT25TL01G_WriteEnable>
 800785e:	b118      	cbz	r0, 8007868 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8007860:	f06f 0001 	mvn.w	r0, #1
}
 8007864:	b00f      	add	sp, #60	@ 0x3c
 8007866:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800786c:	4669      	mov	r1, sp
 800786e:	4620      	mov	r0, r4
 8007870:	f004 fbb8 	bl	800bfe4 <HAL_QSPI_Command>
 8007874:	2800      	cmp	r0, #0
 8007876:	d1f3      	bne.n	8007860 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8007878:	4629      	mov	r1, r5
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff ff68 	bl	8007750 <MT25TL01G_AutoPollingMemReady>
 8007880:	2800      	cmp	r0, #0
 8007882:	d0ef      	beq.n	8007864 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8007884:	e7ec      	b.n	8007860 <MT25TL01G_Enter4BytesAddressMode+0x32>

08007886 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8007886:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007888:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 800788c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800788e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007892:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8007894:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007896:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8007898:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800789a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800789c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80078a0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80078a2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80078a4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80078a6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80078aa:	f004 fb9b 	bl	800bfe4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80078ae:	2800      	cmp	r0, #0
}
 80078b0:	bf14      	ite	ne
 80078b2:	f06f 0001 	mvnne.w	r0, #1
 80078b6:	2000      	moveq	r0, #0
 80078b8:	b00f      	add	sp, #60	@ 0x3c
 80078ba:	f85d fb04 	ldr.w	pc, [sp], #4

080078be <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80078be:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80078c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80078c4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80078c6:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80078ca:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80078cc:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80078ce:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80078d0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80078d2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80078d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80078d8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80078da:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80078dc:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80078de:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80078e2:	f004 fb7f 	bl	800bfe4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80078e6:	2800      	cmp	r0, #0
}
 80078e8:	bf14      	ite	ne
 80078ea:	f06f 0001 	mvnne.w	r0, #1
 80078ee:	2000      	moveq	r0, #0
 80078f0:	b00f      	add	sp, #60	@ 0x3c
 80078f2:	f85d fb04 	ldr.w	pc, [sp], #4

080078f6 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80078f6:	b500      	push	{lr}
 80078f8:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80078fa:	2903      	cmp	r1, #3
 80078fc:	d80e      	bhi.n	800791c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 80078fe:	e8df f001 	tbb	[pc, r1]
 8007902:	2902      	.short	0x2902
 8007904:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007906:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800790a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800790c:	230e      	movs	r3, #14
 800790e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8007910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007914:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8007916:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800791a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800791c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800791e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8007922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8007926:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8007928:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800792a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800792e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007930:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8007932:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8007936:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007938:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800793a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800793c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8007940:	f004 fca2 	bl	800c288 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8007944:	2800      	cmp	r0, #0
}
 8007946:	bf14      	ite	ne
 8007948:	f06f 0005 	mvnne.w	r0, #5
 800794c:	2000      	moveq	r0, #0
 800794e:	b011      	add	sp, #68	@ 0x44
 8007950:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007958:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800795a:	233d      	movs	r3, #61	@ 0x3d
 800795c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800795e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007962:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8007964:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007968:	e7d7      	b.n	800791a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800796a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800796e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8007970:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8007972:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8007974:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007978:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800797a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800797e:	e7cc      	b.n	800791a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007980:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007984:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8007986:	23ed      	movs	r3, #237	@ 0xed
 8007988:	e7f3      	b.n	8007972 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800798a <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800798a:	b500      	push	{lr}
 800798c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800798e:	2903      	cmp	r1, #3
 8007990:	d80e      	bhi.n	80079b0 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8007992:	e8df f001 	tbb	[pc, r1]
 8007996:	2502      	.short	0x2502
 8007998:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800799a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800799e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80079a0:	230c      	movs	r3, #12
 80079a2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80079a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079a8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80079aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80079ae:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80079b0:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80079b2:	466a      	mov	r2, sp
 80079b4:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80079b6:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80079b8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80079bc:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80079be:	2300      	movs	r3, #0
 80079c0:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80079c2:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80079c4:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80079c8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80079cc:	f004 fc5c 	bl	800c288 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80079d0:	2800      	cmp	r0, #0
}
 80079d2:	bf14      	ite	ne
 80079d4:	f06f 0005 	mvnne.w	r0, #5
 80079d8:	2000      	moveq	r0, #0
 80079da:	b011      	add	sp, #68	@ 0x44
 80079dc:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80079e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079e4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80079e6:	23bc      	movs	r3, #188	@ 0xbc
 80079e8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80079ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80079ee:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80079f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079f4:	e7db      	b.n	80079ae <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80079f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079fa:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80079fc:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80079fe:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8007a00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a04:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8007a06:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007a0a:	e7d0      	b.n	80079ae <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007a0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007a10:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8007a12:	23eb      	movs	r3, #235	@ 0xeb
 8007a14:	e7f3      	b.n	80079fe <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08007a16 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007a16:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a18:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8007a1c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007a1e:	bf18      	it	ne
 8007a20:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8007a24:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007a26:	bf08      	it	eq
 8007a28:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a2c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007a2e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8007a30:	2366      	movs	r3, #102	@ 0x66
 8007a32:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007a34:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007a36:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007a3a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8007a3c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007a3e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007a40:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a44:	f004 face 	bl	800bfe4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8007a48:	2800      	cmp	r0, #0
}
 8007a4a:	bf14      	ite	ne
 8007a4c:	f06f 0001 	mvnne.w	r0, #1
 8007a50:	2000      	moveq	r0, #0
 8007a52:	b00f      	add	sp, #60	@ 0x3c
 8007a54:	f85d fb04 	ldr.w	pc, [sp], #4

08007a58 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007a58:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8007a5e:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007a60:	bf18      	it	ne
 8007a62:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8007a66:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007a68:	bf08      	it	eq
 8007a6a:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a6e:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007a70:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8007a72:	2399      	movs	r3, #153	@ 0x99
 8007a74:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007a76:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007a78:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007a7c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8007a7e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007a80:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007a82:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a86:	f004 faad 	bl	800bfe4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8007a8a:	2800      	cmp	r0, #0
}
 8007a8c:	bf14      	ite	ne
 8007a8e:	f06f 0001 	mvnne.w	r0, #1
 8007a92:	2000      	moveq	r0, #0
 8007a94:	b00f      	add	sp, #60	@ 0x3c
 8007a96:	f85d fb04 	ldr.w	pc, [sp], #4

08007a9a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007a9a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007a9c:	6884      	ldr	r4, [r0, #8]
 8007a9e:	8800      	ldrh	r0, [r0, #0]
 8007aa0:	46a4      	mov	ip, r4
}
 8007aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007aa6:	4760      	bx	ip

08007aa8 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007aa8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007aaa:	6844      	ldr	r4, [r0, #4]
 8007aac:	8800      	ldrh	r0, [r0, #0]
 8007aae:	46a4      	mov	ip, r4
}
 8007ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007ab4:	4760      	bx	ip

08007ab6 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8007ab6:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8007ab8:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8007aba:	4604      	mov	r4, r0
 8007abc:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8007abe:	4798      	blx	r3
 8007ac0:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007ac2:	68e3      	ldr	r3, [r4, #12]
 8007ac4:	4798      	blx	r3
 8007ac6:	1b83      	subs	r3, r0, r6
 8007ac8:	42ab      	cmp	r3, r5
 8007aca:	d3fa      	bcc.n	8007ac2 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8007acc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ad0 <OTM8009A_Init>:
{
 8007ad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f100 0510 	add.w	r5, r0, #16
{
 8007ada:	4607      	mov	r7, r0
 8007adc:	460e      	mov	r6, r1
 8007ade:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4ade      	ldr	r2, [pc, #888]	@ (8007e5c <OTM8009A_Init+0x38c>)
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 fb99 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007aea:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007aec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007aee:	4adc      	ldr	r2, [pc, #880]	@ (8007e60 <OTM8009A_Init+0x390>)
 8007af0:	21ff      	movs	r1, #255	@ 0xff
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 fb92 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007af8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007afa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007afc:	4ad9      	ldr	r2, [pc, #868]	@ (8007e64 <OTM8009A_Init+0x394>)
 8007afe:	4619      	mov	r1, r3
 8007b00:	4628      	mov	r0, r5
 8007b02:	f000 fb8b 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007b06:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007b08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007b0a:	4ad7      	ldr	r2, [pc, #860]	@ (8007e68 <OTM8009A_Init+0x398>)
 8007b0c:	21ff      	movs	r1, #255	@ 0xff
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 fb84 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007b14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007b16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007b18:	4ad2      	ldr	r2, [pc, #840]	@ (8007e64 <OTM8009A_Init+0x394>)
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 fb7d 	bl	800821c <otm8009a_write_reg>
 8007b22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8007b24:	2300      	movs	r3, #0
 8007b26:	4ad1      	ldr	r2, [pc, #836]	@ (8007e6c <OTM8009A_Init+0x39c>)
 8007b28:	21c4      	movs	r1, #196	@ 0xc4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 fb76 	bl	800821c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8007b30:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8007b32:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8007b34:	4638      	mov	r0, r7
 8007b36:	f7ff ffbe 	bl	8007ab6 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4acc      	ldr	r2, [pc, #816]	@ (8007e70 <OTM8009A_Init+0x3a0>)
 8007b3e:	4628      	mov	r0, r5
 8007b40:	4619      	mov	r1, r3
 8007b42:	f000 fb6b 	bl	800821c <otm8009a_write_reg>
 8007b46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4aca      	ldr	r2, [pc, #808]	@ (8007e74 <OTM8009A_Init+0x3a4>)
 8007b4c:	21c4      	movs	r1, #196	@ 0xc4
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 fb64 	bl	800821c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8007b54:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8007b56:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7ff ffac 	bl	8007ab6 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4ac5      	ldr	r2, [pc, #788]	@ (8007e78 <OTM8009A_Init+0x3a8>)
 8007b62:	4628      	mov	r0, r5
 8007b64:	4619      	mov	r1, r3
 8007b66:	f000 fb59 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8007b6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8007b6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8007b6e:	4ac3      	ldr	r2, [pc, #780]	@ (8007e7c <OTM8009A_Init+0x3ac>)
 8007b70:	21c5      	movs	r1, #197	@ 0xc5
 8007b72:	4628      	mov	r0, r5
 8007b74:	f000 fb52 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007b78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8007b7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007b7c:	4ac0      	ldr	r2, [pc, #768]	@ (8007e80 <OTM8009A_Init+0x3b0>)
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 fb4b 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007b86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007b88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007b8a:	4abe      	ldr	r2, [pc, #760]	@ (8007e84 <OTM8009A_Init+0x3b4>)
 8007b8c:	21c5      	movs	r1, #197	@ 0xc5
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fb44 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007b94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007b96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007b98:	4abb      	ldr	r2, [pc, #748]	@ (8007e88 <OTM8009A_Init+0x3b8>)
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f000 fb3d 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007ba2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007ba4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007ba6:	4ab9      	ldr	r2, [pc, #740]	@ (8007e8c <OTM8009A_Init+0x3bc>)
 8007ba8:	21c0      	movs	r1, #192	@ 0xc0
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 fb36 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007bb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007bb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007bb4:	4aa9      	ldr	r2, [pc, #676]	@ (8007e5c <OTM8009A_Init+0x38c>)
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f000 fb2f 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007bbe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007bc0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007bc2:	4ab3      	ldr	r2, [pc, #716]	@ (8007e90 <OTM8009A_Init+0x3c0>)
 8007bc4:	21d9      	movs	r1, #217	@ 0xd9
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 fb28 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007bcc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007bce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007bd0:	4ab0      	ldr	r2, [pc, #704]	@ (8007e94 <OTM8009A_Init+0x3c4>)
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 fb21 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007bda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007bdc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007bde:	4aae      	ldr	r2, [pc, #696]	@ (8007e98 <OTM8009A_Init+0x3c8>)
 8007be0:	21c1      	movs	r1, #193	@ 0xc1
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 fb1a 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007be8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007bea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007bec:	4aab      	ldr	r2, [pc, #684]	@ (8007e9c <OTM8009A_Init+0x3cc>)
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f000 fb13 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007bf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8007bf8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007bfa:	4aa9      	ldr	r2, [pc, #676]	@ (8007ea0 <OTM8009A_Init+0x3d0>)
 8007bfc:	21c5      	movs	r1, #197	@ 0xc5
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 fb0c 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8007c04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007c06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8007c08:	4aa6      	ldr	r2, [pc, #664]	@ (8007ea4 <OTM8009A_Init+0x3d4>)
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 fb05 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007c12:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8007c14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007c16:	4a9b      	ldr	r2, [pc, #620]	@ (8007e84 <OTM8009A_Init+0x3b4>)
 8007c18:	21c5      	movs	r1, #197	@ 0xc5
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f000 fafe 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007c20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007c22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007c24:	4a8d      	ldr	r2, [pc, #564]	@ (8007e5c <OTM8009A_Init+0x38c>)
 8007c26:	4619      	mov	r1, r3
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 faf7 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8007c2e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007c30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8007c32:	4a9d      	ldr	r2, [pc, #628]	@ (8007ea8 <OTM8009A_Init+0x3d8>)
 8007c34:	21d8      	movs	r1, #216	@ 0xd8
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 faf0 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8007c3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8007c3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8007c40:	4a9a      	ldr	r2, [pc, #616]	@ (8007eac <OTM8009A_Init+0x3dc>)
 8007c42:	4619      	mov	r1, r3
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 fae9 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8007c4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8007c4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8007c4e:	4a98      	ldr	r2, [pc, #608]	@ (8007eb0 <OTM8009A_Init+0x3e0>)
 8007c50:	21c5      	movs	r1, #197	@ 0xc5
 8007c52:	4628      	mov	r0, r5
 8007c54:	f000 fae2 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007c58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8007c5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007c5c:	4a95      	ldr	r2, [pc, #596]	@ (8007eb4 <OTM8009A_Init+0x3e4>)
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4628      	mov	r0, r5
 8007c62:	f000 fadb 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007c66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007c68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007c6a:	4a93      	ldr	r2, [pc, #588]	@ (8007eb8 <OTM8009A_Init+0x3e8>)
 8007c6c:	21c0      	movs	r1, #192	@ 0xc0
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 fad4 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007c74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007c76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007c78:	4a90      	ldr	r2, [pc, #576]	@ (8007ebc <OTM8009A_Init+0x3ec>)
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	f000 facd 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007c82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007c84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007c86:	4a8e      	ldr	r2, [pc, #568]	@ (8007ec0 <OTM8009A_Init+0x3f0>)
 8007c88:	21c5      	movs	r1, #197	@ 0xc5
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 fac6 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007c90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007c92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007c94:	4a8b      	ldr	r2, [pc, #556]	@ (8007ec4 <OTM8009A_Init+0x3f4>)
 8007c96:	4619      	mov	r1, r3
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f000 fabf 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007c9e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007ca0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007ca2:	4a89      	ldr	r2, [pc, #548]	@ (8007ec8 <OTM8009A_Init+0x3f8>)
 8007ca4:	21c4      	movs	r1, #196	@ 0xc4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 fab8 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007cac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007cae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007cb0:	4a78      	ldr	r2, [pc, #480]	@ (8007e94 <OTM8009A_Init+0x3c4>)
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f000 fab1 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007cba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007cbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007cbe:	4a83      	ldr	r2, [pc, #524]	@ (8007ecc <OTM8009A_Init+0x3fc>)
 8007cc0:	21c1      	movs	r1, #193	@ 0xc1
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 faaa 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007cc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007cca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007ccc:	4a80      	ldr	r2, [pc, #512]	@ (8007ed0 <OTM8009A_Init+0x400>)
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 faa3 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007cd6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007cd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007cda:	4a7e      	ldr	r2, [pc, #504]	@ (8007ed4 <OTM8009A_Init+0x404>)
 8007cdc:	21b3      	movs	r1, #179	@ 0xb3
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 fa9c 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007ce4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007ce6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007ce8:	4a5e      	ldr	r2, [pc, #376]	@ (8007e64 <OTM8009A_Init+0x394>)
 8007cea:	4619      	mov	r1, r3
 8007cec:	4628      	mov	r0, r5
 8007cee:	f000 fa95 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007cf2:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007cf4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007cf6:	4a78      	ldr	r2, [pc, #480]	@ (8007ed8 <OTM8009A_Init+0x408>)
 8007cf8:	21ce      	movs	r1, #206	@ 0xce
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f000 fa8e 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007d00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007d02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007d04:	4a75      	ldr	r2, [pc, #468]	@ (8007edc <OTM8009A_Init+0x40c>)
 8007d06:	4619      	mov	r1, r3
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f000 fa87 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8007d0e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007d10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8007d12:	4a73      	ldr	r2, [pc, #460]	@ (8007ee0 <OTM8009A_Init+0x410>)
 8007d14:	21ce      	movs	r1, #206	@ 0xce
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 fa80 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007d1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8007d1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007d20:	4a70      	ldr	r2, [pc, #448]	@ (8007ee4 <OTM8009A_Init+0x414>)
 8007d22:	4619      	mov	r1, r3
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 fa79 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8007d2a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007d2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8007d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8007ee8 <OTM8009A_Init+0x418>)
 8007d30:	21ce      	movs	r1, #206	@ 0xce
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 fa72 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007d38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8007d3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8007eec <OTM8009A_Init+0x41c>)
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 fa6b 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8007d46:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007d48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8007d4a:	4a69      	ldr	r2, [pc, #420]	@ (8007ef0 <OTM8009A_Init+0x420>)
 8007d4c:	21cf      	movs	r1, #207	@ 0xcf
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 fa64 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007d54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8007d56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007d58:	4a66      	ldr	r2, [pc, #408]	@ (8007ef4 <OTM8009A_Init+0x424>)
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f000 fa5d 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007d62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007d64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007d66:	4a64      	ldr	r2, [pc, #400]	@ (8007ef8 <OTM8009A_Init+0x428>)
 8007d68:	21cf      	movs	r1, #207	@ 0xcf
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 fa56 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007d70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007d72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007d74:	4a3b      	ldr	r2, [pc, #236]	@ (8007e64 <OTM8009A_Init+0x394>)
 8007d76:	4619      	mov	r1, r3
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 fa4f 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007d7e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007d80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007d82:	4a5e      	ldr	r2, [pc, #376]	@ (8007efc <OTM8009A_Init+0x42c>)
 8007d84:	21cb      	movs	r1, #203	@ 0xcb
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 fa48 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007d8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007d8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007d90:	4a5b      	ldr	r2, [pc, #364]	@ (8007f00 <OTM8009A_Init+0x430>)
 8007d92:	4619      	mov	r1, r3
 8007d94:	4628      	mov	r0, r5
 8007d96:	f000 fa41 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007d9a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007d9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007d9e:	4a59      	ldr	r2, [pc, #356]	@ (8007f04 <OTM8009A_Init+0x434>)
 8007da0:	21cb      	movs	r1, #203	@ 0xcb
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 fa3a 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007da8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007daa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007dac:	4a4b      	ldr	r2, [pc, #300]	@ (8007edc <OTM8009A_Init+0x40c>)
 8007dae:	4619      	mov	r1, r3
 8007db0:	4628      	mov	r0, r5
 8007db2:	f000 fa33 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007db6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007db8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007dba:	4a53      	ldr	r2, [pc, #332]	@ (8007f08 <OTM8009A_Init+0x438>)
 8007dbc:	21cb      	movs	r1, #203	@ 0xcb
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f000 fa2c 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007dc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007dc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007dc8:	4a46      	ldr	r2, [pc, #280]	@ (8007ee4 <OTM8009A_Init+0x414>)
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f000 fa25 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007dd2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007dd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007dd6:	4a4d      	ldr	r2, [pc, #308]	@ (8007f0c <OTM8009A_Init+0x43c>)
 8007dd8:	21cb      	movs	r1, #203	@ 0xcb
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f000 fa1e 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007de0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007de2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007de4:	4a41      	ldr	r2, [pc, #260]	@ (8007eec <OTM8009A_Init+0x41c>)
 8007de6:	4619      	mov	r1, r3
 8007de8:	4628      	mov	r0, r5
 8007dea:	f000 fa17 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007dee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007df0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007df2:	4a47      	ldr	r2, [pc, #284]	@ (8007f10 <OTM8009A_Init+0x440>)
 8007df4:	21cb      	movs	r1, #203	@ 0xcb
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 fa10 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007dfc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007dfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007e00:	4a3c      	ldr	r2, [pc, #240]	@ (8007ef4 <OTM8009A_Init+0x424>)
 8007e02:	4619      	mov	r1, r3
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 fa09 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007e0a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007e0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007e0e:	4a41      	ldr	r2, [pc, #260]	@ (8007f14 <OTM8009A_Init+0x444>)
 8007e10:	21cb      	movs	r1, #203	@ 0xcb
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 fa02 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007e18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007e1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f18 <OTM8009A_Init+0x448>)
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4628      	mov	r0, r5
 8007e22:	f000 f9fb 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007e26:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007e28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007e2a:	4a3c      	ldr	r2, [pc, #240]	@ (8007f1c <OTM8009A_Init+0x44c>)
 8007e2c:	21cb      	movs	r1, #203	@ 0xcb
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 f9f4 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007e34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007e36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007e38:	4a39      	ldr	r2, [pc, #228]	@ (8007f20 <OTM8009A_Init+0x450>)
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f000 f9ed 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007e42:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007e44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007e46:	4a37      	ldr	r2, [pc, #220]	@ (8007f24 <OTM8009A_Init+0x454>)
 8007e48:	21cb      	movs	r1, #203	@ 0xcb
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 f9e6 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007e50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007e52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007e54:	4a03      	ldr	r2, [pc, #12]	@ (8007e64 <OTM8009A_Init+0x394>)
 8007e56:	4619      	mov	r1, r3
 8007e58:	4628      	mov	r0, r5
 8007e5a:	e065      	b.n	8007f28 <OTM8009A_Init+0x458>
 8007e5c:	080298b1 	.word	0x080298b1
 8007e60:	080298ad 	.word	0x080298ad
 8007e64:	080298b2 	.word	0x080298b2
 8007e68:	080298ab 	.word	0x080298ab
 8007e6c:	080298b3 	.word	0x080298b3
 8007e70:	080298b4 	.word	0x080298b4
 8007e74:	080298b5 	.word	0x080298b5
 8007e78:	080298b6 	.word	0x080298b6
 8007e7c:	080298b7 	.word	0x080298b7
 8007e80:	080298b8 	.word	0x080298b8
 8007e84:	080298b9 	.word	0x080298b9
 8007e88:	080298ba 	.word	0x080298ba
 8007e8c:	080298bb 	.word	0x080298bb
 8007e90:	080298bc 	.word	0x080298bc
 8007e94:	080298bf 	.word	0x080298bf
 8007e98:	080298c0 	.word	0x080298c0
 8007e9c:	080298c1 	.word	0x080298c1
 8007ea0:	080298c2 	.word	0x080298c2
 8007ea4:	080298c3 	.word	0x080298c3
 8007ea8:	080298a9 	.word	0x080298a9
 8007eac:	080298c4 	.word	0x080298c4
 8007eb0:	080298c5 	.word	0x080298c5
 8007eb4:	080298c6 	.word	0x080298c6
 8007eb8:	080298c7 	.word	0x080298c7
 8007ebc:	080298c8 	.word	0x080298c8
 8007ec0:	080298c9 	.word	0x080298c9
 8007ec4:	080298bd 	.word	0x080298bd
 8007ec8:	080298ca 	.word	0x080298ca
 8007ecc:	080298cb 	.word	0x080298cb
 8007ed0:	080298cc 	.word	0x080298cc
 8007ed4:	080298a7 	.word	0x080298a7
 8007ed8:	080298a1 	.word	0x080298a1
 8007edc:	080298cd 	.word	0x080298cd
 8007ee0:	08029893 	.word	0x08029893
 8007ee4:	080298ce 	.word	0x080298ce
 8007ee8:	08029885 	.word	0x08029885
 8007eec:	080298cf 	.word	0x080298cf
 8007ef0:	0802987b 	.word	0x0802987b
 8007ef4:	080298d0 	.word	0x080298d0
 8007ef8:	080298dd 	.word	0x080298dd
 8007efc:	08029871 	.word	0x08029871
 8007f00:	080298d1 	.word	0x080298d1
 8007f04:	08029862 	.word	0x08029862
 8007f08:	08029853 	.word	0x08029853
 8007f0c:	08029849 	.word	0x08029849
 8007f10:	0802983a 	.word	0x0802983a
 8007f14:	0802982b 	.word	0x0802982b
 8007f18:	080298d2 	.word	0x080298d2
 8007f1c:	08029821 	.word	0x08029821
 8007f20:	080298d3 	.word	0x080298d3
 8007f24:	08029817 	.word	0x08029817
 8007f28:	f000 f978 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8007f2c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007f2e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8007f30:	4a8e      	ldr	r2, [pc, #568]	@ (800816c <OTM8009A_Init+0x69c>)
 8007f32:	21cc      	movs	r1, #204	@ 0xcc
 8007f34:	4628      	mov	r0, r5
 8007f36:	f000 f971 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007f3a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8007f3c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007f3e:	4a8c      	ldr	r2, [pc, #560]	@ (8008170 <OTM8009A_Init+0x6a0>)
 8007f40:	4619      	mov	r1, r3
 8007f42:	4628      	mov	r0, r5
 8007f44:	f000 f96a 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8007f48:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007f4a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8007f4c:	4a89      	ldr	r2, [pc, #548]	@ (8008174 <OTM8009A_Init+0x6a4>)
 8007f4e:	21cc      	movs	r1, #204	@ 0xcc
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 f963 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007f56:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8007f58:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007f5a:	4a87      	ldr	r2, [pc, #540]	@ (8008178 <OTM8009A_Init+0x6a8>)
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f000 f95c 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007f64:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007f66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007f68:	4a84      	ldr	r2, [pc, #528]	@ (800817c <OTM8009A_Init+0x6ac>)
 8007f6a:	21cc      	movs	r1, #204	@ 0xcc
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f000 f955 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007f72:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007f74:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007f76:	4a82      	ldr	r2, [pc, #520]	@ (8008180 <OTM8009A_Init+0x6b0>)
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f000 f94e 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007f80:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007f82:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007f84:	4a7f      	ldr	r2, [pc, #508]	@ (8008184 <OTM8009A_Init+0x6b4>)
 8007f86:	21cc      	movs	r1, #204	@ 0xcc
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f000 f947 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007f8e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007f90:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007f92:	4a7d      	ldr	r2, [pc, #500]	@ (8008188 <OTM8009A_Init+0x6b8>)
 8007f94:	4619      	mov	r1, r3
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 f940 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007f9c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007f9e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007fa0:	4a7a      	ldr	r2, [pc, #488]	@ (800818c <OTM8009A_Init+0x6bc>)
 8007fa2:	21cc      	movs	r1, #204	@ 0xcc
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f000 f939 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007faa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007fac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007fae:	4a78      	ldr	r2, [pc, #480]	@ (8008190 <OTM8009A_Init+0x6c0>)
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f000 f932 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007fb8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007fba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007fbc:	4a75      	ldr	r2, [pc, #468]	@ (8008194 <OTM8009A_Init+0x6c4>)
 8007fbe:	21cc      	movs	r1, #204	@ 0xcc
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f000 f92b 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007fc6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007fc8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007fca:	4a73      	ldr	r2, [pc, #460]	@ (8008198 <OTM8009A_Init+0x6c8>)
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f924 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007fd4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007fd6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007fd8:	4a70      	ldr	r2, [pc, #448]	@ (800819c <OTM8009A_Init+0x6cc>)
 8007fda:	21c5      	movs	r1, #197	@ 0xc5
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f000 f91d 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007fe2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007fe4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007fe6:	4a6e      	ldr	r2, [pc, #440]	@ (80081a0 <OTM8009A_Init+0x6d0>)
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f916 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007ff0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007ff2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007ff4:	4a6b      	ldr	r2, [pc, #428]	@ (80081a4 <OTM8009A_Init+0x6d4>)
 8007ff6:	21f5      	movs	r1, #245	@ 0xf5
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 f90f 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007ffe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8008000:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8008002:	4a69      	ldr	r2, [pc, #420]	@ (80081a8 <OTM8009A_Init+0x6d8>)
 8008004:	4619      	mov	r1, r3
 8008006:	4628      	mov	r0, r5
 8008008:	f000 f908 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800800c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800800e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8008010:	4a66      	ldr	r2, [pc, #408]	@ (80081ac <OTM8009A_Init+0x6dc>)
 8008012:	21c6      	movs	r1, #198	@ 0xc6
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f901 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800801a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800801c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800801e:	4a64      	ldr	r2, [pc, #400]	@ (80081b0 <OTM8009A_Init+0x6e0>)
 8008020:	4619      	mov	r1, r3
 8008022:	4628      	mov	r0, r5
 8008024:	f000 f8fa 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8008028:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800802a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800802c:	4a61      	ldr	r2, [pc, #388]	@ (80081b4 <OTM8009A_Init+0x6e4>)
 800802e:	21ff      	movs	r1, #255	@ 0xff
 8008030:	4628      	mov	r0, r5
 8008032:	f000 f8f3 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008036:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8008038:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800803a:	4a5d      	ldr	r2, [pc, #372]	@ (80081b0 <OTM8009A_Init+0x6e0>)
 800803c:	4619      	mov	r1, r3
 800803e:	4628      	mov	r0, r5
 8008040:	f000 f8ec 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008044:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008046:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008048:	4a59      	ldr	r2, [pc, #356]	@ (80081b0 <OTM8009A_Init+0x6e0>)
 800804a:	4619      	mov	r1, r3
 800804c:	4628      	mov	r0, r5
 800804e:	f000 f8e5 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8008052:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008054:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8008056:	4a58      	ldr	r2, [pc, #352]	@ (80081b8 <OTM8009A_Init+0x6e8>)
 8008058:	21e1      	movs	r1, #225	@ 0xe1
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f8de 	bl	800821c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008060:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8008062:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008064:	4a52      	ldr	r2, [pc, #328]	@ (80081b0 <OTM8009A_Init+0x6e0>)
 8008066:	4619      	mov	r1, r3
 8008068:	4628      	mov	r0, r5
 800806a:	f000 f8d7 	bl	800821c <otm8009a_write_reg>
 800806e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8008070:	2310      	movs	r3, #16
 8008072:	4a52      	ldr	r2, [pc, #328]	@ (80081bc <OTM8009A_Init+0x6ec>)
 8008074:	21e2      	movs	r1, #226	@ 0xe2
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f8d0 	bl	800821c <otm8009a_write_reg>
 800807c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800807e:	2300      	movs	r3, #0
 8008080:	4a4f      	ldr	r2, [pc, #316]	@ (80081c0 <OTM8009A_Init+0x6f0>)
 8008082:	2111      	movs	r1, #17
 8008084:	4628      	mov	r0, r5
 8008086:	f000 f8c9 	bl	800821c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800808a:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800808c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800808e:	4638      	mov	r0, r7
 8008090:	f7ff fd11 	bl	8007ab6 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8008094:	4f4b      	ldr	r7, [pc, #300]	@ (80081c4 <OTM8009A_Init+0x6f4>)
 8008096:	2e00      	cmp	r6, #0
 8008098:	d061      	beq.n	800815e <OTM8009A_Init+0x68e>
 800809a:	2e02      	cmp	r6, #2
 800809c:	d107      	bne.n	80080ae <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800809e:	2300      	movs	r3, #0
 80080a0:	4a49      	ldr	r2, [pc, #292]	@ (80081c8 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80080a2:	213a      	movs	r1, #58	@ 0x3a
 80080a4:	4628      	mov	r0, r5
 80080a6:	f000 f8b9 	bl	800821c <otm8009a_write_reg>
 80080aa:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80080ac:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80080ae:	f1b8 0f01 	cmp.w	r8, #1
 80080b2:	d157      	bne.n	8008164 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80080b4:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80080b6:	f10d 0207 	add.w	r2, sp, #7
 80080ba:	2136      	movs	r1, #54	@ 0x36
 80080bc:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80080be:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80080c2:	2300      	movs	r3, #0
 80080c4:	f000 f8aa 	bl	800821c <otm8009a_write_reg>
 80080c8:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80080ca:	2304      	movs	r3, #4
 80080cc:	4a3f      	ldr	r2, [pc, #252]	@ (80081cc <OTM8009A_Init+0x6fc>)
 80080ce:	212a      	movs	r1, #42	@ 0x2a
 80080d0:	4628      	mov	r0, r5
 80080d2:	f000 f8a3 	bl	800821c <otm8009a_write_reg>
 80080d6:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80080d8:	2304      	movs	r3, #4
 80080da:	4a3d      	ldr	r2, [pc, #244]	@ (80081d0 <OTM8009A_Init+0x700>)
 80080dc:	212b      	movs	r1, #43	@ 0x2b
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 f89c 	bl	800821c <otm8009a_write_reg>
 80080e4:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80080e6:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80080ea:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80080ec:	2300      	movs	r3, #0
 80080ee:	4a39      	ldr	r2, [pc, #228]	@ (80081d4 <OTM8009A_Init+0x704>)
 80080f0:	2151      	movs	r1, #81	@ 0x51
 80080f2:	4628      	mov	r0, r5
 80080f4:	f000 f892 	bl	800821c <otm8009a_write_reg>
 80080f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80080fa:	4633      	mov	r3, r6
 80080fc:	4a36      	ldr	r2, [pc, #216]	@ (80081d8 <OTM8009A_Init+0x708>)
 80080fe:	2153      	movs	r1, #83	@ 0x53
 8008100:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8008102:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8008104:	f000 f88a 	bl	800821c <otm8009a_write_reg>
 8008108:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800810a:	4633      	mov	r3, r6
 800810c:	4a33      	ldr	r2, [pc, #204]	@ (80081dc <OTM8009A_Init+0x70c>)
 800810e:	2155      	movs	r1, #85	@ 0x55
 8008110:	4628      	mov	r0, r5
 8008112:	f000 f883 	bl	800821c <otm8009a_write_reg>
 8008116:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8008118:	4633      	mov	r3, r6
 800811a:	4a31      	ldr	r2, [pc, #196]	@ (80081e0 <OTM8009A_Init+0x710>)
 800811c:	215e      	movs	r1, #94	@ 0x5e
 800811e:	4628      	mov	r0, r5
 8008120:	f000 f87c 	bl	800821c <otm8009a_write_reg>
 8008124:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8008126:	4633      	mov	r3, r6
 8008128:	4a2e      	ldr	r2, [pc, #184]	@ (80081e4 <OTM8009A_Init+0x714>)
 800812a:	2129      	movs	r1, #41	@ 0x29
 800812c:	4628      	mov	r0, r5
 800812e:	f000 f875 	bl	800821c <otm8009a_write_reg>
 8008132:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008134:	4633      	mov	r3, r6
 8008136:	4631      	mov	r1, r6
 8008138:	4a1d      	ldr	r2, [pc, #116]	@ (80081b0 <OTM8009A_Init+0x6e0>)
 800813a:	4628      	mov	r0, r5
 800813c:	f000 f86e 	bl	800821c <otm8009a_write_reg>
 8008140:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8008142:	4633      	mov	r3, r6
 8008144:	4a28      	ldr	r2, [pc, #160]	@ (80081e8 <OTM8009A_Init+0x718>)
 8008146:	212c      	movs	r1, #44	@ 0x2c
 8008148:	4628      	mov	r0, r5
 800814a:	f000 f867 	bl	800821c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800814e:	42c4      	cmn	r4, r0
}
 8008150:	bf14      	ite	ne
 8008152:	f04f 30ff 	movne.w	r0, #4294967295
 8008156:	4630      	moveq	r0, r6
 8008158:	b002      	add	sp, #8
 800815a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800815e:	4633      	mov	r3, r6
 8008160:	4a22      	ldr	r2, [pc, #136]	@ (80081ec <OTM8009A_Init+0x71c>)
 8008162:	e79e      	b.n	80080a2 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8008164:	2300      	movs	r3, #0
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	e7bf      	b.n	80080ea <OTM8009A_Init+0x61a>
 800816a:	bf00      	nop
 800816c:	0802980d 	.word	0x0802980d
 8008170:	080298d1 	.word	0x080298d1
 8008174:	080297fe 	.word	0x080297fe
 8008178:	080298cd 	.word	0x080298cd
 800817c:	080297ef 	.word	0x080297ef
 8008180:	080298ce 	.word	0x080298ce
 8008184:	080297e5 	.word	0x080297e5
 8008188:	080298cf 	.word	0x080298cf
 800818c:	080297d6 	.word	0x080297d6
 8008190:	080298d0 	.word	0x080298d0
 8008194:	080297c7 	.word	0x080297c7
 8008198:	080298bd 	.word	0x080298bd
 800819c:	080298de 	.word	0x080298de
 80081a0:	080298df 	.word	0x080298df
 80081a4:	080298e0 	.word	0x080298e0
 80081a8:	080298e1 	.word	0x080298e1
 80081ac:	080298e2 	.word	0x080298e2
 80081b0:	080298b1 	.word	0x080298b1
 80081b4:	080297c4 	.word	0x080297c4
 80081b8:	080297b4 	.word	0x080297b4
 80081bc:	080297a4 	.word	0x080297a4
 80081c0:	080298d4 	.word	0x080298d4
 80081c4:	2400c41c 	.word	0x2400c41c
 80081c8:	080298d5 	.word	0x080298d5
 80081cc:	080298e7 	.word	0x080298e7
 80081d0:	080298e3 	.word	0x080298e3
 80081d4:	080298d7 	.word	0x080298d7
 80081d8:	080298d8 	.word	0x080298d8
 80081dc:	080298d9 	.word	0x080298d9
 80081e0:	080298da 	.word	0x080298da
 80081e4:	080298db 	.word	0x080298db
 80081e8:	080298dc 	.word	0x080298dc
 80081ec:	080298d6 	.word	0x080298d6

080081f0 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80081f0:	b160      	cbz	r0, 800820c <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80081f2:	684b      	ldr	r3, [r1, #4]
 80081f4:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80081f6:	688b      	ldr	r3, [r1, #8]
 80081f8:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80081fa:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 80081fc:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80081fe:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8008200:	4b04      	ldr	r3, [pc, #16]	@ (8008214 <OTM8009A_RegisterBusIO+0x24>)
 8008202:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8008204:	4b04      	ldr	r3, [pc, #16]	@ (8008218 <OTM8009A_RegisterBusIO+0x28>)
 8008206:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8008208:	2000      	movs	r0, #0
 800820a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	08007a9b 	.word	0x08007a9b
 8008218:	08007aa9 	.word	0x08007aa9

0800821c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800821c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800821e:	6804      	ldr	r4, [r0, #0]
 8008220:	6880      	ldr	r0, [r0, #8]
 8008222:	46a4      	mov	ip, r4
}
 8008224:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8008228:	4760      	bx	ip
	...

0800822c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800822c:	4a10      	ldr	r2, [pc, #64]	@ (8008270 <BSP_I2C4_DeInit+0x44>)
{
 800822e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8008230:	6813      	ldr	r3, [r2, #0]
 8008232:	3b01      	subs	r3, #1
 8008234:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8008236:	b10b      	cbz	r3, 800823c <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8008238:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800823a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800823c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008240:	480c      	ldr	r0, [pc, #48]	@ (8008274 <BSP_I2C4_DeInit+0x48>)
 8008242:	f001 fe3d 	bl	8009ec0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8008246:	480b      	ldr	r0, [pc, #44]	@ (8008274 <BSP_I2C4_DeInit+0x48>)
 8008248:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800824c:	f001 fe38 	bl	8009ec0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8008250:	4a09      	ldr	r2, [pc, #36]	@ (8008278 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8008252:	480a      	ldr	r0, [pc, #40]	@ (800827c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8008254:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8008258:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800825c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8008260:	f002 f87e 	bl	800a360 <HAL_I2C_DeInit>
 8008264:	2800      	cmp	r0, #0
 8008266:	d0e7      	beq.n	8008238 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8008268:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800826c:	e7e5      	b.n	800823a <BSP_I2C4_DeInit+0xe>
 800826e:	bf00      	nop
 8008270:	2400ce80 	.word	0x2400ce80
 8008274:	58020c00 	.word	0x58020c00
 8008278:	58024400 	.word	0x58024400
 800827c:	2400c428 	.word	0x2400c428

08008280 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8008280:	2300      	movs	r3, #0
 8008282:	2201      	movs	r2, #1
{
 8008284:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8008286:	6041      	str	r1, [r0, #4]
{
 8008288:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800828a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800828c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8008290:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8008294:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8008298:	f002 f80c 	bl	800a2b4 <HAL_I2C_Init>
 800829c:	4601      	mov	r1, r0
 800829e:	b108      	cbz	r0, 80082a4 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80082a0:	2001      	movs	r0, #1
}
 80082a2:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80082a4:	4620      	mov	r0, r4
 80082a6:	f002 fa32 	bl	800a70e <HAL_I2CEx_ConfigAnalogFilter>
 80082aa:	4601      	mov	r1, r0
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d1f7      	bne.n	80082a0 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80082b0:	4620      	mov	r0, r4
 80082b2:	f002 fa52 	bl	800a75a <HAL_I2CEx_ConfigDigitalFilter>
 80082b6:	3800      	subs	r0, #0
 80082b8:	bf18      	it	ne
 80082ba:	2001      	movne	r0, #1
 80082bc:	e7f1      	b.n	80082a2 <MX_I2C4_Init+0x22>
	...

080082c0 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80082c0:	4ba1      	ldr	r3, [pc, #644]	@ (8008548 <BSP_I2C4_Init+0x288>)
 80082c2:	48a2      	ldr	r0, [pc, #648]	@ (800854c <BSP_I2C4_Init+0x28c>)
{
 80082c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80082c8:	6003      	str	r3, [r0, #0]
{
 80082ca:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 80082cc:	4ba0      	ldr	r3, [pc, #640]	@ (8008550 <BSP_I2C4_Init+0x290>)
 80082ce:	681c      	ldr	r4, [r3, #0]
 80082d0:	b11c      	cbz	r4, 80082da <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80082d2:	2000      	movs	r0, #0
}
 80082d4:	b013      	add	sp, #76	@ 0x4c
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80082da:	2201      	movs	r2, #1
 80082dc:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80082de:	f002 fa11 	bl	800a704 <HAL_I2C_GetState>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d1f5      	bne.n	80082d2 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80082e6:	4d9b      	ldr	r5, [pc, #620]	@ (8008554 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80082e8:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80082ec:	2702      	movs	r7, #2
 80082ee:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80082f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80082f4:	a90d      	add	r1, sp, #52	@ 0x34
 80082f6:	4898      	ldr	r0, [pc, #608]	@ (8008558 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80082f8:	f043 0308 	orr.w	r3, r3, #8
 80082fc:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8008300:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	930a      	str	r3, [sp, #40]	@ 0x28
 800830a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800830c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8008310:	f043 0308 	orr.w	r3, r3, #8
 8008314:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8008318:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800831c:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8008326:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800832a:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800832e:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8008332:	f001 fcdd 	bl	8009cf0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8008336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800833a:	a90d      	add	r1, sp, #52	@ 0x34
 800833c:	4886      	ldr	r0, [pc, #536]	@ (8008558 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800833e:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8008340:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008344:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8008348:	f001 fcd2 	bl	8009cf0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800834c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8008350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008354:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8008358:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 800835c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008360:	930c      	str	r3, [sp, #48]	@ 0x30
 8008362:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8008364:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8008368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800836c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8008370:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8008374:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008378:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800837c:	f004 fcbc 	bl	800ccf8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8008380:	2800      	cmp	r0, #0
 8008382:	d06f      	beq.n	8008464 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008384:	4b75      	ldr	r3, [pc, #468]	@ (800855c <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8008386:	4622      	mov	r2, r4
 8008388:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 800838a:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800838e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008392:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8008564 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008396:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800839a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800839e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 80083a2:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80083a4:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80083a8:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 80083ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 80083b0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 80083b4:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80083b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008560 <BSP_I2C4_Init+0x2a0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
{
 80083ba:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80083bc:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80083c0:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 80083c4:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80083c8:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80083cc:	d35d      	bcc.n	800848a <BSP_I2C4_Init+0x1ca>
 80083ce:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80083d0:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80083d2:	9d00      	ldr	r5, [sp, #0]
 80083d4:	42bd      	cmp	r5, r7
 80083d6:	d852      	bhi.n	800847e <BSP_I2C4_Init+0x1be>
 80083d8:	42be      	cmp	r6, r7
 80083da:	d350      	bcc.n	800847e <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 80083dc:	4591      	cmp	r9, r2
 80083de:	d04e      	beq.n	800847e <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80083e0:	2514      	movs	r5, #20
 80083e2:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 80083e6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80083e8:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80083ea:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80083ee:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80083f0:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80083f4:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80083f8:	d93e      	bls.n	8008478 <BSP_I2C4_Init+0x1b8>
 80083fa:	4a59      	ldr	r2, [pc, #356]	@ (8008560 <BSP_I2C4_Init+0x2a0>)
 80083fc:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80083fe:	4b58      	ldr	r3, [pc, #352]	@ (8008560 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8008400:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8008404:	f04f 32ff 	mov.w	r2, #4294967295
 8008408:	4956      	ldr	r1, [pc, #344]	@ (8008564 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800840a:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800840c:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800840e:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8008410:	0043      	lsls	r3, r0, #1
 8008412:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8008416:	e9cd 2501 	strd	r2, r5, [sp, #4]
 800841a:	f10b 0b01 	add.w	fp, fp, #1
 800841e:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8008422:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8008426:	9508      	str	r5, [sp, #32]
 8008428:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800842a:	9b05      	ldr	r3, [sp, #20]
 800842c:	429f      	cmp	r7, r3
 800842e:	d138      	bne.n	80084a2 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8008430:	9b01      	ldr	r3, [sp, #4]
 8008432:	2b7f      	cmp	r3, #127	@ 0x7f
 8008434:	d816      	bhi.n	8008464 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008436:	2114      	movs	r1, #20
 8008438:	9a01      	ldr	r2, [sp, #4]
 800843a:	4b4a      	ldr	r3, [pc, #296]	@ (8008564 <BSP_I2C4_Init+0x2a4>)
 800843c:	434a      	muls	r2, r1
 800843e:	1899      	adds	r1, r3, r2
 8008440:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8008442:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008444:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8008448:	684b      	ldr	r3, [r1, #4]
 800844a:	051b      	lsls	r3, r3, #20
 800844c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008450:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8008452:	688b      	ldr	r3, [r1, #8]
 8008454:	041b      	lsls	r3, r3, #16
 8008456:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800845a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800845c:	68cb      	ldr	r3, [r1, #12]
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8008462:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8008464:	4621      	mov	r1, r4
 8008466:	4839      	ldr	r0, [pc, #228]	@ (800854c <BSP_I2C4_Init+0x28c>)
 8008468:	f7ff ff0a 	bl	8008280 <MX_I2C4_Init>
 800846c:	2800      	cmp	r0, #0
 800846e:	f43f af30 	beq.w	80082d2 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8008472:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8008476:	e72d      	b.n	80082d4 <BSP_I2C4_Init+0x14>
 8008478:	4691      	mov	r9, r2
 800847a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800847e:	f10e 0e01 	add.w	lr, lr, #1
 8008482:	440f      	add	r7, r1
 8008484:	f1be 0f10 	cmp.w	lr, #16
 8008488:	d1a3      	bne.n	80083d2 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800848a:	f1bc 0f10 	cmp.w	ip, #16
 800848e:	4488      	add	r8, r1
 8008490:	d196      	bne.n	80083c0 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8008492:	3201      	adds	r2, #1
 8008494:	4401      	add	r1, r0
 8008496:	2a10      	cmp	r2, #16
 8008498:	d18f      	bne.n	80083ba <BSP_I2C4_Init+0xfa>
 800849a:	f1ba 0f00 	cmp.w	sl, #0
 800849e:	d1ac      	bne.n	80083fa <BSP_I2C4_Init+0x13a>
 80084a0:	e7ad      	b.n	80083fe <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80084a2:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80084a4:	f04f 0c00 	mov.w	ip, #0
 80084a8:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80084aa:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80084ae:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80084b0:	441d      	add	r5, r3
 80084b2:	441e      	add	r6, r3
 80084b4:	9503      	str	r5, [sp, #12]
 80084b6:	ebab 0503 	sub.w	r5, fp, r3
 80084ba:	9607      	str	r6, [sp, #28]
 80084bc:	006d      	lsls	r5, r5, #1
 80084be:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80084c0:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80084c2:	f240 5214 	movw	r2, #1300	@ 0x514
 80084c6:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80084ca:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80084ce:	4295      	cmp	r5, r2
 80084d0:	d92f      	bls.n	8008532 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80084d2:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80084d6:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 80084da:	d22a      	bcs.n	8008532 <BSP_I2C4_Init+0x272>
 80084dc:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80084de:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80084e2:	f8dd 9000 	ldr.w	r9, [sp]
 80084e6:	442e      	add	r6, r5
 80084e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80084ec:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 80084f0:	f240 4212 	movw	r2, #1042	@ 0x412
 80084f4:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80084f8:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80084fc:	4592      	cmp	sl, r2
 80084fe:	d811      	bhi.n	8008524 <BSP_I2C4_Init+0x264>
 8008500:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8008504:	d30e      	bcc.n	8008524 <BSP_I2C4_Init+0x264>
 8008506:	4580      	cmp	r8, r0
 8008508:	d90c      	bls.n	8008524 <BSP_I2C4_Init+0x264>
              error = -error;
 800850a:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800850e:	bf28      	it	cs
 8008510:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8008512:	9a02      	ldr	r2, [sp, #8]
 8008514:	4592      	cmp	sl, r2
 8008516:	d205      	bcs.n	8008524 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8008518:	9a04      	ldr	r2, [sp, #16]
 800851a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800851c:	9a06      	ldr	r2, [sp, #24]
 800851e:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8008522:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008524:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8008528:	4498      	add	r8, r3
 800852a:	441e      	add	r6, r3
 800852c:	eba9 0903 	sub.w	r9, r9, r3
 8008530:	d1dc      	bne.n	80084ec <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8008532:	9a00      	ldr	r2, [sp, #0]
 8008534:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8008538:	441d      	add	r5, r3
 800853a:	eba2 0203 	sub.w	r2, r2, r3
 800853e:	9200      	str	r2, [sp, #0]
 8008540:	d1bf      	bne.n	80084c2 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8008542:	3701      	adds	r7, #1
 8008544:	3114      	adds	r1, #20
 8008546:	e770      	b.n	800842a <BSP_I2C4_Init+0x16a>
 8008548:	58001c00 	.word	0x58001c00
 800854c:	2400c428 	.word	0x2400c428
 8008550:	2400ce80 	.word	0x2400ce80
 8008554:	58024400 	.word	0x58024400
 8008558:	58020c00 	.word	0x58020c00
 800855c:	3b9aca00 	.word	0x3b9aca00
 8008560:	2400c47c 	.word	0x2400c47c
 8008564:	2400c480 	.word	0x2400c480

08008568 <BSP_I2C4_WriteReg>:
{
 8008568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800856a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800856e:	9200      	str	r2, [sp, #0]
 8008570:	460a      	mov	r2, r1
 8008572:	4601      	mov	r1, r0
 8008574:	4808      	ldr	r0, [pc, #32]	@ (8008598 <BSP_I2C4_WriteReg+0x30>)
 8008576:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800857a:	2301      	movs	r3, #1
 800857c:	f001 ff0a 	bl	800a394 <HAL_I2C_Mem_Write>
 8008580:	b140      	cbz	r0, 8008594 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008582:	4805      	ldr	r0, [pc, #20]	@ (8008598 <BSP_I2C4_WriteReg+0x30>)
 8008584:	f002 f8c1 	bl	800a70a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8008588:	2804      	cmp	r0, #4
 800858a:	bf14      	ite	ne
 800858c:	f06f 0003 	mvnne.w	r0, #3
 8008590:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8008594:	b004      	add	sp, #16
 8008596:	bd10      	pop	{r4, pc}
 8008598:	2400c428 	.word	0x2400c428

0800859c <BSP_I2C4_ReadReg>:
{
 800859c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800859e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80085a2:	9200      	str	r2, [sp, #0]
 80085a4:	460a      	mov	r2, r1
 80085a6:	4601      	mov	r1, r0
 80085a8:	4808      	ldr	r0, [pc, #32]	@ (80085cc <BSP_I2C4_ReadReg+0x30>)
 80085aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085ae:	2301      	movs	r3, #1
 80085b0:	f001 ffca 	bl	800a548 <HAL_I2C_Mem_Read>
 80085b4:	b140      	cbz	r0, 80085c8 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80085b6:	4805      	ldr	r0, [pc, #20]	@ (80085cc <BSP_I2C4_ReadReg+0x30>)
 80085b8:	f002 f8a7 	bl	800a70a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80085bc:	2804      	cmp	r0, #4
 80085be:	bf14      	ite	ne
 80085c0:	f06f 0003 	mvnne.w	r0, #3
 80085c4:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80085c8:	b004      	add	sp, #16
 80085ca:	bd10      	pop	{r4, pc}
 80085cc:	2400c428 	.word	0x2400c428

080085d0 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 80085d0:	f000 bd08 	b.w	8008fe4 <HAL_GetTick>

080085d4 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80085d4:	4a09      	ldr	r2, [pc, #36]	@ (80085fc <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80085d6:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 80085da:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80085dc:	684a      	ldr	r2, [r1, #4]
 80085de:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 80085e0:	2201      	movs	r2, #1
 80085e2:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80085e4:	688a      	ldr	r2, [r1, #8]
 80085e6:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80085e8:	680a      	ldr	r2, [r1, #0]
 80085ea:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80085ec:	2200      	movs	r2, #0
 80085ee:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80085f2:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80085f4:	68ca      	ldr	r2, [r1, #12]
 80085f6:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 80085f8:	f003 bca8 	b.w	800bf4c <HAL_QSPI_Init>
 80085fc:	52005000 	.word	0x52005000

08008600 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8008600:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8008602:	b988      	cbnz	r0, 8008628 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008604:	4c0a      	ldr	r4, [pc, #40]	@ (8008630 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8008606:	480b      	ldr	r0, [pc, #44]	@ (8008634 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8008608:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800860a:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800860c:	b94b      	cbnz	r3, 8008622 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800860e:	f7ff f9bc 	bl	800798a <MT25TL01G_EnableMemoryMappedModeSTR>
 8008612:	b110      	cbz	r0, 800861a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008614:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8008618:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800861a:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800861c:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800861e:	7023      	strb	r3, [r4, #0]
 8008620:	e7fa      	b.n	8008618 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008622:	f7ff f968 	bl	80078f6 <MT25TL01G_EnableMemoryMappedModeDTR>
 8008626:	e7f4      	b.n	8008612 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8008628:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800862c:	e7f4      	b.n	8008618 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800862e:	bf00      	nop
 8008630:	2400ce84 	.word	0x2400ce84
 8008634:	24000470 	.word	0x24000470

08008638 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	460c      	mov	r4, r1
 800863c:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800863e:	bb30      	cbnz	r0, 800868e <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8008640:	4d17      	ldr	r5, [pc, #92]	@ (80086a0 <BSP_QSPI_ConfigFlash+0x68>)
 8008642:	782b      	ldrb	r3, [r5, #0]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d025      	beq.n	8008694 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8008648:	fab2 f382 	clz	r3, r2
 800864c:	4e15      	ldr	r6, [pc, #84]	@ (80086a4 <BSP_QSPI_ConfigFlash+0x6c>)
 800864e:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8008650:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8008656:	f003 fc79 	bl	800bf4c <HAL_QSPI_Init>
 800865a:	b9f0      	cbnz	r0, 800869a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800865c:	786b      	ldrb	r3, [r5, #1]
 800865e:	2b03      	cmp	r3, #3
 8008660:	d10f      	bne.n	8008682 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8008662:	2c03      	cmp	r4, #3
 8008664:	d105      	bne.n	8008672 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8008666:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8008668:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800866a:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800866c:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800866e:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8008670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff f923 	bl	80078be <MT25TL01G_ExitQPIMode>
 8008678:	2800      	cmp	r0, #0
 800867a:	d0f4      	beq.n	8008666 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800867c:	f06f 0004 	mvn.w	r0, #4
 8008680:	e7f6      	b.n	8008670 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8008682:	2c03      	cmp	r4, #3
 8008684:	d1ef      	bne.n	8008666 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8008686:	4630      	mov	r0, r6
 8008688:	f7ff f8fd 	bl	8007886 <MT25TL01G_EnterQPIMode>
 800868c:	e7f4      	b.n	8008678 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 800868e:	f06f 0001 	mvn.w	r0, #1
 8008692:	e7ed      	b.n	8008670 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8008694:	f06f 0019 	mvn.w	r0, #25
 8008698:	e7ea      	b.n	8008670 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800869a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800869e:	e7e7      	b.n	8008670 <BSP_QSPI_ConfigFlash+0x38>
 80086a0:	2400ce84 	.word	0x2400ce84
 80086a4:	24000470 	.word	0x24000470

080086a8 <BSP_QSPI_Init>:
{
 80086a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ac:	460c      	mov	r4, r1
 80086ae:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f040 81ac 	bne.w	8008a0e <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80086b6:	4d03      	ldr	r5, [pc, #12]	@ (80086c4 <BSP_QSPI_Init+0x1c>)
 80086b8:	782f      	ldrb	r7, [r5, #0]
 80086ba:	b12f      	cbz	r7, 80086c8 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 80086bc:	2000      	movs	r0, #0
}
 80086be:	b024      	add	sp, #144	@ 0x90
 80086c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c4:	2400ce84 	.word	0x2400ce84
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80086c8:	4bc3      	ldr	r3, [pc, #780]	@ (80089d8 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80086ca:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80086ce:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80086d0:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 80086d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80086d6:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80086da:	48c0      	ldr	r0, [pc, #768]	@ (80089dc <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80086dc:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 80086e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086e4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80086e8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80086ec:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 80086f4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80086f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 80086fc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80086fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008702:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8008704:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008708:	f042 0202 	orr.w	r2, r2, #2
 800870c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008710:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008714:	f002 0202 	and.w	r2, r2, #2
 8008718:	9202      	str	r2, [sp, #8]
 800871a:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800871c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008724:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008728:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800872c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008730:	9203      	str	r2, [sp, #12]
 8008732:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8008734:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008738:	f042 0208 	orr.w	r2, r2, #8
 800873c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008740:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008744:	f002 0208 	and.w	r2, r2, #8
 8008748:	9204      	str	r2, [sp, #16]
 800874a:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800874c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008750:	f042 0220 	orr.w	r2, r2, #32
 8008754:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008758:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800875c:	f002 0220 	and.w	r2, r2, #32
 8008760:	9205      	str	r2, [sp, #20]
 8008762:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8008764:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008768:	f042 0220 	orr.w	r2, r2, #32
 800876c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008770:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008774:	f002 0220 	and.w	r2, r2, #32
 8008778:	9206      	str	r2, [sp, #24]
 800877a:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800877c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008780:	f042 0220 	orr.w	r2, r2, #32
 8008784:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008788:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800878c:	f002 0220 	and.w	r2, r2, #32
 8008790:	9207      	str	r2, [sp, #28]
 8008792:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8008794:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008798:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800879c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80087a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087a4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80087a8:	9208      	str	r2, [sp, #32]
 80087aa:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80087ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80087b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80087b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087bc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80087c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80087c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80087c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80087cc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80087d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087d4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80087d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80087da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80087dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087e4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80087e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087ec:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80087f0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80087f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80087f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80087f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80087fc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008808:	930c      	str	r3, [sp, #48]	@ 0x30
 800880a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800880c:	2302      	movs	r3, #2
 800880e:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008812:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008814:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008816:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800881a:	f001 fa69 	bl	8009cf0 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800881e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8008820:	a916      	add	r1, sp, #88	@ 0x58
 8008822:	486f      	ldr	r0, [pc, #444]	@ (80089e0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008824:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8008826:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800882a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800882e:	f001 fa5f 	bl	8009cf0 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8008832:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8008836:	a916      	add	r1, sp, #88	@ 0x58
 8008838:	486a      	ldr	r0, [pc, #424]	@ (80089e4 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800883a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800883c:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800883e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8008840:	f001 fa56 	bl	8009cf0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8008844:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8008846:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800884a:	4867      	ldr	r0, [pc, #412]	@ (80089e8 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800884c:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008850:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8008852:	f001 fa4d 	bl	8009cf0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8008856:	a916      	add	r1, sp, #88	@ 0x58
 8008858:	4864      	ldr	r0, [pc, #400]	@ (80089ec <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800885a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800885e:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8008862:	f001 fa45 	bl	8009cf0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8008866:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8008868:	a916      	add	r1, sp, #88	@ 0x58
 800886a:	485f      	ldr	r0, [pc, #380]	@ (80089e8 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800886c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800886e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8008870:	f001 fa3e 	bl	8009cf0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8008874:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8008876:	a916      	add	r1, sp, #88	@ 0x58
 8008878:	485c      	ldr	r0, [pc, #368]	@ (80089ec <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800887a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800887c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800887e:	f001 fa37 	bl	8009cf0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8008882:	a916      	add	r1, sp, #88	@ 0x58
 8008884:	4856      	ldr	r0, [pc, #344]	@ (80089e0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8008886:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800888a:	f001 fa31 	bl	8009cf0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800888e:	a916      	add	r1, sp, #88	@ 0x58
 8008890:	4856      	ldr	r0, [pc, #344]	@ (80089ec <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8008892:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8008896:	f001 fa2b 	bl	8009cf0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800889a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800889e:	a916      	add	r1, sp, #88	@ 0x58
 80088a0:	484f      	ldr	r0, [pc, #316]	@ (80089e0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80088a2:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80088a4:	f001 fa24 	bl	8009cf0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80088a8:	463a      	mov	r2, r7
 80088aa:	210f      	movs	r1, #15
 80088ac:	205c      	movs	r0, #92	@ 0x5c
 80088ae:	f000 fbc9 	bl	8009044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80088b2:	205c      	movs	r0, #92	@ 0x5c
 80088b4:	f000 fbf8 	bl	80090a8 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80088b8:	a811      	add	r0, sp, #68	@ 0x44
 80088ba:	f7fe ff38 	bl	800772e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80088be:	7863      	ldrb	r3, [r4, #1]
 80088c0:	4a4b      	ldr	r2, [pc, #300]	@ (80089f0 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80088c2:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80088c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088ca:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088ce:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80088d2:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 80088d6:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80088da:	a90d      	add	r1, sp, #52	@ 0x34
 80088dc:	4845      	ldr	r0, [pc, #276]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80088de:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80088e0:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80088e2:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80088e4:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80088e6:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80088e8:	f7ff fe74 	bl	80085d4 <MX_QSPI_Init>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f040 8091 	bne.w	8008a14 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80088f2:	2103      	movs	r1, #3
 80088f4:	483f      	ldr	r0, [pc, #252]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 80088f6:	f7ff f88e 	bl	8007a16 <MT25TL01G_ResetEnable>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	f040 8084 	bne.w	8008a08 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8008900:	2103      	movs	r1, #3
 8008902:	483c      	ldr	r0, [pc, #240]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 8008904:	f7ff f8a8 	bl	8007a58 <MT25TL01G_ResetMemory>
 8008908:	2800      	cmp	r0, #0
 800890a:	d17d      	bne.n	8008a08 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800890c:	7869      	ldrb	r1, [r5, #1]
 800890e:	4839      	ldr	r0, [pc, #228]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 8008910:	f7fe ff1e 	bl	8007750 <MT25TL01G_AutoPollingMemReady>
 8008914:	4601      	mov	r1, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d176      	bne.n	8008a08 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800891a:	4836      	ldr	r0, [pc, #216]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 800891c:	f7ff f87b 	bl	8007a16 <MT25TL01G_ResetEnable>
 8008920:	4601      	mov	r1, r0
 8008922:	2800      	cmp	r0, #0
 8008924:	d170      	bne.n	8008a08 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8008926:	4833      	ldr	r0, [pc, #204]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 8008928:	f7ff f896 	bl	8007a58 <MT25TL01G_ResetMemory>
 800892c:	4601      	mov	r1, r0
 800892e:	2800      	cmp	r0, #0
 8008930:	d16a      	bne.n	8008a08 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8008932:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8008934:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008936:	482f      	ldr	r0, [pc, #188]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8008938:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800893a:	f7fe ff09 	bl	8007750 <MT25TL01G_AutoPollingMemReady>
 800893e:	2800      	cmp	r0, #0
 8008940:	d162      	bne.n	8008a08 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008942:	7869      	ldrb	r1, [r5, #1]
 8008944:	482b      	ldr	r0, [pc, #172]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 8008946:	f7fe ff72 	bl	800782e <MT25TL01G_Enter4BytesAddressMode>
 800894a:	2800      	cmp	r0, #0
 800894c:	d15c      	bne.n	8008a08 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800894e:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8008952:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8008956:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008958:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800895c:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800895e:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008960:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8008962:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8008964:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8008968:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 800896a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800896c:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8008970:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008974:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008978:	481e      	ldr	r0, [pc, #120]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 800897a:	f003 fb33 	bl	800bfe4 <HAL_QSPI_Command>
 800897e:	2800      	cmp	r0, #0
 8008980:	d142      	bne.n	8008a08 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008986:	f10d 0102 	add.w	r1, sp, #2
 800898a:	481a      	ldr	r0, [pc, #104]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 800898c:	f003 fbcb 	bl	800c126 <HAL_QSPI_Receive>
 8008990:	2800      	cmp	r0, #0
 8008992:	d139      	bne.n	8008a08 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008994:	7869      	ldrb	r1, [r5, #1]
 8008996:	4817      	ldr	r0, [pc, #92]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 8008998:	f7fe ff05 	bl	80077a6 <MT25TL01G_WriteEnable>
 800899c:	bba0      	cbnz	r0, 8008a08 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800899e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80089a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089a4:	a916      	add	r1, sp, #88	@ 0x58
 80089a6:	4813      	ldr	r0, [pc, #76]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80089a8:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80089aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80089ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089b2:	051b      	lsls	r3, r3, #20
 80089b4:	0d1b      	lsrs	r3, r3, #20
 80089b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089be:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80089c2:	f003 fb0f 	bl	800bfe4 <HAL_QSPI_Command>
 80089c6:	b9f8      	cbnz	r0, 8008a08 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80089c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089cc:	f10d 0102 	add.w	r1, sp, #2
 80089d0:	4808      	ldr	r0, [pc, #32]	@ (80089f4 <BSP_QSPI_Init+0x34c>)
 80089d2:	f003 fb4c 	bl	800c06e <HAL_QSPI_Transmit>
 80089d6:	e00f      	b.n	80089f8 <BSP_QSPI_Init+0x350>
 80089d8:	58024400 	.word	0x58024400
 80089dc:	58020400 	.word	0x58020400
 80089e0:	58021800 	.word	0x58021800
 80089e4:	58020c00 	.word	0x58020c00
 80089e8:	58021c00 	.word	0x58021c00
 80089ec:	58021400 	.word	0x58021400
 80089f0:	080298ec 	.word	0x080298ec
 80089f4:	24000470 	.word	0x24000470
 80089f8:	b930      	cbnz	r0, 8008a08 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80089fa:	7862      	ldrb	r2, [r4, #1]
 80089fc:	7821      	ldrb	r1, [r4, #0]
 80089fe:	f7ff fe1b 	bl	8008638 <BSP_QSPI_ConfigFlash>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	f43f ae5a 	beq.w	80086bc <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a08:	f06f 0004 	mvn.w	r0, #4
 8008a0c:	e657      	b.n	80086be <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8008a0e:	f06f 0001 	mvn.w	r0, #1
 8008a12:	e654      	b.n	80086be <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8008a14:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8008a18:	e651      	b.n	80086be <BSP_QSPI_Init+0x16>
 8008a1a:	bf00      	nop

08008a1c <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8008a1c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8008a1e:	4604      	mov	r4, r0
 8008a20:	b970      	cbnz	r0, 8008a40 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8008a22:	4b09      	ldr	r3, [pc, #36]	@ (8008a48 <BSP_SDRAM_DeInit+0x2c>)
 8008a24:	4809      	ldr	r0, [pc, #36]	@ (8008a4c <BSP_SDRAM_DeInit+0x30>)
 8008a26:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8008a28:	f004 ffc8 	bl	800d9bc <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8008a2c:	207a      	movs	r0, #122	@ 0x7a
 8008a2e:	f000 fb49 	bl	80090c4 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8008a32:	4807      	ldr	r0, [pc, #28]	@ (8008a50 <BSP_SDRAM_DeInit+0x34>)
 8008a34:	4b07      	ldr	r3, [pc, #28]	@ (8008a54 <BSP_SDRAM_DeInit+0x38>)
 8008a36:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8008a38:	f003 f80c 	bl	800ba54 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8008a3c:	4620      	mov	r0, r4
}
 8008a3e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8008a40:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8008a44:	e7fb      	b.n	8008a3e <BSP_SDRAM_DeInit+0x22>
 8008a46:	bf00      	nop
 8008a48:	52004140 	.word	0x52004140
 8008a4c:	2400cf88 	.word	0x2400cf88
 8008a50:	2400ce90 	.word	0x2400ce90
 8008a54:	52000040 	.word	0x52000040

08008a58 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8008a58:	2201      	movs	r2, #1
 8008a5a:	4915      	ldr	r1, [pc, #84]	@ (8008ab0 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8008a5c:	4b15      	ldr	r3, [pc, #84]	@ (8008ab4 <MX_SDRAM_Init+0x5c>)
{
 8008a5e:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8008a60:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8008a64:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008a66:	2104      	movs	r1, #4
 8008a68:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8008a6a:	2440      	movs	r4, #64	@ 0x40
{
 8008a6c:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008a6e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8008a72:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8008a76:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8008a80:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8008a84:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8008a88:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8008a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8008a90:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8008a94:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8008a96:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8008a98:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8008a9c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8008aa0:	f004 ff64 	bl	800d96c <HAL_SDRAM_Init>
}
 8008aa4:	3800      	subs	r0, #0
 8008aa6:	bf18      	it	ne
 8008aa8:	2001      	movne	r0, #1
 8008aaa:	b008      	add	sp, #32
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	bf00      	nop
 8008ab0:	52004140 	.word	0x52004140
 8008ab4:	2400cf88 	.word	0x2400cf88

08008ab8 <BSP_SDRAM_Init>:
{
 8008ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8008aba:	4605      	mov	r5, r0
{
 8008abc:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f040 80dd 	bne.w	8008c7e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8008ac4:	4b71      	ldr	r3, [pc, #452]	@ (8008c8c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008ac6:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008ac8:	a909      	add	r1, sp, #36	@ 0x24
 8008aca:	4871      	ldr	r0, [pc, #452]	@ (8008c90 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8008acc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8008ad0:	4c70      	ldr	r4, [pc, #448]	@ (8008c94 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8008ad2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8008ad6:	4e70      	ldr	r6, [pc, #448]	@ (8008c98 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8008ad8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8008adc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008ae0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008ae4:	9201      	str	r2, [sp, #4]
 8008ae6:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8008ae8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008aec:	f042 0201 	orr.w	r2, r2, #1
 8008af0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8008af4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008af8:	f002 0201 	and.w	r2, r2, #1
 8008afc:	9202      	str	r2, [sp, #8]
 8008afe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b04:	f042 0208 	orr.w	r2, r2, #8
 8008b08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008b0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b10:	f002 0208 	and.w	r2, r2, #8
 8008b14:	9203      	str	r2, [sp, #12]
 8008b16:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008b18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b1c:	f042 0210 	orr.w	r2, r2, #16
 8008b20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008b24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b28:	f002 0210 	and.w	r2, r2, #16
 8008b2c:	9204      	str	r2, [sp, #16]
 8008b2e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008b30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b34:	f042 0220 	orr.w	r2, r2, #32
 8008b38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008b3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b40:	f002 0220 	and.w	r2, r2, #32
 8008b44:	9205      	str	r2, [sp, #20]
 8008b46:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008b54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b58:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008b5c:	9206      	str	r2, [sp, #24]
 8008b5e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008b60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008b68:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008b6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b70:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008b74:	9207      	str	r2, [sp, #28]
 8008b76:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008b78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008b84:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b8e:	9308      	str	r3, [sp, #32]
 8008b90:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008b98:	230c      	movs	r3, #12
 8008b9a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8008b9e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8008ba2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008ba4:	f001 f8a4 	bl	8009cf0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008ba8:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008bac:	a909      	add	r1, sp, #36	@ 0x24
 8008bae:	483b      	ldr	r0, [pc, #236]	@ (8008c9c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008bb0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008bb2:	f001 f89d 	bl	8009cf0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8008bb6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008bba:	a909      	add	r1, sp, #36	@ 0x24
 8008bbc:	4838      	ldr	r0, [pc, #224]	@ (8008ca0 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8008bbe:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008bc0:	f001 f896 	bl	8009cf0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8008bc4:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008bc8:	a909      	add	r1, sp, #36	@ 0x24
 8008bca:	4836      	ldr	r0, [pc, #216]	@ (8008ca4 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8008bcc:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008bce:	f001 f88f 	bl	8009cf0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8008bd2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8008bd6:	a909      	add	r1, sp, #36	@ 0x24
 8008bd8:	4833      	ldr	r0, [pc, #204]	@ (8008ca8 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8008bda:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8008bdc:	f001 f888 	bl	8009cf0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8008be0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008be4:	a909      	add	r1, sp, #36	@ 0x24
 8008be6:	4831      	ldr	r0, [pc, #196]	@ (8008cac <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8008be8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008bea:	f001 f881 	bl	8009cf0 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8008bee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008bf2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8008bf6:	f240 2002 	movw	r0, #514	@ 0x202
 8008bfa:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8008bfe:	6334      	str	r4, [r6, #48]	@ 0x30
 8008c00:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8008c02:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8008c06:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8008c0a:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8008c0c:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8008c0e:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8008c10:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8008c12:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8008c16:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8008c1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8008c1e:	4b24      	ldr	r3, [pc, #144]	@ (8008cb0 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8008c20:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8008c22:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8008c24:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8008c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8008c2c:	f002 ff12 	bl	800ba54 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8008c30:	4620      	mov	r0, r4
 8008c32:	f002 fea0 	bl	800b976 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8008c36:	462a      	mov	r2, r5
 8008c38:	210f      	movs	r1, #15
 8008c3a:	207a      	movs	r0, #122	@ 0x7a
 8008c3c:	f000 fa02 	bl	8009044 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8008c40:	207a      	movs	r0, #122	@ 0x7a
 8008c42:	f000 fa31 	bl	80090a8 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff ff06 	bl	8008a58 <MX_SDRAM_Init>
 8008c4c:	b9d0      	cbnz	r0, 8008c84 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8008c4e:	4919      	ldr	r1, [pc, #100]	@ (8008cb4 <BSP_SDRAM_Init+0x1fc>)
 8008c50:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8008c52:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8008c56:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8008c5a:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8008c5c:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8008c60:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8008c62:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8008c66:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8008c6a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8008c6c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8008c6e:	f7fe fd31 	bl	80076d4 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8008c72:	2800      	cmp	r0, #0
 8008c74:	bf18      	it	ne
 8008c76:	f06f 0004 	mvnne.w	r0, #4
}
 8008c7a:	b00f      	add	sp, #60	@ 0x3c
 8008c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8008c7e:	f06f 0001 	mvn.w	r0, #1
 8008c82:	e7fa      	b.n	8008c7a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008c88:	e7f7      	b.n	8008c7a <BSP_SDRAM_Init+0x1c2>
 8008c8a:	bf00      	nop
 8008c8c:	58024400 	.word	0x58024400
 8008c90:	58020c00 	.word	0x58020c00
 8008c94:	2400cefc 	.word	0x2400cefc
 8008c98:	2400cf88 	.word	0x2400cf88
 8008c9c:	58021000 	.word	0x58021000
 8008ca0:	58021400 	.word	0x58021400
 8008ca4:	58021800 	.word	0x58021800
 8008ca8:	58021c00 	.word	0x58021c00
 8008cac:	58022000 	.word	0x58022000
 8008cb0:	52000040 	.word	0x52000040
 8008cb4:	2400cf68 	.word	0x2400cf68

08008cb8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d15c      	bne.n	8008d80 <BSP_TS_Init+0xc8>
 8008cc6:	680b      	ldr	r3, [r1, #0]
 8008cc8:	1e5a      	subs	r2, r3, #1
 8008cca:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8008cce:	d257      	bcs.n	8008d80 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008cd0:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008cd2:	1e51      	subs	r1, r2, #1
 8008cd4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008cd8:	d252      	bcs.n	8008d80 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	bf28      	it	cs
 8008cde:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008ce0:	68e2      	ldr	r2, [r4, #12]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d84c      	bhi.n	8008d80 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8008ce6:	2370      	movs	r3, #112	@ 0x70
 8008ce8:	2254      	movs	r2, #84	@ 0x54
 8008cea:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8008cee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008dc4 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8008cf2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8008cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8008db0 <BSP_TS_Init+0xf8>)
 8008cf8:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8008cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8008db4 <BSP_TS_Init+0xfc>)
 8008cfc:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8008cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8008db8 <BSP_TS_Init+0x100>)
 8008d00:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8008d02:	4b2e      	ldr	r3, [pc, #184]	@ (8008dbc <BSP_TS_Init+0x104>)
 8008d04:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8008d06:	4b2e      	ldr	r3, [pc, #184]	@ (8008dc0 <BSP_TS_Init+0x108>)
 8008d08:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8008d0a:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8008d0e:	a906      	add	r1, sp, #24
 8008d10:	482c      	ldr	r0, [pc, #176]	@ (8008dc4 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8008d12:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8008d16:	f7fe fbe3 	bl	80074e0 <FT6X06_RegisterBusIO>
 8008d1a:	b9c0      	cbnz	r0, 8008d4e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8008d1c:	4669      	mov	r1, sp
 8008d1e:	4829      	ldr	r0, [pc, #164]	@ (8008dc4 <BSP_TS_Init+0x10c>)
 8008d20:	f7fe fb28 	bl	8007374 <FT6X06_ReadID>
 8008d24:	b998      	cbnz	r0, 8008d4e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	2b11      	cmp	r3, #17
 8008d2a:	d110      	bne.n	8008d4e <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8008d2c:	a903      	add	r1, sp, #12
 8008d2e:	4825      	ldr	r0, [pc, #148]	@ (8008dc4 <BSP_TS_Init+0x10c>)
 8008d30:	f7fe fad4 	bl	80072dc <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8008d34:	4f24      	ldr	r7, [pc, #144]	@ (8008dc8 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8008d36:	4b25      	ldr	r3, [pc, #148]	@ (8008dcc <BSP_TS_Init+0x114>)
 8008d38:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008dd4 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8008d3c:	4821      	ldr	r0, [pc, #132]	@ (8008dc4 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8008d3e:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8008d42:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4798      	blx	r3
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	b1d8      	cbz	r0, 8008d86 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8008d4e:	b116      	cbz	r6, 8008d56 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8008d50:	f04f 35ff 	mov.w	r5, #4294967295
 8008d54:	e010      	b.n	8008d78 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8008d56:	2601      	movs	r6, #1
 8008d58:	e7d7      	b.n	8008d0a <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8008d5a:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008d5c:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8008d5e:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8008d60:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008d62:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8008d64:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008d66:	68e3      	ldr	r3, [r4, #12]
 8008d68:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008d6a:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008d6c:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008d6e:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008d70:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008d72:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008d74:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8008d78:	4628      	mov	r0, r5
 8008d7a:	b00c      	add	sp, #48	@ 0x30
 8008d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008d80:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8008d84:	e7f8      	b.n	8008d78 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8008d86:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008d88:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8008d8a:	4e11      	ldr	r6, [pc, #68]	@ (8008dd0 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008d8c:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8008d8e:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8008d90:	6863      	ldr	r3, [r4, #4]
 8008d92:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8008d94:	68a3      	ldr	r3, [r4, #8]
 8008d96:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8008d98:	68e3      	ldr	r3, [r4, #12]
 8008d9a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	4798      	blx	r3
 8008da4:	2800      	cmp	r0, #0
 8008da6:	dad8      	bge.n	8008d5a <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008da8:	f06f 0504 	mvn.w	r5, #4
 8008dac:	e7e4      	b.n	8008d78 <BSP_TS_Init+0xc0>
 8008dae:	bf00      	nop
 8008db0:	080082c1 	.word	0x080082c1
 8008db4:	0800822d 	.word	0x0800822d
 8008db8:	0800859d 	.word	0x0800859d
 8008dbc:	08008569 	.word	0x08008569
 8008dc0:	080085d1 	.word	0x080085d1
 8008dc4:	2400cfbc 	.word	0x2400cfbc
 8008dc8:	2400cfe4 	.word	0x2400cfe4
 8008dcc:	2400003c 	.word	0x2400003c
 8008dd0:	2400cfe8 	.word	0x2400cfe8
 8008dd4:	2400d010 	.word	0x2400d010

08008dd8 <BSP_TS_GetState>:
{
 8008dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d14d      	bne.n	8008e7e <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8008de2:	4b28      	ldr	r3, [pc, #160]	@ (8008e84 <BSP_TS_GetState+0xac>)
 8008de4:	a901      	add	r1, sp, #4
 8008de6:	4a28      	ldr	r2, [pc, #160]	@ (8008e88 <BSP_TS_GetState+0xb0>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6810      	ldr	r0, [r2, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	4798      	blx	r3
 8008df0:	2800      	cmp	r0, #0
 8008df2:	db41      	blt.n	8008e78 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008df4:	4925      	ldr	r1, [pc, #148]	@ (8008e8c <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8008df6:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8008df8:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8008dfa:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d037      	beq.n	8008e70 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008e00:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8008e02:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008e06:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8008e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8008e0e:	bf1e      	ittt	ne
 8008e10:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8008e12:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8008e14:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8008e16:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8008e1a:	bf1c      	itt	ne
 8008e1c:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8008e20:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8008e24:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8008e28:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8008e2a:	bf44      	itt	mi
 8008e2c:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8008e30:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008e32:	680f      	ldr	r7, [r1, #0]
 8008e34:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008e36:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8008e38:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008e3a:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8008e3c:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008e3e:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008e42:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008e46:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008e48:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008e4a:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008e4c:	bf8c      	ite	hi
 8008e4e:	eba2 0c05 	subhi.w	ip, r2, r5
 8008e52:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8008e56:	4283      	cmp	r3, r0
 8008e58:	bf8c      	ite	hi
 8008e5a:	1a1e      	subhi	r6, r3, r0
 8008e5c:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8008e5e:	4567      	cmp	r7, ip
 8008e60:	d301      	bcc.n	8008e66 <BSP_TS_GetState+0x8e>
 8008e62:	42b7      	cmp	r7, r6
 8008e64:	d205      	bcs.n	8008e72 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8008e66:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8008e68:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8008e6a:	2000      	movs	r0, #0
}
 8008e6c:	b005      	add	sp, #20
 8008e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8008e70:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008e72:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8008e76:	e7f8      	b.n	8008e6a <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e78:	f06f 0004 	mvn.w	r0, #4
 8008e7c:	e7f6      	b.n	8008e6c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8008e7e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8008e82:	e7f3      	b.n	8008e6c <BSP_TS_GetState+0x94>
 8008e84:	2400d010 	.word	0x2400d010
 8008e88:	2400cfe4 	.word	0x2400cfe4
 8008e8c:	2400cfe8 	.word	0x2400cfe8

08008e90 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008e90:	4b2d      	ldr	r3, [pc, #180]	@ (8008f48 <SystemInit+0xb8>)
 8008e92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008e96:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8008e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	f042 0210 	orr.w	r2, r2, #16
 8008ea4:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008ea6:	4a29      	ldr	r2, [pc, #164]	@ (8008f4c <SystemInit+0xbc>)
 8008ea8:	6813      	ldr	r3, [r2, #0]
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	2b06      	cmp	r3, #6
 8008eb0:	d805      	bhi.n	8008ebe <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008eb2:	6813      	ldr	r3, [r2, #0]
 8008eb4:	f023 030f 	bic.w	r3, r3, #15
 8008eb8:	f043 0307 	orr.w	r3, r3, #7
 8008ebc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008ebe:	4b24      	ldr	r3, [pc, #144]	@ (8008f50 <SystemInit+0xc0>)
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	f042 0201 	orr.w	r2, r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008ec8:	2200      	movs	r2, #0
 8008eca:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008ecc:	4a21      	ldr	r2, [pc, #132]	@ (8008f54 <SystemInit+0xc4>)
 8008ece:	6819      	ldr	r1, [r3, #0]
 8008ed0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008ed2:	491e      	ldr	r1, [pc, #120]	@ (8008f4c <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8008ed4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008ed6:	680a      	ldr	r2, [r1, #0]
 8008ed8:	0712      	lsls	r2, r2, #28
 8008eda:	d505      	bpl.n	8008ee8 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008edc:	680a      	ldr	r2, [r1, #0]
 8008ede:	f022 020f 	bic.w	r2, r2, #15
 8008ee2:	f042 0207 	orr.w	r2, r2, #7
 8008ee6:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008ee8:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008eea:	491b      	ldr	r1, [pc, #108]	@ (8008f58 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8008eec:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8008eee:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8008ef0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8008ef2:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008ef4:	4919      	ldr	r1, [pc, #100]	@ (8008f5c <SystemInit+0xcc>)
 8008ef6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008ef8:	4919      	ldr	r1, [pc, #100]	@ (8008f60 <SystemInit+0xd0>)
 8008efa:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008efc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008efe:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008f00:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008f02:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008f04:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008f06:	6819      	ldr	r1, [r3, #0]
 8008f08:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8008f0c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008f0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8008f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f14:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8008f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008f20:	4b10      	ldr	r3, [pc, #64]	@ (8008f64 <SystemInit+0xd4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	0c1b      	lsrs	r3, r3, #16
 8008f26:	041b      	lsls	r3, r3, #16
 8008f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f2c:	d203      	bcs.n	8008f36 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f68 <SystemInit+0xd8>)
 8008f30:	2201      	movs	r2, #1
 8008f32:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008f36:	4b0d      	ldr	r3, [pc, #52]	@ (8008f6c <SystemInit+0xdc>)
 8008f38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008f3c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8008f3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008f42:	4b01      	ldr	r3, [pc, #4]	@ (8008f48 <SystemInit+0xb8>)
 8008f44:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8008f46:	4770      	bx	lr
 8008f48:	e000ed00 	.word	0xe000ed00
 8008f4c:	52002000 	.word	0x52002000
 8008f50:	58024400 	.word	0x58024400
 8008f54:	eaf6ed7f 	.word	0xeaf6ed7f
 8008f58:	02020200 	.word	0x02020200
 8008f5c:	01ff0000 	.word	0x01ff0000
 8008f60:	01010280 	.word	0x01010280
 8008f64:	5c001000 	.word	0x5c001000
 8008f68:	51008000 	.word	0x51008000
 8008f6c:	52004000 	.word	0x52004000

08008f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f70:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f72:	2003      	movs	r0, #3
 8008f74:	f000 f854 	bl	8009020 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f78:	f003 fcc2 	bl	800c900 <HAL_RCC_GetSysClockFreq>
 8008f7c:	490f      	ldr	r1, [pc, #60]	@ (8008fbc <HAL_Init+0x4c>)
 8008f7e:	4a10      	ldr	r2, [pc, #64]	@ (8008fc0 <HAL_Init+0x50>)
 8008f80:	698b      	ldr	r3, [r1, #24]
 8008f82:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008f86:	5cd3      	ldrb	r3, [r2, r3]
 8008f88:	f003 031f 	and.w	r3, r3, #31
 8008f8c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f8e:	698b      	ldr	r3, [r1, #24]
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	5cd3      	ldrb	r3, [r2, r3]
 8008f96:	4a0b      	ldr	r2, [pc, #44]	@ (8008fc4 <HAL_Init+0x54>)
 8008f98:	f003 031f 	and.w	r3, r3, #31
 8008f9c:	fa20 f303 	lsr.w	r3, r0, r3
 8008fa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fa2:	4b09      	ldr	r3, [pc, #36]	@ (8008fc8 <HAL_Init+0x58>)
 8008fa4:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	f7f8 fca4 	bl	80018f4 <HAL_InitTick>
 8008fac:	4604      	mov	r4, r0
 8008fae:	b918      	cbnz	r0, 8008fb8 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008fb0:	f7f8 f92c 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008fb8:	2401      	movs	r4, #1
 8008fba:	e7fb      	b.n	8008fb4 <HAL_Init+0x44>
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	080298f4 	.word	0x080298f4
 8008fc4:	2400006c 	.word	0x2400006c
 8008fc8:	24000070 	.word	0x24000070

08008fcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008fcc:	4a03      	ldr	r2, [pc, #12]	@ (8008fdc <HAL_IncTick+0x10>)
 8008fce:	4b04      	ldr	r3, [pc, #16]	@ (8008fe0 <HAL_IncTick+0x14>)
 8008fd0:	6811      	ldr	r1, [r2, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	440b      	add	r3, r1
 8008fd6:	6013      	str	r3, [r2, #0]
}
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	2400d014 	.word	0x2400d014
 8008fe0:	24000074 	.word	0x24000074

08008fe4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008fe4:	4b01      	ldr	r3, [pc, #4]	@ (8008fec <HAL_GetTick+0x8>)
 8008fe6:	6818      	ldr	r0, [r3, #0]
}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	2400d014 	.word	0x2400d014

08008ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008ff4:	f7ff fff6 	bl	8008fe4 <HAL_GetTick>
 8008ff8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ffa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008ffc:	bf1e      	ittt	ne
 8008ffe:	4b04      	ldrne	r3, [pc, #16]	@ (8009010 <HAL_Delay+0x20>)
 8009000:	781b      	ldrbne	r3, [r3, #0]
 8009002:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009004:	f7ff ffee 	bl	8008fe4 <HAL_GetTick>
 8009008:	1b43      	subs	r3, r0, r5
 800900a:	42a3      	cmp	r3, r4
 800900c:	d3fa      	bcc.n	8009004 <HAL_Delay+0x14>
  {
  }
}
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	24000074 	.word	0x24000074

08009014 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8009014:	4b01      	ldr	r3, [pc, #4]	@ (800901c <HAL_GetREVID+0x8>)
 8009016:	6818      	ldr	r0, [r3, #0]
}
 8009018:	0c00      	lsrs	r0, r0, #16
 800901a:	4770      	bx	lr
 800901c:	5c001000 	.word	0x5c001000

08009020 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009020:	4907      	ldr	r1, [pc, #28]	@ (8009040 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009022:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009024:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009026:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800902a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800902e:	0412      	lsls	r2, r2, #16
 8009030:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800903c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800903e:	4770      	bx	lr
 8009040:	e000ed00 	.word	0xe000ed00

08009044 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009044:	4b16      	ldr	r3, [pc, #88]	@ (80090a0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009046:	b530      	push	{r4, r5, lr}
 8009048:	68dc      	ldr	r4, [r3, #12]
 800904a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800904e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009052:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009054:	2b04      	cmp	r3, #4
 8009056:	bf28      	it	cs
 8009058:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800905a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800905c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009060:	bf8c      	ite	hi
 8009062:	3c03      	subhi	r4, #3
 8009064:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009066:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800906a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800906c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009070:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009074:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009078:	fa03 f304 	lsl.w	r3, r3, r4
 800907c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009080:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8009084:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8009086:	db06      	blt.n	8009096 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009088:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800908c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8009090:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009094:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009096:	f000 000f 	and.w	r0, r0, #15
 800909a:	4a02      	ldr	r2, [pc, #8]	@ (80090a4 <HAL_NVIC_SetPriority+0x60>)
 800909c:	5413      	strb	r3, [r2, r0]
 800909e:	e7f9      	b.n	8009094 <HAL_NVIC_SetPriority+0x50>
 80090a0:	e000ed00 	.word	0xe000ed00
 80090a4:	e000ed14 	.word	0xe000ed14

080090a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80090a8:	2800      	cmp	r0, #0
 80090aa:	db07      	blt.n	80090bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090ac:	2301      	movs	r3, #1
 80090ae:	0941      	lsrs	r1, r0, #5
 80090b0:	f000 001f 	and.w	r0, r0, #31
 80090b4:	4a02      	ldr	r2, [pc, #8]	@ (80090c0 <HAL_NVIC_EnableIRQ+0x18>)
 80090b6:	4083      	lsls	r3, r0
 80090b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	e000e100 	.word	0xe000e100

080090c4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80090c4:	2800      	cmp	r0, #0
 80090c6:	db0c      	blt.n	80090e2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090c8:	0943      	lsrs	r3, r0, #5
 80090ca:	2201      	movs	r2, #1
 80090cc:	f000 001f 	and.w	r0, r0, #31
 80090d0:	4904      	ldr	r1, [pc, #16]	@ (80090e4 <HAL_NVIC_DisableIRQ+0x20>)
 80090d2:	3320      	adds	r3, #32
 80090d4:	4082      	lsls	r2, r0
 80090d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80090da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80090de:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80090e2:	4770      	bx	lr
 80090e4:	e000e100 	.word	0xe000e100

080090e8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80090e8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80090ec:	4b04      	ldr	r3, [pc, #16]	@ (8009100 <HAL_MPU_Disable+0x18>)
 80090ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090f0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80090f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	e000ed00 	.word	0xe000ed00

08009104 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009104:	4b06      	ldr	r3, [pc, #24]	@ (8009120 <HAL_MPU_Enable+0x1c>)
 8009106:	f040 0001 	orr.w	r0, r0, #1
 800910a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800910e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009110:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009114:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8009116:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800911a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800911e:	4770      	bx	lr
 8009120:	e000ed00 	.word	0xe000ed00

08009124 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009124:	7843      	ldrb	r3, [r0, #1]
 8009126:	4a14      	ldr	r2, [pc, #80]	@ (8009178 <HAL_MPU_ConfigRegion+0x54>)
 8009128:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800912c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8009130:	f023 0301 	bic.w	r3, r3, #1
 8009134:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8009138:	6843      	ldr	r3, [r0, #4]
 800913a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800913e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009140:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009142:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009144:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009148:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800914a:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800914c:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800914e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8009152:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009154:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009158:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800915a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800915e:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009164:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009166:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800916a:	7a01      	ldrb	r1, [r0, #8]
 800916c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009170:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	e000ed00 	.word	0xe000ed00

0800917c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800917c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800917e:	4604      	mov	r4, r0
 8009180:	b908      	cbnz	r0, 8009186 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8009182:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8009184:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009186:	7f43      	ldrb	r3, [r0, #29]
 8009188:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800918c:	b913      	cbnz	r3, 8009194 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800918e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8009190:	f7f8 f854 	bl	800123c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009194:	2302      	movs	r3, #2
 8009196:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009198:	7923      	ldrb	r3, [r4, #4]
 800919a:	b9e3      	cbnz	r3, 80091d6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	4a13      	ldr	r2, [pc, #76]	@ (80091ec <HAL_CRC_Init+0x70>)
 80091a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	f022 0218 	bic.w	r2, r2, #24
 80091a8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80091aa:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80091ac:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80091ae:	b9d2      	cbnz	r2, 80091e6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80091b4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80091b6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	6961      	ldr	r1, [r4, #20]
 80091bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80091c0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80091c2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80091c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091cc:	430a      	orrs	r2, r1
 80091ce:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80091d0:	2301      	movs	r3, #1
 80091d2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80091d4:	e7d6      	b.n	8009184 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80091d6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 f808 	bl	80091f0 <HAL_CRCEx_Polynomial_Set>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d0e2      	beq.n	80091aa <HAL_CRC_Init+0x2e>
 80091e4:	e7cd      	b.n	8009182 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80091e6:	6922      	ldr	r2, [r4, #16]
 80091e8:	e7e4      	b.n	80091b4 <HAL_CRC_Init+0x38>
 80091ea:	bf00      	nop
 80091ec:	04c11db7 	.word	0x04c11db7

080091f0 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80091f0:	07cb      	lsls	r3, r1, #31
{
 80091f2:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80091f4:	d50d      	bpl.n	8009212 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80091f6:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80091f8:	3b01      	subs	r3, #1
 80091fa:	d31d      	bcc.n	8009238 <HAL_CRCEx_Polynomial_Set+0x48>
 80091fc:	fa21 f403 	lsr.w	r4, r1, r3
 8009200:	07e4      	lsls	r4, r4, #31
 8009202:	d5f9      	bpl.n	80091f8 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8009204:	2a10      	cmp	r2, #16
 8009206:	d013      	beq.n	8009230 <HAL_CRCEx_Polynomial_Set+0x40>
 8009208:	2a10      	cmp	r2, #16
 800920a:	d804      	bhi.n	8009216 <HAL_CRCEx_Polynomial_Set+0x26>
 800920c:	b13a      	cbz	r2, 800921e <HAL_CRCEx_Polynomial_Set+0x2e>
 800920e:	2a08      	cmp	r2, #8
 8009210:	d010      	beq.n	8009234 <HAL_CRCEx_Polynomial_Set+0x44>
 8009212:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8009214:	e00b      	b.n	800922e <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8009216:	2a18      	cmp	r2, #24
 8009218:	d1fb      	bne.n	8009212 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800921a:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800921c:	d8f9      	bhi.n	8009212 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009222:	6883      	ldr	r3, [r0, #8]
 8009224:	f023 0318 	bic.w	r3, r3, #24
 8009228:	4313      	orrs	r3, r2
 800922a:	6083      	str	r3, [r0, #8]
 800922c:	2000      	movs	r0, #0
}
 800922e:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8009230:	2b07      	cmp	r3, #7
 8009232:	e7f3      	b.n	800921c <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8009234:	2b0f      	cmp	r3, #15
 8009236:	e7f1      	b.n	800921c <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8009238:	2a10      	cmp	r2, #16
 800923a:	d1e5      	bne.n	8009208 <HAL_CRCEx_Polynomial_Set+0x18>
 800923c:	e7e9      	b.n	8009212 <HAL_CRCEx_Polynomial_Set+0x22>

0800923e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800923e:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009240:	4604      	mov	r4, r0
 8009242:	2800      	cmp	r0, #0
 8009244:	d036      	beq.n	80092b4 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8009246:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800924a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800924e:	b91b      	cbnz	r3, 8009258 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8009250:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8009254:	f7f8 f80a 	bl	800126c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009258:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800925a:	69e0      	ldr	r0, [r4, #28]
 800925c:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800925e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8009266:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8009268:	6819      	ldr	r1, [r3, #0]
 800926a:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 800926e:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8009272:	430a      	orrs	r2, r1
 8009274:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8009276:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009278:	68a2      	ldr	r2, [r4, #8]
 800927a:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800927e:	4302      	orrs	r2, r0
 8009280:	f021 0101 	bic.w	r1, r1, #1
 8009284:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8009286:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8009288:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800928a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800928c:	0c12      	lsrs	r2, r2, #16
 800928e:	0412      	lsls	r2, r2, #16
 8009290:	430a      	orrs	r2, r1
 8009292:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8009294:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009296:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800929a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800929e:	0552      	lsls	r2, r2, #21
 80092a0:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80092a4:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80092a6:	430a      	orrs	r2, r1
 80092a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80092aa:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80092ac:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80092ae:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 80092b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80092b4:	2001      	movs	r0, #1
 80092b6:	e7fc      	b.n	80092b2 <HAL_DMA2D_Init+0x74>

080092b8 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80092b8:	4770      	bx	lr

080092ba <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80092ba:	4770      	bx	lr

080092bc <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80092bc:	6803      	ldr	r3, [r0, #0]
{
 80092be:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80092c0:	685e      	ldr	r6, [r3, #4]
{
 80092c2:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80092c4:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80092c6:	07f2      	lsls	r2, r6, #31
 80092c8:	d514      	bpl.n	80092f4 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80092ca:	05e9      	lsls	r1, r5, #23
 80092cc:	d512      	bpl.n	80092f4 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80092d4:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80092d6:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80092d8:	f042 0201 	orr.w	r2, r2, #1
 80092dc:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80092de:	2201      	movs	r2, #1
 80092e0:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80092e2:	2304      	movs	r3, #4
 80092e4:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80092e8:	2300      	movs	r3, #0
 80092ea:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80092ee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80092f0:	b103      	cbz	r3, 80092f4 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80092f2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80092f4:	06b2      	lsls	r2, r6, #26
 80092f6:	d516      	bpl.n	8009326 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80092f8:	04ab      	lsls	r3, r5, #18
 80092fa:	d514      	bpl.n	8009326 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009304:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8009306:	2220      	movs	r2, #32
 8009308:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800930a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800930c:	f043 0302 	orr.w	r3, r3, #2
 8009310:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009312:	2304      	movs	r3, #4
 8009314:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8009318:	2300      	movs	r3, #0
 800931a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800931e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009320:	b10b      	cbz	r3, 8009326 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8009322:	4620      	mov	r0, r4
 8009324:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8009326:	0730      	lsls	r0, r6, #28
 8009328:	d516      	bpl.n	8009358 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800932a:	0529      	lsls	r1, r5, #20
 800932c:	d514      	bpl.n	8009358 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009336:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8009338:	2208      	movs	r2, #8
 800933a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800933c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800933e:	f043 0304 	orr.w	r3, r3, #4
 8009342:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009344:	2304      	movs	r3, #4
 8009346:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800934a:	2300      	movs	r3, #0
 800934c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8009350:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009352:	b10b      	cbz	r3, 8009358 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8009354:	4620      	mov	r0, r4
 8009356:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8009358:	0772      	lsls	r2, r6, #29
 800935a:	d50b      	bpl.n	8009374 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800935c:	056b      	lsls	r3, r5, #21
 800935e:	d509      	bpl.n	8009374 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8009360:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8009362:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800936a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800936c:	2204      	movs	r2, #4
 800936e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8009370:	f7ff ffa2 	bl	80092b8 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8009374:	07b0      	lsls	r0, r6, #30
 8009376:	d514      	bpl.n	80093a2 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8009378:	05a9      	lsls	r1, r5, #22
 800937a:	d512      	bpl.n	80093a2 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009384:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8009386:	2202      	movs	r2, #2
 8009388:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800938a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800938c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800938e:	2301      	movs	r3, #1
 8009390:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8009394:	2300      	movs	r3, #0
 8009396:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800939a:	6a23      	ldr	r3, [r4, #32]
 800939c:	b10b      	cbz	r3, 80093a2 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800939e:	4620      	mov	r0, r4
 80093a0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80093a2:	06f2      	lsls	r2, r6, #27
 80093a4:	d513      	bpl.n	80093ce <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80093a6:	04eb      	lsls	r3, r5, #19
 80093a8:	d511      	bpl.n	80093ce <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80093aa:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80093ac:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80093b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80093b6:	2210      	movs	r2, #16
 80093b8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80093ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093bc:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80093be:	2301      	movs	r3, #1
 80093c0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80093c4:	2300      	movs	r3, #0
 80093c6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80093ca:	f7ff ff76 	bl	80092ba <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80093ce:	bd70      	pop	{r4, r5, r6, pc}

080093d0 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 80093d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	4607      	mov	r7, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	4614      	mov	r4, r2
 80093da:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80093dc:	f7ff fe02 	bl	8008fe4 <HAL_GetTick>
 80093e0:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80093e6:	07d2      	lsls	r2, r2, #31
 80093e8:	d50a      	bpl.n	8009400 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80093ea:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80093ee:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 80093f0:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80093f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80093f6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80093fa:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 80093fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009400:	f7ff fdf0 	bl	8008fe4 <HAL_GetTick>
 8009404:	eba0 0008 	sub.w	r0, r0, r8
 8009408:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800940c:	d9e9      	bls.n	80093e2 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800940e:	2003      	movs	r0, #3
 8009410:	e7f4      	b.n	80093fc <DSI_ShortWrite.constprop.0+0x2c>

08009412 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009412:	7c03      	ldrb	r3, [r0, #16]
{
 8009414:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8009416:	2b01      	cmp	r3, #1
 8009418:	d05b      	beq.n	80094d2 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800941a:	6803      	ldr	r3, [r0, #0]
 800941c:	2000      	movs	r0, #0
 800941e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8009422:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8009426:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8009428:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800942a:	d507      	bpl.n	800943c <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800942c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009430:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8009434:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8009438:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800943c:	0788      	lsls	r0, r1, #30
 800943e:	d505      	bpl.n	800944c <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8009440:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009444:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8009448:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800944c:	0748      	lsls	r0, r1, #29
 800944e:	d505      	bpl.n	800945c <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8009450:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8009454:	f040 0001 	orr.w	r0, r0, #1
 8009458:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800945c:	0708      	lsls	r0, r1, #28
 800945e:	d505      	bpl.n	800946c <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8009460:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8009464:	f040 0002 	orr.w	r0, r0, #2
 8009468:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800946c:	06c8      	lsls	r0, r1, #27
 800946e:	d505      	bpl.n	800947c <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8009470:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8009474:	f040 000c 	orr.w	r0, r0, #12
 8009478:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800947c:	0688      	lsls	r0, r1, #26
 800947e:	d505      	bpl.n	800948c <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8009480:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8009484:	f040 0010 	orr.w	r0, r0, #16
 8009488:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800948c:	0648      	lsls	r0, r1, #25
 800948e:	d505      	bpl.n	800949c <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8009490:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8009494:	f040 0020 	orr.w	r0, r0, #32
 8009498:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800949c:	0608      	lsls	r0, r1, #24
 800949e:	d505      	bpl.n	80094ac <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80094a0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80094a4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80094a8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80094ac:	05c8      	lsls	r0, r1, #23
 80094ae:	d505      	bpl.n	80094bc <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80094b0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80094b4:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80094b8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80094bc:	0589      	lsls	r1, r1, #22
 80094be:	d505      	bpl.n	80094cc <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80094c0:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 80094c4:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 80094c8:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80094cc:	2000      	movs	r0, #0
 80094ce:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 80094d0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80094d2:	2002      	movs	r0, #2
}
 80094d4:	4770      	bx	lr
	...

080094d8 <HAL_DSI_Init>:
{
 80094d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80094da:	460d      	mov	r5, r1
  if (hdsi == NULL)
 80094dc:	4604      	mov	r4, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	f000 80ea 	beq.w	80096b8 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80094e4:	7c43      	ldrb	r3, [r0, #17]
 80094e6:	b90b      	cbnz	r3, 80094ec <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 80094e8:	f7f7 fee4 	bl	80012b4 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80094ec:	2303      	movs	r3, #3
 80094ee:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80094f0:	2300      	movs	r3, #0
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80094fa:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80094fe:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8009502:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8009506:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800950e:	f7ff fd69 	bl	8008fe4 <HAL_GetTick>
 8009512:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8009514:	6822      	ldr	r2, [r4, #0]
 8009516:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800951a:	04d9      	lsls	r1, r3, #19
 800951c:	d56e      	bpl.n	80095fc <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800951e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8009522:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8009526:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800952a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800952e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8009532:	e9d5 0300 	ldrd	r0, r3, [r5]
 8009536:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8009538:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800953c:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800953e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8009542:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8009544:	430b      	orrs	r3, r1
 8009546:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800954a:	2300      	movs	r3, #0
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8009552:	f043 0301 	orr.w	r3, r3, #1
 8009556:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800955a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8009566:	f7ff fd43 	bl	8008ff0 <HAL_Delay>
  tickstart = HAL_GetTick();
 800956a:	f7ff fd3b 	bl	8008fe4 <HAL_GetTick>
 800956e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8009576:	05d2      	lsls	r2, r2, #23
 8009578:	d548      	bpl.n	800960c <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 800957a:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800957c:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 800957e:	9202      	str	r2, [sp, #8]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	605a      	str	r2, [r3, #4]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	f002 0201 	and.w	r2, r2, #1
 800958e:	9202      	str	r2, [sp, #8]
 8009590:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009598:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800959e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80095a0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80095a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80095a6:	f042 0202 	orr.w	r2, r2, #2
 80095aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80095ae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80095b2:	f042 0204 	orr.w	r2, r2, #4
 80095b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80095ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80095be:	f022 0203 	bic.w	r2, r2, #3
 80095c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80095c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80095ca:	430a      	orrs	r2, r1
 80095cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 80095d0:	f7ff fd08 	bl	8008fe4 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80095d4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80095d6:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80095d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095dc:	079b      	lsls	r3, r3, #30
 80095de:	d025      	beq.n	800962c <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80095e6:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80095ea:	2b94      	cmp	r3, #148	@ 0x94
 80095ec:	d025      	beq.n	800963a <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80095ee:	f7ff fcf9 	bl	8008fe4 <HAL_GetTick>
 80095f2:	1b80      	subs	r0, r0, r6
 80095f4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80095f8:	d9f2      	bls.n	80095e0 <HAL_DSI_Init+0x108>
 80095fa:	e014      	b.n	8009626 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80095fc:	f7ff fcf2 	bl	8008fe4 <HAL_GetTick>
 8009600:	1b80      	subs	r0, r0, r6
 8009602:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009606:	d985      	bls.n	8009514 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8009608:	2003      	movs	r0, #3
 800960a:	e053      	b.n	80096b4 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800960c:	f7ff fcea 	bl	8008fe4 <HAL_GetTick>
 8009610:	1b80      	subs	r0, r0, r6
 8009612:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009616:	d9ab      	bls.n	8009570 <HAL_DSI_Init+0x98>
 8009618:	e7f6      	b.n	8009608 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800961a:	f7ff fce3 	bl	8008fe4 <HAL_GetTick>
 800961e:	1b80      	subs	r0, r0, r6
 8009620:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009624:	d902      	bls.n	800962c <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8009626:	2300      	movs	r3, #0
 8009628:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800962a:	e7ed      	b.n	8009608 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009632:	f003 0314 	and.w	r3, r3, #20
 8009636:	2b14      	cmp	r3, #20
 8009638:	d1ef      	bne.n	800961a <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800963a:	686b      	ldr	r3, [r5, #4]
 800963c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8009640:	4a1e      	ldr	r2, [pc, #120]	@ (80096bc <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8009642:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8009644:	2b01      	cmp	r3, #1
 8009646:	bf38      	it	cc
 8009648:	2301      	movcc	r3, #1
 800964a:	435a      	muls	r2, r3
 800964c:	68ab      	ldr	r3, [r5, #8]
 800964e:	f003 0303 	and.w	r3, r3, #3
 8009652:	409a      	lsls	r2, r3
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	434b      	muls	r3, r1
 8009658:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8009662:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8009666:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800966a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800966e:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8009670:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8009672:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8009676:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800967a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 800967e:	9003      	str	r0, [sp, #12]
 8009680:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8009682:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8009684:	f022 0201 	bic.w	r2, r2, #1
 8009688:	605a      	str	r2, [r3, #4]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	f002 0201 	and.w	r2, r2, #1
 8009690:	9203      	str	r2, [sp, #12]
 8009692:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8009694:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8009698:	f022 0203 	bic.w	r2, r2, #3
 800969c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80096a0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80096a4:	430a      	orrs	r2, r1
 80096a6:	f042 0201 	orr.w	r2, r2, #1
 80096aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 80096ae:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80096b0:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 80096b2:	7463      	strb	r3, [r4, #17]
}
 80096b4:	b004      	add	sp, #16
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80096b8:	2001      	movs	r0, #1
 80096ba:	e7fb      	b.n	80096b4 <HAL_DSI_Init+0x1dc>
 80096bc:	003d0900 	.word	0x003d0900

080096c0 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 80096c0:	4770      	bx	lr

080096c2 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80096c2:	6803      	ldr	r3, [r0, #0]
 80096c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80096c8:	07d1      	lsls	r1, r2, #31
{
 80096ca:	b510      	push	{r4, lr}
 80096cc:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80096ce:	d508      	bpl.n	80096e2 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80096d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80096d4:	07d2      	lsls	r2, r2, #31
 80096d6:	d504      	bpl.n	80096e2 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80096d8:	2201      	movs	r2, #1
 80096da:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 80096de:	f7f8 fd81 	bl	80021e4 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80096e8:	0791      	lsls	r1, r2, #30
 80096ea:	d509      	bpl.n	8009700 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80096ec:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80096f0:	0792      	lsls	r2, r2, #30
 80096f2:	d505      	bpl.n	8009700 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80096f4:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80096f6:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80096f8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80096fc:	f7f8 fda4 	bl	8002248 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8009700:	69a3      	ldr	r3, [r4, #24]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d04e      	beq.n	80097a4 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8009706:	6821      	ldr	r1, [r4, #0]
 8009708:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800970c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8009710:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8009712:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8009716:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800971a:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800971c:	b291      	uxth	r1, r2
 800971e:	b119      	cbz	r1, 8009728 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8009720:	6961      	ldr	r1, [r4, #20]
 8009722:	f041 0101 	orr.w	r1, r1, #1
 8009726:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8009728:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800972c:	d003      	beq.n	8009736 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800972e:	6962      	ldr	r2, [r4, #20]
 8009730:	f042 0202 	orr.w	r2, r2, #2
 8009734:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8009736:	07d8      	lsls	r0, r3, #31
 8009738:	d503      	bpl.n	8009742 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800973a:	6962      	ldr	r2, [r4, #20]
 800973c:	f042 0204 	orr.w	r2, r2, #4
 8009740:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8009742:	0799      	lsls	r1, r3, #30
 8009744:	d503      	bpl.n	800974e <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8009746:	6962      	ldr	r2, [r4, #20]
 8009748:	f042 0208 	orr.w	r2, r2, #8
 800974c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800974e:	f013 0f0c 	tst.w	r3, #12
 8009752:	d003      	beq.n	800975c <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8009754:	6962      	ldr	r2, [r4, #20]
 8009756:	f042 0210 	orr.w	r2, r2, #16
 800975a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800975c:	06da      	lsls	r2, r3, #27
 800975e:	d503      	bpl.n	8009768 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8009760:	6962      	ldr	r2, [r4, #20]
 8009762:	f042 0220 	orr.w	r2, r2, #32
 8009766:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8009768:	0698      	lsls	r0, r3, #26
 800976a:	d503      	bpl.n	8009774 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800976c:	6962      	ldr	r2, [r4, #20]
 800976e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009772:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8009774:	0659      	lsls	r1, r3, #25
 8009776:	d503      	bpl.n	8009780 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8009778:	6962      	ldr	r2, [r4, #20]
 800977a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800977e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8009780:	061a      	lsls	r2, r3, #24
 8009782:	d503      	bpl.n	800978c <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8009784:	6962      	ldr	r2, [r4, #20]
 8009786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800978a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800978c:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8009790:	d003      	beq.n	800979a <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8009792:	6963      	ldr	r3, [r4, #20]
 8009794:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009798:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800979a:	6963      	ldr	r3, [r4, #20]
 800979c:	b113      	cbz	r3, 80097a4 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800979e:	4620      	mov	r0, r4
 80097a0:	f7ff ff8e 	bl	80096c0 <HAL_DSI_ErrorCallback>
}
 80097a4:	bd10      	pop	{r4, pc}

080097a6 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80097a6:	7c02      	ldrb	r2, [r0, #16]
{
 80097a8:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80097aa:	2a01      	cmp	r2, #1
 80097ac:	d00a      	beq.n	80097c4 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80097ae:	6802      	ldr	r2, [r0, #0]
 80097b0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80097b2:	f020 0003 	bic.w	r0, r0, #3
 80097b6:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80097b8:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80097ba:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80097bc:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80097be:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 80097c0:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80097c2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80097c4:	2002      	movs	r0, #2
}
 80097c6:	4770      	bx	lr

080097c8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80097c8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80097ca:	7c03      	ldrb	r3, [r0, #16]
{
 80097cc:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d069      	beq.n	80098a6 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80097d2:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80097d4:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80097d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097d8:	f042 0201 	orr.w	r2, r2, #1
 80097dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80097de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80097e2:	f022 0201 	bic.w	r2, r2, #1
 80097e6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80097ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80097f6:	68da      	ldr	r2, [r3, #12]
 80097f8:	f022 0203 	bic.w	r2, r2, #3
 80097fc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	4302      	orrs	r2, r0
 8009802:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8009804:	695a      	ldr	r2, [r3, #20]
 8009806:	f022 0207 	bic.w	r2, r2, #7
 800980a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800980c:	6958      	ldr	r0, [r3, #20]
 800980e:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8009812:	432a      	orrs	r2, r5
 8009814:	694d      	ldr	r5, [r1, #20]
 8009816:	432a      	orrs	r2, r5
 8009818:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800981a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800981c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800981e:	691a      	ldr	r2, [r3, #16]
 8009820:	f022 020f 	bic.w	r2, r2, #15
 8009824:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	4302      	orrs	r2, r0
 800982a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800982c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8009830:	f022 020e 	bic.w	r2, r2, #14
 8009834:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8009838:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800983c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8009840:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8009842:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8009846:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009848:	0c12      	lsrs	r2, r2, #16
 800984a:	0412      	lsls	r2, r2, #16
 800984c:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800984e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009850:	4302      	orrs	r2, r0
 8009852:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8009854:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8009858:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800985c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009860:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8009864:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8009868:	432a      	orrs	r2, r5
 800986a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800986c:	432a      	orrs	r2, r5
 800986e:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8009870:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009872:	432a      	orrs	r2, r5
 8009874:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009876:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009878:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800987c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800987e:	f022 0201 	bic.w	r2, r2, #1
 8009882:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8009884:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009886:	430a      	orrs	r2, r1
 8009888:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800988a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8009896:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800989a:	f042 0202 	orr.w	r2, r2, #2
 800989e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80098a2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80098a4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80098a6:	2002      	movs	r0, #2
 80098a8:	e7fc      	b.n	80098a4 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080098ac <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80098ac:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80098ae:	7c03      	ldrb	r3, [r0, #16]
{
 80098b0:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d029      	beq.n	800990a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80098b6:	6800      	ldr	r0, [r0, #0]
 80098b8:	4b15      	ldr	r3, [pc, #84]	@ (8009910 <HAL_DSI_ConfigCommand+0x64>)
 80098ba:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80098bc:	4023      	ands	r3, r4
 80098be:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80098c0:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80098c2:	e9d1 3500 	ldrd	r3, r5, [r1]
 80098c6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80098c8:	688d      	ldr	r5, [r1, #8]
 80098ca:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80098cc:	68cd      	ldr	r5, [r1, #12]
 80098ce:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80098d0:	690d      	ldr	r5, [r1, #16]
 80098d2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80098d4:	694d      	ldr	r5, [r1, #20]
 80098d6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80098d8:	698d      	ldr	r5, [r1, #24]
 80098da:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80098dc:	69cd      	ldr	r5, [r1, #28]
 80098de:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80098e0:	6a0d      	ldr	r5, [r1, #32]
 80098e2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80098e4:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80098e6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80098e8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80098ea:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80098ec:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80098ee:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 80098f0:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80098f2:	4323      	orrs	r3, r4
 80098f4:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80098f6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80098f8:	f023 0302 	bic.w	r3, r3, #2
 80098fc:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80098fe:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8009900:	430b      	orrs	r3, r1
 8009902:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009904:	2000      	movs	r0, #0
 8009906:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8009908:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800990a:	2002      	movs	r0, #2
 800990c:	e7fc      	b.n	8009908 <HAL_DSI_ConfigCommand+0x5c>
 800990e:	bf00      	nop
 8009910:	fef080ff 	.word	0xfef080ff

08009914 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009914:	7c02      	ldrb	r2, [r0, #16]
{
 8009916:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009918:	2a01      	cmp	r2, #1
 800991a:	d00a      	beq.n	8009932 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800991c:	6802      	ldr	r2, [r0, #0]
 800991e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009920:	f020 001f 	bic.w	r0, r0, #31
 8009924:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8009926:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009928:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800992a:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800992c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800992e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8009930:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009932:	2002      	movs	r0, #2
}
 8009934:	4770      	bx	lr

08009936 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8009936:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009938:	7c03      	ldrb	r3, [r0, #16]
{
 800993a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800993c:	2b01      	cmp	r3, #1
 800993e:	d034      	beq.n	80099aa <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8009940:	e9d1 0300 	ldrd	r0, r3, [r1]
 8009944:	4298      	cmp	r0, r3
 8009946:	bf38      	it	cc
 8009948:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009950:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8009954:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8009958:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800995c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009960:	4302      	orrs	r2, r0
 8009962:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8009966:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800996a:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800996e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009972:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8009976:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800997a:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800997c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009980:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8009982:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009984:	432a      	orrs	r2, r5
 8009986:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009988:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800998a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800998e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009992:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8009996:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800999a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800999e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80099a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 80099a6:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80099a8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80099aa:	2002      	movs	r0, #2
 80099ac:	e7fc      	b.n	80099a8 <HAL_DSI_ConfigPhyTimer+0x72>
	...

080099b0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80099b0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80099b2:	7c03      	ldrb	r3, [r0, #16]
{
 80099b4:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d05b      	beq.n	8009a72 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80099ba:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80099bc:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80099be:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80099c0:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80099c2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80099c6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80099c8:	689a      	ldr	r2, [r3, #8]
 80099ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80099ce:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80099d0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80099d2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80099d4:	b292      	uxth	r2, r2
 80099d6:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80099d8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80099da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80099de:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80099e0:	4a25      	ldr	r2, [pc, #148]	@ (8009a78 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80099e2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80099e4:	4010      	ands	r0, r2
 80099e6:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80099e8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80099ea:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80099ec:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80099ee:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80099f0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80099f2:	4010      	ands	r0, r2
 80099f4:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80099f6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80099f8:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80099fa:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80099fc:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80099fe:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009a02:	4010      	ands	r0, r2
 8009a04:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009a08:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009a0c:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009a0e:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8009a10:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8009a14:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8009a18:	4010      	ands	r0, r2
 8009a1a:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8009a1e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8009a22:	4328      	orrs	r0, r5
 8009a24:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8009a28:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8009a2c:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8009a30:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009a34:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8009a38:	698d      	ldr	r5, [r1, #24]
 8009a3a:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009a3c:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009a3e:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009a40:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8009a44:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8009a48:	4010      	ands	r0, r2
 8009a4a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8009a4e:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8009a52:	4328      	orrs	r0, r5
 8009a54:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009a58:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8009a5c:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009a5e:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009a60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009a64:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8009a6e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009a70:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009a72:	2002      	movs	r0, #2
 8009a74:	e7fc      	b.n	8009a70 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8009a76:	bf00      	nop
 8009a78:	ffff0000 	.word	0xffff0000

08009a7c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009a7c:	7c03      	ldrb	r3, [r0, #16]
{
 8009a7e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d01c      	beq.n	8009abe <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8009a84:	6802      	ldr	r2, [r0, #0]
 8009a86:	2300      	movs	r3, #0
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	6851      	ldr	r1, [r2, #4]
 8009a8c:	f041 0101 	orr.w	r1, r1, #1
 8009a90:	6051      	str	r1, [r2, #4]
 8009a92:	6851      	ldr	r1, [r2, #4]
 8009a94:	f001 0101 	and.w	r1, r1, #1
 8009a98:	9100      	str	r1, [sp, #0]
 8009a9a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8009aa2:	f041 0108 	orr.w	r1, r1, #8
 8009aa6:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8009aaa:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009aae:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009ab0:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009ab2:	f002 0208 	and.w	r2, r2, #8
 8009ab6:	9201      	str	r2, [sp, #4]
 8009ab8:	9a01      	ldr	r2, [sp, #4]
}
 8009aba:	b002      	add	sp, #8
 8009abc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009abe:	2002      	movs	r0, #2
 8009ac0:	e7fb      	b.n	8009aba <HAL_DSI_Start+0x3e>

08009ac2 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009ac2:	7c02      	ldrb	r2, [r0, #16]
{
 8009ac4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009ac6:	2a01      	cmp	r2, #1
 8009ac8:	d009      	beq.n	8009ade <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8009aca:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009acc:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8009ace:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8009ad2:	f042 0204 	orr.w	r2, r2, #4
 8009ad6:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8009ada:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8009adc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009ade:	2002      	movs	r0, #2
}
 8009ae0:	4770      	bx	lr

08009ae2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8009ae2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009ae4:	7c05      	ldrb	r5, [r0, #16]
{
 8009ae6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8009ae8:	2d01      	cmp	r5, #1
 8009aea:	d009      	beq.n	8009b00 <HAL_DSI_ShortWrite+0x1e>
 8009aec:	2501      	movs	r5, #1
 8009aee:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8009af0:	9d06      	ldr	r5, [sp, #24]
 8009af2:	9500      	str	r5, [sp, #0]
 8009af4:	f7ff fc6c 	bl	80093d0 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009af8:	2300      	movs	r3, #0
 8009afa:	7423      	strb	r3, [r4, #16]

  return status;
}
 8009afc:	b003      	add	sp, #12
 8009afe:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009b00:	2002      	movs	r0, #2
 8009b02:	e7fb      	b.n	8009afc <HAL_DSI_ShortWrite+0x1a>

08009b04 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8009b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009b0a:	7c03      	ldrb	r3, [r0, #16]
{
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8009b10:	2b01      	cmp	r3, #1
{
 8009b12:	4615      	mov	r5, r2
 8009b14:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8009b18:	d052      	beq.n	8009bc0 <HAL_DSI_LongWrite+0xbc>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b1e:	f7ff fa61 	bl	8008fe4 <HAL_GetTick>
 8009b22:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009b24:	6832      	ldr	r2, [r6, #0]
 8009b26:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8009b28:	f013 0a01 	ands.w	sl, r3, #1
 8009b2c:	d019      	beq.n	8009b62 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009b2e:	2c03      	cmp	r4, #3
 8009b30:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8009b32:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009b36:	bf28      	it	cs
 8009b38:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8009b3a:	4283      	cmp	r3, r0
 8009b3c:	d11d      	bne.n	8009b7a <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8009b3e:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8009b40:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8009b42:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009b46:	bb10      	cbnz	r0, 8009b8e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009b48:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009b4a:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8009b4e:	0223      	lsls	r3, r4, #8
 8009b50:	0224      	lsls	r4, r4, #8
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8009b58:	431d      	orrs	r5, r3
 8009b5a:	4325      	orrs	r5, r4
 8009b5c:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009b5e:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8009b60:	e009      	b.n	8009b76 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009b62:	f7ff fa3f 	bl	8008fe4 <HAL_GetTick>
 8009b66:	eba0 000b 	sub.w	r0, r0, fp
 8009b6a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009b6e:	d9d9      	bls.n	8009b24 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8009b70:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009b72:	f886 a010 	strb.w	sl, [r6, #16]
}
 8009b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009b7a:	f818 1003 	ldrb.w	r1, [r8, r3]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8009b84:	fa01 f10c 	lsl.w	r1, r1, ip
 8009b88:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8009b8c:	e7d5      	b.n	8009b3a <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009b8e:	2804      	cmp	r0, #4
    fifoword = 0U;
 8009b90:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009b94:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8009b96:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009b98:	bf28      	it	cs
 8009b9a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009b9e:	f813 8001 	ldrb.w	r8, [r3, r1]
 8009ba2:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8009ba6:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009ba8:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8009bac:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009bae:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8009bb2:	d1f4      	bne.n	8009b9e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8009bb4:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8009bb8:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8009bba:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8009bbe:	e7c2      	b.n	8009b46 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8009bc0:	2002      	movs	r0, #2
 8009bc2:	e7d8      	b.n	8009b76 <HAL_DSI_LongWrite+0x72>

08009bc4 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8009bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8009bca:	7c03      	ldrb	r3, [r0, #16]
{
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8009bd0:	2b01      	cmp	r3, #1
{
 8009bd2:	4617      	mov	r7, r2
 8009bd4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009bd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8009bdc:	d06f      	beq.n	8009cbe <HAL_DSI_Read+0xfa>
 8009bde:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8009be0:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8009be2:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8009be4:	d90d      	bls.n	8009c02 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8009be6:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8009bea:	2237      	movs	r2, #55	@ 0x37
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	b2f3      	uxtb	r3, r6
 8009bf0:	f7ff fbee 	bl	80093d0 <DSI_ShortWrite.constprop.0>
 8009bf4:	b128      	cbz	r0, 8009c02 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009bf6:	2300      	movs	r3, #0

      return HAL_ERROR;
 8009bf8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8009bfa:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8009bfc:	b003      	add	sp, #12
 8009bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8009c02:	f1b9 0f06 	cmp.w	r9, #6
 8009c06:	d10f      	bne.n	8009c28 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8009c0a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8009c12:	f043 0306 	orr.w	r3, r3, #6
 8009c16:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8009c18:	f7ff f9e4 	bl	8008fe4 <HAL_GetTick>
 8009c1c:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	dc27      	bgt.n	8009c72 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8009c22:	2000      	movs	r0, #0
 8009c24:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8009c26:	e7e9      	b.n	8009bfc <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8009c28:	f1b9 0f04 	cmp.w	r9, #4
 8009c2c:	d105      	bne.n	8009c3a <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c2e:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8009c30:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c32:	f044 0404 	orr.w	r4, r4, #4
 8009c36:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8009c38:	e7ee      	b.n	8009c18 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8009c3a:	f1b9 0f14 	cmp.w	r9, #20
 8009c3e:	d108      	bne.n	8009c52 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8009c40:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c44:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8009c46:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c48:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8009c4c:	f044 0414 	orr.w	r4, r4, #20
 8009c50:	e7f1      	b.n	8009c36 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8009c52:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8009c56:	d1ce      	bne.n	8009bf6 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8009c58:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c5c:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8009c5e:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8009c64:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009c68:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8009c6c:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8009c70:	e7e1      	b.n	8009c36 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8009c72:	682a      	ldr	r2, [r5, #0]
 8009c74:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8009c76:	f013 0310 	ands.w	r3, r3, #16
 8009c7a:	d10d      	bne.n	8009c98 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009c7c:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8009c7e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009c80:	4632      	mov	r2, r6
 8009c82:	bf28      	it	cs
 8009c84:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8009c86:	00d9      	lsls	r1, r3, #3
 8009c88:	fa20 f101 	lsr.w	r1, r0, r1
 8009c8c:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8009c8e:	3301      	adds	r3, #1
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d1f8      	bne.n	8009c86 <HAL_DSI_Read+0xc2>
        pdata++;
 8009c94:	4417      	add	r7, r2
        datasize--;
 8009c96:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009c98:	f7ff f9a4 	bl	8008fe4 <HAL_GetTick>
 8009c9c:	1b00      	subs	r0, r0, r4
 8009c9e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009ca2:	d903      	bls.n	8009cac <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8009ca4:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8009ca6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009ca8:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8009caa:	e7a7      	b.n	8009bfc <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009cb0:	0652      	lsls	r2, r2, #25
 8009cb2:	d4b4      	bmi.n	8009c1e <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8009cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009cb8:	069b      	lsls	r3, r3, #26
 8009cba:	d49c      	bmi.n	8009bf6 <HAL_DSI_Read+0x32>
 8009cbc:	e7af      	b.n	8009c1e <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	e79c      	b.n	8009bfc <HAL_DSI_Read+0x38>

08009cc2 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009cc2:	7c02      	ldrb	r2, [r0, #16]
{
 8009cc4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009cc6:	2a01      	cmp	r2, #1
 8009cc8:	d00f      	beq.n	8009cea <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8009cca:	6802      	ldr	r2, [r0, #0]
 8009ccc:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009cd0:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8009cd4:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009cd8:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009cdc:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009ce0:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009ce2:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8009ce6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8009ce8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8009cea:	2002      	movs	r0, #2
}
 8009cec:	4770      	bx	lr
	...

08009cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009cf4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cf6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8009ebc <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009cfa:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009cfe:	680a      	ldr	r2, [r1, #0]
 8009d00:	fa32 f503 	lsrs.w	r5, r2, r3
 8009d04:	d102      	bne.n	8009d0c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8009d06:	b003      	add	sp, #12
 8009d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009d0c:	2501      	movs	r5, #1
 8009d0e:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8009d12:	ea18 0202 	ands.w	r2, r8, r2
 8009d16:	f000 80bb 	beq.w	8009e90 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d1a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009d1c:	2703      	movs	r7, #3
 8009d1e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d22:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009d26:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d2a:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009d2c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d30:	2f01      	cmp	r7, #1
 8009d32:	d834      	bhi.n	8009d9e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8009d34:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009d36:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d3a:	68cf      	ldr	r7, [r1, #12]
 8009d3c:	fa07 f70e 	lsl.w	r7, r7, lr
 8009d40:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8009d44:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009d46:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d48:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d4c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8009d50:	409f      	lsls	r7, r3
 8009d52:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8009d56:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8009d58:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d5a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d5c:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d60:	688f      	ldr	r7, [r1, #8]
 8009d62:	fa07 f70e 	lsl.w	r7, r7, lr
 8009d66:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8009d6a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d6c:	d119      	bne.n	8009da2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8009d6e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d72:	f003 0a07 	and.w	sl, r3, #7
 8009d76:	f04f 0b0f 	mov.w	fp, #15
 8009d7a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8009d7e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8009d82:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d86:	fa0b fb0a 	lsl.w	fp, fp, sl
 8009d8a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009d8e:	690f      	ldr	r7, [r1, #16]
 8009d90:	fa07 f70a 	lsl.w	r7, r7, sl
 8009d94:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8009d98:	f8c8 7020 	str.w	r7, [r8, #32]
 8009d9c:	e001      	b.n	8009da2 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d9e:	2d03      	cmp	r5, #3
 8009da0:	d1da      	bne.n	8009d58 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8009da2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009da4:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009da8:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009dac:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009db0:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8009db4:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009db6:	d06b      	beq.n	8009e90 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009db8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8009dbc:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009dc0:	f003 0c03 	and.w	ip, r3, #3
 8009dc4:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dc8:	f045 0502 	orr.w	r5, r5, #2
 8009dcc:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009dd0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dd4:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8009dd8:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8009ddc:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009de0:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009de4:	f005 0502 	and.w	r5, r5, #2
 8009de8:	9501      	str	r5, [sp, #4]
 8009dea:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009dec:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009dee:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009df2:	4d31      	ldr	r5, [pc, #196]	@ (8009eb8 <HAL_GPIO_Init+0x1c8>)
 8009df4:	42a8      	cmp	r0, r5
 8009df6:	d04d      	beq.n	8009e94 <HAL_GPIO_Init+0x1a4>
 8009df8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009dfc:	42a8      	cmp	r0, r5
 8009dfe:	d04b      	beq.n	8009e98 <HAL_GPIO_Init+0x1a8>
 8009e00:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009e04:	42a8      	cmp	r0, r5
 8009e06:	d049      	beq.n	8009e9c <HAL_GPIO_Init+0x1ac>
 8009e08:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009e0c:	42a8      	cmp	r0, r5
 8009e0e:	d047      	beq.n	8009ea0 <HAL_GPIO_Init+0x1b0>
 8009e10:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009e14:	42a8      	cmp	r0, r5
 8009e16:	d045      	beq.n	8009ea4 <HAL_GPIO_Init+0x1b4>
 8009e18:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009e1c:	42a8      	cmp	r0, r5
 8009e1e:	d043      	beq.n	8009ea8 <HAL_GPIO_Init+0x1b8>
 8009e20:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009e24:	42a8      	cmp	r0, r5
 8009e26:	d041      	beq.n	8009eac <HAL_GPIO_Init+0x1bc>
 8009e28:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009e2c:	42a8      	cmp	r0, r5
 8009e2e:	d03f      	beq.n	8009eb0 <HAL_GPIO_Init+0x1c0>
 8009e30:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009e34:	42a8      	cmp	r0, r5
 8009e36:	d03d      	beq.n	8009eb4 <HAL_GPIO_Init+0x1c4>
 8009e38:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009e3c:	42a8      	cmp	r0, r5
 8009e3e:	bf14      	ite	ne
 8009e40:	250a      	movne	r5, #10
 8009e42:	2509      	moveq	r5, #9
 8009e44:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e48:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009e4c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009e50:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8009e52:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8009e56:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8009e58:	bf0c      	ite	eq
 8009e5a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009e5c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e5e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8009e62:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8009e64:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8009e66:	bf0c      	ite	eq
 8009e68:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009e6a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009e6c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8009e70:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8009e72:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8009e76:	bf0c      	ite	eq
 8009e78:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8009e7a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e7c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8009e7e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8009e82:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8009e86:	bf54      	ite	pl
 8009e88:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8009e8a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8009e8c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8009e90:	3301      	adds	r3, #1
 8009e92:	e734      	b.n	8009cfe <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009e94:	2500      	movs	r5, #0
 8009e96:	e7d5      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009e98:	2501      	movs	r5, #1
 8009e9a:	e7d3      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009e9c:	2502      	movs	r5, #2
 8009e9e:	e7d1      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009ea0:	2503      	movs	r5, #3
 8009ea2:	e7cf      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009ea4:	2504      	movs	r5, #4
 8009ea6:	e7cd      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009ea8:	2505      	movs	r5, #5
 8009eaa:	e7cb      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009eac:	2506      	movs	r5, #6
 8009eae:	e7c9      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009eb0:	2507      	movs	r5, #7
 8009eb2:	e7c7      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009eb4:	2508      	movs	r5, #8
 8009eb6:	e7c5      	b.n	8009e44 <HAL_GPIO_Init+0x154>
 8009eb8:	58020000 	.word	0x58020000
 8009ebc:	58024400 	.word	0x58024400

08009ec0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009ec4:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009ec6:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009eca:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009ece:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009ed2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8009ed6:	fa31 f302 	lsrs.w	r3, r1, r2
 8009eda:	d101      	bne.n	8009ee0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8009edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009ee0:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8009ee4:	ea1c 0601 	ands.w	r6, ip, r1
 8009ee8:	d070      	beq.n	8009fcc <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009eea:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009eee:	f002 0703 	and.w	r7, r2, #3
 8009ef2:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8009ef6:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009ef8:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8009efc:	fa08 f907 	lsl.w	r9, r8, r7
 8009f00:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8009f04:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009f08:	4b3a      	ldr	r3, [pc, #232]	@ (8009ff4 <HAL_GPIO_DeInit+0x134>)
 8009f0a:	4298      	cmp	r0, r3
 8009f0c:	d060      	beq.n	8009fd0 <HAL_GPIO_DeInit+0x110>
 8009f0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f12:	4298      	cmp	r0, r3
 8009f14:	d05e      	beq.n	8009fd4 <HAL_GPIO_DeInit+0x114>
 8009f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f1a:	4298      	cmp	r0, r3
 8009f1c:	d05c      	beq.n	8009fd8 <HAL_GPIO_DeInit+0x118>
 8009f1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f22:	4298      	cmp	r0, r3
 8009f24:	d05a      	beq.n	8009fdc <HAL_GPIO_DeInit+0x11c>
 8009f26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f2a:	4298      	cmp	r0, r3
 8009f2c:	d058      	beq.n	8009fe0 <HAL_GPIO_DeInit+0x120>
 8009f2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f32:	4298      	cmp	r0, r3
 8009f34:	d056      	beq.n	8009fe4 <HAL_GPIO_DeInit+0x124>
 8009f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f3a:	4298      	cmp	r0, r3
 8009f3c:	d054      	beq.n	8009fe8 <HAL_GPIO_DeInit+0x128>
 8009f3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f42:	4298      	cmp	r0, r3
 8009f44:	d052      	beq.n	8009fec <HAL_GPIO_DeInit+0x12c>
 8009f46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f4a:	4298      	cmp	r0, r3
 8009f4c:	d050      	beq.n	8009ff0 <HAL_GPIO_DeInit+0x130>
 8009f4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f52:	4298      	cmp	r0, r3
 8009f54:	bf0c      	ite	eq
 8009f56:	2309      	moveq	r3, #9
 8009f58:	230a      	movne	r3, #10
 8009f5a:	40bb      	lsls	r3, r7
 8009f5c:	4573      	cmp	r3, lr
 8009f5e:	d117      	bne.n	8009f90 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009f60:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009f64:	ea23 0306 	bic.w	r3, r3, r6
 8009f68:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009f6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009f70:	ea23 0306 	bic.w	r3, r3, r6
 8009f74:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8009f78:	6863      	ldr	r3, [r4, #4]
 8009f7a:	ea23 0306 	bic.w	r3, r3, r6
 8009f7e:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	ea23 0306 	bic.w	r3, r3, r6
 8009f86:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009f88:	68ab      	ldr	r3, [r5, #8]
 8009f8a:	ea23 0309 	bic.w	r3, r3, r9
 8009f8e:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009f90:	0053      	lsls	r3, r2, #1
 8009f92:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009f94:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009f96:	fa0b f303 	lsl.w	r3, fp, r3
 8009f9a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8009f9e:	431d      	orrs	r5, r3
 8009fa0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009fa2:	f002 0507 	and.w	r5, r2, #7
 8009fa6:	6a37      	ldr	r7, [r6, #32]
 8009fa8:	00ad      	lsls	r5, r5, #2
 8009faa:	fa08 f505 	lsl.w	r5, r8, r5
 8009fae:	ea27 0705 	bic.w	r7, r7, r5
 8009fb2:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009fb4:	68c5      	ldr	r5, [r0, #12]
 8009fb6:	ea25 0503 	bic.w	r5, r5, r3
 8009fba:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fbc:	6845      	ldr	r5, [r0, #4]
 8009fbe:	ea25 050c 	bic.w	r5, r5, ip
 8009fc2:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009fc4:	6885      	ldr	r5, [r0, #8]
 8009fc6:	ea25 0303 	bic.w	r3, r5, r3
 8009fca:	6083      	str	r3, [r0, #8]
    position++;
 8009fcc:	3201      	adds	r2, #1
 8009fce:	e782      	b.n	8009ed6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e7c2      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e7c0      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e7be      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e7bc      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	e7ba      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009fe4:	2305      	movs	r3, #5
 8009fe6:	e7b8      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009fe8:	2306      	movs	r3, #6
 8009fea:	e7b6      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009fec:	2307      	movs	r3, #7
 8009fee:	e7b4      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009ff0:	2308      	movs	r3, #8
 8009ff2:	e7b2      	b.n	8009f5a <HAL_GPIO_DeInit+0x9a>
 8009ff4:	58020000 	.word	0x58020000

08009ff8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009ff8:	6903      	ldr	r3, [r0, #16]
 8009ffa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009ffc:	bf14      	ite	ne
 8009ffe:	2001      	movne	r0, #1
 800a000:	2000      	moveq	r0, #0
 800a002:	4770      	bx	lr

0800a004 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a004:	b10a      	cbz	r2, 800a00a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a006:	6181      	str	r1, [r0, #24]
  }
}
 800a008:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a00a:	0409      	lsls	r1, r1, #16
 800a00c:	e7fb      	b.n	800a006 <HAL_GPIO_WritePin+0x2>

0800a00e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a00e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a010:	ea01 0203 	and.w	r2, r1, r3
 800a014:	ea21 0103 	bic.w	r1, r1, r3
 800a018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a01c:	6181      	str	r1, [r0, #24]
}
 800a01e:	4770      	bx	lr

0800a020 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800a020:	4b04      	ldr	r3, [pc, #16]	@ (800a034 <HAL_HSEM_FastTake+0x14>)
 800a022:	3020      	adds	r0, #32
 800a024:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800a028:	4b03      	ldr	r3, [pc, #12]	@ (800a038 <HAL_HSEM_FastTake+0x18>)
 800a02a:	1ac0      	subs	r0, r0, r3
 800a02c:	bf18      	it	ne
 800a02e:	2001      	movne	r0, #1
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	58026400 	.word	0x58026400
 800a038:	80000300 	.word	0x80000300

0800a03c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800a03c:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800a040:	4b01      	ldr	r3, [pc, #4]	@ (800a048 <HAL_HSEM_Release+0xc>)
 800a042:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800a046:	4770      	bx	lr
 800a048:	58026400 	.word	0x58026400

0800a04c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a04c:	6803      	ldr	r3, [r0, #0]
 800a04e:	699a      	ldr	r2, [r3, #24]
 800a050:	0791      	lsls	r1, r2, #30
 800a052:	d501      	bpl.n	800a058 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a054:	2200      	movs	r2, #0
 800a056:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	07d2      	lsls	r2, r2, #31
 800a05c:	d403      	bmi.n	800a066 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a05e:	699a      	ldr	r2, [r3, #24]
 800a060:	f042 0201 	orr.w	r2, r2, #1
 800a064:	619a      	str	r2, [r3, #24]
  }
}
 800a066:	4770      	bx	lr

0800a068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a068:	b530      	push	{r4, r5, lr}
 800a06a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a06c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a070:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a072:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800a074:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800a07a:	4a05      	ldr	r2, [pc, #20]	@ (800a090 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a07c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800a07e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a082:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800a086:	ea20 0002 	bic.w	r0, r0, r2
 800a08a:	4303      	orrs	r3, r0
 800a08c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a08e:	bd30      	pop	{r4, r5, pc}
 800a090:	03ff63ff 	.word	0x03ff63ff

0800a094 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800a094:	6803      	ldr	r3, [r0, #0]
{
 800a096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800a09a:	699c      	ldr	r4, [r3, #24]
{
 800a09c:	4605      	mov	r5, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a0a2:	f014 0410 	ands.w	r4, r4, #16
 800a0a6:	d06f      	beq.n	800a188 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800a0a8:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0aa:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800a0ac:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0ae:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	699a      	ldr	r2, [r3, #24]
 800a0b4:	0690      	lsls	r0, r2, #26
 800a0b6:	d461      	bmi.n	800a17c <I2C_IsErrorOccurred+0xe8>
 800a0b8:	f1b8 0f00 	cmp.w	r8, #0
 800a0bc:	d035      	beq.n	800a12a <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800a0be:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800a0c2:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800a0c4:	682e      	ldr	r6, [r5, #0]
 800a0c6:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a0c8:	05d9      	lsls	r1, r3, #23
 800a0ca:	d505      	bpl.n	800a0d8 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a0cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800a0d0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800a0d4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a0d6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a0d8:	055a      	lsls	r2, r3, #21
 800a0da:	d505      	bpl.n	800a0e8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a0dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800a0e0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800a0e4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a0e6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a0e8:	059b      	lsls	r3, r3, #22
 800a0ea:	d54f      	bpl.n	800a18c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a0ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800a0f0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a0f4:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f7ff ffa8 	bl	800a04c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800a0fc:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800a0fe:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800a100:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800a104:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800a108:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800a10c:	f023 0301 	bic.w	r3, r3, #1
 800a110:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800a112:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800a114:	4323      	orrs	r3, r4
 800a116:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a118:	2320      	movs	r3, #32
 800a11a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a11e:	2300      	movs	r3, #0
 800a120:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800a124:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800a128:	e032      	b.n	800a190 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800a12a:	1c7a      	adds	r2, r7, #1
 800a12c:	d0c1      	beq.n	800a0b2 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a12e:	f7fe ff59 	bl	8008fe4 <HAL_GetTick>
 800a132:	1b80      	subs	r0, r0, r6
 800a134:	42b8      	cmp	r0, r7
 800a136:	d801      	bhi.n	800a13c <I2C_IsErrorOccurred+0xa8>
 800a138:	2f00      	cmp	r7, #0
 800a13a:	d1b9      	bne.n	800a0b0 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800a140:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a144:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800a146:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a148:	0400      	lsls	r0, r0, #16
 800a14a:	d50a      	bpl.n	800a162 <I2C_IsErrorOccurred+0xce>
 800a14c:	0449      	lsls	r1, r1, #17
 800a14e:	d408      	bmi.n	800a162 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800a150:	2a20      	cmp	r2, #32
 800a152:	d006      	beq.n	800a162 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a15a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800a15c:	f7fe ff42 	bl	8008fe4 <HAL_GetTick>
 800a160:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	069b      	lsls	r3, r3, #26
 800a168:	d4a2      	bmi.n	800a0b0 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a16a:	f7fe ff3b 	bl	8008fe4 <HAL_GetTick>
 800a16e:	1b80      	subs	r0, r0, r6
 800a170:	2819      	cmp	r0, #25
 800a172:	d9f6      	bls.n	800a162 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a174:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800a176:	f04f 0801 	mov.w	r8, #1
 800a17a:	e799      	b.n	800a0b0 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800a17c:	f1b8 0f00 	cmp.w	r8, #0
 800a180:	d19d      	bne.n	800a0be <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a182:	2220      	movs	r2, #32
 800a184:	61da      	str	r2, [r3, #28]
 800a186:	e79a      	b.n	800a0be <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800a188:	4620      	mov	r0, r4
 800a18a:	e79b      	b.n	800a0c4 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d1b2      	bne.n	800a0f6 <I2C_IsErrorOccurred+0x62>
}
 800a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a194 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	4604      	mov	r4, r0
 800a198:	460d      	mov	r5, r1
 800a19a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	079b      	lsls	r3, r3, #30
 800a1a2:	d501      	bpl.n	800a1a8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e01f      	b.n	800a1e8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1a8:	4632      	mov	r2, r6
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	f7ff ff71 	bl	800a094 <I2C_IsErrorOccurred>
 800a1b2:	b9c0      	cbnz	r0, 800a1e6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800a1b4:	1c6a      	adds	r2, r5, #1
 800a1b6:	d0f1      	beq.n	800a19c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1b8:	f7fe ff14 	bl	8008fe4 <HAL_GetTick>
 800a1bc:	1b80      	subs	r0, r0, r6
 800a1be:	42a8      	cmp	r0, r5
 800a1c0:	d801      	bhi.n	800a1c6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800a1c2:	2d00      	cmp	r5, #0
 800a1c4:	d1ea      	bne.n	800a19c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	f013 0302 	ands.w	r3, r3, #2
 800a1ce:	d1e5      	bne.n	800a19c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1d0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800a1d2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1d6:	f042 0220 	orr.w	r2, r2, #32
 800a1da:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a1dc:	2220      	movs	r2, #32
 800a1de:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800a1e6:	2001      	movs	r0, #1
}
 800a1e8:	bd70      	pop	{r4, r5, r6, pc}

0800a1ea <I2C_WaitOnFlagUntilTimeout>:
{
 800a1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	460f      	mov	r7, r1
 800a1f6:	4616      	mov	r6, r2
 800a1f8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	ea37 0303 	bics.w	r3, r7, r3
 800a202:	bf0c      	ite	eq
 800a204:	2301      	moveq	r3, #1
 800a206:	2300      	movne	r3, #0
 800a208:	42b3      	cmp	r3, r6
 800a20a:	d001      	beq.n	800a210 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800a20c:	2000      	movs	r0, #0
 800a20e:	e025      	b.n	800a25c <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a210:	4642      	mov	r2, r8
 800a212:	4629      	mov	r1, r5
 800a214:	4620      	mov	r0, r4
 800a216:	f7ff ff3d 	bl	800a094 <I2C_IsErrorOccurred>
 800a21a:	b9f0      	cbnz	r0, 800a25a <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 800a21c:	1c6b      	adds	r3, r5, #1
 800a21e:	d0ec      	beq.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a220:	f7fe fee0 	bl	8008fe4 <HAL_GetTick>
 800a224:	eba0 0008 	sub.w	r0, r0, r8
 800a228:	42a8      	cmp	r0, r5
 800a22a:	d801      	bhi.n	800a230 <I2C_WaitOnFlagUntilTimeout+0x46>
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	d1e4      	bne.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	ea37 0303 	bics.w	r3, r7, r3
 800a238:	bf0c      	ite	eq
 800a23a:	2301      	moveq	r3, #1
 800a23c:	2300      	movne	r3, #0
 800a23e:	42b3      	cmp	r3, r6
 800a240:	d1db      	bne.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a242:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a244:	f043 0320 	orr.w	r3, r3, #32
 800a248:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a24a:	2320      	movs	r3, #32
 800a24c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a250:	2300      	movs	r3, #0
 800a252:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800a256:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800a25a:	2001      	movs	r0, #1
}
 800a25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a260 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	4604      	mov	r4, r0
 800a264:	460d      	mov	r5, r1
 800a266:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	069b      	lsls	r3, r3, #26
 800a26e:	d501      	bpl.n	800a274 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800a270:	2000      	movs	r0, #0
 800a272:	e01d      	b.n	800a2b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a274:	4632      	mov	r2, r6
 800a276:	4629      	mov	r1, r5
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff ff0b 	bl	800a094 <I2C_IsErrorOccurred>
 800a27e:	b9b0      	cbnz	r0, 800a2ae <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a280:	f7fe feb0 	bl	8008fe4 <HAL_GetTick>
 800a284:	1b80      	subs	r0, r0, r6
 800a286:	42a8      	cmp	r0, r5
 800a288:	d801      	bhi.n	800a28e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	d1ec      	bne.n	800a268 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	f013 0320 	ands.w	r3, r3, #32
 800a296:	d1e7      	bne.n	800a268 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a298:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a29a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a29e:	f042 0220 	orr.w	r2, r2, #32
 800a2a2:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800a2ae:	2001      	movs	r0, #1
}
 800a2b0:	bd70      	pop	{r4, r5, r6, pc}

0800a2b2 <HAL_I2C_MspInit>:
}
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_I2C_Init>:
{
 800a2b4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d04e      	beq.n	800a35a <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a2bc:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a2c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a2c4:	b91b      	cbnz	r3, 800a2ce <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800a2c6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800a2ca:	f7ff fff2 	bl	800a2b2 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a2ce:	2324      	movs	r3, #36	@ 0x24
 800a2d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	f022 0201 	bic.w	r2, r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a2de:	6862      	ldr	r2, [r4, #4]
 800a2e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a2e4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a2e6:	689a      	ldr	r2, [r3, #8]
 800a2e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a2ec:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2ee:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2f2:	2901      	cmp	r1, #1
 800a2f4:	d106      	bne.n	800a304 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2fa:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a302:	e007      	b.n	800a314 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a304:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a308:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a30a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a30c:	d1f6      	bne.n	800a2fc <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a314:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a316:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800a31e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a322:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a32a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a32c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800a330:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a332:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a334:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a338:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a33a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800a33e:	430a      	orrs	r2, r1
 800a340:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	f042 0201 	orr.w	r2, r2, #1
 800a348:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800a34a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a34c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a34e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a352:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a354:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800a358:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a35a:	2001      	movs	r0, #1
 800a35c:	e7fc      	b.n	800a358 <HAL_I2C_Init+0xa4>

0800a35e <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800a35e:	4770      	bx	lr

0800a360 <HAL_I2C_DeInit>:
{
 800a360:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800a362:	4604      	mov	r4, r0
 800a364:	b198      	cbz	r0, 800a38e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800a366:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a368:	2324      	movs	r3, #36	@ 0x24
 800a36a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a36e:	6813      	ldr	r3, [r2, #0]
 800a370:	f023 0301 	bic.w	r3, r3, #1
 800a374:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800a376:	f7ff fff2 	bl	800a35e <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a37a:	2000      	movs	r0, #0
 800a37c:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800a37e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800a382:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a386:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a388:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800a38c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a38e:	2001      	movs	r0, #1
 800a390:	e7fc      	b.n	800a38c <HAL_I2C_DeInit+0x2c>
	...

0800a394 <HAL_I2C_Mem_Write>:
{
 800a394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a398:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a39a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3a2:	2b20      	cmp	r3, #32
{
 800a3a4:	4616      	mov	r6, r2
 800a3a6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800a3aa:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3ae:	f040 80c6 	bne.w	800a53e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800a3b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3b4:	b113      	cbz	r3, 800a3bc <HAL_I2C_Mem_Write+0x28>
 800a3b6:	f1ba 0f00 	cmp.w	sl, #0
 800a3ba:	d106      	bne.n	800a3ca <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a3bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3c0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800a3c2:	2001      	movs	r0, #1
}
 800a3c4:	b003      	add	sp, #12
 800a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a3ca:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	f000 80b5 	beq.w	800a53e <HAL_I2C_Mem_Write+0x1aa>
 800a3d4:	f04f 0b01 	mov.w	fp, #1
 800a3d8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800a3dc:	f7fe fe02 	bl	8008fe4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a3e0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800a3e2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a3e4:	9000      	str	r0, [sp, #0]
 800a3e6:	465a      	mov	r2, fp
 800a3e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f7ff fefc 	bl	800a1ea <I2C_WaitOnFlagUntilTimeout>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d1e5      	bne.n	800a3c2 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a3f6:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800a3f8:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a3fa:	fa5f f289 	uxtb.w	r2, r9
 800a3fe:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a400:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a404:	2340      	movs	r3, #64	@ 0x40
 800a406:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800a40a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a40c:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a40e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800a410:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a412:	4b4c      	ldr	r3, [pc, #304]	@ (800a544 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800a414:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a41e:	f7ff fe23 	bl	800a068 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a422:	462a      	mov	r2, r5
 800a424:	4641      	mov	r1, r8
 800a426:	4620      	mov	r0, r4
 800a428:	f7ff feb4 	bl	800a194 <I2C_WaitOnTXISFlagUntilTimeout>
 800a42c:	bb18      	cbnz	r0, 800a476 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a42e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a432:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a434:	d115      	bne.n	800a462 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a436:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a438:	2200      	movs	r2, #0
 800a43a:	2180      	movs	r1, #128	@ 0x80
 800a43c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a43e:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a440:	4643      	mov	r3, r8
 800a442:	9500      	str	r5, [sp, #0]
 800a444:	f7ff fed1 	bl	800a1ea <I2C_WaitOnFlagUntilTimeout>
 800a448:	b9a8      	cbnz	r0, 800a476 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a44a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	2bff      	cmp	r3, #255	@ 0xff
 800a450:	d815      	bhi.n	800a47e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800a452:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a454:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800a458:	b292      	uxth	r2, r2
 800a45a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a45c:	b2d2      	uxtb	r2, r2
 800a45e:	9000      	str	r0, [sp, #0]
 800a460:	e012      	b.n	800a488 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a462:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a464:	4641      	mov	r1, r8
 800a466:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a468:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a46a:	462a      	mov	r2, r5
 800a46c:	f7ff fe92 	bl	800a194 <I2C_WaitOnTXISFlagUntilTimeout>
 800a470:	b908      	cbnz	r0, 800a476 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	e7df      	b.n	800a436 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800a476:	2300      	movs	r3, #0
 800a478:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800a47c:	e7a1      	b.n	800a3c2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a47e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a484:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a486:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a488:	4639      	mov	r1, r7
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7ff fdec 	bl	800a068 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a490:	462a      	mov	r2, r5
 800a492:	4641      	mov	r1, r8
 800a494:	4620      	mov	r0, r4
 800a496:	f7ff fe7d 	bl	800a194 <I2C_WaitOnTXISFlagUntilTimeout>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d191      	bne.n	800a3c2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a49e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a4a0:	6822      	ldr	r2, [r4, #0]
 800a4a2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a4a6:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800a4a8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800a4aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800a4ac:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800a4ae:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800a4b0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800a4b2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800a4b4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800a4b6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a4b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800a4ba:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	b1b3      	cbz	r3, 800a4ee <HAL_I2C_Mem_Write+0x15a>
 800a4c0:	b9aa      	cbnz	r2, 800a4ee <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a4c2:	4643      	mov	r3, r8
 800a4c4:	2180      	movs	r1, #128	@ 0x80
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	9500      	str	r5, [sp, #0]
 800a4ca:	f7ff fe8e 	bl	800a1ea <I2C_WaitOnFlagUntilTimeout>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f47f af77 	bne.w	800a3c2 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	2bff      	cmp	r3, #255	@ 0xff
 800a4da:	d928      	bls.n	800a52e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4dc:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a4de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4e2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a4e4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7ff fdbd 	bl	800a068 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a4ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1cc      	bne.n	800a490 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4641      	mov	r1, r8
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7ff feb0 	bl	800a260 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a500:	2800      	cmp	r0, #0
 800a502:	f47f af5e 	bne.w	800a3c2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	2120      	movs	r1, #32
 800a50a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800a512:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800a516:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800a51a:	f022 0201 	bic.w	r2, r2, #1
 800a51e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a520:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a524:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a528:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800a52c:	e74a      	b.n	800a3c4 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800a52e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a530:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800a534:	b292      	uxth	r2, r2
 800a536:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a538:	b2d2      	uxtb	r2, r2
 800a53a:	9000      	str	r0, [sp, #0]
 800a53c:	e7d3      	b.n	800a4e6 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800a53e:	2002      	movs	r0, #2
 800a540:	e740      	b.n	800a3c4 <HAL_I2C_Mem_Write+0x30>
 800a542:	bf00      	nop
 800a544:	80002000 	.word	0x80002000

0800a548 <HAL_I2C_Mem_Read>:
{
 800a548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a54e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800a552:	4604      	mov	r4, r0
 800a554:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a556:	2b20      	cmp	r3, #32
{
 800a558:	4616      	mov	r6, r2
 800a55a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800a55e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a562:	f040 80c9 	bne.w	800a6f8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800a566:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a568:	b113      	cbz	r3, 800a570 <HAL_I2C_Mem_Read+0x28>
 800a56a:	f1ba 0f00 	cmp.w	sl, #0
 800a56e:	d106      	bne.n	800a57e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a574:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800a576:	2001      	movs	r0, #1
}
 800a578:	b003      	add	sp, #12
 800a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800a57e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a582:	2b01      	cmp	r3, #1
 800a584:	f000 80b8 	beq.w	800a6f8 <HAL_I2C_Mem_Read+0x1b0>
 800a588:	f04f 0b01 	mov.w	fp, #1
 800a58c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800a590:	f7fe fd28 	bl	8008fe4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a594:	2319      	movs	r3, #25
 800a596:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800a598:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a59a:	465a      	mov	r2, fp
 800a59c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f7ff fe22 	bl	800a1ea <I2C_WaitOnFlagUntilTimeout>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d1e4      	bne.n	800a576 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5ac:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800a5ae:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a5b0:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5b2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a5b6:	2240      	movs	r2, #64	@ 0x40
 800a5b8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800a5bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5be:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a5c0:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800a5c2:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a5c4:	4a4d      	ldr	r2, [pc, #308]	@ (800a6fc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800a5c6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a5ca:	9200      	str	r2, [sp, #0]
 800a5cc:	fa5f f289 	uxtb.w	r2, r9
 800a5d0:	f7ff fd4a 	bl	800a068 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	4641      	mov	r1, r8
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7ff fddb 	bl	800a194 <I2C_WaitOnTXISFlagUntilTimeout>
 800a5de:	bb20      	cbnz	r0, 800a62a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5e0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5e4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5e6:	d116      	bne.n	800a616 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5e8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2140      	movs	r1, #64	@ 0x40
 800a5ee:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5f0:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a5f2:	4643      	mov	r3, r8
 800a5f4:	9500      	str	r5, [sp, #0]
 800a5f6:	f7ff fdf8 	bl	800a1ea <I2C_WaitOnFlagUntilTimeout>
 800a5fa:	b9b0      	cbnz	r0, 800a62a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	2bff      	cmp	r3, #255	@ 0xff
 800a602:	4b3f      	ldr	r3, [pc, #252]	@ (800a700 <HAL_I2C_Mem_Read+0x1b8>)
 800a604:	d815      	bhi.n	800a632 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800a606:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800a608:	b292      	uxth	r2, r2
 800a60a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a60c:	b2d2      	uxtb	r2, r2
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a614:	e012      	b.n	800a63c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a616:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a618:	4641      	mov	r1, r8
 800a61a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a61c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a61e:	462a      	mov	r2, r5
 800a620:	f7ff fdb8 	bl	800a194 <I2C_WaitOnTXISFlagUntilTimeout>
 800a624:	b908      	cbnz	r0, 800a62a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	e7de      	b.n	800a5e8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800a62a:	2300      	movs	r3, #0
 800a62c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800a630:	e7a1      	b.n	800a576 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a632:	22ff      	movs	r2, #255	@ 0xff
 800a634:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a63c:	4639      	mov	r1, r7
 800a63e:	4620      	mov	r0, r4
 800a640:	f7ff fd12 	bl	800a068 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a644:	4643      	mov	r3, r8
 800a646:	2200      	movs	r2, #0
 800a648:	2104      	movs	r1, #4
 800a64a:	4620      	mov	r0, r4
 800a64c:	9500      	str	r5, [sp, #0]
 800a64e:	f7ff fdcc 	bl	800a1ea <I2C_WaitOnFlagUntilTimeout>
 800a652:	2800      	cmp	r0, #0
 800a654:	d18f      	bne.n	800a576 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a65a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a65c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800a65e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800a660:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800a662:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800a664:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800a666:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800a668:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800a66a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800a66c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800a66e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800a670:	b29b      	uxth	r3, r3
 800a672:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a674:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a676:	b29b      	uxth	r3, r3
 800a678:	b1b3      	cbz	r3, 800a6a8 <HAL_I2C_Mem_Read+0x160>
 800a67a:	b9aa      	cbnz	r2, 800a6a8 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a67c:	4643      	mov	r3, r8
 800a67e:	2180      	movs	r1, #128	@ 0x80
 800a680:	4620      	mov	r0, r4
 800a682:	9500      	str	r5, [sp, #0]
 800a684:	f7ff fdb1 	bl	800a1ea <I2C_WaitOnFlagUntilTimeout>
 800a688:	2800      	cmp	r0, #0
 800a68a:	f47f af74 	bne.w	800a576 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a68e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a690:	b29b      	uxth	r3, r3
 800a692:	2bff      	cmp	r3, #255	@ 0xff
 800a694:	d928      	bls.n	800a6e8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a696:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a698:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a69c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a69e:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f7ff fce0 	bl	800a068 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800a6a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1c9      	bne.n	800a644 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6b0:	462a      	mov	r2, r5
 800a6b2:	4641      	mov	r1, r8
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f7ff fdd3 	bl	800a260 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f47f af5b 	bne.w	800a576 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	2120      	movs	r1, #32
 800a6c4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800a6cc:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800a6d0:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800a6d4:	f022 0201 	bic.w	r2, r2, #1
 800a6d8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a6da:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a6de:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a6e2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800a6e6:	e747      	b.n	800a578 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800a6e8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800a6ee:	b292      	uxth	r2, r2
 800a6f0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6f2:	b2d2      	uxtb	r2, r2
 800a6f4:	9000      	str	r0, [sp, #0]
 800a6f6:	e7d3      	b.n	800a6a0 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800a6f8:	2002      	movs	r0, #2
 800a6fa:	e73d      	b.n	800a578 <HAL_I2C_Mem_Read+0x30>
 800a6fc:	80002000 	.word	0x80002000
 800a700:	80002400 	.word	0x80002400

0800a704 <HAL_I2C_GetState>:
  return hi2c->State;
 800a704:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800a708:	4770      	bx	lr

0800a70a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800a70a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800a70c:	4770      	bx	lr

0800a70e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a70e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a710:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800a714:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a716:	2a20      	cmp	r2, #32
 800a718:	b2d4      	uxtb	r4, r2
 800a71a:	d11c      	bne.n	800a756 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a71c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800a720:	2a01      	cmp	r2, #1
 800a722:	d018      	beq.n	800a756 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a724:	2224      	movs	r2, #36	@ 0x24
 800a726:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a72a:	6802      	ldr	r2, [r0, #0]
 800a72c:	6810      	ldr	r0, [r2, #0]
 800a72e:	f020 0001 	bic.w	r0, r0, #1
 800a732:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a734:	6810      	ldr	r0, [r2, #0]
 800a736:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800a73a:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a73c:	6810      	ldr	r0, [r2, #0]
 800a73e:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a740:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800a742:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a744:	6811      	ldr	r1, [r2, #0]
 800a746:	f041 0101 	orr.w	r1, r1, #1
 800a74a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a74c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a750:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a754:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800a756:	2002      	movs	r0, #2
 800a758:	e7fc      	b.n	800a754 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800a75a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a75a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a75c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800a760:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a762:	2a20      	cmp	r2, #32
 800a764:	b2d4      	uxtb	r4, r2
 800a766:	d11b      	bne.n	800a7a0 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a768:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800a76c:	2a01      	cmp	r2, #1
 800a76e:	d017      	beq.n	800a7a0 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a770:	2224      	movs	r2, #36	@ 0x24
 800a772:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a776:	6802      	ldr	r2, [r0, #0]
 800a778:	6810      	ldr	r0, [r2, #0]
 800a77a:	f020 0001 	bic.w	r0, r0, #1
 800a77e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a780:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a782:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a786:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a78a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800a78c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800a78e:	6811      	ldr	r1, [r2, #0]
 800a790:	f041 0101 	orr.w	r1, r1, #1
 800a794:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a796:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800a79a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a79e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800a7a0:	2002      	movs	r0, #2
 800a7a2:	e7fc      	b.n	800a79e <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800a7a4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800a7a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800a7a6:	2401      	movs	r4, #1
 800a7a8:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800a7aa:	2500      	movs	r5, #0
 800a7ac:	194e      	adds	r6, r1, r5
 800a7ae:	443d      	add	r5, r7
 800a7b0:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800a7b2:	42be      	cmp	r6, r7
 800a7b4:	d112      	bne.n	800a7dc <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800a7b6:	2c10      	cmp	r4, #16
 800a7b8:	d108      	bne.n	800a7cc <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800a7ba:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a7bc:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800a7be:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800a7c0:	601d      	str	r5, [r3, #0]
  p = 0;
 800a7c2:	4623      	mov	r3, r4
  si = Huffsize[0];
 800a7c4:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800a7c6:	5cc8      	ldrb	r0, [r1, r3]
 800a7c8:	b9d8      	cbnz	r0, 800a802 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800a7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800a7cc:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800a7ce:	3401      	adds	r4, #1
 800a7d0:	19ee      	adds	r6, r5, r7
 800a7d2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800a7d6:	d9e9      	bls.n	800a7ac <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 800a7d8:	2001      	movs	r0, #1
 800a7da:	e7f6      	b.n	800a7ca <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800a7dc:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800a7e0:	e7e7      	b.n	800a7b2 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800a7e2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800a7e6:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 800a7e8:	5cc8      	ldrb	r0, [r1, r3]
 800a7ea:	19dc      	adds	r4, r3, r7
 800a7ec:	42a8      	cmp	r0, r5
 800a7ee:	d0f8      	beq.n	800a7e2 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800a7f0:	2d1f      	cmp	r5, #31
 800a7f2:	d8f1      	bhi.n	800a7d8 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a7f4:	fa06 f005 	lsl.w	r0, r6, r5
 800a7f8:	42a0      	cmp	r0, r4
 800a7fa:	d9ed      	bls.n	800a7d8 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800a7fc:	0064      	lsls	r4, r4, #1
    si++;
 800a7fe:	3501      	adds	r5, #1
 800a800:	e7e1      	b.n	800a7c6 <JPEG_Bits_To_SizeCodes+0x22>
 800a802:	1ae7      	subs	r7, r4, r3
 800a804:	e7f0      	b.n	800a7e8 <JPEG_Bits_To_SizeCodes+0x44>

0800a806 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a806:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a808:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800a80c:	460d      	mov	r5, r1
 800a80e:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a810:	ab01      	add	r3, sp, #4
 800a812:	aa43      	add	r2, sp, #268	@ 0x10c
 800a814:	a902      	add	r1, sp, #8
 800a816:	f7ff ffc5 	bl	800a7a4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a81a:	b938      	cbnz	r0, 800a82c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800a81c:	9e01      	ldr	r6, [sp, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	f104 010f 	add.w	r1, r4, #15
 800a824:	360f      	adds	r6, #15
 800a826:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800a828:	42a1      	cmp	r1, r4
 800a82a:	d102      	bne.n	800a832 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a82c:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800a830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800a832:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a836:	2e0b      	cmp	r6, #11
 800a838:	d80a      	bhi.n	800a850 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a83a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800a83e:	f852 cb04 	ldr.w	ip, [r2], #4
 800a842:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a846:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a84a:	3f01      	subs	r7, #1
 800a84c:	55af      	strb	r7, [r5, r6]
      k++;
 800a84e:	e7eb      	b.n	800a828 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a850:	2001      	movs	r0, #1
 800a852:	e7eb      	b.n	800a82c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800a854 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a854:	4603      	mov	r3, r0
 800a856:	4608      	mov	r0, r1
 800a858:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a85a:	681c      	ldr	r4, [r3, #0]
{
 800a85c:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a85e:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800a862:	429a      	cmp	r2, r3
 800a864:	d125      	bne.n	800a8b2 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a866:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a86a:	a901      	add	r1, sp, #4
 800a86c:	f7ff ffcb 	bl	800a806 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800a870:	b9e8      	cbnz	r0, 800a8ae <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800a872:	aa01      	add	r2, sp, #4
 800a874:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a878:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800a87c:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800a87e:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800a880:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a882:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800a884:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a886:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800a88a:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a88c:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a88e:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a892:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800a896:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a898:	7b13      	ldrb	r3, [r2, #12]
 800a89a:	021b      	lsls	r3, r3, #8
 800a89c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a8a0:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a8a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a8a6:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a8aa:	42b4      	cmp	r4, r6
 800a8ac:	d1e9      	bne.n	800a882 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a8ae:	b011      	add	sp, #68	@ 0x44
 800a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a8b2:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d102      	bne.n	800a8c0 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a8ba:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800a8be:	e7d4      	b.n	800a86a <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800a8c0:	2001      	movs	r0, #1
 800a8c2:	e7f4      	b.n	800a8ae <JPEG_Set_HuffDC_Mem+0x5a>

0800a8c4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a8c8:	6804      	ldr	r4, [r0, #0]
{
 800a8ca:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800a8ce:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a8d0:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d149      	bne.n	800a96c <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a8d8:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a8dc:	466b      	mov	r3, sp
 800a8de:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800a8e2:	a901      	add	r1, sp, #4
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f7ff ff5d 	bl	800a7a4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d13a      	bne.n	800a964 <JPEG_Set_HuffAC_Mem+0xa0>
 800a8ee:	9b00      	ldr	r3, [sp, #0]
 800a8f0:	460d      	mov	r5, r1
 800a8f2:	f106 0c0f 	add.w	ip, r6, #15
 800a8f6:	4617      	mov	r7, r2
 800a8f8:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a8fa:	f04f 0e0a 	mov.w	lr, #10
 800a8fe:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a900:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800a902:	4561      	cmp	r1, ip
 800a904:	d139      	bne.n	800a97a <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800a906:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a90a:	a942      	add	r1, sp, #264	@ 0x108
 800a90c:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800a910:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800a912:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800a914:	6063      	str	r3, [r4, #4]
 800a916:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800a918:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800a91c:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800a920:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800a922:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a926:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800a928:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a92c:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800a92e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a932:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a934:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800a938:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a93a:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800a93e:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a940:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a942:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a946:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a94a:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a94c:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800a950:	021b      	lsls	r3, r3, #8
 800a952:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a956:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a95c:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a960:	42b4      	cmp	r4, r6
 800a962:	d1e7      	bne.n	800a934 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a964:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800a968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a96c:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800a970:	429a      	cmp	r2, r3
 800a972:	d10f      	bne.n	800a994 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a974:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800a978:	e7b0      	b.n	800a8dc <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800a97a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800a97e:	b15b      	cbz	r3, 800a998 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a980:	2bf0      	cmp	r3, #240	@ 0xf0
 800a982:	d015      	beq.n	800a9b0 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800a984:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800a986:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a98a:	3b01      	subs	r3, #1
 800a98c:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a990:	2ba1      	cmp	r3, #161	@ 0xa1
 800a992:	d902      	bls.n	800a99a <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800a994:	2001      	movs	r0, #1
 800a996:	e7e5      	b.n	800a964 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800a998:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a99a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800a99e:	f857 8b04 	ldr.w	r8, [r7], #4
 800a9a2:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a9a6:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a9aa:	3a01      	subs	r2, #1
 800a9ac:	54f2      	strb	r2, [r6, r3]
      k++;
 800a9ae:	e7a8      	b.n	800a902 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800a9b0:	23a1      	movs	r3, #161	@ 0xa1
 800a9b2:	e7f2      	b.n	800a99a <JPEG_Set_HuffAC_Mem+0xd6>

0800a9b4 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a9b4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a9b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a9ba:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9bc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a9be:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a9c0:	f002 0203 	and.w	r2, r2, #3
 800a9c4:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	bf0c      	ite	eq
 800a9ca:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a9ce:	f022 0208 	bicne.w	r2, r2, #8
 800a9d2:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	f022 0201 	bic.w	r2, r2, #1
 800a9da:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a9dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9de:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a9e2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a9e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a9ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a9ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9f2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a9f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9f6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a9fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	f042 0201 	orr.w	r2, r2, #1
 800aa02:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aa04:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800aa06:	f002 020c 	and.w	r2, r2, #12
 800aa0a:	2a08      	cmp	r2, #8
 800aa0c:	d104      	bne.n	800aa18 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800aa0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa10:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800aa14:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa16:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800aa18:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800aa1a:	f002 020c 	and.w	r2, r2, #12
 800aa1e:	2a0c      	cmp	r2, #12
 800aa20:	d1f9      	bne.n	800aa16 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800aa22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa24:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa28:	e7f4      	b.n	800aa14 <JPEG_Init_Process+0x60>
	...

0800aa2c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800aa2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800aa2e:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800aa30:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800aa32:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800aa34:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800aa36:	42aa      	cmp	r2, r5
 800aa38:	d313      	bcc.n	800aa62 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800aa3a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800aa3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800aa3e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800aa40:	428b      	cmp	r3, r1
 800aa42:	d30e      	bcc.n	800aa62 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800aa44:	4f18      	ldr	r7, [pc, #96]	@ (800aaa8 <JPEG_DMA_StartProcess+0x7c>)
 800aa46:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800aa48:	4f18      	ldr	r7, [pc, #96]	@ (800aaac <JPEG_DMA_StartProcess+0x80>)
 800aa4a:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800aa4c:	4e18      	ldr	r6, [pc, #96]	@ (800aab0 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800aa4e:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800aa50:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800aa52:	4e18      	ldr	r6, [pc, #96]	@ (800aab4 <JPEG_DMA_StartProcess+0x88>)
 800aa54:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800aa56:	b105      	cbz	r5, 800aa5a <JPEG_DMA_StartProcess+0x2e>
 800aa58:	b931      	cbnz	r1, 800aa68 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800aa5a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800aa5c:	f043 0304 	orr.w	r3, r3, #4
 800aa60:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800aa62:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800aa64:	b003      	add	sp, #12
 800aa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800aa68:	fbb2 f6f5 	udiv	r6, r2, r5
 800aa6c:	fb05 2516 	mls	r5, r5, r6, r2
 800aa70:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800aa72:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800aa74:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800aa76:	fbb3 f2f1 	udiv	r2, r3, r1
 800aa7a:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800aa7e:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800aa80:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800aa82:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800aa84:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800aa86:	9500      	str	r5, [sp, #0]
 800aa88:	69e2      	ldr	r2, [r4, #28]
 800aa8a:	f001 f82a 	bl	800bae2 <HAL_MDMA_Start_IT>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d1e3      	bne.n	800aa5a <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800aa92:	6822      	ldr	r2, [r4, #0]
 800aa94:	9500      	str	r5, [sp, #0]
 800aa96:	3240      	adds	r2, #64	@ 0x40
 800aa98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800aa9a:	69a1      	ldr	r1, [r4, #24]
 800aa9c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800aa9e:	f001 f820 	bl	800bae2 <HAL_MDMA_Start_IT>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d0de      	beq.n	800aa64 <JPEG_DMA_StartProcess+0x38>
 800aaa6:	e7d8      	b.n	800aa5a <JPEG_DMA_StartProcess+0x2e>
 800aaa8:	0800afef 	.word	0x0800afef
 800aaac:	0800aee7 	.word	0x0800aee7
 800aab0:	0800b4ad 	.word	0x0800b4ad
 800aab4:	0800b49f 	.word	0x0800b49f

0800aab8 <HAL_JPEG_Init>:
{
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800aaba:	4605      	mov	r5, r0
 800aabc:	2800      	cmp	r0, #0
 800aabe:	f000 80f2 	beq.w	800aca6 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800aac2:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800aac6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800aaca:	b91b      	cbnz	r3, 800aad4 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800aacc:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800aad0:	f7f6 fc40 	bl	8001354 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800aad4:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800aad6:	2302      	movs	r3, #2
 800aad8:	4a86      	ldr	r2, [pc, #536]	@ (800acf4 <HAL_JPEG_Init+0x23c>)
 800aada:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800aade:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800aae2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aae4:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800aae8:	f043 0301 	orr.w	r3, r3, #1
 800aaec:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	f023 0301 	bic.w	r3, r3, #1
 800aaf4:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aaf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aaf8:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800aafc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800aafe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ab04:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800ab06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ab08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab0c:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ab0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ab10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ab14:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800ab16:	4b78      	ldr	r3, [pc, #480]	@ (800acf8 <HAL_JPEG_Init+0x240>)
 800ab18:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800ab1a:	4b78      	ldr	r3, [pc, #480]	@ (800acfc <HAL_JPEG_Init+0x244>)
 800ab1c:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800ab1e:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800ab20:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ab24:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800ab26:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab28:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ab2a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab2c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800ab30:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800ab32:	4333      	orrs	r3, r6
 800ab34:	7c56      	ldrb	r6, [r2, #17]
 800ab36:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab3a:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800ab3e:	4281      	cmp	r1, r0
 800ab40:	d1f0      	bne.n	800ab24 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ab42:	4b6f      	ldr	r3, [pc, #444]	@ (800ad00 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800ab44:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800ab48:	4a6e      	ldr	r2, [pc, #440]	@ (800ad04 <HAL_JPEG_Init+0x24c>)
 800ab4a:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ab4e:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800ab52:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800ab56:	4610      	mov	r0, r2
 800ab58:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ab5a:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800ab5e:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800ab62:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ab66:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800ab68:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab6a:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ab6e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab70:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800ab74:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800ab78:	ea43 030c 	orr.w	r3, r3, ip
 800ab7c:	f890 c011 	ldrb.w	ip, [r0, #17]
 800ab80:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab84:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800ab88:	42be      	cmp	r6, r7
 800ab8a:	d1ec      	bne.n	800ab66 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800ab8c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800ab90:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800ab94:	0c1b      	lsrs	r3, r3, #16
 800ab96:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800ab98:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800ab9c:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800aba0:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800aba4:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800aba8:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800abaa:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800abae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800abb0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800abb4:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800abb8:	4333      	orrs	r3, r6
 800abba:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800abbe:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800abc2:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800abc6:	4281      	cmp	r1, r0
 800abc8:	d1ec      	bne.n	800aba4 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800abca:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800abce:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800abd2:	4a4d      	ldr	r2, [pc, #308]	@ (800ad08 <HAL_JPEG_Init+0x250>)
 800abd4:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800abd8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800abda:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800abde:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800abe2:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800abe6:	4013      	ands	r3, r2
  *address = value;
 800abe8:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800abec:	2301      	movs	r3, #1
 800abee:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800abf2:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800abf6:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800abfa:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800abfe:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800ac02:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800ac04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800ac08:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800ac0c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800ac10:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800ac12:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800ac16:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800ac1a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ac1e:	4b3b      	ldr	r3, [pc, #236]	@ (800ad0c <HAL_JPEG_Init+0x254>)
 800ac20:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800ac24:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800ac28:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800ac2c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800ac30:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800ac32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800ac36:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800ac3a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800ac3e:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800ac40:	4a33      	ldr	r2, [pc, #204]	@ (800ad10 <HAL_JPEG_Init+0x258>)
 800ac42:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800ac46:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800ac4a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ac4e:	4b31      	ldr	r3, [pc, #196]	@ (800ad14 <HAL_JPEG_Init+0x25c>)
 800ac50:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800ac54:	4b30      	ldr	r3, [pc, #192]	@ (800ad18 <HAL_JPEG_Init+0x260>)
 800ac56:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800ac5a:	4b30      	ldr	r3, [pc, #192]	@ (800ad1c <HAL_JPEG_Init+0x264>)
 800ac5c:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800ac60:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800ac64:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800ac66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800ac6a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ac6e:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800ac72:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ac74:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ac78:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ac7a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800ac7e:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ac82:	4333      	orrs	r3, r6
 800ac84:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800ac88:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ac8c:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800ac90:	4281      	cmp	r1, r0
 800ac92:	d1ec      	bne.n	800ac6e <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800ac94:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800ac98:	491a      	ldr	r1, [pc, #104]	@ (800ad04 <HAL_JPEG_Init+0x24c>)
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	f7ff fe12 	bl	800a8c4 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800aca0:	b118      	cbz	r0, 800acaa <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800aca2:	2301      	movs	r3, #1
 800aca4:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800aca6:	2001      	movs	r0, #1
}
 800aca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800acaa:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800acae:	4918      	ldr	r1, [pc, #96]	@ (800ad10 <HAL_JPEG_Init+0x258>)
 800acb0:	4628      	mov	r0, r5
 800acb2:	f7ff fe07 	bl	800a8c4 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d1f3      	bne.n	800aca2 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800acba:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800acbe:	490d      	ldr	r1, [pc, #52]	@ (800acf4 <HAL_JPEG_Init+0x23c>)
 800acc0:	4628      	mov	r0, r5
 800acc2:	f7ff fdc7 	bl	800a854 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d1eb      	bne.n	800aca2 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800acca:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800acce:	4914      	ldr	r1, [pc, #80]	@ (800ad20 <HAL_JPEG_Init+0x268>)
 800acd0:	4628      	mov	r0, r5
 800acd2:	f7ff fdbf 	bl	800a854 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d1e3      	bne.n	800aca2 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800acda:	6863      	ldr	r3, [r4, #4]
 800acdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ace0:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800ace2:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800ace4:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800ace6:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800ace8:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800acec:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800acee:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800acf0:	e7da      	b.n	800aca8 <HAL_JPEG_Init+0x1f0>
 800acf2:	bf00      	nop
 800acf4:	08029b44 	.word	0x08029b44
 800acf8:	08029944 	.word	0x08029944
 800acfc:	08029904 	.word	0x08029904
 800ad00:	0b0a0908 	.word	0x0b0a0908
 800ad04:	08029a76 	.word	0x08029a76
 800ad08:	ffff0000 	.word	0xffff0000
 800ad0c:	09080706 	.word	0x09080706
 800ad10:	080299c4 	.word	0x080299c4
 800ad14:	01000404 	.word	0x01000404
 800ad18:	05070403 	.word	0x05070403
 800ad1c:	04040201 	.word	0x04040201
 800ad20:	08029b28 	.word	0x08029b28

0800ad24 <HAL_JPEG_GetInfo>:
{
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d06f      	beq.n	800ae0c <HAL_JPEG_GetInfo+0xe8>
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	d06d      	beq.n	800ae0c <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800ad30:	6804      	ldr	r4, [r0, #0]
 800ad32:	6863      	ldr	r3, [r4, #4]
 800ad34:	f003 0303 	and.w	r3, r3, #3
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d047      	beq.n	800adcc <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800ad3c:	6863      	ldr	r3, [r4, #4]
 800ad3e:	f013 0303 	ands.w	r3, r3, #3
 800ad42:	d005      	beq.n	800ad50 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800ad44:	6863      	ldr	r3, [r4, #4]
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d15e      	bne.n	800ae0c <HAL_JPEG_GetInfo+0xe8>
 800ad4e:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800ad50:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800ad52:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800ad54:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800ad58:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800ad5a:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800ad5c:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800ad5e:	68e2      	ldr	r2, [r4, #12]
 800ad60:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ad64:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800ad66:	d13c      	bne.n	800ade2 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800ad68:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800ad6a:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800ad6c:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800ad70:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800ad72:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ad74:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800ad76:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ad7a:	d129      	bne.n	800add0 <HAL_JPEG_GetInfo+0xac>
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	f013 0f0f 	tst.w	r3, #15
 800ad82:	bf0c      	ite	eq
 800ad84:	2301      	moveq	r3, #1
 800ad86:	2300      	movne	r3, #0
 800ad88:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800ad8a:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	3450      	adds	r4, #80	@ 0x50
 800ad90:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800ae10 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800ad94:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800ad96:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800ad9a:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800ad9e:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800ada2:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800ada6:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800ada8:	fa29 f206 	lsr.w	r2, r9, r6
 800adac:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800adae:	2a01      	cmp	r2, #1
 800adb0:	d119      	bne.n	800ade6 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800adb2:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800adb4:	3608      	adds	r6, #8
 800adb6:	3701      	adds	r7, #1
 800adb8:	2e20      	cmp	r6, #32
 800adba:	d1f5      	bne.n	800ada8 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800adbc:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800adbe:	2d40      	cmp	r5, #64	@ 0x40
 800adc0:	d1ed      	bne.n	800ad9e <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800adc2:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800adc4:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800adc6:	610b      	str	r3, [r1, #16]
}
 800adc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	2310      	movs	r3, #16
 800adce:	e7bf      	b.n	800ad50 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800add0:	2d03      	cmp	r5, #3
 800add2:	d106      	bne.n	800ade2 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800add4:	4313      	orrs	r3, r2
 800add6:	f013 0f0f 	tst.w	r3, #15
 800adda:	bf0c      	ite	eq
 800addc:	2301      	moveq	r3, #1
 800adde:	2300      	movne	r3, #0
 800ade0:	e7d3      	b.n	800ad8a <HAL_JPEG_GetInfo+0x66>
 800ade2:	2300      	movs	r3, #0
 800ade4:	e7d1      	b.n	800ad8a <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800ade6:	fb0e fb02 	mul.w	fp, lr, r2
 800adea:	f897 a000 	ldrb.w	sl, [r7]
 800adee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800adf0:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800adf4:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800adf8:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800adfa:	bf8b      	itete	hi
 800adfc:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800ae00:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800ae04:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800ae06:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800ae0a:	e7d3      	b.n	800adb4 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800ae0c:	2001      	movs	r0, #1
 800ae0e:	e7db      	b.n	800adc8 <HAL_JPEG_GetInfo+0xa4>
 800ae10:	08029984 	.word	0x08029984

0800ae14 <HAL_JPEG_Decode_DMA>:
{
 800ae14:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800ae16:	4604      	mov	r4, r0
 800ae18:	b348      	cbz	r0, 800ae6e <HAL_JPEG_Decode_DMA+0x5a>
 800ae1a:	b341      	cbz	r1, 800ae6e <HAL_JPEG_Decode_DMA+0x5a>
 800ae1c:	b33b      	cbz	r3, 800ae6e <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800ae1e:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800ae22:	2d01      	cmp	r5, #1
 800ae24:	d028      	beq.n	800ae78 <HAL_JPEG_Decode_DMA+0x64>
 800ae26:	2501      	movs	r5, #1
 800ae28:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800ae2c:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800ae30:	2d01      	cmp	r5, #1
 800ae32:	d11e      	bne.n	800ae72 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800ae34:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800ae36:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800ae38:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800ae3c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800ae3e:	f025 050f 	bic.w	r5, r5, #15
 800ae42:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800ae44:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800ae46:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800ae4a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800ae4e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800ae50:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800ae52:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800ae54:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800ae56:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800ae58:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800ae5a:	f7ff fdab 	bl	800a9b4 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800ae5e:	f7ff fde5 	bl	800aa2c <JPEG_DMA_StartProcess>
 800ae62:	b128      	cbz	r0, 800ae70 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ae64:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800ae66:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ae6a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800ae6e:	2001      	movs	r0, #1
}
 800ae70:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800ae72:	2300      	movs	r3, #0
 800ae74:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800ae78:	2002      	movs	r0, #2
 800ae7a:	e7f9      	b.n	800ae70 <HAL_JPEG_Decode_DMA+0x5c>

0800ae7c <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ae7c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ae7e:	f003 030c 	and.w	r3, r3, #12
 800ae82:	2b0c      	cmp	r3, #12
 800ae84:	d10d      	bne.n	800aea2 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ae86:	07cb      	lsls	r3, r1, #31
 800ae88:	d503      	bpl.n	800ae92 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ae8a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ae8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae90:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ae92:	0789      	lsls	r1, r1, #30
 800ae94:	d503      	bpl.n	800ae9e <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ae96:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ae98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ae9c:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800ae9e:	2000      	movs	r0, #0
 800aea0:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aea2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aea4:	f003 030c 	and.w	r3, r3, #12
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	d1f8      	bne.n	800ae9e <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800aeac:	f011 0301 	ands.w	r3, r1, #1
 800aeb0:	d004      	beq.n	800aebc <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800aeb2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aeb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aeb8:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800aeba:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800aebc:	078a      	lsls	r2, r1, #30
 800aebe:	d505      	bpl.n	800aecc <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800aec0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800aec2:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800aec6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aeca:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800aecc:	6801      	ldr	r1, [r0, #0]
 800aece:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800aed0:	ea22 0303 	bic.w	r3, r2, r3
 800aed4:	630b      	str	r3, [r1, #48]	@ 0x30
 800aed6:	e7e2      	b.n	800ae9e <HAL_JPEG_Pause+0x22>

0800aed8 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800aed8:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800aeda:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800aedc:	4770      	bx	lr

0800aede <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800aede:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800aee0:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800aee2:	4770      	bx	lr

0800aee4 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800aee4:	4770      	bx	lr

0800aee6 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800aee6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800aee8:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aeea:	6803      	ldr	r3, [r0, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	f022 0201 	bic.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aef6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aefa:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800aefc:	2301      	movs	r3, #1
 800aefe:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800af02:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800af04:	f043 0304 	orr.w	r3, r3, #4
 800af08:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800af0a:	f7f7 fd77 	bl	80029fc <HAL_JPEG_ErrorCallback>
}
 800af0e:	bd08      	pop	{r3, pc}

0800af10 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800af10:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800af12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800af18:	b922      	cbnz	r2, 800af24 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800af1a:	2101      	movs	r1, #1
 800af1c:	f7ff ffae 	bl	800ae7c <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800af20:	2200      	movs	r2, #0
 800af22:	e004      	b.n	800af2e <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800af24:	6a03      	ldr	r3, [r0, #32]
 800af26:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800af28:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800af2a:	d924      	bls.n	800af76 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800af2c:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800af2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800af30:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800af34:	d11e      	bne.n	800af74 <JPEG_ReadInputData+0x64>
 800af36:	b1ea      	cbz	r2, 800af74 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800af38:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800af3c:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800af3e:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800af42:	d827      	bhi.n	800af94 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af44:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800af46:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800af48:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af4a:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af4c:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800af4e:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af50:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af52:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af56:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800af5a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af5c:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800af60:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800af64:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af68:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800af6a:	6a22      	ldr	r2, [r4, #32]
 800af6c:	f102 0204 	add.w	r2, r2, #4
 800af70:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800af72:	d1e8      	bne.n	800af46 <JPEG_ReadInputData+0x36>
}
 800af74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800af76:	429a      	cmp	r2, r3
 800af78:	d1d2      	bne.n	800af20 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800af7a:	6a01      	ldr	r1, [r0, #32]
 800af7c:	f7f7 fcd0 	bl	8002920 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800af80:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800af82:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800af84:	bf84      	itt	hi
 800af86:	f023 0303 	bichi.w	r3, r3, #3
 800af8a:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800af8c:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800af8e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800af90:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800af92:	e7cc      	b.n	800af2e <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800af94:	2a03      	cmp	r2, #3
 800af96:	d918      	bls.n	800afca <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800af98:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800af9a:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800af9c:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800af9e:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800afa0:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800afa2:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800afa4:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800afa6:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800afaa:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800afae:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800afb0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800afb4:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800afb8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800afbc:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800afbe:	6a22      	ldr	r2, [r4, #32]
 800afc0:	f102 0204 	add.w	r2, r2, #4
 800afc4:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800afc6:	d1e8      	bne.n	800af9a <JPEG_ReadInputData+0x8a>
 800afc8:	e7d4      	b.n	800af74 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800afca:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800afcc:	6a25      	ldr	r5, [r4, #32]
 800afce:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800afd0:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800afd2:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800afd4:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800afd6:	fa05 f506 	lsl.w	r5, r5, r6
 800afda:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800afde:	6a25      	ldr	r5, [r4, #32]
 800afe0:	f105 0501 	add.w	r5, r5, #1
 800afe4:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800afe6:	d1f1      	bne.n	800afcc <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800afec:	e7c2      	b.n	800af74 <JPEG_ReadInputData+0x64>

0800afee <JPEG_MDMAInCpltCallback>:
{
 800afee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800aff0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aff2:	6822      	ldr	r2, [r4, #0]
 800aff4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800aff6:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800affa:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800affc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800affe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b002:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800b006:	041b      	lsls	r3, r3, #16
 800b008:	0c1b      	lsrs	r3, r3, #16
 800b00a:	2b0c      	cmp	r3, #12
 800b00c:	d11a      	bne.n	800b044 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b00e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b010:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b012:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b014:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b016:	695a      	ldr	r2, [r3, #20]
 800b018:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b01a:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800b01e:	1a9b      	subs	r3, r3, r2
 800b020:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b022:	6a21      	ldr	r1, [r4, #32]
 800b024:	f7f7 fc7c 	bl	8002920 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800b028:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b02a:	42ab      	cmp	r3, r5
 800b02c:	d327      	bcc.n	800b07e <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800b02e:	b95d      	cbnz	r5, 800b048 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b030:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800b032:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b034:	f043 0304 	orr.w	r3, r3, #4
 800b038:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b03a:	2306      	movs	r3, #6
 800b03c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800b040:	f7f7 fcdc 	bl	80029fc <HAL_JPEG_ErrorCallback>
}
 800b044:	b003      	add	sp, #12
 800b046:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b048:	fbb3 f2f5 	udiv	r2, r3, r5
 800b04c:	fb05 3212 	mls	r2, r5, r2, r3
 800b050:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b052:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b054:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b056:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b058:	04db      	lsls	r3, r3, #19
 800b05a:	d40a      	bmi.n	800b072 <JPEG_MDMAInCpltCallback+0x84>
 800b05c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b05e:	b143      	cbz	r3, 800b072 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b060:	2101      	movs	r1, #1
 800b062:	3240      	adds	r2, #64	@ 0x40
 800b064:	9100      	str	r1, [sp, #0]
 800b066:	69a1      	ldr	r1, [r4, #24]
 800b068:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800b06a:	f000 fd3a 	bl	800bae2 <HAL_MDMA_Start_IT>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d1de      	bne.n	800b030 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b072:	6822      	ldr	r2, [r4, #0]
 800b074:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800b076:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b07a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b07c:	e7e2      	b.n	800b044 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0e8      	beq.n	800b054 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b082:	079a      	lsls	r2, r3, #30
 800b084:	d0e6      	beq.n	800b054 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b086:	f023 0303 	bic.w	r3, r3, #3
 800b08a:	3304      	adds	r3, #4
 800b08c:	e7e1      	b.n	800b052 <JPEG_MDMAInCpltCallback+0x64>

0800b08e <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800b08e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800b092:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b096:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800b098:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d32a      	bcc.n	800b0f4 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800b09e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800b0a0:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800b0a2:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800b0a4:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800b0a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800b0a8:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800b0aa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b0ac:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800b0ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b0b0:	69e0      	ldr	r0, [r4, #28]
 800b0b2:	4428      	add	r0, r5
 800b0b4:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800b0b8:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800b0ba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b0bc:	69e0      	ldr	r0, [r4, #28]
 800b0be:	4428      	add	r0, r5
 800b0c0:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800b0c4:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800b0c8:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800b0ca:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b0cc:	69e0      	ldr	r0, [r4, #28]
 800b0ce:	4428      	add	r0, r5
 800b0d0:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800b0d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b0d4:	f103 0304 	add.w	r3, r3, #4
 800b0d8:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800b0da:	d1e1      	bne.n	800b0a0 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800b0dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b0de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d106      	bne.n	800b0f2 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b0e6:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f7f7 fc37 	bl	800295c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800b0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800b0f4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d9fb      	bls.n	800b0f2 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800b0fa:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800b0fc:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800b102:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800b104:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800b106:	d105      	bne.n	800b114 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800b108:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b10a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b10c:	429f      	cmp	r7, r3
 800b10e:	d119      	bne.n	800b144 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b110:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b112:	e7e9      	b.n	800b0e8 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800b114:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800b116:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800b118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800b11a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b11c:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800b11e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b120:	69e1      	ldr	r1, [r4, #28]
 800b122:	4429      	add	r1, r5
 800b124:	0a1d      	lsrs	r5, r3, #8
 800b126:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800b128:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b12a:	69e1      	ldr	r1, [r4, #28]
 800b12c:	4429      	add	r1, r5
 800b12e:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800b130:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800b132:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800b134:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b136:	69e1      	ldr	r1, [r4, #28]
 800b138:	4429      	add	r1, r5
 800b13a:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800b13c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b13e:	3304      	adds	r3, #4
 800b140:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800b142:	e7de      	b.n	800b102 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800b144:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800b146:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800b148:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800b14a:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800b14c:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800b14e:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800b150:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800b152:	d114      	bne.n	800b17e <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b154:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b156:	4620      	mov	r0, r4
 800b158:	f7f7 fc00 	bl	800295c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800b160:	1d2b      	adds	r3, r5, #4
 800b162:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800b164:	2b03      	cmp	r3, #3
 800b166:	d8c4      	bhi.n	800b0f2 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800b168:	00da      	lsls	r2, r3, #3
 800b16a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b16c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800b16e:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800b170:	fa26 f202 	lsr.w	r2, r6, r2
 800b174:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800b176:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b178:	3201      	adds	r2, #1
 800b17a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800b17c:	e7f2      	b.n	800b164 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800b17e:	f002 0303 	and.w	r3, r2, #3
 800b182:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800b186:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	fa26 f303 	lsr.w	r3, r6, r3
 800b18e:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800b192:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b194:	3301      	adds	r3, #1
 800b196:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800b198:	e7d9      	b.n	800b14e <JPEG_StoreOutputData+0xc0>

0800b19a <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b19a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b19c:	f003 0303 	and.w	r3, r3, #3
 800b1a0:	2b02      	cmp	r3, #2
{
 800b1a2:	b510      	push	{r4, lr}
 800b1a4:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b1a6:	d114      	bne.n	800b1d2 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800b1a8:	6803      	ldr	r3, [r0, #0]
 800b1aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ac:	065b      	lsls	r3, r3, #25
 800b1ae:	d510      	bpl.n	800b1d2 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800b1b0:	1d01      	adds	r1, r0, #4
 800b1b2:	f7ff fdb7 	bl	800ad24 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800b1b6:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b1b8:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800b1ba:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b1bc:	f7f7 fb7a 	bl	80028b4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b1c8:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800b1ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1d0:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800b1d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b1d4:	04d9      	lsls	r1, r3, #19
 800b1d6:	d407      	bmi.n	800b1e8 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1dc:	0792      	lsls	r2, r2, #30
 800b1de:	d544      	bpl.n	800b26a <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800b1e0:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f7ff fe94 	bl	800af10 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b1e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b1ea:	0499      	lsls	r1, r3, #18
 800b1ec:	d407      	bmi.n	800b1fe <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1f2:	0712      	lsls	r2, r2, #28
 800b1f4:	d53e      	bpl.n	800b274 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800b1f6:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f7ff ff48 	bl	800b08e <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b202:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800b206:	2a20      	cmp	r2, #32
 800b208:	d13c      	bne.n	800b284 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	f022 0201 	bic.w	r2, r2, #1
 800b210:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b212:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b214:	f002 020c 	and.w	r2, r2, #12
 800b218:	2a08      	cmp	r2, #8
 800b21a:	d103      	bne.n	800b224 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b21c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b21e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b222:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b226:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b22a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800b22c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b22e:	b133      	cbz	r3, 800b23e <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b230:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b232:	4620      	mov	r0, r4
 800b234:	69e1      	ldr	r1, [r4, #28]
 800b236:	f7f7 fb91 	bl	800295c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800b23e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b240:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b242:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b244:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b248:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b24c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b24e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800b250:	f04f 0200 	mov.w	r2, #0
 800b254:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b258:	f04f 0201 	mov.w	r2, #1
 800b25c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b260:	d10d      	bne.n	800b27e <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b262:	f7f7 fbcd 	bl	8002a00 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800b266:	2001      	movs	r0, #1
}
 800b268:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800b26a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b26c:	0758      	lsls	r0, r3, #29
 800b26e:	d5bb      	bpl.n	800b1e8 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800b270:	2101      	movs	r1, #1
 800b272:	e7b6      	b.n	800b1e2 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b276:	06db      	lsls	r3, r3, #27
 800b278:	d5c1      	bpl.n	800b1fe <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800b27a:	2101      	movs	r1, #1
 800b27c:	e7bc      	b.n	800b1f8 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b27e:	f7ff fe31 	bl	800aee4 <HAL_JPEG_EncodeCpltCallback>
 800b282:	e7f0      	b.n	800b266 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800b284:	2000      	movs	r0, #0
 800b286:	e7ef      	b.n	800b268 <JPEG_Process+0xce>

0800b288 <JPEG_DMA_PollResidualData>:
{
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	4604      	mov	r4, r0
 800b28c:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b28e:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b290:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b292:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800b296:	d122      	bne.n	800b2de <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b29a:	06d0      	lsls	r0, r2, #27
 800b29c:	d51f      	bpl.n	800b2de <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800b29e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b2a0:	69e1      	ldr	r1, [r4, #28]
 800b2a2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b2a4:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b2a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b2a8:	69e2      	ldr	r2, [r4, #28]
 800b2aa:	440a      	add	r2, r1
 800b2ac:	0a19      	lsrs	r1, r3, #8
 800b2ae:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b2b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b2b2:	69e2      	ldr	r2, [r4, #28]
 800b2b4:	440a      	add	r2, r1
 800b2b6:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b2b8:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b2ba:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b2bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b2be:	69e2      	ldr	r2, [r4, #28]
 800b2c0:	440a      	add	r2, r1
 800b2c2:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800b2c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b2ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b2cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d105      	bne.n	800b2de <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b2d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	69e1      	ldr	r1, [r4, #28]
 800b2d8:	f7f7 fb40 	bl	800295c <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800b2dc:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b2de:	3e01      	subs	r6, #1
 800b2e0:	d1d5      	bne.n	800b28e <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b2e2:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800b2e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b2e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b2e8:	06c9      	lsls	r1, r1, #27
 800b2ea:	d501      	bpl.n	800b2f0 <JPEG_DMA_PollResidualData+0x68>
 800b2ec:	0492      	lsls	r2, r2, #18
 800b2ee:	d420      	bmi.n	800b332 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	f022 0201 	bic.w	r2, r2, #1
 800b2f6:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800b2f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b2fa:	b133      	cbz	r3, 800b30a <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b2fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b2fe:	4620      	mov	r0, r4
 800b300:	69e1      	ldr	r1, [r4, #28]
 800b302:	f7f7 fb2b 	bl	800295c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800b30a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b30c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b30e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b310:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b314:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b318:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b31a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800b31c:	f04f 0200 	mov.w	r2, #0
 800b320:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b324:	f04f 0201 	mov.w	r2, #1
 800b328:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b32c:	d102      	bne.n	800b334 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b32e:	f7f7 fb67 	bl	8002a00 <HAL_JPEG_DecodeCpltCallback>
}
 800b332:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b334:	f7ff fdd6 	bl	800aee4 <HAL_JPEG_EncodeCpltCallback>
}
 800b338:	e7fb      	b.n	800b332 <JPEG_DMA_PollResidualData+0xaa>

0800b33a <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800b33a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b33c:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800b340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b342:	4604      	mov	r4, r0
 800b344:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800b346:	d014      	beq.n	800b372 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b348:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b34a:	f003 030c 	and.w	r3, r3, #12
 800b34e:	2b0c      	cmp	r3, #12
 800b350:	d146      	bne.n	800b3e0 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800b352:	07cb      	lsls	r3, r1, #31
 800b354:	d520      	bpl.n	800b398 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800b356:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b35c:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b35e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800b360:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800b362:	b941      	cbnz	r1, 800b376 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b364:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b366:	f043 0304 	orr.w	r3, r3, #4
 800b36a:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b36c:	2306      	movs	r3, #6
 800b36e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800b372:	2001      	movs	r0, #1
 800b374:	e01d      	b.n	800b3b2 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800b376:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b378:	fbb3 f2f1 	udiv	r2, r3, r1
 800b37c:	fb01 3212 	mls	r2, r1, r2, r3
 800b380:	1a9b      	subs	r3, r3, r2
 800b382:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800b384:	b143      	cbz	r3, 800b398 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b386:	6822      	ldr	r2, [r4, #0]
 800b388:	2101      	movs	r1, #1
 800b38a:	3240      	adds	r2, #64	@ 0x40
 800b38c:	9100      	str	r1, [sp, #0]
 800b38e:	69a1      	ldr	r1, [r4, #24]
 800b390:	f000 fba7 	bl	800bae2 <HAL_MDMA_Start_IT>
 800b394:	2800      	cmp	r0, #0
 800b396:	d1e5      	bne.n	800b364 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800b398:	07a8      	lsls	r0, r5, #30
 800b39a:	d509      	bpl.n	800b3b0 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800b39c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b39e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b3a2:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b3a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b3a6:	0419      	lsls	r1, r3, #16
 800b3a8:	d505      	bpl.n	800b3b6 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f7ff ff6c 	bl	800b288 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800b3b0:	2000      	movs	r0, #0
}
 800b3b2:	b003      	add	sp, #12
 800b3b4:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800b3b6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800b3b8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800b3ba:	2900      	cmp	r1, #0
 800b3bc:	d0d2      	beq.n	800b364 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800b3be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b3c0:	fbb3 f2f1 	udiv	r2, r3, r1
 800b3c4:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b3c8:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800b3ca:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800b3d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b3d2:	9200      	str	r2, [sp, #0]
 800b3d4:	69e2      	ldr	r2, [r4, #28]
 800b3d6:	f000 fb84 	bl	800bae2 <HAL_MDMA_Start_IT>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d0e8      	beq.n	800b3b0 <HAL_JPEG_Resume+0x76>
 800b3de:	e7c1      	b.n	800b364 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b3e0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b3e2:	f003 030c 	and.w	r3, r3, #12
 800b3e6:	2b08      	cmp	r3, #8
 800b3e8:	d1e2      	bne.n	800b3b0 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800b3ea:	f011 0301 	ands.w	r3, r1, #1
 800b3ee:	d004      	beq.n	800b3fa <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800b3f0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b3f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3f6:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800b3f8:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800b3fa:	07aa      	lsls	r2, r5, #30
 800b3fc:	d505      	bpl.n	800b40a <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800b3fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800b400:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800b404:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b408:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800b40a:	6821      	ldr	r1, [r4, #0]
 800b40c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800b40e:	4313      	orrs	r3, r2
 800b410:	630b      	str	r3, [r1, #48]	@ 0x30
 800b412:	e7cd      	b.n	800b3b0 <HAL_JPEG_Resume+0x76>

0800b414 <JPEG_DMA_EndProcess>:
{
 800b414:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b416:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800b418:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b41a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b428:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d105      	bne.n	800b43a <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b42e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800b430:	69c1      	ldr	r1, [r0, #28]
 800b432:	f7f7 fa93 	bl	800295c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800b43e:	f015 0510 	ands.w	r5, r5, #16
 800b442:	d124      	bne.n	800b48e <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800b444:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b446:	b12b      	cbz	r3, 800b454 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b448:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b44a:	4620      	mov	r0, r4
 800b44c:	69e1      	ldr	r1, [r4, #28]
 800b44e:	f7f7 fa85 	bl	800295c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b452:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b454:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b456:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b458:	6813      	ldr	r3, [r2, #0]
 800b45a:	f023 0301 	bic.w	r3, r3, #1
 800b45e:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800b460:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b462:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b464:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b468:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b46c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b46e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800b470:	f04f 0200 	mov.w	r2, #0
 800b474:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b478:	f04f 0201 	mov.w	r2, #1
 800b47c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b480:	d102      	bne.n	800b488 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b482:	f7f7 fabd 	bl	8002a00 <HAL_JPEG_DecodeCpltCallback>
}
 800b486:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b488:	f7ff fd2c 	bl	800aee4 <HAL_JPEG_EncodeCpltCallback>
 800b48c:	e7fb      	b.n	800b486 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b48e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b490:	049b      	lsls	r3, r3, #18
 800b492:	d4f8      	bmi.n	800b486 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800b494:	4620      	mov	r0, r4
}
 800b496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800b49a:	f7ff bef5 	b.w	800b288 <JPEG_DMA_PollResidualData>

0800b49e <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b49e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b4a0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b4a2:	041b      	lsls	r3, r3, #16
 800b4a4:	d501      	bpl.n	800b4aa <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800b4a6:	f7ff bfb5 	b.w	800b414 <JPEG_DMA_EndProcess>
}
 800b4aa:	4770      	bx	lr

0800b4ac <JPEG_MDMAOutCpltCallback>:
{
 800b4ac:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b4ae:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4b4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b4b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b4ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b4bc:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800b4c0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800b4c4:	0412      	lsls	r2, r2, #16
 800b4c6:	0c12      	lsrs	r2, r2, #16
 800b4c8:	2a0c      	cmp	r2, #12
 800b4ca:	d125      	bne.n	800b518 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ce:	069a      	lsls	r2, r3, #26
 800b4d0:	d424      	bmi.n	800b51c <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b4d2:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b4d8:	695a      	ldr	r2, [r3, #20]
 800b4da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b4dc:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800b4e0:	1a9b      	subs	r3, r3, r2
 800b4e2:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b4e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b4e6:	f7f7 fa39 	bl	800295c <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b4ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b4ec:	049b      	lsls	r3, r3, #18
 800b4ee:	d415      	bmi.n	800b51c <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b4f0:	6821      	ldr	r1, [r4, #0]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	3144      	adds	r1, #68	@ 0x44
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b4fa:	69e2      	ldr	r2, [r4, #28]
 800b4fc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800b4fe:	f000 faf0 	bl	800bae2 <HAL_MDMA_Start_IT>
 800b502:	b158      	cbz	r0, 800b51c <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b504:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800b506:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b508:	f043 0304 	orr.w	r3, r3, #4
 800b50c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b50e:	2306      	movs	r3, #6
 800b510:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800b514:	f7f7 fa72 	bl	80029fc <HAL_JPEG_ErrorCallback>
}
 800b518:	b002      	add	sp, #8
 800b51a:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b51c:	6822      	ldr	r2, [r4, #0]
 800b51e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800b520:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b524:	6313      	str	r3, [r2, #48]	@ 0x30
 800b526:	e7f7      	b.n	800b518 <JPEG_MDMAOutCpltCallback+0x6c>

0800b528 <HAL_JPEG_IRQHandler>:
{
 800b528:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800b52a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800b52e:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800b530:	3b03      	subs	r3, #3
 800b532:	2b01      	cmp	r3, #1
 800b534:	d850      	bhi.n	800b5d8 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b536:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b538:	f003 030c 	and.w	r3, r3, #12
 800b53c:	2b08      	cmp	r3, #8
 800b53e:	d103      	bne.n	800b548 <HAL_JPEG_IRQHandler+0x20>
}
 800b540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800b544:	f7ff be29 	b.w	800b19a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b548:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b54a:	f003 030c 	and.w	r3, r3, #12
 800b54e:	2b0c      	cmp	r3, #12
 800b550:	d142      	bne.n	800b5d8 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b552:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b554:	f003 0303 	and.w	r3, r3, #3
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d114      	bne.n	800b586 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800b55c:	6803      	ldr	r3, [r0, #0]
 800b55e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b560:	0659      	lsls	r1, r3, #25
 800b562:	d510      	bpl.n	800b586 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800b564:	1d01      	adds	r1, r0, #4
 800b566:	f7ff fbdd 	bl	800ad24 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800b56a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b56c:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800b56e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b570:	f7f7 f9a0 	bl	80028b4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b57c:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800b57e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b584:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800b586:	6823      	ldr	r3, [r4, #0]
 800b588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b58a:	0692      	lsls	r2, r2, #26
 800b58c:	d524      	bpl.n	800b5d8 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b58e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b590:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b592:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b596:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	f022 0201 	bic.w	r2, r2, #1
 800b59e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b5a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5a2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b5a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b5a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5aa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b5ae:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b5b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d101      	bne.n	800b5bc <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800b5b8:	f000 fadc 	bl	800bb74 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800b5bc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800b5be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d103      	bne.n	800b5ce <HAL_JPEG_IRQHandler+0xa6>
}
 800b5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800b5ca:	f000 bad3 	b.w	800bb74 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800b5ce:	4620      	mov	r0, r4
}
 800b5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800b5d4:	f7ff bf1e 	b.w	800b414 <JPEG_DMA_EndProcess>
}
 800b5d8:	bd10      	pop	{r4, pc}

0800b5da <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b5da:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b5dc:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b5de:	3284      	adds	r2, #132	@ 0x84
 800b5e0:	1883      	adds	r3, r0, r2
{
 800b5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b5e4:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b5e6:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b5e8:	684c      	ldr	r4, [r1, #4]
 800b5ea:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b5ee:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b5f2:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b5f4:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b5f6:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b5f8:	f106 0c01 	add.w	ip, r6, #1
 800b5fc:	68c5      	ldr	r5, [r0, #12]
 800b5fe:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800b602:	4465      	add	r5, ip
 800b604:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b608:	605d      	str	r5, [r3, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b60a:	68c7      	ldr	r7, [r0, #12]
 800b60c:	68cd      	ldr	r5, [r1, #12]
 800b60e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800b612:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b614:	689d      	ldr	r5, [r3, #8]
 800b616:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800b61a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b61c:	688d      	ldr	r5, [r1, #8]
 800b61e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800b622:	3501      	adds	r5, #1
 800b624:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 800b628:	4465      	add	r5, ip

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b62a:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b62e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b632:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b634:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b636:	691d      	ldr	r5, [r3, #16]
 800b638:	f025 0507 	bic.w	r5, r5, #7
 800b63c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b63e:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800b642:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800b646:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b64a:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800b64e:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b652:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800b656:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800b65a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b65c:	695d      	ldr	r5, [r3, #20]
 800b65e:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800b662:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b664:	694d      	ldr	r5, [r1, #20]
 800b666:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b668:	69dd      	ldr	r5, [r3, #28]
 800b66a:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800b66e:	f025 0507 	bic.w	r5, r5, #7
 800b672:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b674:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800b678:	433d      	orrs	r5, r7
 800b67a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800b67c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b67e:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b680:	f1bc 0f00 	cmp.w	ip, #0
 800b684:	d024      	beq.n	800b6d0 <LTDC_SetConfig+0xf6>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b686:	f1bc 0f01 	cmp.w	ip, #1
 800b68a:	d023      	beq.n	800b6d4 <LTDC_SetConfig+0xfa>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b68c:	f1ac 0502 	sub.w	r5, ip, #2
 800b690:	2d02      	cmp	r5, #2
 800b692:	d921      	bls.n	800b6d8 <LTDC_SetConfig+0xfe>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800b694:	f1bc 0f07 	cmp.w	ip, #7
 800b698:	bf14      	ite	ne
 800b69a:	2501      	movne	r5, #1
 800b69c:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b69e:	6adf      	ldr	r7, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b6a0:	1ba4      	subs	r4, r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b6a2:	f007 27e0 	and.w	r7, r7, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b6a6:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b6a8:	62df      	str	r7, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b6aa:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800b6ac:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b6ae:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800b6b0:	436f      	muls	r7, r5
 800b6b2:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800b6b6:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b6b8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800b6ba:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800b6be:	f024 0407 	bic.w	r4, r4, #7
 800b6c2:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b6c4:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b6c6:	5883      	ldr	r3, [r0, r2]
 800b6c8:	f043 0301 	orr.w	r3, r3, #1
 800b6cc:	5083      	str	r3, [r0, r2]
}
 800b6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 4U;
 800b6d0:	2504      	movs	r5, #4
 800b6d2:	e7e4      	b.n	800b69e <LTDC_SetConfig+0xc4>
    tmp = 3U;
 800b6d4:	2503      	movs	r5, #3
 800b6d6:	e7e2      	b.n	800b69e <LTDC_SetConfig+0xc4>
    tmp = 2U;
 800b6d8:	2502      	movs	r5, #2
 800b6da:	e7e0      	b.n	800b69e <LTDC_SetConfig+0xc4>

0800b6dc <HAL_LTDC_Init>:
{
 800b6dc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800b6de:	4604      	mov	r4, r0
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d04e      	beq.n	800b782 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b6e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800b6e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b6ec:	b91b      	cbnz	r3, 800b6f6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800b6ee:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800b6f2:	f7f5 feb5 	bl	8001460 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	699a      	ldr	r2, [r3, #24]
 800b700:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800b704:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b706:	6999      	ldr	r1, [r3, #24]
 800b708:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800b70c:	4302      	orrs	r2, r0
 800b70e:	68e0      	ldr	r0, [r4, #12]
 800b710:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b712:	6920      	ldr	r0, [r4, #16]
 800b714:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b716:	430a      	orrs	r2, r1
 800b718:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800b71a:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800b71e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b722:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800b724:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 800b728:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b72c:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800b72e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 800b732:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b736:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800b738:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800b73c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b740:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b744:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b748:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b74c:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b752:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800b754:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800b758:	432a      	orrs	r2, r5
 800b75a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b75e:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b760:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b764:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b768:	f042 0206 	orr.w	r2, r2, #6
 800b76c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800b76e:	699a      	ldr	r2, [r3, #24]
 800b770:	f042 0201 	orr.w	r2, r2, #1
 800b774:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800b776:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b778:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800b77c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800b780:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b782:	2001      	movs	r0, #1
 800b784:	e7fc      	b.n	800b780 <HAL_LTDC_Init+0xa4>

0800b786 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800b786:	4770      	bx	lr

0800b788 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800b788:	4770      	bx	lr

0800b78a <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800b78a:	4770      	bx	lr

0800b78c <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b78c:	6803      	ldr	r3, [r0, #0]
{
 800b78e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b790:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800b792:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b794:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b796:	0772      	lsls	r2, r6, #29
 800b798:	d514      	bpl.n	800b7c4 <HAL_LTDC_IRQHandler+0x38>
 800b79a:	0769      	lsls	r1, r5, #29
 800b79c:	d512      	bpl.n	800b7c4 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b79e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7a0:	f022 0204 	bic.w	r2, r2, #4
 800b7a4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b7a6:	2204      	movs	r2, #4
 800b7a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b7aa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800b7b6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b7b8:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b7bc:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b7c0:	f7ff ffe1 	bl	800b786 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b7c4:	07b2      	lsls	r2, r6, #30
 800b7c6:	d516      	bpl.n	800b7f6 <HAL_LTDC_IRQHandler+0x6a>
 800b7c8:	07ab      	lsls	r3, r5, #30
 800b7ca:	d514      	bpl.n	800b7f6 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b7cc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800b7ce:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b7d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7d2:	f022 0202 	bic.w	r2, r2, #2
 800b7d6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b7d8:	2202      	movs	r2, #2
 800b7da:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b7dc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b7e6:	2304      	movs	r3, #4
 800b7e8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b7f2:	f7ff ffc8 	bl	800b786 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b7f6:	07f0      	lsls	r0, r6, #31
 800b7f8:	d510      	bpl.n	800b81c <HAL_LTDC_IRQHandler+0x90>
 800b7fa:	07e9      	lsls	r1, r5, #31
 800b7fc:	d50e      	bpl.n	800b81c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b7fe:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800b800:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b804:	f022 0201 	bic.w	r2, r2, #1
 800b808:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b80a:	2201      	movs	r2, #1
 800b80c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800b80e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800b810:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b814:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800b818:	f7ff ffb6 	bl	800b788 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b81c:	0732      	lsls	r2, r6, #28
 800b81e:	d511      	bpl.n	800b844 <HAL_LTDC_IRQHandler+0xb8>
 800b820:	072b      	lsls	r3, r5, #28
 800b822:	d50f      	bpl.n	800b844 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b824:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b826:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b82a:	f022 0208 	bic.w	r2, r2, #8
 800b82e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b830:	2208      	movs	r2, #8
 800b832:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800b834:	2301      	movs	r3, #1
 800b836:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800b83a:	2300      	movs	r3, #0
 800b83c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b840:	f7ff ffa3 	bl	800b78a <HAL_LTDC_ReloadEventCallback>
}
 800b844:	bd70      	pop	{r4, r5, r6, pc}

0800b846 <HAL_LTDC_ConfigLayer>:
{
 800b846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800b84a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800b84e:	4606      	mov	r6, r0
 800b850:	460f      	mov	r7, r1
 800b852:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800b854:	2b01      	cmp	r3, #1
 800b856:	f04f 0002 	mov.w	r0, #2
 800b85a:	d01f      	beq.n	800b89c <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b85c:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800b85e:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b862:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b864:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b868:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800b86c:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b870:	3438      	adds	r4, #56	@ 0x38
 800b872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b87a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b87c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b87e:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b880:	4630      	mov	r0, r6
 800b882:	4662      	mov	r2, ip
 800b884:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b886:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b888:	f7ff fea7 	bl	800b5da <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b88c:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800b88e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b890:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b894:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b898:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b8a0 <HAL_LTDC_SetPitch>:
{
 800b8a0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800b8a2:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	f04f 0302 	mov.w	r3, #2
 800b8ac:	d02c      	beq.n	800b908 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b8ae:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b8b0:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b8b4:	fb04 0402 	mla	r4, r4, r2, r0
 800b8b8:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b8ba:	b33c      	cbz	r4, 800b90c <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b8bc:	2c01      	cmp	r4, #1
 800b8be:	d027      	beq.n	800b910 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b8c0:	1ea5      	subs	r5, r4, #2
 800b8c2:	429d      	cmp	r5, r3
 800b8c4:	d902      	bls.n	800b8cc <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800b8c6:	2c07      	cmp	r4, #7
 800b8c8:	bf18      	it	ne
 800b8ca:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b8cc:	01d2      	lsls	r2, r2, #7
 800b8ce:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800b8d0:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b8d2:	3284      	adds	r2, #132	@ 0x84
 800b8d4:	4422      	add	r2, r4
 800b8d6:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800b8d8:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800b8dc:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800b8e0:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b8e2:	4c0c      	ldr	r4, [pc, #48]	@ (800b914 <HAL_LTDC_SetPitch+0x74>)
 800b8e4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b8e6:	f045 0501 	orr.w	r5, r5, #1
 800b8ea:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800b8ec:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800b8ee:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800b8f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b8f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b8f6:	f043 0301 	orr.w	r3, r3, #1
 800b8fa:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b902:	2300      	movs	r3, #0
 800b904:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800b90c:	2304      	movs	r3, #4
 800b90e:	e7dd      	b.n	800b8cc <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800b910:	2303      	movs	r3, #3
 800b912:	e7db      	b.n	800b8cc <HAL_LTDC_SetPitch+0x2c>
 800b914:	50001000 	.word	0x50001000

0800b918 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b918:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b91a:	6804      	ldr	r4, [r0, #0]
 800b91c:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b920:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b924:	6965      	ldr	r5, [r4, #20]
 800b926:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800b92a:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800b92e:	ea45 0503 	orr.w	r5, r5, r3
 800b932:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800b934:	9d03      	ldr	r5, [sp, #12]
 800b936:	6963      	ldr	r3, [r4, #20]
 800b938:	f105 35ff 	add.w	r5, r5, #4294967295
 800b93c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b940:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800b944:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800b946:	f04f 031f 	mov.w	r3, #31
 800b94a:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800b94c:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800b94e:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800b950:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b952:	bf0c      	ite	eq
 800b954:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b958:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b95c:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b960:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800b962:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b964:	bf0c      	ite	eq
 800b966:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800b96a:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800b96e:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800b970:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800b972:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800b974:	bd30      	pop	{r4, r5, pc}

0800b976 <HAL_MDMA_Init>:
{
 800b976:	b538      	push	{r3, r4, r5, lr}
 800b978:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b97a:	f7fd fb33 	bl	8008fe4 <HAL_GetTick>
 800b97e:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800b980:	2c00      	cmp	r4, #0
 800b982:	d061      	beq.n	800ba48 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800b984:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800b986:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800b988:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b98c:	2302      	movs	r3, #2
 800b98e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800b992:	68d3      	ldr	r3, [r2, #12]
 800b994:	f023 0301 	bic.w	r3, r3, #1
 800b998:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	68da      	ldr	r2, [r3, #12]
 800b99e:	07d2      	lsls	r2, r2, #31
 800b9a0:	d448      	bmi.n	800ba34 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b9a2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800b9a6:	430a      	orrs	r2, r1
 800b9a8:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b9aa:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	69e1      	ldr	r1, [r4, #28]
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	6a21      	ldr	r1, [r4, #32]
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b9c2:	430a      	orrs	r2, r1
 800b9c4:	68a1      	ldr	r1, [r4, #8]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b9ca:	3901      	subs	r1, #1
 800b9cc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b9d0:	6861      	ldr	r1, [r4, #4]
 800b9d2:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b9d6:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b9d8:	d103      	bne.n	800b9e2 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b9da:	691a      	ldr	r2, [r3, #16]
 800b9dc:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b9e0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b9e6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b9e8:	2a00      	cmp	r2, #0
 800b9ea:	da04      	bge.n	800b9f6 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b9ec:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b9ee:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b9f0:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800b9f4:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b9f6:	b292      	uxth	r2, r2
 800b9f8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b9fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b9fc:	2a00      	cmp	r2, #0
 800b9fe:	da25      	bge.n	800ba4c <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ba00:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800ba02:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ba04:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800ba08:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ba0a:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ba0c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ba10:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ba14:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ba16:	f04f 0200 	mov.w	r2, #0
 800ba1a:	d019      	beq.n	800ba50 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800ba1c:	b2c9      	uxtb	r1, r1
 800ba1e:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ba20:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800ba22:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ba24:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800ba26:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800ba28:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800ba2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800ba2e:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800ba32:	e00a      	b.n	800ba4a <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ba34:	f7fd fad6 	bl	8008fe4 <HAL_GetTick>
 800ba38:	1b40      	subs	r0, r0, r5
 800ba3a:	2805      	cmp	r0, #5
 800ba3c:	d9ad      	bls.n	800b99a <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ba3e:	2340      	movs	r3, #64	@ 0x40
 800ba40:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ba42:	2303      	movs	r3, #3
 800ba44:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800ba48:	2001      	movs	r0, #1
}
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ba4c:	6a18      	ldr	r0, [r3, #32]
 800ba4e:	e7dd      	b.n	800ba0c <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800ba50:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba52:	e7e5      	b.n	800ba20 <HAL_MDMA_Init+0xaa>

0800ba54 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800ba54:	b1d8      	cbz	r0, 800ba8e <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800ba56:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800ba58:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800ba5a:	68d3      	ldr	r3, [r2, #12]
 800ba5c:	f023 0301 	bic.w	r3, r3, #1
 800ba60:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800ba66:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800ba68:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800ba6a:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800ba6c:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800ba6e:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800ba70:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800ba72:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800ba74:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800ba76:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800ba78:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ba7a:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800ba7c:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800ba7e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800ba82:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800ba86:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	4770      	bx	lr
    return HAL_ERROR;
 800ba8e:	2001      	movs	r0, #1
}
 800ba90:	4770      	bx	lr

0800ba92 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800ba92:	4603      	mov	r3, r0
{
 800ba94:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800ba96:	b300      	cbz	r0, 800bada <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800ba98:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800ba9c:	2801      	cmp	r0, #1
 800ba9e:	d01e      	beq.n	800bade <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800baa0:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800baa2:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800baa6:	42a5      	cmp	r5, r4
 800baa8:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800baaa:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800baae:	d112      	bne.n	800bad6 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800bab0:	681c      	ldr	r4, [r3, #0]
 800bab2:	6925      	ldr	r5, [r4, #16]
 800bab4:	006d      	lsls	r5, r5, #1
 800bab6:	d407      	bmi.n	800bac8 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800bab8:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800baba:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800babc:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800babe:	b939      	cbnz	r1, 800bad0 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800bac0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800bac4:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800bac6:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800bace:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800bad0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bad4:	e7f6      	b.n	800bac4 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800bad6:	4620      	mov	r0, r4
 800bad8:	e7f6      	b.n	800bac8 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800bada:	2001      	movs	r0, #1
 800badc:	e7f7      	b.n	800bace <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800bade:	2002      	movs	r0, #2
 800bae0:	e7f5      	b.n	800bace <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800bae2 <HAL_MDMA_Start_IT>:
{
 800bae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800bae4:	4604      	mov	r4, r0
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d042      	beq.n	800bb70 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800baea:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800baee:	2d01      	cmp	r5, #1
 800baf0:	d03c      	beq.n	800bb6c <HAL_MDMA_Start_IT+0x8a>
 800baf2:	2501      	movs	r5, #1
 800baf4:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800baf8:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800bafc:	2d01      	cmp	r5, #1
 800bafe:	f04f 0500 	mov.w	r5, #0
 800bb02:	d131      	bne.n	800bb68 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800bb04:	2602      	movs	r6, #2
 800bb06:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bb0a:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800bb0c:	6805      	ldr	r5, [r0, #0]
 800bb0e:	68ee      	ldr	r6, [r5, #12]
 800bb10:	f026 0601 	bic.w	r6, r6, #1
 800bb14:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800bb16:	9e06      	ldr	r6, [sp, #24]
 800bb18:	9600      	str	r6, [sp, #0]
 800bb1a:	f7ff fefd 	bl	800b918 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800bb1e:	68eb      	ldr	r3, [r5, #12]
 800bb20:	f043 0306 	orr.w	r3, r3, #6
 800bb24:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800bb26:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800bb28:	b11b      	cbz	r3, 800bb32 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800bb2a:	68eb      	ldr	r3, [r5, #12]
 800bb2c:	f043 0310 	orr.w	r3, r3, #16
 800bb30:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800bb32:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800bb34:	b11b      	cbz	r3, 800bb3e <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800bb36:	68eb      	ldr	r3, [r5, #12]
 800bb38:	f043 0308 	orr.w	r3, r3, #8
 800bb3c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800bb3e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800bb40:	b11b      	cbz	r3, 800bb4a <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800bb42:	68eb      	ldr	r3, [r5, #12]
 800bb44:	f043 0320 	orr.w	r3, r3, #32
 800bb48:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800bb4a:	68eb      	ldr	r3, [r5, #12]
 800bb4c:	f043 0301 	orr.w	r3, r3, #1
 800bb50:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bb52:	6863      	ldr	r3, [r4, #4]
 800bb54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb58:	d103      	bne.n	800bb62 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800bb5a:	68eb      	ldr	r3, [r5, #12]
 800bb5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb60:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800bb62:	2000      	movs	r0, #0
}
 800bb64:	b002      	add	sp, #8
 800bb66:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800bb68:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800bb6c:	2002      	movs	r0, #2
 800bb6e:	e7f9      	b.n	800bb64 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800bb70:	2001      	movs	r0, #1
 800bb72:	e7f7      	b.n	800bb64 <HAL_MDMA_Start_IT+0x82>

0800bb74 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800bb74:	b128      	cbz	r0, 800bb82 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800bb76:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d003      	beq.n	800bb86 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800bb7e:	2380      	movs	r3, #128	@ 0x80
 800bb80:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800bb82:	2001      	movs	r0, #1
 800bb84:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800bb86:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800bb88:	2304      	movs	r3, #4
 800bb8a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800bb8e:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800bb90:	68d3      	ldr	r3, [r2, #12]
 800bb92:	f023 0301 	bic.w	r3, r3, #1
 800bb96:	60d3      	str	r3, [r2, #12]
}
 800bb98:	4770      	bx	lr
	...

0800bb9c <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800bb9c:	2300      	movs	r3, #0
{
 800bb9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800bba0:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800bba2:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800bba6:	4b58      	ldr	r3, [pc, #352]	@ (800bd08 <HAL_MDMA_IRQHandler+0x16c>)
{
 800bba8:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800bbaa:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800bbac:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800bbae:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800bbb0:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800bbb2:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800bbb6:	3a40      	subs	r2, #64	@ 0x40
 800bbb8:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800bbbc:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800bbc0:	4202      	tst	r2, r0
 800bbc2:	f000 809e 	beq.w	800bd02 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	07d1      	lsls	r1, r2, #31
 800bbca:	d529      	bpl.n	800bc20 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800bbcc:	68da      	ldr	r2, [r3, #12]
 800bbce:	0792      	lsls	r2, r2, #30
 800bbd0:	d526      	bpl.n	800bc20 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	f022 0202 	bic.w	r2, r2, #2
 800bbd8:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800bbda:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800bbdc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800bbde:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800bbe0:	bf54      	ite	pl
 800bbe2:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800bbe6:	f041 0102 	orrmi.w	r1, r1, #2
 800bbea:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800bbec:	0591      	lsls	r1, r2, #22
 800bbee:	d503      	bpl.n	800bbf8 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800bbf0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800bbf2:	f041 0104 	orr.w	r1, r1, #4
 800bbf6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800bbf8:	05d0      	lsls	r0, r2, #23
 800bbfa:	d503      	bpl.n	800bc04 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800bbfc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800bbfe:	f041 0108 	orr.w	r1, r1, #8
 800bc02:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800bc04:	0551      	lsls	r1, r2, #21
 800bc06:	d503      	bpl.n	800bc10 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800bc08:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800bc0a:	f041 0110 	orr.w	r1, r1, #16
 800bc0e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800bc10:	0512      	lsls	r2, r2, #20
 800bc12:	d503      	bpl.n	800bc1c <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800bc14:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800bc16:	f042 0220 	orr.w	r2, r2, #32
 800bc1a:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	06d0      	lsls	r0, r2, #27
 800bc24:	d508      	bpl.n	800bc38 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800bc26:	68da      	ldr	r2, [r3, #12]
 800bc28:	0691      	lsls	r1, r2, #26
 800bc2a:	d505      	bpl.n	800bc38 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800bc2c:	2210      	movs	r2, #16
 800bc2e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800bc30:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800bc32:	b10b      	cbz	r3, 800bc38 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800bc34:	4620      	mov	r0, r4
 800bc36:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	0712      	lsls	r2, r2, #28
 800bc3e:	d508      	bpl.n	800bc52 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	06d0      	lsls	r0, r2, #27
 800bc44:	d505      	bpl.n	800bc52 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800bc46:	2208      	movs	r2, #8
 800bc48:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800bc4a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800bc4c:	b10b      	cbz	r3, 800bc52 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800bc4e:	4620      	mov	r0, r4
 800bc50:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	0751      	lsls	r1, r2, #29
 800bc58:	d508      	bpl.n	800bc6c <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	0712      	lsls	r2, r2, #28
 800bc5e:	d505      	bpl.n	800bc6c <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800bc60:	2204      	movs	r2, #4
 800bc62:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800bc64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800bc66:	b10b      	cbz	r3, 800bc6c <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800bc68:	4620      	mov	r0, r4
 800bc6a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800bc6c:	6823      	ldr	r3, [r4, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	0790      	lsls	r0, r2, #30
 800bc72:	d524      	bpl.n	800bcbe <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800bc74:	68da      	ldr	r2, [r3, #12]
 800bc76:	0751      	lsls	r1, r2, #29
 800bc78:	d521      	bpl.n	800bcbe <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800bc7a:	68da      	ldr	r2, [r3, #12]
 800bc7c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800bc80:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800bc82:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800bc86:	2a04      	cmp	r2, #4
 800bc88:	f04f 0200 	mov.w	r2, #0
 800bc8c:	d10c      	bne.n	800bca8 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800bc8e:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800bc90:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800bc94:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800bc98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d031      	beq.n	800bd02 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800bc9e:	4620      	mov	r0, r4
}
 800bca0:	b003      	add	sp, #12
 800bca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800bca6:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800bca8:	2102      	movs	r1, #2
 800bcaa:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800bcac:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800bcae:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800bcb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800bcb6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bcb8:	b10b      	cbz	r3, 800bcbe <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800bcbe:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800bcc0:	b1fb      	cbz	r3, 800bd02 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800bcc2:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800bcc6:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800bcca:	2304      	movs	r3, #4
 800bccc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	68da      	ldr	r2, [r3, #12]
 800bcd4:	f022 0201 	bic.w	r2, r2, #1
 800bcd8:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800bcda:	9a01      	ldr	r2, [sp, #4]
 800bcdc:	3201      	adds	r2, #1
 800bcde:	42aa      	cmp	r2, r5
 800bce0:	9201      	str	r2, [sp, #4]
 800bce2:	d802      	bhi.n	800bcea <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800bce4:	68da      	ldr	r2, [r3, #12]
 800bce6:	07d2      	lsls	r2, r2, #31
 800bce8:	d4f7      	bmi.n	800bcda <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800bcea:	2200      	movs	r2, #0
 800bcec:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800bcf4:	bf4c      	ite	mi
 800bcf6:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800bcf8:	2301      	movpl	r3, #1
 800bcfa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800bcfe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bd00:	e7cb      	b.n	800bc9a <HAL_MDMA_IRQHandler+0xfe>
}
 800bd02:	b003      	add	sp, #12
 800bd04:	bd30      	pop	{r4, r5, pc}
 800bd06:	bf00      	nop
 800bd08:	24000070 	.word	0x24000070

0800bd0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bd0c:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800bd0e:	4d1c      	ldr	r5, [pc, #112]	@ (800bd80 <HAL_PWREx_ConfigSupply+0x74>)
{
 800bd10:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800bd12:	68eb      	ldr	r3, [r5, #12]
 800bd14:	f003 0307 	and.w	r3, r3, #7
 800bd18:	2b06      	cmp	r3, #6
 800bd1a:	d006      	beq.n	800bd2a <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bd1c:	68e8      	ldr	r0, [r5, #12]
 800bd1e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800bd22:	1b00      	subs	r0, r0, r4
 800bd24:	bf18      	it	ne
 800bd26:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800bd28:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bd2a:	68eb      	ldr	r3, [r5, #12]
 800bd2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bd30:	4303      	orrs	r3, r0
 800bd32:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800bd34:	f7fd f956 	bl	8008fe4 <HAL_GetTick>
 800bd38:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bd3a:	686b      	ldr	r3, [r5, #4]
 800bd3c:	049a      	lsls	r2, r3, #18
 800bd3e:	d508      	bpl.n	800bd52 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800bd40:	f1a4 031d 	sub.w	r3, r4, #29
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d90c      	bls.n	800bd62 <HAL_PWREx_ConfigSupply+0x56>
 800bd48:	3c2d      	subs	r4, #45	@ 0x2d
 800bd4a:	2c01      	cmp	r4, #1
 800bd4c:	d909      	bls.n	800bd62 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800bd4e:	2000      	movs	r0, #0
 800bd50:	e7ea      	b.n	800bd28 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bd52:	f7fd f947 	bl	8008fe4 <HAL_GetTick>
 800bd56:	1b80      	subs	r0, r0, r6
 800bd58:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800bd5c:	d9ed      	bls.n	800bd3a <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800bd5e:	2001      	movs	r0, #1
 800bd60:	e7e2      	b.n	800bd28 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800bd62:	f7fd f93f 	bl	8008fe4 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800bd66:	4d06      	ldr	r5, [pc, #24]	@ (800bd80 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800bd68:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800bd6a:	68eb      	ldr	r3, [r5, #12]
 800bd6c:	03db      	lsls	r3, r3, #15
 800bd6e:	d4ee      	bmi.n	800bd4e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bd70:	f7fd f938 	bl	8008fe4 <HAL_GetTick>
 800bd74:	1b00      	subs	r0, r0, r4
 800bd76:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800bd7a:	d9f6      	bls.n	800bd6a <HAL_PWREx_ConfigSupply+0x5e>
 800bd7c:	e7ef      	b.n	800bd5e <HAL_PWREx_ConfigSupply+0x52>
 800bd7e:	bf00      	nop
 800bd80:	58024800 	.word	0x58024800

0800bd84 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800bd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800bd88:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800bd8a:	b135      	cbz	r5, 800bd9a <QSPI_Config+0x16>
 800bd8c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800bd90:	d003      	beq.n	800bd9a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800bd92:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800bd94:	6804      	ldr	r4, [r0, #0]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800bd9a:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bd9e:	e9d1 7807 	ldrd	r7, r8, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800bda2:	f1ba 0f00 	cmp.w	sl, #0
 800bda6:	d04c      	beq.n	800be42 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bda8:	694c      	ldr	r4, [r1, #20]
 800bdaa:	ea45 0a0a 	orr.w	sl, r5, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800bdae:	6806      	ldr	r6, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bdb0:	680b      	ldr	r3, [r1, #0]
 800bdb2:	04a4      	lsls	r4, r4, #18
 800bdb4:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
 800bdb8:	ea4a 0a02 	orr.w	sl, sl, r2
 800bdbc:	e9d1 0e0b 	ldrd	r0, lr, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bdc0:	f1b8 0f00 	cmp.w	r8, #0
 800bdc4:	d026      	beq.n	800be14 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bdc6:	688d      	ldr	r5, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bdc8:	f8d1 9010 	ldr.w	r9, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bdcc:	61f5      	str	r5, [r6, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bdce:	ea4a 0508 	orr.w	r5, sl, r8
 800bdd2:	b19f      	cbz	r7, 800bdfc <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bdd4:	433b      	orrs	r3, r7
 800bdd6:	4303      	orrs	r3, r0
 800bdd8:	68c8      	ldr	r0, [r1, #12]
 800bdda:	ea43 030e 	orr.w	r3, r3, lr
 800bdde:	ea43 030c 	orr.w	r3, r3, ip
 800bde2:	ea43 0309 	orr.w	r3, r3, r9
 800bde6:	4303      	orrs	r3, r0
 800bde8:	4323      	orrs	r3, r4
 800bdea:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bdec:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bdf0:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bdf2:	d001      	beq.n	800bdf8 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bdf4:	684b      	ldr	r3, [r1, #4]
 800bdf6:	61b3      	str	r3, [r6, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800bdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bdfc:	4303      	orrs	r3, r0
 800bdfe:	ea43 030e 	orr.w	r3, r3, lr
 800be02:	ea43 030c 	orr.w	r3, r3, ip
 800be06:	ea43 0309 	orr.w	r3, r3, r9
 800be0a:	4323      	orrs	r3, r4
 800be0c:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be0e:	6173      	str	r3, [r6, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800be10:	61b7      	str	r7, [r6, #24]
 800be12:	e7f1      	b.n	800bdf8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800be14:	b15f      	cbz	r7, 800be2e <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be16:	433b      	orrs	r3, r7
 800be18:	4303      	orrs	r3, r0
 800be1a:	68c8      	ldr	r0, [r1, #12]
 800be1c:	ea43 030e 	orr.w	r3, r3, lr
 800be20:	ea43 030c 	orr.w	r3, r3, ip
 800be24:	4303      	orrs	r3, r0
 800be26:	4323      	orrs	r3, r4
 800be28:	ea43 030a 	orr.w	r3, r3, sl
 800be2c:	e7de      	b.n	800bdec <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be2e:	4303      	orrs	r3, r0
 800be30:	ea43 030e 	orr.w	r3, r3, lr
 800be34:	ea43 050c 	orr.w	r5, r3, ip
 800be38:	ea45 0304 	orr.w	r3, r5, r4
 800be3c:	ea43 030a 	orr.w	r3, r3, sl
 800be40:	e7e5      	b.n	800be0e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800be42:	f1b8 0f00 	cmp.w	r8, #0
 800be46:	d02d      	beq.n	800bea4 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800be48:	688b      	ldr	r3, [r1, #8]
 800be4a:	ea45 0508 	orr.w	r5, r5, r8
 800be4e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be50:	694e      	ldr	r6, [r1, #20]
 800be52:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800be54:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be56:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be5a:	04b6      	lsls	r6, r6, #18
 800be5c:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be5e:	e9d1 9e0b 	ldrd	r9, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800be62:	b1a7      	cbz	r7, 800be8e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be64:	433b      	orrs	r3, r7
 800be66:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800be68:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be6c:	ea43 0309 	orr.w	r3, r3, r9
 800be70:	ea43 030e 	orr.w	r3, r3, lr
 800be74:	ea43 030c 	orr.w	r3, r3, ip
 800be78:	ea43 0300 	orr.w	r3, r3, r0
 800be7c:	ea43 0306 	orr.w	r3, r3, r6
 800be80:	ea43 0305 	orr.w	r3, r3, r5
 800be84:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800be86:	d0b7      	beq.n	800bdf8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800be88:	684b      	ldr	r3, [r1, #4]
 800be8a:	61a3      	str	r3, [r4, #24]
 800be8c:	e7b4      	b.n	800bdf8 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800be8e:	ea43 0209 	orr.w	r2, r3, r9
 800be92:	ea42 020e 	orr.w	r2, r2, lr
 800be96:	ea42 020c 	orr.w	r2, r2, ip
 800be9a:	4332      	orrs	r2, r6
 800be9c:	432a      	orrs	r2, r5
 800be9e:	6162      	str	r2, [r4, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800bea0:	61a7      	str	r7, [r4, #24]
 800bea2:	e7a9      	b.n	800bdf8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bea4:	b1d7      	cbz	r7, 800bedc <QSPI_Config+0x158>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bea6:	ea45 0307 	orr.w	r3, r5, r7
 800beaa:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800beac:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800beae:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800beb2:	ea43 0302 	orr.w	r3, r3, r2
 800beb6:	ea43 0304 	orr.w	r3, r3, r4
 800beba:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800bebc:	ea43 0304 	orr.w	r3, r3, r4
 800bec0:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800bec2:	ea43 0304 	orr.w	r3, r3, r4
 800bec6:	68cc      	ldr	r4, [r1, #12]
 800bec8:	ea43 0304 	orr.w	r3, r3, r4
 800becc:	694c      	ldr	r4, [r1, #20]
 800bece:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800bed2:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bed4:	d090      	beq.n	800bdf8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bed6:	684b      	ldr	r3, [r1, #4]
 800bed8:	6183      	str	r3, [r0, #24]
 800beda:	e78d      	b.n	800bdf8 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800bedc:	2d00      	cmp	r5, #0
 800bede:	d08b      	beq.n	800bdf8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bee0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800bee2:	6800      	ldr	r0, [r0, #0]
 800bee4:	432b      	orrs	r3, r5
 800bee6:	431a      	orrs	r2, r3
 800bee8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800beea:	431a      	orrs	r2, r3
 800beec:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800beee:	431a      	orrs	r2, r3
 800bef0:	694b      	ldr	r3, [r1, #20]
 800bef2:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800bef6:	6142      	str	r2, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800bef8:	6187      	str	r7, [r0, #24]
}
 800befa:	e77d      	b.n	800bdf8 <QSPI_Config+0x74>

0800befc <QSPI_WaitFlagStateUntilTimeout>:
{
 800befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf00:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bf04:	4604      	mov	r4, r0
 800bf06:	460e      	mov	r6, r1
 800bf08:	4615      	mov	r5, r2
 800bf0a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bf0c:	6822      	ldr	r2, [r4, #0]
 800bf0e:	6893      	ldr	r3, [r2, #8]
 800bf10:	4233      	tst	r3, r6
 800bf12:	bf14      	ite	ne
 800bf14:	2301      	movne	r3, #1
 800bf16:	2300      	moveq	r3, #0
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	d101      	bne.n	800bf20 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	e012      	b.n	800bf46 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800bf20:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bf24:	d0f3      	beq.n	800bf0e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf26:	f7fd f85d 	bl	8008fe4 <HAL_GetTick>
 800bf2a:	1bc0      	subs	r0, r0, r7
 800bf2c:	4540      	cmp	r0, r8
 800bf2e:	d802      	bhi.n	800bf36 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800bf30:	f1b8 0f00 	cmp.w	r8, #0
 800bf34:	d1ea      	bne.n	800bf0c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800bf36:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800bf38:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800bf3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800bf3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bf40:	f043 0301 	orr.w	r3, r3, #1
 800bf44:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800bf46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bf4c <HAL_QSPI_Init>:
{
 800bf4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800bf50:	f7fd f848 	bl	8008fe4 <HAL_GetTick>
 800bf54:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800bf56:	2c00      	cmp	r4, #0
 800bf58:	d03f      	beq.n	800bfda <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800bf5a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bf5e:	b92b      	cbnz	r3, 800bf6c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800bf60:	4620      	mov	r0, r4
 800bf62:	f7f5 fabb 	bl	80014dc <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800bf66:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bf6a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bf6c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bf6e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bf70:	68a3      	ldr	r3, [r4, #8]
 800bf72:	680a      	ldr	r2, [r1, #0]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800bf7a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bf7e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bf80:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bf82:	2200      	movs	r2, #0
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	2120      	movs	r1, #32
 800bf88:	462b      	mov	r3, r5
 800bf8a:	f7ff ffb7 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800bf8e:	bb10      	cbnz	r0, 800bfd6 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800bf90:	6822      	ldr	r2, [r4, #0]
 800bf92:	69e5      	ldr	r5, [r4, #28]
 800bf94:	68e3      	ldr	r3, [r4, #12]
 800bf96:	6811      	ldr	r1, [r2, #0]
 800bf98:	432b      	orrs	r3, r5
 800bf9a:	6a25      	ldr	r5, [r4, #32]
 800bf9c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800bfa0:	432b      	orrs	r3, r5
 800bfa2:	6865      	ldr	r5, [r4, #4]
 800bfa4:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800bfa8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800bfac:	430b      	orrs	r3, r1
 800bfae:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800bfb0:	6855      	ldr	r5, [r2, #4]
 800bfb2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	6921      	ldr	r1, [r4, #16]
 800bfba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bfbe:	4908      	ldr	r1, [pc, #32]	@ (800bfe0 <HAL_QSPI_Init+0x94>)
 800bfc0:	4029      	ands	r1, r5
 800bfc2:	430b      	orrs	r3, r1
 800bfc4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800bfc6:	6813      	ldr	r3, [r2, #0]
 800bfc8:	f043 0301 	orr.w	r3, r3, #1
 800bfcc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800bfce:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bfd0:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800bfd2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800bfd6:	b003      	add	sp, #12
 800bfd8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800bfda:	2001      	movs	r0, #1
 800bfdc:	e7fb      	b.n	800bfd6 <HAL_QSPI_Init+0x8a>
 800bfde:	bf00      	nop
 800bfe0:	ffe0f8fe 	.word	0xffe0f8fe

0800bfe4 <HAL_QSPI_Command>:
{
 800bfe4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe8:	4604      	mov	r4, r0
 800bfea:	468a      	mov	sl, r1
 800bfec:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800bfee:	f7fc fff9 	bl	8008fe4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800bff2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800bff6:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d036      	beq.n	800c06a <HAL_QSPI_Command+0x86>
 800bffc:	2301      	movs	r3, #1
 800bffe:	2602      	movs	r6, #2
 800c000:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c004:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800c008:	2b01      	cmp	r3, #1
 800c00a:	fa5f f983 	uxtb.w	r9, r3
 800c00e:	d128      	bne.n	800c062 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c010:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c012:	4603      	mov	r3, r0
 800c014:	2120      	movs	r1, #32
 800c016:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c018:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c01a:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c01e:	f8cd 8000 	str.w	r8, [sp]
 800c022:	f7ff ff6b 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c026:	4605      	mov	r5, r0
 800c028:	b9a0      	cbnz	r0, 800c054 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c02a:	4602      	mov	r2, r0
 800c02c:	4651      	mov	r1, sl
 800c02e:	4620      	mov	r0, r4
 800c030:	f7ff fea8 	bl	800bd84 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800c034:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800c038:	b953      	cbnz	r3, 800c050 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c03a:	463b      	mov	r3, r7
 800c03c:	464a      	mov	r2, r9
 800c03e:	4631      	mov	r1, r6
 800c040:	4620      	mov	r0, r4
 800c042:	f8cd 8000 	str.w	r8, [sp]
 800c046:	f7ff ff59 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c04a:	b960      	cbnz	r0, 800c066 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800c050:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800c054:	2300      	movs	r3, #0
 800c056:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800c05a:	4628      	mov	r0, r5
 800c05c:	b002      	add	sp, #8
 800c05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800c062:	4635      	mov	r5, r6
 800c064:	e7f6      	b.n	800c054 <HAL_QSPI_Command+0x70>
 800c066:	4605      	mov	r5, r0
 800c068:	e7f4      	b.n	800c054 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800c06a:	2502      	movs	r5, #2
 800c06c:	e7f5      	b.n	800c05a <HAL_QSPI_Command+0x76>

0800c06e <HAL_QSPI_Transmit>:
{
 800c06e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c072:	4604      	mov	r4, r0
 800c074:	4688      	mov	r8, r1
 800c076:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800c078:	f7fc ffb4 	bl	8008fe4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800c07c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800c080:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c082:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800c084:	2b01      	cmp	r3, #1
 800c086:	d04c      	beq.n	800c122 <HAL_QSPI_Transmit+0xb4>
 800c088:	2301      	movs	r3, #1
 800c08a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c08e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800c092:	2b01      	cmp	r3, #1
 800c094:	b2d8      	uxtb	r0, r3
 800c096:	d142      	bne.n	800c11e <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c098:	2300      	movs	r3, #0
 800c09a:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800c09c:	f1b8 0f00 	cmp.w	r8, #0
 800c0a0:	d038      	beq.n	800c114 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c0a2:	2312      	movs	r3, #18
 800c0a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c0a8:	692b      	ldr	r3, [r5, #16]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c0ae:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800c0b0:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c0b8:	696b      	ldr	r3, [r5, #20]
 800c0ba:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800c0be:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800c0c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c0c2:	b99b      	cbnz	r3, 800c0ec <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c0c4:	4633      	mov	r3, r6
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	2102      	movs	r1, #2
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	9700      	str	r7, [sp, #0]
 800c0ce:	f7ff ff15 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c0d2:	b910      	cbnz	r0, 800c0da <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	2202      	movs	r2, #2
 800c0d8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800c0e6:	b002      	add	sp, #8
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c0ec:	4633      	mov	r3, r6
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	2104      	movs	r1, #4
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	9700      	str	r7, [sp, #0]
 800c0f6:	f7ff ff01 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d1ed      	bne.n	800c0da <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c0fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800c106:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c108:	3301      	adds	r3, #1
 800c10a:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800c10c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c10e:	3b01      	subs	r3, #1
 800c110:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c112:	e7d5      	b.n	800c0c0 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c114:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c116:	f043 0308 	orr.w	r3, r3, #8
 800c11a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800c11c:	e7e0      	b.n	800c0e0 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800c11e:	2002      	movs	r0, #2
 800c120:	e7de      	b.n	800c0e0 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800c122:	2002      	movs	r0, #2
 800c124:	e7df      	b.n	800c0e6 <HAL_QSPI_Transmit+0x78>

0800c126 <HAL_QSPI_Receive>:
{
 800c126:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c12a:	4604      	mov	r4, r0
 800c12c:	4617      	mov	r7, r2
 800c12e:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800c130:	f7fc ff58 	bl	8008fe4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c134:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800c136:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c138:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800c13a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d04f      	beq.n	800c1e2 <HAL_QSPI_Receive+0xbc>
 800c142:	2301      	movs	r3, #1
 800c144:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c148:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	b2d8      	uxtb	r0, r3
 800c150:	d145      	bne.n	800c1de <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c152:	2300      	movs	r3, #0
 800c154:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800c156:	f1b8 0f00 	cmp.w	r8, #0
 800c15a:	d03b      	beq.n	800c1d4 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c15c:	2322      	movs	r3, #34	@ 0x22
 800c15e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c162:	692b      	ldr	r3, [r5, #16]
 800c164:	3301      	adds	r3, #1
 800c166:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c168:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800c16a:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c16e:	3301      	adds	r3, #1
 800c170:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c172:	6969      	ldr	r1, [r5, #20]
 800c174:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800c178:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800c17c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c17e:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800c180:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c182:	b99b      	cbnz	r3, 800c1ac <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c184:	4633      	mov	r3, r6
 800c186:	2201      	movs	r2, #1
 800c188:	2102      	movs	r1, #2
 800c18a:	4620      	mov	r0, r4
 800c18c:	9700      	str	r7, [sp, #0]
 800c18e:	f7ff feb5 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800c192:	b910      	cbnz	r0, 800c19a <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	2202      	movs	r2, #2
 800c198:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800c19a:	2301      	movs	r3, #1
 800c19c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800c1a6:	b002      	add	sp, #8
 800c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c1ac:	4633      	mov	r3, r6
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	2106      	movs	r1, #6
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	9700      	str	r7, [sp, #0]
 800c1b6:	f7ff fea1 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d1ed      	bne.n	800c19a <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c1be:	f895 2020 	ldrb.w	r2, [r5, #32]
 800c1c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c1c4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c1c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800c1cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c1d2:	e7d5      	b.n	800c180 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c1d4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c1d6:	f043 0308 	orr.w	r3, r3, #8
 800c1da:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800c1dc:	e7e0      	b.n	800c1a0 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800c1de:	2002      	movs	r0, #2
 800c1e0:	e7de      	b.n	800c1a0 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800c1e2:	2002      	movs	r0, #2
 800c1e4:	e7df      	b.n	800c1a6 <HAL_QSPI_Receive+0x80>

0800c1e6 <HAL_QSPI_AutoPolling>:
{
 800c1e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	461f      	mov	r7, r3
 800c1ee:	4689      	mov	r9, r1
 800c1f0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800c1f2:	f7fc fef7 	bl	8008fe4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800c1f6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800c1fa:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d041      	beq.n	800c284 <HAL_QSPI_AutoPolling+0x9e>
 800c200:	2301      	movs	r3, #1
 800c202:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c206:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	fa5f f883 	uxtb.w	r8, r3
 800c210:	d136      	bne.n	800c280 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c212:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c214:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c216:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c218:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c21a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c21e:	4603      	mov	r3, r0
 800c220:	9700      	str	r7, [sp, #0]
 800c222:	4620      	mov	r0, r4
 800c224:	f7ff fe6a 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c228:	bb20      	cbnz	r0, 800c274 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c22a:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c22c:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c22e:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c230:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c232:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c234:	686b      	ldr	r3, [r5, #4]
 800c236:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c238:	68ab      	ldr	r3, [r5, #8]
 800c23a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c23c:	6813      	ldr	r3, [r2, #0]
 800c23e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800c242:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c244:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c246:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c24a:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c24c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800c250:	68eb      	ldr	r3, [r5, #12]
 800c252:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c256:	f7ff fd95 	bl	800bd84 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c25a:	4633      	mov	r3, r6
 800c25c:	4642      	mov	r2, r8
 800c25e:	2108      	movs	r1, #8
 800c260:	4620      	mov	r0, r4
 800c262:	9700      	str	r7, [sp, #0]
 800c264:	f7ff fe4a 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c268:	b920      	cbnz	r0, 800c274 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	2208      	movs	r2, #8
 800c26e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800c270:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800c274:	2300      	movs	r3, #0
 800c276:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800c27a:	b003      	add	sp, #12
 800c27c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800c280:	2002      	movs	r0, #2
 800c282:	e7f7      	b.n	800c274 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800c284:	2002      	movs	r0, #2
 800c286:	e7f8      	b.n	800c27a <HAL_QSPI_AutoPolling+0x94>

0800c288 <HAL_QSPI_MemoryMapped>:
{
 800c288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c28a:	4604      	mov	r4, r0
 800c28c:	4616      	mov	r6, r2
 800c28e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800c290:	f7fc fea8 	bl	8008fe4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800c294:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800c298:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800c29a:	2a01      	cmp	r2, #1
 800c29c:	d033      	beq.n	800c306 <HAL_QSPI_MemoryMapped+0x7e>
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c2a4:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800c2a8:	2a01      	cmp	r2, #1
 800c2aa:	d12a      	bne.n	800c302 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c2ac:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800c2ae:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c2b0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c2b2:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800c2b4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c2b8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c2ba:	9100      	str	r1, [sp, #0]
 800c2bc:	2120      	movs	r1, #32
 800c2be:	f7ff fe1d 	bl	800befc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	b9b8      	cbnz	r0, 800c2f6 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	6872      	ldr	r2, [r6, #4]
 800c2ca:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800c2cc:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800c2ce:	f020 0008 	bic.w	r0, r0, #8
 800c2d2:	ea40 0002 	orr.w	r0, r0, r2
 800c2d6:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800c2d8:	d107      	bne.n	800c2ea <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800c2da:	6832      	ldr	r2, [r6, #0]
 800c2dc:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800c2de:	2210      	movs	r2, #16
 800c2e0:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800c2e8:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800c2ea:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	f7ff fd47 	bl	800bd84 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	b003      	add	sp, #12
 800c300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800c302:	2502      	movs	r5, #2
 800c304:	e7f7      	b.n	800c2f6 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800c306:	2502      	movs	r5, #2
 800c308:	e7f8      	b.n	800c2fc <HAL_QSPI_MemoryMapped+0x74>
	...

0800c30c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c30e:	4604      	mov	r4, r0
 800c310:	2800      	cmp	r0, #0
 800c312:	d074      	beq.n	800c3fe <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c314:	6803      	ldr	r3, [r0, #0]
 800c316:	07d8      	lsls	r0, r3, #31
 800c318:	d45e      	bmi.n	800c3d8 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	0799      	lsls	r1, r3, #30
 800c31e:	f100 80ad 	bmi.w	800c47c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c322:	6823      	ldr	r3, [r4, #0]
 800c324:	06da      	lsls	r2, r3, #27
 800c326:	d527      	bpl.n	800c378 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c328:	4a9c      	ldr	r2, [pc, #624]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
 800c32a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c32c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c32e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c332:	2b08      	cmp	r3, #8
 800c334:	d007      	beq.n	800c346 <HAL_RCC_OscConfig+0x3a>
 800c336:	2b18      	cmp	r3, #24
 800c338:	f040 8103 	bne.w	800c542 <HAL_RCC_OscConfig+0x236>
 800c33c:	f001 0303 	and.w	r3, r1, #3
 800c340:	2b01      	cmp	r3, #1
 800c342:	f040 80fe 	bne.w	800c542 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c346:	6813      	ldr	r3, [r2, #0]
 800c348:	05db      	lsls	r3, r3, #23
 800c34a:	d502      	bpl.n	800c352 <HAL_RCC_OscConfig+0x46>
 800c34c:	69e3      	ldr	r3, [r4, #28]
 800c34e:	2b80      	cmp	r3, #128	@ 0x80
 800c350:	d155      	bne.n	800c3fe <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c352:	f7fc fe5f 	bl	8009014 <HAL_GetREVID>
 800c356:	f241 0303 	movw	r3, #4099	@ 0x1003
 800c35a:	6a21      	ldr	r1, [r4, #32]
 800c35c:	4298      	cmp	r0, r3
 800c35e:	4b8f      	ldr	r3, [pc, #572]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
 800c360:	f200 80e8 	bhi.w	800c534 <HAL_RCC_OscConfig+0x228>
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	2920      	cmp	r1, #32
 800c368:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800c36c:	bf0c      	ite	eq
 800c36e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800c372:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800c376:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c378:	6823      	ldr	r3, [r4, #0]
 800c37a:	0719      	lsls	r1, r3, #28
 800c37c:	f100 8123 	bmi.w	800c5c6 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	069a      	lsls	r2, r3, #26
 800c384:	f100 8144 	bmi.w	800c610 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	075d      	lsls	r5, r3, #29
 800c38c:	d51e      	bpl.n	800c3cc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c38e:	4d84      	ldr	r5, [pc, #528]	@ (800c5a0 <HAL_RCC_OscConfig+0x294>)
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c396:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c398:	f7fc fe24 	bl	8008fe4 <HAL_GetTick>
 800c39c:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c39e:	682b      	ldr	r3, [r5, #0]
 800c3a0:	05da      	lsls	r2, r3, #23
 800c3a2:	f140 815a 	bpl.w	800c65a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	4d7c      	ldr	r5, [pc, #496]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	f040 815c 	bne.w	800c668 <HAL_RCC_OscConfig+0x35c>
 800c3b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c3b2:	f043 0301 	orr.w	r3, r3, #1
 800c3b6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3b8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800c3bc:	f7fc fe12 	bl	8008fe4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3c0:	4e76      	ldr	r6, [pc, #472]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800c3c2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3c4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800c3c6:	079b      	lsls	r3, r3, #30
 800c3c8:	f140 8174 	bpl.w	800c6b4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c3cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c3ce:	2900      	cmp	r1, #0
 800c3d0:	f040 8177 	bne.w	800c6c2 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e02b      	b.n	800c430 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3d8:	4a70      	ldr	r2, [pc, #448]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
 800c3da:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c3dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c3e2:	2b10      	cmp	r3, #16
 800c3e4:	d005      	beq.n	800c3f2 <HAL_RCC_OscConfig+0xe6>
 800c3e6:	2b18      	cmp	r3, #24
 800c3e8:	d10b      	bne.n	800c402 <HAL_RCC_OscConfig+0xf6>
 800c3ea:	f001 0303 	and.w	r3, r1, #3
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d107      	bne.n	800c402 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3f2:	6813      	ldr	r3, [r2, #0]
 800c3f4:	039a      	lsls	r2, r3, #14
 800c3f6:	d590      	bpl.n	800c31a <HAL_RCC_OscConfig+0xe>
 800c3f8:	6863      	ldr	r3, [r4, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d18d      	bne.n	800c31a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800c3fe:	2001      	movs	r0, #1
 800c400:	e016      	b.n	800c430 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c402:	6863      	ldr	r3, [r4, #4]
 800c404:	4d65      	ldr	r5, [pc, #404]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
 800c406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c40a:	d112      	bne.n	800c432 <HAL_RCC_OscConfig+0x126>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c412:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c414:	f7fc fde6 	bl	8008fe4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c418:	4e60      	ldr	r6, [pc, #384]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800c41a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c41c:	6833      	ldr	r3, [r6, #0]
 800c41e:	039b      	lsls	r3, r3, #14
 800c420:	f53f af7b 	bmi.w	800c31a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c424:	f7fc fdde 	bl	8008fe4 <HAL_GetTick>
 800c428:	1b40      	subs	r0, r0, r5
 800c42a:	2864      	cmp	r0, #100	@ 0x64
 800c42c:	d9f6      	bls.n	800c41c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800c42e:	2003      	movs	r0, #3
}
 800c430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c432:	b9a3      	cbnz	r3, 800c45e <HAL_RCC_OscConfig+0x152>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	682b      	ldr	r3, [r5, #0]
 800c43e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c442:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c444:	f7fc fdce 	bl	8008fe4 <HAL_GetTick>
 800c448:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c44a:	682b      	ldr	r3, [r5, #0]
 800c44c:	039f      	lsls	r7, r3, #14
 800c44e:	f57f af64 	bpl.w	800c31a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c452:	f7fc fdc7 	bl	8008fe4 <HAL_GetTick>
 800c456:	1b80      	subs	r0, r0, r6
 800c458:	2864      	cmp	r0, #100	@ 0x64
 800c45a:	d9f6      	bls.n	800c44a <HAL_RCC_OscConfig+0x13e>
 800c45c:	e7e7      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c45e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c462:	682b      	ldr	r3, [r5, #0]
 800c464:	d103      	bne.n	800c46e <HAL_RCC_OscConfig+0x162>
 800c466:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c46a:	602b      	str	r3, [r5, #0]
 800c46c:	e7ce      	b.n	800c40c <HAL_RCC_OscConfig+0x100>
 800c46e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c47a:	e7ca      	b.n	800c412 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c47c:	4947      	ldr	r1, [pc, #284]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
 800c47e:	68e2      	ldr	r2, [r4, #12]
 800c480:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c482:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c484:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800c488:	d003      	beq.n	800c492 <HAL_RCC_OscConfig+0x186>
 800c48a:	2b18      	cmp	r3, #24
 800c48c:	d12a      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x1d8>
 800c48e:	0780      	lsls	r0, r0, #30
 800c490:	d128      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c492:	680b      	ldr	r3, [r1, #0]
 800c494:	075b      	lsls	r3, r3, #29
 800c496:	d501      	bpl.n	800c49c <HAL_RCC_OscConfig+0x190>
 800c498:	2a00      	cmp	r2, #0
 800c49a:	d0b0      	beq.n	800c3fe <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c49c:	4d3f      	ldr	r5, [pc, #252]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
 800c49e:	682b      	ldr	r3, [r5, #0]
 800c4a0:	f023 0319 	bic.w	r3, r3, #25
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c4a8:	f7fc fd9c 	bl	8008fe4 <HAL_GetTick>
 800c4ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4ae:	682b      	ldr	r3, [r5, #0]
 800c4b0:	075f      	lsls	r7, r3, #29
 800c4b2:	d511      	bpl.n	800c4d8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4b4:	f7fc fdae 	bl	8009014 <HAL_GetREVID>
 800c4b8:	f241 0303 	movw	r3, #4099	@ 0x1003
 800c4bc:	6922      	ldr	r2, [r4, #16]
 800c4be:	4298      	cmp	r0, r3
 800c4c0:	686b      	ldr	r3, [r5, #4]
 800c4c2:	d822      	bhi.n	800c50a <HAL_RCC_OscConfig+0x1fe>
 800c4c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c4c8:	2a40      	cmp	r2, #64	@ 0x40
 800c4ca:	bf0c      	ite	eq
 800c4cc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800c4d0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800c4d4:	606b      	str	r3, [r5, #4]
 800c4d6:	e724      	b.n	800c322 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4d8:	f7fc fd84 	bl	8008fe4 <HAL_GetTick>
 800c4dc:	1b80      	subs	r0, r0, r6
 800c4de:	2802      	cmp	r0, #2
 800c4e0:	d9e5      	bls.n	800c4ae <HAL_RCC_OscConfig+0x1a2>
 800c4e2:	e7a4      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c4e4:	4d2d      	ldr	r5, [pc, #180]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c4e6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c4e8:	b1a2      	cbz	r2, 800c514 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c4ea:	f023 0319 	bic.w	r3, r3, #25
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c4f2:	f7fc fd77 	bl	8008fe4 <HAL_GetTick>
 800c4f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	0758      	lsls	r0, r3, #29
 800c4fc:	d4da      	bmi.n	800c4b4 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4fe:	f7fc fd71 	bl	8008fe4 <HAL_GetTick>
 800c502:	1b80      	subs	r0, r0, r6
 800c504:	2802      	cmp	r0, #2
 800c506:	d9f7      	bls.n	800c4f8 <HAL_RCC_OscConfig+0x1ec>
 800c508:	e791      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c50a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c50e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c512:	e7df      	b.n	800c4d4 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800c514:	f023 0301 	bic.w	r3, r3, #1
 800c518:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c51a:	f7fc fd63 	bl	8008fe4 <HAL_GetTick>
 800c51e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	0759      	lsls	r1, r3, #29
 800c524:	f57f aefd 	bpl.w	800c322 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c528:	f7fc fd5c 	bl	8008fe4 <HAL_GetTick>
 800c52c:	1b80      	subs	r0, r0, r6
 800c52e:	2802      	cmp	r0, #2
 800c530:	d9f6      	bls.n	800c520 <HAL_RCC_OscConfig+0x214>
 800c532:	e77c      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c534:	68da      	ldr	r2, [r3, #12]
 800c536:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800c53a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c53e:	60da      	str	r2, [r3, #12]
 800c540:	e71a      	b.n	800c378 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c542:	69e3      	ldr	r3, [r4, #28]
 800c544:	4d15      	ldr	r5, [pc, #84]	@ (800c59c <HAL_RCC_OscConfig+0x290>)
 800c546:	b36b      	cbz	r3, 800c5a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c54e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c550:	f7fc fd48 	bl	8008fe4 <HAL_GetTick>
 800c554:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c556:	682b      	ldr	r3, [r5, #0]
 800c558:	05df      	lsls	r7, r3, #23
 800c55a:	d511      	bpl.n	800c580 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c55c:	f7fc fd5a 	bl	8009014 <HAL_GetREVID>
 800c560:	f241 0303 	movw	r3, #4099	@ 0x1003
 800c564:	6a22      	ldr	r2, [r4, #32]
 800c566:	4298      	cmp	r0, r3
 800c568:	d810      	bhi.n	800c58c <HAL_RCC_OscConfig+0x280>
 800c56a:	686b      	ldr	r3, [r5, #4]
 800c56c:	2a20      	cmp	r2, #32
 800c56e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c572:	bf0c      	ite	eq
 800c574:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800c578:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800c57c:	606b      	str	r3, [r5, #4]
 800c57e:	e6fb      	b.n	800c378 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c580:	f7fc fd30 	bl	8008fe4 <HAL_GetTick>
 800c584:	1b80      	subs	r0, r0, r6
 800c586:	2802      	cmp	r0, #2
 800c588:	d9e5      	bls.n	800c556 <HAL_RCC_OscConfig+0x24a>
 800c58a:	e750      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c58c:	68eb      	ldr	r3, [r5, #12]
 800c58e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800c592:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c596:	60eb      	str	r3, [r5, #12]
 800c598:	e6ee      	b.n	800c378 <HAL_RCC_OscConfig+0x6c>
 800c59a:	bf00      	nop
 800c59c:	58024400 	.word	0x58024400
 800c5a0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c5ac:	f7fc fd1a 	bl	8008fe4 <HAL_GetTick>
 800c5b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c5b2:	682b      	ldr	r3, [r5, #0]
 800c5b4:	05d8      	lsls	r0, r3, #23
 800c5b6:	f57f aedf 	bpl.w	800c378 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c5ba:	f7fc fd13 	bl	8008fe4 <HAL_GetTick>
 800c5be:	1b80      	subs	r0, r0, r6
 800c5c0:	2802      	cmp	r0, #2
 800c5c2:	d9f6      	bls.n	800c5b2 <HAL_RCC_OscConfig+0x2a6>
 800c5c4:	e733      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c5c6:	6963      	ldr	r3, [r4, #20]
 800c5c8:	4da5      	ldr	r5, [pc, #660]	@ (800c860 <HAL_RCC_OscConfig+0x554>)
 800c5ca:	b183      	cbz	r3, 800c5ee <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800c5cc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800c5ce:	f043 0301 	orr.w	r3, r3, #1
 800c5d2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800c5d4:	f7fc fd06 	bl	8008fe4 <HAL_GetTick>
 800c5d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c5da:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800c5dc:	079b      	lsls	r3, r3, #30
 800c5de:	f53f aecf 	bmi.w	800c380 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5e2:	f7fc fcff 	bl	8008fe4 <HAL_GetTick>
 800c5e6:	1b80      	subs	r0, r0, r6
 800c5e8:	2802      	cmp	r0, #2
 800c5ea:	d9f6      	bls.n	800c5da <HAL_RCC_OscConfig+0x2ce>
 800c5ec:	e71f      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800c5ee:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800c5f0:	f023 0301 	bic.w	r3, r3, #1
 800c5f4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800c5f6:	f7fc fcf5 	bl	8008fe4 <HAL_GetTick>
 800c5fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c5fc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800c5fe:	079f      	lsls	r7, r3, #30
 800c600:	f57f aebe 	bpl.w	800c380 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c604:	f7fc fcee 	bl	8008fe4 <HAL_GetTick>
 800c608:	1b80      	subs	r0, r0, r6
 800c60a:	2802      	cmp	r0, #2
 800c60c:	d9f6      	bls.n	800c5fc <HAL_RCC_OscConfig+0x2f0>
 800c60e:	e70e      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c610:	69a3      	ldr	r3, [r4, #24]
 800c612:	4d93      	ldr	r5, [pc, #588]	@ (800c860 <HAL_RCC_OscConfig+0x554>)
 800c614:	b183      	cbz	r3, 800c638 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800c616:	682b      	ldr	r3, [r5, #0]
 800c618:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c61c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800c61e:	f7fc fce1 	bl	8008fe4 <HAL_GetTick>
 800c622:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	0498      	lsls	r0, r3, #18
 800c628:	f53f aeae 	bmi.w	800c388 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c62c:	f7fc fcda 	bl	8008fe4 <HAL_GetTick>
 800c630:	1b80      	subs	r0, r0, r6
 800c632:	2802      	cmp	r0, #2
 800c634:	d9f6      	bls.n	800c624 <HAL_RCC_OscConfig+0x318>
 800c636:	e6fa      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c63e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800c640:	f7fc fcd0 	bl	8008fe4 <HAL_GetTick>
 800c644:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c646:	682b      	ldr	r3, [r5, #0]
 800c648:	0499      	lsls	r1, r3, #18
 800c64a:	f57f ae9d 	bpl.w	800c388 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c64e:	f7fc fcc9 	bl	8008fe4 <HAL_GetTick>
 800c652:	1b80      	subs	r0, r0, r6
 800c654:	2802      	cmp	r0, #2
 800c656:	d9f6      	bls.n	800c646 <HAL_RCC_OscConfig+0x33a>
 800c658:	e6e9      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c65a:	f7fc fcc3 	bl	8008fe4 <HAL_GetTick>
 800c65e:	1b80      	subs	r0, r0, r6
 800c660:	2864      	cmp	r0, #100	@ 0x64
 800c662:	f67f ae9c 	bls.w	800c39e <HAL_RCC_OscConfig+0x92>
 800c666:	e6e2      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c668:	b9b3      	cbnz	r3, 800c698 <HAL_RCC_OscConfig+0x38c>
 800c66a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c66c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c670:	f023 0301 	bic.w	r3, r3, #1
 800c674:	672b      	str	r3, [r5, #112]	@ 0x70
 800c676:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c678:	f023 0304 	bic.w	r3, r3, #4
 800c67c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800c67e:	f7fc fcb1 	bl	8008fe4 <HAL_GetTick>
 800c682:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c684:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c686:	0798      	lsls	r0, r3, #30
 800c688:	f57f aea0 	bpl.w	800c3cc <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c68c:	f7fc fcaa 	bl	8008fe4 <HAL_GetTick>
 800c690:	1b80      	subs	r0, r0, r6
 800c692:	42b8      	cmp	r0, r7
 800c694:	d9f6      	bls.n	800c684 <HAL_RCC_OscConfig+0x378>
 800c696:	e6ca      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c698:	2b05      	cmp	r3, #5
 800c69a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c69c:	d103      	bne.n	800c6a6 <HAL_RCC_OscConfig+0x39a>
 800c69e:	f043 0304 	orr.w	r3, r3, #4
 800c6a2:	672b      	str	r3, [r5, #112]	@ 0x70
 800c6a4:	e684      	b.n	800c3b0 <HAL_RCC_OscConfig+0xa4>
 800c6a6:	f023 0301 	bic.w	r3, r3, #1
 800c6aa:	672b      	str	r3, [r5, #112]	@ 0x70
 800c6ac:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c6ae:	f023 0304 	bic.w	r3, r3, #4
 800c6b2:	e680      	b.n	800c3b6 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6b4:	f7fc fc96 	bl	8008fe4 <HAL_GetTick>
 800c6b8:	1b40      	subs	r0, r0, r5
 800c6ba:	42b8      	cmp	r0, r7
 800c6bc:	f67f ae82 	bls.w	800c3c4 <HAL_RCC_OscConfig+0xb8>
 800c6c0:	e6b5      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c6c2:	4d67      	ldr	r5, [pc, #412]	@ (800c860 <HAL_RCC_OscConfig+0x554>)
 800c6c4:	692b      	ldr	r3, [r5, #16]
 800c6c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6ca:	2b18      	cmp	r3, #24
 800c6cc:	d07a      	beq.n	800c7c4 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800c6ce:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c6d0:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800c6d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c6d6:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c6d8:	d167      	bne.n	800c7aa <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800c6da:	f7fc fc83 	bl	8008fe4 <HAL_GetTick>
 800c6de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c6e0:	682b      	ldr	r3, [r5, #0]
 800c6e2:	0199      	lsls	r1, r3, #6
 800c6e4:	d45b      	bmi.n	800c79e <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c6e6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800c6e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c6ea:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800c6ee:	f023 0303 	bic.w	r3, r3, #3
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c6f6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c6fa:	62ab      	str	r3, [r5, #40]	@ 0x28
 800c6fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c700:	3b01      	subs	r3, #1
 800c702:	3a01      	subs	r2, #1
 800c704:	025b      	lsls	r3, r3, #9
 800c706:	0412      	lsls	r2, r2, #16
 800c708:	b29b      	uxth	r3, r3
 800c70a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c70e:	4313      	orrs	r3, r2
 800c710:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c712:	3a01      	subs	r2, #1
 800c714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c718:	4313      	orrs	r3, r2
 800c71a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c71c:	3a01      	subs	r2, #1
 800c71e:	0612      	lsls	r2, r2, #24
 800c720:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c724:	4313      	orrs	r3, r2
 800c726:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800c728:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c72a:	f023 0301 	bic.w	r3, r3, #1
 800c72e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c730:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c732:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800c734:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c738:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c73c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c740:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c742:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c744:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c746:	f023 030c 	bic.w	r3, r3, #12
 800c74a:	4313      	orrs	r3, r2
 800c74c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c74e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c750:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800c752:	f023 0302 	bic.w	r3, r3, #2
 800c756:	4313      	orrs	r3, r2
 800c758:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c75a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c75c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c760:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c762:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c768:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c76a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c76c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c770:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800c772:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c774:	f043 0301 	orr.w	r3, r3, #1
 800c778:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800c77a:	682b      	ldr	r3, [r5, #0]
 800c77c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c780:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c782:	f7fc fc2f 	bl	8008fe4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c786:	4d36      	ldr	r5, [pc, #216]	@ (800c860 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800c788:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c78a:	682b      	ldr	r3, [r5, #0]
 800c78c:	019a      	lsls	r2, r3, #6
 800c78e:	f53f ae21 	bmi.w	800c3d4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c792:	f7fc fc27 	bl	8008fe4 <HAL_GetTick>
 800c796:	1b00      	subs	r0, r0, r4
 800c798:	2802      	cmp	r0, #2
 800c79a:	d9f6      	bls.n	800c78a <HAL_RCC_OscConfig+0x47e>
 800c79c:	e647      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c79e:	f7fc fc21 	bl	8008fe4 <HAL_GetTick>
 800c7a2:	1b80      	subs	r0, r0, r6
 800c7a4:	2802      	cmp	r0, #2
 800c7a6:	d99b      	bls.n	800c6e0 <HAL_RCC_OscConfig+0x3d4>
 800c7a8:	e641      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800c7aa:	f7fc fc1b 	bl	8008fe4 <HAL_GetTick>
 800c7ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	019b      	lsls	r3, r3, #6
 800c7b4:	f57f ae0e 	bpl.w	800c3d4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7b8:	f7fc fc14 	bl	8008fe4 <HAL_GetTick>
 800c7bc:	1b00      	subs	r0, r0, r4
 800c7be:	2802      	cmp	r0, #2
 800c7c0:	d9f6      	bls.n	800c7b0 <HAL_RCC_OscConfig+0x4a4>
 800c7c2:	e634      	b.n	800c42e <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7c4:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c7c6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c7c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7ca:	f43f ae18 	beq.w	800c3fe <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7ce:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c7d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c7d4:	4281      	cmp	r1, r0
 800c7d6:	f47f ae12 	bne.w	800c3fe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c7da:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c7de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c7e0:	428a      	cmp	r2, r1
 800c7e2:	f47f ae0c 	bne.w	800c3fe <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c7e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800c7e8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800c7ec:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c7ee:	4291      	cmp	r1, r2
 800c7f0:	f47f ae05 	bne.w	800c3fe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c7f4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800c7f6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800c7fa:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c7fc:	4291      	cmp	r1, r2
 800c7fe:	f47f adfe 	bne.w	800c3fe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c802:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c804:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800c808:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c80a:	4291      	cmp	r1, r2
 800c80c:	f47f adf7 	bne.w	800c3fe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c810:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c812:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c816:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c818:	4293      	cmp	r3, r2
 800c81a:	f47f adf0 	bne.w	800c3fe <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c81e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c820:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c822:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c826:	429a      	cmp	r2, r3
 800c828:	f43f add4 	beq.w	800c3d4 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800c82c:	4d0c      	ldr	r5, [pc, #48]	@ (800c860 <HAL_RCC_OscConfig+0x554>)
 800c82e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c830:	f023 0301 	bic.w	r3, r3, #1
 800c834:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800c836:	f7fc fbd5 	bl	8008fe4 <HAL_GetTick>
 800c83a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c83c:	f7fc fbd2 	bl	8008fe4 <HAL_GetTick>
 800c840:	42b0      	cmp	r0, r6
 800c842:	d0fb      	beq.n	800c83c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c844:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c846:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800c848:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c84c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c850:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c854:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800c856:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c858:	f043 0301 	orr.w	r3, r3, #1
 800c85c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800c85e:	e5b9      	b.n	800c3d4 <HAL_RCC_OscConfig+0xc8>
 800c860:	58024400 	.word	0x58024400

0800c864 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	4c23      	ldr	r4, [pc, #140]	@ (800c8f4 <HAL_RCC_MCOConfig+0x90>)
 800c868:	b088      	sub	sp, #32
 800c86a:	460e      	mov	r6, r1
 800c86c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800c86e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800c872:	b9f8      	cbnz	r0, 800c8b4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800c874:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c878:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c87c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800c87e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c882:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c886:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800c888:	f003 0301 	and.w	r3, r3, #1
 800c88c:	9301      	str	r3, [sp, #4]
 800c88e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c890:	2302      	movs	r3, #2
 800c892:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c896:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c898:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c89c:	4816      	ldr	r0, [pc, #88]	@ (800c8f8 <HAL_RCC_MCOConfig+0x94>)
 800c89e:	f7fd fa27 	bl	8009cf0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800c8a2:	6923      	ldr	r3, [r4, #16]
 800c8a4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800c8a8:	ea43 0106 	orr.w	r1, r3, r6
 800c8ac:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c8ae:	6121      	str	r1, [r4, #16]
  }
}
 800c8b0:	b008      	add	sp, #32
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800c8b4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8bc:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c8be:	480f      	ldr	r0, [pc, #60]	@ (800c8fc <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800c8c0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c8c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800c8c8:	f003 0304 	and.w	r3, r3, #4
 800c8cc:	9302      	str	r3, [sp, #8]
 800c8ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c8dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c8de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c8e0:	f7fd fa06 	bl	8009cf0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800c8ea:	ea43 0106 	orr.w	r1, r3, r6
 800c8ee:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800c8f2:	e7dc      	b.n	800c8ae <HAL_RCC_MCOConfig+0x4a>
 800c8f4:	58024400 	.word	0x58024400
 800c8f8:	58020000 	.word	0x58020000
 800c8fc:	58020800 	.word	0x58020800

0800c900 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c900:	4b49      	ldr	r3, [pc, #292]	@ (800ca28 <HAL_RCC_GetSysClockFreq+0x128>)
 800c902:	691a      	ldr	r2, [r3, #16]
 800c904:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c908:	2a10      	cmp	r2, #16
{
 800c90a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c90c:	f000 8088 	beq.w	800ca20 <HAL_RCC_GetSysClockFreq+0x120>
 800c910:	2a18      	cmp	r2, #24
 800c912:	d00c      	beq.n	800c92e <HAL_RCC_GetSysClockFreq+0x2e>
 800c914:	2a00      	cmp	r2, #0
 800c916:	f040 8085 	bne.w	800ca24 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	4843      	ldr	r0, [pc, #268]	@ (800ca2c <HAL_RCC_GetSysClockFreq+0x12c>)
 800c91e:	f012 0f20 	tst.w	r2, #32
 800c922:	d003      	beq.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c92a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800c92c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c92e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c930:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c932:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800c934:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c938:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c93c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800c93e:	d0f5      	beq.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c940:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c944:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c948:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c94c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c950:	4362      	muls	r2, r4
 800c952:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c956:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c95c:	ee06 2a90 	vmov	s13, r2
 800c960:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800c964:	d04e      	beq.n	800ca04 <HAL_RCC_GetSysClockFreq+0x104>
 800c966:	2902      	cmp	r1, #2
 800c968:	d03e      	beq.n	800c9e8 <HAL_RCC_GetSysClockFreq+0xe8>
 800c96a:	2900      	cmp	r1, #0
 800c96c:	d14a      	bne.n	800ca04 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	0692      	lsls	r2, r2, #26
 800c972:	d527      	bpl.n	800c9c4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c974:	6819      	ldr	r1, [r3, #0]
 800c976:	4a2d      	ldr	r2, [pc, #180]	@ (800ca2c <HAL_RCC_GetSysClockFreq+0x12c>)
 800c978:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c97e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c984:	ee07 2a90 	vmov	s15, r2
 800c988:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c98c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c990:	ee07 3a10 	vmov	s14, r3
 800c994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c998:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c99c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c9a0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c9a4:	4b20      	ldr	r3, [pc, #128]	@ (800ca28 <HAL_RCC_GetSysClockFreq+0x128>)
 800c9a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c9ac:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c9ae:	ee07 3a10 	vmov	s14, r3
 800c9b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800c9b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c9ba:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c9be:	ee17 0a90 	vmov	r0, s15
 800c9c2:	e7b3      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ca:	ee07 3a90 	vmov	s15, r3
 800c9ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c9da:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ca30 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9de:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c9e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800c9e6:	e7dd      	b.n	800c9a4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c9fe:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800ca34 <HAL_RCC_GetSysClockFreq+0x134>
 800ca02:	e7ec      	b.n	800c9de <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca16:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ca1a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800ca38 <HAL_RCC_GetSysClockFreq+0x138>
 800ca1e:	e7de      	b.n	800c9de <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca20:	4806      	ldr	r0, [pc, #24]	@ (800ca3c <HAL_RCC_GetSysClockFreq+0x13c>)
 800ca22:	e783      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800ca24:	4806      	ldr	r0, [pc, #24]	@ (800ca40 <HAL_RCC_GetSysClockFreq+0x140>)
 800ca26:	e781      	b.n	800c92c <HAL_RCC_GetSysClockFreq+0x2c>
 800ca28:	58024400 	.word	0x58024400
 800ca2c:	03d09000 	.word	0x03d09000
 800ca30:	4c742400 	.word	0x4c742400
 800ca34:	4bbebc20 	.word	0x4bbebc20
 800ca38:	4a742400 	.word	0x4a742400
 800ca3c:	017d7840 	.word	0x017d7840
 800ca40:	003d0900 	.word	0x003d0900

0800ca44 <HAL_RCC_ClockConfig>:
{
 800ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca48:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	b910      	cbnz	r0, 800ca54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800ca4e:	2001      	movs	r0, #1
}
 800ca50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca54:	4a88      	ldr	r2, [pc, #544]	@ (800cc78 <HAL_RCC_ClockConfig+0x234>)
 800ca56:	6813      	ldr	r3, [r2, #0]
 800ca58:	f003 030f 	and.w	r3, r3, #15
 800ca5c:	428b      	cmp	r3, r1
 800ca5e:	f0c0 8093 	bcc.w	800cb88 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	075f      	lsls	r7, r3, #29
 800ca66:	f100 809b 	bmi.w	800cba0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca6a:	071e      	lsls	r6, r3, #28
 800ca6c:	d50b      	bpl.n	800ca86 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ca6e:	4983      	ldr	r1, [pc, #524]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800ca70:	6960      	ldr	r0, [r4, #20]
 800ca72:	69ca      	ldr	r2, [r1, #28]
 800ca74:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ca78:	4290      	cmp	r0, r2
 800ca7a:	d904      	bls.n	800ca86 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ca7c:	69ca      	ldr	r2, [r1, #28]
 800ca7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800ca82:	4302      	orrs	r2, r0
 800ca84:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca86:	06d8      	lsls	r0, r3, #27
 800ca88:	d50b      	bpl.n	800caa2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ca8a:	497c      	ldr	r1, [pc, #496]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800ca8c:	69a0      	ldr	r0, [r4, #24]
 800ca8e:	69ca      	ldr	r2, [r1, #28]
 800ca90:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ca94:	4290      	cmp	r0, r2
 800ca96:	d904      	bls.n	800caa2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ca98:	69ca      	ldr	r2, [r1, #28]
 800ca9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ca9e:	4302      	orrs	r2, r0
 800caa0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800caa2:	0699      	lsls	r1, r3, #26
 800caa4:	d50b      	bpl.n	800cabe <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800caa6:	4975      	ldr	r1, [pc, #468]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800caa8:	69e0      	ldr	r0, [r4, #28]
 800caaa:	6a0a      	ldr	r2, [r1, #32]
 800caac:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800cab0:	4290      	cmp	r0, r2
 800cab2:	d904      	bls.n	800cabe <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cab4:	6a0a      	ldr	r2, [r1, #32]
 800cab6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800caba:	4302      	orrs	r2, r0
 800cabc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cabe:	079a      	lsls	r2, r3, #30
 800cac0:	d50b      	bpl.n	800cada <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cac2:	496e      	ldr	r1, [pc, #440]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cac4:	68e0      	ldr	r0, [r4, #12]
 800cac6:	698a      	ldr	r2, [r1, #24]
 800cac8:	f002 020f 	and.w	r2, r2, #15
 800cacc:	4290      	cmp	r0, r2
 800cace:	d904      	bls.n	800cada <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cad0:	698a      	ldr	r2, [r1, #24]
 800cad2:	f022 020f 	bic.w	r2, r2, #15
 800cad6:	4302      	orrs	r2, r0
 800cad8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cada:	07df      	lsls	r7, r3, #31
 800cadc:	d46e      	bmi.n	800cbbc <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	079e      	lsls	r6, r3, #30
 800cae2:	f100 80a1 	bmi.w	800cc28 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cae6:	4964      	ldr	r1, [pc, #400]	@ (800cc78 <HAL_RCC_ClockConfig+0x234>)
 800cae8:	680a      	ldr	r2, [r1, #0]
 800caea:	f002 020f 	and.w	r2, r2, #15
 800caee:	42aa      	cmp	r2, r5
 800caf0:	f200 80a8 	bhi.w	800cc44 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800caf4:	0758      	lsls	r0, r3, #29
 800caf6:	f100 80b1 	bmi.w	800cc5c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cafa:	0719      	lsls	r1, r3, #28
 800cafc:	d50b      	bpl.n	800cb16 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cafe:	495f      	ldr	r1, [pc, #380]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cb00:	6960      	ldr	r0, [r4, #20]
 800cb02:	69ca      	ldr	r2, [r1, #28]
 800cb04:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800cb08:	4290      	cmp	r0, r2
 800cb0a:	d204      	bcs.n	800cb16 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cb0c:	69ca      	ldr	r2, [r1, #28]
 800cb0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800cb12:	4302      	orrs	r2, r0
 800cb14:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb16:	06da      	lsls	r2, r3, #27
 800cb18:	d50b      	bpl.n	800cb32 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cb1a:	4958      	ldr	r1, [pc, #352]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cb1c:	69a0      	ldr	r0, [r4, #24]
 800cb1e:	69ca      	ldr	r2, [r1, #28]
 800cb20:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800cb24:	4290      	cmp	r0, r2
 800cb26:	d204      	bcs.n	800cb32 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cb28:	69ca      	ldr	r2, [r1, #28]
 800cb2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cb2e:	4302      	orrs	r2, r0
 800cb30:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cb32:	069b      	lsls	r3, r3, #26
 800cb34:	d50b      	bpl.n	800cb4e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cb36:	4a51      	ldr	r2, [pc, #324]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cb38:	69e1      	ldr	r1, [r4, #28]
 800cb3a:	6a13      	ldr	r3, [r2, #32]
 800cb3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cb40:	4299      	cmp	r1, r3
 800cb42:	d204      	bcs.n	800cb4e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cb44:	6a13      	ldr	r3, [r2, #32]
 800cb46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb4a:	430b      	orrs	r3, r1
 800cb4c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800cb4e:	f7ff fed7 	bl	800c900 <HAL_RCC_GetSysClockFreq>
 800cb52:	494a      	ldr	r1, [pc, #296]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cb54:	4a4a      	ldr	r2, [pc, #296]	@ (800cc80 <HAL_RCC_ClockConfig+0x23c>)
 800cb56:	698b      	ldr	r3, [r1, #24]
 800cb58:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800cb5c:	5cd3      	ldrb	r3, [r2, r3]
 800cb5e:	f003 031f 	and.w	r3, r3, #31
 800cb62:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb64:	698b      	ldr	r3, [r1, #24]
 800cb66:	f003 030f 	and.w	r3, r3, #15
 800cb6a:	5cd3      	ldrb	r3, [r2, r3]
 800cb6c:	4a45      	ldr	r2, [pc, #276]	@ (800cc84 <HAL_RCC_ClockConfig+0x240>)
 800cb6e:	f003 031f 	and.w	r3, r3, #31
 800cb72:	fa20 f303 	lsr.w	r3, r0, r3
 800cb76:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800cb78:	4b43      	ldr	r3, [pc, #268]	@ (800cc88 <HAL_RCC_ClockConfig+0x244>)
 800cb7a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800cb7c:	4b43      	ldr	r3, [pc, #268]	@ (800cc8c <HAL_RCC_ClockConfig+0x248>)
}
 800cb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800cb82:	6818      	ldr	r0, [r3, #0]
 800cb84:	f7f4 beb6 	b.w	80018f4 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb88:	6813      	ldr	r3, [r2, #0]
 800cb8a:	f023 030f 	bic.w	r3, r3, #15
 800cb8e:	430b      	orrs	r3, r1
 800cb90:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb92:	6813      	ldr	r3, [r2, #0]
 800cb94:	f003 030f 	and.w	r3, r3, #15
 800cb98:	428b      	cmp	r3, r1
 800cb9a:	f47f af58 	bne.w	800ca4e <HAL_RCC_ClockConfig+0xa>
 800cb9e:	e760      	b.n	800ca62 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cba0:	4936      	ldr	r1, [pc, #216]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cba2:	6920      	ldr	r0, [r4, #16]
 800cba4:	698a      	ldr	r2, [r1, #24]
 800cba6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800cbaa:	4290      	cmp	r0, r2
 800cbac:	f67f af5d 	bls.w	800ca6a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cbb0:	698a      	ldr	r2, [r1, #24]
 800cbb2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800cbb6:	4302      	orrs	r2, r0
 800cbb8:	618a      	str	r2, [r1, #24]
 800cbba:	e756      	b.n	800ca6a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cbbc:	4b2f      	ldr	r3, [pc, #188]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cbbe:	68a1      	ldr	r1, [r4, #8]
 800cbc0:	699a      	ldr	r2, [r3, #24]
 800cbc2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800cbc6:	430a      	orrs	r2, r1
 800cbc8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbca:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cbcc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbce:	2902      	cmp	r1, #2
 800cbd0:	d11d      	bne.n	800cc0e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cbd2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cbd6:	f43f af3a 	beq.w	800ca4e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cbda:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbdc:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbe0:	4f26      	ldr	r7, [pc, #152]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cbe2:	f022 0207 	bic.w	r2, r2, #7
 800cbe6:	430a      	orrs	r2, r1
 800cbe8:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800cbea:	f7fc f9fb 	bl	8008fe4 <HAL_GetTick>
 800cbee:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	6862      	ldr	r2, [r4, #4]
 800cbf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cbf8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800cbfc:	f43f af6f 	beq.w	800cade <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc00:	f7fc f9f0 	bl	8008fe4 <HAL_GetTick>
 800cc04:	1b80      	subs	r0, r0, r6
 800cc06:	4540      	cmp	r0, r8
 800cc08:	d9f2      	bls.n	800cbf0 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800cc0a:	2003      	movs	r0, #3
 800cc0c:	e720      	b.n	800ca50 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc0e:	2903      	cmp	r1, #3
 800cc10:	d102      	bne.n	800cc18 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cc12:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800cc16:	e7de      	b.n	800cbd6 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cc18:	2901      	cmp	r1, #1
 800cc1a:	d102      	bne.n	800cc22 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cc1c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800cc20:	e7d9      	b.n	800cbd6 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc22:	f012 0f04 	tst.w	r2, #4
 800cc26:	e7d6      	b.n	800cbd6 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cc28:	4914      	ldr	r1, [pc, #80]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cc2a:	68e0      	ldr	r0, [r4, #12]
 800cc2c:	698a      	ldr	r2, [r1, #24]
 800cc2e:	f002 020f 	and.w	r2, r2, #15
 800cc32:	4290      	cmp	r0, r2
 800cc34:	f4bf af57 	bcs.w	800cae6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc38:	698a      	ldr	r2, [r1, #24]
 800cc3a:	f022 020f 	bic.w	r2, r2, #15
 800cc3e:	4302      	orrs	r2, r0
 800cc40:	618a      	str	r2, [r1, #24]
 800cc42:	e750      	b.n	800cae6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc44:	680a      	ldr	r2, [r1, #0]
 800cc46:	f022 020f 	bic.w	r2, r2, #15
 800cc4a:	432a      	orrs	r2, r5
 800cc4c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc4e:	680a      	ldr	r2, [r1, #0]
 800cc50:	f002 020f 	and.w	r2, r2, #15
 800cc54:	42aa      	cmp	r2, r5
 800cc56:	f47f aefa 	bne.w	800ca4e <HAL_RCC_ClockConfig+0xa>
 800cc5a:	e74b      	b.n	800caf4 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cc5c:	4907      	ldr	r1, [pc, #28]	@ (800cc7c <HAL_RCC_ClockConfig+0x238>)
 800cc5e:	6920      	ldr	r0, [r4, #16]
 800cc60:	698a      	ldr	r2, [r1, #24]
 800cc62:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800cc66:	4290      	cmp	r0, r2
 800cc68:	f4bf af47 	bcs.w	800cafa <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cc6c:	698a      	ldr	r2, [r1, #24]
 800cc6e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800cc72:	4302      	orrs	r2, r0
 800cc74:	618a      	str	r2, [r1, #24]
 800cc76:	e740      	b.n	800cafa <HAL_RCC_ClockConfig+0xb6>
 800cc78:	52002000 	.word	0x52002000
 800cc7c:	58024400 	.word	0x58024400
 800cc80:	080298f4 	.word	0x080298f4
 800cc84:	2400006c 	.word	0x2400006c
 800cc88:	24000070 	.word	0x24000070
 800cc8c:	24000078 	.word	0x24000078

0800cc90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc90:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cc92:	f7ff fe35 	bl	800c900 <HAL_RCC_GetSysClockFreq>
 800cc96:	4a0b      	ldr	r2, [pc, #44]	@ (800ccc4 <HAL_RCC_GetHCLKFreq+0x34>)
 800cc98:	490b      	ldr	r1, [pc, #44]	@ (800ccc8 <HAL_RCC_GetHCLKFreq+0x38>)
 800cc9a:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cc9c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cc9e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cca2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cca6:	5ccb      	ldrb	r3, [r1, r3]
 800cca8:	f003 031f 	and.w	r3, r3, #31
 800ccac:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ccb0:	5c88      	ldrb	r0, [r1, r2]
 800ccb2:	4a06      	ldr	r2, [pc, #24]	@ (800cccc <HAL_RCC_GetHCLKFreq+0x3c>)
 800ccb4:	f000 001f 	and.w	r0, r0, #31
 800ccb8:	fa23 f000 	lsr.w	r0, r3, r0
 800ccbc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ccbe:	4a04      	ldr	r2, [pc, #16]	@ (800ccd0 <HAL_RCC_GetHCLKFreq+0x40>)
 800ccc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800ccc2:	bd08      	pop	{r3, pc}
 800ccc4:	58024400 	.word	0x58024400
 800ccc8:	080298f4 	.word	0x080298f4
 800cccc:	2400006c 	.word	0x2400006c
 800ccd0:	24000070 	.word	0x24000070

0800ccd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ccd4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ccd6:	f7ff ffdb 	bl	800cc90 <HAL_RCC_GetHCLKFreq>
 800ccda:	4b05      	ldr	r3, [pc, #20]	@ (800ccf0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ccdc:	4a05      	ldr	r2, [pc, #20]	@ (800ccf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ccde:	69db      	ldr	r3, [r3, #28]
 800cce0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cce4:	5cd3      	ldrb	r3, [r2, r3]
 800cce6:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ccea:	40d8      	lsrs	r0, r3
 800ccec:	bd08      	pop	{r3, pc}
 800ccee:	bf00      	nop
 800ccf0:	58024400 	.word	0x58024400
 800ccf4:	080298f4 	.word	0x080298f4

0800ccf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccf8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ccfa:	f7ff ffc9 	bl	800cc90 <HAL_RCC_GetHCLKFreq>
 800ccfe:	4b05      	ldr	r3, [pc, #20]	@ (800cd14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800cd00:	4a05      	ldr	r2, [pc, #20]	@ (800cd18 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cd02:	69db      	ldr	r3, [r3, #28]
 800cd04:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800cd08:	5cd3      	ldrb	r3, [r2, r3]
 800cd0a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cd0e:	40d8      	lsrs	r0, r3
 800cd10:	bd08      	pop	{r3, pc}
 800cd12:	bf00      	nop
 800cd14:	58024400 	.word	0x58024400
 800cd18:	080298f4 	.word	0x080298f4

0800cd1c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800cd1c:	233f      	movs	r3, #63	@ 0x3f
 800cd1e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cd20:	4b11      	ldr	r3, [pc, #68]	@ (800cd68 <HAL_RCC_GetClockConfig+0x4c>)
 800cd22:	691a      	ldr	r2, [r3, #16]
 800cd24:	f002 0207 	and.w	r2, r2, #7
 800cd28:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800cd2a:	699a      	ldr	r2, [r3, #24]
 800cd2c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800cd30:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800cd32:	699a      	ldr	r2, [r3, #24]
 800cd34:	f002 020f 	and.w	r2, r2, #15
 800cd38:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800cd3a:	699a      	ldr	r2, [r3, #24]
 800cd3c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800cd40:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800cd42:	69da      	ldr	r2, [r3, #28]
 800cd44:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800cd48:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800cd4a:	69da      	ldr	r2, [r3, #28]
 800cd4c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800cd50:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cd58:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cd5a:	4b04      	ldr	r3, [pc, #16]	@ (800cd6c <HAL_RCC_GetClockConfig+0x50>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f003 030f 	and.w	r3, r3, #15
 800cd62:	600b      	str	r3, [r1, #0]
}
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	58024400 	.word	0x58024400
 800cd6c:	52002000 	.word	0x52002000

0800cd70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd72:	4c3a      	ldr	r4, [pc, #232]	@ (800ce5c <RCCEx_PLL2_Config+0xec>)
{
 800cd74:	4606      	mov	r6, r0
 800cd76:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	2b03      	cmp	r3, #3
 800cd80:	d069      	beq.n	800ce56 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd88:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd8a:	f7fc f92b 	bl	8008fe4 <HAL_GetTick>
 800cd8e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	011a      	lsls	r2, r3, #4
 800cd94:	d44b      	bmi.n	800ce2e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cd98:	6832      	ldr	r2, [r6, #0]
 800cd9a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800cd9e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800cda2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cda4:	68b3      	ldr	r3, [r6, #8]
 800cda6:	68f2      	ldr	r2, [r6, #12]
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	3a01      	subs	r2, #1
 800cdac:	025b      	lsls	r3, r3, #9
 800cdae:	0412      	lsls	r2, r2, #16
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	6872      	ldr	r2, [r6, #4]
 800cdba:	3a01      	subs	r2, #1
 800cdbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	6932      	ldr	r2, [r6, #16]
 800cdc4:	3a01      	subs	r2, #1
 800cdc6:	0612      	lsls	r2, r2, #24
 800cdc8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cdd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cdd2:	6972      	ldr	r2, [r6, #20]
 800cdd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cddc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cdde:	69b2      	ldr	r2, [r6, #24]
 800cde0:	f023 0320 	bic.w	r3, r3, #32
 800cde4:	4313      	orrs	r3, r2
 800cde6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cde8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cdea:	f023 0310 	bic.w	r3, r3, #16
 800cdee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cdf0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cdf2:	69f2      	ldr	r2, [r6, #28]
 800cdf4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cdf8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800cdfc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ce00:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce02:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ce04:	f043 0310 	orr.w	r3, r3, #16
 800ce08:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ce0c:	b9b5      	cbnz	r5, 800ce3c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce12:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce14:	4c11      	ldr	r4, [pc, #68]	@ (800ce5c <RCCEx_PLL2_Config+0xec>)
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce1e:	f7fc f8e1 	bl	8008fe4 <HAL_GetTick>
 800ce22:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	011b      	lsls	r3, r3, #4
 800ce28:	d50f      	bpl.n	800ce4a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e005      	b.n	800ce3a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce2e:	f7fc f8d9 	bl	8008fe4 <HAL_GetTick>
 800ce32:	1bc0      	subs	r0, r0, r7
 800ce34:	2802      	cmp	r0, #2
 800ce36:	d9ab      	bls.n	800cd90 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800ce38:	2003      	movs	r0, #3
}
 800ce3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce3c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce3e:	bf0c      	ite	eq
 800ce40:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce44:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800ce48:	e7e3      	b.n	800ce12 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce4a:	f7fc f8cb 	bl	8008fe4 <HAL_GetTick>
 800ce4e:	1b40      	subs	r0, r0, r5
 800ce50:	2802      	cmp	r0, #2
 800ce52:	d9e7      	bls.n	800ce24 <RCCEx_PLL2_Config+0xb4>
 800ce54:	e7f0      	b.n	800ce38 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800ce56:	2001      	movs	r0, #1
 800ce58:	e7ef      	b.n	800ce3a <RCCEx_PLL2_Config+0xca>
 800ce5a:	bf00      	nop
 800ce5c:	58024400 	.word	0x58024400

0800ce60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce62:	4c3a      	ldr	r4, [pc, #232]	@ (800cf4c <RCCEx_PLL3_Config+0xec>)
{
 800ce64:	4606      	mov	r6, r0
 800ce66:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ce6a:	f003 0303 	and.w	r3, r3, #3
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d069      	beq.n	800cf46 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce72:	6823      	ldr	r3, [r4, #0]
 800ce74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce78:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce7a:	f7fc f8b3 	bl	8008fe4 <HAL_GetTick>
 800ce7e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	009a      	lsls	r2, r3, #2
 800ce84:	d44b      	bmi.n	800cf1e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ce88:	6832      	ldr	r2, [r6, #0]
 800ce8a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800ce8e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ce92:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce94:	68b3      	ldr	r3, [r6, #8]
 800ce96:	68f2      	ldr	r2, [r6, #12]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	3a01      	subs	r2, #1
 800ce9c:	025b      	lsls	r3, r3, #9
 800ce9e:	0412      	lsls	r2, r2, #16
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800cea6:	4313      	orrs	r3, r2
 800cea8:	6872      	ldr	r2, [r6, #4]
 800ceaa:	3a01      	subs	r2, #1
 800ceac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	6932      	ldr	r2, [r6, #16]
 800ceb4:	3a01      	subs	r2, #1
 800ceb6:	0612      	lsls	r2, r2, #24
 800ceb8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800cebc:	4313      	orrs	r3, r2
 800cebe:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cec0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cec2:	6972      	ldr	r2, [r6, #20]
 800cec4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800cec8:	4313      	orrs	r3, r2
 800ceca:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cecc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cece:	69b2      	ldr	r2, [r6, #24]
 800ced0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ced4:	4313      	orrs	r3, r2
 800ced6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ced8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ceda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cede:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cee0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cee2:	69f2      	ldr	r2, [r6, #28]
 800cee4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cee8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ceec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800cef0:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cef2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cef8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cefa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800cefc:	b9b5      	cbnz	r5, 800cf2c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cefe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf02:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf04:	4c11      	ldr	r4, [pc, #68]	@ (800cf4c <RCCEx_PLL3_Config+0xec>)
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf0c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf0e:	f7fc f869 	bl	8008fe4 <HAL_GetTick>
 800cf12:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	d50f      	bpl.n	800cf3a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	e005      	b.n	800cf2a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf1e:	f7fc f861 	bl	8008fe4 <HAL_GetTick>
 800cf22:	1bc0      	subs	r0, r0, r7
 800cf24:	2802      	cmp	r0, #2
 800cf26:	d9ab      	bls.n	800ce80 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800cf28:	2003      	movs	r0, #3
}
 800cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf2c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf2e:	bf0c      	ite	eq
 800cf30:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf34:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800cf38:	e7e3      	b.n	800cf02 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf3a:	f7fc f853 	bl	8008fe4 <HAL_GetTick>
 800cf3e:	1b40      	subs	r0, r0, r5
 800cf40:	2802      	cmp	r0, #2
 800cf42:	d9e7      	bls.n	800cf14 <RCCEx_PLL3_Config+0xb4>
 800cf44:	e7f0      	b.n	800cf28 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800cf46:	2001      	movs	r0, #1
 800cf48:	e7ef      	b.n	800cf2a <RCCEx_PLL3_Config+0xca>
 800cf4a:	bf00      	nop
 800cf4c:	58024400 	.word	0x58024400

0800cf50 <HAL_RCCEx_PeriphCLKConfig>:
{
 800cf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cf54:	6803      	ldr	r3, [r0, #0]
{
 800cf56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cf58:	011c      	lsls	r4, r3, #4
 800cf5a:	d51e      	bpl.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800cf5c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800cf5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf62:	d02a      	beq.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800cf64:	d80f      	bhi.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800cf66:	b1d3      	cbz	r3, 800cf9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800cf68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf6c:	d01d      	beq.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800cf6e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cf70:	682b      	ldr	r3, [r5, #0]
 800cf72:	05d8      	lsls	r0, r3, #23
 800cf74:	d54f      	bpl.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800cf76:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	d84b      	bhi.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800cf7c:	e8df f003 	tbb	[pc, r3]
 800cf80:	27443d22 	.word	0x27443d22
 800cf84:	27          	.byte	0x27
 800cf85:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800cf86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cf8a:	d1f0      	bne.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cf8c:	4a86      	ldr	r2, [pc, #536]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cf8e:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800cf90:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cf92:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cf96:	430b      	orrs	r3, r1
 800cf98:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cf9a:	2600      	movs	r6, #0
 800cf9c:	e7e8      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf9e:	4a82      	ldr	r2, [pc, #520]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cfa0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cfa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800cfa8:	e7f0      	b.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cfaa:	2102      	movs	r1, #2
 800cfac:	3008      	adds	r0, #8
 800cfae:	f7ff fedf 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cfb2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d1db      	bne.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800cfb8:	e7e8      	b.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cfba:	2102      	movs	r1, #2
 800cfbc:	3028      	adds	r0, #40	@ 0x28
 800cfbe:	f7ff ff4f 	bl	800ce60 <RCCEx_PLL3_Config>
 800cfc2:	e7f6      	b.n	800cfb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfc4:	4a78      	ldr	r2, [pc, #480]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cfc6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cfc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800cfce:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800cfd0:	bb1c      	cbnz	r4, 800d01a <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cfd2:	4a75      	ldr	r2, [pc, #468]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800cfd4:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800cfd6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800cfd8:	f023 0307 	bic.w	r3, r3, #7
 800cfdc:	430b      	orrs	r3, r1
 800cfde:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	0599      	lsls	r1, r3, #22
 800cfe4:	d528      	bpl.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800cfe6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800cfe8:	2b80      	cmp	r3, #128	@ 0x80
 800cfea:	d043      	beq.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800cfec:	d817      	bhi.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800cfee:	b3a3      	cbz	r3, 800d05a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800cff0:	2b40      	cmp	r3, #64	@ 0x40
 800cff2:	d038      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800cff4:	2601      	movs	r6, #1
 800cff6:	4634      	mov	r4, r6
 800cff8:	e01e      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cffa:	2100      	movs	r1, #0
 800cffc:	f105 0008 	add.w	r0, r5, #8
 800d000:	f7ff feb6 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d004:	4604      	mov	r4, r0
        break;
 800d006:	e7e3      	b.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d008:	2100      	movs	r1, #0
 800d00a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d00e:	f7ff ff27 	bl	800ce60 <RCCEx_PLL3_Config>
 800d012:	e7f7      	b.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800d014:	2601      	movs	r6, #1
 800d016:	4634      	mov	r4, r6
 800d018:	e7e2      	b.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d01a:	4626      	mov	r6, r4
 800d01c:	e7e0      	b.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800d01e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d020:	d002      	beq.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800d022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d026:	d1e5      	bne.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800d028:	bb54      	cbnz	r4, 800d080 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d02a:	4a5f      	ldr	r2, [pc, #380]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d02c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d02e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d030:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800d034:	430b      	orrs	r3, r1
 800d036:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d038:	682b      	ldr	r3, [r5, #0]
 800d03a:	055a      	lsls	r2, r3, #21
 800d03c:	d531      	bpl.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800d03e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800d042:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d046:	d049      	beq.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800d048:	d81c      	bhi.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d039      	beq.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800d04e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d052:	d03c      	beq.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800d054:	2601      	movs	r6, #1
 800d056:	4634      	mov	r4, r6
 800d058:	e023      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d05a:	4a53      	ldr	r2, [pc, #332]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d05c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d05e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d062:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800d064:	e7e0      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d066:	2100      	movs	r1, #0
 800d068:	f105 0008 	add.w	r0, r5, #8
 800d06c:	f7ff fe80 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d070:	4604      	mov	r4, r0
        break;
 800d072:	e7d9      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d074:	2100      	movs	r1, #0
 800d076:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d07a:	f7ff fef1 	bl	800ce60 <RCCEx_PLL3_Config>
 800d07e:	e7f7      	b.n	800d070 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800d080:	4626      	mov	r6, r4
 800d082:	e7d9      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800d084:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d088:	d002      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800d08a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d08e:	d1e1      	bne.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800d090:	bb54      	cbnz	r4, 800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d092:	4a45      	ldr	r2, [pc, #276]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d094:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800d098:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d09a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800d09e:	430b      	orrs	r3, r1
 800d0a0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d0a2:	682b      	ldr	r3, [r5, #0]
 800d0a4:	051b      	lsls	r3, r3, #20
 800d0a6:	d530      	bpl.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800d0a8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800d0ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0b0:	d045      	beq.n	800d13e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d0b2:	d81b      	bhi.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800d0b4:	b3b3      	cbz	r3, 800d124 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800d0b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0ba:	d039      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800d0bc:	2601      	movs	r6, #1
 800d0be:	4634      	mov	r4, r6
 800d0c0:	e023      	b.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0c2:	4a39      	ldr	r2, [pc, #228]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d0c4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d0c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800d0cc:	e7e0      	b.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	f105 0008 	add.w	r0, r5, #8
 800d0d4:	f7ff fe4c 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0d8:	4604      	mov	r4, r0
        break;
 800d0da:	e7d9      	b.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0dc:	2100      	movs	r1, #0
 800d0de:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d0e2:	f7ff febd 	bl	800ce60 <RCCEx_PLL3_Config>
 800d0e6:	e7f7      	b.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800d0e8:	4626      	mov	r6, r4
 800d0ea:	e7da      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800d0ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d0f0:	d002      	beq.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d0f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d0f6:	d1e1      	bne.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800d0f8:	bb3c      	cbnz	r4, 800d14a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d0fa:	4a2b      	ldr	r2, [pc, #172]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d0fc:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800d100:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d102:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800d106:	430b      	orrs	r3, r1
 800d108:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d10a:	682b      	ldr	r3, [r5, #0]
 800d10c:	019f      	lsls	r7, r3, #6
 800d10e:	d528      	bpl.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800d110:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d112:	2b20      	cmp	r3, #32
 800d114:	d03e      	beq.n	800d194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800d116:	d81a      	bhi.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800d118:	b1db      	cbz	r3, 800d152 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800d11a:	2b10      	cmp	r3, #16
 800d11c:	d034      	beq.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800d11e:	2601      	movs	r6, #1
 800d120:	4634      	mov	r4, r6
 800d122:	e01e      	b.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d124:	4a20      	ldr	r2, [pc, #128]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d126:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d12c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800d12e:	e7e3      	b.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d130:	2100      	movs	r1, #0
 800d132:	f105 0008 	add.w	r0, r5, #8
 800d136:	f7ff fe1b 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d13a:	4604      	mov	r4, r0
        break;
 800d13c:	e7dc      	b.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d13e:	2100      	movs	r1, #0
 800d140:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d144:	f7ff fe8c 	bl	800ce60 <RCCEx_PLL3_Config>
 800d148:	e7f7      	b.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d14a:	4626      	mov	r6, r4
 800d14c:	e7dd      	b.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800d14e:	2b30      	cmp	r3, #48	@ 0x30
 800d150:	d1e5      	bne.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800d152:	bb34      	cbnz	r4, 800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d154:	4a14      	ldr	r2, [pc, #80]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d156:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d158:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d15a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800d15e:	430b      	orrs	r3, r1
 800d160:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d162:	682b      	ldr	r3, [r5, #0]
 800d164:	04d8      	lsls	r0, r3, #19
 800d166:	d530      	bpl.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800d168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d16a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d16e:	f000 8097 	beq.w	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d172:	d81b      	bhi.n	800d1ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800d174:	2b00      	cmp	r3, #0
 800d176:	f000 8086 	beq.w	800d286 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800d17a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d17e:	f000 8088 	beq.w	800d292 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800d182:	2601      	movs	r6, #1
 800d184:	4634      	mov	r4, r6
 800d186:	e020      	b.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d188:	4a07      	ldr	r2, [pc, #28]	@ (800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d18a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d18c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d190:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800d192:	e7de      	b.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d194:	2102      	movs	r1, #2
 800d196:	f105 0008 	add.w	r0, r5, #8
 800d19a:	f7ff fde9 	bl	800cd70 <RCCEx_PLL2_Config>
 800d19e:	4604      	mov	r4, r0
        break;
 800d1a0:	e7d7      	b.n	800d152 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800d1a2:	4626      	mov	r6, r4
 800d1a4:	e7dd      	b.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800d1a6:	bf00      	nop
 800d1a8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800d1ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d1b0:	d002      	beq.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800d1b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1b6:	d1e4      	bne.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800d1b8:	2c00      	cmp	r4, #0
 800d1ba:	d177      	bne.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d1bc:	4a9e      	ldr	r2, [pc, #632]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d1be:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800d1c0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d1c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1c6:	430b      	orrs	r3, r1
 800d1c8:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d1ca:	682b      	ldr	r3, [r5, #0]
 800d1cc:	0499      	lsls	r1, r3, #18
 800d1ce:	d50c      	bpl.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800d1d0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800d1d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1d6:	f000 8083 	beq.w	800d2e0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800d1da:	d869      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d06f      	beq.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800d1e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1e4:	d075      	beq.n	800d2d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d1e6:	2601      	movs	r6, #1
 800d1e8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d1ea:	682b      	ldr	r3, [r5, #0]
 800d1ec:	045a      	lsls	r2, r3, #17
 800d1ee:	d50e      	bpl.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800d1f0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800d1f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1f8:	f000 8093 	beq.w	800d322 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800d1fc:	d878      	bhi.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d07e      	beq.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800d202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d206:	f000 8085 	beq.w	800d314 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800d20a:	2601      	movs	r6, #1
 800d20c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800d20e:	682b      	ldr	r3, [r5, #0]
 800d210:	015b      	lsls	r3, r3, #5
 800d212:	d515      	bpl.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800d214:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800d216:	b14b      	cbz	r3, 800d22c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800d218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d21c:	f040 8089 	bne.w	800d332 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d220:	2101      	movs	r1, #1
 800d222:	f105 0008 	add.w	r0, r5, #8
 800d226:	f7ff fda3 	bl	800cd70 <RCCEx_PLL2_Config>
 800d22a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d22c:	2c00      	cmp	r4, #0
 800d22e:	f040 8083 	bne.w	800d338 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800d232:	4a81      	ldr	r2, [pc, #516]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d234:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800d236:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d23c:	430b      	orrs	r3, r1
 800d23e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	041f      	lsls	r7, r3, #16
 800d244:	d511      	bpl.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800d246:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d248:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d24c:	d076      	beq.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800d24e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d252:	d079      	beq.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d254:	2b00      	cmp	r3, #0
 800d256:	d17e      	bne.n	800d356 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800d258:	2c00      	cmp	r4, #0
 800d25a:	d17f      	bne.n	800d35c <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d25c:	4a76      	ldr	r2, [pc, #472]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d25e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800d260:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d262:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800d266:	430b      	orrs	r3, r1
 800d268:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d26a:	682b      	ldr	r3, [r5, #0]
 800d26c:	01d8      	lsls	r0, r3, #7
 800d26e:	f140 8085 	bpl.w	800d37c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800d272:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800d274:	2b03      	cmp	r3, #3
 800d276:	f200 80e5 	bhi.w	800d444 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800d27a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d27e:	0076      	.short	0x0076
 800d280:	00d50071 	.word	0x00d50071
 800d284:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d286:	4a6c      	ldr	r2, [pc, #432]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d288:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d28a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d28e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800d290:	e792      	b.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d292:	2100      	movs	r1, #0
 800d294:	f105 0008 	add.w	r0, r5, #8
 800d298:	f7ff fd6a 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d29c:	4604      	mov	r4, r0
        break;
 800d29e:	e78b      	b.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d2a6:	f7ff fddb 	bl	800ce60 <RCCEx_PLL3_Config>
 800d2aa:	e7f7      	b.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800d2ac:	4626      	mov	r6, r4
 800d2ae:	e78c      	b.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800d2b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d2b4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800d2b8:	d002      	beq.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800d2ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d2be:	d192      	bne.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800d2c0:	b9a4      	cbnz	r4, 800d2ec <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d2c2:	4a5d      	ldr	r2, [pc, #372]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d2c4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800d2c6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d2c8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800d2cc:	430b      	orrs	r3, r1
 800d2ce:	6513      	str	r3, [r2, #80]	@ 0x50
 800d2d0:	e78b      	b.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d2d2:	2101      	movs	r1, #1
 800d2d4:	f105 0008 	add.w	r0, r5, #8
 800d2d8:	f7ff fd4a 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d2dc:	4604      	mov	r4, r0
        break;
 800d2de:	e7ef      	b.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d2e6:	f7ff fdbb 	bl	800ce60 <RCCEx_PLL3_Config>
 800d2ea:	e7f7      	b.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800d2ec:	4626      	mov	r6, r4
 800d2ee:	e77c      	b.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800d2f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d2f4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800d2f8:	d002      	beq.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800d2fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d2fe:	d184      	bne.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800d300:	b9ac      	cbnz	r4, 800d32e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d302:	4a4d      	ldr	r2, [pc, #308]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d304:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800d308:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d30a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800d30e:	430b      	orrs	r3, r1
 800d310:	6593      	str	r3, [r2, #88]	@ 0x58
 800d312:	e77c      	b.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d314:	2101      	movs	r1, #1
 800d316:	f105 0008 	add.w	r0, r5, #8
 800d31a:	f7ff fd29 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d31e:	4604      	mov	r4, r0
        break;
 800d320:	e7ee      	b.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d322:	2101      	movs	r1, #1
 800d324:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d328:	f7ff fd9a 	bl	800ce60 <RCCEx_PLL3_Config>
 800d32c:	e7f7      	b.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800d32e:	4626      	mov	r6, r4
 800d330:	e76d      	b.n	800d20e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800d332:	2601      	movs	r6, #1
 800d334:	4634      	mov	r4, r6
 800d336:	e783      	b.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800d338:	4626      	mov	r6, r4
 800d33a:	e781      	b.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d33c:	4a3e      	ldr	r2, [pc, #248]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d33e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d344:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800d346:	e787      	b.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d348:	2101      	movs	r1, #1
 800d34a:	f105 0008 	add.w	r0, r5, #8
 800d34e:	f7ff fd0f 	bl	800cd70 <RCCEx_PLL2_Config>
 800d352:	4604      	mov	r4, r0
        break;
 800d354:	e780      	b.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800d356:	2601      	movs	r6, #1
 800d358:	4634      	mov	r4, r6
 800d35a:	e786      	b.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800d35c:	4626      	mov	r6, r4
 800d35e:	e784      	b.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d360:	4a35      	ldr	r2, [pc, #212]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d362:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d368:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d36a:	2c00      	cmp	r4, #0
 800d36c:	d16d      	bne.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d36e:	4a32      	ldr	r2, [pc, #200]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d370:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800d372:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d374:	f023 0303 	bic.w	r3, r3, #3
 800d378:	430b      	orrs	r3, r1
 800d37a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	0259      	lsls	r1, r3, #9
 800d380:	d539      	bpl.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d382:	4f2e      	ldr	r7, [pc, #184]	@ (800d43c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d38a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800d38c:	f7fb fe2a 	bl	8008fe4 <HAL_GetTick>
 800d390:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	05da      	lsls	r2, r3, #23
 800d396:	d55a      	bpl.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800d398:	2c00      	cmp	r4, #0
 800d39a:	d176      	bne.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d39c:	4b26      	ldr	r3, [pc, #152]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d39e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800d3a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d3a4:	4042      	eors	r2, r0
 800d3a6:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800d3aa:	d00b      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d3ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800d3ae:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d3b0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800d3b4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800d3b8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d3ba:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d3bc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800d3c0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800d3c2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d3c4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800d3c8:	d04a      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d3ca:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800d3ce:	491a      	ldr	r1, [pc, #104]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d3d0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800d3d4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800d3d8:	d153      	bne.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800d3da:	6908      	ldr	r0, [r1, #16]
 800d3dc:	4a18      	ldr	r2, [pc, #96]	@ (800d440 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800d3de:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800d3e2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800d3e6:	4302      	orrs	r2, r0
 800d3e8:	610a      	str	r2, [r1, #16]
 800d3ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3ee:	4a12      	ldr	r2, [pc, #72]	@ (800d438 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800d3f0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800d3f2:	430b      	orrs	r3, r1
 800d3f4:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d3f6:	682b      	ldr	r3, [r5, #0]
 800d3f8:	07d8      	lsls	r0, r3, #31
 800d3fa:	d50a      	bpl.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800d3fc:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800d400:	2b10      	cmp	r3, #16
 800d402:	d05b      	beq.n	800d4bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800d404:	d843      	bhi.n	800d48e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800d406:	2b00      	cmp	r3, #0
 800d408:	d047      	beq.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800d40a:	2b08      	cmp	r3, #8
 800d40c:	d04f      	beq.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800d40e:	2601      	movs	r6, #1
 800d410:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	0799      	lsls	r1, r3, #30
 800d416:	d567      	bpl.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d418:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800d41a:	2b05      	cmp	r3, #5
 800d41c:	d87a      	bhi.n	800d514 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800d41e:	e8df f003 	tbb	[pc, r3]
 800d422:	555b      	.short	0x555b
 800d424:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d428:	2102      	movs	r1, #2
 800d42a:	f105 0008 	add.w	r0, r5, #8
 800d42e:	f7ff fc9f 	bl	800cd70 <RCCEx_PLL2_Config>
 800d432:	4604      	mov	r4, r0
        break;
 800d434:	e799      	b.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d436:	bf00      	nop
 800d438:	58024400 	.word	0x58024400
 800d43c:	58024800 	.word	0x58024800
 800d440:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800d444:	2601      	movs	r6, #1
 800d446:	4634      	mov	r4, r6
 800d448:	e798      	b.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800d44a:	4626      	mov	r6, r4
 800d44c:	e796      	b.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d44e:	f7fb fdc9 	bl	8008fe4 <HAL_GetTick>
 800d452:	eba0 0008 	sub.w	r0, r0, r8
 800d456:	2864      	cmp	r0, #100	@ 0x64
 800d458:	d99b      	bls.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800d45a:	2603      	movs	r6, #3
 800d45c:	4634      	mov	r4, r6
 800d45e:	e7ca      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800d460:	f7fb fdc0 	bl	8008fe4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d464:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800d520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800d468:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d46a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d46e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d472:	079b      	lsls	r3, r3, #30
 800d474:	d4a9      	bmi.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d476:	f7fb fdb5 	bl	8008fe4 <HAL_GetTick>
 800d47a:	1bc0      	subs	r0, r0, r7
 800d47c:	4548      	cmp	r0, r9
 800d47e:	d9f6      	bls.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800d480:	e7eb      	b.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d482:	690a      	ldr	r2, [r1, #16]
 800d484:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800d488:	e7ae      	b.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d48a:	4626      	mov	r6, r4
 800d48c:	e7b3      	b.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800d48e:	f023 0208 	bic.w	r2, r3, #8
 800d492:	2a20      	cmp	r2, #32
 800d494:	d001      	beq.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800d496:	2b18      	cmp	r3, #24
 800d498:	d1b9      	bne.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800d49a:	b9ac      	cbnz	r4, 800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d49c:	4a20      	ldr	r2, [pc, #128]	@ (800d520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d49e:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800d4a2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d4a4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800d4a8:	430b      	orrs	r3, r1
 800d4aa:	6553      	str	r3, [r2, #84]	@ 0x54
 800d4ac:	e7b1      	b.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	f105 0008 	add.w	r0, r5, #8
 800d4b4:	f7ff fc5c 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4b8:	4604      	mov	r4, r0
        break;
 800d4ba:	e7ee      	b.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4bc:	2101      	movs	r1, #1
 800d4be:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d4c2:	f7ff fccd 	bl	800ce60 <RCCEx_PLL3_Config>
 800d4c6:	e7f7      	b.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800d4c8:	4626      	mov	r6, r4
 800d4ca:	e7a2      	b.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	f105 0008 	add.w	r0, r5, #8
 800d4d2:	f7ff fc4d 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4d6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d4d8:	b9fc      	cbnz	r4, 800d51a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d4da:	4a11      	ldr	r2, [pc, #68]	@ (800d520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800d4dc:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800d4de:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d4e0:	f023 0307 	bic.w	r3, r3, #7
 800d4e4:	430b      	orrs	r3, r1
 800d4e6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d4e8:	682b      	ldr	r3, [r5, #0]
 800d4ea:	075a      	lsls	r2, r3, #29
 800d4ec:	d52b      	bpl.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d4ee:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800d4f2:	2b05      	cmp	r3, #5
 800d4f4:	f200 816e 	bhi.w	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800d4f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d4fc:	0014001a 	.word	0x0014001a
 800d500:	001a0166 	.word	0x001a0166
 800d504:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d508:	2101      	movs	r1, #1
 800d50a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d50e:	f7ff fca7 	bl	800ce60 <RCCEx_PLL3_Config>
 800d512:	e7e0      	b.n	800d4d6 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d514:	2601      	movs	r6, #1
 800d516:	4634      	mov	r4, r6
 800d518:	e7e6      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800d51a:	4626      	mov	r6, r4
 800d51c:	e7e4      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800d51e:	bf00      	nop
 800d520:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d524:	2101      	movs	r1, #1
 800d526:	f105 0008 	add.w	r0, r5, #8
 800d52a:	f7ff fc21 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d52e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d530:	2c00      	cmp	r4, #0
 800d532:	f040 8152 	bne.w	800d7da <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d536:	4aaa      	ldr	r2, [pc, #680]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d538:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800d53c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d53e:	f023 0307 	bic.w	r3, r3, #7
 800d542:	430b      	orrs	r3, r1
 800d544:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d546:	682b      	ldr	r3, [r5, #0]
 800d548:	069b      	lsls	r3, r3, #26
 800d54a:	d510      	bpl.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d54c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800d550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d554:	f000 8160 	beq.w	800d818 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800d558:	f200 8144 	bhi.w	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 814a 	beq.w	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800d562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d566:	f000 8150 	beq.w	800d80a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800d56a:	2601      	movs	r6, #1
 800d56c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d56e:	682b      	ldr	r3, [r5, #0]
 800d570:	065f      	lsls	r7, r3, #25
 800d572:	d510      	bpl.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d574:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800d578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d57c:	f000 816e 	beq.w	800d85c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800d580:	f200 8152 	bhi.w	800d828 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800d584:	2b00      	cmp	r3, #0
 800d586:	f000 8158 	beq.w	800d83a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800d58a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d58e:	f000 815e 	beq.w	800d84e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800d592:	2601      	movs	r6, #1
 800d594:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d596:	682b      	ldr	r3, [r5, #0]
 800d598:	0618      	lsls	r0, r3, #24
 800d59a:	d510      	bpl.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d59c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800d5a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d5a4:	f000 817c 	beq.w	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800d5a8:	f200 8160 	bhi.w	800d86c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 8166 	beq.w	800d87e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800d5b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d5b6:	f000 816c 	beq.w	800d892 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800d5ba:	2601      	movs	r6, #1
 800d5bc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d5be:	682b      	ldr	r3, [r5, #0]
 800d5c0:	0719      	lsls	r1, r3, #28
 800d5c2:	d514      	bpl.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d5c4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800d5c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5cc:	d107      	bne.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d5ce:	2102      	movs	r1, #2
 800d5d0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d5d4:	f7ff fc44 	bl	800ce60 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	bf18      	it	ne
 800d5dc:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d5de:	4a80      	ldr	r2, [pc, #512]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d5e0:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800d5e4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d5e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800d5ea:	430b      	orrs	r3, r1
 800d5ec:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5ee:	682b      	ldr	r3, [r5, #0]
 800d5f0:	06da      	lsls	r2, r3, #27
 800d5f2:	d514      	bpl.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d5f4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800d5f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5fc:	d107      	bne.n	800d60e <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d5fe:	2102      	movs	r1, #2
 800d600:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d604:	f7ff fc2c 	bl	800ce60 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800d608:	2800      	cmp	r0, #0
 800d60a:	bf18      	it	ne
 800d60c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d60e:	4a74      	ldr	r2, [pc, #464]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d610:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800d614:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d61a:	430b      	orrs	r3, r1
 800d61c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d61e:	682b      	ldr	r3, [r5, #0]
 800d620:	031b      	lsls	r3, r3, #12
 800d622:	d51b      	bpl.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800d624:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800d628:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800d62c:	f000 8140 	beq.w	800d8b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800d630:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800d634:	d007      	beq.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800d636:	2900      	cmp	r1, #0
 800d638:	f040 8140 	bne.w	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d63c:	f105 0008 	add.w	r0, r5, #8
 800d640:	f7ff fb96 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d644:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d646:	2c00      	cmp	r4, #0
 800d648:	f040 813b 	bne.w	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d64c:	4a64      	ldr	r2, [pc, #400]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d64e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800d652:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d654:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800d658:	430b      	orrs	r3, r1
 800d65a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	035f      	lsls	r7, r3, #13
 800d660:	d50f      	bpl.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800d662:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800d666:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d66a:	f000 813b 	beq.w	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800d66e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d672:	f000 812d 	beq.w	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800d676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d67a:	f000 8124 	beq.w	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800d67e:	2601      	movs	r6, #1
 800d680:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d682:	682b      	ldr	r3, [r5, #0]
 800d684:	03d8      	lsls	r0, r3, #15
 800d686:	d509      	bpl.n	800d69c <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800d688:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f000 8133 	beq.w	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800d690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d694:	f000 813d 	beq.w	800d912 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800d698:	2601      	movs	r6, #1
 800d69a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d69c:	682b      	ldr	r3, [r5, #0]
 800d69e:	0099      	lsls	r1, r3, #2
 800d6a0:	d507      	bpl.n	800d6b2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d6a2:	2102      	movs	r1, #2
 800d6a4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d6a8:	f7ff fbda 	bl	800ce60 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	bf18      	it	ne
 800d6b0:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d6b2:	e9d5 3100 	ldrd	r3, r1, [r5]
 800d6b6:	039a      	lsls	r2, r3, #14
 800d6b8:	f140 8143 	bpl.w	800d942 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800d6bc:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800d6c0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800d6c4:	f000 813f 	beq.w	800d946 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800d6c8:	f200 812c 	bhi.w	800d924 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	f000 812f 	beq.w	800d930 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800d6d2:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d6d4:	02df      	lsls	r7, r3, #11
 800d6d6:	d506      	bpl.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d6d8:	4841      	ldr	r0, [pc, #260]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d6da:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800d6dc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800d6de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800d6e2:	4332      	orrs	r2, r6
 800d6e4:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d6e6:	00de      	lsls	r6, r3, #3
 800d6e8:	d507      	bpl.n	800d6fa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d6ea:	483d      	ldr	r0, [pc, #244]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d6ec:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800d6f0:	6902      	ldr	r2, [r0, #16]
 800d6f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d6f6:	4332      	orrs	r2, r6
 800d6f8:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d6fa:	0298      	lsls	r0, r3, #10
 800d6fc:	d506      	bpl.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d6fe:	4838      	ldr	r0, [pc, #224]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d700:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800d702:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800d704:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800d708:	4332      	orrs	r2, r6
 800d70a:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d70c:	005a      	lsls	r2, r3, #1
 800d70e:	d509      	bpl.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d710:	4a33      	ldr	r2, [pc, #204]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d712:	6910      	ldr	r0, [r2, #16]
 800d714:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800d718:	6110      	str	r0, [r2, #16]
 800d71a:	6910      	ldr	r0, [r2, #16]
 800d71c:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800d720:	4330      	orrs	r0, r6
 800d722:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d724:	2b00      	cmp	r3, #0
 800d726:	da06      	bge.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d728:	482d      	ldr	r0, [pc, #180]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d72a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d72c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d72e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800d732:	4332      	orrs	r2, r6
 800d734:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d736:	021f      	lsls	r7, r3, #8
 800d738:	d507      	bpl.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d73a:	4a29      	ldr	r2, [pc, #164]	@ (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800d73c:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800d740:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d742:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800d746:	4303      	orrs	r3, r0
 800d748:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d74a:	07ce      	lsls	r6, r1, #31
 800d74c:	d506      	bpl.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d74e:	2100      	movs	r1, #0
 800d750:	f105 0008 	add.w	r0, r5, #8
 800d754:	f7ff fb0c 	bl	800cd70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d758:	4607      	mov	r7, r0
 800d75a:	b900      	cbnz	r0, 800d75e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800d75c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d75e:	686b      	ldr	r3, [r5, #4]
 800d760:	079c      	lsls	r4, r3, #30
 800d762:	d506      	bpl.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d764:	2101      	movs	r1, #1
 800d766:	f105 0008 	add.w	r0, r5, #8
 800d76a:	f7ff fb01 	bl	800cd70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d76e:	4606      	mov	r6, r0
 800d770:	b900      	cbnz	r0, 800d774 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800d772:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d774:	686b      	ldr	r3, [r5, #4]
 800d776:	0758      	lsls	r0, r3, #29
 800d778:	d506      	bpl.n	800d788 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d77a:	2102      	movs	r1, #2
 800d77c:	f105 0008 	add.w	r0, r5, #8
 800d780:	f7ff faf6 	bl	800cd70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d784:	4604      	mov	r4, r0
 800d786:	b900      	cbnz	r0, 800d78a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800d788:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d78a:	686b      	ldr	r3, [r5, #4]
 800d78c:	0719      	lsls	r1, r3, #28
 800d78e:	d506      	bpl.n	800d79e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d790:	2100      	movs	r1, #0
 800d792:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d796:	f7ff fb63 	bl	800ce60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d79a:	4606      	mov	r6, r0
 800d79c:	b900      	cbnz	r0, 800d7a0 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800d79e:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d7a0:	686b      	ldr	r3, [r5, #4]
 800d7a2:	06da      	lsls	r2, r3, #27
 800d7a4:	d506      	bpl.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d7a6:	2101      	movs	r1, #1
 800d7a8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d7ac:	f7ff fb58 	bl	800ce60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	b900      	cbnz	r0, 800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800d7b4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d7b6:	686b      	ldr	r3, [r5, #4]
 800d7b8:	069b      	lsls	r3, r3, #26
 800d7ba:	f100 80ca 	bmi.w	800d952 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800d7be:	1e20      	subs	r0, r4, #0
 800d7c0:	bf18      	it	ne
 800d7c2:	2001      	movne	r0, #1
}
 800d7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d7c8:	2101      	movs	r1, #1
 800d7ca:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d7ce:	f7ff fb47 	bl	800ce60 <RCCEx_PLL3_Config>
 800d7d2:	e6ac      	b.n	800d52e <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d7d4:	2601      	movs	r6, #1
 800d7d6:	4634      	mov	r4, r6
 800d7d8:	e6b5      	b.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800d7da:	4626      	mov	r6, r4
 800d7dc:	e6b3      	b.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800d7de:	bf00      	nop
 800d7e0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d7e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d7e8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800d7ec:	d003      	beq.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800d7ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7f2:	f47f aeba 	bne.w	800d56a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800d7f6:	b9ac      	cbnz	r4, 800d824 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d7f8:	4a5b      	ldr	r2, [pc, #364]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d7fa:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800d7fe:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d800:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800d804:	430b      	orrs	r3, r1
 800d806:	6553      	str	r3, [r2, #84]	@ 0x54
 800d808:	e6b1      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d80a:	2100      	movs	r1, #0
 800d80c:	f105 0008 	add.w	r0, r5, #8
 800d810:	f7ff faae 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d814:	4604      	mov	r4, r0
        break;
 800d816:	e7ee      	b.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d818:	2102      	movs	r1, #2
 800d81a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d81e:	f7ff fb1f 	bl	800ce60 <RCCEx_PLL3_Config>
 800d822:	e7f7      	b.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800d824:	4626      	mov	r6, r4
 800d826:	e6a2      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d828:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d82c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800d830:	d003      	beq.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800d832:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d836:	f47f aeac 	bne.w	800d592 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800d83a:	b9ac      	cbnz	r4, 800d868 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d83c:	4a4a      	ldr	r2, [pc, #296]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d83e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800d842:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d844:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800d848:	430b      	orrs	r3, r1
 800d84a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d84c:	e6a3      	b.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d84e:	2100      	movs	r1, #0
 800d850:	f105 0008 	add.w	r0, r5, #8
 800d854:	f7ff fa8c 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d858:	4604      	mov	r4, r0
        break;
 800d85a:	e7ee      	b.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d85c:	2102      	movs	r1, #2
 800d85e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d862:	f7ff fafd 	bl	800ce60 <RCCEx_PLL3_Config>
 800d866:	e7f7      	b.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800d868:	4626      	mov	r6, r4
 800d86a:	e694      	b.n	800d596 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d86c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d870:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800d874:	d003      	beq.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800d876:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d87a:	f47f ae9e 	bne.w	800d5ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800d87e:	b9ac      	cbnz	r4, 800d8ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d880:	4a39      	ldr	r2, [pc, #228]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d882:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800d886:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d888:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800d88c:	430b      	orrs	r3, r1
 800d88e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d890:	e695      	b.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d892:	2100      	movs	r1, #0
 800d894:	f105 0008 	add.w	r0, r5, #8
 800d898:	f7ff fa6a 	bl	800cd70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d89c:	4604      	mov	r4, r0
        break;
 800d89e:	e7ee      	b.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8a0:	2102      	movs	r1, #2
 800d8a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d8a6:	f7ff fadb 	bl	800ce60 <RCCEx_PLL3_Config>
 800d8aa:	e7f7      	b.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800d8ac:	4626      	mov	r6, r4
 800d8ae:	e686      	b.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8b0:	2102      	movs	r1, #2
 800d8b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d8b6:	f7ff fad3 	bl	800ce60 <RCCEx_PLL3_Config>
 800d8ba:	e6c3      	b.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800d8bc:	2601      	movs	r6, #1
 800d8be:	4634      	mov	r4, r6
 800d8c0:	e6cc      	b.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800d8c2:	4626      	mov	r6, r4
 800d8c4:	e6ca      	b.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8c6:	4a28      	ldr	r2, [pc, #160]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d8c8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d8ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d8d0:	b97c      	cbnz	r4, 800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d8d2:	4a25      	ldr	r2, [pc, #148]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d8d4:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800d8d8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d8da:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d8de:	430b      	orrs	r3, r1
 800d8e0:	6553      	str	r3, [r2, #84]	@ 0x54
 800d8e2:	e6ce      	b.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d8ea:	f7ff fab9 	bl	800ce60 <RCCEx_PLL3_Config>
 800d8ee:	4604      	mov	r4, r0
        break;
 800d8f0:	e7ee      	b.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800d8f2:	4626      	mov	r6, r4
 800d8f4:	e6c5      	b.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8f6:	4a1c      	ldr	r2, [pc, #112]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d8f8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d8fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d900:	b974      	cbnz	r4, 800d920 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d902:	4a19      	ldr	r2, [pc, #100]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d904:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800d906:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d90c:	430b      	orrs	r3, r1
 800d90e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d910:	e6c4      	b.n	800d69c <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d912:	2102      	movs	r1, #2
 800d914:	f105 0008 	add.w	r0, r5, #8
 800d918:	f7ff fa2a 	bl	800cd70 <RCCEx_PLL2_Config>
 800d91c:	4604      	mov	r4, r0
        break;
 800d91e:	e7ef      	b.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800d920:	4626      	mov	r6, r4
 800d922:	e6bb      	b.n	800d69c <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800d924:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800d928:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800d92c:	f47f aed1 	bne.w	800d6d2 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800d930:	2c00      	cmp	r4, #0
 800d932:	f47f aecf 	bne.w	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d936:	4c0c      	ldr	r4, [pc, #48]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d938:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d93a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d93e:	4302      	orrs	r2, r0
 800d940:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800d942:	4634      	mov	r4, r6
 800d944:	e6c6      	b.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d946:	4f08      	ldr	r7, [pc, #32]	@ (800d968 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d94a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d94e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800d950:	e7ee      	b.n	800d930 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d952:	2102      	movs	r1, #2
 800d954:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d958:	f7ff fa82 	bl	800ce60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d95c:	2800      	cmp	r0, #0
 800d95e:	f43f af2e 	beq.w	800d7be <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800d962:	2001      	movs	r0, #1
 800d964:	e72e      	b.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800d966:	bf00      	nop
 800d968:	58024400 	.word	0x58024400

0800d96c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d970:	4604      	mov	r4, r0
 800d972:	b1f0      	cbz	r0, 800d9b2 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d974:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800d978:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d97c:	b91b      	cbnz	r3, 800d986 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d97e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d982:	f7f3 fed3 	bl	800172c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d986:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d988:	1d21      	adds	r1, r4, #4
 800d98a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d98c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d990:	f000 fc29 	bl	800e1e6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d994:	6862      	ldr	r2, [r4, #4]
 800d996:	4629      	mov	r1, r5
 800d998:	6820      	ldr	r0, [r4, #0]
 800d99a:	f000 fc5c 	bl	800e256 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d99e:	4a06      	ldr	r2, [pc, #24]	@ (800d9b8 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800d9a0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800d9a2:	6813      	ldr	r3, [r2, #0]
 800d9a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d9a8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800d9b0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d9b2:	2001      	movs	r0, #1
 800d9b4:	e7fc      	b.n	800d9b0 <HAL_SDRAM_Init+0x44>
 800d9b6:	bf00      	nop
 800d9b8:	52004000 	.word	0x52004000

0800d9bc <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800d9c0:	f7f3 ff4e 	bl	8001860 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800d9c4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d9c8:	f000 fc7b 	bl	800e2c2 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800d9d2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800d9d6:	bd10      	pop	{r4, pc}

0800d9d8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d9d8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d9da:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d9de:	4605      	mov	r5, r0
 800d9e0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d9e2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d9e4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800d9e6:	d010      	beq.n	800da0a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d9e8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800d9ec:	2c01      	cmp	r4, #1
 800d9ee:	d110      	bne.n	800da12 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9f0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d9f2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d9f4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d9f8:	f000 fc72 	bl	800e2e0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d9fc:	6833      	ldr	r3, [r6, #0]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d104      	bne.n	800da0c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800da02:	2305      	movs	r3, #5
 800da04:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800da08:	2000      	movs	r0, #0
}
 800da0a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800da0c:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800da10:	e7fa      	b.n	800da08 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800da12:	2001      	movs	r0, #1
 800da14:	e7f9      	b.n	800da0a <HAL_SDRAM_SendCommand+0x32>

0800da16 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800da16:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800da18:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800da1c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800da1e:	2b02      	cmp	r3, #2
 800da20:	b2d8      	uxtb	r0, r3
 800da22:	d00d      	beq.n	800da40 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800da24:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800da28:	2b01      	cmp	r3, #1
 800da2a:	b2dd      	uxtb	r5, r3
 800da2c:	d109      	bne.n	800da42 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da2e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800da30:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da32:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800da36:	f000 fc65 	bl	800e304 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800da3a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800da3c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800da40:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800da42:	2001      	movs	r0, #1
 800da44:	e7fc      	b.n	800da40 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800da46 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800da46:	6803      	ldr	r3, [r0, #0]
 800da48:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800da4a:	699a      	ldr	r2, [r3, #24]
 800da4c:	f042 0208 	orr.w	r2, r2, #8
 800da50:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	f042 0210 	orr.w	r2, r2, #16
 800da58:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	f022 0201 	bic.w	r2, r2, #1
 800da60:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800da62:	691a      	ldr	r2, [r3, #16]
 800da64:	f422 725b 	bic.w	r2, r2, #876	@ 0x36c
 800da68:	f022 0203 	bic.w	r2, r2, #3
 800da6c:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800da6e:	689a      	ldr	r2, [r3, #8]
 800da70:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800da74:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da76:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800da7a:	2a04      	cmp	r2, #4
 800da7c:	d00b      	beq.n	800da96 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800da7e:	068a      	lsls	r2, r1, #26
 800da80:	d509      	bpl.n	800da96 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800da82:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800da86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800da8a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800da8e:	699a      	ldr	r2, [r3, #24]
 800da90:	f042 0220 	orr.w	r2, r2, #32
 800da94:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800da96:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800da9a:	2a03      	cmp	r2, #3
 800da9c:	d00b      	beq.n	800dab6 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800da9e:	064a      	lsls	r2, r1, #25
 800daa0:	d509      	bpl.n	800dab6 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800daa2:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800daa6:	f042 0204 	orr.w	r2, r2, #4
 800daaa:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800daae:	699a      	ldr	r2, [r3, #24]
 800dab0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dab4:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800dab6:	058a      	lsls	r2, r1, #22
 800dab8:	d509      	bpl.n	800dace <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800daba:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800dabe:	f042 0201 	orr.w	r2, r2, #1
 800dac2:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dac6:	699a      	ldr	r2, [r3, #24]
 800dac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dacc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dace:	05ca      	lsls	r2, r1, #23
 800dad0:	d509      	bpl.n	800dae6 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dad2:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800dad6:	f042 0208 	orr.w	r2, r2, #8
 800dada:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dade:	699a      	ldr	r2, [r3, #24]
 800dae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dae4:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dae6:	2300      	movs	r3, #0
 800dae8:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800daec:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 800daf0:	4770      	bx	lr
	...

0800daf4 <HAL_SPI_Init>:
{
 800daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800daf6:	4604      	mov	r4, r0
 800daf8:	b908      	cbnz	r0, 800dafe <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800dafa:	2001      	movs	r0, #1
}
 800dafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dafe:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db00:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800db02:	494d      	ldr	r1, [pc, #308]	@ (800dc38 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db04:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800db06:	428a      	cmp	r2, r1
 800db08:	68c3      	ldr	r3, [r0, #12]
 800db0a:	d009      	beq.n	800db20 <HAL_SPI_Init+0x2c>
 800db0c:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 800db10:	428a      	cmp	r2, r1
 800db12:	d005      	beq.n	800db20 <HAL_SPI_Init+0x2c>
 800db14:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800db18:	428a      	cmp	r2, r1
 800db1a:	d001      	beq.n	800db20 <HAL_SPI_Init+0x2c>
 800db1c:	2b0f      	cmp	r3, #15
 800db1e:	d8ec      	bhi.n	800dafa <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800db20:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800db22:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800db24:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800db26:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800db28:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db2c:	4942      	ldr	r1, [pc, #264]	@ (800dc38 <HAL_SPI_Init+0x144>)
 800db2e:	428a      	cmp	r2, r1
 800db30:	d073      	beq.n	800dc1a <HAL_SPI_Init+0x126>
 800db32:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 800db36:	428a      	cmp	r2, r1
 800db38:	d06f      	beq.n	800dc1a <HAL_SPI_Init+0x126>
 800db3a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800db3e:	428a      	cmp	r2, r1
 800db40:	d06b      	beq.n	800dc1a <HAL_SPI_Init+0x126>
 800db42:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db44:	d8d9      	bhi.n	800dafa <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800db46:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800db4a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800db4e:	b923      	cbnz	r3, 800db5a <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 800db50:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800db52:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800db56:	f7f3 fd85 	bl	8001664 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800db5a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800db5c:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db5e:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800db60:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 800db64:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db66:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
  __HAL_SPI_DISABLE(hspi);
 800db68:	f023 0301 	bic.w	r3, r3, #1
 800db6c:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800db6e:	6893      	ldr	r3, [r2, #8]
 800db70:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db74:	69a3      	ldr	r3, [r4, #24]
 800db76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db7a:	d104      	bne.n	800db86 <HAL_SPI_Init+0x92>
 800db7c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800db80:	d14d      	bne.n	800dc1e <HAL_SPI_Init+0x12a>
 800db82:	2e00      	cmp	r6, #0
 800db84:	d050      	beq.n	800dc28 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800db86:	f411 0080 	ands.w	r0, r1, #4194304	@ 0x400000
 800db8a:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800db8c:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800db8e:	d050      	beq.n	800dc32 <HAL_SPI_Init+0x13e>
 800db90:	2d06      	cmp	r5, #6
 800db92:	d94e      	bls.n	800dc32 <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800db94:	f427 7e80 	bic.w	lr, r7, #256	@ 0x100
 800db98:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 800db9a:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800db9e:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dba0:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dba2:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dba4:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dba6:	433d      	orrs	r5, r7
 800dba8:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800dbaa:	433d      	orrs	r5, r7
 800dbac:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 800dbae:	433d      	orrs	r5, r7
 800dbb0:	ea45 050c 	orr.w	r5, r5, ip
 800dbb4:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dbb6:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800dbb8:	432b      	orrs	r3, r5
 800dbba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800dbbc:	432b      	orrs	r3, r5
 800dbbe:	6925      	ldr	r5, [r4, #16]
 800dbc0:	432b      	orrs	r3, r5
 800dbc2:	6965      	ldr	r5, [r4, #20]
 800dbc4:	432b      	orrs	r3, r5
 800dbc6:	6a25      	ldr	r5, [r4, #32]
 800dbc8:	432b      	orrs	r3, r5
 800dbca:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 800dbcc:	432b      	orrs	r3, r5
 800dbce:	68a5      	ldr	r5, [r4, #8]
 800dbd0:	432b      	orrs	r3, r5
 800dbd2:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800dbd4:	432b      	orrs	r3, r5
 800dbd6:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800dbd8:	432b      	orrs	r3, r5
 800dbda:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dbdc:	b959      	cbnz	r1, 800dbf6 <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dbde:	6893      	ldr	r3, [r2, #8]
 800dbe0:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800dbe4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800dbe8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dbea:	6893      	ldr	r3, [r2, #8]
 800dbec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800dbf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dbf4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dbf6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800dbf8:	f023 0301 	bic.w	r3, r3, #1
 800dbfc:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dbfe:	b128      	cbz	r0, 800dc0c <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc00:	68d3      	ldr	r3, [r2, #12]
 800dc02:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800dc04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc08:	430b      	orrs	r3, r1
 800dc0a:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc0c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800dc0e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc10:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc14:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  return HAL_OK;
 800dc18:	e770      	b.n	800dafc <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc1a:	2b10      	cmp	r3, #16
 800dc1c:	e792      	b.n	800db44 <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dc1e:	2900      	cmp	r1, #0
 800dc20:	d1b1      	bne.n	800db86 <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dc22:	f1b6 5f80 	cmp.w	r6, #268435456	@ 0x10000000
 800dc26:	d1ae      	bne.n	800db86 <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dc28:	6810      	ldr	r0, [r2, #0]
 800dc2a:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800dc2e:	6010      	str	r0, [r2, #0]
 800dc30:	e7a9      	b.n	800db86 <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dc32:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800dc36:	e7b2      	b.n	800db9e <HAL_SPI_Init+0xaa>
 800dc38:	40013000 	.word	0x40013000

0800dc3c <HAL_SPI_Transmit>:
{
 800dc3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc40:	4604      	mov	r4, r0
 800dc42:	461d      	mov	r5, r3
 800dc44:	4689      	mov	r9, r1
 800dc46:	4690      	mov	r8, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dc48:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 800dc4a:	f7fb f9cb 	bl	8008fe4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800dc4e:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 800dc52:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	b2d8      	uxtb	r0, r3
 800dc58:	f040 8108 	bne.w	800de6c <HAL_SPI_Transmit+0x230>
  if ((pData == NULL) || (Size == 0UL))
 800dc5c:	f1b9 0f00 	cmp.w	r9, #0
 800dc60:	f000 80a3 	beq.w	800ddaa <HAL_SPI_Transmit+0x16e>
 800dc64:	f1b8 0f00 	cmp.w	r8, #0
 800dc68:	f000 809f 	beq.w	800ddaa <HAL_SPI_Transmit+0x16e>
  __HAL_LOCK(hspi);
 800dc6c:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	f000 80fb 	beq.w	800de6c <HAL_SPI_Transmit+0x230>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc76:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc78:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 800dc7a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc7e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc82:	f5b2 2fc0 	cmp.w	r2, #393216	@ 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc86:	f04f 0300 	mov.w	r3, #0
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dc8a:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800dc8e:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc92:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pRxBuffPtr  = NULL;
 800dc96:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800dc98:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dc9c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dca0:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800dca4:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    SPI_1LINE_TX(hspi);
 800dca8:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcaa:	d139      	bne.n	800dd20 <HAL_SPI_Transmit+0xe4>
    SPI_1LINE_TX(hspi);
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dcb2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dcb4:	6859      	ldr	r1, [r3, #4]
 800dcb6:	0c09      	lsrs	r1, r1, #16
 800dcb8:	0409      	lsls	r1, r1, #16
 800dcba:	ea41 0108 	orr.w	r1, r1, r8
 800dcbe:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	f042 0201 	orr.w	r2, r2, #1
 800dcc6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dcc8:	6862      	ldr	r2, [r4, #4]
 800dcca:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800dcce:	d103      	bne.n	800dcd8 <HAL_SPI_Transmit+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dcd6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dcd8:	68e3      	ldr	r3, [r4, #12]
 800dcda:	2b0f      	cmp	r3, #15
 800dcdc:	d835      	bhi.n	800dd4a <HAL_SPI_Transmit+0x10e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dcde:	2b07      	cmp	r3, #7
 800dce0:	d87a      	bhi.n	800ddd8 <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0UL)
 800dce2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dce6:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d033      	beq.n	800dd56 <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dcee:	694b      	ldr	r3, [r1, #20]
 800dcf0:	0798      	lsls	r0, r3, #30
 800dcf2:	f140 80a1 	bpl.w	800de38 <HAL_SPI_Transmit+0x1fc>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dcf6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dcfa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	2b03      	cmp	r3, #3
 800dd00:	f240 8081 	bls.w	800de06 <HAL_SPI_Transmit+0x1ca>
 800dd04:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dd06:	2b40      	cmp	r3, #64	@ 0x40
 800dd08:	d97d      	bls.n	800de06 <HAL_SPI_Transmit+0x1ca>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dd0a:	f852 3b04 	ldr.w	r3, [r2], #4
 800dd0e:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 800dd10:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd14:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dd16:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800dd1e:	e7e0      	b.n	800dce2 <HAL_SPI_Transmit+0xa6>
    SPI_2LINES_TX(hspi);
 800dd20:	68da      	ldr	r2, [r3, #12]
 800dd22:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800dd26:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800dd2a:	60da      	str	r2, [r3, #12]
 800dd2c:	e7c2      	b.n	800dcb4 <HAL_SPI_Transmit+0x78>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd2e:	6953      	ldr	r3, [r2, #20]
 800dd30:	0798      	lsls	r0, r3, #30
 800dd32:	d523      	bpl.n	800dd7c <HAL_SPI_Transmit+0x140>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dd34:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800dd36:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd3a:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd3c:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 800dd3e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800dd42:	3b01      	subs	r3, #1
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800dd4a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd4e:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1eb      	bne.n	800dd2e <HAL_SPI_Transmit+0xf2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dd56:	6823      	ldr	r3, [r4, #0]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	071b      	lsls	r3, r3, #28
 800dd5c:	d576      	bpl.n	800de4c <HAL_SPI_Transmit+0x210>
  SPI_CloseTransfer(hspi);
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f7ff fe71 	bl	800da46 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800dd64:	2301      	movs	r3, #1
 800dd66:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 800dd6a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd6c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 800dd70:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd74:	1ac0      	subs	r0, r0, r3
 800dd76:	bf18      	it	ne
 800dd78:	2001      	movne	r0, #1
 800dd7a:	e016      	b.n	800ddaa <HAL_SPI_Transmit+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd7c:	f7fb f932 	bl	8008fe4 <HAL_GetTick>
 800dd80:	1b80      	subs	r0, r0, r6
 800dd82:	42a8      	cmp	r0, r5
 800dd84:	d3e1      	bcc.n	800dd4a <HAL_SPI_Transmit+0x10e>
 800dd86:	1c69      	adds	r1, r5, #1
 800dd88:	d0df      	beq.n	800dd4a <HAL_SPI_Transmit+0x10e>
          SPI_CloseTransfer(hspi);
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f7ff fe5b 	bl	800da46 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd90:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 800dd94:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd9a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 800dda4:	2300      	movs	r3, #0
 800dda6:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800ddaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ddae:	694b      	ldr	r3, [r1, #20]
 800ddb0:	079a      	lsls	r2, r3, #30
 800ddb2:	d520      	bpl.n	800ddf6 <HAL_SPI_Transmit+0x1ba>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ddb4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ddb8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ddba:	b292      	uxth	r2, r2
 800ddbc:	2a01      	cmp	r2, #1
 800ddbe:	d912      	bls.n	800dde6 <HAL_SPI_Transmit+0x1aa>
 800ddc0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ddc2:	b182      	cbz	r2, 800dde6 <HAL_SPI_Transmit+0x1aa>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ddc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc8:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddca:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ddcc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800ddd0:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800ddd8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dddc:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d1e4      	bne.n	800ddae <HAL_SPI_Transmit+0x172>
 800dde4:	e7b7      	b.n	800dd56 <HAL_SPI_Transmit+0x11a>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dde6:	f833 2b02 	ldrh.w	r2, [r3], #2
 800ddea:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddec:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ddee:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	e7ed      	b.n	800ddd2 <HAL_SPI_Transmit+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddf6:	f7fb f8f5 	bl	8008fe4 <HAL_GetTick>
 800ddfa:	1b80      	subs	r0, r0, r6
 800ddfc:	42a8      	cmp	r0, r5
 800ddfe:	d3eb      	bcc.n	800ddd8 <HAL_SPI_Transmit+0x19c>
 800de00:	1c6b      	adds	r3, r5, #1
 800de02:	d0e9      	beq.n	800ddd8 <HAL_SPI_Transmit+0x19c>
 800de04:	e7c1      	b.n	800dd8a <HAL_SPI_Transmit+0x14e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de06:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d909      	bls.n	800de24 <HAL_SPI_Transmit+0x1e8>
 800de10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de12:	b13b      	cbz	r3, 800de24 <HAL_SPI_Transmit+0x1e8>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800de14:	f832 3b02 	ldrh.w	r3, [r2], #2
 800de18:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 800de1a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de1e:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de20:	3b02      	subs	r3, #2
 800de22:	e779      	b.n	800dd18 <HAL_SPI_Transmit+0xdc>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800de24:	7813      	ldrb	r3, [r2, #0]
 800de26:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800de2a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800de2c:	3301      	adds	r3, #1
 800de2e:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800de30:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800de34:	3b01      	subs	r3, #1
 800de36:	e76f      	b.n	800dd18 <HAL_SPI_Transmit+0xdc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de38:	f7fb f8d4 	bl	8008fe4 <HAL_GetTick>
 800de3c:	1b80      	subs	r0, r0, r6
 800de3e:	42a8      	cmp	r0, r5
 800de40:	f4ff af4f 	bcc.w	800dce2 <HAL_SPI_Transmit+0xa6>
 800de44:	1c69      	adds	r1, r5, #1
 800de46:	f43f af4c 	beq.w	800dce2 <HAL_SPI_Transmit+0xa6>
 800de4a:	e79e      	b.n	800dd8a <HAL_SPI_Transmit+0x14e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de4c:	f7fb f8ca 	bl	8008fe4 <HAL_GetTick>
 800de50:	1b80      	subs	r0, r0, r6
 800de52:	4285      	cmp	r5, r0
 800de54:	f63f af7f 	bhi.w	800dd56 <HAL_SPI_Transmit+0x11a>
 800de58:	1c6a      	adds	r2, r5, #1
 800de5a:	f43f af7c 	beq.w	800dd56 <HAL_SPI_Transmit+0x11a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de5e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800de62:	f043 0320 	orr.w	r3, r3, #32
 800de66:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800de6a:	e778      	b.n	800dd5e <HAL_SPI_Transmit+0x122>
    return HAL_BUSY;
 800de6c:	2002      	movs	r0, #2
 800de6e:	e79c      	b.n	800ddaa <HAL_SPI_Transmit+0x16e>

0800de70 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800de70:	4770      	bx	lr
	...

0800de74 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800de74:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d12f      	bne.n	800dedc <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de7c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de7e:	4a18      	ldr	r2, [pc, #96]	@ (800dee0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800de80:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de84:	6803      	ldr	r3, [r0, #0]
 800de86:	4293      	cmp	r3, r2
 800de88:	d01a      	beq.n	800dec0 <HAL_TIM_Base_Start+0x4c>
 800de8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de8e:	d017      	beq.n	800dec0 <HAL_TIM_Base_Start+0x4c>
 800de90:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800de94:	4293      	cmp	r3, r2
 800de96:	d013      	beq.n	800dec0 <HAL_TIM_Base_Start+0x4c>
 800de98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d00f      	beq.n	800dec0 <HAL_TIM_Base_Start+0x4c>
 800dea0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d00b      	beq.n	800dec0 <HAL_TIM_Base_Start+0x4c>
 800dea8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800deac:	4293      	cmp	r3, r2
 800deae:	d007      	beq.n	800dec0 <HAL_TIM_Base_Start+0x4c>
 800deb0:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d003      	beq.n	800dec0 <HAL_TIM_Base_Start+0x4c>
 800deb8:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800debc:	4293      	cmp	r3, r2
 800debe:	d107      	bne.n	800ded0 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dec0:	6899      	ldr	r1, [r3, #8]
 800dec2:	4a08      	ldr	r2, [pc, #32]	@ (800dee4 <HAL_TIM_Base_Start+0x70>)
 800dec4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dec6:	2a06      	cmp	r2, #6
 800dec8:	d006      	beq.n	800ded8 <HAL_TIM_Base_Start+0x64>
 800deca:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800dece:	d003      	beq.n	800ded8 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	f042 0201 	orr.w	r2, r2, #1
 800ded6:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800ded8:	2000      	movs	r0, #0
 800deda:	4770      	bx	lr
    return HAL_ERROR;
 800dedc:	2001      	movs	r0, #1
}
 800dede:	4770      	bx	lr
 800dee0:	40010000 	.word	0x40010000
 800dee4:	00010007 	.word	0x00010007

0800dee8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dee8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800deec:	2b01      	cmp	r3, #1
 800deee:	d133      	bne.n	800df58 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800def0:	2302      	movs	r3, #2
 800def2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800def6:	6803      	ldr	r3, [r0, #0]
 800def8:	68da      	ldr	r2, [r3, #12]
 800defa:	f042 0201 	orr.w	r2, r2, #1
 800defe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df00:	4a16      	ldr	r2, [pc, #88]	@ (800df5c <HAL_TIM_Base_Start_IT+0x74>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d01a      	beq.n	800df3c <HAL_TIM_Base_Start_IT+0x54>
 800df06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df0a:	d017      	beq.n	800df3c <HAL_TIM_Base_Start_IT+0x54>
 800df0c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800df10:	4293      	cmp	r3, r2
 800df12:	d013      	beq.n	800df3c <HAL_TIM_Base_Start_IT+0x54>
 800df14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800df18:	4293      	cmp	r3, r2
 800df1a:	d00f      	beq.n	800df3c <HAL_TIM_Base_Start_IT+0x54>
 800df1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800df20:	4293      	cmp	r3, r2
 800df22:	d00b      	beq.n	800df3c <HAL_TIM_Base_Start_IT+0x54>
 800df24:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800df28:	4293      	cmp	r3, r2
 800df2a:	d007      	beq.n	800df3c <HAL_TIM_Base_Start_IT+0x54>
 800df2c:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800df30:	4293      	cmp	r3, r2
 800df32:	d003      	beq.n	800df3c <HAL_TIM_Base_Start_IT+0x54>
 800df34:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800df38:	4293      	cmp	r3, r2
 800df3a:	d107      	bne.n	800df4c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df3c:	6899      	ldr	r1, [r3, #8]
 800df3e:	4a08      	ldr	r2, [pc, #32]	@ (800df60 <HAL_TIM_Base_Start_IT+0x78>)
 800df40:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df42:	2a06      	cmp	r2, #6
 800df44:	d006      	beq.n	800df54 <HAL_TIM_Base_Start_IT+0x6c>
 800df46:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800df4a:	d003      	beq.n	800df54 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	f042 0201 	orr.w	r2, r2, #1
 800df52:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800df54:	2000      	movs	r0, #0
 800df56:	4770      	bx	lr
    return HAL_ERROR;
 800df58:	2001      	movs	r0, #1
}
 800df5a:	4770      	bx	lr
 800df5c:	40010000 	.word	0x40010000
 800df60:	00010007 	.word	0x00010007

0800df64 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800df64:	4770      	bx	lr

0800df66 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800df66:	4770      	bx	lr

0800df68 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800df68:	4770      	bx	lr

0800df6a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800df6a:	4770      	bx	lr

0800df6c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800df6c:	6803      	ldr	r3, [r0, #0]
{
 800df6e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800df70:	68dd      	ldr	r5, [r3, #12]
{
 800df72:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800df74:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800df76:	07b2      	lsls	r2, r6, #30
 800df78:	d50d      	bpl.n	800df96 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800df7a:	07a9      	lsls	r1, r5, #30
 800df7c:	d50b      	bpl.n	800df96 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800df7e:	f06f 0202 	mvn.w	r2, #2
 800df82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df84:	2201      	movs	r2, #1
 800df86:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df88:	699b      	ldr	r3, [r3, #24]
 800df8a:	079a      	lsls	r2, r3, #30
 800df8c:	d075      	beq.n	800e07a <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800df8e:	f7ff ffea 	bl	800df66 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df92:	2300      	movs	r3, #0
 800df94:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800df96:	0773      	lsls	r3, r6, #29
 800df98:	d510      	bpl.n	800dfbc <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800df9a:	0768      	lsls	r0, r5, #29
 800df9c:	d50e      	bpl.n	800dfbc <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800dfa4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dfa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dfa8:	2202      	movs	r2, #2
 800dfaa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dfac:	699b      	ldr	r3, [r3, #24]
 800dfae:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800dfb2:	d068      	beq.n	800e086 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800dfb4:	f7ff ffd7 	bl	800df66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dfbc:	0731      	lsls	r1, r6, #28
 800dfbe:	d50f      	bpl.n	800dfe0 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dfc0:	072a      	lsls	r2, r5, #28
 800dfc2:	d50d      	bpl.n	800dfe0 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800dfca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dfcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dfce:	2204      	movs	r2, #4
 800dfd0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dfd2:	69db      	ldr	r3, [r3, #28]
 800dfd4:	079b      	lsls	r3, r3, #30
 800dfd6:	d05c      	beq.n	800e092 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800dfd8:	f7ff ffc5 	bl	800df66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dfe0:	06f1      	lsls	r1, r6, #27
 800dfe2:	d510      	bpl.n	800e006 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dfe4:	06ea      	lsls	r2, r5, #27
 800dfe6:	d50e      	bpl.n	800e006 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800dfee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dff2:	2208      	movs	r2, #8
 800dff4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dff6:	69db      	ldr	r3, [r3, #28]
 800dff8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800dffc:	d04f      	beq.n	800e09e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800dffe:	f7ff ffb2 	bl	800df66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e002:	2300      	movs	r3, #0
 800e004:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e006:	07f3      	lsls	r3, r6, #31
 800e008:	d508      	bpl.n	800e01c <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e00a:	07e8      	lsls	r0, r5, #31
 800e00c:	d506      	bpl.n	800e01c <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800e014:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e016:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800e018:	f7f3 f8ec 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e01c:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800e020:	d008      	beq.n	800e034 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e022:	0629      	lsls	r1, r5, #24
 800e024:	d506      	bpl.n	800e034 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800e02c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e02e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800e030:	f000 f8d7 	bl	800e1e2 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e034:	05f2      	lsls	r2, r6, #23
 800e036:	d508      	bpl.n	800e04a <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e038:	062b      	lsls	r3, r5, #24
 800e03a:	d506      	bpl.n	800e04a <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e03c:	6823      	ldr	r3, [r4, #0]
 800e03e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800e042:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e044:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800e046:	f000 f8cd 	bl	800e1e4 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e04a:	0670      	lsls	r0, r6, #25
 800e04c:	d508      	bpl.n	800e060 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e04e:	0669      	lsls	r1, r5, #25
 800e050:	d506      	bpl.n	800e060 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800e058:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e05a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800e05c:	f7ff ff85 	bl	800df6a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e060:	06b2      	lsls	r2, r6, #26
 800e062:	d522      	bpl.n	800e0aa <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e064:	06ab      	lsls	r3, r5, #26
 800e066:	d520      	bpl.n	800e0aa <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800e06e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e070:	611a      	str	r2, [r3, #16]
}
 800e072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800e076:	f000 b8b3 	b.w	800e1e0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e07a:	f7ff ff73 	bl	800df64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e07e:	4620      	mov	r0, r4
 800e080:	f7ff ff72 	bl	800df68 <HAL_TIM_PWM_PulseFinishedCallback>
 800e084:	e785      	b.n	800df92 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e086:	f7ff ff6d 	bl	800df64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e08a:	4620      	mov	r0, r4
 800e08c:	f7ff ff6c 	bl	800df68 <HAL_TIM_PWM_PulseFinishedCallback>
 800e090:	e792      	b.n	800dfb8 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e092:	f7ff ff67 	bl	800df64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e096:	4620      	mov	r0, r4
 800e098:	f7ff ff66 	bl	800df68 <HAL_TIM_PWM_PulseFinishedCallback>
 800e09c:	e79e      	b.n	800dfdc <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e09e:	f7ff ff61 	bl	800df64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7ff ff60 	bl	800df68 <HAL_TIM_PWM_PulseFinishedCallback>
 800e0a8:	e7ab      	b.n	800e002 <HAL_TIM_IRQHandler+0x96>
}
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}

0800e0ac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0ac:	4a32      	ldr	r2, [pc, #200]	@ (800e178 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800e0ae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e0b0:	4290      	cmp	r0, r2
 800e0b2:	d012      	beq.n	800e0da <TIM_Base_SetConfig+0x2e>
 800e0b4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e0b8:	d00f      	beq.n	800e0da <TIM_Base_SetConfig+0x2e>
 800e0ba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800e0be:	4290      	cmp	r0, r2
 800e0c0:	d00b      	beq.n	800e0da <TIM_Base_SetConfig+0x2e>
 800e0c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e0c6:	4290      	cmp	r0, r2
 800e0c8:	d007      	beq.n	800e0da <TIM_Base_SetConfig+0x2e>
 800e0ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e0ce:	4290      	cmp	r0, r2
 800e0d0:	d003      	beq.n	800e0da <TIM_Base_SetConfig+0x2e>
 800e0d2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800e0d6:	4290      	cmp	r0, r2
 800e0d8:	d119      	bne.n	800e10e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800e0da:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e0dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800e0e0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e0e2:	4a25      	ldr	r2, [pc, #148]	@ (800e178 <TIM_Base_SetConfig+0xcc>)
 800e0e4:	4290      	cmp	r0, r2
 800e0e6:	d01d      	beq.n	800e124 <TIM_Base_SetConfig+0x78>
 800e0e8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e0ec:	d01a      	beq.n	800e124 <TIM_Base_SetConfig+0x78>
 800e0ee:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800e0f2:	4290      	cmp	r0, r2
 800e0f4:	d016      	beq.n	800e124 <TIM_Base_SetConfig+0x78>
 800e0f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e0fa:	4290      	cmp	r0, r2
 800e0fc:	d012      	beq.n	800e124 <TIM_Base_SetConfig+0x78>
 800e0fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e102:	4290      	cmp	r0, r2
 800e104:	d00e      	beq.n	800e124 <TIM_Base_SetConfig+0x78>
 800e106:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800e10a:	4290      	cmp	r0, r2
 800e10c:	d00a      	beq.n	800e124 <TIM_Base_SetConfig+0x78>
 800e10e:	4a1b      	ldr	r2, [pc, #108]	@ (800e17c <TIM_Base_SetConfig+0xd0>)
 800e110:	4290      	cmp	r0, r2
 800e112:	d007      	beq.n	800e124 <TIM_Base_SetConfig+0x78>
 800e114:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e118:	4290      	cmp	r0, r2
 800e11a:	d003      	beq.n	800e124 <TIM_Base_SetConfig+0x78>
 800e11c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e120:	4290      	cmp	r0, r2
 800e122:	d103      	bne.n	800e12c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e128:	68ca      	ldr	r2, [r1, #12]
 800e12a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e12c:	694a      	ldr	r2, [r1, #20]
 800e12e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e132:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e134:	688a      	ldr	r2, [r1, #8]
 800e136:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e138:	680a      	ldr	r2, [r1, #0]
 800e13a:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e13c:	4a0e      	ldr	r2, [pc, #56]	@ (800e178 <TIM_Base_SetConfig+0xcc>)
 800e13e:	4290      	cmp	r0, r2
 800e140:	d00f      	beq.n	800e162 <TIM_Base_SetConfig+0xb6>
 800e142:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e146:	4290      	cmp	r0, r2
 800e148:	d00b      	beq.n	800e162 <TIM_Base_SetConfig+0xb6>
 800e14a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800e14e:	4290      	cmp	r0, r2
 800e150:	d007      	beq.n	800e162 <TIM_Base_SetConfig+0xb6>
 800e152:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e156:	4290      	cmp	r0, r2
 800e158:	d003      	beq.n	800e162 <TIM_Base_SetConfig+0xb6>
 800e15a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e15e:	4290      	cmp	r0, r2
 800e160:	d101      	bne.n	800e166 <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e162:	690a      	ldr	r2, [r1, #16]
 800e164:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e166:	6802      	ldr	r2, [r0, #0]
 800e168:	f042 0204 	orr.w	r2, r2, #4
 800e16c:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e16e:	2201      	movs	r2, #1
 800e170:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800e172:	6003      	str	r3, [r0, #0]
}
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	40010000 	.word	0x40010000
 800e17c:	40014000 	.word	0x40014000

0800e180 <HAL_TIM_Base_Init>:
{
 800e180:	b510      	push	{r4, lr}
  if (htim == NULL)
 800e182:	4604      	mov	r4, r0
 800e184:	b350      	cbz	r0, 800e1dc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e186:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800e18a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800e18e:	b91b      	cbnz	r3, 800e198 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800e190:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800e194:	f7ff fe6c 	bl	800de70 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800e198:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e19a:	6820      	ldr	r0, [r4, #0]
 800e19c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800e19e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1a2:	f7ff ff83 	bl	800e0ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1a6:	2301      	movs	r3, #1
  return HAL_OK;
 800e1a8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1aa:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800e1b2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800e1b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800e1ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800e1be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e1c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1c6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e1ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e1ce:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800e1d2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e1d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800e1da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e1dc:	2001      	movs	r0, #1
 800e1de:	e7fc      	b.n	800e1da <HAL_TIM_Base_Init+0x5a>

0800e1e0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800e1e0:	4770      	bx	lr

0800e1e2 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800e1e2:	4770      	bx	lr

0800e1e4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800e1e4:	4770      	bx	lr

0800e1e6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800e1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e1ea:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800e1ee:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800e1f2:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800e1f6:	ea43 0308 	orr.w	r3, r3, r8
 800e1fa:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800e1fe:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e202:	6809      	ldr	r1, [r1, #0]
 800e204:	b991      	cbnz	r1, 800e22c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e206:	ea43 030e 	orr.w	r3, r3, lr
 800e20a:	6801      	ldr	r1, [r0, #0]
 800e20c:	4313      	orrs	r3, r2
 800e20e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800e212:	ea43 030c 	orr.w	r3, r3, ip
 800e216:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800e21a:	433b      	orrs	r3, r7
 800e21c:	4333      	orrs	r3, r6
 800e21e:	432b      	orrs	r3, r5
 800e220:	4323      	orrs	r3, r4
 800e222:	430b      	orrs	r3, r1
 800e224:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800e226:	2000      	movs	r0, #0
 800e228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e22c:	6801      	ldr	r1, [r0, #0]
 800e22e:	ea43 030e 	orr.w	r3, r3, lr
 800e232:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800e236:	430b      	orrs	r3, r1
 800e238:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e23a:	ea42 030c 	orr.w	r3, r2, ip
 800e23e:	6841      	ldr	r1, [r0, #4]
 800e240:	433b      	orrs	r3, r7
 800e242:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800e246:	4333      	orrs	r3, r6
 800e248:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800e24c:	432b      	orrs	r3, r5
 800e24e:	4323      	orrs	r3, r4
 800e250:	4313      	orrs	r3, r2
 800e252:	6043      	str	r3, [r0, #4]
 800e254:	e7e7      	b.n	800e226 <FMC_SDRAM_Init+0x40>

0800e256 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e256:	68cb      	ldr	r3, [r1, #12]
 800e258:	f103 3cff 	add.w	ip, r3, #4294967295
 800e25c:	694b      	ldr	r3, [r1, #20]
{
 800e25e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e260:	3b01      	subs	r3, #1
 800e262:	680f      	ldr	r7, [r1, #0]
 800e264:	684c      	ldr	r4, [r1, #4]
 800e266:	688e      	ldr	r6, [r1, #8]
 800e268:	051b      	lsls	r3, r3, #20
 800e26a:	690d      	ldr	r5, [r1, #16]
 800e26c:	3c01      	subs	r4, #1
 800e26e:	6989      	ldr	r1, [r1, #24]
 800e270:	3e01      	subs	r6, #1
 800e272:	3d01      	subs	r5, #1
 800e274:	3f01      	subs	r7, #1
 800e276:	3901      	subs	r1, #1
 800e278:	0124      	lsls	r4, r4, #4
 800e27a:	0236      	lsls	r6, r6, #8
 800e27c:	042d      	lsls	r5, r5, #16
 800e27e:	0609      	lsls	r1, r1, #24
 800e280:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800e284:	b95a      	cbnz	r2, 800e29e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e286:	433b      	orrs	r3, r7
 800e288:	6882      	ldr	r2, [r0, #8]
 800e28a:	4323      	orrs	r3, r4
 800e28c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800e290:	4333      	orrs	r3, r6
 800e292:	432b      	orrs	r3, r5
 800e294:	430b      	orrs	r3, r1
 800e296:	4313      	orrs	r3, r2
 800e298:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800e29a:	2000      	movs	r0, #0
 800e29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e29e:	6882      	ldr	r2, [r0, #8]
 800e2a0:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800e2a4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800e2a8:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e2aa:	ea44 0306 	orr.w	r3, r4, r6
 800e2ae:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e2b0:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e2b2:	68c2      	ldr	r2, [r0, #12]
 800e2b4:	432b      	orrs	r3, r5
 800e2b6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800e2ba:	430b      	orrs	r3, r1
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	60c3      	str	r3, [r0, #12]
 800e2c0:	e7eb      	b.n	800e29a <FMC_SDRAM_Timing_Init+0x44>

0800e2c2 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800e2c8:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800e2cc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800e2d0:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800e2d2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e2d6:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800e2d8:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800e2da:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800e2dc:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800e2de:	4770      	bx	lr

0800e2e0 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e2e0:	6902      	ldr	r2, [r0, #16]
{
 800e2e2:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e2e4:	e9d1 3400 	ldrd	r3, r4, [r1]
 800e2e8:	0d92      	lsrs	r2, r2, #22
 800e2ea:	4323      	orrs	r3, r4
 800e2ec:	68cc      	ldr	r4, [r1, #12]
 800e2ee:	0592      	lsls	r2, r2, #22
 800e2f0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	688a      	ldr	r2, [r1, #8]
 800e2f8:	3a01      	subs	r2, #1
 800e2fa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800e2fe:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800e300:	2000      	movs	r0, #0
 800e302:	bd10      	pop	{r4, pc}

0800e304 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e304:	6943      	ldr	r3, [r0, #20]
 800e306:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800e30a:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800e30e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800e312:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800e314:	2000      	movs	r0, #0
 800e316:	4770      	bx	lr

0800e318 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e318:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800e31a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e31e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e320:	f001 fee2 	bl	80100e8 <xTaskGetSchedulerState>
 800e324:	2801      	cmp	r0, #1
 800e326:	d003      	beq.n	800e330 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800e328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800e32c:	f000 bc4a 	b.w	800ebc4 <xPortSysTickHandler>
}
 800e330:	bd08      	pop	{r3, pc}
	...

0800e334 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e334:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800e338:	b92b      	cbnz	r3, 800e346 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800e33a:	4b06      	ldr	r3, [pc, #24]	@ (800e354 <osKernelInitialize+0x20>)
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	b928      	cbnz	r0, 800e34c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e340:	2201      	movs	r2, #1
 800e342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e344:	4770      	bx	lr
    stat = osErrorISR;
 800e346:	f06f 0005 	mvn.w	r0, #5
 800e34a:	4770      	bx	lr
    } else {
      stat = osError;
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	2400d6d8 	.word	0x2400d6d8

0800e358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e358:	b510      	push	{r4, lr}
 800e35a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800e35e:	b95c      	cbnz	r4, 800e378 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800e360:	4b08      	ldr	r3, [pc, #32]	@ (800e384 <osKernelStart+0x2c>)
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	2a01      	cmp	r2, #1
 800e366:	d10a      	bne.n	800e37e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e368:	4a07      	ldr	r2, [pc, #28]	@ (800e388 <osKernelStart+0x30>)
 800e36a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e36c:	2202      	movs	r2, #2
 800e36e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e370:	f001 fd5a 	bl	800fe28 <vTaskStartScheduler>
      stat = osOK;
 800e374:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800e376:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800e378:	f06f 0005 	mvn.w	r0, #5
 800e37c:	e7fb      	b.n	800e376 <osKernelStart+0x1e>
      stat = osError;
 800e37e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800e382:	e7f8      	b.n	800e376 <osKernelStart+0x1e>
 800e384:	2400d6d8 	.word	0x2400d6d8
 800e388:	e000ed00 	.word	0xe000ed00

0800e38c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e38e:	4614      	mov	r4, r2
 800e390:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e392:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e394:	460b      	mov	r3, r1
  hTask = NULL;
 800e396:	9205      	str	r2, [sp, #20]
 800e398:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800e39c:	b9ca      	cbnz	r2, 800e3d2 <osThreadNew+0x46>
 800e39e:	b1c0      	cbz	r0, 800e3d2 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800e3a0:	b36c      	cbz	r4, 800e3fe <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800e3a2:	69a5      	ldr	r5, [r4, #24]
 800e3a4:	2d00      	cmp	r5, #0
 800e3a6:	bf08      	it	eq
 800e3a8:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e3aa:	1e69      	subs	r1, r5, #1
 800e3ac:	46ac      	mov	ip, r5
 800e3ae:	2937      	cmp	r1, #55	@ 0x37
 800e3b0:	d82a      	bhi.n	800e408 <osThreadNew+0x7c>
 800e3b2:	6861      	ldr	r1, [r4, #4]
 800e3b4:	07c9      	lsls	r1, r1, #31
 800e3b6:	d427      	bmi.n	800e408 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800e3b8:	6966      	ldr	r6, [r4, #20]
 800e3ba:	b16e      	cbz	r6, 800e3d8 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e3bc:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800e3be:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e3c0:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800e3c4:	b157      	cbz	r7, 800e3dc <osThreadNew+0x50>
 800e3c6:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800e3ca:	d902      	bls.n	800e3d2 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e3cc:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e3ce:	b104      	cbz	r4, 800e3d2 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e3d0:	b9e6      	cbnz	r6, 800e40c <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e3d2:	9805      	ldr	r0, [sp, #20]
}
 800e3d4:	b007      	add	sp, #28
 800e3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800e3d8:	2280      	movs	r2, #128	@ 0x80
 800e3da:	e7f0      	b.n	800e3be <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e3dc:	f1be 0f00 	cmp.w	lr, #0
 800e3e0:	d1f7      	bne.n	800e3d2 <osThreadNew+0x46>
      if (mem == 0) {
 800e3e2:	6924      	ldr	r4, [r4, #16]
 800e3e4:	2c00      	cmp	r4, #0
 800e3e6:	d1f4      	bne.n	800e3d2 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e3e8:	ac05      	add	r4, sp, #20
 800e3ea:	b292      	uxth	r2, r2
 800e3ec:	e9cd c400 	strd	ip, r4, [sp]
 800e3f0:	f001 fbb7 	bl	800fb62 <xTaskCreate>
 800e3f4:	2801      	cmp	r0, #1
            hTask = NULL;
 800e3f6:	bf1c      	itt	ne
 800e3f8:	2300      	movne	r3, #0
 800e3fa:	9305      	strne	r3, [sp, #20]
 800e3fc:	e7e9      	b.n	800e3d2 <osThreadNew+0x46>
    name = NULL;
 800e3fe:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800e400:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800e404:	2280      	movs	r2, #128	@ 0x80
 800e406:	e7ef      	b.n	800e3e8 <osThreadNew+0x5c>
        return (NULL);
 800e408:	4610      	mov	r0, r2
 800e40a:	e7e3      	b.n	800e3d4 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e40c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800e410:	9500      	str	r5, [sp, #0]
 800e412:	f001 fb6e 	bl	800faf2 <xTaskCreateStatic>
 800e416:	9005      	str	r0, [sp, #20]
 800e418:	e7db      	b.n	800e3d2 <osThreadNew+0x46>

0800e41a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e41a:	b570      	push	{r4, r5, r6, lr}
 800e41c:	4605      	mov	r5, r0
 800e41e:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800e422:	b116      	cbz	r6, 800e42a <osMutexNew+0x10>
  hMutex = NULL;
 800e424:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800e426:	4620      	mov	r0, r4
 800e428:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800e42a:	b110      	cbz	r0, 800e432 <osMutexNew+0x18>
      type = attr->attr_bits;
 800e42c:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800e42e:	0733      	lsls	r3, r6, #28
 800e430:	d4f8      	bmi.n	800e424 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e432:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800e436:	b17d      	cbz	r5, 800e458 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e438:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800e43c:	b151      	cbz	r1, 800e454 <osMutexNew+0x3a>
 800e43e:	2b4f      	cmp	r3, #79	@ 0x4f
 800e440:	d9f0      	bls.n	800e424 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800e442:	b1de      	cbz	r6, 800e47c <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e444:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e446:	f000 fec6 	bl	800f1d6 <xQueueCreateMutexStatic>
 800e44a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d0e9      	beq.n	800e424 <osMutexNew+0xa>
          name = attr->name;
 800e450:	682d      	ldr	r5, [r5, #0]
 800e452:	e00a      	b.n	800e46a <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e454:	2b00      	cmp	r3, #0
 800e456:	d1e5      	bne.n	800e424 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800e458:	b196      	cbz	r6, 800e480 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e45a:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800e45c:	f000 feef 	bl	800f23e <xQueueCreateMutex>
 800e460:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800e462:	2800      	cmp	r0, #0
 800e464:	d0de      	beq.n	800e424 <osMutexNew+0xa>
        if (attr != NULL) {
 800e466:	2d00      	cmp	r5, #0
 800e468:	d1f2      	bne.n	800e450 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800e46a:	4629      	mov	r1, r5
 800e46c:	4620      	mov	r0, r4
 800e46e:	f001 f97b 	bl	800f768 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e472:	2e00      	cmp	r6, #0
 800e474:	d0d7      	beq.n	800e426 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e476:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800e47a:	e7d4      	b.n	800e426 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e47c:	2001      	movs	r0, #1
 800e47e:	e7e2      	b.n	800e446 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800e480:	2001      	movs	r0, #1
 800e482:	e7eb      	b.n	800e45c <osMutexNew+0x42>

0800e484 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4603      	mov	r3, r0
 800e488:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e48a:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800e48e:	f003 0201 	and.w	r2, r3, #1
 800e492:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800e496:	b995      	cbnz	r5, 800e4be <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d913      	bls.n	800e4c4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800e49c:	b162      	cbz	r2, 800e4b8 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e49e:	f001 f8f4 	bl	800f68a <xQueueTakeMutexRecursive>
 800e4a2:	2801      	cmp	r0, #1
 800e4a4:	d101      	bne.n	800e4aa <osMutexAcquire+0x26>
  stat = osOK;
 800e4a6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e4a8:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800e4aa:	2c00      	cmp	r4, #0
 800e4ac:	bf14      	ite	ne
 800e4ae:	f06f 0001 	mvnne.w	r0, #1
 800e4b2:	f06f 0002 	mvneq.w	r0, #2
 800e4b6:	e7f7      	b.n	800e4a8 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e4b8:	f001 f82a 	bl	800f510 <xQueueSemaphoreTake>
 800e4bc:	e7f1      	b.n	800e4a2 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800e4be:	f06f 0005 	mvn.w	r0, #5
 800e4c2:	e7f1      	b.n	800e4a8 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800e4c4:	f06f 0003 	mvn.w	r0, #3
 800e4c8:	e7ee      	b.n	800e4a8 <osMutexAcquire+0x24>

0800e4ca <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e4ca:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e4cc:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e4d0:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800e4d2:	f002 0301 	and.w	r3, r2, #1
 800e4d6:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800e4da:	b979      	cbnz	r1, 800e4fc <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800e4dc:	2a01      	cmp	r2, #1
 800e4de:	d910      	bls.n	800e502 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800e4e0:	b13b      	cbz	r3, 800e4f2 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e4e2:	f000 fe8d 	bl	800f200 <xQueueGiveMutexRecursive>
 800e4e6:	2801      	cmp	r0, #1
  stat = osOK;
 800e4e8:	bf0c      	ite	eq
 800e4ea:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800e4ec:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e4f0:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	f000 fdbc 	bl	800f072 <xQueueGenericSend>
 800e4fa:	e7f4      	b.n	800e4e6 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800e4fc:	f06f 0005 	mvn.w	r0, #5
 800e500:	e7f6      	b.n	800e4f0 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800e502:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e506:	e7f3      	b.n	800e4f0 <osMutexRelease+0x26>

0800e508 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e50a:	4604      	mov	r4, r0
 800e50c:	460e      	mov	r6, r1
 800e50e:	4615      	mov	r5, r2
 800e510:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e514:	b942      	cbnz	r2, 800e528 <osSemaphoreNew+0x20>
 800e516:	b138      	cbz	r0, 800e528 <osSemaphoreNew+0x20>
 800e518:	4288      	cmp	r0, r1
 800e51a:	d305      	bcc.n	800e528 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800e51c:	b155      	cbz	r5, 800e534 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e51e:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800e522:	b12b      	cbz	r3, 800e530 <osSemaphoreNew+0x28>
 800e524:	2f4f      	cmp	r7, #79	@ 0x4f
 800e526:	d822      	bhi.n	800e56e <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800e528:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800e52a:	4620      	mov	r0, r4
 800e52c:	b003      	add	sp, #12
 800e52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e530:	2f00      	cmp	r7, #0
 800e532:	d1f9      	bne.n	800e528 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800e534:	2c01      	cmp	r4, #1
 800e536:	d00c      	beq.n	800e552 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e538:	4620      	mov	r0, r4
 800e53a:	4631      	mov	r1, r6
 800e53c:	f000 fd7b 	bl	800f036 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800e540:	4604      	mov	r4, r0
 800e542:	2800      	cmp	r0, #0
 800e544:	d0f0      	beq.n	800e528 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800e546:	b985      	cbnz	r5, 800e56a <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800e548:	4629      	mov	r1, r5
 800e54a:	4620      	mov	r0, r4
 800e54c:	f001 f90c 	bl	800f768 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800e550:	e7eb      	b.n	800e52a <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800e552:	2203      	movs	r2, #3
 800e554:	2100      	movs	r1, #0
 800e556:	2001      	movs	r0, #1
 800e558:	f000 fd24 	bl	800efa4 <xQueueGenericCreate>
 800e55c:	e00e      	b.n	800e57c <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e55e:	461a      	mov	r2, r3
 800e560:	f000 fd47 	bl	800eff2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800e564:	4604      	mov	r4, r0
 800e566:	2800      	cmp	r0, #0
 800e568:	d0de      	beq.n	800e528 <osSemaphoreNew+0x20>
          name = attr->name;
 800e56a:	682d      	ldr	r5, [r5, #0]
 800e56c:	e7ec      	b.n	800e548 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800e56e:	2801      	cmp	r0, #1
 800e570:	d1f5      	bne.n	800e55e <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e572:	2103      	movs	r1, #3
 800e574:	9100      	str	r1, [sp, #0]
 800e576:	4611      	mov	r1, r2
 800e578:	f000 fcc6 	bl	800ef08 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800e57c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e57e:	2800      	cmp	r0, #0
 800e580:	d0d2      	beq.n	800e528 <osSemaphoreNew+0x20>
 800e582:	2e00      	cmp	r6, #0
 800e584:	d0df      	beq.n	800e546 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e586:	2300      	movs	r3, #0
 800e588:	461a      	mov	r2, r3
 800e58a:	4619      	mov	r1, r3
 800e58c:	f000 fd71 	bl	800f072 <xQueueGenericSend>
 800e590:	2801      	cmp	r0, #1
 800e592:	d0d8      	beq.n	800e546 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800e594:	4620      	mov	r0, r4
 800e596:	f001 f911 	bl	800f7bc <vQueueDelete>
      if (hSemaphore != NULL) {
 800e59a:	e7c5      	b.n	800e528 <osSemaphoreNew+0x20>

0800e59c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e59c:	b513      	push	{r0, r1, r4, lr}
 800e59e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e5a0:	b328      	cbz	r0, 800e5ee <osSemaphoreAcquire+0x52>
 800e5a2:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e5a6:	b1cb      	cbz	r3, 800e5dc <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800e5a8:	bb09      	cbnz	r1, 800e5ee <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e5aa:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e5ac:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e5ae:	f001 f88d 	bl	800f6cc <xQueueReceiveFromISR>
 800e5b2:	2801      	cmp	r0, #1
 800e5b4:	d003      	beq.n	800e5be <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800e5b6:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e5ba:	b002      	add	sp, #8
 800e5bc:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800e5be:	9b01      	ldr	r3, [sp, #4]
 800e5c0:	b90b      	cbnz	r3, 800e5c6 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	e7f9      	b.n	800e5ba <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800e5c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e5ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	e7f2      	b.n	800e5c2 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e5dc:	f000 ff98 	bl	800f510 <xQueueSemaphoreTake>
 800e5e0:	2801      	cmp	r0, #1
 800e5e2:	d0ee      	beq.n	800e5c2 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800e5e4:	2c00      	cmp	r4, #0
 800e5e6:	d0e6      	beq.n	800e5b6 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800e5e8:	f06f 0001 	mvn.w	r0, #1
 800e5ec:	e7e5      	b.n	800e5ba <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800e5ee:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e5f2:	e7e2      	b.n	800e5ba <osSemaphoreAcquire+0x1e>

0800e5f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e5f4:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e5f6:	b318      	cbz	r0, 800e640 <osSemaphoreRelease+0x4c>
 800e5f8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e5fc:	b1cb      	cbz	r3, 800e632 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800e5fe:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e600:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800e602:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e604:	f000 fe95 	bl	800f332 <xQueueGiveFromISR>
 800e608:	2801      	cmp	r0, #1
 800e60a:	d004      	beq.n	800e616 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800e60c:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800e610:	b003      	add	sp, #12
 800e612:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800e616:	9b01      	ldr	r3, [sp, #4]
 800e618:	b14b      	cbz	r3, 800e62e <osSemaphoreRelease+0x3a>
 800e61a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e622:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800e62e:	2000      	movs	r0, #0
 800e630:	e7ee      	b.n	800e610 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e632:	461a      	mov	r2, r3
 800e634:	4619      	mov	r1, r3
 800e636:	f000 fd1c 	bl	800f072 <xQueueGenericSend>
 800e63a:	2801      	cmp	r0, #1
 800e63c:	d0f7      	beq.n	800e62e <osSemaphoreRelease+0x3a>
 800e63e:	e7e5      	b.n	800e60c <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800e640:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e644:	e7e4      	b.n	800e610 <osSemaphoreRelease+0x1c>

0800e646 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e648:	4605      	mov	r5, r0
 800e64a:	460e      	mov	r6, r1
 800e64c:	4614      	mov	r4, r2
 800e64e:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e652:	b11f      	cbz	r7, 800e65c <osMessageQueueNew+0x16>
  hQueue = NULL;
 800e654:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800e656:	4628      	mov	r0, r5
 800e658:	b003      	add	sp, #12
 800e65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d0f9      	beq.n	800e654 <osMessageQueueNew+0xe>
 800e660:	2900      	cmp	r1, #0
 800e662:	d0f7      	beq.n	800e654 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800e664:	b1da      	cbz	r2, 800e69e <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e666:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800e66a:	b183      	cbz	r3, 800e68e <osMessageQueueNew+0x48>
 800e66c:	2a4f      	cmp	r2, #79	@ 0x4f
 800e66e:	d9f1      	bls.n	800e654 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e670:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e672:	2a00      	cmp	r2, #0
 800e674:	d0ee      	beq.n	800e654 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e676:	434d      	muls	r5, r1
 800e678:	6966      	ldr	r6, [r4, #20]
 800e67a:	42ae      	cmp	r6, r5
 800e67c:	d3ea      	bcc.n	800e654 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e67e:	9700      	str	r7, [sp, #0]
 800e680:	f000 fc42 	bl	800ef08 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800e684:	4605      	mov	r5, r0
 800e686:	2800      	cmp	r0, #0
 800e688:	d0e4      	beq.n	800e654 <osMessageQueueNew+0xe>
        name = attr->name;
 800e68a:	6824      	ldr	r4, [r4, #0]
 800e68c:	e011      	b.n	800e6b2 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e68e:	2a00      	cmp	r2, #0
 800e690:	d1e0      	bne.n	800e654 <osMessageQueueNew+0xe>
 800e692:	6923      	ldr	r3, [r4, #16]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1dd      	bne.n	800e654 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e698:	6963      	ldr	r3, [r4, #20]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1da      	bne.n	800e654 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800e69e:	4628      	mov	r0, r5
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	4631      	mov	r1, r6
 800e6a4:	f000 fc7e 	bl	800efa4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	d0d2      	beq.n	800e654 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800e6ae:	2c00      	cmp	r4, #0
 800e6b0:	d1eb      	bne.n	800e68a <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f001 f857 	bl	800f768 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800e6ba:	e7cc      	b.n	800e656 <osMessageQueueNew+0x10>

0800e6bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e6bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6be:	461c      	mov	r4, r3
 800e6c0:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e6c4:	b1de      	cbz	r6, 800e6fe <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e6c6:	b338      	cbz	r0, 800e718 <osMessageQueuePut+0x5c>
 800e6c8:	b331      	cbz	r1, 800e718 <osMessageQueuePut+0x5c>
 800e6ca:	bb2b      	cbnz	r3, 800e718 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e6cc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e6ce:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e6d0:	f000 fdd2 	bl	800f278 <xQueueGenericSendFromISR>
 800e6d4:	2801      	cmp	r0, #1
 800e6d6:	d003      	beq.n	800e6e0 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800e6d8:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e6dc:	b002      	add	sp, #8
 800e6de:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800e6e0:	9b01      	ldr	r3, [sp, #4]
 800e6e2:	b90b      	cbnz	r3, 800e6e8 <osMessageQueuePut+0x2c>
  stat = osOK;
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	e7f9      	b.n	800e6dc <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800e6e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e6ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	e7f2      	b.n	800e6e4 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e6fe:	b158      	cbz	r0, 800e718 <osMessageQueuePut+0x5c>
 800e700:	b151      	cbz	r1, 800e718 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e702:	4633      	mov	r3, r6
 800e704:	4622      	mov	r2, r4
 800e706:	f000 fcb4 	bl	800f072 <xQueueGenericSend>
 800e70a:	2801      	cmp	r0, #1
 800e70c:	d0ea      	beq.n	800e6e4 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800e70e:	2c00      	cmp	r4, #0
 800e710:	d0e2      	beq.n	800e6d8 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800e712:	f06f 0001 	mvn.w	r0, #1
 800e716:	e7e1      	b.n	800e6dc <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800e718:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e71c:	e7de      	b.n	800e6dc <osMessageQueuePut+0x20>

0800e71e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e71e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e720:	461c      	mov	r4, r3
 800e722:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e726:	b1db      	cbz	r3, 800e760 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e728:	b330      	cbz	r0, 800e778 <osMessageQueueGet+0x5a>
 800e72a:	b329      	cbz	r1, 800e778 <osMessageQueueGet+0x5a>
 800e72c:	bb24      	cbnz	r4, 800e778 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e72e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e730:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e732:	f000 ffcb 	bl	800f6cc <xQueueReceiveFromISR>
 800e736:	2801      	cmp	r0, #1
 800e738:	d003      	beq.n	800e742 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800e73a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800e73e:	b003      	add	sp, #12
 800e740:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800e742:	9b01      	ldr	r3, [sp, #4]
 800e744:	b90b      	cbnz	r3, 800e74a <osMessageQueueGet+0x2c>
  stat = osOK;
 800e746:	2000      	movs	r0, #0
 800e748:	e7f9      	b.n	800e73e <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800e74a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e752:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	e7f2      	b.n	800e746 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e760:	b150      	cbz	r0, 800e778 <osMessageQueueGet+0x5a>
 800e762:	b149      	cbz	r1, 800e778 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e764:	4622      	mov	r2, r4
 800e766:	f000 fe35 	bl	800f3d4 <xQueueReceive>
 800e76a:	2801      	cmp	r0, #1
 800e76c:	d0eb      	beq.n	800e746 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800e76e:	2c00      	cmp	r4, #0
 800e770:	d0e3      	beq.n	800e73a <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800e772:	f06f 0001 	mvn.w	r0, #1
 800e776:	e7e2      	b.n	800e73e <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800e778:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e77c:	e7df      	b.n	800e73e <osMessageQueueGet+0x20>
	...

0800e780 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e780:	4b03      	ldr	r3, [pc, #12]	@ (800e790 <vApplicationGetIdleTaskMemory+0x10>)
 800e782:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e784:	4b03      	ldr	r3, [pc, #12]	@ (800e794 <vApplicationGetIdleTaskMemory+0x14>)
 800e786:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e788:	2380      	movs	r3, #128	@ 0x80
 800e78a:	6013      	str	r3, [r2, #0]
}
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	2400d678 	.word	0x2400d678
 800e794:	2400d478 	.word	0x2400d478

0800e798 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e798:	4b03      	ldr	r3, [pc, #12]	@ (800e7a8 <vApplicationGetTimerTaskMemory+0x10>)
 800e79a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e79c:	4b03      	ldr	r3, [pc, #12]	@ (800e7ac <vApplicationGetTimerTaskMemory+0x14>)
 800e79e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e7a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7a4:	6013      	str	r3, [r2, #0]
}
 800e7a6:	4770      	bx	lr
 800e7a8:	2400d418 	.word	0x2400d418
 800e7ac:	2400d018 	.word	0x2400d018

0800e7b0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7b0:	4b10      	ldr	r3, [pc, #64]	@ (800e7f4 <prvInsertBlockIntoFreeList+0x44>)
{
 800e7b2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4283      	cmp	r3, r0
 800e7ba:	d3fb      	bcc.n	800e7b4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7bc:	6854      	ldr	r4, [r2, #4]
 800e7be:	1911      	adds	r1, r2, r4
 800e7c0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7c2:	bf01      	itttt	eq
 800e7c4:	6841      	ldreq	r1, [r0, #4]
 800e7c6:	4610      	moveq	r0, r2
 800e7c8:	1909      	addeq	r1, r1, r4
 800e7ca:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7cc:	6844      	ldr	r4, [r0, #4]
 800e7ce:	1901      	adds	r1, r0, r4
 800e7d0:	428b      	cmp	r3, r1
 800e7d2:	d10c      	bne.n	800e7ee <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7d4:	4908      	ldr	r1, [pc, #32]	@ (800e7f8 <prvInsertBlockIntoFreeList+0x48>)
 800e7d6:	6809      	ldr	r1, [r1, #0]
 800e7d8:	428b      	cmp	r3, r1
 800e7da:	d003      	beq.n	800e7e4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7dc:	6859      	ldr	r1, [r3, #4]
 800e7de:	4421      	add	r1, r4
 800e7e0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7e2:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7e4:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7e6:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7e8:	bf18      	it	ne
 800e7ea:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7ec:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	e7f8      	b.n	800e7e4 <prvInsertBlockIntoFreeList+0x34>
 800e7f2:	bf00      	nop
 800e7f4:	2400d6f4 	.word	0x2400d6f4
 800e7f8:	2400d6f0 	.word	0x2400d6f0

0800e7fc <pvPortMalloc>:
{
 800e7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e800:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e802:	f001 f9dd 	bl	800fbc0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e806:	4940      	ldr	r1, [pc, #256]	@ (800e908 <pvPortMalloc+0x10c>)
 800e808:	4d40      	ldr	r5, [pc, #256]	@ (800e90c <pvPortMalloc+0x110>)
 800e80a:	680b      	ldr	r3, [r1, #0]
 800e80c:	b9f3      	cbnz	r3, 800e84c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800e80e:	4a40      	ldr	r2, [pc, #256]	@ (800e910 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800e810:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e812:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e814:	4e3f      	ldr	r6, [pc, #252]	@ (800e914 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e816:	bf1b      	ittet	ne
 800e818:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e81a:	4b3f      	ldrne	r3, [pc, #252]	@ (800e918 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e81c:	4b3f      	ldreq	r3, [pc, #252]	@ (800e91c <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e81e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800e822:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e824:	bf18      	it	ne
 800e826:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e828:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e82a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800e82c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e82e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800e832:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e836:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800e838:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e83a:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e83e:	4b38      	ldr	r3, [pc, #224]	@ (800e920 <pvPortMalloc+0x124>)
 800e840:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e842:	4b38      	ldr	r3, [pc, #224]	@ (800e924 <pvPortMalloc+0x128>)
 800e844:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e846:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e84a:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e84c:	682e      	ldr	r6, [r5, #0]
 800e84e:	4226      	tst	r6, r4
 800e850:	d155      	bne.n	800e8fe <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800e852:	2c00      	cmp	r4, #0
 800e854:	d046      	beq.n	800e8e4 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800e856:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e85a:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e85c:	bf1c      	itt	ne
 800e85e:	f023 0307 	bicne.w	r3, r3, #7
 800e862:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e864:	2b00      	cmp	r3, #0
 800e866:	d04a      	beq.n	800e8fe <pvPortMalloc+0x102>
 800e868:	4f2e      	ldr	r7, [pc, #184]	@ (800e924 <pvPortMalloc+0x128>)
 800e86a:	683c      	ldr	r4, [r7, #0]
 800e86c:	429c      	cmp	r4, r3
 800e86e:	d346      	bcc.n	800e8fe <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800e870:	4a28      	ldr	r2, [pc, #160]	@ (800e914 <pvPortMalloc+0x118>)
 800e872:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e874:	6868      	ldr	r0, [r5, #4]
 800e876:	4298      	cmp	r0, r3
 800e878:	d204      	bcs.n	800e884 <pvPortMalloc+0x88>
 800e87a:	f8d5 c000 	ldr.w	ip, [r5]
 800e87e:	f1bc 0f00 	cmp.w	ip, #0
 800e882:	d115      	bne.n	800e8b0 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800e884:	6809      	ldr	r1, [r1, #0]
 800e886:	42a9      	cmp	r1, r5
 800e888:	d039      	beq.n	800e8fe <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e88a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e88c:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e890:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e892:	1ac2      	subs	r2, r0, r3
 800e894:	2a10      	cmp	r2, #16
 800e896:	d912      	bls.n	800e8be <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e898:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e89a:	0741      	lsls	r1, r0, #29
 800e89c:	d00b      	beq.n	800e8b6 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	e7fe      	b.n	800e8ae <pvPortMalloc+0xb2>
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	4665      	mov	r5, ip
 800e8b4:	e7de      	b.n	800e874 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8b6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8b8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8ba:	f7ff ff79 	bl	800e7b0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8be:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8c0:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8c2:	4917      	ldr	r1, [pc, #92]	@ (800e920 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8c4:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8c6:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8c8:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800e8ca:	4a17      	ldr	r2, [pc, #92]	@ (800e928 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8cc:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800e8ce:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800e8d0:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8d2:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800e8d4:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8d8:	bf38      	it	cc
 800e8da:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8dc:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8e0:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800e8e2:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800e8e4:	f001 fa10 	bl	800fd08 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8e8:	0763      	lsls	r3, r4, #29
 800e8ea:	d00a      	beq.n	800e902 <pvPortMalloc+0x106>
 800e8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f0:	f383 8811 	msr	BASEPRI, r3
 800e8f4:	f3bf 8f6f 	isb	sy
 800e8f8:	f3bf 8f4f 	dsb	sy
 800e8fc:	e7fe      	b.n	800e8fc <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800e8fe:	2400      	movs	r4, #0
 800e900:	e7f0      	b.n	800e8e4 <pvPortMalloc+0xe8>
}
 800e902:	4620      	mov	r0, r4
 800e904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e908:	2400d6f0 	.word	0x2400d6f0
 800e90c:	2400d6dc 	.word	0x2400d6dc
 800e910:	2400d6fc 	.word	0x2400d6fc
 800e914:	2400d6f4 	.word	0x2400d6f4
 800e918:	24025d9c 	.word	0x24025d9c
 800e91c:	000186a0 	.word	0x000186a0
 800e920:	2400d6e8 	.word	0x2400d6e8
 800e924:	2400d6ec 	.word	0x2400d6ec
 800e928:	2400d6e4 	.word	0x2400d6e4

0800e92c <vPortFree>:
{
 800e92c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800e92e:	4604      	mov	r4, r0
 800e930:	b390      	cbz	r0, 800e998 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e932:	4a1a      	ldr	r2, [pc, #104]	@ (800e99c <vPortFree+0x70>)
 800e934:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e938:	6812      	ldr	r2, [r2, #0]
 800e93a:	4213      	tst	r3, r2
 800e93c:	d108      	bne.n	800e950 <vPortFree+0x24>
 800e93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	e7fe      	b.n	800e94e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e950:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e954:	b141      	cbz	r1, 800e968 <vPortFree+0x3c>
 800e956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e95a:	f383 8811 	msr	BASEPRI, r3
 800e95e:	f3bf 8f6f 	isb	sy
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	e7fe      	b.n	800e966 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e968:	ea23 0302 	bic.w	r3, r3, r2
 800e96c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e970:	f001 f926 	bl	800fbc0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e974:	4a0a      	ldr	r2, [pc, #40]	@ (800e9a0 <vPortFree+0x74>)
 800e976:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e97a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e97e:	6811      	ldr	r1, [r2, #0]
 800e980:	440b      	add	r3, r1
 800e982:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e984:	f7ff ff14 	bl	800e7b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e988:	4a06      	ldr	r2, [pc, #24]	@ (800e9a4 <vPortFree+0x78>)
 800e98a:	6813      	ldr	r3, [r2, #0]
 800e98c:	3301      	adds	r3, #1
}
 800e98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800e992:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e994:	f001 b9b8 	b.w	800fd08 <xTaskResumeAll>
}
 800e998:	bd10      	pop	{r4, pc}
 800e99a:	bf00      	nop
 800e99c:	2400d6dc 	.word	0x2400d6dc
 800e9a0:	2400d6ec 	.word	0x2400d6ec
 800e9a4:	2400d6e0 	.word	0x2400d6e0

0800e9a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e9ac:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9b0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9b2:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9b4:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e9bc:	4770      	bx	lr

0800e9be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e9c2:	4770      	bx	lr

0800e9c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e9c4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e9c6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e9c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e9ca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e9cc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e9ce:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e9d0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e9d2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	6003      	str	r3, [r0, #0]
}
 800e9d8:	4770      	bx	lr

0800e9da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9da:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9dc:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9de:	1c63      	adds	r3, r4, #1
 800e9e0:	d10a      	bne.n	800e9f8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9e2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e9e4:	685a      	ldr	r2, [r3, #4]
 800e9e6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e9e8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e9ea:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e9ec:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e9ee:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e9f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	6003      	str	r3, [r0, #0]
}
 800e9f6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e9f8:	f100 0208 	add.w	r2, r0, #8
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	6852      	ldr	r2, [r2, #4]
 800ea00:	6815      	ldr	r5, [r2, #0]
 800ea02:	42a5      	cmp	r5, r4
 800ea04:	d9fa      	bls.n	800e9fc <vListInsert+0x22>
 800ea06:	e7ed      	b.n	800e9e4 <vListInsert+0xa>

0800ea08 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea08:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea0a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800ea0e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea10:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea12:	6859      	ldr	r1, [r3, #4]
 800ea14:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea16:	bf08      	it	eq
 800ea18:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	3a01      	subs	r2, #1
 800ea22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea24:	6818      	ldr	r0, [r3, #0]
}
 800ea26:	4770      	bx	lr

0800ea28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ea28:	4808      	ldr	r0, [pc, #32]	@ (800ea4c <prvPortStartFirstTask+0x24>)
 800ea2a:	6800      	ldr	r0, [r0, #0]
 800ea2c:	6800      	ldr	r0, [r0, #0]
 800ea2e:	f380 8808 	msr	MSP, r0
 800ea32:	f04f 0000 	mov.w	r0, #0
 800ea36:	f380 8814 	msr	CONTROL, r0
 800ea3a:	b662      	cpsie	i
 800ea3c:	b661      	cpsie	f
 800ea3e:	f3bf 8f4f 	dsb	sy
 800ea42:	f3bf 8f6f 	isb	sy
 800ea46:	df00      	svc	0
 800ea48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea4a:	0000      	.short	0x0000
 800ea4c:	e000ed08 	.word	0xe000ed08

0800ea50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea50:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ea60 <vPortEnableVFP+0x10>
 800ea54:	6801      	ldr	r1, [r0, #0]
 800ea56:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ea5a:	6001      	str	r1, [r0, #0]
 800ea5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea5e:	0000      	.short	0x0000
 800ea60:	e000ed88 	.word	0xe000ed88

0800ea64 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800ea64:	2300      	movs	r3, #0
{
 800ea66:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800ea68:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800ea6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eaa0 <prvTaskExitError+0x3c>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	d008      	beq.n	800ea84 <prvTaskExitError+0x20>
 800ea72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea76:	f383 8811 	msr	BASEPRI, r3
 800ea7a:	f3bf 8f6f 	isb	sy
 800ea7e:	f3bf 8f4f 	dsb	sy
 800ea82:	e7fe      	b.n	800ea82 <prvTaskExitError+0x1e>
 800ea84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800ea94:	9b01      	ldr	r3, [sp, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d0fc      	beq.n	800ea94 <prvTaskExitError+0x30>
}
 800ea9a:	b002      	add	sp, #8
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	2400007c 	.word	0x2400007c

0800eaa4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eaa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eaa8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eaac:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800eab0:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eab2:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eab4:	4b03      	ldr	r3, [pc, #12]	@ (800eac4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eab6:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eab8:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eaba:	f06f 0302 	mvn.w	r3, #2
 800eabe:	6203      	str	r3, [r0, #32]
}
 800eac0:	4770      	bx	lr
 800eac2:	bf00      	nop
 800eac4:	0800ea65 	.word	0x0800ea65
	...

0800ead0 <SVC_Handler>:
	__asm volatile (
 800ead0:	4b07      	ldr	r3, [pc, #28]	@ (800eaf0 <pxCurrentTCBConst2>)
 800ead2:	6819      	ldr	r1, [r3, #0]
 800ead4:	6808      	ldr	r0, [r1, #0]
 800ead6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eada:	f380 8809 	msr	PSP, r0
 800eade:	f3bf 8f6f 	isb	sy
 800eae2:	f04f 0000 	mov.w	r0, #0
 800eae6:	f380 8811 	msr	BASEPRI, r0
 800eaea:	4770      	bx	lr
 800eaec:	f3af 8000 	nop.w

0800eaf0 <pxCurrentTCBConst2>:
 800eaf0:	240262dc 	.word	0x240262dc

0800eaf4 <vPortEnterCritical>:
 800eaf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800eb04:	4a0a      	ldr	r2, [pc, #40]	@ (800eb30 <vPortEnterCritical+0x3c>)
 800eb06:	6813      	ldr	r3, [r2, #0]
 800eb08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800eb0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800eb0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800eb0e:	d10e      	bne.n	800eb2e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eb14:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	b143      	cbz	r3, 800eb2e <vPortEnterCritical+0x3a>
 800eb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb20:	f383 8811 	msr	BASEPRI, r3
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	e7fe      	b.n	800eb2c <vPortEnterCritical+0x38>
}
 800eb2e:	4770      	bx	lr
 800eb30:	2400007c 	.word	0x2400007c

0800eb34 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800eb34:	4a08      	ldr	r2, [pc, #32]	@ (800eb58 <vPortExitCritical+0x24>)
 800eb36:	6813      	ldr	r3, [r2, #0]
 800eb38:	b943      	cbnz	r3, 800eb4c <vPortExitCritical+0x18>
 800eb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb3e:	f383 8811 	msr	BASEPRI, r3
 800eb42:	f3bf 8f6f 	isb	sy
 800eb46:	f3bf 8f4f 	dsb	sy
 800eb4a:	e7fe      	b.n	800eb4a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb50:	b90b      	cbnz	r3, 800eb56 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eb52:	f383 8811 	msr	BASEPRI, r3
}
 800eb56:	4770      	bx	lr
 800eb58:	2400007c 	.word	0x2400007c
 800eb5c:	00000000 	.word	0x00000000

0800eb60 <PendSV_Handler>:
	__asm volatile
 800eb60:	f3ef 8009 	mrs	r0, PSP
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	4b15      	ldr	r3, [pc, #84]	@ (800ebc0 <pxCurrentTCBConst>)
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	f01e 0f10 	tst.w	lr, #16
 800eb70:	bf08      	it	eq
 800eb72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb7a:	6010      	str	r0, [r2, #0]
 800eb7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800eb84:	f380 8811 	msr	BASEPRI, r0
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	f001 f998 	bl	800fec4 <vTaskSwitchContext>
 800eb94:	f04f 0000 	mov.w	r0, #0
 800eb98:	f380 8811 	msr	BASEPRI, r0
 800eb9c:	bc09      	pop	{r0, r3}
 800eb9e:	6819      	ldr	r1, [r3, #0]
 800eba0:	6808      	ldr	r0, [r1, #0]
 800eba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba6:	f01e 0f10 	tst.w	lr, #16
 800ebaa:	bf08      	it	eq
 800ebac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ebb0:	f380 8809 	msr	PSP, r0
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop
 800ebbc:	f3af 8000 	nop.w

0800ebc0 <pxCurrentTCBConst>:
 800ebc0:	240262dc 	.word	0x240262dc

0800ebc4 <xPortSysTickHandler>:
{
 800ebc4:	b508      	push	{r3, lr}
	__asm volatile
 800ebc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ebd6:	f001 f801 	bl	800fbdc <xTaskIncrementTick>
 800ebda:	b128      	cbz	r0, 800ebe8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ebdc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ebe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebe4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f383 8811 	msr	BASEPRI, r3
}
 800ebee:	bd08      	pop	{r3, pc}

0800ebf0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebf0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800ebf4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebf6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebfa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ebfc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebfe:	4b04      	ldr	r3, [pc, #16]	@ (800ec10 <vPortSetupTimerInterrupt+0x20>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec06:	3b01      	subs	r3, #1
 800ec08:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec0a:	2307      	movs	r3, #7
 800ec0c:	6113      	str	r3, [r2, #16]
}
 800ec0e:	4770      	bx	lr
 800ec10:	24000070 	.word	0x24000070

0800ec14 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800ec18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec1a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800ec1e:	4a38      	ldr	r2, [pc, #224]	@ (800ed00 <xPortStartScheduler+0xec>)
 800ec20:	4291      	cmp	r1, r2
 800ec22:	d108      	bne.n	800ec36 <xPortStartScheduler+0x22>
	__asm volatile
 800ec24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec28:	f383 8811 	msr	BASEPRI, r3
 800ec2c:	f3bf 8f6f 	isb	sy
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	e7fe      	b.n	800ec34 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec36:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800ec3a:	4b32      	ldr	r3, [pc, #200]	@ (800ed04 <xPortStartScheduler+0xf0>)
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d108      	bne.n	800ec52 <xPortStartScheduler+0x3e>
 800ec40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	e7fe      	b.n	800ec50 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec52:	4b2d      	ldr	r3, [pc, #180]	@ (800ed08 <xPortStartScheduler+0xf4>)
 800ec54:	781a      	ldrb	r2, [r3, #0]
 800ec56:	b2d2      	uxtb	r2, r2
 800ec58:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec5a:	22ff      	movs	r2, #255	@ 0xff
 800ec5c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec5e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec60:	4a2a      	ldr	r2, [pc, #168]	@ (800ed0c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ec6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ec70:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec72:	2307      	movs	r3, #7
 800ec74:	4a26      	ldr	r2, [pc, #152]	@ (800ed10 <xPortStartScheduler+0xfc>)
 800ec76:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec78:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800ec7c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec7e:	0609      	lsls	r1, r1, #24
 800ec80:	d40a      	bmi.n	800ec98 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec82:	2b03      	cmp	r3, #3
 800ec84:	d011      	beq.n	800ecaa <xPortStartScheduler+0x96>
 800ec86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	e7fe      	b.n	800ec96 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800ec98:	3b01      	subs	r3, #1
 800ec9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	f88d 3003 	strb.w	r3, [sp, #3]
 800eca8:	e7e6      	b.n	800ec78 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ecaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ecae:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800ecb2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ecb4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ecb6:	9b01      	ldr	r3, [sp, #4]
 800ecb8:	4a13      	ldr	r2, [pc, #76]	@ (800ed08 <xPortStartScheduler+0xf4>)
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ecbe:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ecc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ecc6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ecca:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ecce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ecd2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800ecd6:	f7ff ff8b 	bl	800ebf0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ecda:	4b0e      	ldr	r3, [pc, #56]	@ (800ed14 <xPortStartScheduler+0x100>)
 800ecdc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800ecde:	f7ff feb7 	bl	800ea50 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ece2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800ece6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ecea:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800ecee:	f7ff fe9b 	bl	800ea28 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ecf2:	f001 f8e7 	bl	800fec4 <vTaskSwitchContext>
}
 800ecf6:	4628      	mov	r0, r5
	prvTaskExitError();
 800ecf8:	f7ff feb4 	bl	800ea64 <prvTaskExitError>
}
 800ecfc:	b003      	add	sp, #12
 800ecfe:	bd30      	pop	{r4, r5, pc}
 800ed00:	410fc271 	.word	0x410fc271
 800ed04:	410fc270 	.word	0x410fc270
 800ed08:	e000e400 	.word	0xe000e400
 800ed0c:	24025da0 	.word	0x24025da0
 800ed10:	24025d9c 	.word	0x24025d9c
 800ed14:	2400007c 	.word	0x2400007c

0800ed18 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ed18:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ed1c:	2b0f      	cmp	r3, #15
 800ed1e:	d90e      	bls.n	800ed3e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ed20:	4a11      	ldr	r2, [pc, #68]	@ (800ed68 <vPortValidateInterruptPriority+0x50>)
 800ed22:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed24:	4a11      	ldr	r2, [pc, #68]	@ (800ed6c <vPortValidateInterruptPriority+0x54>)
 800ed26:	7812      	ldrb	r2, [r2, #0]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d908      	bls.n	800ed3e <vPortValidateInterruptPriority+0x26>
 800ed2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed30:	f383 8811 	msr	BASEPRI, r3
 800ed34:	f3bf 8f6f 	isb	sy
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	e7fe      	b.n	800ed3c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed3e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ed42:	4a0b      	ldr	r2, [pc, #44]	@ (800ed70 <vPortValidateInterruptPriority+0x58>)
 800ed44:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800ed48:	6812      	ldr	r2, [r2, #0]
 800ed4a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d908      	bls.n	800ed64 <vPortValidateInterruptPriority+0x4c>
 800ed52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed56:	f383 8811 	msr	BASEPRI, r3
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	e7fe      	b.n	800ed62 <vPortValidateInterruptPriority+0x4a>
	}
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	e000e3f0 	.word	0xe000e3f0
 800ed6c:	24025da0 	.word	0x24025da0
 800ed70:	24025d9c 	.word	0x24025d9c

0800ed74 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ed74:	b510      	push	{r4, lr}
 800ed76:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed78:	f7ff febc 	bl	800eaf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ed7c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ed7e:	f7ff fed9 	bl	800eb34 <vPortExitCritical>

	return xReturn;
}
 800ed82:	fab4 f084 	clz	r0, r4
 800ed86:	0940      	lsrs	r0, r0, #5
 800ed88:	bd10      	pop	{r4, pc}

0800ed8a <prvCopyDataToQueue>:
{
 800ed8a:	b570      	push	{r4, r5, r6, lr}
 800ed8c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ed8e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800ed90:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed92:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ed94:	b942      	cbnz	r2, 800eda8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed96:	6806      	ldr	r6, [r0, #0]
 800ed98:	b99e      	cbnz	r6, 800edc2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed9a:	6880      	ldr	r0, [r0, #8]
 800ed9c:	f001 f9f2 	bl	8010184 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eda0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eda2:	3501      	adds	r5, #1
 800eda4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800eda6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800eda8:	b96e      	cbnz	r6, 800edc6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800edaa:	6840      	ldr	r0, [r0, #4]
 800edac:	f017 fabd 	bl	802632a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edb0:	6863      	ldr	r3, [r4, #4]
 800edb2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800edb4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800edb6:	68a2      	ldr	r2, [r4, #8]
 800edb8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edba:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800edbc:	bf24      	itt	cs
 800edbe:	6823      	ldrcs	r3, [r4, #0]
 800edc0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800edc2:	2000      	movs	r0, #0
 800edc4:	e7ed      	b.n	800eda2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800edc6:	68c0      	ldr	r0, [r0, #12]
 800edc8:	f017 faaf 	bl	802632a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800edcc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800edce:	68e3      	ldr	r3, [r4, #12]
 800edd0:	4251      	negs	r1, r2
 800edd2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800edd4:	6822      	ldr	r2, [r4, #0]
 800edd6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800edd8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800edda:	bf3e      	ittt	cc
 800eddc:	68a3      	ldrcc	r3, [r4, #8]
 800edde:	185b      	addcc	r3, r3, r1
 800ede0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ede2:	2e02      	cmp	r6, #2
 800ede4:	d1ed      	bne.n	800edc2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ede6:	b10d      	cbz	r5, 800edec <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800ede8:	3d01      	subs	r5, #1
 800edea:	e7ea      	b.n	800edc2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800edec:	4628      	mov	r0, r5
 800edee:	e7d8      	b.n	800eda2 <prvCopyDataToQueue+0x18>

0800edf0 <prvCopyDataFromQueue>:
{
 800edf0:	4603      	mov	r3, r0
 800edf2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800edf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800edf6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800edf8:	b162      	cbz	r2, 800ee14 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edfa:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800edfc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edfe:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ee00:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee02:	60dc      	str	r4, [r3, #12]
}
 800ee04:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ee08:	bf24      	itt	cs
 800ee0a:	6819      	ldrcs	r1, [r3, #0]
 800ee0c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee0e:	68d9      	ldr	r1, [r3, #12]
 800ee10:	f017 ba8b 	b.w	802632a <memcpy>
}
 800ee14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee18:	4770      	bx	lr

0800ee1a <prvUnlockQueue>:
{
 800ee1a:	b570      	push	{r4, r5, r6, lr}
 800ee1c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ee1e:	f7ff fe69 	bl	800eaf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ee22:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee26:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800ee2a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee2c:	2d00      	cmp	r5, #0
 800ee2e:	dc14      	bgt.n	800ee5a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800ee30:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee32:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800ee36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800ee3a:	f7ff fe7b 	bl	800eb34 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ee3e:	f7ff fe59 	bl	800eaf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ee42:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800ee46:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee48:	2d00      	cmp	r5, #0
 800ee4a:	dc12      	bgt.n	800ee72 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800ee4c:	23ff      	movs	r3, #255	@ 0xff
 800ee4e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800ee52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800ee56:	f7ff be6d 	b.w	800eb34 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d0e7      	beq.n	800ee30 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee60:	4630      	mov	r0, r6
 800ee62:	f001 f8ab 	bl	800ffbc <xTaskRemoveFromEventList>
 800ee66:	b108      	cbz	r0, 800ee6c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800ee68:	f001 f932 	bl	80100d0 <vTaskMissedYield>
			--cTxLock;
 800ee6c:	3d01      	subs	r5, #1
 800ee6e:	b26d      	sxtb	r5, r5
 800ee70:	e7dc      	b.n	800ee2c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee72:	6923      	ldr	r3, [r4, #16]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d0e9      	beq.n	800ee4c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f001 f89f 	bl	800ffbc <xTaskRemoveFromEventList>
 800ee7e:	b108      	cbz	r0, 800ee84 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800ee80:	f001 f926 	bl	80100d0 <vTaskMissedYield>
				--cRxLock;
 800ee84:	3d01      	subs	r5, #1
 800ee86:	b26d      	sxtb	r5, r5
 800ee88:	e7de      	b.n	800ee48 <prvUnlockQueue+0x2e>

0800ee8a <xQueueGenericReset>:
{
 800ee8a:	b538      	push	{r3, r4, r5, lr}
 800ee8c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800ee8e:	4604      	mov	r4, r0
 800ee90:	b940      	cbnz	r0, 800eea4 <xQueueGenericReset+0x1a>
 800ee92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee96:	f383 8811 	msr	BASEPRI, r3
 800ee9a:	f3bf 8f6f 	isb	sy
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	e7fe      	b.n	800eea2 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800eea4:	f7ff fe26 	bl	800eaf4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eea8:	6822      	ldr	r2, [r4, #0]
 800eeaa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eeae:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eeb0:	434b      	muls	r3, r1
 800eeb2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eeb4:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eeb6:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eeb8:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eeba:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800eebc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eebe:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eec0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800eec2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eec6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800eeca:	b9a5      	cbnz	r5, 800eef6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eecc:	6923      	ldr	r3, [r4, #16]
 800eece:	b173      	cbz	r3, 800eeee <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eed0:	f104 0010 	add.w	r0, r4, #16
 800eed4:	f001 f872 	bl	800ffbc <xTaskRemoveFromEventList>
 800eed8:	b148      	cbz	r0, 800eeee <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800eeda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eee2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800eeee:	f7ff fe21 	bl	800eb34 <vPortExitCritical>
}
 800eef2:	2001      	movs	r0, #1
 800eef4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eef6:	f104 0010 	add.w	r0, r4, #16
 800eefa:	f7ff fd55 	bl	800e9a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eefe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ef02:	f7ff fd51 	bl	800e9a8 <vListInitialise>
 800ef06:	e7f2      	b.n	800eeee <xQueueGenericReset+0x64>

0800ef08 <xQueueGenericCreateStatic>:
	{
 800ef08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef0a:	460d      	mov	r5, r1
 800ef0c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef0e:	b940      	cbnz	r0, 800ef22 <xQueueGenericCreateStatic+0x1a>
 800ef10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef14:	f383 8811 	msr	BASEPRI, r3
 800ef18:	f3bf 8f6f 	isb	sy
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	e7fe      	b.n	800ef20 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800ef22:	b943      	cbnz	r3, 800ef36 <xQueueGenericCreateStatic+0x2e>
 800ef24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	e7fe      	b.n	800ef34 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ef36:	b14a      	cbz	r2, 800ef4c <xQueueGenericCreateStatic+0x44>
 800ef38:	b991      	cbnz	r1, 800ef60 <xQueueGenericCreateStatic+0x58>
 800ef3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef3e:	f383 8811 	msr	BASEPRI, r3
 800ef42:	f3bf 8f6f 	isb	sy
 800ef46:	f3bf 8f4f 	dsb	sy
 800ef4a:	e7fe      	b.n	800ef4a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ef4c:	b141      	cbz	r1, 800ef60 <xQueueGenericCreateStatic+0x58>
 800ef4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef52:	f383 8811 	msr	BASEPRI, r3
 800ef56:	f3bf 8f6f 	isb	sy
 800ef5a:	f3bf 8f4f 	dsb	sy
 800ef5e:	e7fe      	b.n	800ef5e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef60:	2350      	movs	r3, #80	@ 0x50
 800ef62:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ef64:	9b01      	ldr	r3, [sp, #4]
 800ef66:	2b50      	cmp	r3, #80	@ 0x50
 800ef68:	d008      	beq.n	800ef7c <xQueueGenericCreateStatic+0x74>
 800ef6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	e7fe      	b.n	800ef7a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef7c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef7e:	2d00      	cmp	r5, #0
 800ef80:	bf08      	it	eq
 800ef82:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef84:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef86:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef8a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ef8c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7ff ff7a 	bl	800ee8a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ef96:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800ef9a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800ef9c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800efa0:	b003      	add	sp, #12
 800efa2:	bd30      	pop	{r4, r5, pc}

0800efa4 <xQueueGenericCreate>:
	{
 800efa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa6:	460d      	mov	r5, r1
 800efa8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800efaa:	4606      	mov	r6, r0
 800efac:	b940      	cbnz	r0, 800efc0 <xQueueGenericCreate+0x1c>
 800efae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	e7fe      	b.n	800efbe <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efc0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800efc2:	3050      	adds	r0, #80	@ 0x50
 800efc4:	f7ff fc1a 	bl	800e7fc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800efc8:	4604      	mov	r4, r0
 800efca:	b170      	cbz	r0, 800efea <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800efcc:	2300      	movs	r3, #0
 800efce:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800efd2:	b165      	cbz	r5, 800efee <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efd4:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800efd8:	2101      	movs	r1, #1
 800efda:	4620      	mov	r0, r4
 800efdc:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800efde:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800efe2:	f7ff ff52 	bl	800ee8a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800efe6:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800efea:	4620      	mov	r0, r4
 800efec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800efee:	4603      	mov	r3, r0
 800eff0:	e7f2      	b.n	800efd8 <xQueueGenericCreate+0x34>

0800eff2 <xQueueCreateCountingSemaphoreStatic>:
	{
 800eff2:	b513      	push	{r0, r1, r4, lr}
 800eff4:	4613      	mov	r3, r2
 800eff6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800eff8:	b940      	cbnz	r0, 800f00c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800effa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	e7fe      	b.n	800f00a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f00c:	4288      	cmp	r0, r1
 800f00e:	d208      	bcs.n	800f022 <xQueueCreateCountingSemaphoreStatic+0x30>
 800f010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	e7fe      	b.n	800f020 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f022:	2202      	movs	r2, #2
 800f024:	9200      	str	r2, [sp, #0]
 800f026:	2200      	movs	r2, #0
 800f028:	4611      	mov	r1, r2
 800f02a:	f7ff ff6d 	bl	800ef08 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800f02e:	b100      	cbz	r0, 800f032 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f030:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800f032:	b002      	add	sp, #8
 800f034:	bd10      	pop	{r4, pc}

0800f036 <xQueueCreateCountingSemaphore>:
	{
 800f036:	b510      	push	{r4, lr}
 800f038:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f03a:	b940      	cbnz	r0, 800f04e <xQueueCreateCountingSemaphore+0x18>
 800f03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f040:	f383 8811 	msr	BASEPRI, r3
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	e7fe      	b.n	800f04c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f04e:	4288      	cmp	r0, r1
 800f050:	d208      	bcs.n	800f064 <xQueueCreateCountingSemaphore+0x2e>
 800f052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f056:	f383 8811 	msr	BASEPRI, r3
 800f05a:	f3bf 8f6f 	isb	sy
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	e7fe      	b.n	800f062 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f064:	2202      	movs	r2, #2
 800f066:	2100      	movs	r1, #0
 800f068:	f7ff ff9c 	bl	800efa4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800f06c:	b100      	cbz	r0, 800f070 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f06e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800f070:	bd10      	pop	{r4, pc}

0800f072 <xQueueGenericSend>:
{
 800f072:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f076:	460f      	mov	r7, r1
 800f078:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800f07a:	4604      	mov	r4, r0
{
 800f07c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800f07e:	b940      	cbnz	r0, 800f092 <xQueueGenericSend+0x20>
 800f080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	e7fe      	b.n	800f090 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f092:	b951      	cbnz	r1, 800f0aa <xQueueGenericSend+0x38>
 800f094:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f096:	b143      	cbz	r3, 800f0aa <xQueueGenericSend+0x38>
 800f098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f09c:	f383 8811 	msr	BASEPRI, r3
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	e7fe      	b.n	800f0a8 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0aa:	2e02      	cmp	r6, #2
 800f0ac:	d10b      	bne.n	800f0c6 <xQueueGenericSend+0x54>
 800f0ae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d008      	beq.n	800f0c6 <xQueueGenericSend+0x54>
 800f0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b8:	f383 8811 	msr	BASEPRI, r3
 800f0bc:	f3bf 8f6f 	isb	sy
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	e7fe      	b.n	800f0c4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0c6:	f001 f80f 	bl	80100e8 <xTaskGetSchedulerState>
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	b330      	cbz	r0, 800f11c <xQueueGenericSend+0xaa>
 800f0ce:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f0d0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800f0d4:	f7ff fd0e 	bl	800eaf4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f0da:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d301      	bcc.n	800f0e4 <xQueueGenericSend+0x72>
 800f0e0:	2e02      	cmp	r6, #2
 800f0e2:	d127      	bne.n	800f134 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	4639      	mov	r1, r7
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7ff fe4e 	bl	800ed8a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f0f0:	b11b      	cbz	r3, 800f0fa <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0f2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f0f6:	f000 ff61 	bl	800ffbc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800f0fa:	b148      	cbz	r0, 800f110 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800f0fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f104:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800f110:	f7ff fd10 	bl	800eb34 <vPortExitCritical>
				return pdPASS;
 800f114:	2001      	movs	r0, #1
}
 800f116:	b004      	add	sp, #16
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f11c:	9b01      	ldr	r3, [sp, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d0d6      	beq.n	800f0d0 <xQueueGenericSend+0x5e>
 800f122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	e7fe      	b.n	800f132 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f134:	9b01      	ldr	r3, [sp, #4]
 800f136:	b91b      	cbnz	r3, 800f140 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800f138:	f7ff fcfc 	bl	800eb34 <vPortExitCritical>
					return errQUEUE_FULL;
 800f13c:	2000      	movs	r0, #0
 800f13e:	e7ea      	b.n	800f116 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800f140:	b915      	cbnz	r5, 800f148 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f142:	a802      	add	r0, sp, #8
 800f144:	f000 ff7c 	bl	8010040 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f148:	f7ff fcf4 	bl	800eb34 <vPortExitCritical>
		vTaskSuspendAll();
 800f14c:	f000 fd38 	bl	800fbc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f150:	f7ff fcd0 	bl	800eaf4 <vPortEnterCritical>
 800f154:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f158:	2bff      	cmp	r3, #255	@ 0xff
 800f15a:	d101      	bne.n	800f160 <xQueueGenericSend+0xee>
 800f15c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800f160:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f164:	2bff      	cmp	r3, #255	@ 0xff
 800f166:	d101      	bne.n	800f16c <xQueueGenericSend+0xfa>
 800f168:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800f16c:	f7ff fce2 	bl	800eb34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f170:	a901      	add	r1, sp, #4
 800f172:	a802      	add	r0, sp, #8
 800f174:	f000 ff70 	bl	8010058 <xTaskCheckForTimeOut>
 800f178:	bb38      	cbnz	r0, 800f1ca <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f17a:	f7ff fcbb 	bl	800eaf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f17e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f180:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f182:	429a      	cmp	r2, r3
 800f184:	d10e      	bne.n	800f1a4 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f186:	f7ff fcd5 	bl	800eb34 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f18a:	9901      	ldr	r1, [sp, #4]
 800f18c:	f104 0010 	add.w	r0, r4, #16
 800f190:	f000 fedc 	bl	800ff4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f194:	4620      	mov	r0, r4
 800f196:	f7ff fe40 	bl	800ee1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f19a:	f000 fdb5 	bl	800fd08 <xTaskResumeAll>
 800f19e:	b148      	cbz	r0, 800f1b4 <xQueueGenericSend+0x142>
 800f1a0:	2501      	movs	r5, #1
 800f1a2:	e797      	b.n	800f0d4 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800f1a4:	f7ff fcc6 	bl	800eb34 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f7ff fe36 	bl	800ee1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1ae:	f000 fdab 	bl	800fd08 <xTaskResumeAll>
 800f1b2:	e7f5      	b.n	800f1a0 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800f1b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	e7ea      	b.n	800f1a0 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f7ff fe25 	bl	800ee1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1d0:	f000 fd9a 	bl	800fd08 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f1d4:	e7b2      	b.n	800f13c <xQueueGenericSend+0xca>

0800f1d6 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f1d6:	2200      	movs	r2, #0
	{
 800f1d8:	460b      	mov	r3, r1
 800f1da:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f1dc:	4611      	mov	r1, r2
 800f1de:	9000      	str	r0, [sp, #0]
 800f1e0:	2001      	movs	r0, #1
 800f1e2:	f7ff fe91 	bl	800ef08 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	b138      	cbz	r0, 800f1fa <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1ea:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1f0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f1f2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f1f4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f1f6:	f7ff ff3c 	bl	800f072 <xQueueGenericSend>
	}
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	b002      	add	sp, #8
 800f1fe:	bd10      	pop	{r4, pc}

0800f200 <xQueueGiveMutexRecursive>:
	{
 800f200:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800f202:	4604      	mov	r4, r0
 800f204:	b940      	cbnz	r0, 800f218 <xQueueGiveMutexRecursive+0x18>
 800f206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	e7fe      	b.n	800f216 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f218:	6885      	ldr	r5, [r0, #8]
 800f21a:	f000 ff5f 	bl	80100dc <xTaskGetCurrentTaskHandle>
 800f21e:	4285      	cmp	r5, r0
 800f220:	d10b      	bne.n	800f23a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f222:	68e3      	ldr	r3, [r4, #12]
 800f224:	3b01      	subs	r3, #1
 800f226:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f228:	b10b      	cbz	r3, 800f22e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800f22a:	2001      	movs	r0, #1
	}
 800f22c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f22e:	461a      	mov	r2, r3
 800f230:	4619      	mov	r1, r3
 800f232:	4620      	mov	r0, r4
 800f234:	f7ff ff1d 	bl	800f072 <xQueueGenericSend>
 800f238:	e7f7      	b.n	800f22a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800f23a:	2000      	movs	r0, #0
		return xReturn;
 800f23c:	e7f6      	b.n	800f22c <xQueueGiveMutexRecursive+0x2c>

0800f23e <xQueueCreateMutex>:
	{
 800f23e:	b570      	push	{r4, r5, r6, lr}
 800f240:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f242:	2050      	movs	r0, #80	@ 0x50
 800f244:	f7ff fada 	bl	800e7fc <pvPortMalloc>
 800f248:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800f24a:	b198      	cbz	r0, 800f274 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f24c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800f24e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f250:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f252:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800f256:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f25a:	f7ff fe16 	bl	800ee8a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f25e:	462b      	mov	r3, r5
 800f260:	462a      	mov	r2, r5
 800f262:	4629      	mov	r1, r5
 800f264:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800f266:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f26a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f26c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f26e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f270:	f7ff feff 	bl	800f072 <xQueueGenericSend>
	}
 800f274:	4620      	mov	r0, r4
 800f276:	bd70      	pop	{r4, r5, r6, pc}

0800f278 <xQueueGenericSendFromISR>:
{
 800f278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f27c:	4689      	mov	r9, r1
 800f27e:	4617      	mov	r7, r2
 800f280:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800f282:	4604      	mov	r4, r0
 800f284:	b940      	cbnz	r0, 800f298 <xQueueGenericSendFromISR+0x20>
 800f286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f28a:	f383 8811 	msr	BASEPRI, r3
 800f28e:	f3bf 8f6f 	isb	sy
 800f292:	f3bf 8f4f 	dsb	sy
 800f296:	e7fe      	b.n	800f296 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f298:	b951      	cbnz	r1, 800f2b0 <xQueueGenericSendFromISR+0x38>
 800f29a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f29c:	b143      	cbz	r3, 800f2b0 <xQueueGenericSendFromISR+0x38>
 800f29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	e7fe      	b.n	800f2ae <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2b0:	2e02      	cmp	r6, #2
 800f2b2:	d10b      	bne.n	800f2cc <xQueueGenericSendFromISR+0x54>
 800f2b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d008      	beq.n	800f2cc <xQueueGenericSendFromISR+0x54>
 800f2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	e7fe      	b.n	800f2ca <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2cc:	f7ff fd24 	bl	800ed18 <vPortValidateInterruptPriority>
	__asm volatile
 800f2d0:	f3ef 8811 	mrs	r8, BASEPRI
 800f2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f2e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d301      	bcc.n	800f2f0 <xQueueGenericSendFromISR+0x78>
 800f2ec:	2e02      	cmp	r6, #2
 800f2ee:	d11e      	bne.n	800f32e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800f2f0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800f2fa:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2fe:	f7ff fd44 	bl	800ed8a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800f302:	1c6b      	adds	r3, r5, #1
 800f304:	d10e      	bne.n	800f324 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f306:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f308:	b13b      	cbz	r3, 800f31a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f30a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f30e:	f000 fe55 	bl	800ffbc <xTaskRemoveFromEventList>
 800f312:	b110      	cbz	r0, 800f31a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800f314:	b10f      	cbz	r7, 800f31a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f316:	2301      	movs	r3, #1
 800f318:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800f31a:	2001      	movs	r0, #1
	__asm volatile
 800f31c:	f388 8811 	msr	BASEPRI, r8
}
 800f320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f324:	3501      	adds	r5, #1
 800f326:	b26d      	sxtb	r5, r5
 800f328:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800f32c:	e7f5      	b.n	800f31a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800f32e:	2000      	movs	r0, #0
 800f330:	e7f4      	b.n	800f31c <xQueueGenericSendFromISR+0xa4>

0800f332 <xQueueGiveFromISR>:
{
 800f332:	b570      	push	{r4, r5, r6, lr}
 800f334:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800f336:	4604      	mov	r4, r0
 800f338:	b940      	cbnz	r0, 800f34c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800f33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	e7fe      	b.n	800f34a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f34c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f34e:	b143      	cbz	r3, 800f362 <xQueueGiveFromISR+0x30>
 800f350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	e7fe      	b.n	800f360 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f362:	6803      	ldr	r3, [r0, #0]
 800f364:	b953      	cbnz	r3, 800f37c <xQueueGiveFromISR+0x4a>
 800f366:	6883      	ldr	r3, [r0, #8]
 800f368:	b143      	cbz	r3, 800f37c <xQueueGiveFromISR+0x4a>
 800f36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	e7fe      	b.n	800f37a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f37c:	f7ff fccc 	bl	800ed18 <vPortValidateInterruptPriority>
	__asm volatile
 800f380:	f3ef 8611 	mrs	r6, BASEPRI
 800f384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f394:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f396:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f398:	4293      	cmp	r3, r2
 800f39a:	d919      	bls.n	800f3d0 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800f39c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3a0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800f3a2:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800f3a4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3a6:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800f3a8:	d10d      	bne.n	800f3c6 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f3ac:	b13b      	cbz	r3, 800f3be <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3ae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f3b2:	f000 fe03 	bl	800ffbc <xTaskRemoveFromEventList>
 800f3b6:	b110      	cbz	r0, 800f3be <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800f3b8:	b10d      	cbz	r5, 800f3be <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800f3be:	2001      	movs	r0, #1
	__asm volatile
 800f3c0:	f386 8811 	msr	BASEPRI, r6
}
 800f3c4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	b25b      	sxtb	r3, r3
 800f3ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f3ce:	e7f6      	b.n	800f3be <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	e7f5      	b.n	800f3c0 <xQueueGiveFromISR+0x8e>

0800f3d4 <xQueueReceive>:
{
 800f3d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f3d8:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800f3da:	4604      	mov	r4, r0
{
 800f3dc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f3de:	b940      	cbnz	r0, 800f3f2 <xQueueReceive+0x1e>
	__asm volatile
 800f3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	e7fe      	b.n	800f3f0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3f2:	b951      	cbnz	r1, 800f40a <xQueueReceive+0x36>
 800f3f4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f3f6:	b143      	cbz	r3, 800f40a <xQueueReceive+0x36>
 800f3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fc:	f383 8811 	msr	BASEPRI, r3
 800f400:	f3bf 8f6f 	isb	sy
 800f404:	f3bf 8f4f 	dsb	sy
 800f408:	e7fe      	b.n	800f408 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f40a:	f000 fe6d 	bl	80100e8 <xTaskGetSchedulerState>
 800f40e:	4605      	mov	r5, r0
 800f410:	b318      	cbz	r0, 800f45a <xQueueReceive+0x86>
 800f412:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f414:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800f418:	f7ff fb6c 	bl	800eaf4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f41c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f41e:	b347      	cbz	r7, 800f472 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f420:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f422:	4631      	mov	r1, r6
 800f424:	4620      	mov	r0, r4
 800f426:	f7ff fce3 	bl	800edf0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f42a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f42c:	6923      	ldr	r3, [r4, #16]
 800f42e:	b173      	cbz	r3, 800f44e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f430:	f104 0010 	add.w	r0, r4, #16
 800f434:	f000 fdc2 	bl	800ffbc <xTaskRemoveFromEventList>
 800f438:	b148      	cbz	r0, 800f44e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800f43a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f43e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f442:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800f44e:	f7ff fb71 	bl	800eb34 <vPortExitCritical>
				return pdPASS;
 800f452:	2001      	movs	r0, #1
}
 800f454:	b004      	add	sp, #16
 800f456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f45a:	9b01      	ldr	r3, [sp, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d0d9      	beq.n	800f414 <xQueueReceive+0x40>
 800f460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	e7fe      	b.n	800f470 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f472:	9b01      	ldr	r3, [sp, #4]
 800f474:	b91b      	cbnz	r3, 800f47e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800f476:	f7ff fb5d 	bl	800eb34 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f47a:	2000      	movs	r0, #0
 800f47c:	e7ea      	b.n	800f454 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800f47e:	b915      	cbnz	r5, 800f486 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f480:	a802      	add	r0, sp, #8
 800f482:	f000 fddd 	bl	8010040 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f486:	f7ff fb55 	bl	800eb34 <vPortExitCritical>
		vTaskSuspendAll();
 800f48a:	f000 fb99 	bl	800fbc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f48e:	f7ff fb31 	bl	800eaf4 <vPortEnterCritical>
 800f492:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f496:	2bff      	cmp	r3, #255	@ 0xff
 800f498:	d101      	bne.n	800f49e <xQueueReceive+0xca>
 800f49a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800f49e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f4a2:	2bff      	cmp	r3, #255	@ 0xff
 800f4a4:	d101      	bne.n	800f4aa <xQueueReceive+0xd6>
 800f4a6:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800f4aa:	f7ff fb43 	bl	800eb34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4ae:	a901      	add	r1, sp, #4
 800f4b0:	a802      	add	r0, sp, #8
 800f4b2:	f000 fdd1 	bl	8010058 <xTaskCheckForTimeOut>
 800f4b6:	bb00      	cbnz	r0, 800f4fa <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f7ff fc5b 	bl	800ed74 <prvIsQueueEmpty>
 800f4be:	b1b0      	cbz	r0, 800f4ee <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4c0:	9901      	ldr	r1, [sp, #4]
 800f4c2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f4c6:	f000 fd41 	bl	800ff4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f7ff fca5 	bl	800ee1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4d0:	f000 fc1a 	bl	800fd08 <xTaskResumeAll>
 800f4d4:	b948      	cbnz	r0, 800f4ea <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800f4d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f4da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f4e2:	f3bf 8f4f 	dsb	sy
 800f4e6:	f3bf 8f6f 	isb	sy
 800f4ea:	2501      	movs	r5, #1
 800f4ec:	e794      	b.n	800f418 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f7ff fc93 	bl	800ee1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4f4:	f000 fc08 	bl	800fd08 <xTaskResumeAll>
 800f4f8:	e7f7      	b.n	800f4ea <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f7ff fc8d 	bl	800ee1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f500:	f000 fc02 	bl	800fd08 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f504:	4620      	mov	r0, r4
 800f506:	f7ff fc35 	bl	800ed74 <prvIsQueueEmpty>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	d0ed      	beq.n	800f4ea <xQueueReceive+0x116>
 800f50e:	e7b4      	b.n	800f47a <xQueueReceive+0xa6>

0800f510 <xQueueSemaphoreTake>:
{
 800f510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f512:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800f514:	4604      	mov	r4, r0
{
 800f516:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800f518:	b940      	cbnz	r0, 800f52c <xQueueSemaphoreTake+0x1c>
 800f51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	e7fe      	b.n	800f52a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f52c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800f52e:	b145      	cbz	r5, 800f542 <xQueueSemaphoreTake+0x32>
 800f530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f534:	f383 8811 	msr	BASEPRI, r3
 800f538:	f3bf 8f6f 	isb	sy
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	e7fe      	b.n	800f540 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f542:	f000 fdd1 	bl	80100e8 <xTaskGetSchedulerState>
 800f546:	4606      	mov	r6, r0
 800f548:	b320      	cbz	r0, 800f594 <xQueueSemaphoreTake+0x84>
 800f54a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800f54c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800f54e:	f7ff fad1 	bl	800eaf4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f552:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f554:	b353      	cbz	r3, 800f5ac <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f556:	3b01      	subs	r3, #1
 800f558:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	b913      	cbnz	r3, 800f564 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f55e:	f000 fea1 	bl	80102a4 <pvTaskIncrementMutexHeldCount>
 800f562:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f564:	6923      	ldr	r3, [r4, #16]
 800f566:	b173      	cbz	r3, 800f586 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f568:	f104 0010 	add.w	r0, r4, #16
 800f56c:	f000 fd26 	bl	800ffbc <xTaskRemoveFromEventList>
 800f570:	b148      	cbz	r0, 800f586 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800f572:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f57a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800f586:	f7ff fad5 	bl	800eb34 <vPortExitCritical>
				return pdPASS;
 800f58a:	2001      	movs	r0, #1
}
 800f58c:	b005      	add	sp, #20
 800f58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f590:	4635      	mov	r5, r6
 800f592:	e7db      	b.n	800f54c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f594:	9b01      	ldr	r3, [sp, #4]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d0fa      	beq.n	800f590 <xQueueSemaphoreTake+0x80>
 800f59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f59e:	f383 8811 	msr	BASEPRI, r3
 800f5a2:	f3bf 8f6f 	isb	sy
 800f5a6:	f3bf 8f4f 	dsb	sy
 800f5aa:	e7fe      	b.n	800f5aa <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f5ac:	9b01      	ldr	r3, [sp, #4]
 800f5ae:	b953      	cbnz	r3, 800f5c6 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f5b0:	2d00      	cmp	r5, #0
 800f5b2:	d066      	beq.n	800f682 <xQueueSemaphoreTake+0x172>
 800f5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b8:	f383 8811 	msr	BASEPRI, r3
 800f5bc:	f3bf 8f6f 	isb	sy
 800f5c0:	f3bf 8f4f 	dsb	sy
 800f5c4:	e7fe      	b.n	800f5c4 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800f5c6:	b916      	cbnz	r6, 800f5ce <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f5c8:	a802      	add	r0, sp, #8
 800f5ca:	f000 fd39 	bl	8010040 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f5ce:	f7ff fab1 	bl	800eb34 <vPortExitCritical>
		vTaskSuspendAll();
 800f5d2:	f000 faf5 	bl	800fbc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f5d6:	f7ff fa8d 	bl	800eaf4 <vPortEnterCritical>
 800f5da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f5de:	2bff      	cmp	r3, #255	@ 0xff
 800f5e0:	d101      	bne.n	800f5e6 <xQueueSemaphoreTake+0xd6>
 800f5e2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800f5e6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f5ea:	2bff      	cmp	r3, #255	@ 0xff
 800f5ec:	d101      	bne.n	800f5f2 <xQueueSemaphoreTake+0xe2>
 800f5ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f5f2:	f7ff fa9f 	bl	800eb34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5f6:	a901      	add	r1, sp, #4
 800f5f8:	a802      	add	r0, sp, #8
 800f5fa:	f000 fd2d 	bl	8010058 <xTaskCheckForTimeOut>
 800f5fe:	bb50      	cbnz	r0, 800f656 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f600:	4620      	mov	r0, r4
 800f602:	f7ff fbb7 	bl	800ed74 <prvIsQueueEmpty>
 800f606:	b300      	cbz	r0, 800f64a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f608:	6823      	ldr	r3, [r4, #0]
 800f60a:	b93b      	cbnz	r3, 800f61c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800f60c:	f7ff fa72 	bl	800eaf4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f610:	68a0      	ldr	r0, [r4, #8]
 800f612:	f000 fd79 	bl	8010108 <xTaskPriorityInherit>
 800f616:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800f618:	f7ff fa8c 	bl	800eb34 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f61c:	9901      	ldr	r1, [sp, #4]
 800f61e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f622:	f000 fc93 	bl	800ff4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f626:	4620      	mov	r0, r4
 800f628:	f7ff fbf7 	bl	800ee1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f62c:	f000 fb6c 	bl	800fd08 <xTaskResumeAll>
 800f630:	b948      	cbnz	r0, 800f646 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800f632:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f63a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	f3bf 8f6f 	isb	sy
 800f646:	2601      	movs	r6, #1
 800f648:	e781      	b.n	800f54e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800f64a:	4620      	mov	r0, r4
 800f64c:	f7ff fbe5 	bl	800ee1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f650:	f000 fb5a 	bl	800fd08 <xTaskResumeAll>
 800f654:	e7f7      	b.n	800f646 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800f656:	4620      	mov	r0, r4
 800f658:	f7ff fbdf 	bl	800ee1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f65c:	f000 fb54 	bl	800fd08 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f660:	4620      	mov	r0, r4
 800f662:	f7ff fb87 	bl	800ed74 <prvIsQueueEmpty>
 800f666:	2800      	cmp	r0, #0
 800f668:	d0ed      	beq.n	800f646 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800f66a:	b165      	cbz	r5, 800f686 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800f66c:	f7ff fa42 	bl	800eaf4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f670:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f672:	b119      	cbz	r1, 800f67c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f674:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f676:	6819      	ldr	r1, [r3, #0]
 800f678:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f67c:	68a0      	ldr	r0, [r4, #8]
 800f67e:	f000 fdc3 	bl	8010208 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800f682:	f7ff fa57 	bl	800eb34 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f686:	2000      	movs	r0, #0
 800f688:	e780      	b.n	800f58c <xQueueSemaphoreTake+0x7c>

0800f68a <xQueueTakeMutexRecursive>:
	{
 800f68a:	b570      	push	{r4, r5, r6, lr}
 800f68c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800f68e:	4604      	mov	r4, r0
 800f690:	b940      	cbnz	r0, 800f6a4 <xQueueTakeMutexRecursive+0x1a>
 800f692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f696:	f383 8811 	msr	BASEPRI, r3
 800f69a:	f3bf 8f6f 	isb	sy
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	e7fe      	b.n	800f6a2 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f6a4:	6886      	ldr	r6, [r0, #8]
 800f6a6:	f000 fd19 	bl	80100dc <xTaskGetCurrentTaskHandle>
 800f6aa:	4286      	cmp	r6, r0
 800f6ac:	d104      	bne.n	800f6b8 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f6ae:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800f6b0:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	60e3      	str	r3, [r4, #12]
	}
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f6b8:	4629      	mov	r1, r5
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f7ff ff28 	bl	800f510 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d0f8      	beq.n	800f6b6 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f6c4:	68e3      	ldr	r3, [r4, #12]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	60e3      	str	r3, [r4, #12]
 800f6ca:	e7f4      	b.n	800f6b6 <xQueueTakeMutexRecursive+0x2c>

0800f6cc <xQueueReceiveFromISR>:
{
 800f6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d0:	4689      	mov	r9, r1
 800f6d2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	b940      	cbnz	r0, 800f6ea <xQueueReceiveFromISR+0x1e>
 800f6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6dc:	f383 8811 	msr	BASEPRI, r3
 800f6e0:	f3bf 8f6f 	isb	sy
 800f6e4:	f3bf 8f4f 	dsb	sy
 800f6e8:	e7fe      	b.n	800f6e8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f6ea:	b951      	cbnz	r1, 800f702 <xQueueReceiveFromISR+0x36>
 800f6ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f6ee:	b143      	cbz	r3, 800f702 <xQueueReceiveFromISR+0x36>
 800f6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f4:	f383 8811 	msr	BASEPRI, r3
 800f6f8:	f3bf 8f6f 	isb	sy
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	e7fe      	b.n	800f700 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f702:	f7ff fb09 	bl	800ed18 <vPortValidateInterruptPriority>
	__asm volatile
 800f706:	f3ef 8711 	mrs	r7, BASEPRI
 800f70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f70e:	f383 8811 	msr	BASEPRI, r3
 800f712:	f3bf 8f6f 	isb	sy
 800f716:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f71a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f71c:	b30d      	cbz	r5, 800f762 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800f71e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f722:	4649      	mov	r1, r9
 800f724:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f726:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800f728:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f72a:	f7ff fb61 	bl	800edf0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f72e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800f730:	1c73      	adds	r3, r6, #1
 800f732:	d111      	bne.n	800f758 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f734:	6923      	ldr	r3, [r4, #16]
 800f736:	b153      	cbz	r3, 800f74e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f738:	f104 0010 	add.w	r0, r4, #16
 800f73c:	f000 fc3e 	bl	800ffbc <xTaskRemoveFromEventList>
 800f740:	b128      	cbz	r0, 800f74e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800f742:	f1b8 0f00 	cmp.w	r8, #0
 800f746:	d002      	beq.n	800f74e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f748:	2301      	movs	r3, #1
 800f74a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800f74e:	2001      	movs	r0, #1
	__asm volatile
 800f750:	f387 8811 	msr	BASEPRI, r7
}
 800f754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f758:	3601      	adds	r6, #1
 800f75a:	b276      	sxtb	r6, r6
 800f75c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800f760:	e7f5      	b.n	800f74e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800f762:	4628      	mov	r0, r5
 800f764:	e7f4      	b.n	800f750 <xQueueReceiveFromISR+0x84>
	...

0800f768 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f768:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f76a:	4a07      	ldr	r2, [pc, #28]	@ (800f788 <vQueueAddToRegistry+0x20>)
	{
 800f76c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f76e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800f772:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800f776:	b91d      	cbnz	r5, 800f780 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f778:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f77c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f77e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f780:	3301      	adds	r3, #1
 800f782:	2b08      	cmp	r3, #8
 800f784:	d1f3      	bne.n	800f76e <vQueueAddToRegistry+0x6>
 800f786:	e7fa      	b.n	800f77e <vQueueAddToRegistry+0x16>
 800f788:	24025da4 	.word	0x24025da4

0800f78c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f78c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f78e:	4a09      	ldr	r2, [pc, #36]	@ (800f7b4 <vQueueUnregisterQueue+0x28>)
	{
 800f790:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f792:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f796:	00dc      	lsls	r4, r3, #3
 800f798:	4281      	cmp	r1, r0
 800f79a:	d106      	bne.n	800f7aa <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f79c:	4a06      	ldr	r2, [pc, #24]	@ (800f7b8 <vQueueUnregisterQueue+0x2c>)
 800f79e:	2100      	movs	r1, #0
 800f7a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f7a4:	4422      	add	r2, r4
 800f7a6:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f7a8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	2b08      	cmp	r3, #8
 800f7ae:	d1f0      	bne.n	800f792 <vQueueUnregisterQueue+0x6>
 800f7b0:	e7fa      	b.n	800f7a8 <vQueueUnregisterQueue+0x1c>
 800f7b2:	bf00      	nop
 800f7b4:	24025da8 	.word	0x24025da8
 800f7b8:	24025da4 	.word	0x24025da4

0800f7bc <vQueueDelete>:
{
 800f7bc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800f7be:	b940      	cbnz	r0, 800f7d2 <vQueueDelete+0x16>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c4:	f383 8811 	msr	BASEPRI, r3
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	e7fe      	b.n	800f7d0 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800f7d2:	f7ff ffdb 	bl	800f78c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f7d6:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800f7da:	b91b      	cbnz	r3, 800f7e4 <vQueueDelete+0x28>
}
 800f7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800f7e0:	f7ff b8a4 	b.w	800e92c <vPortFree>
}
 800f7e4:	bd10      	pop	{r4, pc}

0800f7e6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7e6:	b570      	push	{r4, r5, r6, lr}
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f7ee:	f7ff f981 	bl	800eaf4 <vPortEnterCritical>
 800f7f2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f7f6:	2bff      	cmp	r3, #255	@ 0xff
 800f7f8:	d102      	bne.n	800f800 <vQueueWaitForMessageRestricted+0x1a>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800f800:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f804:	2bff      	cmp	r3, #255	@ 0xff
 800f806:	d102      	bne.n	800f80e <vQueueWaitForMessageRestricted+0x28>
 800f808:	2300      	movs	r3, #0
 800f80a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f80e:	f7ff f991 	bl	800eb34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f812:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800f814:	b92b      	cbnz	r3, 800f822 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f816:	4632      	mov	r2, r6
 800f818:	4629      	mov	r1, r5
 800f81a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f81e:	f000 fbaf 	bl	800ff80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f822:	4620      	mov	r0, r4
	}
 800f824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800f828:	f7ff baf7 	b.w	800ee1a <prvUnlockQueue>

0800f82c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f830:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f832:	f7ff f95f 	bl	800eaf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f836:	4b2f      	ldr	r3, [pc, #188]	@ (800f8f4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800f838:	4e2f      	ldr	r6, [pc, #188]	@ (800f8f8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	4f2f      	ldr	r7, [pc, #188]	@ (800f8fc <prvAddNewTaskToReadyList+0xd0>)
 800f83e:	3201      	adds	r2, #1
 800f840:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800f842:	6835      	ldr	r5, [r6, #0]
 800f844:	2d00      	cmp	r5, #0
 800f846:	d14a      	bne.n	800f8de <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f848:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d11f      	bne.n	800f890 <prvAddNewTaskToReadyList+0x64>
 800f850:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f852:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f854:	4640      	mov	r0, r8
 800f856:	f7ff f8a7 	bl	800e9a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f85a:	f108 0814 	add.w	r8, r8, #20
 800f85e:	2d38      	cmp	r5, #56	@ 0x38
 800f860:	d1f7      	bne.n	800f852 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f862:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800f924 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800f866:	4d26      	ldr	r5, [pc, #152]	@ (800f900 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800f868:	4640      	mov	r0, r8
 800f86a:	f7ff f89d 	bl	800e9a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f86e:	4628      	mov	r0, r5
 800f870:	f7ff f89a 	bl	800e9a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f874:	4823      	ldr	r0, [pc, #140]	@ (800f904 <prvAddNewTaskToReadyList+0xd8>)
 800f876:	f7ff f897 	bl	800e9a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f87a:	4823      	ldr	r0, [pc, #140]	@ (800f908 <prvAddNewTaskToReadyList+0xdc>)
 800f87c:	f7ff f894 	bl	800e9a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f880:	4822      	ldr	r0, [pc, #136]	@ (800f90c <prvAddNewTaskToReadyList+0xe0>)
 800f882:	f7ff f891 	bl	800e9a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f886:	4b22      	ldr	r3, [pc, #136]	@ (800f910 <prvAddNewTaskToReadyList+0xe4>)
 800f888:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f88c:	4b21      	ldr	r3, [pc, #132]	@ (800f914 <prvAddNewTaskToReadyList+0xe8>)
 800f88e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800f890:	4a21      	ldr	r2, [pc, #132]	@ (800f918 <prvAddNewTaskToReadyList+0xec>)
 800f892:	6813      	ldr	r3, [r2, #0]
 800f894:	3301      	adds	r3, #1
 800f896:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800f898:	4a20      	ldr	r2, [pc, #128]	@ (800f91c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f89a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800f89c:	6811      	ldr	r1, [r2, #0]
 800f89e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f8a0:	428b      	cmp	r3, r1
 800f8a2:	d900      	bls.n	800f8a6 <prvAddNewTaskToReadyList+0x7a>
 800f8a4:	6013      	str	r3, [r2, #0]
 800f8a6:	2014      	movs	r0, #20
 800f8a8:	1d21      	adds	r1, r4, #4
 800f8aa:	fb00 7003 	mla	r0, r0, r3, r7
 800f8ae:	f7ff f889 	bl	800e9c4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800f8b2:	f7ff f93f 	bl	800eb34 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800f8b6:	4b1a      	ldr	r3, [pc, #104]	@ (800f920 <prvAddNewTaskToReadyList+0xf4>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	b173      	cbz	r3, 800f8da <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f8bc:	6833      	ldr	r3, [r6, #0]
 800f8be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d209      	bcs.n	800f8da <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800f8c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f8d2:	f3bf 8f4f 	dsb	sy
 800f8d6:	f3bf 8f6f 	isb	sy
}
 800f8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800f8de:	4b10      	ldr	r3, [pc, #64]	@ (800f920 <prvAddNewTaskToReadyList+0xf4>)
 800f8e0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800f8e4:	2a00      	cmp	r2, #0
 800f8e6:	d1d3      	bne.n	800f890 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8e8:	6832      	ldr	r2, [r6, #0]
 800f8ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d8cf      	bhi.n	800f890 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800f8f0:	6034      	str	r4, [r6, #0]
 800f8f2:	e7cd      	b.n	800f890 <prvAddNewTaskToReadyList+0x64>
 800f8f4:	24025e08 	.word	0x24025e08
 800f8f8:	240262dc 	.word	0x240262dc
 800f8fc:	24025e7c 	.word	0x24025e7c
 800f900:	24025e54 	.word	0x24025e54
 800f904:	24025e38 	.word	0x24025e38
 800f908:	24025e24 	.word	0x24025e24
 800f90c:	24025e0c 	.word	0x24025e0c
 800f910:	24025e50 	.word	0x24025e50
 800f914:	24025e4c 	.word	0x24025e4c
 800f918:	24025dec 	.word	0x24025dec
 800f91c:	24025e00 	.word	0x24025e00
 800f920:	24025dfc 	.word	0x24025dfc
 800f924:	24025e68 	.word	0x24025e68

0800f928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f92a:	4b15      	ldr	r3, [pc, #84]	@ (800f980 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800f92c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f92e:	4d15      	ldr	r5, [pc, #84]	@ (800f984 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800f930:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800f932:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f934:	6828      	ldr	r0, [r5, #0]
 800f936:	3004      	adds	r0, #4
 800f938:	f7ff f866 	bl	800ea08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f93c:	1c73      	adds	r3, r6, #1
 800f93e:	d107      	bne.n	800f950 <prvAddCurrentTaskToDelayedList+0x28>
 800f940:	b137      	cbz	r7, 800f950 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f942:	6829      	ldr	r1, [r5, #0]
 800f944:	4810      	ldr	r0, [pc, #64]	@ (800f988 <prvAddCurrentTaskToDelayedList+0x60>)
 800f946:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f94c:	f7ff b83a 	b.w	800e9c4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f950:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f952:	682b      	ldr	r3, [r5, #0]
 800f954:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f956:	d307      	bcc.n	800f968 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f958:	4b0c      	ldr	r3, [pc, #48]	@ (800f98c <prvAddCurrentTaskToDelayedList+0x64>)
 800f95a:	6818      	ldr	r0, [r3, #0]
 800f95c:	6829      	ldr	r1, [r5, #0]
}
 800f95e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f962:	3104      	adds	r1, #4
 800f964:	f7ff b839 	b.w	800e9da <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f968:	4b09      	ldr	r3, [pc, #36]	@ (800f990 <prvAddCurrentTaskToDelayedList+0x68>)
 800f96a:	6818      	ldr	r0, [r3, #0]
 800f96c:	6829      	ldr	r1, [r5, #0]
 800f96e:	3104      	adds	r1, #4
 800f970:	f7ff f833 	bl	800e9da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f974:	4b07      	ldr	r3, [pc, #28]	@ (800f994 <prvAddCurrentTaskToDelayedList+0x6c>)
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	42a2      	cmp	r2, r4
 800f97a:	d900      	bls.n	800f97e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800f97c:	601c      	str	r4, [r3, #0]
}
 800f97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f980:	24025e04 	.word	0x24025e04
 800f984:	240262dc 	.word	0x240262dc
 800f988:	24025e0c 	.word	0x24025e0c
 800f98c:	24025e4c 	.word	0x24025e4c
 800f990:	24025e50 	.word	0x24025e50
 800f994:	24025de8 	.word	0x24025de8

0800f998 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f998:	4a06      	ldr	r2, [pc, #24]	@ (800f9b4 <prvResetNextTaskUnblockTime+0x1c>)
 800f99a:	6813      	ldr	r3, [r2, #0]
 800f99c:	6819      	ldr	r1, [r3, #0]
 800f99e:	4b06      	ldr	r3, [pc, #24]	@ (800f9b8 <prvResetNextTaskUnblockTime+0x20>)
 800f9a0:	b919      	cbnz	r1, 800f9aa <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9a2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9a6:	601a      	str	r2, [r3, #0]
}
 800f9a8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9aa:	6812      	ldr	r2, [r2, #0]
 800f9ac:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9ae:	68d2      	ldr	r2, [r2, #12]
 800f9b0:	6852      	ldr	r2, [r2, #4]
 800f9b2:	e7f8      	b.n	800f9a6 <prvResetNextTaskUnblockTime+0xe>
 800f9b4:	24025e50 	.word	0x24025e50
 800f9b8:	24025de8 	.word	0x24025de8

0800f9bc <prvDeleteTCB>:
	{
 800f9bc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f9be:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800f9c2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f9c4:	b93b      	cbnz	r3, 800f9d6 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800f9c6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f9c8:	f7fe ffb0 	bl	800e92c <vPortFree>
				vPortFree( pxTCB );
 800f9cc:	4620      	mov	r0, r4
	}
 800f9ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800f9d2:	f7fe bfab 	b.w	800e92c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d0f9      	beq.n	800f9ce <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f9da:	2b02      	cmp	r3, #2
 800f9dc:	d008      	beq.n	800f9f0 <prvDeleteTCB+0x34>
 800f9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	e7fe      	b.n	800f9ee <prvDeleteTCB+0x32>
	}
 800f9f0:	bd10      	pop	{r4, pc}
	...

0800f9f4 <prvIdleTask>:
{
 800f9f4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f9f6:	4c14      	ldr	r4, [pc, #80]	@ (800fa48 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9f8:	4f14      	ldr	r7, [pc, #80]	@ (800fa4c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800f9fa:	4d15      	ldr	r5, [pc, #84]	@ (800fa50 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f9fc:	6823      	ldr	r3, [r4, #0]
 800f9fe:	b983      	cbnz	r3, 800fa22 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa00:	4b14      	ldr	r3, [pc, #80]	@ (800fa54 <prvIdleTask+0x60>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d909      	bls.n	800fa1c <prvIdleTask+0x28>
				taskYIELD();
 800fa08:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fa0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa10:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fa14:	f3bf 8f4f 	dsb	sy
 800fa18:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800fa1c:	f7f0 fe6c 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fa20:	e7eb      	b.n	800f9fa <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800fa22:	f7ff f867 	bl	800eaf4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa2a:	1d30      	adds	r0, r6, #4
 800fa2c:	f7fe ffec 	bl	800ea08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	3b01      	subs	r3, #1
 800fa34:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fa36:	6823      	ldr	r3, [r4, #0]
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800fa3c:	f7ff f87a 	bl	800eb34 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800fa40:	4630      	mov	r0, r6
 800fa42:	f7ff ffbb 	bl	800f9bc <prvDeleteTCB>
 800fa46:	e7d9      	b.n	800f9fc <prvIdleTask+0x8>
 800fa48:	24025e20 	.word	0x24025e20
 800fa4c:	24025e24 	.word	0x24025e24
 800fa50:	24025e08 	.word	0x24025e08
 800fa54:	24025e7c 	.word	0x24025e7c

0800fa58 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800fa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fa5c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800fa5e:	4607      	mov	r7, r0
 800fa60:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fa62:	21a5      	movs	r1, #165	@ 0xa5
 800fa64:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800fa66:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fa68:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800fa6a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fa6e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800fa70:	f016 fb7a 	bl	8026168 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fa74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa76:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fa78:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800fa7c:	b3b5      	cbz	r5, 800faec <prvInitialiseNewTask.constprop.0+0x94>
 800fa7e:	1e6b      	subs	r3, r5, #1
 800fa80:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800fa84:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fa86:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fa8a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800fa8e:	b109      	cbz	r1, 800fa94 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa90:	42ab      	cmp	r3, r5
 800fa92:	d1f8      	bne.n	800fa86 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fa94:	2300      	movs	r3, #0
 800fa96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fa9a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800fa9c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800faa0:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800faa2:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800faa4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800faa8:	bf28      	it	cs
 800faaa:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800faac:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800faae:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fab0:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fab4:	f7fe ff83 	bl	800e9be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fab8:	f104 0018 	add.w	r0, r4, #24
 800fabc:	f7fe ff7f 	bl	800e9be <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800fac0:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fac4:	4642      	mov	r2, r8
 800fac6:	4639      	mov	r1, r7
 800fac8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800faca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800facc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800face:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800fad0:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fad4:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fad8:	f7fe ffe4 	bl	800eaa4 <pxPortInitialiseStack>
 800fadc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800fade:	f1b9 0f00 	cmp.w	r9, #0
 800fae2:	d001      	beq.n	800fae8 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fae4:	f8c9 4000 	str.w	r4, [r9]
}
 800fae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800faec:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800faf0:	e7d3      	b.n	800fa9a <prvInitialiseNewTask.constprop.0+0x42>

0800faf2 <xTaskCreateStatic>:
	{
 800faf2:	b570      	push	{r4, r5, r6, lr}
 800faf4:	b086      	sub	sp, #24
 800faf6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800fafa:	b945      	cbnz	r5, 800fb0e <xTaskCreateStatic+0x1c>
 800fafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb00:	f383 8811 	msr	BASEPRI, r3
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	e7fe      	b.n	800fb0c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800fb0e:	b944      	cbnz	r4, 800fb22 <xTaskCreateStatic+0x30>
 800fb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	e7fe      	b.n	800fb20 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb22:	2660      	movs	r6, #96	@ 0x60
 800fb24:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb26:	9e05      	ldr	r6, [sp, #20]
 800fb28:	2e60      	cmp	r6, #96	@ 0x60
 800fb2a:	d008      	beq.n	800fb3e <xTaskCreateStatic+0x4c>
 800fb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb30:	f383 8811 	msr	BASEPRI, r3
 800fb34:	f3bf 8f6f 	isb	sy
 800fb38:	f3bf 8f4f 	dsb	sy
 800fb3c:	e7fe      	b.n	800fb3c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fb3e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fb40:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fb42:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fb44:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fb48:	ad04      	add	r5, sp, #16
 800fb4a:	9402      	str	r4, [sp, #8]
 800fb4c:	9501      	str	r5, [sp, #4]
 800fb4e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800fb50:	9500      	str	r5, [sp, #0]
 800fb52:	f7ff ff81 	bl	800fa58 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb56:	4620      	mov	r0, r4
 800fb58:	f7ff fe68 	bl	800f82c <prvAddNewTaskToReadyList>
	}
 800fb5c:	9804      	ldr	r0, [sp, #16]
 800fb5e:	b006      	add	sp, #24
 800fb60:	bd70      	pop	{r4, r5, r6, pc}

0800fb62 <xTaskCreate>:
	{
 800fb62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb66:	4607      	mov	r7, r0
 800fb68:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb6a:	0090      	lsls	r0, r2, #2
	{
 800fb6c:	4688      	mov	r8, r1
 800fb6e:	4616      	mov	r6, r2
 800fb70:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb72:	f7fe fe43 	bl	800e7fc <pvPortMalloc>
			if( pxStack != NULL )
 800fb76:	4605      	mov	r5, r0
 800fb78:	b920      	cbnz	r0, 800fb84 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb7a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800fb7e:	b005      	add	sp, #20
 800fb80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fb84:	2060      	movs	r0, #96	@ 0x60
 800fb86:	f7fe fe39 	bl	800e7fc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	b198      	cbz	r0, 800fbb6 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fb8e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800fb90:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb92:	4632      	mov	r2, r6
 800fb94:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fb96:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb9c:	9002      	str	r0, [sp, #8]
 800fb9e:	4638      	mov	r0, r7
 800fba0:	9301      	str	r3, [sp, #4]
 800fba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fba4:	9300      	str	r3, [sp, #0]
 800fba6:	464b      	mov	r3, r9
 800fba8:	f7ff ff56 	bl	800fa58 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbac:	4620      	mov	r0, r4
 800fbae:	f7ff fe3d 	bl	800f82c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fbb2:	2001      	movs	r0, #1
 800fbb4:	e7e3      	b.n	800fb7e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f7fe feb8 	bl	800e92c <vPortFree>
		if( pxNewTCB != NULL )
 800fbbc:	e7dd      	b.n	800fb7a <xTaskCreate+0x18>
	...

0800fbc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800fbc0:	4a02      	ldr	r2, [pc, #8]	@ (800fbcc <vTaskSuspendAll+0xc>)
 800fbc2:	6813      	ldr	r3, [r2, #0]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	6013      	str	r3, [r2, #0]
}
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	24025de4 	.word	0x24025de4

0800fbd0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800fbd0:	4b01      	ldr	r3, [pc, #4]	@ (800fbd8 <xTaskGetTickCount+0x8>)
 800fbd2:	6818      	ldr	r0, [r3, #0]
}
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	24025e04 	.word	0x24025e04

0800fbdc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbdc:	4b3f      	ldr	r3, [pc, #252]	@ (800fcdc <xTaskIncrementTick+0x100>)
 800fbde:	681b      	ldr	r3, [r3, #0]
{
 800fbe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d172      	bne.n	800fcce <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fbe8:	4b3d      	ldr	r3, [pc, #244]	@ (800fce0 <xTaskIncrementTick+0x104>)
 800fbea:	681c      	ldr	r4, [r3, #0]
 800fbec:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800fbee:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fbf0:	b9bc      	cbnz	r4, 800fc22 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800fbf2:	4b3c      	ldr	r3, [pc, #240]	@ (800fce4 <xTaskIncrementTick+0x108>)
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	6812      	ldr	r2, [r2, #0]
 800fbf8:	b142      	cbz	r2, 800fc0c <xTaskIncrementTick+0x30>
 800fbfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbfe:	f383 8811 	msr	BASEPRI, r3
 800fc02:	f3bf 8f6f 	isb	sy
 800fc06:	f3bf 8f4f 	dsb	sy
 800fc0a:	e7fe      	b.n	800fc0a <xTaskIncrementTick+0x2e>
 800fc0c:	4a36      	ldr	r2, [pc, #216]	@ (800fce8 <xTaskIncrementTick+0x10c>)
 800fc0e:	6819      	ldr	r1, [r3, #0]
 800fc10:	6810      	ldr	r0, [r2, #0]
 800fc12:	6018      	str	r0, [r3, #0]
 800fc14:	6011      	str	r1, [r2, #0]
 800fc16:	4a35      	ldr	r2, [pc, #212]	@ (800fcec <xTaskIncrementTick+0x110>)
 800fc18:	6813      	ldr	r3, [r2, #0]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	6013      	str	r3, [r2, #0]
 800fc1e:	f7ff febb 	bl	800f998 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc22:	4d33      	ldr	r5, [pc, #204]	@ (800fcf0 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800fc24:	f04f 0b00 	mov.w	fp, #0
 800fc28:	4e32      	ldr	r6, [pc, #200]	@ (800fcf4 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc2a:	682b      	ldr	r3, [r5, #0]
 800fc2c:	4f32      	ldr	r7, [pc, #200]	@ (800fcf8 <xTaskIncrementTick+0x11c>)
 800fc2e:	429c      	cmp	r4, r3
 800fc30:	d212      	bcs.n	800fc58 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	2114      	movs	r1, #20
 800fc36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fc38:	434a      	muls	r2, r1
 800fc3a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800fc3c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800fc3e:	4a2f      	ldr	r2, [pc, #188]	@ (800fcfc <xTaskIncrementTick+0x120>)
 800fc40:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800fc42:	bf28      	it	cs
 800fc44:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800fc48:	2a00      	cmp	r2, #0
 800fc4a:	bf18      	it	ne
 800fc4c:	f04f 0b01 	movne.w	fp, #1
}
 800fc50:	4658      	mov	r0, fp
 800fc52:	b003      	add	sp, #12
 800fc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc58:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800fce4 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800fc5c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800fd04 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc60:	f8d9 2000 	ldr.w	r2, [r9]
 800fc64:	6812      	ldr	r2, [r2, #0]
 800fc66:	b91a      	cbnz	r2, 800fc70 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc68:	f04f 32ff 	mov.w	r2, #4294967295
 800fc6c:	602a      	str	r2, [r5, #0]
					break;
 800fc6e:	e7e0      	b.n	800fc32 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc70:	f8d9 2000 	ldr.w	r2, [r9]
 800fc74:	68d2      	ldr	r2, [r2, #12]
 800fc76:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fc7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800fc7e:	428c      	cmp	r4, r1
 800fc80:	d201      	bcs.n	800fc86 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800fc82:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fc84:	e7d5      	b.n	800fc32 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc86:	f108 0304 	add.w	r3, r8, #4
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	9301      	str	r3, [sp, #4]
 800fc8e:	f7fe febb 	bl	800ea08 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc92:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800fc96:	b119      	cbz	r1, 800fca0 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc98:	f108 0018 	add.w	r0, r8, #24
 800fc9c:	f7fe feb4 	bl	800ea08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fca0:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800fca4:	f8da 1000 	ldr.w	r1, [sl]
 800fca8:	4288      	cmp	r0, r1
 800fcaa:	d901      	bls.n	800fcb0 <xTaskIncrementTick+0xd4>
 800fcac:	f8ca 0000 	str.w	r0, [sl]
 800fcb0:	2314      	movs	r3, #20
 800fcb2:	9901      	ldr	r1, [sp, #4]
 800fcb4:	fb03 6000 	mla	r0, r3, r0, r6
 800fcb8:	f7fe fe84 	bl	800e9c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcbc:	6838      	ldr	r0, [r7, #0]
 800fcbe:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800fcc2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800fcc4:	4291      	cmp	r1, r2
 800fcc6:	bf28      	it	cs
 800fcc8:	f04f 0b01 	movcs.w	fp, #1
 800fccc:	e7c8      	b.n	800fc60 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800fcce:	4a0c      	ldr	r2, [pc, #48]	@ (800fd00 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800fcd0:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800fcd4:	6813      	ldr	r3, [r2, #0]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	6013      	str	r3, [r2, #0]
 800fcda:	e7b9      	b.n	800fc50 <xTaskIncrementTick+0x74>
 800fcdc:	24025de4 	.word	0x24025de4
 800fce0:	24025e04 	.word	0x24025e04
 800fce4:	24025e50 	.word	0x24025e50
 800fce8:	24025e4c 	.word	0x24025e4c
 800fcec:	24025df0 	.word	0x24025df0
 800fcf0:	24025de8 	.word	0x24025de8
 800fcf4:	24025e7c 	.word	0x24025e7c
 800fcf8:	240262dc 	.word	0x240262dc
 800fcfc:	24025df4 	.word	0x24025df4
 800fd00:	24025df8 	.word	0x24025df8
 800fd04:	24025e00 	.word	0x24025e00

0800fd08 <xTaskResumeAll>:
{
 800fd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800fd0c:	4c30      	ldr	r4, [pc, #192]	@ (800fdd0 <xTaskResumeAll+0xc8>)
 800fd0e:	6823      	ldr	r3, [r4, #0]
 800fd10:	b943      	cbnz	r3, 800fd24 <xTaskResumeAll+0x1c>
 800fd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd16:	f383 8811 	msr	BASEPRI, r3
 800fd1a:	f3bf 8f6f 	isb	sy
 800fd1e:	f3bf 8f4f 	dsb	sy
 800fd22:	e7fe      	b.n	800fd22 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800fd24:	f7fe fee6 	bl	800eaf4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fd28:	6823      	ldr	r3, [r4, #0]
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd2e:	6824      	ldr	r4, [r4, #0]
 800fd30:	b12c      	cbz	r4, 800fd3e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800fd32:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fd34:	f7fe fefe 	bl	800eb34 <vPortExitCritical>
}
 800fd38:	4620      	mov	r0, r4
 800fd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fd3e:	4b25      	ldr	r3, [pc, #148]	@ (800fdd4 <xTaskResumeAll+0xcc>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d0f5      	beq.n	800fd32 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd46:	4d24      	ldr	r5, [pc, #144]	@ (800fdd8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800fd48:	4e24      	ldr	r6, [pc, #144]	@ (800fddc <xTaskResumeAll+0xd4>)
 800fd4a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800fdec <xTaskResumeAll+0xe4>
 800fd4e:	e01d      	b.n	800fd8c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd50:	68eb      	ldr	r3, [r5, #12]
 800fd52:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd54:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd56:	f104 0018 	add.w	r0, r4, #24
 800fd5a:	f7fe fe55 	bl	800ea08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd5e:	4638      	mov	r0, r7
 800fd60:	f7fe fe52 	bl	800ea08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fd66:	6832      	ldr	r2, [r6, #0]
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d900      	bls.n	800fd6e <xTaskResumeAll+0x66>
 800fd6c:	6033      	str	r3, [r6, #0]
 800fd6e:	2014      	movs	r0, #20
 800fd70:	4639      	mov	r1, r7
 800fd72:	fb00 8003 	mla	r0, r0, r3, r8
 800fd76:	f7fe fe25 	bl	800e9c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd7a:	4b19      	ldr	r3, [pc, #100]	@ (800fde0 <xTaskResumeAll+0xd8>)
 800fd7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d302      	bcc.n	800fd8c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800fd86:	4b17      	ldr	r3, [pc, #92]	@ (800fde4 <xTaskResumeAll+0xdc>)
 800fd88:	2201      	movs	r2, #1
 800fd8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d1de      	bne.n	800fd50 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800fd92:	b10c      	cbz	r4, 800fd98 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800fd94:	f7ff fe00 	bl	800f998 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fd98:	4d13      	ldr	r5, [pc, #76]	@ (800fde8 <xTaskResumeAll+0xe0>)
 800fd9a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800fd9c:	b144      	cbz	r4, 800fdb0 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800fd9e:	4e11      	ldr	r6, [pc, #68]	@ (800fde4 <xTaskResumeAll+0xdc>)
 800fda0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800fda2:	f7ff ff1b 	bl	800fbdc <xTaskIncrementTick>
 800fda6:	b100      	cbz	r0, 800fdaa <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800fda8:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fdaa:	3c01      	subs	r4, #1
 800fdac:	d1f9      	bne.n	800fda2 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800fdae:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800fdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800fde4 <xTaskResumeAll+0xdc>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d0bc      	beq.n	800fd32 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800fdb8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fdbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fdc4:	f3bf 8f4f 	dsb	sy
 800fdc8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800fdcc:	2401      	movs	r4, #1
 800fdce:	e7b1      	b.n	800fd34 <xTaskResumeAll+0x2c>
 800fdd0:	24025de4 	.word	0x24025de4
 800fdd4:	24025e08 	.word	0x24025e08
 800fdd8:	24025e38 	.word	0x24025e38
 800fddc:	24025e00 	.word	0x24025e00
 800fde0:	240262dc 	.word	0x240262dc
 800fde4:	24025df4 	.word	0x24025df4
 800fde8:	24025df8 	.word	0x24025df8
 800fdec:	24025e7c 	.word	0x24025e7c

0800fdf0 <vTaskSetApplicationTaskTag>:
	{
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	460d      	mov	r5, r1
		if( xTask == NULL )
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	b908      	cbnz	r0, 800fdfc <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800fdf8:	4b04      	ldr	r3, [pc, #16]	@ (800fe0c <vTaskSetApplicationTaskTag+0x1c>)
 800fdfa:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800fdfc:	f7fe fe7a 	bl	800eaf4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800fe00:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800fe02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800fe06:	f7fe be95 	b.w	800eb34 <vPortExitCritical>
 800fe0a:	bf00      	nop
 800fe0c:	240262dc 	.word	0x240262dc

0800fe10 <xTaskCallApplicationTaskHook>:
	{
 800fe10:	4603      	mov	r3, r0
 800fe12:	4608      	mov	r0, r1
		if( xTask == NULL )
 800fe14:	b90b      	cbnz	r3, 800fe1a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800fe16:	4b03      	ldr	r3, [pc, #12]	@ (800fe24 <xTaskCallApplicationTaskHook+0x14>)
 800fe18:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800fe1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe1c:	b103      	cbz	r3, 800fe20 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800fe1e:	4718      	bx	r3
	}
 800fe20:	4618      	mov	r0, r3
 800fe22:	4770      	bx	lr
 800fe24:	240262dc 	.word	0x240262dc

0800fe28 <vTaskStartScheduler>:
{
 800fe28:	b510      	push	{r4, lr}
 800fe2a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fe2c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fe2e:	aa07      	add	r2, sp, #28
 800fe30:	a906      	add	r1, sp, #24
 800fe32:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fe34:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fe38:	f7fe fca2 	bl	800e780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fe3c:	9b05      	ldr	r3, [sp, #20]
 800fe3e:	9a07      	ldr	r2, [sp, #28]
 800fe40:	9302      	str	r3, [sp, #8]
 800fe42:	9b06      	ldr	r3, [sp, #24]
 800fe44:	4919      	ldr	r1, [pc, #100]	@ (800feac <vTaskStartScheduler+0x84>)
 800fe46:	481a      	ldr	r0, [pc, #104]	@ (800feb0 <vTaskStartScheduler+0x88>)
 800fe48:	e9cd 4300 	strd	r4, r3, [sp]
 800fe4c:	4623      	mov	r3, r4
 800fe4e:	f7ff fe50 	bl	800faf2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800fe52:	b340      	cbz	r0, 800fea6 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800fe54:	f000 fa84 	bl	8010360 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800fe58:	2801      	cmp	r0, #1
 800fe5a:	d119      	bne.n	800fe90 <vTaskStartScheduler+0x68>
 800fe5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800fe6c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe70:	4b10      	ldr	r3, [pc, #64]	@ (800feb4 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800fe72:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800fe74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe76:	4b10      	ldr	r3, [pc, #64]	@ (800feb8 <vTaskStartScheduler+0x90>)
 800fe78:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe7a:	4b10      	ldr	r3, [pc, #64]	@ (800febc <vTaskStartScheduler+0x94>)
 800fe7c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800fe7e:	4b10      	ldr	r3, [pc, #64]	@ (800fec0 <vTaskStartScheduler+0x98>)
 800fe80:	6818      	ldr	r0, [r3, #0]
 800fe82:	f7ff ffc5 	bl	800fe10 <xTaskCallApplicationTaskHook>
}
 800fe86:	b008      	add	sp, #32
 800fe88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800fe8c:	f7fe bec2 	b.w	800ec14 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe90:	3001      	adds	r0, #1
 800fe92:	d108      	bne.n	800fea6 <vTaskStartScheduler+0x7e>
 800fe94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe98:	f383 8811 	msr	BASEPRI, r3
 800fe9c:	f3bf 8f6f 	isb	sy
 800fea0:	f3bf 8f4f 	dsb	sy
 800fea4:	e7fe      	b.n	800fea4 <vTaskStartScheduler+0x7c>
}
 800fea6:	b008      	add	sp, #32
 800fea8:	bd10      	pop	{r4, pc}
 800feaa:	bf00      	nop
 800feac:	08029b60 	.word	0x08029b60
 800feb0:	0800f9f5 	.word	0x0800f9f5
 800feb4:	24025de8 	.word	0x24025de8
 800feb8:	24025dfc 	.word	0x24025dfc
 800febc:	24025e04 	.word	0x24025e04
 800fec0:	240262dc 	.word	0x240262dc

0800fec4 <vTaskSwitchContext>:
{
 800fec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fec6:	4b1c      	ldr	r3, [pc, #112]	@ (800ff38 <vTaskSwitchContext+0x74>)
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	4b1c      	ldr	r3, [pc, #112]	@ (800ff3c <vTaskSwitchContext+0x78>)
 800fecc:	b112      	cbz	r2, 800fed4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800fece:	2201      	movs	r2, #1
 800fed0:	601a      	str	r2, [r3, #0]
}
 800fed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800fed4:	4c1a      	ldr	r4, [pc, #104]	@ (800ff40 <vTaskSwitchContext+0x7c>)
 800fed6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fed8:	4e1a      	ldr	r6, [pc, #104]	@ (800ff44 <vTaskSwitchContext+0x80>)
 800feda:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800fedc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800fede:	6820      	ldr	r0, [r4, #0]
 800fee0:	f7ff ff96 	bl	800fe10 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fee4:	6832      	ldr	r2, [r6, #0]
 800fee6:	4918      	ldr	r1, [pc, #96]	@ (800ff48 <vTaskSwitchContext+0x84>)
 800fee8:	fb07 f302 	mul.w	r3, r7, r2
 800feec:	58cd      	ldr	r5, [r1, r3]
 800feee:	18c8      	adds	r0, r1, r3
 800fef0:	b1ad      	cbz	r5, 800ff1e <vTaskSwitchContext+0x5a>
 800fef2:	6845      	ldr	r5, [r0, #4]
 800fef4:	3308      	adds	r3, #8
 800fef6:	686d      	ldr	r5, [r5, #4]
 800fef8:	440b      	add	r3, r1
 800fefa:	429d      	cmp	r5, r3
 800fefc:	6045      	str	r5, [r0, #4]
 800fefe:	bf04      	itt	eq
 800ff00:	686b      	ldreq	r3, [r5, #4]
 800ff02:	6043      	streq	r3, [r0, #4]
 800ff04:	2314      	movs	r3, #20
 800ff06:	fb03 1102 	mla	r1, r3, r2, r1
 800ff0a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ff0c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	6023      	str	r3, [r4, #0]
 800ff12:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ff14:	6820      	ldr	r0, [r4, #0]
}
 800ff16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800ff1a:	f7ff bf79 	b.w	800fe10 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff1e:	b942      	cbnz	r2, 800ff32 <vTaskSwitchContext+0x6e>
 800ff20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff24:	f383 8811 	msr	BASEPRI, r3
 800ff28:	f3bf 8f6f 	isb	sy
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	e7fe      	b.n	800ff30 <vTaskSwitchContext+0x6c>
 800ff32:	3a01      	subs	r2, #1
 800ff34:	e7d8      	b.n	800fee8 <vTaskSwitchContext+0x24>
 800ff36:	bf00      	nop
 800ff38:	24025de4 	.word	0x24025de4
 800ff3c:	24025df4 	.word	0x24025df4
 800ff40:	240262dc 	.word	0x240262dc
 800ff44:	24025e00 	.word	0x24025e00
 800ff48:	24025e7c 	.word	0x24025e7c

0800ff4c <vTaskPlaceOnEventList>:
{
 800ff4c:	b510      	push	{r4, lr}
 800ff4e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ff50:	b940      	cbnz	r0, 800ff64 <vTaskPlaceOnEventList+0x18>
 800ff52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff56:	f383 8811 	msr	BASEPRI, r3
 800ff5a:	f3bf 8f6f 	isb	sy
 800ff5e:	f3bf 8f4f 	dsb	sy
 800ff62:	e7fe      	b.n	800ff62 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff64:	4b05      	ldr	r3, [pc, #20]	@ (800ff7c <vTaskPlaceOnEventList+0x30>)
 800ff66:	6819      	ldr	r1, [r3, #0]
 800ff68:	3118      	adds	r1, #24
 800ff6a:	f7fe fd36 	bl	800e9da <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff6e:	4620      	mov	r0, r4
 800ff70:	2101      	movs	r1, #1
}
 800ff72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff76:	f7ff bcd7 	b.w	800f928 <prvAddCurrentTaskToDelayedList>
 800ff7a:	bf00      	nop
 800ff7c:	240262dc 	.word	0x240262dc

0800ff80 <vTaskPlaceOnEventListRestricted>:
	{
 800ff80:	b538      	push	{r3, r4, r5, lr}
 800ff82:	460d      	mov	r5, r1
 800ff84:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800ff86:	b940      	cbnz	r0, 800ff9a <vTaskPlaceOnEventListRestricted+0x1a>
 800ff88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	e7fe      	b.n	800ff98 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff9a:	4b07      	ldr	r3, [pc, #28]	@ (800ffb8 <vTaskPlaceOnEventListRestricted+0x38>)
 800ff9c:	6819      	ldr	r1, [r3, #0]
 800ff9e:	3118      	adds	r1, #24
 800ffa0:	f7fe fd10 	bl	800e9c4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ffa4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	bf0c      	ite	eq
 800ffaa:	4628      	moveq	r0, r5
 800ffac:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ffb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ffb4:	f7ff bcb8 	b.w	800f928 <prvAddCurrentTaskToDelayedList>
 800ffb8:	240262dc 	.word	0x240262dc

0800ffbc <xTaskRemoveFromEventList>:
{
 800ffbc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffbe:	68c3      	ldr	r3, [r0, #12]
 800ffc0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ffc2:	b944      	cbnz	r4, 800ffd6 <xTaskRemoveFromEventList+0x1a>
 800ffc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffc8:	f383 8811 	msr	BASEPRI, r3
 800ffcc:	f3bf 8f6f 	isb	sy
 800ffd0:	f3bf 8f4f 	dsb	sy
 800ffd4:	e7fe      	b.n	800ffd4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ffd6:	f104 0518 	add.w	r5, r4, #24
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f7fe fd14 	bl	800ea08 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffe0:	4b11      	ldr	r3, [pc, #68]	@ (8010028 <xTaskRemoveFromEventList+0x6c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	b9d3      	cbnz	r3, 801001c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ffe6:	1d25      	adds	r5, r4, #4
 800ffe8:	4628      	mov	r0, r5
 800ffea:	f7fe fd0d 	bl	800ea08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ffee:	4a0f      	ldr	r2, [pc, #60]	@ (801002c <xTaskRemoveFromEventList+0x70>)
 800fff0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fff2:	6811      	ldr	r1, [r2, #0]
 800fff4:	428b      	cmp	r3, r1
 800fff6:	d900      	bls.n	800fffa <xTaskRemoveFromEventList+0x3e>
 800fff8:	6013      	str	r3, [r2, #0]
 800fffa:	2014      	movs	r0, #20
 800fffc:	4a0c      	ldr	r2, [pc, #48]	@ (8010030 <xTaskRemoveFromEventList+0x74>)
 800fffe:	4629      	mov	r1, r5
 8010000:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010004:	f7fe fcde 	bl	800e9c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010008:	4b0a      	ldr	r3, [pc, #40]	@ (8010034 <xTaskRemoveFromEventList+0x78>)
 801000a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010010:	429a      	cmp	r2, r3
 8010012:	d906      	bls.n	8010022 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8010014:	2001      	movs	r0, #1
 8010016:	4b08      	ldr	r3, [pc, #32]	@ (8010038 <xTaskRemoveFromEventList+0x7c>)
 8010018:	6018      	str	r0, [r3, #0]
}
 801001a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801001c:	4629      	mov	r1, r5
 801001e:	4807      	ldr	r0, [pc, #28]	@ (801003c <xTaskRemoveFromEventList+0x80>)
 8010020:	e7f0      	b.n	8010004 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 8010022:	2000      	movs	r0, #0
	return xReturn;
 8010024:	e7f9      	b.n	801001a <xTaskRemoveFromEventList+0x5e>
 8010026:	bf00      	nop
 8010028:	24025de4 	.word	0x24025de4
 801002c:	24025e00 	.word	0x24025e00
 8010030:	24025e7c 	.word	0x24025e7c
 8010034:	240262dc 	.word	0x240262dc
 8010038:	24025df4 	.word	0x24025df4
 801003c:	24025e38 	.word	0x24025e38

08010040 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010040:	4b03      	ldr	r3, [pc, #12]	@ (8010050 <vTaskInternalSetTimeOutState+0x10>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010046:	4b03      	ldr	r3, [pc, #12]	@ (8010054 <vTaskInternalSetTimeOutState+0x14>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	6043      	str	r3, [r0, #4]
}
 801004c:	4770      	bx	lr
 801004e:	bf00      	nop
 8010050:	24025df0 	.word	0x24025df0
 8010054:	24025e04 	.word	0x24025e04

08010058 <xTaskCheckForTimeOut>:
{
 8010058:	b570      	push	{r4, r5, r6, lr}
 801005a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 801005c:	4605      	mov	r5, r0
 801005e:	b940      	cbnz	r0, 8010072 <xTaskCheckForTimeOut+0x1a>
 8010060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	e7fe      	b.n	8010070 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8010072:	b941      	cbnz	r1, 8010086 <xTaskCheckForTimeOut+0x2e>
 8010074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010078:	f383 8811 	msr	BASEPRI, r3
 801007c:	f3bf 8f6f 	isb	sy
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	e7fe      	b.n	8010084 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8010086:	f7fe fd35 	bl	800eaf4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801008a:	4b0f      	ldr	r3, [pc, #60]	@ (80100c8 <xTaskCheckForTimeOut+0x70>)
 801008c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 801008e:	6823      	ldr	r3, [r4, #0]
 8010090:	1c5a      	adds	r2, r3, #1
 8010092:	d010      	beq.n	80100b6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010094:	480d      	ldr	r0, [pc, #52]	@ (80100cc <xTaskCheckForTimeOut+0x74>)
 8010096:	682e      	ldr	r6, [r5, #0]
 8010098:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801009a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801009c:	4286      	cmp	r6, r0
 801009e:	d001      	beq.n	80100a4 <xTaskCheckForTimeOut+0x4c>
 80100a0:	428a      	cmp	r2, r1
 80100a2:	d90f      	bls.n	80100c4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100a4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100a6:	4283      	cmp	r3, r0
 80100a8:	d90a      	bls.n	80100c0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80100aa:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100ac:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80100ae:	4413      	add	r3, r2
 80100b0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100b2:	f7ff ffc5 	bl	8010040 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80100b6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80100b8:	f7fe fd3c 	bl	800eb34 <vPortExitCritical>
}
 80100bc:	4620      	mov	r0, r4
 80100be:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80100c0:	2300      	movs	r3, #0
 80100c2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80100c4:	2401      	movs	r4, #1
 80100c6:	e7f7      	b.n	80100b8 <xTaskCheckForTimeOut+0x60>
 80100c8:	24025e04 	.word	0x24025e04
 80100cc:	24025df0 	.word	0x24025df0

080100d0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80100d0:	4b01      	ldr	r3, [pc, #4]	@ (80100d8 <vTaskMissedYield+0x8>)
 80100d2:	2201      	movs	r2, #1
 80100d4:	601a      	str	r2, [r3, #0]
}
 80100d6:	4770      	bx	lr
 80100d8:	24025df4 	.word	0x24025df4

080100dc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80100dc:	4b01      	ldr	r3, [pc, #4]	@ (80100e4 <xTaskGetCurrentTaskHandle+0x8>)
 80100de:	6818      	ldr	r0, [r3, #0]
	}
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	240262dc 	.word	0x240262dc

080100e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80100e8:	4b05      	ldr	r3, [pc, #20]	@ (8010100 <xTaskGetSchedulerState+0x18>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	b133      	cbz	r3, 80100fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100ee:	4b05      	ldr	r3, [pc, #20]	@ (8010104 <xTaskGetSchedulerState+0x1c>)
 80100f0:	6818      	ldr	r0, [r3, #0]
 80100f2:	fab0 f080 	clz	r0, r0
 80100f6:	0940      	lsrs	r0, r0, #5
 80100f8:	0040      	lsls	r0, r0, #1
 80100fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80100fc:	2001      	movs	r0, #1
	}
 80100fe:	4770      	bx	lr
 8010100:	24025dfc 	.word	0x24025dfc
 8010104:	24025de4 	.word	0x24025de4

08010108 <xTaskPriorityInherit>:
	{
 8010108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 801010a:	4604      	mov	r4, r0
 801010c:	b338      	cbz	r0, 801015e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801010e:	4d1a      	ldr	r5, [pc, #104]	@ (8010178 <xTaskPriorityInherit+0x70>)
 8010110:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010112:	682a      	ldr	r2, [r5, #0]
 8010114:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010116:	4293      	cmp	r3, r2
 8010118:	d226      	bcs.n	8010168 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801011a:	6982      	ldr	r2, [r0, #24]
 801011c:	2a00      	cmp	r2, #0
 801011e:	db04      	blt.n	801012a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010120:	682a      	ldr	r2, [r5, #0]
 8010122:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010124:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8010128:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801012a:	2214      	movs	r2, #20
 801012c:	4e13      	ldr	r6, [pc, #76]	@ (801017c <xTaskPriorityInherit+0x74>)
 801012e:	fb02 6303 	mla	r3, r2, r3, r6
 8010132:	6962      	ldr	r2, [r4, #20]
 8010134:	429a      	cmp	r2, r3
 8010136:	d113      	bne.n	8010160 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010138:	1d27      	adds	r7, r4, #4
 801013a:	4638      	mov	r0, r7
 801013c:	f7fe fc64 	bl	800ea08 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010140:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010142:	4a0f      	ldr	r2, [pc, #60]	@ (8010180 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010146:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010148:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801014a:	428b      	cmp	r3, r1
 801014c:	d900      	bls.n	8010150 <xTaskPriorityInherit+0x48>
 801014e:	6013      	str	r3, [r2, #0]
 8010150:	2014      	movs	r0, #20
 8010152:	4639      	mov	r1, r7
 8010154:	fb00 6003 	mla	r0, r0, r3, r6
 8010158:	f7fe fc34 	bl	800e9c4 <vListInsertEnd>
				xReturn = pdTRUE;
 801015c:	2001      	movs	r0, #1
	}
 801015e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010160:	682b      	ldr	r3, [r5, #0]
 8010162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010166:	e7f9      	b.n	801015c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010168:	682b      	ldr	r3, [r5, #0]
 801016a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801016c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801016e:	4298      	cmp	r0, r3
 8010170:	bf2c      	ite	cs
 8010172:	2000      	movcs	r0, #0
 8010174:	2001      	movcc	r0, #1
 8010176:	e7f2      	b.n	801015e <xTaskPriorityInherit+0x56>
 8010178:	240262dc 	.word	0x240262dc
 801017c:	24025e7c 	.word	0x24025e7c
 8010180:	24025e00 	.word	0x24025e00

08010184 <xTaskPriorityDisinherit>:
	{
 8010184:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8010186:	b908      	cbnz	r0, 801018c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8010188:	2000      	movs	r0, #0
	}
 801018a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 801018c:	4b1b      	ldr	r3, [pc, #108]	@ (80101fc <xTaskPriorityDisinherit+0x78>)
 801018e:	681c      	ldr	r4, [r3, #0]
 8010190:	4284      	cmp	r4, r0
 8010192:	d008      	beq.n	80101a6 <xTaskPriorityDisinherit+0x22>
 8010194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010198:	f383 8811 	msr	BASEPRI, r3
 801019c:	f3bf 8f6f 	isb	sy
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	e7fe      	b.n	80101a4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80101a6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80101a8:	b943      	cbnz	r3, 80101bc <xTaskPriorityDisinherit+0x38>
 80101aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ae:	f383 8811 	msr	BASEPRI, r3
 80101b2:	f3bf 8f6f 	isb	sy
 80101b6:	f3bf 8f4f 	dsb	sy
 80101ba:	e7fe      	b.n	80101ba <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101bc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 80101be:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101c0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80101c2:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101c4:	4291      	cmp	r1, r2
 80101c6:	d0df      	beq.n	8010188 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d1dd      	bne.n	8010188 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101cc:	1d25      	adds	r5, r4, #4
 80101ce:	4628      	mov	r0, r5
 80101d0:	f7fe fc1a 	bl	800ea08 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101da:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101dc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80101de:	4a08      	ldr	r2, [pc, #32]	@ (8010200 <xTaskPriorityDisinherit+0x7c>)
 80101e0:	6811      	ldr	r1, [r2, #0]
 80101e2:	428b      	cmp	r3, r1
 80101e4:	d900      	bls.n	80101e8 <xTaskPriorityDisinherit+0x64>
 80101e6:	6013      	str	r3, [r2, #0]
 80101e8:	4a06      	ldr	r2, [pc, #24]	@ (8010204 <xTaskPriorityDisinherit+0x80>)
 80101ea:	2014      	movs	r0, #20
 80101ec:	4629      	mov	r1, r5
 80101ee:	fb00 2003 	mla	r0, r0, r3, r2
 80101f2:	f7fe fbe7 	bl	800e9c4 <vListInsertEnd>
					xReturn = pdTRUE;
 80101f6:	2001      	movs	r0, #1
		return xReturn;
 80101f8:	e7c7      	b.n	801018a <xTaskPriorityDisinherit+0x6>
 80101fa:	bf00      	nop
 80101fc:	240262dc 	.word	0x240262dc
 8010200:	24025e00 	.word	0x24025e00
 8010204:	24025e7c 	.word	0x24025e7c

08010208 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8010208:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 801020a:	4604      	mov	r4, r0
 801020c:	2800      	cmp	r0, #0
 801020e:	d042      	beq.n	8010296 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8010210:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8010212:	b942      	cbnz	r2, 8010226 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8010214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010218:	f383 8811 	msr	BASEPRI, r3
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	f3bf 8f4f 	dsb	sy
 8010224:	e7fe      	b.n	8010224 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010226:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010228:	4299      	cmp	r1, r3
 801022a:	bf38      	it	cc
 801022c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 801022e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010230:	428b      	cmp	r3, r1
 8010232:	d030      	beq.n	8010296 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010234:	2a01      	cmp	r2, #1
 8010236:	d12e      	bne.n	8010296 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 8010238:	4a17      	ldr	r2, [pc, #92]	@ (8010298 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 801023a:	6812      	ldr	r2, [r2, #0]
 801023c:	4282      	cmp	r2, r0
 801023e:	d108      	bne.n	8010252 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8010240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	e7fe      	b.n	8010250 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010252:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010254:	4d11      	ldr	r5, [pc, #68]	@ (801029c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010256:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010258:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 801025c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801025e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010262:	bfa8      	it	ge
 8010264:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010268:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801026a:	bfa8      	it	ge
 801026c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801026e:	429a      	cmp	r2, r3
 8010270:	d111      	bne.n	8010296 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010272:	1d06      	adds	r6, r0, #4
 8010274:	4630      	mov	r0, r6
 8010276:	f7fe fbc7 	bl	800ea08 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801027a:	4a09      	ldr	r2, [pc, #36]	@ (80102a0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801027c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801027e:	6811      	ldr	r1, [r2, #0]
 8010280:	428b      	cmp	r3, r1
 8010282:	d900      	bls.n	8010286 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8010284:	6013      	str	r3, [r2, #0]
 8010286:	2014      	movs	r0, #20
 8010288:	4631      	mov	r1, r6
 801028a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 801028e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8010292:	f7fe bb97 	b.w	800e9c4 <vListInsertEnd>
	}
 8010296:	bd70      	pop	{r4, r5, r6, pc}
 8010298:	240262dc 	.word	0x240262dc
 801029c:	24025e7c 	.word	0x24025e7c
 80102a0:	24025e00 	.word	0x24025e00

080102a4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80102a4:	4b04      	ldr	r3, [pc, #16]	@ (80102b8 <pvTaskIncrementMutexHeldCount+0x14>)
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	b11a      	cbz	r2, 80102b2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80102aa:	6819      	ldr	r1, [r3, #0]
 80102ac:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80102ae:	3201      	adds	r2, #1
 80102b0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80102b2:	6818      	ldr	r0, [r3, #0]
	}
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop
 80102b8:	240262dc 	.word	0x240262dc

080102bc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80102bc:	4291      	cmp	r1, r2
{
 80102be:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80102c0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80102c2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80102c4:	d80a      	bhi.n	80102dc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102c6:	1ad2      	subs	r2, r2, r3
 80102c8:	6983      	ldr	r3, [r0, #24]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d20d      	bcs.n	80102ea <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80102ce:	1d01      	adds	r1, r0, #4
 80102d0:	4b07      	ldr	r3, [pc, #28]	@ (80102f0 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80102d2:	6818      	ldr	r0, [r3, #0]
 80102d4:	f7fe fb81 	bl	800e9da <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80102d8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80102da:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80102dc:	429a      	cmp	r2, r3
 80102de:	d201      	bcs.n	80102e4 <prvInsertTimerInActiveList+0x28>
 80102e0:	4299      	cmp	r1, r3
 80102e2:	d202      	bcs.n	80102ea <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80102e4:	1d01      	adds	r1, r0, #4
 80102e6:	4b03      	ldr	r3, [pc, #12]	@ (80102f4 <prvInsertTimerInActiveList+0x38>)
 80102e8:	e7f3      	b.n	80102d2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80102ea:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80102ec:	e7f5      	b.n	80102da <prvInsertTimerInActiveList+0x1e>
 80102ee:	bf00      	nop
 80102f0:	240263dc 	.word	0x240263dc
 80102f4:	240263e0 	.word	0x240263e0

080102f8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80102f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80102fa:	4c11      	ldr	r4, [pc, #68]	@ (8010340 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80102fc:	f7fe fbfa 	bl	800eaf4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8010300:	6825      	ldr	r5, [r4, #0]
 8010302:	b9bd      	cbnz	r5, 8010334 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010304:	4f0f      	ldr	r7, [pc, #60]	@ (8010344 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8010306:	4e10      	ldr	r6, [pc, #64]	@ (8010348 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8010308:	4638      	mov	r0, r7
 801030a:	f7fe fb4d 	bl	800e9a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801030e:	4630      	mov	r0, r6
 8010310:	f7fe fb4a 	bl	800e9a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010314:	4b0d      	ldr	r3, [pc, #52]	@ (801034c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010316:	4a0e      	ldr	r2, [pc, #56]	@ (8010350 <prvCheckForValidListAndQueue+0x58>)
 8010318:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 801031a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801031c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 801031e:	4b0d      	ldr	r3, [pc, #52]	@ (8010354 <prvCheckForValidListAndQueue+0x5c>)
 8010320:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010322:	4b0d      	ldr	r3, [pc, #52]	@ (8010358 <prvCheckForValidListAndQueue+0x60>)
 8010324:	9500      	str	r5, [sp, #0]
 8010326:	f7fe fdef 	bl	800ef08 <xQueueGenericCreateStatic>
 801032a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801032c:	b110      	cbz	r0, 8010334 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801032e:	490b      	ldr	r1, [pc, #44]	@ (801035c <prvCheckForValidListAndQueue+0x64>)
 8010330:	f7ff fa1a 	bl	800f768 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8010334:	b003      	add	sp, #12
 8010336:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801033a:	f7fe bbfb 	b.w	800eb34 <vPortExitCritical>
 801033e:	bf00      	nop
 8010340:	240263d8 	.word	0x240263d8
 8010344:	240263f8 	.word	0x240263f8
 8010348:	240263e4 	.word	0x240263e4
 801034c:	240263e0 	.word	0x240263e0
 8010350:	24026330 	.word	0x24026330
 8010354:	240263dc 	.word	0x240263dc
 8010358:	240262e0 	.word	0x240262e0
 801035c:	08029b65 	.word	0x08029b65

08010360 <xTimerCreateTimerTask>:
{
 8010360:	b510      	push	{r4, lr}
 8010362:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8010364:	f7ff ffc8 	bl	80102f8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010368:	4b12      	ldr	r3, [pc, #72]	@ (80103b4 <xTimerCreateTimerTask+0x54>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	b1b3      	cbz	r3, 801039c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801036e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010370:	aa07      	add	r2, sp, #28
 8010372:	a906      	add	r1, sp, #24
 8010374:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010376:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801037a:	f7fe fa0d 	bl	800e798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801037e:	9b05      	ldr	r3, [sp, #20]
 8010380:	9a07      	ldr	r2, [sp, #28]
 8010382:	9302      	str	r3, [sp, #8]
 8010384:	9b06      	ldr	r3, [sp, #24]
 8010386:	490c      	ldr	r1, [pc, #48]	@ (80103b8 <xTimerCreateTimerTask+0x58>)
 8010388:	9301      	str	r3, [sp, #4]
 801038a:	2302      	movs	r3, #2
 801038c:	480b      	ldr	r0, [pc, #44]	@ (80103bc <xTimerCreateTimerTask+0x5c>)
 801038e:	9300      	str	r3, [sp, #0]
 8010390:	4623      	mov	r3, r4
 8010392:	f7ff fbae 	bl	800faf2 <xTaskCreateStatic>
 8010396:	4b0a      	ldr	r3, [pc, #40]	@ (80103c0 <xTimerCreateTimerTask+0x60>)
 8010398:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801039a:	b940      	cbnz	r0, 80103ae <xTimerCreateTimerTask+0x4e>
 801039c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103a0:	f383 8811 	msr	BASEPRI, r3
 80103a4:	f3bf 8f6f 	isb	sy
 80103a8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80103ac:	e7fe      	b.n	80103ac <xTimerCreateTimerTask+0x4c>
}
 80103ae:	2001      	movs	r0, #1
 80103b0:	b008      	add	sp, #32
 80103b2:	bd10      	pop	{r4, pc}
 80103b4:	240263d8 	.word	0x240263d8
 80103b8:	08029b6a 	.word	0x08029b6a
 80103bc:	080104bd 	.word	0x080104bd
 80103c0:	240263d4 	.word	0x240263d4

080103c4 <xTimerGenericCommand>:
{
 80103c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80103c6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80103c8:	4604      	mov	r4, r0
{
 80103ca:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80103cc:	b940      	cbnz	r0, 80103e0 <xTimerGenericCommand+0x1c>
 80103ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103d2:	f383 8811 	msr	BASEPRI, r3
 80103d6:	f3bf 8f6f 	isb	sy
 80103da:	f3bf 8f4f 	dsb	sy
 80103de:	e7fe      	b.n	80103de <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80103e0:	4d0c      	ldr	r5, [pc, #48]	@ (8010414 <xTimerGenericCommand+0x50>)
 80103e2:	6828      	ldr	r0, [r5, #0]
 80103e4:	b178      	cbz	r0, 8010406 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80103e6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80103e8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80103ea:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80103ee:	dc0c      	bgt.n	801040a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80103f0:	f7ff fe7a 	bl	80100e8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80103f4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80103f6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80103f8:	4669      	mov	r1, sp
 80103fa:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80103fc:	bf0c      	ite	eq
 80103fe:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010400:	461a      	movne	r2, r3
 8010402:	f7fe fe36 	bl	800f072 <xQueueGenericSend>
}
 8010406:	b004      	add	sp, #16
 8010408:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801040a:	2300      	movs	r3, #0
 801040c:	4669      	mov	r1, sp
 801040e:	f7fe ff33 	bl	800f278 <xQueueGenericSendFromISR>
 8010412:	e7f8      	b.n	8010406 <xTimerGenericCommand+0x42>
 8010414:	240263d8 	.word	0x240263d8

08010418 <prvSampleTimeNow>:
{
 8010418:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 801041c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80104b8 <prvSampleTimeNow+0xa0>
{
 8010420:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8010422:	f7ff fbd5 	bl	800fbd0 <xTaskGetTickCount>
 8010426:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8010428:	f8d8 3000 	ldr.w	r3, [r8]
 801042c:	4283      	cmp	r3, r0
 801042e:	d909      	bls.n	8010444 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010430:	4f1f      	ldr	r7, [pc, #124]	@ (80104b0 <prvSampleTimeNow+0x98>)
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	b96a      	cbnz	r2, 8010454 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8010438:	4a1e      	ldr	r2, [pc, #120]	@ (80104b4 <prvSampleTimeNow+0x9c>)
 801043a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801043c:	6013      	str	r3, [r2, #0]
 801043e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8010440:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8010442:	e000      	b.n	8010446 <prvSampleTimeNow+0x2e>
 8010444:	2300      	movs	r3, #0
}
 8010446:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8010448:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 801044a:	f8c8 5000 	str.w	r5, [r8]
}
 801044e:	b002      	add	sp, #8
 8010450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010454:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010456:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010458:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801045c:	f104 0a04 	add.w	sl, r4, #4
 8010460:	4650      	mov	r0, sl
 8010462:	f7fe fad1 	bl	800ea08 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010466:	6a23      	ldr	r3, [r4, #32]
 8010468:	4620      	mov	r0, r4
 801046a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801046c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010470:	075b      	lsls	r3, r3, #29
 8010472:	d5de      	bpl.n	8010432 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010474:	69a3      	ldr	r3, [r4, #24]
 8010476:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8010478:	4599      	cmp	r9, r3
 801047a:	d206      	bcs.n	801048a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801047c:	4651      	mov	r1, sl
 801047e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010480:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010482:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010484:	f7fe faa9 	bl	800e9da <vListInsert>
 8010488:	e7d3      	b.n	8010432 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801048a:	2300      	movs	r3, #0
 801048c:	464a      	mov	r2, r9
 801048e:	4620      	mov	r0, r4
 8010490:	4619      	mov	r1, r3
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	f7ff ff96 	bl	80103c4 <xTimerGenericCommand>
				configASSERT( xResult );
 8010498:	2800      	cmp	r0, #0
 801049a:	d1ca      	bne.n	8010432 <prvSampleTimeNow+0x1a>
 801049c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104a0:	f383 8811 	msr	BASEPRI, r3
 80104a4:	f3bf 8f6f 	isb	sy
 80104a8:	f3bf 8f4f 	dsb	sy
 80104ac:	e7fe      	b.n	80104ac <prvSampleTimeNow+0x94>
 80104ae:	bf00      	nop
 80104b0:	240263e0 	.word	0x240263e0
 80104b4:	240263dc 	.word	0x240263dc
 80104b8:	240263d0 	.word	0x240263d0

080104bc <prvTimerTask>:
{
 80104bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104c0:	4d6e      	ldr	r5, [pc, #440]	@ (801067c <prvTimerTask+0x1c0>)
{
 80104c2:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80104c4:	4e6e      	ldr	r6, [pc, #440]	@ (8010680 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104c6:	682b      	ldr	r3, [r5, #0]
 80104c8:	f8d3 8000 	ldr.w	r8, [r3]
 80104cc:	f1b8 0f00 	cmp.w	r8, #0
 80104d0:	d035      	beq.n	801053e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104d2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104d4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104d6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80104da:	f7ff fb71 	bl	800fbc0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104de:	a804      	add	r0, sp, #16
 80104e0:	f7ff ff9a 	bl	8010418 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80104e4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104e6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d169      	bne.n	80105c0 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80104ec:	2c00      	cmp	r4, #0
 80104ee:	d14c      	bne.n	801058a <prvTimerTask+0xce>
 80104f0:	4540      	cmp	r0, r8
 80104f2:	d350      	bcc.n	8010596 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 80104f4:	f7ff fc08 	bl	800fd08 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104f8:	682b      	ldr	r3, [r5, #0]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104fe:	1d38      	adds	r0, r7, #4
 8010500:	f7fe fa82 	bl	800ea08 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010504:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010508:	0758      	lsls	r0, r3, #29
 801050a:	d51a      	bpl.n	8010542 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801050c:	69b9      	ldr	r1, [r7, #24]
 801050e:	4643      	mov	r3, r8
 8010510:	464a      	mov	r2, r9
 8010512:	4638      	mov	r0, r7
 8010514:	4441      	add	r1, r8
 8010516:	f7ff fed1 	bl	80102bc <prvInsertTimerInActiveList>
 801051a:	b1b0      	cbz	r0, 801054a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801051c:	4623      	mov	r3, r4
 801051e:	4642      	mov	r2, r8
 8010520:	4621      	mov	r1, r4
 8010522:	4638      	mov	r0, r7
 8010524:	9400      	str	r4, [sp, #0]
 8010526:	f7ff ff4d 	bl	80103c4 <xTimerGenericCommand>
			configASSERT( xResult );
 801052a:	b970      	cbnz	r0, 801054a <prvTimerTask+0x8e>
 801052c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	e7fe      	b.n	801053c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801053e:	2401      	movs	r4, #1
 8010540:	e7cb      	b.n	80104da <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010542:	f023 0301 	bic.w	r3, r3, #1
 8010546:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	4638      	mov	r0, r7
 801054e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010550:	2200      	movs	r2, #0
 8010552:	a904      	add	r1, sp, #16
 8010554:	6830      	ldr	r0, [r6, #0]
 8010556:	f7fe ff3d 	bl	800f3d4 <xQueueReceive>
 801055a:	2800      	cmp	r0, #0
 801055c:	d0b3      	beq.n	80104c6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801055e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010560:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010562:	2b00      	cmp	r3, #0
 8010564:	db2f      	blt.n	80105c6 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010566:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010568:	6963      	ldr	r3, [r4, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d132      	bne.n	80105d4 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801056e:	a803      	add	r0, sp, #12
 8010570:	f7ff ff52 	bl	8010418 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010574:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010576:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8010578:	2b09      	cmp	r3, #9
 801057a:	d8e9      	bhi.n	8010550 <prvTimerTask+0x94>
 801057c:	e8df f003 	tbb	[pc, r3]
 8010580:	572e2e2e 	.word	0x572e2e2e
 8010584:	2e2e765e 	.word	0x2e2e765e
 8010588:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801058a:	4b3e      	ldr	r3, [pc, #248]	@ (8010684 <prvTimerTask+0x1c8>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	681c      	ldr	r4, [r3, #0]
 8010590:	fab4 f484 	clz	r4, r4
 8010594:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010596:	4622      	mov	r2, r4
 8010598:	eba8 0109 	sub.w	r1, r8, r9
 801059c:	6830      	ldr	r0, [r6, #0]
 801059e:	f7ff f922 	bl	800f7e6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80105a2:	f7ff fbb1 	bl	800fd08 <xTaskResumeAll>
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d1d2      	bne.n	8010550 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80105aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80105ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	e7c7      	b.n	8010550 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80105c0:	f7ff fba2 	bl	800fd08 <xTaskResumeAll>
}
 80105c4:	e7c4      	b.n	8010550 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80105c6:	9b05      	ldr	r3, [sp, #20]
 80105c8:	9907      	ldr	r1, [sp, #28]
 80105ca:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80105cc:	9b04      	ldr	r3, [sp, #16]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	dbbe      	blt.n	8010550 <prvTimerTask+0x94>
 80105d2:	e7c8      	b.n	8010566 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105d4:	1d20      	adds	r0, r4, #4
 80105d6:	f7fe fa17 	bl	800ea08 <uxListRemove>
 80105da:	e7c8      	b.n	801056e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105dc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80105e0:	4620      	mov	r0, r4
 80105e2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105e4:	f043 0301 	orr.w	r3, r3, #1
 80105e8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80105ec:	9b05      	ldr	r3, [sp, #20]
 80105ee:	4419      	add	r1, r3
 80105f0:	f7ff fe64 	bl	80102bc <prvInsertTimerInActiveList>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d0ab      	beq.n	8010550 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105f8:	6a23      	ldr	r3, [r4, #32]
 80105fa:	4620      	mov	r0, r4
 80105fc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105fe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010602:	0759      	lsls	r1, r3, #29
 8010604:	d5a4      	bpl.n	8010550 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010606:	69a2      	ldr	r2, [r4, #24]
 8010608:	2300      	movs	r3, #0
 801060a:	9905      	ldr	r1, [sp, #20]
 801060c:	4620      	mov	r0, r4
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	440a      	add	r2, r1
 8010612:	4619      	mov	r1, r3
 8010614:	f7ff fed6 	bl	80103c4 <xTimerGenericCommand>
							configASSERT( xResult );
 8010618:	2800      	cmp	r0, #0
 801061a:	d199      	bne.n	8010550 <prvTimerTask+0x94>
 801061c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	e7fe      	b.n	801062c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801062e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010632:	f023 0301 	bic.w	r3, r3, #1
 8010636:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 801063a:	e789      	b.n	8010550 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801063c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010640:	f043 0301 	orr.w	r3, r3, #1
 8010644:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010648:	9905      	ldr	r1, [sp, #20]
 801064a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801064c:	b941      	cbnz	r1, 8010660 <prvTimerTask+0x1a4>
 801064e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	e7fe      	b.n	801065e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010660:	4603      	mov	r3, r0
 8010662:	4401      	add	r1, r0
 8010664:	4620      	mov	r0, r4
 8010666:	f7ff fe29 	bl	80102bc <prvInsertTimerInActiveList>
					break;
 801066a:	e771      	b.n	8010550 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801066c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010670:	079a      	lsls	r2, r3, #30
 8010672:	d4de      	bmi.n	8010632 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8010674:	4620      	mov	r0, r4
 8010676:	f7fe f959 	bl	800e92c <vPortFree>
 801067a:	e769      	b.n	8010550 <prvTimerTask+0x94>
 801067c:	240263e0 	.word	0x240263e0
 8010680:	240263d8 	.word	0x240263d8
 8010684:	240263dc 	.word	0x240263dc

08010688 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8010688:	8880      	ldrh	r0, [r0, #4]
 801068a:	4770      	bx	lr

0801068c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801068c:	b570      	push	{r4, r5, r6, lr}
 801068e:	6803      	ldr	r3, [r0, #0]
 8010690:	460c      	mov	r4, r1
 8010692:	2100      	movs	r1, #0
 8010694:	4605      	mov	r5, r0
 8010696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010698:	4798      	blx	r3
 801069a:	4606      	mov	r6, r0
 801069c:	682b      	ldr	r3, [r5, #0]
 801069e:	4628      	mov	r0, r5
 80106a0:	1ba4      	subs	r4, r4, r6
 80106a2:	6a1b      	ldr	r3, [r3, #32]
 80106a4:	b2a4      	uxth	r4, r4
 80106a6:	4798      	blx	r3
 80106a8:	fbb4 f0f0 	udiv	r0, r4, r0
 80106ac:	bd70      	pop	{r4, r5, r6, pc}

080106ae <_ZN8touchgfx17AbstractPartition5clearEv>:
 80106ae:	2300      	movs	r3, #0
 80106b0:	8083      	strh	r3, [r0, #4]
 80106b2:	4770      	bx	lr

080106b4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80106b4:	b510      	push	{r4, lr}
 80106b6:	6803      	ldr	r3, [r0, #0]
 80106b8:	4604      	mov	r4, r0
 80106ba:	8881      	ldrh	r1, [r0, #4]
 80106bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106be:	4798      	blx	r3
 80106c0:	88a3      	ldrh	r3, [r4, #4]
 80106c2:	3301      	adds	r3, #1
 80106c4:	80a3      	strh	r3, [r4, #4]
 80106c6:	bd10      	pop	{r4, pc}

080106c8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80106c8:	6803      	ldr	r3, [r0, #0]
 80106ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106cc:	4718      	bx	r3

080106ce <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80106ce:	4770      	bx	lr

080106d0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80106d0:	4a02      	ldr	r2, [pc, #8]	@ (80106dc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80106d2:	6002      	str	r2, [r0, #0]
 80106d4:	2200      	movs	r2, #0
 80106d6:	8082      	strh	r2, [r0, #4]
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop
 80106dc:	08029b7c 	.word	0x08029b7c

080106e0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80106e0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80106e2:	4770      	bx	lr

080106e4 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 80106e4:	b510      	push	{r4, lr}
 80106e6:	6803      	ldr	r3, [r0, #0]
 80106e8:	4604      	mov	r4, r0
 80106ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80106ee:	4798      	blx	r3
 80106f0:	b110      	cbz	r0, 80106f8 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 80106f2:	4620      	mov	r0, r4
 80106f4:	f7f3 f81b 	bl	800372e <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80106f8:	bd10      	pop	{r4, pc}

080106fa <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 80106fa:	f8c0 10e0 	str.w	r1, [r0, #224]	@ 0xe0
 80106fe:	4770      	bx	lr

08010700 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 8010700:	f8d0 00e0 	ldr.w	r0, [r0, #224]	@ 0xe0
 8010704:	4770      	bx	lr

08010706 <_ZN8touchgfx11BoxProgressD1Ev>:
 8010706:	4770      	bx	lr

08010708 <_ZN8touchgfx11BoxProgressD0Ev>:
 8010708:	b510      	push	{r4, lr}
 801070a:	4604      	mov	r4, r0
 801070c:	21e4      	movs	r1, #228	@ 0xe4
 801070e:	f014 ff16 	bl	802553e <_ZdlPvj>
 8010712:	4620      	mov	r0, r4
 8010714:	bd10      	pop	{r4, pc}

08010716 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 8010716:	b538      	push	{r3, r4, r5, lr}
 8010718:	4604      	mov	r4, r0
 801071a:	460d      	mov	r5, r1
 801071c:	f000 f962 	bl	80109e4 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8010720:	f884 50de 	strb.w	r5, [r4, #222]	@ 0xde
 8010724:	bd38      	pop	{r3, r4, r5, pc}

08010726 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 8010726:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801072a:	4617      	mov	r7, r2
 801072c:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 8010730:	2200      	movs	r2, #0
 8010732:	4604      	mov	r4, r0
 8010734:	460e      	mov	r6, r1
 8010736:	4698      	mov	r8, r3
 8010738:	4611      	mov	r1, r2
 801073a:	9500      	str	r5, [sp, #0]
 801073c:	30b8      	adds	r0, #184	@ 0xb8
 801073e:	f7f3 ffb3 	bl	80046a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8010742:	4643      	mov	r3, r8
 8010744:	463a      	mov	r2, r7
 8010746:	4631      	mov	r1, r6
 8010748:	4620      	mov	r0, r4
 801074a:	9508      	str	r5, [sp, #32]
 801074c:	b002      	add	sp, #8
 801074e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010752:	f000 ba3c 	b.w	8010bce <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08010756 <_ZN8touchgfx11BoxProgress8setValueEi>:
 8010756:	b530      	push	{r4, r5, lr}
 8010758:	4604      	mov	r4, r0
 801075a:	b085      	sub	sp, #20
 801075c:	f000 f995 	bl	8010a8a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8010760:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 8010764:	2b03      	cmp	r3, #3
 8010766:	d814      	bhi.n	8010792 <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 8010768:	e8df f003 	tbb	[pc, r3]
 801076c:	10100202 	.word	0x10100202
 8010770:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8010774:	4620      	mov	r0, r4
 8010776:	f000 f9aa 	bl	8010ace <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801077a:	b200      	sxth	r0, r0
 801077c:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 8010780:	2b03      	cmp	r3, #3
 8010782:	d830      	bhi.n	80107e6 <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 8010784:	e8df f003 	tbb	[pc, r3]
 8010788:	64423107 	.word	0x64423107
 801078c:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 8010790:	e7f0      	b.n	8010774 <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 8010792:	2000      	movs	r0, #0
 8010794:	e7f2      	b.n	801077c <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 8010796:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 801079a:	2200      	movs	r2, #0
 801079c:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	@ 0xc0
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	4611      	mov	r1, r2
 80107a4:	4603      	mov	r3, r0
 80107a6:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80107aa:	f7f3 ff7d 	bl	80046a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 80107ae:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
 80107b2:	4629      	mov	r1, r5
 80107b4:	429d      	cmp	r5, r3
 80107b6:	eba5 0503 	sub.w	r5, r5, r3
 80107ba:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 80107be:	bfa8      	it	ge
 80107c0:	4619      	movge	r1, r3
 80107c2:	2d00      	cmp	r5, #0
 80107c4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80107c8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80107cc:	f04f 0100 	mov.w	r1, #0
 80107d0:	bfb8      	it	lt
 80107d2:	426d      	neglt	r5, r5
 80107d4:	f8ad 100a 	strh.w	r1, [sp, #10]
 80107d8:	f8ad 500c 	strh.w	r5, [sp, #12]
 80107dc:	a902      	add	r1, sp, #8
 80107de:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80107e2:	f007 fc5b 	bl	801809c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 80107e6:	b005      	add	sp, #20
 80107e8:	bd30      	pop	{r4, r5, pc}
 80107ea:	8921      	ldrh	r1, [r4, #8]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 80107f2:	1a09      	subs	r1, r1, r0
 80107f4:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	@ 0xbc
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	4603      	mov	r3, r0
 80107fc:	b209      	sxth	r1, r1
 80107fe:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8010802:	f7f3 ff51 	bl	80046a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8010806:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
 801080a:	e7d2      	b.n	80107b2 <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 801080c:	2200      	movs	r2, #0
 801080e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 8010812:	9000      	str	r0, [sp, #0]
 8010814:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8010818:	4611      	mov	r1, r2
 801081a:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	@ 0xc2
 801081e:	f7f3 ff43 	bl	80046a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8010822:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
 8010826:	2100      	movs	r1, #0
 8010828:	429d      	cmp	r5, r3
 801082a:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 801082e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010832:	4629      	mov	r1, r5
 8010834:	eba5 0503 	sub.w	r5, r5, r3
 8010838:	bfa8      	it	ge
 801083a:	4619      	movge	r1, r3
 801083c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010840:	2d00      	cmp	r5, #0
 8010842:	f8ad 100a 	strh.w	r1, [sp, #10]
 8010846:	bfb8      	it	lt
 8010848:	426d      	neglt	r5, r5
 801084a:	f8ad 500e 	strh.w	r5, [sp, #14]
 801084e:	e7c5      	b.n	80107dc <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 8010850:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 8010854:	2100      	movs	r1, #0
 8010856:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 801085a:	1a12      	subs	r2, r2, r0
 801085c:	9000      	str	r0, [sp, #0]
 801085e:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8010862:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	@ 0xbe
 8010866:	b212      	sxth	r2, r2
 8010868:	f7f3 ff1e 	bl	80046a8 <_ZN8touchgfx8Drawable11setPositionEssss>
 801086c:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
 8010870:	e7d9      	b.n	8010826 <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>
	...

08010874 <_ZN8touchgfx11BoxProgressC1Ev>:
 8010874:	b510      	push	{r4, lr}
 8010876:	4604      	mov	r4, r0
 8010878:	f000 f85a 	bl	8010930 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801087c:	2201      	movs	r2, #1
 801087e:	4b17      	ldr	r3, [pc, #92]	@ (80108dc <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8010880:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010884:	f104 01b8 	add.w	r1, r4, #184	@ 0xb8
 8010888:	f884 20dd 	strb.w	r2, [r4, #221]	@ 0xdd
 801088c:	4a14      	ldr	r2, [pc, #80]	@ (80108e0 <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 801088e:	6023      	str	r3, [r4, #0]
 8010890:	2300      	movs	r3, #0
 8010892:	f8c4 20b8 	str.w	r2, [r4, #184]	@ 0xb8
 8010896:	22ff      	movs	r2, #255	@ 0xff
 8010898:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 801089c:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 80108a0:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 80108a4:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 80108a8:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 80108ac:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 80108b0:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 80108b4:	f8a4 30ca 	strh.w	r3, [r4, #202]	@ 0xca
 80108b8:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80108bc:	f8a4 30d8 	strh.w	r3, [r4, #216]	@ 0xd8
 80108c0:	f8a4 30da 	strh.w	r3, [r4, #218]	@ 0xda
 80108c4:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
 80108c8:	f884 20de 	strb.w	r2, [r4, #222]	@ 0xde
 80108cc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80108d0:	e9c4 3333 	strd	r3, r3, [r4, #204]	@ 0xcc
 80108d4:	f000 fa08 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80108d8:	4620      	mov	r0, r4
 80108da:	bd10      	pop	{r4, pc}
 80108dc:	08029bb0 	.word	0x08029bb0
 80108e0:	0802a1a4 	.word	0x0802a1a4

080108e4 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80108e4:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 80108e8:	4770      	bx	lr

080108ea <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 80108ea:	4770      	bx	lr

080108ec <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80108ec:	b510      	push	{r4, lr}
 80108ee:	4604      	mov	r4, r0
 80108f0:	21b8      	movs	r1, #184	@ 0xb8
 80108f2:	f014 fe24 	bl	802553e <_ZdlPvj>
 80108f6:	4620      	mov	r0, r4
 80108f8:	bd10      	pop	{r4, pc}

080108fa <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 80108fa:	b570      	push	{r4, r5, r6, lr}
 80108fc:	4604      	mov	r4, r0
 80108fe:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
 8010902:	3058      	adds	r0, #88	@ 0x58
 8010904:	f007 fb79 	bl	8017ffa <_ZNK8touchgfx8Drawable10invalidateEv>
 8010908:	6823      	ldr	r3, [r4, #0]
 801090a:	4620      	mov	r0, r4
 801090c:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 8010910:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010914:	4798      	blx	r3
 8010916:	462b      	mov	r3, r5
 8010918:	4601      	mov	r1, r0
 801091a:	4620      	mov	r0, r4
 801091c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010920:	4718      	bx	r3

08010922 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8010922:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 8010926:	428b      	cmp	r3, r1
 8010928:	d001      	beq.n	801092e <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 801092a:	f7ff bfe6 	b.w	80108fa <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 801092e:	4770      	bx	lr

08010930 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8010930:	b510      	push	{r4, lr}
 8010932:	4604      	mov	r4, r0
 8010934:	f000 f978 	bl	8010c28 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8010938:	4b03      	ldr	r3, [pc, #12]	@ (8010948 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801093a:	4620      	mov	r0, r4
 801093c:	6023      	str	r3, [r4, #0]
 801093e:	2300      	movs	r3, #0
 8010940:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010944:	bd10      	pop	{r4, pc}
 8010946:	bf00      	nop
 8010948:	08029c94 	.word	0x08029c94

0801094c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 801094c:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 8010950:	4770      	bx	lr

08010952 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8010952:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 8010956:	4770      	bx	lr

08010958 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8010958:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 801095c:	4770      	bx	lr

0801095e <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801095e:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 8010962:	4770      	bx	lr

08010964 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8010964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010966:	461e      	mov	r6, r3
 8010968:	6803      	ldr	r3, [r0, #0]
 801096a:	460f      	mov	r7, r1
 801096c:	4604      	mov	r4, r0
 801096e:	4615      	mov	r5, r2
 8010970:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 8010974:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 8010978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801097c:	4798      	blx	r3
 801097e:	b93e      	cbnz	r6, 8010990 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8010980:	1bed      	subs	r5, r5, r7
 8010982:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 8010986:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801098a:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 801098e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010990:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 8010994:	e7f7      	b.n	8010986 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

08010996 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8010996:	b510      	push	{r4, lr}
 8010998:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 801099c:	600c      	str	r4, [r1, #0]
 801099e:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80109a2:	6011      	str	r1, [r2, #0]
 80109a4:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 80109a8:	801a      	strh	r2, [r3, #0]
 80109aa:	9b02      	ldr	r3, [sp, #8]
 80109ac:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 80109b0:	801a      	strh	r2, [r3, #0]
 80109b2:	bd10      	pop	{r4, pc}

080109b4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 80109b4:	b510      	push	{r4, lr}
 80109b6:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 80109ba:	600c      	str	r4, [r1, #0]
 80109bc:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80109c0:	6011      	str	r1, [r2, #0]
 80109c2:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 80109c6:	801a      	strh	r2, [r3, #0]
 80109c8:	bd10      	pop	{r4, pc}

080109ca <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 80109ca:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80109ce:	600b      	str	r3, [r1, #0]
 80109d0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80109d4:	6013      	str	r3, [r2, #0]
 80109d6:	4770      	bx	lr

080109d8 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 80109d8:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 80109dc:	4770      	bx	lr

080109de <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80109de:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 80109e2:	4770      	bx	lr

080109e4 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 80109e4:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 80109e8:	4770      	bx	lr

080109ea <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 80109ea:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 80109ee:	4770      	bx	lr

080109f0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 80109f0:	4770      	bx	lr

080109f2 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80109f2:	b510      	push	{r4, lr}
 80109f4:	4604      	mov	r4, r0
 80109f6:	21b4      	movs	r1, #180	@ 0xb4
 80109f8:	f014 fda1 	bl	802553e <_ZdlPvj>
 80109fc:	4620      	mov	r0, r4
 80109fe:	bd10      	pop	{r4, pc}

08010a00 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8010a00:	b570      	push	{r4, r5, r6, lr}
 8010a02:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 8010a06:	4604      	mov	r4, r0
 8010a08:	4616      	mov	r6, r2
 8010a0a:	428d      	cmp	r5, r1
 8010a0c:	bfb8      	it	lt
 8010a0e:	460d      	movlt	r5, r1
 8010a10:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8010a14:	428d      	cmp	r5, r1
 8010a16:	bfa8      	it	ge
 8010a18:	460d      	movge	r5, r1
 8010a1a:	b99a      	cbnz	r2, 8010a44 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8010a1c:	6803      	ldr	r3, [r0, #0]
 8010a1e:	4629      	mov	r1, r5
 8010a20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010a24:	4798      	blx	r3
 8010a26:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010a2a:	b368      	cbz	r0, 8010a88 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8010a2c:	6803      	ldr	r3, [r0, #0]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	4798      	blx	r3
 8010a32:	b348      	cbz	r0, 8010a88 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8010a34:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010a38:	4621      	mov	r1, r4
 8010a3a:	6803      	ldr	r3, [r0, #0]
 8010a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a40:	689b      	ldr	r3, [r3, #8]
 8010a42:	4718      	bx	r3
 8010a44:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	dd08      	ble.n	8010a5e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8010a4c:	f006 fa12 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 8010a50:	4621      	mov	r1, r4
 8010a52:	3004      	adds	r0, #4
 8010a54:	f006 fa33 	bl	8016ebe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8010a58:	2300      	movs	r3, #0
 8010a5a:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8010a5e:	6823      	ldr	r3, [r4, #0]
 8010a60:	4620      	mov	r0, r4
 8010a62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010a66:	4798      	blx	r3
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 8010a6e:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8010a72:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 8010a76:	f006 f9fd 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 8010a7a:	4621      	mov	r1, r4
 8010a7c:	3004      	adds	r0, #4
 8010a7e:	f006 fac7 	bl	8017010 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8010a82:	2301      	movs	r3, #1
 8010a84:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8010a88:	bd70      	pop	{r4, r5, r6, pc}

08010a8a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8010a8a:	b510      	push	{r4, lr}
 8010a8c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8010a90:	4604      	mov	r4, r0
 8010a92:	4299      	cmp	r1, r3
 8010a94:	bfb8      	it	lt
 8010a96:	4619      	movlt	r1, r3
 8010a98:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8010a9c:	4299      	cmp	r1, r3
 8010a9e:	bfa8      	it	ge
 8010aa0:	4619      	movge	r1, r3
 8010aa2:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8010aa6:	428b      	cmp	r3, r1
 8010aa8:	d010      	beq.n	8010acc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8010aaa:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8010aae:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 8010ab2:	b158      	cbz	r0, 8010acc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8010ab4:	6803      	ldr	r3, [r0, #0]
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	4798      	blx	r3
 8010aba:	b138      	cbz	r0, 8010acc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8010abc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8010ac0:	4621      	mov	r1, r4
 8010ac2:	6803      	ldr	r3, [r0, #0]
 8010ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ac8:	689b      	ldr	r3, [r3, #8]
 8010aca:	4718      	bx	r3
 8010acc:	bd10      	pop	{r4, pc}

08010ace <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8010ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	460d      	mov	r5, r1
 8010ad4:	b1a9      	cbz	r1, 8010b02 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8010ad6:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 8010ada:	ab01      	add	r3, sp, #4
 8010adc:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 8010ae0:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 8010ae4:	1b89      	subs	r1, r1, r6
 8010ae6:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 8010aea:	1a12      	subs	r2, r2, r0
 8010aec:	1a38      	subs	r0, r7, r0
 8010aee:	f007 ff53 	bl	8018998 <_ZN8touchgfx6muldivElllRl>
 8010af2:	4629      	mov	r1, r5
 8010af4:	ab01      	add	r3, sp, #4
 8010af6:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 8010afa:	4430      	add	r0, r6
 8010afc:	f007 ff4c 	bl	8018998 <_ZN8touchgfx6muldivElllRl>
 8010b00:	b285      	uxth	r5, r0
 8010b02:	4628      	mov	r0, r5
 8010b04:	b003      	add	sp, #12
 8010b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b08 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8010b08:	b570      	push	{r4, r5, r6, lr}
 8010b0a:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8010b0e:	4604      	mov	r4, r0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d035      	beq.n	8010b80 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010b14:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 8010b18:	2100      	movs	r1, #0
 8010b1a:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 8010b1e:	3001      	adds	r0, #1
 8010b20:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 8010b24:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 8010b28:	b280      	uxth	r0, r0
 8010b2a:	1ad2      	subs	r2, r2, r3
 8010b2c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8010b30:	b212      	sxth	r2, r2
 8010b32:	47a8      	blx	r5
 8010b34:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8010b38:	6823      	ldr	r3, [r4, #0]
 8010b3a:	4401      	add	r1, r0
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010b42:	4798      	blx	r3
 8010b44:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	db19      	blt.n	8010b80 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010b4c:	2500      	movs	r5, #0
 8010b4e:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8010b52:	f006 f98f 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 8010b56:	4621      	mov	r1, r4
 8010b58:	3004      	adds	r0, #4
 8010b5a:	f006 f9b0 	bl	8016ebe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8010b5e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010b62:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8010b66:	b158      	cbz	r0, 8010b80 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010b68:	6803      	ldr	r3, [r0, #0]
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	4798      	blx	r3
 8010b6e:	b138      	cbz	r0, 8010b80 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010b70:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010b74:	4621      	mov	r1, r4
 8010b76:	6803      	ldr	r3, [r0, #0]
 8010b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	4718      	bx	r3
 8010b80:	bd70      	pop	{r4, r5, r6, pc}
	...

08010b84 <_ZN8touchgfx8DrawableC1Ev>:
 8010b84:	4a0a      	ldr	r2, [pc, #40]	@ (8010bb0 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 8010b86:	6002      	str	r2, [r0, #0]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	8082      	strh	r2, [r0, #4]
 8010b8c:	80c2      	strh	r2, [r0, #6]
 8010b8e:	8102      	strh	r2, [r0, #8]
 8010b90:	8142      	strh	r2, [r0, #10]
 8010b92:	8182      	strh	r2, [r0, #12]
 8010b94:	81c2      	strh	r2, [r0, #14]
 8010b96:	8202      	strh	r2, [r0, #16]
 8010b98:	8242      	strh	r2, [r0, #18]
 8010b9a:	61c2      	str	r2, [r0, #28]
 8010b9c:	8402      	strh	r2, [r0, #32]
 8010b9e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010ba0:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8010ba4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010ba8:	2201      	movs	r2, #1
 8010baa:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8010bae:	4770      	bx	lr
 8010bb0:	0802a438 	.word	0x0802a438

08010bb4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8010bb4:	b570      	push	{r4, r5, r6, lr}
 8010bb6:	6803      	ldr	r3, [r0, #0]
 8010bb8:	4604      	mov	r4, r0
 8010bba:	4615      	mov	r5, r2
 8010bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bbe:	4798      	blx	r3
 8010bc0:	6823      	ldr	r3, [r4, #0]
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bcc:	4718      	bx	r3

08010bce <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8010bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8010bd8:	4698      	mov	r8, r3
 8010bda:	460e      	mov	r6, r1
 8010bdc:	4615      	mov	r5, r2
 8010bde:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 8010be2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8010be6:	4619      	mov	r1, r3
 8010be8:	463a      	mov	r2, r7
 8010bea:	3058      	adds	r0, #88	@ 0x58
 8010bec:	f7ff ffe2 	bl	8010bb4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010bf0:	4446      	add	r6, r8
 8010bf2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8010bf6:	443d      	add	r5, r7
 8010bf8:	42b3      	cmp	r3, r6
 8010bfa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010bfe:	bfb8      	it	lt
 8010c00:	8126      	strhlt	r6, [r4, #8]
 8010c02:	42ab      	cmp	r3, r5
 8010c04:	bfb8      	it	lt
 8010c06:	8165      	strhlt	r5, [r4, #10]
 8010c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c0c <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8010c0c:	b510      	push	{r4, lr}
 8010c0e:	4604      	mov	r4, r0
 8010c10:	302c      	adds	r0, #44	@ 0x2c
 8010c12:	f003 fb6c 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010c16:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8010c20:	f7ff ffc8 	bl	8010bb4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010c24:	bd10      	pop	{r4, pc}
	...

08010c28 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8010c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	2500      	movs	r5, #0
 8010c2e:	f7ff ffa9 	bl	8010b84 <_ZN8touchgfx8DrawableC1Ev>
 8010c32:	4b24      	ldr	r3, [pc, #144]	@ (8010cc4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8010c34:	4626      	mov	r6, r4
 8010c36:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8010c3a:	2226      	movs	r2, #38	@ 0x26
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8010c40:	f846 3b2c 	str.w	r3, [r6], #44
 8010c44:	4630      	mov	r0, r6
 8010c46:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010c4a:	f015 fa8d 	bl	8026168 <memset>
 8010c4e:	4630      	mov	r0, r6
 8010c50:	f7ff ff98 	bl	8010b84 <_ZN8touchgfx8DrawableC1Ev>
 8010c54:	a902      	add	r1, sp, #8
 8010c56:	4b1c      	ldr	r3, [pc, #112]	@ (8010cc8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8010c58:	4630      	mov	r0, r6
 8010c5a:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 8010c5e:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 8010c62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c64:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8010c68:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8010c6c:	f003 fb3f 	bl	80142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010c70:	4638      	mov	r0, r7
 8010c72:	f7ff ff87 	bl	8010b84 <_ZN8touchgfx8DrawableC1Ev>
 8010c76:	4b15      	ldr	r3, [pc, #84]	@ (8010ccc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8010c78:	4629      	mov	r1, r5
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010c7e:	2364      	movs	r3, #100	@ 0x64
 8010c80:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8010c84:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8010c88:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 8010c8c:	4b10      	ldr	r3, [pc, #64]	@ (8010cd0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8010c8e:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 8010c92:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8010c96:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 8010c9a:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8010c9e:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 8010ca2:	f7f2 fc7b 	bl	800359c <_ZN8touchgfx8Drawable4setXEs>
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f7f2 fc79 	bl	80035a0 <_ZN8touchgfx8Drawable4setYEs>
 8010cae:	4631      	mov	r1, r6
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f000 f819 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	4639      	mov	r1, r7
 8010cba:	f000 f815 	bl	8010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	b003      	add	sp, #12
 8010cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cc4:	08029d70 	.word	0x08029d70
 8010cc8:	0802a280 	.word	0x0802a280
 8010ccc:	08029e44 	.word	0x08029e44
 8010cd0:	08019073 	.word	0x08019073

08010cd4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8010cd4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	b12b      	cbz	r3, 8010ce6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010cda:	b920      	cbnz	r0, 8010ce6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010cdc:	1a5a      	subs	r2, r3, r1
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	4250      	negs	r0, r2
 8010ce2:	4150      	adcs	r0, r2
 8010ce4:	e7f8      	b.n	8010cd8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8010ce6:	4770      	bx	lr

08010ce8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8010ce8:	2300      	movs	r3, #0
 8010cea:	6148      	str	r0, [r1, #20]
 8010cec:	618b      	str	r3, [r1, #24]
 8010cee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010cf0:	b913      	cbnz	r3, 8010cf8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8010cf2:	6281      	str	r1, [r0, #40]	@ 0x28
 8010cf4:	4770      	bx	lr
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	699a      	ldr	r2, [r3, #24]
 8010cfa:	2a00      	cmp	r2, #0
 8010cfc:	d1fb      	bne.n	8010cf6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8010cfe:	6199      	str	r1, [r3, #24]
 8010d00:	4770      	bx	lr

08010d02 <_ZN8touchgfx9Container9removeAllEv>:
 8010d02:	2200      	movs	r2, #0
 8010d04:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010d06:	b123      	cbz	r3, 8010d12 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8010d08:	6999      	ldr	r1, [r3, #24]
 8010d0a:	6281      	str	r1, [r0, #40]	@ 0x28
 8010d0c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8010d10:	e7f8      	b.n	8010d04 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8010d12:	4770      	bx	lr

08010d14 <_ZN8touchgfx9Container6unlinkEv>:
 8010d14:	2300      	movs	r3, #0
 8010d16:	6283      	str	r3, [r0, #40]	@ 0x28
 8010d18:	4770      	bx	lr

08010d1a <_ZNK8touchgfx9Container12getSolidRectEv>:
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	8002      	strh	r2, [r0, #0]
 8010d1e:	8042      	strh	r2, [r0, #2]
 8010d20:	8082      	strh	r2, [r0, #4]
 8010d22:	80c2      	strh	r2, [r0, #6]
 8010d24:	4770      	bx	lr

08010d26 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8010d26:	b570      	push	{r4, r5, r6, lr}
 8010d28:	460d      	mov	r5, r1
 8010d2a:	4616      	mov	r6, r2
 8010d2c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010d2e:	b13c      	cbz	r4, 8010d40 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8010d30:	6823      	ldr	r3, [r4, #0]
 8010d32:	4620      	mov	r0, r4
 8010d34:	4632      	mov	r2, r6
 8010d36:	4629      	mov	r1, r5
 8010d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d3a:	4798      	blx	r3
 8010d3c:	69a4      	ldr	r4, [r4, #24]
 8010d3e:	e7f6      	b.n	8010d2e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8010d40:	bd70      	pop	{r4, r5, r6, pc}

08010d42 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8010d42:	b538      	push	{r3, r4, r5, lr}
 8010d44:	460d      	mov	r5, r1
 8010d46:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010d48:	b134      	cbz	r4, 8010d58 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8010d4a:	682b      	ldr	r3, [r5, #0]
 8010d4c:	4621      	mov	r1, r4
 8010d4e:	4628      	mov	r0, r5
 8010d50:	689b      	ldr	r3, [r3, #8]
 8010d52:	4798      	blx	r3
 8010d54:	69a4      	ldr	r4, [r4, #24]
 8010d56:	e7f7      	b.n	8010d48 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8010d58:	bd38      	pop	{r3, r4, r5, pc}

08010d5a <_ZN8touchgfx9ContainerD1Ev>:
 8010d5a:	4770      	bx	lr

08010d5c <_ZN8touchgfx9ContainerD0Ev>:
 8010d5c:	b510      	push	{r4, lr}
 8010d5e:	4604      	mov	r4, r0
 8010d60:	212c      	movs	r1, #44	@ 0x2c
 8010d62:	f014 fbec 	bl	802553e <_ZdlPvj>
 8010d66:	4620      	mov	r0, r4
 8010d68:	bd10      	pop	{r4, pc}

08010d6a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8010d6a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010d6c:	b19b      	cbz	r3, 8010d96 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010d6e:	428b      	cmp	r3, r1
 8010d70:	d109      	bne.n	8010d86 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8010d72:	699a      	ldr	r2, [r3, #24]
 8010d74:	2100      	movs	r1, #0
 8010d76:	6159      	str	r1, [r3, #20]
 8010d78:	6282      	str	r2, [r0, #40]	@ 0x28
 8010d7a:	b902      	cbnz	r2, 8010d7e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010d7c:	4770      	bx	lr
 8010d7e:	6199      	str	r1, [r3, #24]
 8010d80:	4770      	bx	lr
 8010d82:	4613      	mov	r3, r2
 8010d84:	b13a      	cbz	r2, 8010d96 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010d86:	699a      	ldr	r2, [r3, #24]
 8010d88:	428a      	cmp	r2, r1
 8010d8a:	d1fa      	bne.n	8010d82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010d8c:	698a      	ldr	r2, [r1, #24]
 8010d8e:	619a      	str	r2, [r3, #24]
 8010d90:	2300      	movs	r3, #0
 8010d92:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8010d96:	4770      	bx	lr

08010d98 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8010d98:	b410      	push	{r4}
 8010d9a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	b92b      	cbnz	r3, 8010dac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8010da0:	6803      	ldr	r3, [r0, #0]
 8010da2:	4611      	mov	r1, r2
 8010da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010daa:	4718      	bx	r3
 8010dac:	b941      	cbnz	r1, 8010dc0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8010dae:	6193      	str	r3, [r2, #24]
 8010db0:	6282      	str	r2, [r0, #40]	@ 0x28
 8010db2:	6154      	str	r4, [r2, #20]
 8010db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010db8:	4770      	bx	lr
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	d0f9      	beq.n	8010db4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010dc0:	4299      	cmp	r1, r3
 8010dc2:	6998      	ldr	r0, [r3, #24]
 8010dc4:	d1f9      	bne.n	8010dba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8010dc6:	6190      	str	r0, [r2, #24]
 8010dc8:	618a      	str	r2, [r1, #24]
 8010dca:	e7f2      	b.n	8010db2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08010dcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dd0:	461f      	mov	r7, r3
 8010dd2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010dd6:	460d      	mov	r5, r1
 8010dd8:	4616      	mov	r6, r2
 8010dda:	b103      	cbz	r3, 8010dde <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8010ddc:	6038      	str	r0, [r7, #0]
 8010dde:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010de0:	b314      	cbz	r4, 8010e28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8010de2:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010de6:	b1eb      	cbz	r3, 8010e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010de8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010dec:	428d      	cmp	r5, r1
 8010dee:	db19      	blt.n	8010e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010df0:	b289      	uxth	r1, r1
 8010df2:	8923      	ldrh	r3, [r4, #8]
 8010df4:	440b      	add	r3, r1
 8010df6:	b21b      	sxth	r3, r3
 8010df8:	429d      	cmp	r5, r3
 8010dfa:	da13      	bge.n	8010e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010dfc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010e00:	4296      	cmp	r6, r2
 8010e02:	db0f      	blt.n	8010e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010e04:	b292      	uxth	r2, r2
 8010e06:	8963      	ldrh	r3, [r4, #10]
 8010e08:	4413      	add	r3, r2
 8010e0a:	b21b      	sxth	r3, r3
 8010e0c:	429e      	cmp	r6, r3
 8010e0e:	da09      	bge.n	8010e24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	1ab2      	subs	r2, r6, r2
 8010e14:	1a69      	subs	r1, r5, r1
 8010e16:	4620      	mov	r0, r4
 8010e18:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8010e1c:	b212      	sxth	r2, r2
 8010e1e:	463b      	mov	r3, r7
 8010e20:	b209      	sxth	r1, r1
 8010e22:	47c0      	blx	r8
 8010e24:	69a4      	ldr	r4, [r4, #24]
 8010e26:	e7db      	b.n	8010de0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8010e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8010e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e30:	4c6d      	ldr	r4, [pc, #436]	@ (8010fe8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8010e32:	b0a1      	sub	sp, #132	@ 0x84
 8010e34:	4606      	mov	r6, r0
 8010e36:	6824      	ldr	r4, [r4, #0]
 8010e38:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8010e3a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8010e3e:	2400      	movs	r4, #0
 8010e40:	9303      	str	r3, [sp, #12]
 8010e42:	802c      	strh	r4, [r5, #0]
 8010e44:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8010e46:	802c      	strh	r4, [r5, #0]
 8010e48:	601c      	str	r4, [r3, #0]
 8010e4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010e4e:	f7ff ffbd 	bl	8010dcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010e52:	f1b9 0f03 	cmp.w	r9, #3
 8010e56:	f340 80c1 	ble.w	8010fdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	a80c      	add	r0, sp, #48	@ 0x30
 8010e5e:	f007 f967 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010e62:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8010e66:	9306      	str	r3, [sp, #24]
 8010e68:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8010e6c:	9307      	str	r3, [sp, #28]
 8010e6e:	9b03      	ldr	r3, [sp, #12]
 8010e70:	f8d3 a000 	ldr.w	sl, [r3]
 8010e74:	f1ba 0f00 	cmp.w	sl, #0
 8010e78:	f000 80b3 	beq.w	8010fe2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8010e7c:	4651      	mov	r1, sl
 8010e7e:	a810      	add	r0, sp, #64	@ 0x40
 8010e80:	f007 f956 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010e84:	2002      	movs	r0, #2
 8010e86:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8010e8a:	9b01      	ldr	r3, [sp, #4]
 8010e8c:	9a06      	ldr	r2, [sp, #24]
 8010e8e:	fb91 f1f0 	sdiv	r1, r1, r0
 8010e92:	189d      	adds	r5, r3, r2
 8010e94:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8010e98:	9a07      	ldr	r2, [sp, #28]
 8010e9a:	4419      	add	r1, r3
 8010e9c:	9b02      	ldr	r3, [sp, #8]
 8010e9e:	4413      	add	r3, r2
 8010ea0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8010ea4:	1a6d      	subs	r5, r5, r1
 8010ea6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8010eaa:	fb92 f2f0 	sdiv	r2, r2, r0
 8010eae:	440a      	add	r2, r1
 8010eb0:	1a9b      	subs	r3, r3, r2
 8010eb2:	435b      	muls	r3, r3
 8010eb4:	fb05 3505 	mla	r5, r5, r5, r3
 8010eb8:	4f4c      	ldr	r7, [pc, #304]	@ (8010fec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8010eba:	ac10      	add	r4, sp, #64	@ 0x40
 8010ebc:	f1b9 0f0c 	cmp.w	r9, #12
 8010ec0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ec4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ec8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ecc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010ed4:	f04f 0303 	mov.w	r3, #3
 8010ed8:	bfd8      	it	le
 8010eda:	f109 32ff 	addle.w	r2, r9, #4294967295
 8010ede:	f04f 0400 	mov.w	r4, #0
 8010ee2:	f8cd 9000 	str.w	r9, [sp]
 8010ee6:	bfcc      	ite	gt
 8010ee8:	4698      	movgt	r8, r3
 8010eea:	fb92 f8f3 	sdivle	r8, r2, r3
 8010eee:	1c63      	adds	r3, r4, #1
 8010ef0:	aa10      	add	r2, sp, #64	@ 0x40
 8010ef2:	f004 0401 	and.w	r4, r4, #1
 8010ef6:	f04f 0b00 	mov.w	fp, #0
 8010efa:	9308      	str	r3, [sp, #32]
 8010efc:	9b00      	ldr	r3, [sp, #0]
 8010efe:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8010f02:	fb93 f3f8 	sdiv	r3, r3, r8
 8010f06:	3404      	adds	r4, #4
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	9304      	str	r3, [sp, #16]
 8010f0c:	9a04      	ldr	r2, [sp, #16]
 8010f0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010f12:	fb13 f302 	smulbb	r3, r3, r2
 8010f16:	9a01      	ldr	r2, [sp, #4]
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	1899      	adds	r1, r3, r2
 8010f1c:	9305      	str	r3, [sp, #20]
 8010f1e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010f22:	b209      	sxth	r1, r1
 8010f24:	4299      	cmp	r1, r3
 8010f26:	db4d      	blt.n	8010fc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010f28:	8932      	ldrh	r2, [r6, #8]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	b21b      	sxth	r3, r3
 8010f2e:	4299      	cmp	r1, r3
 8010f30:	da48      	bge.n	8010fc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010f32:	9b04      	ldr	r3, [sp, #16]
 8010f34:	6827      	ldr	r7, [r4, #0]
 8010f36:	fb17 f703 	smulbb	r7, r7, r3
 8010f3a:	9b02      	ldr	r3, [sp, #8]
 8010f3c:	b2bf      	uxth	r7, r7
 8010f3e:	18fa      	adds	r2, r7, r3
 8010f40:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010f44:	b212      	sxth	r2, r2
 8010f46:	429a      	cmp	r2, r3
 8010f48:	db3c      	blt.n	8010fc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010f4a:	8970      	ldrh	r0, [r6, #10]
 8010f4c:	4403      	add	r3, r0
 8010f4e:	b21b      	sxth	r3, r3
 8010f50:	429a      	cmp	r2, r3
 8010f52:	da37      	bge.n	8010fc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010f54:	2300      	movs	r3, #0
 8010f56:	4630      	mov	r0, r6
 8010f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f5a:	ab0b      	add	r3, sp, #44	@ 0x2c
 8010f5c:	f7ff ff36 	bl	8010dcc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010f60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f62:	b37a      	cbz	r2, 8010fc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010f64:	4552      	cmp	r2, sl
 8010f66:	d02d      	beq.n	8010fc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010f68:	4611      	mov	r1, r2
 8010f6a:	a80e      	add	r0, sp, #56	@ 0x38
 8010f6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f6e:	f007 f8df 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010f72:	f04f 0e02 	mov.w	lr, #2
 8010f76:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8010f7a:	9a06      	ldr	r2, [sp, #24]
 8010f7c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8010f80:	9b01      	ldr	r3, [sp, #4]
 8010f82:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8010f86:	4413      	add	r3, r2
 8010f88:	9a07      	ldr	r2, [sp, #28]
 8010f8a:	fb91 f1fe 	sdiv	r1, r1, lr
 8010f8e:	fb9c fcfe 	sdiv	ip, ip, lr
 8010f92:	4401      	add	r1, r0
 8010f94:	1a58      	subs	r0, r3, r1
 8010f96:	9b02      	ldr	r3, [sp, #8]
 8010f98:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8010f9c:	4413      	add	r3, r2
 8010f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fa0:	448c      	add	ip, r1
 8010fa2:	eba3 030c 	sub.w	r3, r3, ip
 8010fa6:	435b      	muls	r3, r3
 8010fa8:	fb00 3300 	mla	r3, r0, r0, r3
 8010fac:	42ab      	cmp	r3, r5
 8010fae:	d208      	bcs.n	8010fc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8010fb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010fb2:	461d      	mov	r5, r3
 8010fb4:	9803      	ldr	r0, [sp, #12]
 8010fb6:	6001      	str	r1, [r0, #0]
 8010fb8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8010fba:	9805      	ldr	r0, [sp, #20]
 8010fbc:	8008      	strh	r0, [r1, #0]
 8010fbe:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8010fc0:	800f      	strh	r7, [r1, #0]
 8010fc2:	4692      	mov	sl, r2
 8010fc4:	f10b 0b01 	add.w	fp, fp, #1
 8010fc8:	3408      	adds	r4, #8
 8010fca:	f1bb 0f04 	cmp.w	fp, #4
 8010fce:	d19d      	bne.n	8010f0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010fd0:	9b00      	ldr	r3, [sp, #0]
 8010fd2:	9c08      	ldr	r4, [sp, #32]
 8010fd4:	444b      	add	r3, r9
 8010fd6:	4544      	cmp	r4, r8
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	d188      	bne.n	8010eee <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8010fdc:	b021      	add	sp, #132	@ 0x84
 8010fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe2:	f04f 35ff 	mov.w	r5, #4294967295
 8010fe6:	e767      	b.n	8010eb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8010fe8:	24026418 	.word	0x24026418
 8010fec:	08026cb0 	.word	0x08026cb0

08010ff0 <_ZN8touchgfx4RectaNERKS0_>:
 8010ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ff4:	f9b1 7000 	ldrsh.w	r7, [r1]
 8010ff8:	888c      	ldrh	r4, [r1, #4]
 8010ffa:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010ffe:	443c      	add	r4, r7
 8011000:	b2a4      	uxth	r4, r4
 8011002:	fa0f f884 	sxth.w	r8, r4
 8011006:	45c1      	cmp	r9, r8
 8011008:	da2f      	bge.n	801106a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801100a:	8882      	ldrh	r2, [r0, #4]
 801100c:	444a      	add	r2, r9
 801100e:	b292      	uxth	r2, r2
 8011010:	fa0f fe82 	sxth.w	lr, r2
 8011014:	4577      	cmp	r7, lr
 8011016:	da28      	bge.n	801106a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011018:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801101c:	88cb      	ldrh	r3, [r1, #6]
 801101e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011022:	442b      	add	r3, r5
 8011024:	b21b      	sxth	r3, r3
 8011026:	429e      	cmp	r6, r3
 8011028:	da1f      	bge.n	801106a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801102a:	88c3      	ldrh	r3, [r0, #6]
 801102c:	4433      	add	r3, r6
 801102e:	b29b      	uxth	r3, r3
 8011030:	fa0f fc83 	sxth.w	ip, r3
 8011034:	4565      	cmp	r5, ip
 8011036:	da18      	bge.n	801106a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8011038:	454f      	cmp	r7, r9
 801103a:	bfb8      	it	lt
 801103c:	464f      	movlt	r7, r9
 801103e:	42b5      	cmp	r5, r6
 8011040:	bfb8      	it	lt
 8011042:	4635      	movlt	r5, r6
 8011044:	45f0      	cmp	r8, lr
 8011046:	bfd8      	it	le
 8011048:	4622      	movle	r2, r4
 801104a:	1bd2      	subs	r2, r2, r7
 801104c:	8082      	strh	r2, [r0, #4]
 801104e:	884a      	ldrh	r2, [r1, #2]
 8011050:	88c9      	ldrh	r1, [r1, #6]
 8011052:	8007      	strh	r7, [r0, #0]
 8011054:	440a      	add	r2, r1
 8011056:	8045      	strh	r5, [r0, #2]
 8011058:	b292      	uxth	r2, r2
 801105a:	b211      	sxth	r1, r2
 801105c:	458c      	cmp	ip, r1
 801105e:	bfa8      	it	ge
 8011060:	4613      	movge	r3, r2
 8011062:	1b5b      	subs	r3, r3, r5
 8011064:	80c3      	strh	r3, [r0, #6]
 8011066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801106a:	2300      	movs	r3, #0
 801106c:	8003      	strh	r3, [r0, #0]
 801106e:	8043      	strh	r3, [r0, #2]
 8011070:	8083      	strh	r3, [r0, #4]
 8011072:	80c3      	strh	r3, [r0, #6]
 8011074:	e7f7      	b.n	8011066 <_ZN8touchgfx4RectaNERKS0_+0x76>

08011076 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011076:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	dd06      	ble.n	801108c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801107e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011082:	2800      	cmp	r0, #0
 8011084:	bfcc      	ite	gt
 8011086:	2000      	movgt	r0, #0
 8011088:	2001      	movle	r0, #1
 801108a:	4770      	bx	lr
 801108c:	2001      	movs	r0, #1
 801108e:	4770      	bx	lr

08011090 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8011090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011094:	2300      	movs	r3, #0
 8011096:	4604      	mov	r4, r0
 8011098:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801109a:	8003      	strh	r3, [r0, #0]
 801109c:	8043      	strh	r3, [r0, #2]
 801109e:	8083      	strh	r3, [r0, #4]
 80110a0:	80c3      	strh	r3, [r0, #6]
 80110a2:	2d00      	cmp	r5, #0
 80110a4:	d040      	beq.n	8011128 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80110a6:	1d28      	adds	r0, r5, #4
 80110a8:	f7ff ffe5 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80110ac:	b988      	cbnz	r0, 80110d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80110ae:	4620      	mov	r0, r4
 80110b0:	f7ff ffe1 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80110b4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80110b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80110bc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80110c0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80110c4:	b138      	cbz	r0, 80110d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80110c6:	8022      	strh	r2, [r4, #0]
 80110c8:	8063      	strh	r3, [r4, #2]
 80110ca:	f8a4 e004 	strh.w	lr, [r4, #4]
 80110ce:	f8a4 c006 	strh.w	ip, [r4, #6]
 80110d2:	69ad      	ldr	r5, [r5, #24]
 80110d4:	e7e5      	b.n	80110a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80110d6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80110da:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80110de:	4290      	cmp	r0, r2
 80110e0:	4607      	mov	r7, r0
 80110e2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80110e6:	460e      	mov	r6, r1
 80110e8:	bfa8      	it	ge
 80110ea:	4617      	movge	r7, r2
 80110ec:	4299      	cmp	r1, r3
 80110ee:	4472      	add	r2, lr
 80110f0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80110f4:	bfa8      	it	ge
 80110f6:	461e      	movge	r6, r3
 80110f8:	4440      	add	r0, r8
 80110fa:	4471      	add	r1, lr
 80110fc:	4463      	add	r3, ip
 80110fe:	b200      	sxth	r0, r0
 8011100:	8027      	strh	r7, [r4, #0]
 8011102:	b212      	sxth	r2, r2
 8011104:	8066      	strh	r6, [r4, #2]
 8011106:	b209      	sxth	r1, r1
 8011108:	b21b      	sxth	r3, r3
 801110a:	4290      	cmp	r0, r2
 801110c:	bfac      	ite	ge
 801110e:	ebc7 0200 	rsbge	r2, r7, r0
 8011112:	ebc7 0202 	rsblt	r2, r7, r2
 8011116:	4299      	cmp	r1, r3
 8011118:	bfac      	ite	ge
 801111a:	ebc6 0301 	rsbge	r3, r6, r1
 801111e:	ebc6 0303 	rsblt	r3, r6, r3
 8011122:	80a2      	strh	r2, [r4, #4]
 8011124:	80e3      	strh	r3, [r4, #6]
 8011126:	e7d4      	b.n	80110d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011128:	4620      	mov	r0, r4
 801112a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801112e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801112e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011132:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8011136:	b383      	cbz	r3, 801119a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011138:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801113a:	b374      	cbz	r4, 801119a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801113c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011140:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011144:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011148:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801114c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8011150:	b303      	cbz	r3, 8011194 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011152:	4668      	mov	r0, sp
 8011154:	1d21      	adds	r1, r4, #4
 8011156:	f8ad 5000 	strh.w	r5, [sp]
 801115a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801115e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8011162:	f8ad 8006 	strh.w	r8, [sp, #6]
 8011166:	f7ff ff43 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 801116a:	4668      	mov	r0, sp
 801116c:	f7ff ff83 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011170:	b980      	cbnz	r0, 8011194 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011172:	f8bd 3000 	ldrh.w	r3, [sp]
 8011176:	4669      	mov	r1, sp
 8011178:	88a2      	ldrh	r2, [r4, #4]
 801117a:	4620      	mov	r0, r4
 801117c:	1a9b      	subs	r3, r3, r2
 801117e:	88e2      	ldrh	r2, [r4, #6]
 8011180:	f8ad 3000 	strh.w	r3, [sp]
 8011184:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011188:	1a9b      	subs	r3, r3, r2
 801118a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801118e:	6823      	ldr	r3, [r4, #0]
 8011190:	689b      	ldr	r3, [r3, #8]
 8011192:	4798      	blx	r3
 8011194:	69a4      	ldr	r4, [r4, #24]
 8011196:	2c00      	cmp	r4, #0
 8011198:	d1d8      	bne.n	801114c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801119a:	b002      	add	sp, #8
 801119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080111a0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80111a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111a2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80111a6:	460d      	mov	r5, r1
 80111a8:	4616      	mov	r6, r2
 80111aa:	b323      	cbz	r3, 80111f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80111ac:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80111ae:	b314      	cbz	r4, 80111f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80111b0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80111b4:	b1eb      	cbz	r3, 80111f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80111b6:	6828      	ldr	r0, [r5, #0]
 80111b8:	466b      	mov	r3, sp
 80111ba:	6869      	ldr	r1, [r5, #4]
 80111bc:	c303      	stmia	r3!, {r0, r1}
 80111be:	4668      	mov	r0, sp
 80111c0:	1d21      	adds	r1, r4, #4
 80111c2:	f7ff ff15 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 80111c6:	4668      	mov	r0, sp
 80111c8:	f7ff ff55 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 80111cc:	b988      	cbnz	r0, 80111f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80111ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80111d2:	4669      	mov	r1, sp
 80111d4:	88a2      	ldrh	r2, [r4, #4]
 80111d6:	4620      	mov	r0, r4
 80111d8:	1a9b      	subs	r3, r3, r2
 80111da:	88e2      	ldrh	r2, [r4, #6]
 80111dc:	f8ad 3000 	strh.w	r3, [sp]
 80111e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80111e4:	1a9b      	subs	r3, r3, r2
 80111e6:	4632      	mov	r2, r6
 80111e8:	f8ad 3002 	strh.w	r3, [sp, #2]
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111f0:	4798      	blx	r3
 80111f2:	69a4      	ldr	r4, [r4, #24]
 80111f4:	e7db      	b.n	80111ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80111f6:	b002      	add	sp, #8
 80111f8:	bd70      	pop	{r4, r5, r6, pc}

080111fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80111fa:	6803      	ldr	r3, [r0, #0]
 80111fc:	b513      	push	{r0, r1, r4, lr}
 80111fe:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8011202:	2300      	movs	r3, #0
 8011204:	e9cd 3300 	strd	r3, r3, [sp]
 8011208:	466b      	mov	r3, sp
 801120a:	47a0      	blx	r4
 801120c:	b002      	add	sp, #8
 801120e:	bd10      	pop	{r4, pc}

08011210 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8011210:	2301      	movs	r3, #1
 8011212:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8011216:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801121a:	4770      	bx	lr

0801121c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801121c:	2301      	movs	r3, #1
 801121e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8011222:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8011226:	4770      	bx	lr

08011228 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8011228:	6843      	ldr	r3, [r0, #4]
 801122a:	2201      	movs	r2, #1
 801122c:	725a      	strb	r2, [r3, #9]
 801122e:	6840      	ldr	r0, [r0, #4]
 8011230:	6803      	ldr	r3, [r0, #0]
 8011232:	691b      	ldr	r3, [r3, #16]
 8011234:	4718      	bx	r3

08011236 <_ZN8touchgfx3HAL8flushDMAEv>:
 8011236:	6840      	ldr	r0, [r0, #4]
 8011238:	6803      	ldr	r3, [r0, #0]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	4718      	bx	r3

0801123e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801123e:	b530      	push	{r4, r5, lr}
 8011240:	b08b      	sub	sp, #44	@ 0x2c
 8011242:	6804      	ldr	r4, [r0, #0]
 8011244:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8011248:	9509      	str	r5, [sp, #36]	@ 0x24
 801124a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801124e:	9508      	str	r5, [sp, #32]
 8011250:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8011254:	9507      	str	r5, [sp, #28]
 8011256:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 801125a:	9506      	str	r5, [sp, #24]
 801125c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8011260:	9505      	str	r5, [sp, #20]
 8011262:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8011266:	9504      	str	r5, [sp, #16]
 8011268:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 801126c:	9503      	str	r5, [sp, #12]
 801126e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8011272:	9502      	str	r5, [sp, #8]
 8011274:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8011278:	e9cd 3500 	strd	r3, r5, [sp]
 801127c:	4613      	mov	r3, r2
 801127e:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8011280:	2200      	movs	r2, #0
 8011282:	47a0      	blx	r4
 8011284:	b00b      	add	sp, #44	@ 0x2c
 8011286:	bd30      	pop	{r4, r5, pc}

08011288 <_ZN8touchgfx3HAL10beginFrameEv>:
 8011288:	4b04      	ldr	r3, [pc, #16]	@ (801129c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	b123      	cbz	r3, 8011298 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801128e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8011292:	f080 0001 	eor.w	r0, r0, #1
 8011296:	4770      	bx	lr
 8011298:	2001      	movs	r0, #1
 801129a:	4770      	bx	lr
 801129c:	24026416 	.word	0x24026416

080112a0 <_ZN8touchgfx3HAL8endFrameEv>:
 80112a0:	b510      	push	{r4, lr}
 80112a2:	4604      	mov	r4, r0
 80112a4:	6840      	ldr	r0, [r0, #4]
 80112a6:	6803      	ldr	r3, [r0, #0]
 80112a8:	689b      	ldr	r3, [r3, #8]
 80112aa:	4798      	blx	r3
 80112ac:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80112b0:	b113      	cbz	r3, 80112b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80112b2:	2301      	movs	r3, #1
 80112b4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80112b8:	bd10      	pop	{r4, pc}

080112ba <_ZN8touchgfx3HAL10initializeEv>:
 80112ba:	b510      	push	{r4, lr}
 80112bc:	4604      	mov	r4, r0
 80112be:	f7f1 fd1f 	bl	8002d00 <_ZN8touchgfx10OSWrappers10initializeEv>
 80112c2:	f7f0 fd75 	bl	8001db0 <_ZN8touchgfx4GPIO4initEv>
 80112c6:	6860      	ldr	r0, [r4, #4]
 80112c8:	6803      	ldr	r3, [r0, #0]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	4798      	blx	r3
 80112ce:	68e0      	ldr	r0, [r4, #12]
 80112d0:	6803      	ldr	r3, [r0, #0]
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	4798      	blx	r3
 80112d6:	6823      	ldr	r3, [r4, #0]
 80112d8:	4620      	mov	r0, r4
 80112da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112e0:	4718      	bx	r3
	...

080112e4 <_ZN8touchgfx3HAL4tickEv>:
 80112e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80112e6:	6803      	ldr	r3, [r0, #0]
 80112e8:	4604      	mov	r4, r0
 80112ea:	4d5b      	ldr	r5, [pc, #364]	@ (8011458 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80112ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80112f0:	4798      	blx	r3
 80112f2:	2800      	cmp	r0, #0
 80112f4:	f000 8095 	beq.w	8011422 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80112f8:	2001      	movs	r0, #1
 80112fa:	2600      	movs	r6, #0
 80112fc:	f7f0 fcbe 	bl	8001c7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011300:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8011304:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8011308:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801130c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8011310:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8011314:	b133      	cbz	r3, 8011324 <_ZN8touchgfx3HAL4tickEv+0x40>
 8011316:	6823      	ldr	r3, [r4, #0]
 8011318:	4620      	mov	r0, r4
 801131a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801131e:	4798      	blx	r3
 8011320:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8011324:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8011328:	2601      	movs	r6, #1
 801132a:	6862      	ldr	r2, [r4, #4]
 801132c:	f083 0301 	eor.w	r3, r3, #1
 8011330:	702e      	strb	r6, [r5, #0]
 8011332:	7253      	strb	r3, [r2, #9]
 8011334:	f005 fd9e 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 8011338:	6803      	ldr	r3, [r0, #0]
 801133a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801133c:	4798      	blx	r3
 801133e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8011342:	b90b      	cbnz	r3, 8011348 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011344:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8011348:	f005 fd94 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 801134c:	6803      	ldr	r3, [r0, #0]
 801134e:	695b      	ldr	r3, [r3, #20]
 8011350:	4798      	blx	r3
 8011352:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8011354:	6803      	ldr	r3, [r0, #0]
 8011356:	691b      	ldr	r3, [r3, #16]
 8011358:	4798      	blx	r3
 801135a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801135e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8011362:	3b01      	subs	r3, #1
 8011364:	b2db      	uxtb	r3, r3
 8011366:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801136a:	b10a      	cbz	r2, 8011370 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801136c:	2b00      	cmp	r3, #0
 801136e:	d1eb      	bne.n	8011348 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011370:	4a3a      	ldr	r2, [pc, #232]	@ (801145c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8011372:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8011376:	7813      	ldrb	r3, [r2, #0]
 8011378:	3301      	adds	r3, #1
 801137a:	b25b      	sxtb	r3, r3
 801137c:	4299      	cmp	r1, r3
 801137e:	7013      	strb	r3, [r2, #0]
 8011380:	dc10      	bgt.n	80113a4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011382:	2300      	movs	r3, #0
 8011384:	68e0      	ldr	r0, [r4, #12]
 8011386:	a902      	add	r1, sp, #8
 8011388:	7013      	strb	r3, [r2, #0]
 801138a:	aa03      	add	r2, sp, #12
 801138c:	6803      	ldr	r3, [r0, #0]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	4798      	blx	r3
 8011392:	6823      	ldr	r3, [r4, #0]
 8011394:	2800      	cmp	r0, #0
 8011396:	d050      	beq.n	801143a <_ZN8touchgfx3HAL4tickEv+0x156>
 8011398:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801139c:	4620      	mov	r0, r4
 801139e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80113a2:	4798      	blx	r3
 80113a4:	2300      	movs	r3, #0
 80113a6:	6960      	ldr	r0, [r4, #20]
 80113a8:	f88d 3007 	strb.w	r3, [sp, #7]
 80113ac:	b158      	cbz	r0, 80113c6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80113ae:	6803      	ldr	r3, [r0, #0]
 80113b0:	f10d 0107 	add.w	r1, sp, #7
 80113b4:	68db      	ldr	r3, [r3, #12]
 80113b6:	4798      	blx	r3
 80113b8:	b128      	cbz	r0, 80113c6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80113ba:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80113bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80113c0:	6803      	ldr	r3, [r0, #0]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	4798      	blx	r3
 80113c6:	f104 001c 	add.w	r0, r4, #28
 80113ca:	f013 fabb 	bl	8024944 <_ZN8touchgfx8Gestures4tickEv>
 80113ce:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80113d2:	b30b      	cbz	r3, 8011418 <_ZN8touchgfx3HAL4tickEv+0x134>
 80113d4:	6920      	ldr	r0, [r4, #16]
 80113d6:	6803      	ldr	r3, [r0, #0]
 80113d8:	691b      	ldr	r3, [r3, #16]
 80113da:	4798      	blx	r3
 80113dc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80113de:	4606      	mov	r6, r0
 80113e0:	b903      	cbnz	r3, 80113e4 <_ZN8touchgfx3HAL4tickEv+0x100>
 80113e2:	6760      	str	r0, [r4, #116]	@ 0x74
 80113e4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80113e6:	4a1e      	ldr	r2, [pc, #120]	@ (8011460 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80113e8:	1af3      	subs	r3, r6, r3
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d914      	bls.n	8011418 <_ZN8touchgfx3HAL4tickEv+0x134>
 80113ee:	6920      	ldr	r0, [r4, #16]
 80113f0:	6803      	ldr	r3, [r0, #0]
 80113f2:	699b      	ldr	r3, [r3, #24]
 80113f4:	4798      	blx	r3
 80113f6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80113f8:	2264      	movs	r2, #100	@ 0x64
 80113fa:	1af3      	subs	r3, r6, r3
 80113fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011400:	fbb0 f0f3 	udiv	r0, r0, r3
 8011404:	2800      	cmp	r0, #0
 8011406:	dc1d      	bgt.n	8011444 <_ZN8touchgfx3HAL4tickEv+0x160>
 8011408:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 801140c:	6920      	ldr	r0, [r4, #16]
 801140e:	2100      	movs	r1, #0
 8011410:	6803      	ldr	r3, [r0, #0]
 8011412:	69db      	ldr	r3, [r3, #28]
 8011414:	4798      	blx	r3
 8011416:	6766      	str	r6, [r4, #116]	@ 0x74
 8011418:	f005 fd2c 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 801141c:	6803      	ldr	r3, [r0, #0]
 801141e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011420:	4798      	blx	r3
 8011422:	6823      	ldr	r3, [r4, #0]
 8011424:	4620      	mov	r0, r4
 8011426:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801142a:	4798      	blx	r3
 801142c:	2001      	movs	r0, #1
 801142e:	f7f0 fc55 	bl	8001cdc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011432:	2300      	movs	r3, #0
 8011434:	702b      	strb	r3, [r5, #0]
 8011436:	b004      	add	sp, #16
 8011438:	bd70      	pop	{r4, r5, r6, pc}
 801143a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801143e:	4620      	mov	r0, r4
 8011440:	4798      	blx	r3
 8011442:	e7af      	b.n	80113a4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011444:	2863      	cmp	r0, #99	@ 0x63
 8011446:	bfcb      	itete	gt
 8011448:	2300      	movgt	r3, #0
 801144a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801144e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8011452:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8011456:	e7d9      	b.n	801140c <_ZN8touchgfx3HAL4tickEv+0x128>
 8011458:	2402641c 	.word	0x2402641c
 801145c:	2402641d 	.word	0x2402641d
 8011460:	05f5e100 	.word	0x05f5e100

08011464 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8011464:	b510      	push	{r4, lr}
 8011466:	4604      	mov	r4, r0
 8011468:	f7f1 fc7a 	bl	8002d60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801146c:	2200      	movs	r2, #0
 801146e:	6863      	ldr	r3, [r4, #4]
 8011470:	729a      	strb	r2, [r3, #10]
 8011472:	bd10      	pop	{r4, pc}

08011474 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8011474:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8011476:	301c      	adds	r0, #28
 8011478:	f013 ba62 	b.w	8024940 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801147c <_ZN8touchgfx3HAL5touchEll>:
 801147c:	b530      	push	{r4, r5, lr}
 801147e:	b087      	sub	sp, #28
 8011480:	4604      	mov	r4, r0
 8011482:	a804      	add	r0, sp, #16
 8011484:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8011488:	f005 fadc 	bl	8016a44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801148c:	9b04      	ldr	r3, [sp, #16]
 801148e:	a906      	add	r1, sp, #24
 8011490:	a803      	add	r0, sp, #12
 8011492:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011496:	9b05      	ldr	r3, [sp, #20]
 8011498:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801149c:	f005 fb24 	bl	8016ae8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80114a0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80114a4:	f104 001c 	add.w	r0, r4, #28
 80114a8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80114ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80114b0:	b189      	cbz	r1, 80114d6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80114b2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	4613      	mov	r3, r2
 80114ba:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80114be:	462a      	mov	r2, r5
 80114c0:	f013 fa4e 	bl	8024960 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80114c4:	b128      	cbz	r0, 80114d2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80114c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80114ca:	6623      	str	r3, [r4, #96]	@ 0x60
 80114cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80114d0:	6663      	str	r3, [r4, #100]	@ 0x64
 80114d2:	b007      	add	sp, #28
 80114d4:	bd30      	pop	{r4, r5, pc}
 80114d6:	f013 fa83 	bl	80249e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80114da:	2301      	movs	r3, #1
 80114dc:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80114e0:	e7f1      	b.n	80114c6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080114e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80114e2:	b510      	push	{r4, lr}
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d046      	beq.n	8011576 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80114e8:	ea81 0002 	eor.w	r0, r1, r2
 80114ec:	07c4      	lsls	r4, r0, #31
 80114ee:	d508      	bpl.n	8011502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80114f0:	440b      	add	r3, r1
 80114f2:	3a01      	subs	r2, #1
 80114f4:	428b      	cmp	r3, r1
 80114f6:	d93e      	bls.n	8011576 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80114f8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80114fc:	f801 0b01 	strb.w	r0, [r1], #1
 8011500:	e7f8      	b.n	80114f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8011502:	07d0      	lsls	r0, r2, #31
 8011504:	bf42      	ittt	mi
 8011506:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801150a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801150e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8011512:	2b01      	cmp	r3, #1
 8011514:	d911      	bls.n	801153a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8011516:	ea81 0402 	eor.w	r4, r1, r2
 801151a:	4610      	mov	r0, r2
 801151c:	07a4      	lsls	r4, r4, #30
 801151e:	d022      	beq.n	8011566 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8011520:	f023 0401 	bic.w	r4, r3, #1
 8011524:	440c      	add	r4, r1
 8011526:	428c      	cmp	r4, r1
 8011528:	4602      	mov	r2, r0
 801152a:	d904      	bls.n	8011536 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801152c:	8812      	ldrh	r2, [r2, #0]
 801152e:	3002      	adds	r0, #2
 8011530:	f821 2b02 	strh.w	r2, [r1], #2
 8011534:	e7f7      	b.n	8011526 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8011536:	f003 0301 	and.w	r3, r3, #1
 801153a:	f023 0003 	bic.w	r0, r3, #3
 801153e:	4408      	add	r0, r1
 8011540:	4288      	cmp	r0, r1
 8011542:	4614      	mov	r4, r2
 8011544:	d904      	bls.n	8011550 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8011546:	6824      	ldr	r4, [r4, #0]
 8011548:	3204      	adds	r2, #4
 801154a:	f841 4b04 	str.w	r4, [r1], #4
 801154e:	e7f7      	b.n	8011540 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8011550:	f003 0303 	and.w	r3, r3, #3
 8011554:	3a01      	subs	r2, #1
 8011556:	440b      	add	r3, r1
 8011558:	428b      	cmp	r3, r1
 801155a:	d90c      	bls.n	8011576 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801155c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011560:	f801 0b01 	strb.w	r0, [r1], #1
 8011564:	e7f8      	b.n	8011558 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8011566:	0790      	lsls	r0, r2, #30
 8011568:	d0e7      	beq.n	801153a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801156a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801156e:	3b02      	subs	r3, #2
 8011570:	f821 0b02 	strh.w	r0, [r1], #2
 8011574:	e7e1      	b.n	801153a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8011576:	2001      	movs	r0, #1
 8011578:	bd10      	pop	{r4, pc}

0801157a <_ZN8touchgfx3HAL7noTouchEv>:
 801157a:	b510      	push	{r4, lr}
 801157c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8011580:	4604      	mov	r4, r0
 8011582:	b153      	cbz	r3, 801159a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8011584:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8011588:	2101      	movs	r1, #1
 801158a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 801158e:	301c      	adds	r0, #28
 8011590:	f013 fa26 	bl	80249e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8011594:	2300      	movs	r3, #0
 8011596:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 801159a:	bd10      	pop	{r4, pc}

0801159c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801159c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115a0:	b085      	sub	sp, #20
 80115a2:	4604      	mov	r4, r0
 80115a4:	2000      	movs	r0, #0
 80115a6:	4699      	mov	r9, r3
 80115a8:	ad04      	add	r5, sp, #16
 80115aa:	460f      	mov	r7, r1
 80115ac:	4690      	mov	r8, r2
 80115ae:	f845 0d04 	str.w	r0, [r5, #-4]!
 80115b2:	69a0      	ldr	r0, [r4, #24]
 80115b4:	6806      	ldr	r6, [r0, #0]
 80115b6:	9501      	str	r5, [sp, #4]
 80115b8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80115bc:	9500      	str	r5, [sp, #0]
 80115be:	6835      	ldr	r5, [r6, #0]
 80115c0:	47a8      	blx	r5
 80115c2:	4d10      	ldr	r5, [pc, #64]	@ (8011604 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80115c4:	4606      	mov	r6, r0
 80115c6:	f8a5 9000 	strh.w	r9, [r5]
 80115ca:	f7f2 feb7 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 80115ce:	6803      	ldr	r3, [r0, #0]
 80115d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115d2:	4798      	blx	r3
 80115d4:	b128      	cbz	r0, 80115e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80115d6:	2801      	cmp	r0, #1
 80115d8:	d00b      	beq.n	80115f2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80115da:	4630      	mov	r0, r6
 80115dc:	b005      	add	sp, #20
 80115de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115e2:	882b      	ldrh	r3, [r5, #0]
 80115e4:	fb08 7203 	mla	r2, r8, r3, r7
 80115e8:	9b03      	ldr	r3, [sp, #12]
 80115ea:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80115ee:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80115f0:	e7f3      	b.n	80115da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80115f2:	882a      	ldrh	r2, [r5, #0]
 80115f4:	9b03      	ldr	r3, [sp, #12]
 80115f6:	fb08 7202 	mla	r2, r8, r2, r7
 80115fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80115fe:	1a9a      	subs	r2, r3, r2
 8011600:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8011602:	e7ea      	b.n	80115da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8011604:	24026412 	.word	0x24026412

08011608 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8011608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801160a:	b08b      	sub	sp, #44	@ 0x2c
 801160c:	4617      	mov	r7, r2
 801160e:	4604      	mov	r4, r0
 8011610:	460e      	mov	r6, r1
 8011612:	461d      	mov	r5, r3
 8011614:	f7f2 fe92 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8011618:	6803      	ldr	r3, [r0, #0]
 801161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801161c:	4798      	blx	r3
 801161e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8011622:	9007      	str	r0, [sp, #28]
 8011624:	4631      	mov	r1, r6
 8011626:	6822      	ldr	r2, [r4, #0]
 8011628:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801162c:	4b0c      	ldr	r3, [pc, #48]	@ (8011660 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801162e:	4620      	mov	r0, r4
 8011630:	881b      	ldrh	r3, [r3, #0]
 8011632:	9306      	str	r3, [sp, #24]
 8011634:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8011638:	9305      	str	r3, [sp, #20]
 801163a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 801163e:	9304      	str	r3, [sp, #16]
 8011640:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011644:	9303      	str	r3, [sp, #12]
 8011646:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801164a:	9302      	str	r3, [sp, #8]
 801164c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011650:	e9cd 5300 	strd	r5, r3, [sp]
 8011654:	463b      	mov	r3, r7
 8011656:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8011658:	2200      	movs	r2, #0
 801165a:	47a8      	blx	r5
 801165c:	b00b      	add	sp, #44	@ 0x2c
 801165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011660:	24026412 	.word	0x24026412

08011664 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8011664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011668:	4698      	mov	r8, r3
 801166a:	6803      	ldr	r3, [r0, #0]
 801166c:	b08b      	sub	sp, #44	@ 0x2c
 801166e:	4617      	mov	r7, r2
 8011670:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8011672:	460e      	mov	r6, r1
 8011674:	4b13      	ldr	r3, [pc, #76]	@ (80116c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8011676:	4604      	mov	r4, r0
 8011678:	f8b3 9000 	ldrh.w	r9, [r3]
 801167c:	f7f2 fe5e 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8011680:	6803      	ldr	r3, [r0, #0]
 8011682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011684:	4798      	blx	r3
 8011686:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801168a:	2200      	movs	r2, #0
 801168c:	4631      	mov	r1, r6
 801168e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8011692:	2302      	movs	r3, #2
 8011694:	4620      	mov	r0, r4
 8011696:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801169a:	2301      	movs	r3, #1
 801169c:	9305      	str	r3, [sp, #20]
 801169e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80116a2:	9304      	str	r3, [sp, #16]
 80116a4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80116a8:	9303      	str	r3, [sp, #12]
 80116aa:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80116ae:	9302      	str	r3, [sp, #8]
 80116b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80116b4:	e9cd 8300 	strd	r8, r3, [sp]
 80116b8:	463b      	mov	r3, r7
 80116ba:	47a8      	blx	r5
 80116bc:	b00b      	add	sp, #44	@ 0x2c
 80116be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116c2:	bf00      	nop
 80116c4:	24026412 	.word	0x24026412

080116c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80116c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116cc:	4698      	mov	r8, r3
 80116ce:	6803      	ldr	r3, [r0, #0]
 80116d0:	b087      	sub	sp, #28
 80116d2:	460e      	mov	r6, r1
 80116d4:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 80116d6:	4617      	mov	r7, r2
 80116d8:	4b0f      	ldr	r3, [pc, #60]	@ (8011718 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80116da:	4604      	mov	r4, r0
 80116dc:	f8b3 9000 	ldrh.w	r9, [r3]
 80116e0:	f7f2 fe2c 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 80116e4:	6803      	ldr	r3, [r0, #0]
 80116e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116e8:	4798      	blx	r3
 80116ea:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 80116ee:	463a      	mov	r2, r7
 80116f0:	4631      	mov	r1, r6
 80116f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80116f6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80116fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 80116fe:	4620      	mov	r0, r4
 8011700:	9302      	str	r3, [sp, #8]
 8011702:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8011706:	9301      	str	r3, [sp, #4]
 8011708:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	4643      	mov	r3, r8
 8011710:	47a8      	blx	r5
 8011712:	b007      	add	sp, #28
 8011714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011718:	24026412 	.word	0x24026412

0801171c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011720:	4604      	mov	r4, r0
 8011722:	b08f      	sub	sp, #60	@ 0x3c
 8011724:	4610      	mov	r0, r2
 8011726:	460d      	mov	r5, r1
 8011728:	4691      	mov	r9, r2
 801172a:	461e      	mov	r6, r3
 801172c:	f008 fff4 	bl	801a718 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011730:	2800      	cmp	r0, #0
 8011732:	f000 809d 	beq.w	8011870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8011736:	6823      	ldr	r3, [r4, #0]
 8011738:	4620      	mov	r0, r4
 801173a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80118d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801173e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011744:	4798      	blx	r3
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	4620      	mov	r0, r4
 801174a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80118d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011750:	4798      	blx	r3
 8011752:	f8bb 3000 	ldrh.w	r3, [fp]
 8011756:	4f5c      	ldr	r7, [pc, #368]	@ (80118c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011758:	9301      	str	r3, [sp, #4]
 801175a:	f8ba 3000 	ldrh.w	r3, [sl]
 801175e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8011762:	4640      	mov	r0, r8
 8011764:	9302      	str	r3, [sp, #8]
 8011766:	883b      	ldrh	r3, [r7, #0]
 8011768:	9303      	str	r3, [sp, #12]
 801176a:	4b58      	ldr	r3, [pc, #352]	@ (80118cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801176c:	881a      	ldrh	r2, [r3, #0]
 801176e:	9305      	str	r3, [sp, #20]
 8011770:	9204      	str	r2, [sp, #16]
 8011772:	f009 f921 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011776:	8038      	strh	r0, [r7, #0]
 8011778:	4640      	mov	r0, r8
 801177a:	f009 f951 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801177e:	9b05      	ldr	r3, [sp, #20]
 8011780:	b280      	uxth	r0, r0
 8011782:	8018      	strh	r0, [r3, #0]
 8011784:	4b52      	ldr	r3, [pc, #328]	@ (80118d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d174      	bne.n	8011876 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801178c:	883b      	ldrh	r3, [r7, #0]
 801178e:	f8aa 0000 	strh.w	r0, [sl]
 8011792:	f8ab 3000 	strh.w	r3, [fp]
 8011796:	4648      	mov	r0, r9
 8011798:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 801179c:	f008 ffbc 	bl	801a718 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80117a0:	2200      	movs	r2, #0
 80117a2:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80117a6:	4611      	mov	r1, r2
 80117a8:	4628      	mov	r0, r5
 80117aa:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80117ae:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80117b2:	f7f2 ff6c 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 80117b6:	2301      	movs	r3, #1
 80117b8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80117bc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80117c0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	dd5c      	ble.n	8011882 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80117c8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	dd58      	ble.n	8011882 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80117d0:	462a      	mov	r2, r5
 80117d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80117d4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80117d8:	6851      	ldr	r1, [r2, #4]
 80117da:	c303      	stmia	r3!, {r0, r1}
 80117dc:	4631      	mov	r1, r6
 80117de:	a80a      	add	r0, sp, #40	@ 0x28
 80117e0:	f7ff fc06 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 80117e4:	4b38      	ldr	r3, [pc, #224]	@ (80118c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80117e6:	2100      	movs	r1, #0
 80117e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80117ec:	4b37      	ldr	r3, [pc, #220]	@ (80118cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80117ee:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80117f2:	aa0a      	add	r2, sp, #40	@ 0x28
 80117f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117f8:	910c      	str	r1, [sp, #48]	@ 0x30
 80117fa:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80117fe:	ab08      	add	r3, sp, #32
 8011800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011804:	e883 0003 	stmia.w	r3, {r0, r1}
 8011808:	4618      	mov	r0, r3
 801180a:	a90c      	add	r1, sp, #48	@ 0x30
 801180c:	f7ff fbf0 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 8011810:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011812:	2b00      	cmp	r3, #0
 8011814:	d13c      	bne.n	8011890 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8011816:	2000      	movs	r0, #0
 8011818:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801181c:	2600      	movs	r6, #0
 801181e:	696b      	ldr	r3, [r5, #20]
 8011820:	a908      	add	r1, sp, #32
 8011822:	682a      	ldr	r2, [r5, #0]
 8011824:	4628      	mov	r0, r5
 8011826:	9305      	str	r3, [sp, #20]
 8011828:	616e      	str	r6, [r5, #20]
 801182a:	6892      	ldr	r2, [r2, #8]
 801182c:	4790      	blx	r2
 801182e:	9b05      	ldr	r3, [sp, #20]
 8011830:	4652      	mov	r2, sl
 8011832:	4649      	mov	r1, r9
 8011834:	616b      	str	r3, [r5, #20]
 8011836:	4628      	mov	r0, r5
 8011838:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 801183c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8011840:	f7f2 ff25 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8011844:	9a01      	ldr	r2, [sp, #4]
 8011846:	4b23      	ldr	r3, [pc, #140]	@ (80118d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011848:	4620      	mov	r0, r4
 801184a:	801a      	strh	r2, [r3, #0]
 801184c:	9a02      	ldr	r2, [sp, #8]
 801184e:	4b22      	ldr	r3, [pc, #136]	@ (80118d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011850:	801a      	strh	r2, [r3, #0]
 8011852:	9a03      	ldr	r2, [sp, #12]
 8011854:	4b1c      	ldr	r3, [pc, #112]	@ (80118c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011856:	801a      	strh	r2, [r3, #0]
 8011858:	4b1c      	ldr	r3, [pc, #112]	@ (80118cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801185a:	9a04      	ldr	r2, [sp, #16]
 801185c:	801a      	strh	r2, [r3, #0]
 801185e:	6823      	ldr	r3, [r4, #0]
 8011860:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8011864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011866:	4798      	blx	r3
 8011868:	6823      	ldr	r3, [r4, #0]
 801186a:	4620      	mov	r0, r4
 801186c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801186e:	4798      	blx	r3
 8011870:	b00f      	add	sp, #60	@ 0x3c
 8011872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011876:	883b      	ldrh	r3, [r7, #0]
 8011878:	f8ab 0000 	strh.w	r0, [fp]
 801187c:	f8aa 3000 	strh.w	r3, [sl]
 8011880:	e789      	b.n	8011796 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8011882:	462a      	mov	r2, r5
 8011884:	ab0a      	add	r3, sp, #40	@ 0x28
 8011886:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801188a:	6851      	ldr	r1, [r2, #4]
 801188c:	c303      	stmia	r3!, {r0, r1}
 801188e:	e7a9      	b.n	80117e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011890:	a807      	add	r0, sp, #28
 8011892:	f009 f9cf 	bl	801ac34 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011896:	4606      	mov	r6, r0
 8011898:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801189a:	6803      	ldr	r3, [r0, #0]
 801189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801189e:	4798      	blx	r3
 80118a0:	4286      	cmp	r6, r0
 80118a2:	d1b8      	bne.n	8011816 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80118a4:	f7f2 fd4a 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 80118a8:	6803      	ldr	r3, [r0, #0]
 80118aa:	4606      	mov	r6, r0
 80118ac:	a807      	add	r0, sp, #28
 80118ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118b0:	9305      	str	r3, [sp, #20]
 80118b2:	f009 f9bf 	bl	801ac34 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80118b6:	9b05      	ldr	r3, [sp, #20]
 80118b8:	4601      	mov	r1, r0
 80118ba:	4630      	mov	r0, r6
 80118bc:	4798      	blx	r3
 80118be:	f080 0001 	eor.w	r0, r0, #1
 80118c2:	b2c0      	uxtb	r0, r0
 80118c4:	e7a8      	b.n	8011818 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80118c6:	bf00      	nop
 80118c8:	2402640c 	.word	0x2402640c
 80118cc:	2402640e 	.word	0x2402640e
 80118d0:	24026410 	.word	0x24026410
 80118d4:	24026412 	.word	0x24026412
 80118d8:	24026414 	.word	0x24026414

080118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80118dc:	4b07      	ldr	r3, [pc, #28]	@ (80118fc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80118de:	b510      	push	{r4, lr}
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	4604      	mov	r4, r0
 80118e4:	b13b      	cbz	r3, 80118f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80118e6:	6803      	ldr	r3, [r0, #0]
 80118e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118ea:	4798      	blx	r3
 80118ec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80118ee:	4283      	cmp	r3, r0
 80118f0:	d101      	bne.n	80118f6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80118f2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80118f4:	bd10      	pop	{r4, pc}
 80118f6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80118f8:	e7fc      	b.n	80118f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80118fa:	bf00      	nop
 80118fc:	24026416 	.word	0x24026416

08011900 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8011900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011904:	461d      	mov	r5, r3
 8011906:	b08a      	sub	sp, #40	@ 0x28
 8011908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801190c:	4690      	mov	r8, r2
 801190e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8011912:	2400      	movs	r4, #0
 8011914:	4607      	mov	r7, r0
 8011916:	fb06 8505 	mla	r5, r6, r5, r8
 801191a:	9404      	str	r4, [sp, #16]
 801191c:	f88d 4020 	strb.w	r4, [sp, #32]
 8011920:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011924:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011928:	f8ad 3018 	strh.w	r3, [sp, #24]
 801192c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8011930:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011934:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011938:	f8ad 301c 	strh.w	r3, [sp, #28]
 801193c:	f7ff ffce 	bl	80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011940:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f8ad 601e 	strh.w	r6, [sp, #30]
 801194a:	a901      	add	r1, sp, #4
 801194c:	9505      	str	r5, [sp, #20]
 801194e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011952:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8011956:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801195a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801195e:	6803      	ldr	r3, [r0, #0]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	4798      	blx	r3
 8011964:	b00a      	add	sp, #40	@ 0x28
 8011966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801196a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801196a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801196e:	b08b      	sub	sp, #44	@ 0x2c
 8011970:	2400      	movs	r4, #0
 8011972:	4691      	mov	r9, r2
 8011974:	461d      	mov	r5, r3
 8011976:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801197a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801197e:	4688      	mov	r8, r1
 8011980:	4607      	mov	r7, r0
 8011982:	9404      	str	r4, [sp, #16]
 8011984:	fb06 9505 	mla	r5, r6, r5, r9
 8011988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801198c:	f7ff ffa6 	bl	80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011990:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011994:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801199e:	a901      	add	r1, sp, #4
 80119a0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80119a4:	9505      	str	r5, [sp, #20]
 80119a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80119aa:	f8ad 401c 	strh.w	r4, [sp, #28]
 80119ae:	f8ad 601e 	strh.w	r6, [sp, #30]
 80119b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80119b6:	f8ad 4020 	strh.w	r4, [sp, #32]
 80119ba:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80119be:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80119c2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80119c6:	6803      	ldr	r3, [r0, #0]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	4798      	blx	r3
 80119cc:	b00b      	add	sp, #44	@ 0x2c
 80119ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080119d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80119d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d8:	b08a      	sub	sp, #40	@ 0x28
 80119da:	4698      	mov	r8, r3
 80119dc:	2300      	movs	r3, #0
 80119de:	4606      	mov	r6, r0
 80119e0:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80119e4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80119e8:	2d0b      	cmp	r5, #11
 80119ea:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80119ee:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80119f2:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80119f6:	9304      	str	r3, [sp, #16]
 80119f8:	d137      	bne.n	8011a6a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80119fa:	2380      	movs	r3, #128	@ 0x80
 80119fc:	f88d 0020 	strb.w	r0, [sp, #32]
 8011a00:	4630      	mov	r0, r6
 8011a02:	9203      	str	r2, [sp, #12]
 8011a04:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011a08:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8011a0c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011a10:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011a14:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011a18:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011a1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011a20:	f7ff ff5c 	bl	80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011a24:	2c0b      	cmp	r4, #11
 8011a26:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011a2a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8011a2e:	bf94      	ite	ls
 8011a30:	4b19      	ldrls	r3, [pc, #100]	@ (8011a98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011a32:	2100      	movhi	r1, #0
 8011a34:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011a38:	bf98      	it	ls
 8011a3a:	5d19      	ldrbls	r1, [r3, r4]
 8011a3c:	fb02 8307 	mla	r3, r2, r7, r8
 8011a40:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011a44:	10c9      	asrs	r1, r1, #3
 8011a46:	fb01 0003 	mla	r0, r1, r3, r0
 8011a4a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8011a4e:	a901      	add	r1, sp, #4
 8011a50:	9005      	str	r0, [sp, #20]
 8011a52:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8011a56:	2300      	movs	r3, #0
 8011a58:	6870      	ldr	r0, [r6, #4]
 8011a5a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011a5e:	6803      	ldr	r3, [r0, #0]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	4798      	blx	r3
 8011a64:	b00a      	add	sp, #40	@ 0x28
 8011a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a6a:	2d02      	cmp	r5, #2
 8011a6c:	d109      	bne.n	8011a82 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011a6e:	28ff      	cmp	r0, #255	@ 0xff
 8011a70:	d105      	bne.n	8011a7e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011a72:	f1bc 0f00 	cmp.w	ip, #0
 8011a76:	bf14      	ite	ne
 8011a78:	2340      	movne	r3, #64	@ 0x40
 8011a7a:	2320      	moveq	r3, #32
 8011a7c:	e7be      	b.n	80119fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011a7e:	2340      	movs	r3, #64	@ 0x40
 8011a80:	e7bc      	b.n	80119fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011a82:	28ff      	cmp	r0, #255	@ 0xff
 8011a84:	d105      	bne.n	8011a92 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8011a86:	f1bc 0f00 	cmp.w	ip, #0
 8011a8a:	bf14      	ite	ne
 8011a8c:	2304      	movne	r3, #4
 8011a8e:	2301      	moveq	r3, #1
 8011a90:	e7b4      	b.n	80119fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011a92:	2304      	movs	r3, #4
 8011a94:	e7b2      	b.n	80119fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011a96:	bf00      	nop
 8011a98:	08029ecc 	.word	0x08029ecc

08011a9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa0:	b08b      	sub	sp, #44	@ 0x2c
 8011aa2:	461d      	mov	r5, r3
 8011aa4:	2400      	movs	r4, #0
 8011aa6:	4688      	mov	r8, r1
 8011aa8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8011aac:	4693      	mov	fp, r2
 8011aae:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8011ab2:	4607      	mov	r7, r0
 8011ab4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8011ab8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8011abc:	9404      	str	r4, [sp, #16]
 8011abe:	bf14      	ite	ne
 8011ac0:	2308      	movne	r3, #8
 8011ac2:	2302      	moveq	r3, #2
 8011ac4:	fb05 b50a 	mla	r5, r5, sl, fp
 8011ac8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011acc:	f7ff ff06 	bl	80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011ad0:	2e0b      	cmp	r6, #11
 8011ad2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8011ad6:	a901      	add	r1, sp, #4
 8011ad8:	bf98      	it	ls
 8011ada:	4b13      	ldrls	r3, [pc, #76]	@ (8011b28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8011adc:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011ae0:	bf98      	it	ls
 8011ae2:	5d9c      	ldrbls	r4, [r3, r6]
 8011ae4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8011ae8:	10e4      	asrs	r4, r4, #3
 8011aea:	f8cd 8010 	str.w	r8, [sp, #16]
 8011aee:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011af2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8011af6:	fb04 0405 	mla	r4, r4, r5, r0
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011b00:	2300      	movs	r3, #0
 8011b02:	9405      	str	r4, [sp, #20]
 8011b04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011b08:	f88d 9020 	strb.w	r9, [sp, #32]
 8011b0c:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8011b10:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011b14:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8011b18:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8011b1c:	6803      	ldr	r3, [r0, #0]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	4798      	blx	r3
 8011b22:	b00b      	add	sp, #44	@ 0x2c
 8011b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b28:	08029ecc 	.word	0x08029ecc

08011b2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b30:	461e      	mov	r6, r3
 8011b32:	4b0a      	ldr	r3, [pc, #40]	@ (8011b5c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011b34:	460f      	mov	r7, r1
 8011b36:	4690      	mov	r8, r2
 8011b38:	881d      	ldrh	r5, [r3, #0]
 8011b3a:	f7f2 fbff 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8011b3e:	6803      	ldr	r3, [r0, #0]
 8011b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b42:	4798      	blx	r3
 8011b44:	280b      	cmp	r0, #11
 8011b46:	bf96      	itet	ls
 8011b48:	4b05      	ldrls	r3, [pc, #20]	@ (8011b60 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011b4a:	2400      	movhi	r4, #0
 8011b4c:	5c1c      	ldrbls	r4, [r3, r0]
 8011b4e:	fb08 7005 	mla	r0, r8, r5, r7
 8011b52:	10e4      	asrs	r4, r4, #3
 8011b54:	fb04 6000 	mla	r0, r4, r0, r6
 8011b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b5c:	24026412 	.word	0x24026412
 8011b60:	08029ecc 	.word	0x08029ecc

08011b64 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b66:	b08b      	sub	sp, #44	@ 0x2c
 8011b68:	461f      	mov	r7, r3
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	4616      	mov	r6, r2
 8011b6e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8011b72:	2500      	movs	r5, #0
 8011b74:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011b78:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011b7c:	9504      	str	r5, [sp, #16]
 8011b7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011b82:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8011b86:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011b8a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011b8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011b92:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8011b96:	f88d 3020 	strb.w	r3, [sp, #32]
 8011b9a:	f7ff fe9f 	bl	80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011b9e:	463a      	mov	r2, r7
 8011ba0:	4631      	mov	r1, r6
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f7ff ffc1 	bl	8011b2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011baa:	4b0e      	ldr	r3, [pc, #56]	@ (8011be4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011bac:	9005      	str	r0, [sp, #20]
 8011bae:	881b      	ldrh	r3, [r3, #0]
 8011bb0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011bb4:	f7f2 fbc2 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8011bb8:	6803      	ldr	r3, [r0, #0]
 8011bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bbc:	4798      	blx	r3
 8011bbe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011bc0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8011bc4:	a901      	add	r1, sp, #4
 8011bc6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8011bca:	9304      	str	r3, [sp, #16]
 8011bcc:	6860      	ldr	r0, [r4, #4]
 8011bce:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8011bd2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8011bd6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8011bda:	6803      	ldr	r3, [r0, #0]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	4798      	blx	r3
 8011be0:	b00b      	add	sp, #44	@ 0x2c
 8011be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011be4:	24026412 	.word	0x24026412

08011be8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bea:	b08d      	sub	sp, #52	@ 0x34
 8011bec:	2501      	movs	r5, #1
 8011bee:	4604      	mov	r4, r0
 8011bf0:	466b      	mov	r3, sp
 8011bf2:	9503      	str	r5, [sp, #12]
 8011bf4:	e883 0006 	stmia.w	r3, {r1, r2}
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	f8bd 6000 	ldrh.w	r6, [sp]
 8011bfe:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011c02:	9306      	str	r3, [sp, #24]
 8011c04:	6803      	ldr	r3, [r0, #0]
 8011c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c08:	4798      	blx	r3
 8011c0a:	463a      	mov	r2, r7
 8011c0c:	4631      	mov	r1, r6
 8011c0e:	4603      	mov	r3, r0
 8011c10:	4620      	mov	r0, r4
 8011c12:	f7ff ff8b 	bl	8011b2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011c16:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8011c18:	9004      	str	r0, [sp, #16]
 8011c1a:	9307      	str	r3, [sp, #28]
 8011c1c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011c20:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011c24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011c28:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8011c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8011c68 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011c2e:	881b      	ldrh	r3, [r3, #0]
 8011c30:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8011c34:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8011c38:	f7f2 fb80 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8011c3c:	6803      	ldr	r3, [r0, #0]
 8011c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c40:	4798      	blx	r3
 8011c42:	23ff      	movs	r3, #255	@ 0xff
 8011c44:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8011c48:	a903      	add	r1, sp, #12
 8011c4a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8011c4e:	6860      	ldr	r0, [r4, #4]
 8011c50:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011c54:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8011c58:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8011c5c:	6803      	ldr	r3, [r0, #0]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	4798      	blx	r3
 8011c62:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8011c64:	b00d      	add	sp, #52	@ 0x34
 8011c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c68:	24026412 	.word	0x24026412

08011c6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c70:	b08c      	sub	sp, #48	@ 0x30
 8011c72:	461e      	mov	r6, r3
 8011c74:	2300      	movs	r3, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	466d      	mov	r5, sp
 8011c7a:	9306      	str	r3, [sp, #24]
 8011c7c:	6803      	ldr	r3, [r0, #0]
 8011c7e:	e885 0006 	stmia.w	r5, {r1, r2}
 8011c82:	2501      	movs	r5, #1
 8011c84:	f8bd 7000 	ldrh.w	r7, [sp]
 8011c88:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011c8c:	9503      	str	r5, [sp, #12]
 8011c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c90:	4798      	blx	r3
 8011c92:	4642      	mov	r2, r8
 8011c94:	4639      	mov	r1, r7
 8011c96:	4603      	mov	r3, r0
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f7ff ff47 	bl	8011b2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011c9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011ca2:	9004      	str	r0, [sp, #16]
 8011ca4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011ca8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011cac:	9607      	str	r6, [sp, #28]
 8011cae:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8011cb2:	4b10      	ldr	r3, [pc, #64]	@ (8011cf4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8011cb4:	881b      	ldrh	r3, [r3, #0]
 8011cb6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8011cba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011cbc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8011cc0:	f7f2 fb3c 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8011cc4:	6803      	ldr	r3, [r0, #0]
 8011cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cc8:	4798      	blx	r3
 8011cca:	23ff      	movs	r3, #255	@ 0xff
 8011ccc:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8011cd0:	a903      	add	r1, sp, #12
 8011cd2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8011cd6:	6860      	ldr	r0, [r4, #4]
 8011cd8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011cdc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8011ce0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8011ce4:	6803      	ldr	r3, [r0, #0]
 8011ce6:	685b      	ldr	r3, [r3, #4]
 8011ce8:	4798      	blx	r3
 8011cea:	4630      	mov	r0, r6
 8011cec:	b00c      	add	sp, #48	@ 0x30
 8011cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf2:	bf00      	nop
 8011cf4:	24026412 	.word	0x24026412

08011cf8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8011cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	ac02      	add	r4, sp, #8
 8011d00:	e884 0006 	stmia.w	r4, {r1, r2}
 8011d04:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8011d08:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8011d0c:	f7ff fde6 	bl	80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d10:	4631      	mov	r1, r6
 8011d12:	4603      	mov	r3, r0
 8011d14:	463a      	mov	r2, r7
 8011d16:	4628      	mov	r0, r5
 8011d18:	f7ff ff08 	bl	8011b2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011d1c:	4a05      	ldr	r2, [pc, #20]	@ (8011d34 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8011d1e:	682b      	ldr	r3, [r5, #0]
 8011d20:	8812      	ldrh	r2, [r2, #0]
 8011d22:	9200      	str	r2, [sp, #0]
 8011d24:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8011d26:	4603      	mov	r3, r0
 8011d28:	4628      	mov	r0, r5
 8011d2a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011d2e:	47b0      	blx	r6
 8011d30:	b005      	add	sp, #20
 8011d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d34:	24026412 	.word	0x24026412

08011d38 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8011d38:	b570      	push	{r4, r5, r6, lr}
 8011d3a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8011d3e:	4604      	mov	r4, r0
 8011d40:	b19b      	cbz	r3, 8011d6a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011d42:	2002      	movs	r0, #2
 8011d44:	f7ef fffa 	bl	8001d3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011d48:	2300      	movs	r3, #0
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8011d50:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8011d54:	6823      	ldr	r3, [r4, #0]
 8011d56:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8011d5a:	f7ff fdbf 	bl	80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d5e:	4601      	mov	r1, r0
 8011d60:	4620      	mov	r0, r4
 8011d62:	462b      	mov	r3, r5
 8011d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d68:	4718      	bx	r3
 8011d6a:	bd70      	pop	{r4, r5, r6, pc}

08011d6c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8011d6c:	b570      	push	{r4, r5, r6, lr}
 8011d6e:	4605      	mov	r5, r0
 8011d70:	460c      	mov	r4, r1
 8011d72:	2003      	movs	r0, #3
 8011d74:	b149      	cbz	r1, 8011d8a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8011d76:	f7ef ff81 	bl	8001c7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011d7a:	6928      	ldr	r0, [r5, #16]
 8011d7c:	b168      	cbz	r0, 8011d9a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011d7e:	6803      	ldr	r3, [r0, #0]
 8011d80:	2101      	movs	r1, #1
 8011d82:	695b      	ldr	r3, [r3, #20]
 8011d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d88:	4718      	bx	r3
 8011d8a:	f7ef ffa7 	bl	8001cdc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011d8e:	6928      	ldr	r0, [r5, #16]
 8011d90:	b118      	cbz	r0, 8011d9a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011d92:	6803      	ldr	r3, [r0, #0]
 8011d94:	4621      	mov	r1, r4
 8011d96:	695b      	ldr	r3, [r3, #20]
 8011d98:	e7f4      	b.n	8011d84 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}

08011d9c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8011da2:	4604      	mov	r4, r0
 8011da4:	460d      	mov	r5, r1
 8011da6:	428b      	cmp	r3, r1
 8011da8:	d006      	beq.n	8011db8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8011daa:	6803      	ldr	r3, [r0, #0]
 8011dac:	b929      	cbnz	r1, 8011dba <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8011dae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011db2:	4798      	blx	r3
 8011db4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8011db8:	bd38      	pop	{r3, r4, r5, pc}
 8011dba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8011dbe:	e7f8      	b.n	8011db2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011dc0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8011df8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011dc2:	b510      	push	{r4, lr}
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	4604      	mov	r4, r0
 8011dc8:	b95b      	cbnz	r3, 8011de2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011dca:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8011dce:	2b02      	cmp	r3, #2
 8011dd0:	d007      	beq.n	8011de2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011dd2:	6840      	ldr	r0, [r0, #4]
 8011dd4:	f000 f91a 	bl	801200c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011dd8:	b118      	cbz	r0, 8011de2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011dda:	6862      	ldr	r2, [r4, #4]
 8011ddc:	7a53      	ldrb	r3, [r2, #9]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d0fc      	beq.n	8011ddc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011de2:	f7f0 ffb5 	bl	8002d50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011de6:	4620      	mov	r0, r4
 8011de8:	2100      	movs	r1, #0
 8011dea:	f7ff ffd7 	bl	8011d9c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011dee:	4620      	mov	r0, r4
 8011df0:	f7ff fd74 	bl	80118dc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011df4:	bd10      	pop	{r4, pc}
 8011df6:	bf00      	nop
 8011df8:	24026416 	.word	0x24026416

08011dfc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8011dfc:	b570      	push	{r4, r5, r6, lr}
 8011dfe:	4604      	mov	r4, r0
 8011e00:	6803      	ldr	r3, [r0, #0]
 8011e02:	b919      	cbnz	r1, 8011e0c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8011e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e0a:	4718      	bx	r3
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8011e12:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8011e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e18:	4798      	blx	r3
 8011e1a:	6863      	ldr	r3, [r4, #4]
 8011e1c:	2101      	movs	r1, #1
 8011e1e:	4605      	mov	r5, r0
 8011e20:	4620      	mov	r0, r4
 8011e22:	7299      	strb	r1, [r3, #10]
 8011e24:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8011e28:	f7ff ffb8 	bl	8011d9c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}

08011e30 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011e30:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011e34:	1a13      	subs	r3, r2, r0
 8011e36:	4258      	negs	r0, r3
 8011e38:	4158      	adcs	r0, r3
 8011e3a:	4770      	bx	lr

08011e3c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011e3c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011e40:	1a9b      	subs	r3, r3, r2
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	bfdc      	itt	le
 8011e46:	6882      	ldrle	r2, [r0, #8]
 8011e48:	189b      	addle	r3, r3, r2
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	bfcc      	ite	gt
 8011e4e:	2000      	movgt	r0, #0
 8011e50:	2001      	movle	r0, #1
 8011e52:	4770      	bx	lr

08011e54 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011e54:	6902      	ldr	r2, [r0, #16]
 8011e56:	6843      	ldr	r3, [r0, #4]
 8011e58:	2024      	movs	r0, #36	@ 0x24
 8011e5a:	fb00 3002 	mla	r0, r0, r2, r3
 8011e5e:	4770      	bx	lr

08011e60 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011e60:	6803      	ldr	r3, [r0, #0]
 8011e62:	691b      	ldr	r3, [r3, #16]
 8011e64:	4718      	bx	r3

08011e66 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8011e66:	2301      	movs	r3, #1
 8011e68:	b570      	push	{r4, r5, r6, lr}
 8011e6a:	7203      	strb	r3, [r0, #8]
 8011e6c:	4604      	mov	r4, r0
 8011e6e:	6840      	ldr	r0, [r0, #4]
 8011e70:	6803      	ldr	r3, [r0, #0]
 8011e72:	699b      	ldr	r3, [r3, #24]
 8011e74:	4798      	blx	r3
 8011e76:	6803      	ldr	r3, [r0, #0]
 8011e78:	4605      	mov	r5, r0
 8011e7a:	2b40      	cmp	r3, #64	@ 0x40
 8011e7c:	d00c      	beq.n	8011e98 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011e7e:	d810      	bhi.n	8011ea2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011e80:	2b04      	cmp	r3, #4
 8011e82:	d01d      	beq.n	8011ec0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8011e84:	d804      	bhi.n	8011e90 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d006      	beq.n	8011e98 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011e8a:	2b02      	cmp	r3, #2
 8011e8c:	d02c      	beq.n	8011ee8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}
 8011e90:	2b08      	cmp	r3, #8
 8011e92:	d01d      	beq.n	8011ed0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8011e94:	2b20      	cmp	r3, #32
 8011e96:	d1fa      	bne.n	8011e8e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8011e98:	6823      	ldr	r3, [r4, #0]
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011e9e:	4798      	blx	r3
 8011ea0:	e013      	b.n	8011eca <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ea6:	d0f7      	beq.n	8011e98 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011ea8:	d804      	bhi.n	8011eb4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011eaa:	2b80      	cmp	r3, #128	@ 0x80
 8011eac:	d0f4      	beq.n	8011e98 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011eb2:	e7f0      	b.n	8011e96 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8011eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011eb8:	d0ee      	beq.n	8011e98 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011ebe:	e7e5      	b.n	8011e8c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8011ec0:	6823      	ldr	r3, [r4, #0]
 8011ec2:	7f01      	ldrb	r1, [r0, #28]
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ec8:	4798      	blx	r3
 8011eca:	6823      	ldr	r3, [r4, #0]
 8011ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ece:	e006      	b.n	8011ede <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8011ed0:	6823      	ldr	r3, [r4, #0]
 8011ed2:	7f01      	ldrb	r1, [r0, #28]
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ed8:	4798      	blx	r3
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ee6:	4718      	bx	r3
 8011ee8:	6823      	ldr	r3, [r4, #0]
 8011eea:	4620      	mov	r0, r4
 8011eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011eee:	4798      	blx	r3
 8011ef0:	e7f3      	b.n	8011eda <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08011ef2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8011ef2:	4770      	bx	lr

08011ef4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011ef4:	4770      	bx	lr

08011ef6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8011ef6:	4770      	bx	lr

08011ef8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011ef8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8011efc:	b510      	push	{r4, lr}
 8011efe:	1ad2      	subs	r2, r2, r3
 8011f00:	2a00      	cmp	r2, #0
 8011f02:	bfdc      	itt	le
 8011f04:	6884      	ldrle	r4, [r0, #8]
 8011f06:	1912      	addle	r2, r2, r4
 8011f08:	2a01      	cmp	r2, #1
 8011f0a:	dd16      	ble.n	8011f3a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011f0c:	6842      	ldr	r2, [r0, #4]
 8011f0e:	2424      	movs	r4, #36	@ 0x24
 8011f10:	fb04 2303 	mla	r3, r4, r3, r2
 8011f14:	f101 0220 	add.w	r2, r1, #32
 8011f18:	f851 4b04 	ldr.w	r4, [r1], #4
 8011f1c:	4291      	cmp	r1, r2
 8011f1e:	f843 4b04 	str.w	r4, [r3], #4
 8011f22:	d1f9      	bne.n	8011f18 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011f24:	780a      	ldrb	r2, [r1, #0]
 8011f26:	701a      	strb	r2, [r3, #0]
 8011f28:	68c3      	ldr	r3, [r0, #12]
 8011f2a:	6882      	ldr	r2, [r0, #8]
 8011f2c:	f3bf 8f5b 	dmb	ish
 8011f30:	3301      	adds	r3, #1
 8011f32:	429a      	cmp	r2, r3
 8011f34:	bfd8      	it	le
 8011f36:	1a9b      	suble	r3, r3, r2
 8011f38:	60c3      	str	r3, [r0, #12]
 8011f3a:	bd10      	pop	{r4, pc}

08011f3c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011f3c:	6903      	ldr	r3, [r0, #16]
 8011f3e:	6882      	ldr	r2, [r0, #8]
 8011f40:	f3bf 8f5b 	dmb	ish
 8011f44:	3301      	adds	r3, #1
 8011f46:	429a      	cmp	r2, r3
 8011f48:	bfd8      	it	le
 8011f4a:	1a9b      	suble	r3, r3, r2
 8011f4c:	6103      	str	r3, [r0, #16]
 8011f4e:	4770      	bx	lr

08011f50 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011f50:	b570      	push	{r4, r5, r6, lr}
 8011f52:	4604      	mov	r4, r0
 8011f54:	460e      	mov	r6, r1
 8011f56:	6860      	ldr	r0, [r4, #4]
 8011f58:	6803      	ldr	r3, [r0, #0]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	4798      	blx	r3
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d1f9      	bne.n	8011f56 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011f62:	4d0d      	ldr	r5, [pc, #52]	@ (8011f98 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011f64:	6828      	ldr	r0, [r5, #0]
 8011f66:	6803      	ldr	r3, [r0, #0]
 8011f68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011f6a:	4798      	blx	r3
 8011f6c:	f7f0 fefe 	bl	8002d6c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011f70:	6828      	ldr	r0, [r5, #0]
 8011f72:	2101      	movs	r1, #1
 8011f74:	f7ff ff12 	bl	8011d9c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011f78:	6860      	ldr	r0, [r4, #4]
 8011f7a:	4631      	mov	r1, r6
 8011f7c:	6803      	ldr	r3, [r0, #0]
 8011f7e:	689b      	ldr	r3, [r3, #8]
 8011f80:	4798      	blx	r3
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	4620      	mov	r0, r4
 8011f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f88:	4798      	blx	r3
 8011f8a:	6828      	ldr	r0, [r5, #0]
 8011f8c:	6803      	ldr	r3, [r0, #0]
 8011f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f94:	4718      	bx	r3
 8011f96:	bf00      	nop
 8011f98:	24026418 	.word	0x24026418

08011f9c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011f9c:	b508      	push	{r3, lr}
 8011f9e:	f7f0 fed7 	bl	8002d50 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011fa6:	f7f0 bedb 	b.w	8002d60 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011faa <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011faa:	b510      	push	{r4, lr}
 8011fac:	4604      	mov	r4, r0
 8011fae:	2114      	movs	r1, #20
 8011fb0:	f013 fac5 	bl	802553e <_ZdlPvj>
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	bd10      	pop	{r4, pc}

08011fb8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011fb8:	b570      	push	{r4, r5, r6, lr}
 8011fba:	4604      	mov	r4, r0
 8011fbc:	6840      	ldr	r0, [r0, #4]
 8011fbe:	6803      	ldr	r3, [r0, #0]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4798      	blx	r3
 8011fc4:	4605      	mov	r5, r0
 8011fc6:	b930      	cbnz	r0, 8011fd6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011fc8:	7a23      	ldrb	r3, [r4, #8]
 8011fca:	b123      	cbz	r3, 8011fd6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011fcc:	6860      	ldr	r0, [r4, #4]
 8011fce:	6803      	ldr	r3, [r0, #0]
 8011fd0:	695b      	ldr	r3, [r3, #20]
 8011fd2:	4798      	blx	r3
 8011fd4:	7225      	strb	r5, [r4, #8]
 8011fd6:	6860      	ldr	r0, [r4, #4]
 8011fd8:	6803      	ldr	r3, [r0, #0]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4798      	blx	r3
 8011fde:	b928      	cbnz	r0, 8011fec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011fe0:	6823      	ldr	r3, [r4, #0]
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fea:	4718      	bx	r3
 8011fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ff0:	f7f0 bec4 	b.w	8002d7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08011ff4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8011ff4:	b510      	push	{r4, lr}
 8011ff6:	6082      	str	r2, [r0, #8]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	4c03      	ldr	r4, [pc, #12]	@ (8012008 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8011ffc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012000:	e9c0 4100 	strd	r4, r1, [r0]
 8012004:	bd10      	pop	{r4, pc}
 8012006:	bf00      	nop
 8012008:	08029ee0 	.word	0x08029ee0

0801200c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801200c:	6840      	ldr	r0, [r0, #4]
 801200e:	6803      	ldr	r3, [r0, #0]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4718      	bx	r3

08012014 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8012014:	2300      	movs	r3, #0
 8012016:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8012018:	8503      	strh	r3, [r0, #40]	@ 0x28
 801201a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 801201c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801201e:	6980      	ldr	r0, [r0, #24]
 8012020:	b110      	cbz	r0, 8012028 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8012022:	6803      	ldr	r3, [r0, #0]
 8012024:	691b      	ldr	r3, [r3, #16]
 8012026:	4718      	bx	r3
 8012028:	4770      	bx	lr

0801202a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801202a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 801202e:	4770      	bx	lr

08012030 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	0e0b      	lsrs	r3, r1, #24
 8012034:	4604      	mov	r4, r0
 8012036:	460d      	mov	r5, r1
 8012038:	7783      	strb	r3, [r0, #30]
 801203a:	6803      	ldr	r3, [r0, #0]
 801203c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801203e:	4798      	blx	r3
 8012040:	6803      	ldr	r3, [r0, #0]
 8012042:	4629      	mov	r1, r5
 8012044:	689b      	ldr	r3, [r3, #8]
 8012046:	4798      	blx	r3
 8012048:	6823      	ldr	r3, [r4, #0]
 801204a:	4620      	mov	r0, r4
 801204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801204e:	4798      	blx	r3
 8012050:	61a0      	str	r0, [r4, #24]
 8012052:	bd38      	pop	{r3, r4, r5, pc}

08012054 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8012054:	7741      	strb	r1, [r0, #29]
 8012056:	4770      	bx	lr

08012058 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8012058:	b530      	push	{r4, r5, lr}
 801205a:	460d      	mov	r5, r1
 801205c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8012060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	6023      	str	r3, [r4, #0]
 801206c:	bd30      	pop	{r4, r5, pc}

0801206e <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 801206e:	b538      	push	{r3, r4, r5, lr}
 8012070:	4604      	mov	r4, r0
 8012072:	1d03      	adds	r3, r0, #4
 8012074:	6808      	ldr	r0, [r1, #0]
 8012076:	2500      	movs	r5, #0
 8012078:	6849      	ldr	r1, [r1, #4]
 801207a:	c303      	stmia	r3!, {r0, r1}
 801207c:	6813      	ldr	r3, [r2, #0]
 801207e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8012082:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8012086:	6853      	ldr	r3, [r2, #4]
 8012088:	61a5      	str	r5, [r4, #24]
 801208a:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 801208e:	f006 fabb 	bl	8018608 <_ZN8touchgfx9Matrix3x35resetEv>
 8012092:	23ff      	movs	r3, #255	@ 0xff
 8012094:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8012098:	7763      	strb	r3, [r4, #29]
 801209a:	77a3      	strb	r3, [r4, #30]
 801209c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80120a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80120a2:	2301      	movs	r3, #1
 80120a4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80120a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080120ac <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 80120ac:	ee70 7a41 	vsub.f32	s15, s0, s2
 80120b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80120b8:	4605      	mov	r5, r0
 80120ba:	ed2d 8b0a 	vpush	{d8-d12}
 80120be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c2:	b086      	sub	sp, #24
 80120c4:	eeb0 ba40 	vmov.f32	s22, s0
 80120c8:	6802      	ldr	r2, [r0, #0]
 80120ca:	eef0 ba60 	vmov.f32	s23, s1
 80120ce:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 80120d2:	eef0 aa41 	vmov.f32	s21, s2
 80120d6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80120d8:	eeb0 aa61 	vmov.f32	s20, s3
 80120dc:	eeb0 ca42 	vmov.f32	s24, s4
 80120e0:	eef0 ca62 	vmov.f32	s25, s5
 80120e4:	d112      	bne.n	801210c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80120e6:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80120ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80120ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f2:	d10b      	bne.n	801210c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80120f4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80120f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80120fa:	3901      	subs	r1, #1
 80120fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8012100:	b006      	add	sp, #24
 8012102:	ecbd 8b0a 	vpop	{d8-d12}
 8012106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801210a:	4710      	bx	r2
 801210c:	23ff      	movs	r3, #255	@ 0xff
 801210e:	4628      	mov	r0, r5
 8012110:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8012114:	77ab      	strb	r3, [r5, #30]
 8012116:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8012118:	4798      	blx	r3
 801211a:	eeb0 0a4b 	vmov.f32	s0, s22
 801211e:	eef0 0a6b 	vmov.f32	s1, s23
 8012122:	4604      	mov	r4, r0
 8012124:	4640      	mov	r0, r8
 8012126:	f006 fb1e 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801212a:	eef0 8a40 	vmov.f32	s17, s0
 801212e:	ed8d 0a00 	vstr	s0, [sp]
 8012132:	eeb0 0a6a 	vmov.f32	s0, s21
 8012136:	eef0 9a60 	vmov.f32	s19, s1
 801213a:	edcd 0a01 	vstr	s1, [sp, #4]
 801213e:	4640      	mov	r0, r8
 8012140:	eef0 0a4a 	vmov.f32	s1, s20
 8012144:	f006 fb0f 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012148:	eef4 8a40 	vcmp.f32	s17, s0
 801214c:	eeb0 8a40 	vmov.f32	s16, s0
 8012150:	ed8d 0a02 	vstr	s0, [sp, #8]
 8012154:	eeb0 9a60 	vmov.f32	s18, s1
 8012158:	edcd 0a03 	vstr	s1, [sp, #12]
 801215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012160:	eef4 9a60 	vcmp.f32	s19, s1
 8012164:	bf0c      	ite	eq
 8012166:	2301      	moveq	r3, #1
 8012168:	2300      	movne	r3, #0
 801216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216e:	eef4 8a40 	vcmp.f32	s17, s0
 8012172:	7463      	strb	r3, [r4, #17]
 8012174:	bf0c      	ite	eq
 8012176:	2301      	moveq	r3, #1
 8012178:	2300      	movne	r3, #0
 801217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217e:	74a3      	strb	r3, [r4, #18]
 8012180:	d024      	beq.n	80121cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8012182:	eef4 9a60 	vcmp.f32	s19, s1
 8012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218a:	d01f      	beq.n	80121cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801218c:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8012190:	4640      	mov	r0, r8
 8012192:	ee7a aacb 	vsub.f32	s21, s21, s22
 8012196:	eeb0 0a4b 	vmov.f32	s0, s22
 801219a:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 801219e:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 80121a2:	eef0 0a6b 	vmov.f32	s1, s23
 80121a6:	eea7 0acc 	vfms.f32	s0, s15, s24
 80121aa:	eeec 0a87 	vfma.f32	s1, s25, s14
 80121ae:	f006 fada 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80121b2:	ed8d 0a04 	vstr	s0, [sp, #16]
 80121b6:	ee30 0a68 	vsub.f32	s0, s0, s17
 80121ba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80121be:	edcd 0a05 	vstr	s1, [sp, #20]
 80121c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c6:	d121      	bne.n	801220c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 80121c8:	2301      	movs	r3, #1
 80121ca:	74a3      	strb	r3, [r4, #18]
 80121cc:	7c63      	ldrb	r3, [r4, #17]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d051      	beq.n	8012276 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 80121d2:	ee39 7a69 	vsub.f32	s14, s18, s19
 80121d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80122cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80121da:	eef4 9ac9 	vcmpe.f32	s19, s18
 80121de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80121e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e6:	edc4 7a08 	vstr	s15, [r4, #32]
 80121ea:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80121ee:	ee17 3a90 	vmov	r3, s15
 80121f2:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 80121f6:	b21a      	sxth	r2, r3
 80121f8:	ee17 3a90 	vmov	r3, s15
 80121fc:	bf48      	it	mi
 80121fe:	8122      	strhmi	r2, [r4, #8]
 8012200:	b21b      	sxth	r3, r3
 8012202:	bf56      	itet	pl
 8012204:	80e2      	strhpl	r2, [r4, #6]
 8012206:	80e3      	strhmi	r3, [r4, #6]
 8012208:	8123      	strhpl	r3, [r4, #8]
 801220a:	e02c      	b.n	8012266 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801220c:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8012210:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8012214:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012218:	edc4 7a05 	vstr	s15, [r4, #20]
 801221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012220:	d102      	bne.n	8012228 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8012222:	2301      	movs	r3, #1
 8012224:	7463      	strb	r3, [r4, #17]
 8012226:	e7d1      	b.n	80121cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8012228:	eeb0 7a69 	vmov.f32	s14, s19
 801222c:	ee39 9a69 	vsub.f32	s18, s18, s19
 8012230:	ee38 8a68 	vsub.f32	s16, s16, s17
 8012234:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8012238:	ed84 7a06 	vstr	s14, [r4, #24]
 801223c:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8012240:	ee38 8a47 	vsub.f32	s16, s16, s14
 8012244:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80122d0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8012248:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801224c:	ed84 8a07 	vstr	s16, [r4, #28]
 8012250:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012258:	edc4 7a08 	vstr	s15, [r4, #32]
 801225c:	d503      	bpl.n	8012266 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801225e:	eeb1 8a48 	vneg.f32	s16, s16
 8012262:	ed84 8a07 	vstr	s16, [r4, #28]
 8012266:	60e7      	str	r7, [r4, #12]
 8012268:	7426      	strb	r6, [r4, #16]
 801226a:	61ac      	str	r4, [r5, #24]
 801226c:	b006      	add	sp, #24
 801226e:	ecbd 8b0a 	vpop	{d8-d12}
 8012272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012276:	7ca3      	ldrb	r3, [r4, #18]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d0f4      	beq.n	8012266 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801227c:	ee38 7a68 	vsub.f32	s14, s16, s17
 8012280:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80122cc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8012284:	eef4 8ac8 	vcmpe.f32	s17, s16
 8012288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012290:	edc4 7a08 	vstr	s15, [r4, #32]
 8012294:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012298:	ee17 3a90 	vmov	r3, s15
 801229c:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80122a0:	b21a      	sxth	r2, r3
 80122a2:	ee17 3a90 	vmov	r3, s15
 80122a6:	bf48      	it	mi
 80122a8:	8122      	strhmi	r2, [r4, #8]
 80122aa:	b21b      	sxth	r3, r3
 80122ac:	bf56      	itet	pl
 80122ae:	80e2      	strhpl	r2, [r4, #6]
 80122b0:	80e3      	strhmi	r3, [r4, #6]
 80122b2:	8123      	strhpl	r3, [r4, #8]
 80122b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80122b8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80122bc:	1a9b      	subs	r3, r3, r2
 80122be:	ee07 3a90 	vmov	s15, r3
 80122c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122c6:	edc4 7a07 	vstr	s15, [r4, #28]
 80122ca:	e7cc      	b.n	8012266 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80122cc:	447ffffe 	.word	0x447ffffe
 80122d0:	44800000 	.word	0x44800000

080122d4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80122d4:	b510      	push	{r4, lr}
 80122d6:	ed2d 8b02 	vpush	{d8}
 80122da:	eef0 8a62 	vmov.f32	s17, s5
 80122de:	2100      	movs	r1, #0
 80122e0:	4604      	mov	r4, r0
 80122e2:	eeb0 8a42 	vmov.f32	s16, s4
 80122e6:	f012 febb 	bl	8025060 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80122ea:	eef0 7a68 	vmov.f32	s15, s17
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	4620      	mov	r0, r4
 80122f2:	689b      	ldr	r3, [r3, #8]
 80122f4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80122f8:	ee17 2a90 	vmov	r2, s15
 80122fc:	eef0 7a48 	vmov.f32	s15, s16
 8012300:	ecbd 8b02 	vpop	{d8}
 8012304:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801230c:	ee17 1a90 	vmov	r1, s15
 8012310:	4718      	bx	r3

08012312 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8012312:	b510      	push	{r4, lr}
 8012314:	ed2d 8b02 	vpush	{d8}
 8012318:	eef0 8a63 	vmov.f32	s17, s7
 801231c:	2100      	movs	r1, #0
 801231e:	4604      	mov	r4, r0
 8012320:	eeb0 8a43 	vmov.f32	s16, s6
 8012324:	f012 ff5e 	bl	80251e4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8012328:	eef0 7a68 	vmov.f32	s15, s17
 801232c:	6823      	ldr	r3, [r4, #0]
 801232e:	4620      	mov	r0, r4
 8012330:	689b      	ldr	r3, [r3, #8]
 8012332:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012336:	ee17 2a90 	vmov	r2, s15
 801233a:	eef0 7a48 	vmov.f32	s15, s16
 801233e:	ecbd 8b02 	vpop	{d8}
 8012342:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801234a:	ee17 1a90 	vmov	r1, s15
 801234e:	4718      	bx	r3

08012350 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8012350:	b513      	push	{r0, r1, r4, lr}
 8012352:	4604      	mov	r4, r0
 8012354:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8012356:	f006 fa06 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801235a:	eef0 7a60 	vmov.f32	s15, s1
 801235e:	4620      	mov	r0, r4
 8012360:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012364:	ee17 2a90 	vmov	r2, s15
 8012368:	eef0 7a40 	vmov.f32	s15, s0
 801236c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012370:	ee17 1a90 	vmov	r1, s15
 8012374:	b002      	add	sp, #8
 8012376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801237a:	f012 bdcb 	b.w	8024f14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801237e:	b513      	push	{r0, r1, r4, lr}
 8012380:	4604      	mov	r4, r0
 8012382:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8012384:	f006 f9ef 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012388:	eef0 7a60 	vmov.f32	s15, s1
 801238c:	4620      	mov	r0, r4
 801238e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012392:	ee17 2a90 	vmov	r2, s15
 8012396:	eef0 7a40 	vmov.f32	s15, s0
 801239a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801239e:	ee17 1a90 	vmov	r1, s15
 80123a2:	b002      	add	sp, #8
 80123a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123a8:	f012 be01 	b.w	8024fae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080123ac <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80123ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ae:	2400      	movs	r4, #0
 80123b0:	9f07      	ldr	r7, [sp, #28]
 80123b2:	f04f 0e01 	mov.w	lr, #1
 80123b6:	4626      	mov	r6, r4
 80123b8:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80123bc:	4463      	add	r3, ip
 80123be:	4563      	cmp	r3, ip
 80123c0:	d02d      	beq.n	801241e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80123c2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80123c6:	2d06      	cmp	r5, #6
 80123c8:	d8f9      	bhi.n	80123be <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80123ca:	fa0e f505 	lsl.w	r5, lr, r5
 80123ce:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80123d2:	d10d      	bne.n	80123f0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80123d4:	f015 0f10 	tst.w	r5, #16
 80123d8:	d117      	bne.n	801240a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80123da:	072d      	lsls	r5, r5, #28
 80123dc:	d5ef      	bpl.n	80123be <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80123de:	3801      	subs	r0, #1
 80123e0:	b91e      	cbnz	r6, 80123ea <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80123e2:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80123e6:	682d      	ldr	r5, [r5, #0]
 80123e8:	600d      	str	r5, [r1, #0]
 80123ea:	b96c      	cbnz	r4, 8012408 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80123ec:	2601      	movs	r6, #1
 80123ee:	e7e6      	b.n	80123be <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80123f0:	b926      	cbnz	r6, 80123fc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 80123f2:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 80123f6:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80123fa:	600b      	str	r3, [r1, #0]
 80123fc:	b924      	cbnz	r4, 8012408 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80123fe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8012402:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012406:	6013      	str	r3, [r2, #0]
 8012408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801240a:	3801      	subs	r0, #1
 801240c:	b91c      	cbnz	r4, 8012416 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801240e:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8012412:	6824      	ldr	r4, [r4, #0]
 8012414:	6014      	str	r4, [r2, #0]
 8012416:	2e00      	cmp	r6, #0
 8012418:	d1f6      	bne.n	8012408 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801241a:	2401      	movs	r4, #1
 801241c:	e7cf      	b.n	80123be <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801241e:	b90e      	cbnz	r6, 8012424 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8012420:	2300      	movs	r3, #0
 8012422:	600b      	str	r3, [r1, #0]
 8012424:	2c00      	cmp	r4, #0
 8012426:	d1ef      	bne.n	8012408 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8012428:	2300      	movs	r3, #0
 801242a:	e7ec      	b.n	8012406 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801242c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801242c:	b538      	push	{r3, r4, r5, lr}
 801242e:	ed2d 8b0a 	vpush	{d8-d12}
 8012432:	eef0 ba40 	vmov.f32	s23, s0
 8012436:	4604      	mov	r4, r0
 8012438:	eeb0 ca60 	vmov.f32	s24, s1
 801243c:	460d      	mov	r5, r1
 801243e:	eef0 aa41 	vmov.f32	s21, s2
 8012442:	eeb0 ba61 	vmov.f32	s22, s3
 8012446:	eeb0 9a42 	vmov.f32	s18, s4
 801244a:	eef0 9a62 	vmov.f32	s19, s5
 801244e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8012452:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8012456:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801245a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801245e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8012462:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8012466:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801246a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801246e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012472:	f013 f88f 	bl	8025594 <sqrtf>
 8012476:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247e:	d12e      	bne.n	80124de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8012480:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8012484:	ee39 7acb 	vsub.f32	s14, s19, s22
 8012488:	eeb0 8a6a 	vmov.f32	s16, s21
 801248c:	eef0 8a4b 	vmov.f32	s17, s22
 8012490:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8012494:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8012498:	eea7 8a0a 	vfma.f32	s16, s14, s20
 801249c:	eee7 8aca 	vfms.f32	s17, s15, s20
 80124a0:	2d02      	cmp	r5, #2
 80124a2:	dc2f      	bgt.n	8012504 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80124a4:	3501      	adds	r5, #1
 80124a6:	eef0 1a4b 	vmov.f32	s3, s22
 80124aa:	eeb0 1a6a 	vmov.f32	s2, s21
 80124ae:	4620      	mov	r0, r4
 80124b0:	4629      	mov	r1, r5
 80124b2:	eef0 2a68 	vmov.f32	s5, s17
 80124b6:	eeb0 2a48 	vmov.f32	s4, s16
 80124ba:	eef0 0a4c 	vmov.f32	s1, s24
 80124be:	eeb0 0a6b 	vmov.f32	s0, s23
 80124c2:	f7ff ffb3 	bl	801242c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80124c6:	eef0 0a68 	vmov.f32	s1, s17
 80124ca:	eeb0 0a48 	vmov.f32	s0, s16
 80124ce:	4620      	mov	r0, r4
 80124d0:	f7ff ff55 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80124d4:	eeb0 ba68 	vmov.f32	s22, s17
 80124d8:	eef0 aa48 	vmov.f32	s21, s16
 80124dc:	e7b9      	b.n	8012452 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80124de:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80124e2:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80124e6:	ee78 8acc 	vsub.f32	s17, s17, s24
 80124ea:	ee28 7a27 	vmul.f32	s14, s16, s15
 80124ee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80124f2:	ee87 8a00 	vdiv.f32	s16, s14, s0
 80124f6:	eec7 8a80 	vdiv.f32	s17, s15, s0
 80124fa:	ee3b 8a88 	vadd.f32	s16, s23, s16
 80124fe:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8012502:	e7cd      	b.n	80124a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8012504:	eef0 0a68 	vmov.f32	s1, s17
 8012508:	4620      	mov	r0, r4
 801250a:	eeb0 0a48 	vmov.f32	s0, s16
 801250e:	f7ff ff36 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012512:	ecbd 8b0a 	vpop	{d8-d12}
 8012516:	bd38      	pop	{r3, r4, r5, pc}

08012518 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8012518:	b510      	push	{r4, lr}
 801251a:	ed2d 8b0a 	vpush	{d8-d12}
 801251e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8012522:	4604      	mov	r4, r0
 8012524:	eeb0 ca40 	vmov.f32	s24, s0
 8012528:	2b02      	cmp	r3, #2
 801252a:	eeb0 9a60 	vmov.f32	s18, s1
 801252e:	eef0 9a41 	vmov.f32	s19, s2
 8012532:	eef0 8a61 	vmov.f32	s17, s3
 8012536:	eeb0 ba42 	vmov.f32	s22, s4
 801253a:	eef0 ba62 	vmov.f32	s23, s5
 801253e:	eeb0 aa43 	vmov.f32	s20, s6
 8012542:	eef0 aa63 	vmov.f32	s21, s7
 8012546:	eeb0 8a44 	vmov.f32	s16, s8
 801254a:	eef0 ca64 	vmov.f32	s25, s9
 801254e:	d12c      	bne.n	80125aa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8012550:	eef0 0a62 	vmov.f32	s1, s5
 8012554:	eeb0 0a42 	vmov.f32	s0, s4
 8012558:	f7ff ff11 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801255c:	ee79 9acb 	vsub.f32	s19, s19, s22
 8012560:	ee7a caec 	vsub.f32	s25, s21, s25
 8012564:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8012568:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801256c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8012570:	ee28 8a88 	vmul.f32	s16, s17, s16
 8012574:	eef4 9ac8 	vcmpe.f32	s19, s16
 8012578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257c:	db0f      	blt.n	801259e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801257e:	2101      	movs	r1, #1
 8012580:	eef0 2a6a 	vmov.f32	s5, s21
 8012584:	eeb0 2a4a 	vmov.f32	s4, s20
 8012588:	4620      	mov	r0, r4
 801258a:	eef0 1a6b 	vmov.f32	s3, s23
 801258e:	eeb0 1a4b 	vmov.f32	s2, s22
 8012592:	eef0 0a49 	vmov.f32	s1, s18
 8012596:	eeb0 0a4c 	vmov.f32	s0, s24
 801259a:	f7ff ff47 	bl	801242c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801259e:	eef0 0a6a 	vmov.f32	s1, s21
 80125a2:	4620      	mov	r0, r4
 80125a4:	eeb0 0a4a 	vmov.f32	s0, s20
 80125a8:	e035      	b.n	8012616 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d138      	bne.n	8012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80125ae:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80125b2:	ee33 6a48 	vsub.f32	s12, s6, s16
 80125b6:	ee71 7a42 	vsub.f32	s15, s2, s4
 80125ba:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80125be:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80125c2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80125c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80125ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ce:	d027      	beq.n	8012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80125d0:	ee28 8a63 	vnmul.f32	s16, s16, s7
 80125d4:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 80125d8:	eea4 8a83 	vfma.f32	s16, s9, s6
 80125dc:	eee1 8a22 	vfma.f32	s17, s2, s5
 80125e0:	ee68 7a67 	vnmul.f32	s15, s16, s15
 80125e4:	ee28 8a44 	vnmul.f32	s16, s16, s8
 80125e8:	eee6 7a28 	vfma.f32	s15, s12, s17
 80125ec:	eea6 8aa8 	vfma.f32	s16, s13, s17
 80125f0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80125f4:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 80125f8:	eec8 0a07 	vdiv.f32	s1, s16, s14
 80125fc:	ee3c ca40 	vsub.f32	s24, s24, s0
 8012600:	ee39 9a60 	vsub.f32	s18, s18, s1
 8012604:	ee29 9a09 	vmul.f32	s18, s18, s18
 8012608:	eeac 9a0c 	vfma.f32	s18, s24, s24
 801260c:	eef4 7ac9 	vcmpe.f32	s15, s18
 8012610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012614:	db04      	blt.n	8012620 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8012616:	f7ff feb2 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801261a:	ecbd 8b0a 	vpop	{d8-d12}
 801261e:	bd10      	pop	{r4, pc}
 8012620:	eef0 0a6b 	vmov.f32	s1, s23
 8012624:	4620      	mov	r0, r4
 8012626:	eeb0 0a4b 	vmov.f32	s0, s22
 801262a:	f7ff fea8 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801262e:	e7b6      	b.n	801259e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08012630 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8012630:	b510      	push	{r4, lr}
 8012632:	ed2d 8b0c 	vpush	{d8-d13}
 8012636:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801263a:	4604      	mov	r4, r0
 801263c:	eeb0 9a40 	vmov.f32	s18, s0
 8012640:	eef0 9a60 	vmov.f32	s19, s1
 8012644:	eef0 aa41 	vmov.f32	s21, s2
 8012648:	eeb0 ba61 	vmov.f32	s22, s3
 801264c:	b933      	cbnz	r3, 801265c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801264e:	f7ff fe96 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012652:	eef0 0a4b 	vmov.f32	s1, s22
 8012656:	eeb0 0a6a 	vmov.f32	s0, s21
 801265a:	e015      	b.n	8012688 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 801265c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012660:	2b02      	cmp	r3, #2
 8012662:	ee71 8a40 	vsub.f32	s17, s2, s0
 8012666:	ee31 8ae0 	vsub.f32	s16, s3, s1
 801266a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801266e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012672:	d10f      	bne.n	8012694 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8012674:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8012678:	ee30 0a08 	vadd.f32	s0, s0, s16
 801267c:	f7ff fe7f 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012680:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8012684:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8012688:	4620      	mov	r0, r4
 801268a:	f7ff fe78 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801268e:	ecbd 8b0c 	vpop	{d8-d13}
 8012692:	bd10      	pop	{r4, pc}
 8012694:	f7ff fe73 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012698:	eef0 0a69 	vmov.f32	s1, s19
 801269c:	eeb0 0a49 	vmov.f32	s0, s18
 80126a0:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80127d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80126a4:	eeb1 aa68 	vneg.f32	s20, s17
 80126a8:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80127d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80126ac:	eee8 0a27 	vfma.f32	s1, s16, s15
 80126b0:	4620      	mov	r0, r4
 80126b2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80126b6:	ed9f ca48 	vldr	s24, [pc, #288]	@ 80127d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80126ba:	eddf ca48 	vldr	s25, [pc, #288]	@ 80127dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80126be:	ed9f da48 	vldr	s26, [pc, #288]	@ 80127e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80126c2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80126c6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80126ca:	f7ff fe58 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80126ce:	eef0 0a69 	vmov.f32	s1, s19
 80126d2:	eeb0 0a49 	vmov.f32	s0, s18
 80126d6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80127e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 80126da:	4620      	mov	r0, r4
 80126dc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80126e0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80126e4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80126e8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80126ec:	f7ff fe47 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80126f0:	eef0 0a69 	vmov.f32	s1, s19
 80126f4:	eeb0 0a49 	vmov.f32	s0, s18
 80126f8:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80127e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 80126fc:	4620      	mov	r0, r4
 80126fe:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012702:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012706:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801270a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801270e:	f7ff fe36 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012712:	eef0 0a69 	vmov.f32	s1, s19
 8012716:	eeb0 0a49 	vmov.f32	s0, s18
 801271a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80127ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801271e:	4620      	mov	r0, r4
 8012720:	eee8 0a27 	vfma.f32	s1, s16, s15
 8012724:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012728:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801272c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8012730:	f7ff fe25 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8012734:	ee79 0a88 	vadd.f32	s1, s19, s16
 8012738:	ee39 0a28 	vadd.f32	s0, s18, s17
 801273c:	4620      	mov	r0, r4
 801273e:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8012742:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012746:	f7ff fe1a 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801274a:	eef0 0a69 	vmov.f32	s1, s19
 801274e:	eeb0 0a49 	vmov.f32	s0, s18
 8012752:	eddf 7a27 	vldr	s15, [pc, #156]	@ 80127f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8012756:	4620      	mov	r0, r4
 8012758:	eee8 0a27 	vfma.f32	s1, s16, s15
 801275c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012760:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8012764:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8012768:	f7ff fe09 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801276c:	eef0 0a69 	vmov.f32	s1, s19
 8012770:	eeb0 0a49 	vmov.f32	s0, s18
 8012774:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80127f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8012778:	4620      	mov	r0, r4
 801277a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801277e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8012782:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8012786:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801278a:	f7ff fdf8 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801278e:	eef0 0a69 	vmov.f32	s1, s19
 8012792:	eeb0 0a49 	vmov.f32	s0, s18
 8012796:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80127f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 801279a:	4620      	mov	r0, r4
 801279c:	eee8 0a27 	vfma.f32	s1, s16, s15
 80127a0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80127a4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80127a8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80127ac:	f7ff fde7 	bl	801237e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80127b0:	eef0 0a69 	vmov.f32	s1, s19
 80127b4:	eeb0 0a49 	vmov.f32	s0, s18
 80127b8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80127fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80127bc:	4620      	mov	r0, r4
 80127be:	eee8 0a27 	vfma.f32	s1, s16, s15
 80127c2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80127c6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80127ca:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80127ce:	e73e      	b.n	801264e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80127d0:	3d23d70a 	.word	0x3d23d70a
 80127d4:	3e8f5c29 	.word	0x3e8f5c29
 80127d8:	3f19999a 	.word	0x3f19999a
 80127dc:	3f4ccccd 	.word	0x3f4ccccd
 80127e0:	3f75c28f 	.word	0x3f75c28f
 80127e4:	3e4ccccd 	.word	0x3e4ccccd
 80127e8:	3ecccccd 	.word	0x3ecccccd
 80127ec:	3f3851ec 	.word	0x3f3851ec
 80127f0:	3fa3d70a 	.word	0x3fa3d70a
 80127f4:	3fcccccd 	.word	0x3fcccccd
 80127f8:	3fe66666 	.word	0x3fe66666
 80127fc:	3ffae148 	.word	0x3ffae148

08012800 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8012800:	b570      	push	{r4, r5, r6, lr}
 8012802:	ed2d 8b06 	vpush	{d8-d10}
 8012806:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801280a:	eef0 aa40 	vmov.f32	s21, s0
 801280e:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8012812:	4604      	mov	r4, r0
 8012814:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8012818:	ee30 9a49 	vsub.f32	s18, s0, s18
 801281c:	eeb0 aa60 	vmov.f32	s20, s1
 8012820:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012824:	eea9 0a09 	vfma.f32	s0, s18, s18
 8012828:	f012 feb4 	bl	8025594 <sqrtf>
 801282c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012834:	dd36      	ble.n	80128a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8012836:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801283a:	2600      	movs	r6, #0
 801283c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8012840:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8012844:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8012848:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 801284c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012850:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8012854:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8012858:	ee70 9a28 	vadd.f32	s19, s0, s17
 801285c:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8012860:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8012864:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8012868:	b1fd      	cbz	r5, 80128aa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801286a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801286e:	eef0 0a49 	vmov.f32	s1, s18
 8012872:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8012876:	eeb0 0a69 	vmov.f32	s0, s19
 801287a:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 801287e:	4620      	mov	r0, r4
 8012880:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8012884:	f7ff fd64 	bl	8012350 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8012888:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 801288c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8012890:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8012894:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8012898:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 801289c:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80128a0:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80128a4:	ecbd 8b06 	vpop	{d8-d10}
 80128a8:	bd70      	pop	{r4, r5, r6, pc}
 80128aa:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80128ae:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80128b2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80128b6:	b16b      	cbz	r3, 80128d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80128b8:	eef0 1a49 	vmov.f32	s3, s18
 80128bc:	4620      	mov	r0, r4
 80128be:	eeb0 1a69 	vmov.f32	s2, s19
 80128c2:	eef0 0a62 	vmov.f32	s1, s5
 80128c6:	eeb0 0a42 	vmov.f32	s0, s4
 80128ca:	f7ff feb1 	bl	8012630 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80128ce:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80128d2:	e7db      	b.n	801288c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80128d4:	eef0 4a48 	vmov.f32	s9, s16
 80128d8:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80128dc:	eeb0 4a68 	vmov.f32	s8, s17
 80128e0:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80128e4:	eef0 3a49 	vmov.f32	s7, s18
 80128e8:	4620      	mov	r0, r4
 80128ea:	eeb0 3a69 	vmov.f32	s6, s19
 80128ee:	f7ff fe13 	bl	8012518 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80128f2:	e7cb      	b.n	801288c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

080128f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 80128f4:	ee07 2a90 	vmov	s15, r2
 80128f8:	ee07 1a10 	vmov	s14, r1
 80128fc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8012900:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8012914 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8012904:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8012908:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801290c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012910:	f7ff bf76 	b.w	8012800 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012914:	3d000000 	.word	0x3d000000

08012918 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8012918:	b538      	push	{r3, r4, r5, lr}
 801291a:	ed2d 8b02 	vpush	{d8}
 801291e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8012922:	4604      	mov	r4, r0
 8012924:	b31d      	cbz	r5, 801296e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8012926:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801292a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801292e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8012932:	ee78 8a67 	vsub.f32	s17, s16, s15
 8012936:	ee38 8a27 	vadd.f32	s16, s16, s15
 801293a:	eef0 0a68 	vmov.f32	s1, s17
 801293e:	f7ff fd07 	bl	8012350 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8012942:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8012946:	eef0 1a48 	vmov.f32	s3, s16
 801294a:	4620      	mov	r0, r4
 801294c:	eeb0 0a41 	vmov.f32	s0, s2
 8012950:	eef0 0a68 	vmov.f32	s1, s17
 8012954:	f7ff fe6c 	bl	8012630 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012958:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801295c:	eef0 1a68 	vmov.f32	s3, s17
 8012960:	4620      	mov	r0, r4
 8012962:	eef0 0a48 	vmov.f32	s1, s16
 8012966:	eeb0 0a41 	vmov.f32	s0, s2
 801296a:	f7ff fe61 	bl	8012630 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801296e:	4628      	mov	r0, r5
 8012970:	ecbd 8b02 	vpop	{d8}
 8012974:	bd38      	pop	{r3, r4, r5, pc}

08012976 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8012976:	b510      	push	{r4, lr}
 8012978:	ed2d 8b02 	vpush	{d8}
 801297c:	4604      	mov	r4, r0
 801297e:	eeb0 8a40 	vmov.f32	s16, s0
 8012982:	eef0 8a60 	vmov.f32	s17, s1
 8012986:	f7ff ffc7 	bl	8012918 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801298a:	b9d0      	cbnz	r0, 80129c2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 801298c:	4620      	mov	r0, r4
 801298e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8012992:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8012996:	eef0 0a68 	vmov.f32	s1, s17
 801299a:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 801299e:	eeb0 0a48 	vmov.f32	s0, s16
 80129a2:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80129a6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80129aa:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80129ae:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80129b2:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80129b6:	f7ff fdaf 	bl	8012518 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80129ba:	2001      	movs	r0, #1
 80129bc:	ecbd 8b02 	vpop	{d8}
 80129c0:	bd10      	pop	{r4, pc}
 80129c2:	2000      	movs	r0, #0
 80129c4:	e7fa      	b.n	80129bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

080129c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 80129c6:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 80129ca:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80129ce:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80129d2:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80129d6:	f7ff be2b 	b.w	8012630 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080129dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80129dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e0:	b089      	sub	sp, #36	@ 0x24
 80129e2:	461c      	mov	r4, r3
 80129e4:	4682      	mov	sl, r0
 80129e6:	4615      	mov	r5, r2
 80129e8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80129ec:	f10d 0820 	add.w	r8, sp, #32
 80129f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80129f2:	9304      	str	r3, [sp, #16]
 80129f4:	2300      	movs	r3, #0
 80129f6:	9105      	str	r1, [sp, #20]
 80129f8:	9306      	str	r3, [sp, #24]
 80129fa:	f848 3d04 	str.w	r3, [r8, #-4]!
 80129fe:	9b04      	ldr	r3, [sp, #16]
 8012a00:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8012a04:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8012a08:	9b05      	ldr	r3, [sp, #20]
 8012a0a:	429d      	cmp	r5, r3
 8012a0c:	d96d      	bls.n	8012aea <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8012a0e:	3d01      	subs	r5, #1
 8012a10:	f819 3005 	ldrb.w	r3, [r9, r5]
 8012a14:	2b06      	cmp	r3, #6
 8012a16:	d8f7      	bhi.n	8012a08 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012a18:	a201      	add	r2, pc, #4	@ (adr r2, 8012a20 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8012a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a1e:	bf00      	nop
 8012a20:	08012a3f 	.word	0x08012a3f
 8012a24:	08012a09 	.word	0x08012a09
 8012a28:	08012a3d 	.word	0x08012a3d
 8012a2c:	08012a61 	.word	0x08012a61
 8012a30:	08012a61 	.word	0x08012a61
 8012a34:	08012a65 	.word	0x08012a65
 8012a38:	08012aa5 	.word	0x08012aa5
 8012a3c:	3c02      	subs	r4, #2
 8012a3e:	4650      	mov	r0, sl
 8012a40:	9400      	str	r4, [sp, #0]
 8012a42:	462b      	mov	r3, r5
 8012a44:	4642      	mov	r2, r8
 8012a46:	a906      	add	r1, sp, #24
 8012a48:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012a4c:	f7ff fcae 	bl	80123ac <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012a50:	eddd 0a07 	vldr	s1, [sp, #28]
 8012a54:	ed9d 0a06 	vldr	s0, [sp, #24]
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7ff fed1 	bl	8012800 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012a5e:	e7d3      	b.n	8012a08 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012a60:	3c01      	subs	r4, #1
 8012a62:	e7ec      	b.n	8012a3e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8012a64:	f1a4 0b04 	sub.w	fp, r4, #4
 8012a68:	3c02      	subs	r4, #2
 8012a6a:	4650      	mov	r0, sl
 8012a6c:	462b      	mov	r3, r5
 8012a6e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8012a72:	f8cd b000 	str.w	fp, [sp]
 8012a76:	4642      	mov	r2, r8
 8012a78:	a906      	add	r1, sp, #24
 8012a7a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012a7e:	f7ff fc95 	bl	80123ac <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012a82:	eddd 2a07 	vldr	s5, [sp, #28]
 8012a86:	ed9d 2a06 	vldr	s4, [sp, #24]
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	ed54 1a01 	vldr	s3, [r4, #-4]
 8012a90:	ed14 1a02 	vldr	s2, [r4, #-8]
 8012a94:	edd4 0a01 	vldr	s1, [r4, #4]
 8012a98:	ed94 0a00 	vldr	s0, [r4]
 8012a9c:	f7ff fc1a 	bl	80122d4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012aa0:	465c      	mov	r4, fp
 8012aa2:	e7b1      	b.n	8012a08 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012aa4:	f1a4 0b06 	sub.w	fp, r4, #6
 8012aa8:	3c02      	subs	r4, #2
 8012aaa:	4650      	mov	r0, sl
 8012aac:	462b      	mov	r3, r5
 8012aae:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8012ab2:	f8cd b000 	str.w	fp, [sp]
 8012ab6:	4642      	mov	r2, r8
 8012ab8:	a906      	add	r1, sp, #24
 8012aba:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012abe:	f7ff fc75 	bl	80123ac <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012ac2:	eddd 3a07 	vldr	s7, [sp, #28]
 8012ac6:	ed9d 3a06 	vldr	s6, [sp, #24]
 8012aca:	4630      	mov	r0, r6
 8012acc:	ed54 2a03 	vldr	s5, [r4, #-12]
 8012ad0:	ed14 2a04 	vldr	s4, [r4, #-16]
 8012ad4:	ed54 1a01 	vldr	s3, [r4, #-4]
 8012ad8:	ed14 1a02 	vldr	s2, [r4, #-8]
 8012adc:	edd4 0a01 	vldr	s1, [r4, #4]
 8012ae0:	ed94 0a00 	vldr	s0, [r4]
 8012ae4:	f7ff fc15 	bl	8012312 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012ae8:	e7da      	b.n	8012aa0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8012aea:	9b04      	ldr	r3, [sp, #16]
 8012aec:	b113      	cbz	r3, 8012af4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8012aee:	4630      	mov	r0, r6
 8012af0:	f7ff ff69 	bl	80129c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8012af4:	b009      	add	sp, #36	@ 0x24
 8012af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012afa:	bf00      	nop

08012afc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8012afc:	eef0 7a60 	vmov.f32	s15, s1
 8012b00:	6803      	ldr	r3, [r0, #0]
 8012b02:	689b      	ldr	r3, [r3, #8]
 8012b04:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012b08:	ee17 2a90 	vmov	r2, s15
 8012b0c:	eef0 7a40 	vmov.f32	s15, s0
 8012b10:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012b14:	ee17 1a90 	vmov	r1, s15
 8012b18:	4718      	bx	r3
	...

08012b1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8012b1c:	4b04      	ldr	r3, [pc, #16]	@ (8012b30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8012b1e:	b510      	push	{r4, lr}
 8012b20:	4604      	mov	r4, r0
 8012b22:	f840 3b14 	str.w	r3, [r0], #20
 8012b26:	f001 fe3a 	bl	801479e <_ZN8touchgfx7OutlineD1Ev>
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	bd10      	pop	{r4, pc}
 8012b2e:	bf00      	nop
 8012b30:	0802a7d4 	.word	0x0802a7d4

08012b34 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8012b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b38:	ed2d 8b04 	vpush	{d8-d9}
 8012b3c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8012b40:	b0b5      	sub	sp, #212	@ 0xd4
 8012b42:	4605      	mov	r5, r0
 8012b44:	468b      	mov	fp, r1
 8012b46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b4a:	9206      	str	r2, [sp, #24]
 8012b4c:	461e      	mov	r6, r3
 8012b4e:	2400      	movs	r4, #0
 8012b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b54:	f240 814f 	bls.w	8012df6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8012b58:	23ff      	movs	r3, #255	@ 0xff
 8012b5a:	1d02      	adds	r2, r0, #4
 8012b5c:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8012dfc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8012b60:	f04f 0800 	mov.w	r8, #0
 8012b64:	9300      	str	r3, [sp, #0]
 8012b66:	af08      	add	r7, sp, #32
 8012b68:	6981      	ldr	r1, [r0, #24]
 8012b6a:	a808      	add	r0, sp, #32
 8012b6c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012b6e:	eef0 9a49 	vmov.f32	s19, s18
 8012b72:	f012 f883 	bl	8024c7c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8012b76:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8012b7a:	4ba1      	ldr	r3, [pc, #644]	@ (8012e00 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8012b7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012b80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b84:	2201      	movs	r2, #1
 8012b86:	9308      	str	r3, [sp, #32]
 8012b88:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8012b8c:	edd5 6a08 	vldr	s13, [r5, #32]
 8012b90:	eeb0 8a49 	vmov.f32	s16, s18
 8012b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b98:	9325      	str	r3, [sp, #148]	@ 0x94
 8012b9a:	f04f 0300 	mov.w	r3, #0
 8012b9e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8012ba2:	7f6a      	ldrb	r2, [r5, #29]
 8012ba4:	eef0 8a49 	vmov.f32	s17, s18
 8012ba8:	bf48      	it	mi
 8012baa:	eef1 7a67 	vnegmi.f32	s15, s15
 8012bae:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8012bb2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8012bb6:	46c1      	mov	r9, r8
 8012bb8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012bbc:	f04f 0a01 	mov.w	sl, #1
 8012bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012bc4:	7fab      	ldrb	r3, [r5, #30]
 8012bc6:	942a      	str	r4, [sp, #168]	@ 0xa8
 8012bc8:	435a      	muls	r2, r3
 8012bca:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8012bce:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8012bd2:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8012bd6:	1c53      	adds	r3, r2, #1
 8012bd8:	942b      	str	r4, [sp, #172]	@ 0xac
 8012bda:	942c      	str	r4, [sp, #176]	@ 0xb0
 8012bdc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012be0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8012be4:	942d      	str	r4, [sp, #180]	@ 0xb4
 8012be6:	942e      	str	r4, [sp, #184]	@ 0xb8
 8012be8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bf0:	942f      	str	r4, [sp, #188]	@ 0xbc
 8012bf2:	9430      	str	r4, [sp, #192]	@ 0xc0
 8012bf4:	9431      	str	r4, [sp, #196]	@ 0xc4
 8012bf6:	9432      	str	r4, [sp, #200]	@ 0xc8
 8012bf8:	9433      	str	r4, [sp, #204]	@ 0xcc
 8012bfa:	4644      	mov	r4, r8
 8012bfc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8012c00:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8012c04:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8012c08:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8012c0c:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8012c10:	9b06      	ldr	r3, [sp, #24]
 8012c12:	454b      	cmp	r3, r9
 8012c14:	f000 80cc 	beq.w	8012db0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8012c18:	f109 0301 	add.w	r3, r9, #1
 8012c1c:	9305      	str	r3, [sp, #20]
 8012c1e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8012c22:	2b06      	cmp	r3, #6
 8012c24:	d839      	bhi.n	8012c9a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012c26:	e8df f003 	tbb	[pc, r3]
 8012c2a:	3b04      	.short	0x3b04
 8012c2c:	817c6f60 	.word	0x817c6f60
 8012c30:	a0          	.byte	0xa0
 8012c31:	00          	.byte	0x00
 8012c32:	45c1      	cmp	r9, r8
 8012c34:	d92b      	bls.n	8012c8e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8012c36:	eef0 0a49 	vmov.f32	s1, s18
 8012c3a:	4638      	mov	r0, r7
 8012c3c:	eeb0 0a69 	vmov.f32	s0, s19
 8012c40:	f7ff fdde 	bl	8012800 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012c44:	4638      	mov	r0, r7
 8012c46:	f7ff fe67 	bl	8012918 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012c4a:	4681      	mov	r9, r0
 8012c4c:	b9f8      	cbnz	r0, 8012c8e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8012c4e:	eef0 0a49 	vmov.f32	s1, s18
 8012c52:	4638      	mov	r0, r7
 8012c54:	eeb0 0a69 	vmov.f32	s0, s19
 8012c58:	f7ff fe8d 	bl	8012976 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	4623      	mov	r3, r4
 8012c60:	9a05      	ldr	r2, [sp, #20]
 8012c62:	4641      	mov	r1, r8
 8012c64:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8012c68:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8012c6c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012c70:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012c74:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8012c78:	e9cd b600 	strd	fp, r6, [sp]
 8012c7c:	f7ff feae 	bl	80129dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012c80:	eef0 0a49 	vmov.f32	s1, s18
 8012c84:	eeb0 0a69 	vmov.f32	s0, s19
 8012c88:	4638      	mov	r0, r7
 8012c8a:	f7ff fe74 	bl	8012976 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012c8e:	eeb0 8a49 	vmov.f32	s16, s18
 8012c92:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012c96:	eef0 8a69 	vmov.f32	s17, s19
 8012c9a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012c9e:	e7b7      	b.n	8012c10 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8012ca0:	45c1      	cmp	r9, r8
 8012ca2:	d90d      	bls.n	8012cc0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8012ca4:	4638      	mov	r0, r7
 8012ca6:	f7ff fe37 	bl	8012918 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012caa:	b948      	cbnz	r0, 8012cc0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8012cac:	4623      	mov	r3, r4
 8012cae:	464a      	mov	r2, r9
 8012cb0:	4641      	mov	r1, r8
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	e9cd a702 	strd	sl, r7, [sp, #8]
 8012cb8:	e9cd b600 	strd	fp, r6, [sp]
 8012cbc:	f7ff fe8e 	bl	80129dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012cc0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012cc4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012cc8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012ccc:	3402      	adds	r4, #2
 8012cce:	edd3 8a00 	vldr	s17, [r3]
 8012cd2:	46c8      	mov	r8, r9
 8012cd4:	ed93 8a01 	vldr	s16, [r3, #4]
 8012cd8:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8012cdc:	eef0 9a68 	vmov.f32	s19, s17
 8012ce0:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8012ce4:	eeb0 9a48 	vmov.f32	s18, s16
 8012ce8:	e7d7      	b.n	8012c9a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012cea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012cee:	4638      	mov	r0, r7
 8012cf0:	3402      	adds	r4, #2
 8012cf2:	edd3 8a00 	vldr	s17, [r3]
 8012cf6:	ed93 8a01 	vldr	s16, [r3, #4]
 8012cfa:	eeb0 0a68 	vmov.f32	s0, s17
 8012cfe:	eef0 0a48 	vmov.f32	s1, s16
 8012d02:	f7ff fd7d 	bl	8012800 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012d06:	e7c8      	b.n	8012c9a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012d08:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012d0c:	edd3 8a00 	vldr	s17, [r3]
 8012d10:	eef0 0a48 	vmov.f32	s1, s16
 8012d14:	4638      	mov	r0, r7
 8012d16:	eeb0 0a68 	vmov.f32	s0, s17
 8012d1a:	3401      	adds	r4, #1
 8012d1c:	f7ff fd70 	bl	8012800 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012d20:	e7bb      	b.n	8012c9a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012d22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012d26:	ed93 8a00 	vldr	s16, [r3]
 8012d2a:	e7f1      	b.n	8012d10 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8012d2c:	00a3      	lsls	r3, r4, #2
 8012d2e:	eef0 0a48 	vmov.f32	s1, s16
 8012d32:	eeb0 0a68 	vmov.f32	s0, s17
 8012d36:	4638      	mov	r0, r7
 8012d38:	f103 0208 	add.w	r2, r3, #8
 8012d3c:	f103 090c 	add.w	r9, r3, #12
 8012d40:	4433      	add	r3, r6
 8012d42:	3404      	adds	r4, #4
 8012d44:	4432      	add	r2, r6
 8012d46:	44b1      	add	r9, r6
 8012d48:	edd3 1a01 	vldr	s3, [r3, #4]
 8012d4c:	ed92 2a00 	vldr	s4, [r2]
 8012d50:	edd9 2a00 	vldr	s5, [r9]
 8012d54:	ed93 1a00 	vldr	s2, [r3]
 8012d58:	9207      	str	r2, [sp, #28]
 8012d5a:	f7ff fabb 	bl	80122d4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012d5e:	9a07      	ldr	r2, [sp, #28]
 8012d60:	ed99 8a00 	vldr	s16, [r9]
 8012d64:	edd2 8a00 	vldr	s17, [r2]
 8012d68:	e797      	b.n	8012c9a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012d6a:	00a3      	lsls	r3, r4, #2
 8012d6c:	eef0 0a48 	vmov.f32	s1, s16
 8012d70:	eeb0 0a68 	vmov.f32	s0, s17
 8012d74:	4638      	mov	r0, r7
 8012d76:	f103 0210 	add.w	r2, r3, #16
 8012d7a:	f103 0914 	add.w	r9, r3, #20
 8012d7e:	4433      	add	r3, r6
 8012d80:	3406      	adds	r4, #6
 8012d82:	4432      	add	r2, r6
 8012d84:	44b1      	add	r9, r6
 8012d86:	edd3 2a03 	vldr	s5, [r3, #12]
 8012d8a:	ed92 3a00 	vldr	s6, [r2]
 8012d8e:	edd9 3a00 	vldr	s7, [r9]
 8012d92:	ed93 2a02 	vldr	s4, [r3, #8]
 8012d96:	edd3 1a01 	vldr	s3, [r3, #4]
 8012d9a:	ed93 1a00 	vldr	s2, [r3]
 8012d9e:	9207      	str	r2, [sp, #28]
 8012da0:	f7ff fab7 	bl	8012312 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012da4:	9a07      	ldr	r2, [sp, #28]
 8012da6:	ed99 8a00 	vldr	s16, [r9]
 8012daa:	edd2 8a00 	vldr	s17, [r2]
 8012dae:	e774      	b.n	8012c9a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012db0:	9b06      	ldr	r3, [sp, #24]
 8012db2:	af08      	add	r7, sp, #32
 8012db4:	4543      	cmp	r3, r8
 8012db6:	d90f      	bls.n	8012dd8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8012db8:	4638      	mov	r0, r7
 8012dba:	f7ff fdad 	bl	8012918 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8012dbe:	b958      	cbnz	r0, 8012dd8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	9703      	str	r7, [sp, #12]
 8012dc4:	f8cd b000 	str.w	fp, [sp]
 8012dc8:	4641      	mov	r1, r8
 8012dca:	9a06      	ldr	r2, [sp, #24]
 8012dcc:	4628      	mov	r0, r5
 8012dce:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8012dd2:	4623      	mov	r3, r4
 8012dd4:	f7ff fe02 	bl	80129dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012dd8:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8012ddc:	4638      	mov	r0, r7
 8012dde:	f011 ffe1 	bl	8024da4 <_ZN8touchgfx6Canvas6renderEh>
 8012de2:	4604      	mov	r4, r0
 8012de4:	4638      	mov	r0, r7
 8012de6:	f7ff fe99 	bl	8012b1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8012dea:	4620      	mov	r0, r4
 8012dec:	b035      	add	sp, #212	@ 0xd4
 8012dee:	ecbd 8b04 	vpop	{d8-d9}
 8012df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df6:	2401      	movs	r4, #1
 8012df8:	e7f7      	b.n	8012dea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8012dfa:	bf00      	nop
 8012dfc:	00000000 	.word	0x00000000
 8012e00:	08029f04 	.word	0x08029f04

08012e04 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8012e04:	b510      	push	{r4, lr}
 8012e06:	4604      	mov	r4, r0
 8012e08:	f7ff fe88 	bl	8012b1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8012e0c:	21b0      	movs	r1, #176	@ 0xb0
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f012 fb95 	bl	802553e <_ZdlPvj>
 8012e14:	4620      	mov	r0, r4
 8012e16:	bd10      	pop	{r4, pc}

08012e18 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8012e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e1c:	4698      	mov	r8, r3
 8012e1e:	23ff      	movs	r3, #255	@ 0xff
 8012e20:	4607      	mov	r7, r0
 8012e22:	4689      	mov	r9, r1
 8012e24:	4692      	mov	sl, r2
 8012e26:	1d02      	adds	r2, r0, #4
 8012e28:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8012e2c:	2400      	movs	r4, #0
 8012e2e:	44ca      	add	sl, r9
 8012e30:	ed2d 8b06 	vpush	{d8-d10}
 8012e34:	b0aa      	sub	sp, #168	@ 0xa8
 8012e36:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 801303c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012e3a:	9300      	str	r3, [sp, #0]
 8012e3c:	eef0 8a48 	vmov.f32	s17, s16
 8012e40:	6981      	ldr	r1, [r0, #24]
 8012e42:	a80d      	add	r0, sp, #52	@ 0x34
 8012e44:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8012e46:	f011 ff19 	bl	8024c7c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8012e4a:	7f3b      	ldrb	r3, [r7, #28]
 8012e4c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 801303c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012e50:	4628      	mov	r0, r5
 8012e52:	1e5a      	subs	r2, r3, #1
 8012e54:	eeb0 0a60 	vmov.f32	s0, s1
 8012e58:	4253      	negs	r3, r2
 8012e5a:	4153      	adcs	r3, r2
 8012e5c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8012e60:	f005 fc81 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012e64:	eeb0 9a40 	vmov.f32	s18, s0
 8012e68:	eef0 9a60 	vmov.f32	s19, s1
 8012e6c:	45ca      	cmp	sl, r9
 8012e6e:	f000 80cd 	beq.w	801300c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8012e72:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012e76:	2b06      	cmp	r3, #6
 8012e78:	d8f8      	bhi.n	8012e6c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012e7a:	e8df f003 	tbb	[pc, r3]
 8012e7e:	0804      	.short	0x0804
 8012e80:	58533f2a 	.word	0x58533f2a
 8012e84:	8a          	.byte	0x8a
 8012e85:	00          	.byte	0x00
 8012e86:	a80d      	add	r0, sp, #52	@ 0x34
 8012e88:	f011 ff6a 	bl	8024d60 <_ZN8touchgfx6Canvas5closeEv>
 8012e8c:	e7ee      	b.n	8012e6c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012e8e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012e92:	4628      	mov	r0, r5
 8012e94:	ed93 8a01 	vldr	s16, [r3, #4]
 8012e98:	edd3 8a00 	vldr	s17, [r3]
 8012e9c:	eef0 0a48 	vmov.f32	s1, s16
 8012ea0:	eeb0 0a68 	vmov.f32	s0, s17
 8012ea4:	f005 fc5f 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012ea8:	a80d      	add	r0, sp, #52	@ 0x34
 8012eaa:	eef0 7a60 	vmov.f32	s15, s1
 8012eae:	eeb0 9a40 	vmov.f32	s18, s0
 8012eb2:	eef0 9a60 	vmov.f32	s19, s1
 8012eb6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012eba:	ee17 2a90 	vmov	r2, s15
 8012ebe:	eef0 7a40 	vmov.f32	s15, s0
 8012ec2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012ec6:	ee17 1a90 	vmov	r1, s15
 8012eca:	f012 f823 	bl	8024f14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8012ece:	3402      	adds	r4, #2
 8012ed0:	e7cc      	b.n	8012e6c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012ed2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	edd3 8a00 	vldr	s17, [r3]
 8012edc:	ed93 8a01 	vldr	s16, [r3, #4]
 8012ee0:	eeb0 0a68 	vmov.f32	s0, s17
 8012ee4:	eef0 0a48 	vmov.f32	s1, s16
 8012ee8:	f005 fc3d 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012eec:	a80d      	add	r0, sp, #52	@ 0x34
 8012eee:	eeb0 9a40 	vmov.f32	s18, s0
 8012ef2:	eef0 9a60 	vmov.f32	s19, s1
 8012ef6:	f7ff fe01 	bl	8012afc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8012efa:	e7e8      	b.n	8012ece <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8012efc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012f00:	edd3 8a00 	vldr	s17, [r3]
 8012f04:	eef0 0a48 	vmov.f32	s1, s16
 8012f08:	4628      	mov	r0, r5
 8012f0a:	eeb0 0a68 	vmov.f32	s0, s17
 8012f0e:	3401      	adds	r4, #1
 8012f10:	f005 fc29 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012f14:	a80d      	add	r0, sp, #52	@ 0x34
 8012f16:	eef0 9a60 	vmov.f32	s19, s1
 8012f1a:	eeb0 9a40 	vmov.f32	s18, s0
 8012f1e:	f7ff fded 	bl	8012afc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8012f22:	e7a3      	b.n	8012e6c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012f24:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012f28:	ed93 8a00 	vldr	s16, [r3]
 8012f2c:	e7ea      	b.n	8012f04 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8012f2e:	1ca3      	adds	r3, r4, #2
 8012f30:	4628      	mov	r0, r5
 8012f32:	3404      	adds	r4, #4
 8012f34:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8012f38:	ed53 0a01 	vldr	s1, [r3, #-4]
 8012f3c:	ed13 0a02 	vldr	s0, [r3, #-8]
 8012f40:	edd3 8a00 	vldr	s17, [r3]
 8012f44:	ed93 8a01 	vldr	s16, [r3, #4]
 8012f48:	f005 fc0d 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012f4c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012f50:	eeb0 0a68 	vmov.f32	s0, s17
 8012f54:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012f58:	eef0 0a48 	vmov.f32	s1, s16
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f005 fc02 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012f62:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8012f66:	eef0 2a60 	vmov.f32	s5, s1
 8012f6a:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8012f6e:	eeb0 2a40 	vmov.f32	s4, s0
 8012f72:	a80d      	add	r0, sp, #52	@ 0x34
 8012f74:	eeb0 aa40 	vmov.f32	s20, s0
 8012f78:	eef0 aa60 	vmov.f32	s21, s1
 8012f7c:	eeb0 0a49 	vmov.f32	s0, s18
 8012f80:	eef0 0a69 	vmov.f32	s1, s19
 8012f84:	f7ff f9a6 	bl	80122d4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012f88:	eef0 9a6a 	vmov.f32	s19, s21
 8012f8c:	eeb0 9a4a 	vmov.f32	s18, s20
 8012f90:	e76c      	b.n	8012e6c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012f92:	1d26      	adds	r6, r4, #4
 8012f94:	4628      	mov	r0, r5
 8012f96:	3406      	adds	r4, #6
 8012f98:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012f9c:	ed56 0a03 	vldr	s1, [r6, #-12]
 8012fa0:	ed16 0a04 	vldr	s0, [r6, #-16]
 8012fa4:	edd6 8a00 	vldr	s17, [r6]
 8012fa8:	ed96 8a01 	vldr	s16, [r6, #4]
 8012fac:	f005 fbdb 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012fb0:	ed8d 0a07 	vstr	s0, [sp, #28]
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	ed16 0a02 	vldr	s0, [r6, #-8]
 8012fba:	edcd 0a08 	vstr	s1, [sp, #32]
 8012fbe:	ed56 0a01 	vldr	s1, [r6, #-4]
 8012fc2:	f005 fbd0 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012fc6:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012fca:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8012fce:	eeb0 0a68 	vmov.f32	s0, s17
 8012fd2:	eef0 0a48 	vmov.f32	s1, s16
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	f005 fbc5 	bl	8018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012fdc:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8012fe0:	eeb0 3a40 	vmov.f32	s6, s0
 8012fe4:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8012fe8:	eef0 3a60 	vmov.f32	s7, s1
 8012fec:	eddd 1a08 	vldr	s3, [sp, #32]
 8012ff0:	eeb0 aa40 	vmov.f32	s20, s0
 8012ff4:	ed9d 1a07 	vldr	s2, [sp, #28]
 8012ff8:	eef0 aa60 	vmov.f32	s21, s1
 8012ffc:	a80d      	add	r0, sp, #52	@ 0x34
 8012ffe:	eef0 0a69 	vmov.f32	s1, s19
 8013002:	eeb0 0a49 	vmov.f32	s0, s18
 8013006:	f7ff f984 	bl	8012312 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 801300a:	e7bd      	b.n	8012f88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 801300c:	7f7b      	ldrb	r3, [r7, #29]
 801300e:	a80d      	add	r0, sp, #52	@ 0x34
 8013010:	7fb9      	ldrb	r1, [r7, #30]
 8013012:	4359      	muls	r1, r3
 8013014:	1c4b      	adds	r3, r1, #1
 8013016:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801301a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801301e:	f011 fec1 	bl	8024da4 <_ZN8touchgfx6Canvas6renderEh>
 8013022:	4b07      	ldr	r3, [pc, #28]	@ (8013040 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8013024:	4604      	mov	r4, r0
 8013026:	a812      	add	r0, sp, #72	@ 0x48
 8013028:	930d      	str	r3, [sp, #52]	@ 0x34
 801302a:	f001 fbb8 	bl	801479e <_ZN8touchgfx7OutlineD1Ev>
 801302e:	4620      	mov	r0, r4
 8013030:	b02a      	add	sp, #168	@ 0xa8
 8013032:	ecbd 8b06 	vpop	{d8-d10}
 8013036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801303a:	bf00      	nop
 801303c:	00000000 	.word	0x00000000
 8013040:	0802a7d4 	.word	0x0802a7d4

08013044 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8013044:	b410      	push	{r4}
 8013046:	7f04      	ldrb	r4, [r0, #28]
 8013048:	b11c      	cbz	r4, 8013052 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801304a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801304e:	f7ff bee3 	b.w	8012e18 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8013052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013056:	f7ff bd6d 	b.w	8012b34 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0801305a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801305a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801305e:	4691      	mov	r9, r2
 8013060:	4602      	mov	r2, r0
 8013062:	4606      	mov	r6, r0
 8013064:	4688      	mov	r8, r1
 8013066:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801306a:	469a      	mov	sl, r3
 801306c:	ab02      	add	r3, sp, #8
 801306e:	af02      	add	r7, sp, #8
 8013070:	6851      	ldr	r1, [r2, #4]
 8013072:	c303      	stmia	r3!, {r0, r1}
 8013074:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013078:	2b00      	cmp	r3, #0
 801307a:	dd2f      	ble.n	80130dc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801307c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8013080:	2c00      	cmp	r4, #0
 8013082:	dd2b      	ble.n	80130dc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8013084:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013088:	441c      	add	r4, r3
 801308a:	b2a4      	uxth	r4, r4
 801308c:	b225      	sxth	r5, r4
 801308e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8013092:	42ab      	cmp	r3, r5
 8013094:	da22      	bge.n	80130dc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8013096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013098:	464a      	mov	r2, r9
 801309a:	9701      	str	r7, [sp, #4]
 801309c:	4641      	mov	r1, r8
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	4630      	mov	r0, r6
 80130a2:	4653      	mov	r3, sl
 80130a4:	f7ff ffce 	bl	8013044 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 80130a8:	b940      	cbnz	r0, 80130bc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80130aa:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d004      	beq.n	80130bc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80130b2:	3301      	adds	r3, #1
 80130b4:	105b      	asrs	r3, r3, #1
 80130b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80130ba:	e7ec      	b.n	8013096 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 80130bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80130c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80130c4:	4413      	add	r3, r2
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	441a      	add	r2, r3
 80130ca:	f8ad 300a 	strh.w	r3, [sp, #10]
 80130ce:	b212      	sxth	r2, r2
 80130d0:	4295      	cmp	r5, r2
 80130d2:	dadc      	bge.n	801308e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80130d4:	1ae3      	subs	r3, r4, r3
 80130d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80130da:	e7d8      	b.n	801308e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80130dc:	b004      	add	sp, #16
 80130de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080130e2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80130e2:	0c0b      	lsrs	r3, r1, #16
 80130e4:	60c1      	str	r1, [r0, #12]
 80130e6:	7481      	strb	r1, [r0, #18]
 80130e8:	7403      	strb	r3, [r0, #16]
 80130ea:	0a0b      	lsrs	r3, r1, #8
 80130ec:	7443      	strb	r3, [r0, #17]
 80130ee:	4770      	bx	lr

080130f0 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80130f0:	f1a0 0008 	sub.w	r0, r0, #8
 80130f4:	e7f5      	b.n	80130e2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

080130f8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80130f8:	b508      	push	{r3, lr}
 80130fa:	4b05      	ldr	r3, [pc, #20]	@ (8013110 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80130fc:	6818      	ldr	r0, [r3, #0]
 80130fe:	6803      	ldr	r3, [r0, #0]
 8013100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013104:	4798      	blx	r3
 8013106:	1e43      	subs	r3, r0, #1
 8013108:	4258      	negs	r0, r3
 801310a:	4158      	adcs	r0, r3
 801310c:	bd08      	pop	{r3, pc}
 801310e:	bf00      	nop
 8013110:	24026418 	.word	0x24026418

08013114 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8013114:	4770      	bx	lr

08013116 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8013116:	3808      	subs	r0, #8
 8013118:	4770      	bx	lr

0801311a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801311a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801311e:	b410      	push	{r4}
 8013120:	188c      	adds	r4, r1, r2
 8013122:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013126:	68c2      	ldr	r2, [r0, #12]
 8013128:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801312c:	4620      	mov	r0, r4
 801312e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013132:	f7f0 b881 	b.w	8003238 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08013136 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8013136:	f7f0 b85b 	b.w	80031f0 <_ZN8touchgfx5paint8tearDownEv>

0801313a <_ZN8touchgfx13PainterRGB888D0Ev>:
 801313a:	b510      	push	{r4, lr}
 801313c:	4604      	mov	r4, r0
 801313e:	2114      	movs	r1, #20
 8013140:	f012 f9fd 	bl	802553e <_ZdlPvj>
 8013144:	4620      	mov	r0, r4
 8013146:	bd10      	pop	{r4, pc}

08013148 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8013148:	f1a0 0008 	sub.w	r0, r0, #8
 801314c:	e7f5      	b.n	801313a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08013150 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8013150:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013158:	4411      	add	r1, r2
 801315a:	7c42      	ldrb	r2, [r0, #17]
 801315c:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8013160:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8013164:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8013168:	2a00      	cmp	r2, #0
 801316a:	f000 8084 	beq.w	8013276 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 801316e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013172:	ed90 7a08 	vldr	s14, [r0, #32]
 8013176:	42a2      	cmp	r2, r4
 8013178:	68c3      	ldr	r3, [r0, #12]
 801317a:	db20      	blt.n	80131be <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 801317c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013180:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8013184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013188:	bfc8      	it	gt
 801318a:	2200      	movgt	r2, #0
 801318c:	589a      	ldr	r2, [r3, r2]
 801318e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013192:	7c03      	ldrb	r3, [r0, #16]
 8013194:	fa5f fc82 	uxtb.w	ip, r2
 8013198:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801319c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80131a0:	440e      	add	r6, r1
 80131a2:	b36b      	cbz	r3, 8013200 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80131a4:	2dff      	cmp	r5, #255	@ 0xff
 80131a6:	d12b      	bne.n	8013200 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80131a8:	42b1      	cmp	r1, r6
 80131aa:	f080 8204 	bcs.w	80135b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80131ae:	f881 c000 	strb.w	ip, [r1]
 80131b2:	3103      	adds	r1, #3
 80131b4:	f801 7c02 	strb.w	r7, [r1, #-2]
 80131b8:	f801 4c01 	strb.w	r4, [r1, #-1]
 80131bc:	e7f4      	b.n	80131a8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 80131be:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80131c2:	42a7      	cmp	r7, r4
 80131c4:	dc08      	bgt.n	80131d8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 80131c6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80131ca:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80131ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d2:	bfd8      	it	le
 80131d4:	2200      	movle	r2, #0
 80131d6:	e7d9      	b.n	801318c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80131d8:	1aa2      	subs	r2, r4, r2
 80131da:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80131de:	ee07 2a90 	vmov	s15, r2
 80131e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80131ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131f2:	ee17 2a90 	vmov	r2, s15
 80131f6:	bfd8      	it	le
 80131f8:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 80131fc:	0092      	lsls	r2, r2, #2
 80131fe:	e7c5      	b.n	801318c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8013200:	0e12      	lsrs	r2, r2, #24
 8013202:	4355      	muls	r5, r2
 8013204:	1c6a      	adds	r2, r5, #1
 8013206:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801320a:	122d      	asrs	r5, r5, #8
 801320c:	43e8      	mvns	r0, r5
 801320e:	b2ad      	uxth	r5, r5
 8013210:	fb1c fc05 	smulbb	ip, ip, r5
 8013214:	b2c0      	uxtb	r0, r0
 8013216:	fb17 f705 	smulbb	r7, r7, r5
 801321a:	fb14 f505 	smulbb	r5, r4, r5
 801321e:	fa1f fc8c 	uxth.w	ip, ip
 8013222:	b2bf      	uxth	r7, r7
 8013224:	b2ad      	uxth	r5, r5
 8013226:	428e      	cmp	r6, r1
 8013228:	f101 0303 	add.w	r3, r1, #3
 801322c:	f240 81c3 	bls.w	80135b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8013230:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8013234:	fb02 c200 	mla	r2, r2, r0, ip
 8013238:	b292      	uxth	r2, r2
 801323a:	1c51      	adds	r1, r2, #1
 801323c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8013240:	1212      	asrs	r2, r2, #8
 8013242:	f803 2c03 	strb.w	r2, [r3, #-3]
 8013246:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801324a:	fb02 7200 	mla	r2, r2, r0, r7
 801324e:	b292      	uxth	r2, r2
 8013250:	1c51      	adds	r1, r2, #1
 8013252:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8013256:	1212      	asrs	r2, r2, #8
 8013258:	f803 2c02 	strb.w	r2, [r3, #-2]
 801325c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8013260:	fb02 5200 	mla	r2, r2, r0, r5
 8013264:	b292      	uxth	r2, r2
 8013266:	1c51      	adds	r1, r2, #1
 8013268:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801326c:	4619      	mov	r1, r3
 801326e:	1212      	asrs	r2, r2, #8
 8013270:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013274:	e7d7      	b.n	8013226 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8013276:	7c82      	ldrb	r2, [r0, #18]
 8013278:	2a00      	cmp	r2, #0
 801327a:	d047      	beq.n	801330c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 801327c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013280:	ee07 2a10 	vmov	s14, r2
 8013284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013288:	ee07 3a90 	vmov	s15, r3
 801328c:	461a      	mov	r2, r3
 801328e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013292:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329a:	f200 808e 	bhi.w	80133ba <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 801329e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80132a2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80132a6:	68c7      	ldr	r7, [r0, #12]
 80132a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80132b0:	ee06 6a90 	vmov	s13, r6
 80132b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80132b8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80132bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c0:	bf4a      	itet	mi
 80132c2:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 80132c6:	4634      	movpl	r4, r6
 80132c8:	ee17 4a90 	vmovmi	r4, s15
 80132cc:	edd0 7a08 	vldr	s15, [r0, #32]
 80132d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80132d4:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80132d8:	448e      	add	lr, r1
 80132da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132de:	bfc8      	it	gt
 80132e0:	2200      	movgt	r2, #0
 80132e2:	58bf      	ldr	r7, [r7, r2]
 80132e4:	7c02      	ldrb	r2, [r0, #16]
 80132e6:	fa5f f987 	uxtb.w	r9, r7
 80132ea:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80132ee:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80132f2:	b31a      	cbz	r2, 801333c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80132f4:	2dff      	cmp	r5, #255	@ 0xff
 80132f6:	d121      	bne.n	801333c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80132f8:	4571      	cmp	r1, lr
 80132fa:	d25d      	bcs.n	80133b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80132fc:	f881 9000 	strb.w	r9, [r1]
 8013300:	3103      	adds	r1, #3
 8013302:	f801 8c02 	strb.w	r8, [r1, #-2]
 8013306:	f801 cc01 	strb.w	ip, [r1, #-1]
 801330a:	e7f5      	b.n	80132f8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 801330c:	ee07 4a90 	vmov	s15, r4
 8013310:	ed90 7a06 	vldr	s14, [r0, #24]
 8013314:	edd0 6a05 	vldr	s13, [r0, #20]
 8013318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801331c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013320:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013324:	edd0 7a08 	vldr	s15, [r0, #32]
 8013328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013330:	bf44      	itt	mi
 8013332:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8013336:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801333a:	e7a5      	b.n	8013288 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 801333c:	0e3f      	lsrs	r7, r7, #24
 801333e:	436f      	muls	r7, r5
 8013340:	1c7a      	adds	r2, r7, #1
 8013342:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8013346:	1212      	asrs	r2, r2, #8
 8013348:	ea6f 0a02 	mvn.w	sl, r2
 801334c:	b292      	uxth	r2, r2
 801334e:	fb19 f902 	smulbb	r9, r9, r2
 8013352:	fa5f fa8a 	uxtb.w	sl, sl
 8013356:	fb18 f802 	smulbb	r8, r8, r2
 801335a:	fb1c fc02 	smulbb	ip, ip, r2
 801335e:	fa1f f989 	uxth.w	r9, r9
 8013362:	fa1f f888 	uxth.w	r8, r8
 8013366:	fa1f fc8c 	uxth.w	ip, ip
 801336a:	458e      	cmp	lr, r1
 801336c:	f101 0203 	add.w	r2, r1, #3
 8013370:	d922      	bls.n	80133b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8013372:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8013376:	fb01 910a 	mla	r1, r1, sl, r9
 801337a:	b289      	uxth	r1, r1
 801337c:	1c4f      	adds	r7, r1, #1
 801337e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8013382:	1209      	asrs	r1, r1, #8
 8013384:	f802 1c03 	strb.w	r1, [r2, #-3]
 8013388:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801338c:	fb01 810a 	mla	r1, r1, sl, r8
 8013390:	b289      	uxth	r1, r1
 8013392:	1c4f      	adds	r7, r1, #1
 8013394:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8013398:	1209      	asrs	r1, r1, #8
 801339a:	f802 1c02 	strb.w	r1, [r2, #-2]
 801339e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80133a2:	fb01 c10a 	mla	r1, r1, sl, ip
 80133a6:	b289      	uxth	r1, r1
 80133a8:	1c4f      	adds	r7, r1, #1
 80133aa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80133ae:	1209      	asrs	r1, r1, #8
 80133b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80133b4:	4611      	mov	r1, r2
 80133b6:	e7d8      	b.n	801336a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 80133b8:	191a      	adds	r2, r3, r4
 80133ba:	4433      	add	r3, r6
 80133bc:	b21b      	sxth	r3, r3
 80133be:	4293      	cmp	r3, r2
 80133c0:	f340 80f9 	ble.w	80135b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80133c4:	edd0 7a07 	vldr	s15, [r0, #28]
 80133c8:	ee06 2a90 	vmov	s13, r2
 80133cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80133d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80133d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133dc:	f340 80b0 	ble.w	8013540 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 80133e0:	ee06 3a10 	vmov	s12, r3
 80133e4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80133e8:	eddf 5a74 	vldr	s11, [pc, #464]	@ 80135bc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 80133ec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80133f0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80133f4:	ed90 6a08 	vldr	s12, [r0, #32]
 80133f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133fc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8013400:	bfd6      	itet	le
 8013402:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8013406:	469c      	movgt	ip, r3
 8013408:	ee17 ca90 	vmovle	ip, s15
 801340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013410:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80135c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8013414:	ebac 0202 	sub.w	r2, ip, r2
 8013418:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801341c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013420:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013424:	188c      	adds	r4, r1, r2
 8013426:	7c02      	ldrb	r2, [r0, #16]
 8013428:	b1d2      	cbz	r2, 8013460 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801342a:	2dff      	cmp	r5, #255	@ 0xff
 801342c:	d118      	bne.n	8013460 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801342e:	42a1      	cmp	r1, r4
 8013430:	d261      	bcs.n	80134f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8013432:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013436:	68c6      	ldr	r6, [r0, #12]
 8013438:	3103      	adds	r1, #3
 801343a:	ee17 7a10 	vmov	r7, s14
 801343e:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8013442:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8013446:	f801 6c03 	strb.w	r6, [r1, #-3]
 801344a:	7856      	ldrb	r6, [r2, #1]
 801344c:	f801 6c02 	strb.w	r6, [r1, #-2]
 8013450:	7892      	ldrb	r2, [r2, #2]
 8013452:	f801 2c01 	strb.w	r2, [r1, #-1]
 8013456:	ed90 7a08 	vldr	s14, [r0, #32]
 801345a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801345e:	e7e6      	b.n	801342e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8013460:	68c2      	ldr	r2, [r0, #12]
 8013462:	428c      	cmp	r4, r1
 8013464:	f101 0e03 	add.w	lr, r1, #3
 8013468:	d945      	bls.n	80134f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801346a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801346e:	ee17 9a10 	vmov	r9, s14
 8013472:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8013476:	f898 7003 	ldrb.w	r7, [r8, #3]
 801347a:	fb07 f605 	mul.w	r6, r7, r5
 801347e:	1c77      	adds	r7, r6, #1
 8013480:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8013484:	123f      	asrs	r7, r7, #8
 8013486:	b2b9      	uxth	r1, r7
 8013488:	43ff      	mvns	r7, r7
 801348a:	b2fe      	uxtb	r6, r7
 801348c:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8013490:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8013494:	fb19 f906 	smulbb	r9, r9, r6
 8013498:	fb07 9701 	mla	r7, r7, r1, r9
 801349c:	b2bf      	uxth	r7, r7
 801349e:	f107 0901 	add.w	r9, r7, #1
 80134a2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80134a6:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80134aa:	fb19 f906 	smulbb	r9, r9, r6
 80134ae:	123f      	asrs	r7, r7, #8
 80134b0:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80134b4:	f898 7001 	ldrb.w	r7, [r8, #1]
 80134b8:	fb07 9701 	mla	r7, r7, r1, r9
 80134bc:	b2bf      	uxth	r7, r7
 80134be:	f107 0901 	add.w	r9, r7, #1
 80134c2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80134c6:	123f      	asrs	r7, r7, #8
 80134c8:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80134cc:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80134d0:	f898 8002 	ldrb.w	r8, [r8, #2]
 80134d4:	fb17 f606 	smulbb	r6, r7, r6
 80134d8:	fb08 6601 	mla	r6, r8, r1, r6
 80134dc:	b2b6      	uxth	r6, r6
 80134de:	1c71      	adds	r1, r6, #1
 80134e0:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80134e4:	4671      	mov	r1, lr
 80134e6:	1236      	asrs	r6, r6, #8
 80134e8:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80134ec:	ed90 7a08 	vldr	s14, [r0, #32]
 80134f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80134f4:	e7b5      	b.n	8013462 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80134f6:	4563      	cmp	r3, ip
 80134f8:	dd5d      	ble.n	80135b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80134fa:	edd0 7a08 	vldr	s15, [r0, #32]
 80134fe:	eba3 030c 	sub.w	r3, r3, ip
 8013502:	68c4      	ldr	r4, [r0, #12]
 8013504:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8013508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801350c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013510:	7c00      	ldrb	r0, [r0, #16]
 8013512:	440b      	add	r3, r1
 8013514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013518:	bfd8      	it	le
 801351a:	2200      	movle	r2, #0
 801351c:	58a2      	ldr	r2, [r4, r2]
 801351e:	b2d4      	uxtb	r4, r2
 8013520:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8013524:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8013528:	b160      	cbz	r0, 8013544 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801352a:	2dff      	cmp	r5, #255	@ 0xff
 801352c:	d10a      	bne.n	8013544 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801352e:	4299      	cmp	r1, r3
 8013530:	d241      	bcs.n	80135b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8013532:	700c      	strb	r4, [r1, #0]
 8013534:	3103      	adds	r1, #3
 8013536:	f801 cc02 	strb.w	ip, [r1, #-2]
 801353a:	f801 7c01 	strb.w	r7, [r1, #-1]
 801353e:	e7f6      	b.n	801352e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8013540:	4694      	mov	ip, r2
 8013542:	e7da      	b.n	80134fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8013544:	0e12      	lsrs	r2, r2, #24
 8013546:	436a      	muls	r2, r5
 8013548:	1c55      	adds	r5, r2, #1
 801354a:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801354e:	122d      	asrs	r5, r5, #8
 8013550:	43ee      	mvns	r6, r5
 8013552:	b2ad      	uxth	r5, r5
 8013554:	fb14 f405 	smulbb	r4, r4, r5
 8013558:	b2f6      	uxtb	r6, r6
 801355a:	fb1c f005 	smulbb	r0, ip, r5
 801355e:	fb17 f505 	smulbb	r5, r7, r5
 8013562:	b2a4      	uxth	r4, r4
 8013564:	b280      	uxth	r0, r0
 8013566:	b2ad      	uxth	r5, r5
 8013568:	428b      	cmp	r3, r1
 801356a:	f101 0203 	add.w	r2, r1, #3
 801356e:	d922      	bls.n	80135b6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8013570:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8013574:	fb01 4106 	mla	r1, r1, r6, r4
 8013578:	b289      	uxth	r1, r1
 801357a:	1c4f      	adds	r7, r1, #1
 801357c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8013580:	1209      	asrs	r1, r1, #8
 8013582:	f802 1c03 	strb.w	r1, [r2, #-3]
 8013586:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801358a:	fb01 0106 	mla	r1, r1, r6, r0
 801358e:	b289      	uxth	r1, r1
 8013590:	1c4f      	adds	r7, r1, #1
 8013592:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8013596:	1209      	asrs	r1, r1, #8
 8013598:	f802 1c02 	strb.w	r1, [r2, #-2]
 801359c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80135a0:	fb01 5106 	mla	r1, r1, r6, r5
 80135a4:	b289      	uxth	r1, r1
 80135a6:	1c4f      	adds	r7, r1, #1
 80135a8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80135ac:	1209      	asrs	r1, r1, #8
 80135ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 80135b2:	4611      	mov	r1, r2
 80135b4:	e7d8      	b.n	8013568 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80135b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ba:	bf00      	nop
 80135bc:	447ffffe 	.word	0x447ffffe
 80135c0:	00000000 	.word	0x00000000

080135c4 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 80135c4:	4770      	bx	lr

080135c6 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80135c6:	4770      	bx	lr

080135c8 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80135c8:	b510      	push	{r4, lr}
 80135ca:	4604      	mov	r4, r0
 80135cc:	2124      	movs	r1, #36	@ 0x24
 80135ce:	f011 ffb6 	bl	802553e <_ZdlPvj>
 80135d2:	4620      	mov	r0, r4
 80135d4:	bd10      	pop	{r4, pc}
	...

080135d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80135d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80135da:	6803      	ldr	r3, [r0, #0]
 80135dc:	460d      	mov	r5, r1
 80135de:	4604      	mov	r4, r0
 80135e0:	4601      	mov	r1, r0
 80135e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80135e4:	a802      	add	r0, sp, #8
 80135e6:	4798      	blx	r3
 80135e8:	6828      	ldr	r0, [r5, #0]
 80135ea:	6869      	ldr	r1, [r5, #4]
 80135ec:	466b      	mov	r3, sp
 80135ee:	c303      	stmia	r3!, {r0, r1}
 80135f0:	4668      	mov	r0, sp
 80135f2:	4619      	mov	r1, r3
 80135f4:	f7fd fcfc 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 80135f8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80135fa:	b188      	cbz	r0, 8013620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80135fc:	6803      	ldr	r3, [r0, #0]
 80135fe:	1d21      	adds	r1, r4, #4
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	4798      	blx	r3
 8013604:	b160      	cbz	r0, 8013620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013606:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	dd08      	ble.n	8013620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801360e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8013612:	2d00      	cmp	r5, #0
 8013614:	dd04      	ble.n	8013620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013616:	4a2b      	ldr	r2, [pc, #172]	@ (80136c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8013618:	7812      	ldrb	r2, [r2, #0]
 801361a:	b11a      	cbz	r2, 8013624 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 801361c:	2a01      	cmp	r2, #1
 801361e:	d029      	beq.n	8013674 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8013620:	b004      	add	sp, #16
 8013622:	bd70      	pop	{r4, r5, r6, pc}
 8013624:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013628:	441d      	add	r5, r3
 801362a:	b2ad      	uxth	r5, r5
 801362c:	b22e      	sxth	r6, r5
 801362e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013632:	42b3      	cmp	r3, r6
 8013634:	daf4      	bge.n	8013620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013636:	6823      	ldr	r3, [r4, #0]
 8013638:	4669      	mov	r1, sp
 801363a:	4620      	mov	r0, r4
 801363c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801363e:	4798      	blx	r3
 8013640:	b940      	cbnz	r0, 8013654 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8013642:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013646:	2b01      	cmp	r3, #1
 8013648:	d004      	beq.n	8013654 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801364a:	3301      	adds	r3, #1
 801364c:	105b      	asrs	r3, r3, #1
 801364e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013652:	e7f0      	b.n	8013636 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8013654:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013658:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801365c:	4413      	add	r3, r2
 801365e:	b29b      	uxth	r3, r3
 8013660:	441a      	add	r2, r3
 8013662:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013666:	b212      	sxth	r2, r2
 8013668:	4296      	cmp	r6, r2
 801366a:	dae0      	bge.n	801362e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801366c:	1aeb      	subs	r3, r5, r3
 801366e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013672:	e7dc      	b.n	801362e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8013674:	f8bd 5000 	ldrh.w	r5, [sp]
 8013678:	441d      	add	r5, r3
 801367a:	b2ad      	uxth	r5, r5
 801367c:	b22e      	sxth	r6, r5
 801367e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8013682:	42b3      	cmp	r3, r6
 8013684:	dacc      	bge.n	8013620 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013686:	6823      	ldr	r3, [r4, #0]
 8013688:	4669      	mov	r1, sp
 801368a:	4620      	mov	r0, r4
 801368c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801368e:	4798      	blx	r3
 8013690:	b940      	cbnz	r0, 80136a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8013692:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013696:	2b01      	cmp	r3, #1
 8013698:	d004      	beq.n	80136a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801369a:	3301      	adds	r3, #1
 801369c:	105b      	asrs	r3, r3, #1
 801369e:	f8ad 3004 	strh.w	r3, [sp, #4]
 80136a2:	e7f0      	b.n	8013686 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80136a4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80136a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80136ac:	4413      	add	r3, r2
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	441a      	add	r2, r3
 80136b2:	f8ad 3000 	strh.w	r3, [sp]
 80136b6:	b212      	sxth	r2, r2
 80136b8:	4296      	cmp	r6, r2
 80136ba:	dae0      	bge.n	801367e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80136bc:	1aeb      	subs	r3, r5, r3
 80136be:	f8ad 3004 	strh.w	r3, [sp, #4]
 80136c2:	e7dc      	b.n	801367e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80136c4:	24026410 	.word	0x24026410

080136c8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80136c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136ca:	6803      	ldr	r3, [r0, #0]
 80136cc:	4604      	mov	r4, r0
 80136ce:	4601      	mov	r1, r0
 80136d0:	4668      	mov	r0, sp
 80136d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80136d4:	4798      	blx	r3
 80136d6:	2100      	movs	r1, #0
 80136d8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80136dc:	4668      	mov	r0, sp
 80136de:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80136e2:	9102      	str	r1, [sp, #8]
 80136e4:	a902      	add	r1, sp, #8
 80136e6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80136ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80136ee:	f7fd fc7f 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 80136f2:	6823      	ldr	r3, [r4, #0]
 80136f4:	4669      	mov	r1, sp
 80136f6:	4620      	mov	r0, r4
 80136f8:	691b      	ldr	r3, [r3, #16]
 80136fa:	4798      	blx	r3
 80136fc:	b004      	add	sp, #16
 80136fe:	bd10      	pop	{r4, pc}

08013700 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8013700:	2101      	movs	r1, #1
 8013702:	2200      	movs	r2, #0
 8013704:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8013708:	490a      	ldr	r1, [pc, #40]	@ (8013734 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801370a:	8082      	strh	r2, [r0, #4]
 801370c:	6001      	str	r1, [r0, #0]
 801370e:	21ff      	movs	r1, #255	@ 0xff
 8013710:	80c2      	strh	r2, [r0, #6]
 8013712:	8102      	strh	r2, [r0, #8]
 8013714:	8142      	strh	r2, [r0, #10]
 8013716:	8182      	strh	r2, [r0, #12]
 8013718:	81c2      	strh	r2, [r0, #14]
 801371a:	8202      	strh	r2, [r0, #16]
 801371c:	8242      	strh	r2, [r0, #18]
 801371e:	61c2      	str	r2, [r0, #28]
 8013720:	8402      	strh	r2, [r0, #32]
 8013722:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013724:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8013728:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 801372c:	6282      	str	r2, [r0, #40]	@ 0x28
 801372e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013732:	4770      	bx	lr
 8013734:	08029fbc 	.word	0x08029fbc

08013738 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013738:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 801373c:	4770      	bx	lr

0801373e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801373e:	b510      	push	{r4, lr}
 8013740:	4604      	mov	r4, r0
 8013742:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013744:	b150      	cbz	r0, 801375c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013746:	6803      	ldr	r3, [r0, #0]
 8013748:	68db      	ldr	r3, [r3, #12]
 801374a:	4798      	blx	r3
 801374c:	b130      	cbz	r0, 801375c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801374e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013750:	4621      	mov	r1, r4
 8013752:	6803      	ldr	r3, [r0, #0]
 8013754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013758:	689b      	ldr	r3, [r3, #8]
 801375a:	4718      	bx	r3
 801375c:	bd10      	pop	{r4, pc}

0801375e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801375e:	790b      	ldrb	r3, [r1, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	bf0c      	ite	eq
 8013764:	2301      	moveq	r3, #1
 8013766:	2300      	movne	r3, #0
 8013768:	b570      	push	{r4, r5, r6, lr}
 801376a:	4604      	mov	r4, r0
 801376c:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013770:	460e      	mov	r6, r1
 8013772:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8013776:	d109      	bne.n	801378c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8013778:	b14d      	cbz	r5, 801378e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801377a:	7933      	ldrb	r3, [r6, #4]
 801377c:	2b01      	cmp	r3, #1
 801377e:	d10c      	bne.n	801379a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	4620      	mov	r0, r4
 8013784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801378a:	4718      	bx	r3
 801378c:	b12d      	cbz	r5, 801379a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	4620      	mov	r0, r4
 8013792:	695b      	ldr	r3, [r3, #20]
 8013794:	4798      	blx	r3
 8013796:	2d00      	cmp	r5, #0
 8013798:	d1ef      	bne.n	801377a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801379a:	bd70      	pop	{r4, r5, r6, pc}

0801379c <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 801379c:	b508      	push	{r3, lr}
 801379e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80137a2:	b10b      	cbz	r3, 80137a8 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 80137a4:	f7ef ffc3 	bl	800372e <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80137a8:	bd08      	pop	{r3, pc}

080137aa <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80137aa:	6803      	ldr	r3, [r0, #0]
 80137ac:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 80137b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80137b2:	4718      	bx	r3

080137b4 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 80137b4:	4770      	bx	lr

080137b6 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 80137b6:	b510      	push	{r4, lr}
 80137b8:	4604      	mov	r4, r0
 80137ba:	212c      	movs	r1, #44	@ 0x2c
 80137bc:	f011 febf 	bl	802553e <_ZdlPvj>
 80137c0:	4620      	mov	r0, r4
 80137c2:	bd10      	pop	{r4, pc}

080137c4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80137c4:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80137c8:	2bff      	cmp	r3, #255	@ 0xff
 80137ca:	b510      	push	{r4, lr}
 80137cc:	d104      	bne.n	80137d8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 80137ce:	8cca      	ldrh	r2, [r1, #38]	@ 0x26
 80137d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d105      	bne.n	80137e4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 80137d8:	2300      	movs	r3, #0
 80137da:	8003      	strh	r3, [r0, #0]
 80137dc:	8043      	strh	r3, [r0, #2]
 80137de:	8083      	strh	r3, [r0, #4]
 80137e0:	80c3      	strh	r3, [r0, #6]
 80137e2:	bd10      	pop	{r4, pc}
 80137e4:	2300      	movs	r3, #0
 80137e6:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80137ea:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 80137ee:	8003      	strh	r3, [r0, #0]
 80137f0:	8043      	strh	r3, [r0, #2]
 80137f2:	8084      	strh	r4, [r0, #4]
 80137f4:	80c2      	strh	r2, [r0, #6]
 80137f6:	e7f4      	b.n	80137e2 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

080137f8 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 80137f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137fc:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8013800:	b087      	sub	sp, #28
 8013802:	4604      	mov	r4, r0
 8013804:	4689      	mov	r9, r1
 8013806:	b363      	cbz	r3, 8013862 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8013808:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 801380a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801380e:	429a      	cmp	r2, r3
 8013810:	d027      	beq.n	8013862 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8013812:	ad06      	add	r5, sp, #24
 8013814:	2700      	movs	r7, #0
 8013816:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801381a:	4628      	mov	r0, r5
 801381c:	f007 f8cc 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013820:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013824:	a904      	add	r1, sp, #16
 8013826:	f8ad 0014 	strh.w	r0, [sp, #20]
 801382a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801382e:	4620      	mov	r0, r4
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	9704      	str	r7, [sp, #16]
 8013834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013836:	4798      	blx	r3
 8013838:	f7f0 fd80 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 801383c:	6803      	ldr	r3, [r0, #0]
 801383e:	4606      	mov	r6, r0
 8013840:	4628      	mov	r0, r5
 8013842:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8013846:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8013848:	f8ad 300c 	strh.w	r3, [sp, #12]
 801384c:	f007 f96e 	bl	801ab2c <_ZNK8touchgfx6Bitmap7getDataEv>
 8013850:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013854:	4601      	mov	r1, r0
 8013856:	9701      	str	r7, [sp, #4]
 8013858:	aa04      	add	r2, sp, #16
 801385a:	9300      	str	r3, [sp, #0]
 801385c:	4630      	mov	r0, r6
 801385e:	464b      	mov	r3, r9
 8013860:	47c0      	blx	r8
 8013862:	b007      	add	sp, #28
 8013864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013868 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8013868:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801386a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801386e:	460d      	mov	r5, r1
 8013870:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8013874:	2100      	movs	r1, #0
 8013876:	f8ad 3006 	strh.w	r3, [sp, #6]
 801387a:	4604      	mov	r4, r0
 801387c:	6803      	ldr	r3, [r0, #0]
 801387e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013884:	9100      	str	r1, [sp, #0]
 8013886:	4669      	mov	r1, sp
 8013888:	4798      	blx	r3
 801388a:	4621      	mov	r1, r4
 801388c:	a802      	add	r0, sp, #8
 801388e:	f004 fc4f 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013892:	f7f0 fd53 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8013896:	6803      	ldr	r3, [r0, #0]
 8013898:	aa02      	add	r2, sp, #8
 801389a:	4669      	mov	r1, sp
 801389c:	695e      	ldr	r6, [r3, #20]
 801389e:	462b      	mov	r3, r5
 80138a0:	47b0      	blx	r6
 80138a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80138a6:	2800      	cmp	r0, #0
 80138a8:	bf08      	it	eq
 80138aa:	461d      	moveq	r5, r3
 80138ac:	84e5      	strh	r5, [r4, #38]	@ 0x26
 80138ae:	b004      	add	sp, #16
 80138b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080138b4 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80138b4:	2200      	movs	r2, #0
 80138b6:	8082      	strh	r2, [r0, #4]
 80138b8:	80c2      	strh	r2, [r0, #6]
 80138ba:	8102      	strh	r2, [r0, #8]
 80138bc:	8142      	strh	r2, [r0, #10]
 80138be:	8182      	strh	r2, [r0, #12]
 80138c0:	81c2      	strh	r2, [r0, #14]
 80138c2:	8202      	strh	r2, [r0, #16]
 80138c4:	8242      	strh	r2, [r0, #18]
 80138c6:	61c2      	str	r2, [r0, #28]
 80138c8:	8402      	strh	r2, [r0, #32]
 80138ca:	8442      	strh	r2, [r0, #34]	@ 0x22
 80138cc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80138d0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80138d4:	2201      	movs	r2, #1
 80138d6:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 80138da:	4a04      	ldr	r2, [pc, #16]	@ (80138ec <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 80138dc:	6002      	str	r2, [r0, #0]
 80138de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80138e2:	84c2      	strh	r2, [r0, #38]	@ 0x26
 80138e4:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
 80138e8:	4770      	bx	lr
 80138ea:	bf00      	nop
 80138ec:	0802a0a4 	.word	0x0802a0a4

080138f0 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80138f0:	2000      	movs	r0, #0
 80138f2:	4770      	bx	lr

080138f4 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80138f4:	4b07      	ldr	r3, [pc, #28]	@ (8013914 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80138f6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80138f8:	881b      	ldrh	r3, [r3, #0]
 80138fa:	4293      	cmp	r3, r2
 80138fc:	bf81      	itttt	hi
 80138fe:	4b06      	ldrhi	r3, [pc, #24]	@ (8013918 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013900:	681b      	ldrhi	r3, [r3, #0]
 8013902:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8013906:	7858      	ldrbhi	r0, [r3, #1]
 8013908:	bf8c      	ite	hi
 801390a:	f000 0003 	andhi.w	r0, r0, #3
 801390e:	2000      	movls	r0, #0
 8013910:	4770      	bx	lr
 8013912:	bf00      	nop
 8013914:	24026474 	.word	0x24026474
 8013918:	24026470 	.word	0x24026470

0801391c <_ZN8touchgfx8TextAreaD1Ev>:
 801391c:	4770      	bx	lr
	...

08013920 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013920:	4b11      	ldr	r3, [pc, #68]	@ (8013968 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8013922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013926:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013928:	4604      	mov	r4, r0
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	428b      	cmp	r3, r1
 801392e:	d918      	bls.n	8013962 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013930:	6803      	ldr	r3, [r0, #0]
 8013932:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8013934:	4b0d      	ldr	r3, [pc, #52]	@ (801396c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8013936:	6818      	ldr	r0, [r3, #0]
 8013938:	f7f3 fa20 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 801393c:	6823      	ldr	r3, [r4, #0]
 801393e:	4606      	mov	r6, r0
 8013940:	4620      	mov	r0, r4
 8013942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013944:	4798      	blx	r3
 8013946:	6823      	ldr	r3, [r4, #0]
 8013948:	4607      	mov	r7, r0
 801394a:	4620      	mov	r0, r4
 801394c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013950:	4798      	blx	r3
 8013952:	463a      	mov	r2, r7
 8013954:	4603      	mov	r3, r0
 8013956:	4631      	mov	r1, r6
 8013958:	4620      	mov	r0, r4
 801395a:	46ac      	mov	ip, r5
 801395c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013960:	4760      	bx	ip
 8013962:	2000      	movs	r0, #0
 8013964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013968:	24026474 	.word	0x24026474
 801396c:	2402647c 	.word	0x2402647c

08013970 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013970:	4b18      	ldr	r3, [pc, #96]	@ (80139d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013972:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013976:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013978:	4604      	mov	r4, r0
 801397a:	881b      	ldrh	r3, [r3, #0]
 801397c:	428b      	cmp	r3, r1
 801397e:	d926      	bls.n	80139ce <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013980:	4b15      	ldr	r3, [pc, #84]	@ (80139d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013988:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801398c:	4b13      	ldr	r3, [pc, #76]	@ (80139dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801398e:	7855      	ldrb	r5, [r2, #1]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8013996:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801399a:	6833      	ldr	r3, [r6, #0]
 801399c:	69df      	ldr	r7, [r3, #28]
 801399e:	4b10      	ldr	r3, [pc, #64]	@ (80139e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80139a0:	6818      	ldr	r0, [r3, #0]
 80139a2:	f7f3 f9eb 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 80139a6:	6823      	ldr	r3, [r4, #0]
 80139a8:	4680      	mov	r8, r0
 80139aa:	4620      	mov	r0, r4
 80139ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80139ae:	4798      	blx	r3
 80139b0:	6823      	ldr	r3, [r4, #0]
 80139b2:	4681      	mov	r9, r0
 80139b4:	4620      	mov	r0, r4
 80139b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80139ba:	4798      	blx	r3
 80139bc:	464b      	mov	r3, r9
 80139be:	9000      	str	r0, [sp, #0]
 80139c0:	4642      	mov	r2, r8
 80139c2:	4629      	mov	r1, r5
 80139c4:	4630      	mov	r0, r6
 80139c6:	47b8      	blx	r7
 80139c8:	b003      	add	sp, #12
 80139ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139ce:	2000      	movs	r0, #0
 80139d0:	e7fa      	b.n	80139c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80139d2:	bf00      	nop
 80139d4:	24026474 	.word	0x24026474
 80139d8:	24026470 	.word	0x24026470
 80139dc:	24026478 	.word	0x24026478
 80139e0:	2402647c 	.word	0x2402647c

080139e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80139e4:	b40e      	push	{r1, r2, r3}
 80139e6:	4b30      	ldr	r3, [pc, #192]	@ (8013aa8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80139e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139ec:	881a      	ldrh	r2, [r3, #0]
 80139ee:	b09d      	sub	sp, #116	@ 0x74
 80139f0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80139f2:	4604      	mov	r4, r0
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d954      	bls.n	8013aa2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80139f8:	aa26      	add	r2, sp, #152	@ 0x98
 80139fa:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8013aac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80139fe:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8013ab0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8013a02:	9202      	str	r2, [sp, #8]
 8013a04:	f8d9 2000 	ldr.w	r2, [r9]
 8013a08:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8013a10:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013a14:	682b      	ldr	r3, [r5, #0]
 8013a16:	4628      	mov	r0, r5
 8013a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a1a:	4798      	blx	r3
 8013a1c:	4606      	mov	r6, r0
 8013a1e:	b207      	sxth	r7, r0
 8013a20:	a803      	add	r0, sp, #12
 8013a22:	f005 fb53 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 8013a26:	682b      	ldr	r3, [r5, #0]
 8013a28:	4628      	mov	r0, r5
 8013a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a2c:	4798      	blx	r3
 8013a2e:	682b      	ldr	r3, [r5, #0]
 8013a30:	4682      	mov	sl, r0
 8013a32:	4628      	mov	r0, r5
 8013a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013a36:	4798      	blx	r3
 8013a38:	4653      	mov	r3, sl
 8013a3a:	9000      	str	r0, [sp, #0]
 8013a3c:	a803      	add	r0, sp, #12
 8013a3e:	9a02      	ldr	r2, [sp, #8]
 8013a40:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8013a42:	f005 fb9e 	bl	8019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013a46:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013a48:	f8d9 3000 	ldr.w	r3, [r9]
 8013a4c:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8013a50:	8925      	ldrh	r5, [r4, #8]
 8013a52:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8013a56:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8013a5a:	eba5 050c 	sub.w	r5, r5, ip
 8013a5e:	784a      	ldrb	r2, [r1, #1]
 8013a60:	f8d8 3000 	ldr.w	r3, [r8]
 8013a64:	b22d      	sxth	r5, r5
 8013a66:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8013a6a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013a6e:	9500      	str	r5, [sp, #0]
 8013a70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013a74:	a803      	add	r0, sp, #12
 8013a76:	f002 fd6b 	bl	8016550 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8013a7a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8013a7e:	b203      	sxth	r3, r0
 8013a80:	18b9      	adds	r1, r7, r2
 8013a82:	2900      	cmp	r1, #0
 8013a84:	dd0b      	ble.n	8013a9e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8013a86:	3b01      	subs	r3, #1
 8013a88:	fb13 f302 	smulbb	r3, r3, r2
 8013a8c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013a90:	b21f      	sxth	r7, r3
 8013a92:	4638      	mov	r0, r7
 8013a94:	b01d      	add	sp, #116	@ 0x74
 8013a96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a9a:	b003      	add	sp, #12
 8013a9c:	4770      	bx	lr
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	dcf7      	bgt.n	8013a92 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013aa2:	2700      	movs	r7, #0
 8013aa4:	e7f5      	b.n	8013a92 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013aa6:	bf00      	nop
 8013aa8:	24026474 	.word	0x24026474
 8013aac:	24026470 	.word	0x24026470
 8013ab0:	24026478 	.word	0x24026478

08013ab4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8013ab4:	4bbd      	ldr	r3, [pc, #756]	@ (8013dac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8013ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aba:	460c      	mov	r4, r1
 8013abc:	881b      	ldrh	r3, [r3, #0]
 8013abe:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8013ac0:	b0a9      	sub	sp, #164	@ 0xa4
 8013ac2:	4680      	mov	r8, r0
 8013ac4:	428b      	cmp	r3, r1
 8013ac6:	d809      	bhi.n	8013adc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8013ac8:	2300      	movs	r3, #0
 8013aca:	f04f 32ff 	mov.w	r2, #4294967295
 8013ace:	6083      	str	r3, [r0, #8]
 8013ad0:	e9c0 3200 	strd	r3, r2, [r0]
 8013ad4:	4640      	mov	r0, r8
 8013ad6:	b029      	add	sp, #164	@ 0xa4
 8013ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013adc:	4eb4      	ldr	r6, [pc, #720]	@ (8013db0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8013ade:	6833      	ldr	r3, [r6, #0]
 8013ae0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8013ae4:	4bb3      	ldr	r3, [pc, #716]	@ (8013db4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013aec:	4bb2      	ldr	r3, [pc, #712]	@ (8013db8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013aee:	6818      	ldr	r0, [r3, #0]
 8013af0:	f7f3 f944 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 8013af4:	682b      	ldr	r3, [r5, #0]
 8013af6:	4681      	mov	r9, r0
 8013af8:	4628      	mov	r0, r5
 8013afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013afc:	4798      	blx	r3
 8013afe:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8013b00:	b203      	sxth	r3, r0
 8013b02:	4682      	mov	sl, r0
 8013b04:	4407      	add	r7, r0
 8013b06:	a80f      	add	r0, sp, #60	@ 0x3c
 8013b08:	9304      	str	r3, [sp, #16]
 8013b0a:	b2bb      	uxth	r3, r7
 8013b0c:	9303      	str	r3, [sp, #12]
 8013b0e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f040 80a5 	bne.w	8013c62 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8013b18:	f005 fad8 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 8013b1c:	682b      	ldr	r3, [r5, #0]
 8013b1e:	4628      	mov	r0, r5
 8013b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b22:	4798      	blx	r3
 8013b24:	682b      	ldr	r3, [r5, #0]
 8013b26:	4606      	mov	r6, r0
 8013b28:	4628      	mov	r0, r5
 8013b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013b2c:	4798      	blx	r3
 8013b2e:	6823      	ldr	r3, [r4, #0]
 8013b30:	4607      	mov	r7, r0
 8013b32:	4620      	mov	r0, r4
 8013b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013b36:	4798      	blx	r3
 8013b38:	6823      	ldr	r3, [r4, #0]
 8013b3a:	4683      	mov	fp, r0
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b42:	4798      	blx	r3
 8013b44:	463b      	mov	r3, r7
 8013b46:	4649      	mov	r1, r9
 8013b48:	4632      	mov	r2, r6
 8013b4a:	2600      	movs	r6, #0
 8013b4c:	e9cd b000 	strd	fp, r0, [sp]
 8013b50:	a80f      	add	r0, sp, #60	@ 0x3c
 8013b52:	4637      	mov	r7, r6
 8013b54:	f005 fb2a 	bl	80191ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013b58:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013b5c:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8013db0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8013b60:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013b64:	bf0c      	ite	eq
 8013b66:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8013b6a:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8013b6e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013b70:	4629      	mov	r1, r5
 8013b72:	f8db 3000 	ldr.w	r3, [fp]
 8013b76:	a80f      	add	r0, sp, #60	@ 0x3c
 8013b78:	3701      	adds	r7, #1
 8013b7a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013b7e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013b82:	b2bf      	uxth	r7, r7
 8013b84:	785b      	ldrb	r3, [r3, #1]
 8013b86:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013b8a:	f002 f9e8 	bl	8015f5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013b8e:	9b03      	ldr	r3, [sp, #12]
 8013b90:	4286      	cmp	r6, r0
 8013b92:	eba9 0903 	sub.w	r9, r9, r3
 8013b96:	bfb8      	it	lt
 8013b98:	4606      	movlt	r6, r0
 8013b9a:	a80f      	add	r0, sp, #60	@ 0x3c
 8013b9c:	fa0f f989 	sxth.w	r9, r9
 8013ba0:	b236      	sxth	r6, r6
 8013ba2:	f005 faba 	bl	801911a <_ZN8touchgfx12TextProvider11endOfStringEv>
 8013ba6:	b918      	cbnz	r0, 8013bb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013ba8:	7a2b      	ldrb	r3, [r5, #8]
 8013baa:	444b      	add	r3, r9
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	dcde      	bgt.n	8013b6e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8013bb0:	9b03      	ldr	r3, [sp, #12]
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	9a04      	ldr	r2, [sp, #16]
 8013bb6:	fb13 f707 	smulbb	r7, r3, r7
 8013bba:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013bbc:	f895 9009 	ldrb.w	r9, [r5, #9]
 8013bc0:	1aff      	subs	r7, r7, r3
 8013bc2:	b2bf      	uxth	r7, r7
 8013bc4:	b23b      	sxth	r3, r7
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	bfa8      	it	ge
 8013bca:	4657      	movge	r7, sl
 8013bcc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013bd0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013bd4:	6823      	ldr	r3, [r4, #0]
 8013bd6:	444f      	add	r7, r9
 8013bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bda:	bf08      	it	eq
 8013bdc:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013be0:	fa1f f987 	uxth.w	r9, r7
 8013be4:	bf18      	it	ne
 8013be6:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8013bea:	4798      	blx	r3
 8013bec:	2801      	cmp	r0, #1
 8013bee:	fa0f f789 	sxth.w	r7, r9
 8013bf2:	b2b3      	uxth	r3, r6
 8013bf4:	f000 80e2 	beq.w	8013dbc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8013bf8:	2802      	cmp	r0, #2
 8013bfa:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8013bfe:	f000 80e3 	beq.w	8013dc8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8013c02:	7aea      	ldrb	r2, [r5, #11]
 8013c04:	b236      	sxth	r6, r6
 8013c06:	7b2d      	ldrb	r5, [r5, #12]
 8013c08:	1ab6      	subs	r6, r6, r2
 8013c0a:	442a      	add	r2, r5
 8013c0c:	fa1f fa86 	uxth.w	sl, r6
 8013c10:	4413      	add	r3, r2
 8013c12:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8013c16:	fa0f fb8a 	sxth.w	fp, sl
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	2a02      	cmp	r2, #2
 8013c1e:	b21e      	sxth	r6, r3
 8013c20:	f000 80d6 	beq.w	8013dd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8013c24:	2a03      	cmp	r2, #3
 8013c26:	f000 80de 	beq.w	8013de6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8013c2a:	2a01      	cmp	r2, #1
 8013c2c:	f040 80e6 	bne.w	8013dfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8013c30:	8925      	ldrh	r5, [r4, #8]
 8013c32:	4633      	mov	r3, r6
 8013c34:	463e      	mov	r6, r7
 8013c36:	eba5 0909 	sub.w	r9, r5, r9
 8013c3a:	461f      	mov	r7, r3
 8013c3c:	465d      	mov	r5, fp
 8013c3e:	fa0f fb89 	sxth.w	fp, r9
 8013c42:	4b5d      	ldr	r3, [pc, #372]	@ (8013db8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013c44:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013c46:	6818      	ldr	r0, [r3, #0]
 8013c48:	f7f3 f898 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 8013c4c:	f8a8 b000 	strh.w	fp, [r8]
 8013c50:	f8a8 5002 	strh.w	r5, [r8, #2]
 8013c54:	f8a8 6004 	strh.w	r6, [r8, #4]
 8013c58:	f8a8 7006 	strh.w	r7, [r8, #6]
 8013c5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c60:	e738      	b.n	8013ad4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8013c62:	f005 fa33 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 8013c66:	682b      	ldr	r3, [r5, #0]
 8013c68:	4628      	mov	r0, r5
 8013c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c6c:	4798      	blx	r3
 8013c6e:	682b      	ldr	r3, [r5, #0]
 8013c70:	4607      	mov	r7, r0
 8013c72:	4628      	mov	r0, r5
 8013c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013c76:	4798      	blx	r3
 8013c78:	6823      	ldr	r3, [r4, #0]
 8013c7a:	4683      	mov	fp, r0
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013c80:	4798      	blx	r3
 8013c82:	6822      	ldr	r2, [r4, #0]
 8013c84:	9005      	str	r0, [sp, #20]
 8013c86:	4620      	mov	r0, r4
 8013c88:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013c8c:	4790      	blx	r2
 8013c8e:	9b05      	ldr	r3, [sp, #20]
 8013c90:	463a      	mov	r2, r7
 8013c92:	4649      	mov	r1, r9
 8013c94:	9001      	str	r0, [sp, #4]
 8013c96:	a80f      	add	r0, sp, #60	@ 0x3c
 8013c98:	9300      	str	r3, [sp, #0]
 8013c9a:	465b      	mov	r3, fp
 8013c9c:	f005 fa86 	bl	80191ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013ca0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013ca4:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8013ca8:	af0f      	add	r7, sp, #60	@ 0x3c
 8013caa:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013cae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013cb2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013cb4:	bf0a      	itet	eq
 8013cb6:	464a      	moveq	r2, r9
 8013cb8:	461a      	movne	r2, r3
 8013cba:	4699      	moveq	r9, r3
 8013cbc:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8013cc0:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8013cc4:	1ad2      	subs	r2, r2, r3
 8013cc6:	6833      	ldr	r3, [r6, #0]
 8013cc8:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8013ccc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013cd0:	7859      	ldrb	r1, [r3, #1]
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	9707      	str	r7, [sp, #28]
 8013cd6:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013cda:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013cde:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8013ce2:	f88d 1020 	strb.w	r1, [sp, #32]
 8013ce6:	9509      	str	r5, [sp, #36]	@ 0x24
 8013ce8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013cec:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8013cf0:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8013cf4:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013cf8:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8013cfc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013d00:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8013d04:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013d08:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8013d0c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013d10:	b350      	cbz	r0, 8013d68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013d12:	682b      	ldr	r3, [r5, #0]
 8013d14:	4628      	mov	r0, r5
 8013d16:	695b      	ldr	r3, [r3, #20]
 8013d18:	4798      	blx	r3
 8013d1a:	4607      	mov	r7, r0
 8013d1c:	b320      	cbz	r0, 8013d68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d20:	4639      	mov	r1, r7
 8013d22:	6803      	ldr	r3, [r0, #0]
 8013d24:	68db      	ldr	r3, [r3, #12]
 8013d26:	4798      	blx	r3
 8013d28:	4606      	mov	r6, r0
 8013d2a:	b1e8      	cbz	r0, 8013d68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013d2c:	7b43      	ldrb	r3, [r0, #13]
 8013d2e:	7a82      	ldrb	r2, [r0, #10]
 8013d30:	005b      	lsls	r3, r3, #1
 8013d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013d36:	4313      	orrs	r3, r2
 8013d38:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8013d3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8013d40:	2b06      	cmp	r3, #6
 8013d42:	d111      	bne.n	8013d68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013d44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d46:	4632      	mov	r2, r6
 8013d48:	4639      	mov	r1, r7
 8013d4a:	6803      	ldr	r3, [r0, #0]
 8013d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d4e:	4798      	blx	r3
 8013d50:	7b73      	ldrb	r3, [r6, #13]
 8013d52:	005b      	lsls	r3, r3, #1
 8013d54:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013d58:	7ab3      	ldrb	r3, [r6, #10]
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	4418      	add	r0, r3
 8013d5e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013d62:	4418      	add	r0, r3
 8013d64:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8013d68:	2600      	movs	r6, #0
 8013d6a:	4637      	mov	r7, r6
 8013d6c:	a806      	add	r0, sp, #24
 8013d6e:	3701      	adds	r7, #1
 8013d70:	f002 faeb 	bl	801634a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013d74:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8013d78:	9b03      	ldr	r3, [sp, #12]
 8013d7a:	b2bf      	uxth	r7, r7
 8013d7c:	4286      	cmp	r6, r0
 8013d7e:	eba9 0903 	sub.w	r9, r9, r3
 8013d82:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013d86:	bfb8      	it	lt
 8013d88:	4606      	movlt	r6, r0
 8013d8a:	fa0f f989 	sxth.w	r9, r9
 8013d8e:	b236      	sxth	r6, r6
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	f43f af0d 	beq.w	8013bb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013d96:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	f47f af08 	bne.w	8013bb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013da0:	7a2b      	ldrb	r3, [r5, #8]
 8013da2:	444b      	add	r3, r9
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	dce1      	bgt.n	8013d6c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8013da8:	e702      	b.n	8013bb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013daa:	bf00      	nop
 8013dac:	24026474 	.word	0x24026474
 8013db0:	24026470 	.word	0x24026470
 8013db4:	24026478 	.word	0x24026478
 8013db8:	2402647c 	.word	0x2402647c
 8013dbc:	ebaa 0606 	sub.w	r6, sl, r6
 8013dc0:	2002      	movs	r0, #2
 8013dc2:	fb96 f6f0 	sdiv	r6, r6, r0
 8013dc6:	e71c      	b.n	8013c02 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013dc8:	441e      	add	r6, r3
 8013dca:	ebaa 0606 	sub.w	r6, sl, r6
 8013dce:	e718      	b.n	8013c02 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013dd0:	8925      	ldrh	r5, [r4, #8]
 8013dd2:	1aed      	subs	r5, r5, r3
 8013dd4:	eba5 050a 	sub.w	r5, r5, sl
 8013dd8:	fa0f fb85 	sxth.w	fp, r5
 8013ddc:	8965      	ldrh	r5, [r4, #10]
 8013dde:	eba5 0509 	sub.w	r5, r5, r9
 8013de2:	b22d      	sxth	r5, r5
 8013de4:	e72d      	b.n	8013c42 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013de6:	8965      	ldrh	r5, [r4, #10]
 8013de8:	f04f 0b00 	mov.w	fp, #0
 8013dec:	1aed      	subs	r5, r5, r3
 8013dee:	4633      	mov	r3, r6
 8013df0:	463e      	mov	r6, r7
 8013df2:	eba5 050a 	sub.w	r5, r5, sl
 8013df6:	461f      	mov	r7, r3
 8013df8:	b22d      	sxth	r5, r5
 8013dfa:	e722      	b.n	8013c42 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013dfc:	2500      	movs	r5, #0
 8013dfe:	e720      	b.n	8013c42 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08013e00 <_ZN8touchgfx8TextAreaD0Ev>:
 8013e00:	b510      	push	{r4, lr}
 8013e02:	4604      	mov	r4, r0
 8013e04:	2148      	movs	r1, #72	@ 0x48
 8013e06:	f011 fb9a 	bl	802553e <_ZdlPvj>
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	bd10      	pop	{r4, pc}
	...

08013e10 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013e10:	b513      	push	{r0, r1, r4, lr}
 8013e12:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8013e16:	4604      	mov	r4, r0
 8013e18:	b1fb      	cbz	r3, 8013e5a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013e1a:	4b16      	ldr	r3, [pc, #88]	@ (8013e74 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013e1c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013e1e:	881b      	ldrh	r3, [r3, #0]
 8013e20:	428b      	cmp	r3, r1
 8013e22:	d91a      	bls.n	8013e5a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013e24:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	dd16      	ble.n	8013e5a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013e2c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	dd12      	ble.n	8013e5a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013e34:	4b10      	ldr	r3, [pc, #64]	@ (8013e78 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8013e36:	6818      	ldr	r0, [r3, #0]
 8013e38:	f7f2 ffa0 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 8013e3c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8013e40:	6822      	ldr	r2, [r4, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	db06      	blt.n	8013e54 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013e46:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	db02      	blt.n	8013e54 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013e4e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013e50:	4298      	cmp	r0, r3
 8013e52:	d004      	beq.n	8013e5e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013e54:	6953      	ldr	r3, [r2, #20]
 8013e56:	4620      	mov	r0, r4
 8013e58:	4798      	blx	r3
 8013e5a:	b002      	add	sp, #8
 8013e5c:	bd10      	pop	{r4, pc}
 8013e5e:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8013e62:	466b      	mov	r3, sp
 8013e64:	6912      	ldr	r2, [r2, #16]
 8013e66:	c903      	ldmia	r1, {r0, r1}
 8013e68:	e883 0003 	stmia.w	r3, {r0, r1}
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	4620      	mov	r0, r4
 8013e70:	4790      	blx	r2
 8013e72:	e7f2      	b.n	8013e5a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013e74:	24026474 	.word	0x24026474
 8013e78:	2402647c 	.word	0x2402647c

08013e7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013e7c:	4b45      	ldr	r3, [pc, #276]	@ (8013f94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e82:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013e84:	b08e      	sub	sp, #56	@ 0x38
 8013e86:	881b      	ldrh	r3, [r3, #0]
 8013e88:	4604      	mov	r4, r0
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d97e      	bls.n	8013f8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013e8e:	6808      	ldr	r0, [r1, #0]
 8013e90:	ab05      	add	r3, sp, #20
 8013e92:	6849      	ldr	r1, [r1, #4]
 8013e94:	4d40      	ldr	r5, [pc, #256]	@ (8013f98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8013e96:	c303      	stmia	r3!, {r0, r1}
 8013e98:	4611      	mov	r1, r2
 8013e9a:	6828      	ldr	r0, [r5, #0]
 8013e9c:	f7f2 ff6e 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 8013ea0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	db11      	blt.n	8013ecc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013ea8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	db0d      	blt.n	8013ecc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013eb0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013eb2:	4298      	cmp	r0, r3
 8013eb4:	d10a      	bne.n	8013ecc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013eb6:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8013eba:	ab09      	add	r3, sp, #36	@ 0x24
 8013ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ec0:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	a805      	add	r0, sp, #20
 8013ec8:	f7fd f892 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 8013ecc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	dd5b      	ble.n	8013f8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013ed4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	dd57      	ble.n	8013f8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013edc:	4f2f      	ldr	r7, [pc, #188]	@ (8013f9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013ede:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8013fa0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013eee:	2e00      	cmp	r6, #0
 8013ef0:	d04c      	beq.n	8013f8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8013efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013efc:	4798      	blx	r3
 8013efe:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8013f06:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013f0a:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8013f0e:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8013f12:	785b      	ldrb	r3, [r3, #1]
 8013f14:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8013f18:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013f1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013f1e:	9609      	str	r6, [sp, #36]	@ 0x24
 8013f20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f24:	4b1f      	ldr	r3, [pc, #124]	@ (8013fa4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013f26:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8013f30:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013f32:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8013f36:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8013f3a:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8013f3e:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8013f42:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013f46:	b10a      	cbz	r2, 8013f4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013f48:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8013f4a:	b906      	cbnz	r6, 8013f4e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013f4c:	689e      	ldr	r6, [r3, #8]
 8013f4e:	af07      	add	r7, sp, #28
 8013f50:	4621      	mov	r1, r4
 8013f52:	4638      	mov	r0, r7
 8013f54:	f004 f8ec 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f58:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013f5a:	6828      	ldr	r0, [r5, #0]
 8013f5c:	f7f2 ff0e 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 8013f60:	6823      	ldr	r3, [r4, #0]
 8013f62:	4605      	mov	r5, r0
 8013f64:	4620      	mov	r0, r4
 8013f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013f68:	4798      	blx	r3
 8013f6a:	6823      	ldr	r3, [r4, #0]
 8013f6c:	4680      	mov	r8, r0
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f74:	4798      	blx	r3
 8013f76:	ab09      	add	r3, sp, #36	@ 0x24
 8013f78:	9501      	str	r5, [sp, #4]
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	ab05      	add	r3, sp, #20
 8013f7e:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013f82:	4630      	mov	r0, r6
 8013f84:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013f88:	f7f2 feaa 	bl	8006ce0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013f8c:	b00e      	add	sp, #56	@ 0x38
 8013f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f92:	bf00      	nop
 8013f94:	24026474 	.word	0x24026474
 8013f98:	2402647c 	.word	0x2402647c
 8013f9c:	24026470 	.word	0x24026470
 8013fa0:	24026478 	.word	0x24026478
 8013fa4:	24026418 	.word	0x24026418

08013fa8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013fa8:	b538      	push	{r3, r4, r5, lr}
 8013faa:	4b0e      	ldr	r3, [pc, #56]	@ (8013fe4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013fac:	4604      	mov	r4, r0
 8013fae:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013fb0:	881b      	ldrh	r3, [r3, #0]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d214      	bcs.n	8013fe0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013fb6:	6803      	ldr	r3, [r0, #0]
 8013fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013fba:	4798      	blx	r3
 8013fbc:	6823      	ldr	r3, [r4, #0]
 8013fbe:	4605      	mov	r5, r0
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fc4:	4798      	blx	r3
 8013fc6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013fca:	b22d      	sxth	r5, r5
 8013fcc:	4601      	mov	r1, r0
 8013fce:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013fd2:	bf06      	itte	eq
 8013fd4:	4602      	moveq	r2, r0
 8013fd6:	4629      	moveq	r1, r5
 8013fd8:	462a      	movne	r2, r5
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f7fc fdea 	bl	8010bb4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013fe0:	bd38      	pop	{r3, r4, r5, pc}
 8013fe2:	bf00      	nop
 8013fe4:	24026474 	.word	0x24026474

08013fe8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013fe8:	b530      	push	{r4, r5, lr}
 8013fea:	888b      	ldrh	r3, [r1, #4]
 8013fec:	b085      	sub	sp, #20
 8013fee:	4604      	mov	r4, r0
 8013ff0:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013ff2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013ff6:	b923      	cbnz	r3, 8014002 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013ff8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013ffc:	b90b      	cbnz	r3, 8014002 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013ffe:	f7ff ffd3 	bl	8013fa8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8014002:	6823      	ldr	r3, [r4, #0]
 8014004:	466d      	mov	r5, sp
 8014006:	4621      	mov	r1, r4
 8014008:	343c      	adds	r4, #60	@ 0x3c
 801400a:	4628      	mov	r0, r5
 801400c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014010:	4798      	blx	r3
 8014012:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801401a:	b005      	add	sp, #20
 801401c:	bd30      	pop	{r4, r5, pc}

0801401e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801401e:	2300      	movs	r3, #0
 8014020:	8083      	strh	r3, [r0, #4]
 8014022:	80c3      	strh	r3, [r0, #6]
 8014024:	8003      	strh	r3, [r0, #0]
 8014026:	8043      	strh	r3, [r0, #2]
 8014028:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801402c:	2bff      	cmp	r3, #255	@ 0xff
 801402e:	bf01      	itttt	eq
 8014030:	890b      	ldrheq	r3, [r1, #8]
 8014032:	8083      	strheq	r3, [r0, #4]
 8014034:	894b      	ldrheq	r3, [r1, #10]
 8014036:	80c3      	strheq	r3, [r0, #6]
 8014038:	4770      	bx	lr
	...

0801403c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801403c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801403e:	4604      	mov	r4, r0
 8014040:	466b      	mov	r3, sp
 8014042:	6808      	ldr	r0, [r1, #0]
 8014044:	6849      	ldr	r1, [r1, #4]
 8014046:	c303      	stmia	r3!, {r0, r1}
 8014048:	6823      	ldr	r3, [r4, #0]
 801404a:	4669      	mov	r1, sp
 801404c:	4620      	mov	r0, r4
 801404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014050:	4798      	blx	r3
 8014052:	4b08      	ldr	r3, [pc, #32]	@ (8014074 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801405a:	b10a      	cbz	r2, 8014060 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801405c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801405e:	b900      	cbnz	r0, 8014062 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014060:	6898      	ldr	r0, [r3, #8]
 8014062:	6803      	ldr	r3, [r0, #0]
 8014064:	4669      	mov	r1, sp
 8014066:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014068:	6a1d      	ldr	r5, [r3, #32]
 801406a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801406e:	47a8      	blx	r5
 8014070:	b003      	add	sp, #12
 8014072:	bd30      	pop	{r4, r5, pc}
 8014074:	24026418 	.word	0x24026418

08014078 <_ZN8touchgfx3BoxD1Ev>:
 8014078:	4770      	bx	lr

0801407a <_ZN8touchgfx3BoxD0Ev>:
 801407a:	b510      	push	{r4, lr}
 801407c:	4604      	mov	r4, r0
 801407e:	212c      	movs	r1, #44	@ 0x2c
 8014080:	f011 fa5d 	bl	802553e <_ZdlPvj>
 8014084:	4620      	mov	r0, r4
 8014086:	bd10      	pop	{r4, pc}

08014088 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8014088:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801408c:	b12a      	cbz	r2, 801409a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801408e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8014092:	b112      	cbz	r2, 801409a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014094:	6803      	ldr	r3, [r0, #0]
 8014096:	695b      	ldr	r3, [r3, #20]
 8014098:	4718      	bx	r3
 801409a:	4770      	bx	lr

0801409c <_ZN8touchgfx6ButtonD1Ev>:
 801409c:	4770      	bx	lr

0801409e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801409e:	b570      	push	{r4, r5, r6, lr}
 80140a0:	880b      	ldrh	r3, [r1, #0]
 80140a2:	4605      	mov	r5, r0
 80140a4:	4604      	mov	r4, r0
 80140a6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80140a8:	8813      	ldrh	r3, [r2, #0]
 80140aa:	f825 3f30 	strh.w	r3, [r5, #48]!
 80140ae:	4628      	mov	r0, r5
 80140b0:	f006 fc82 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80140b4:	4606      	mov	r6, r0
 80140b6:	4628      	mov	r0, r5
 80140b8:	f006 fcb2 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80140bc:	6823      	ldr	r3, [r4, #0]
 80140be:	4605      	mov	r5, r0
 80140c0:	4631      	mov	r1, r6
 80140c2:	4620      	mov	r0, r4
 80140c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140c6:	4798      	blx	r3
 80140c8:	6823      	ldr	r3, [r4, #0]
 80140ca:	4629      	mov	r1, r5
 80140cc:	4620      	mov	r0, r4
 80140ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80140d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140d4:	4718      	bx	r3

080140d6 <_ZN8touchgfx6ButtonD0Ev>:
 80140d6:	b510      	push	{r4, lr}
 80140d8:	4604      	mov	r4, r0
 80140da:	2134      	movs	r1, #52	@ 0x34
 80140dc:	f011 fa2f 	bl	802553e <_ZdlPvj>
 80140e0:	4620      	mov	r0, r4
 80140e2:	bd10      	pop	{r4, pc}

080140e4 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80140e4:	b510      	push	{r4, lr}
 80140e6:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 80140ea:	4604      	mov	r4, r0
 80140ec:	2bff      	cmp	r3, #255	@ 0xff
 80140ee:	d006      	beq.n	80140fe <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80140f0:	2300      	movs	r3, #0
 80140f2:	8003      	strh	r3, [r0, #0]
 80140f4:	8043      	strh	r3, [r0, #2]
 80140f6:	8083      	strh	r3, [r0, #4]
 80140f8:	80c3      	strh	r3, [r0, #6]
 80140fa:	4620      	mov	r0, r4
 80140fc:	bd10      	pop	{r4, pc}
 80140fe:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8014102:	b11b      	cbz	r3, 801410c <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8014104:	3130      	adds	r1, #48	@ 0x30
 8014106:	f006 fcbf 	bl	801aa88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801410a:	e7f6      	b.n	80140fa <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801410c:	312e      	adds	r1, #46	@ 0x2e
 801410e:	e7fa      	b.n	8014106 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08014110 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8014110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014114:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014118:	b08a      	sub	sp, #40	@ 0x28
 801411a:	4604      	mov	r4, r0
 801411c:	4688      	mov	r8, r1
 801411e:	2b00      	cmp	r3, #0
 8014120:	d066      	beq.n	80141f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8014122:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8014124:	a805      	add	r0, sp, #20
 8014126:	f8ad 3014 	strh.w	r3, [sp, #20]
 801412a:	f006 fc45 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801412e:	4607      	mov	r7, r0
 8014130:	a805      	add	r0, sp, #20
 8014132:	f006 fc75 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014136:	f9b8 6000 	ldrsh.w	r6, [r8]
 801413a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801413e:	2300      	movs	r3, #0
 8014140:	4432      	add	r2, r6
 8014142:	9306      	str	r3, [sp, #24]
 8014144:	b292      	uxth	r2, r2
 8014146:	fa0f fc82 	sxth.w	ip, r2
 801414a:	459c      	cmp	ip, r3
 801414c:	dd52      	ble.n	80141f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801414e:	42b7      	cmp	r7, r6
 8014150:	dd50      	ble.n	80141f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8014152:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8014156:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801415a:	442b      	add	r3, r5
 801415c:	b29b      	uxth	r3, r3
 801415e:	b219      	sxth	r1, r3
 8014160:	2900      	cmp	r1, #0
 8014162:	dd47      	ble.n	80141f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8014164:	42a8      	cmp	r0, r5
 8014166:	dd45      	ble.n	80141f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8014168:	4567      	cmp	r7, ip
 801416a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801416e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8014172:	bfb8      	it	lt
 8014174:	b2ba      	uxthlt	r2, r7
 8014176:	4288      	cmp	r0, r1
 8014178:	f8ad 6018 	strh.w	r6, [sp, #24]
 801417c:	bfb8      	it	lt
 801417e:	b283      	uxthlt	r3, r0
 8014180:	1b92      	subs	r2, r2, r6
 8014182:	f8ad 501a 	strh.w	r5, [sp, #26]
 8014186:	1b5b      	subs	r3, r3, r5
 8014188:	f8ad 201c 	strh.w	r2, [sp, #28]
 801418c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014190:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014194:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014198:	429a      	cmp	r2, r3
 801419a:	d026      	beq.n	80141ea <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801419c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	dd22      	ble.n	80141ea <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80141a4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	dd1e      	ble.n	80141ea <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80141ac:	2300      	movs	r3, #0
 80141ae:	a908      	add	r1, sp, #32
 80141b0:	4620      	mov	r0, r4
 80141b2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80141b6:	6823      	ldr	r3, [r4, #0]
 80141b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141ba:	4798      	blx	r3
 80141bc:	4b0f      	ldr	r3, [pc, #60]	@ (80141fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80141c4:	b10a      	cbz	r2, 80141ca <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80141c6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80141c8:	b900      	cbnz	r0, 80141cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80141ca:	6898      	ldr	r0, [r3, #8]
 80141cc:	2501      	movs	r5, #1
 80141ce:	6801      	ldr	r1, [r0, #0]
 80141d0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80141d4:	9502      	str	r5, [sp, #8]
 80141d6:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 80141da:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80141de:	9401      	str	r4, [sp, #4]
 80141e0:	ac06      	add	r4, sp, #24
 80141e2:	9400      	str	r4, [sp, #0]
 80141e4:	688c      	ldr	r4, [r1, #8]
 80141e6:	a905      	add	r1, sp, #20
 80141e8:	47a0      	blx	r4
 80141ea:	b00a      	add	sp, #40	@ 0x28
 80141ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141f0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80141f2:	e797      	b.n	8014124 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80141f4:	2300      	movs	r3, #0
 80141f6:	9307      	str	r3, [sp, #28]
 80141f8:	e7ca      	b.n	8014190 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80141fa:	bf00      	nop
 80141fc:	24026418 	.word	0x24026418

08014200 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8014200:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8014204:	b12a      	cbz	r2, 8014212 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8014206:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801420a:	b112      	cbz	r2, 8014212 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801420c:	6803      	ldr	r3, [r0, #0]
 801420e:	695b      	ldr	r3, [r3, #20]
 8014210:	4718      	bx	r3
 8014212:	4770      	bx	lr

08014214 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8014214:	4b30      	ldr	r3, [pc, #192]	@ (80142d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8014216:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801421a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801421c:	b08d      	sub	sp, #52	@ 0x34
 801421e:	881b      	ldrh	r3, [r3, #0]
 8014220:	4604      	mov	r4, r0
 8014222:	460f      	mov	r7, r1
 8014224:	4293      	cmp	r3, r2
 8014226:	d954      	bls.n	80142d2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8014228:	4b2c      	ldr	r3, [pc, #176]	@ (80142dc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801422a:	6819      	ldr	r1, [r3, #0]
 801422c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8014230:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8014234:	4a2a      	ldr	r2, [pc, #168]	@ (80142e0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8014236:	6812      	ldr	r2, [r2, #0]
 8014238:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801423c:	2900      	cmp	r1, #0
 801423e:	d048      	beq.n	80142d2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8014240:	785a      	ldrb	r2, [r3, #1]
 8014242:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8014246:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801424a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801424e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8014252:	4b24      	ldr	r3, [pc, #144]	@ (80142e4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8014254:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8014258:	681a      	ldr	r2, [r3, #0]
 801425a:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 801425e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8014262:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8014266:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014268:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 801426c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8014270:	9107      	str	r1, [sp, #28]
 8014272:	f88d 8020 	strb.w	r8, [sp, #32]
 8014276:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 801427a:	9609      	str	r6, [sp, #36]	@ 0x24
 801427c:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 8014280:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8014284:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8014288:	b10b      	cbz	r3, 801428e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801428a:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 801428c:	b905      	cbnz	r5, 8014290 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801428e:	6895      	ldr	r5, [r2, #8]
 8014290:	ae05      	add	r6, sp, #20
 8014292:	4621      	mov	r1, r4
 8014294:	4630      	mov	r0, r6
 8014296:	f003 ff4b 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801429a:	4b13      	ldr	r3, [pc, #76]	@ (80142e8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801429c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801429e:	6818      	ldr	r0, [r3, #0]
 80142a0:	f7f2 fd6c 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 80142a4:	6823      	ldr	r3, [r4, #0]
 80142a6:	4680      	mov	r8, r0
 80142a8:	4620      	mov	r0, r4
 80142aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80142ac:	4798      	blx	r3
 80142ae:	6823      	ldr	r3, [r4, #0]
 80142b0:	4681      	mov	r9, r0
 80142b2:	4620      	mov	r0, r4
 80142b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80142b8:	4798      	blx	r3
 80142ba:	ab07      	add	r3, sp, #28
 80142bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80142c0:	9300      	str	r3, [sp, #0]
 80142c2:	463b      	mov	r3, r7
 80142c4:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80142c8:	4628      	mov	r0, r5
 80142ca:	e896 0006 	ldmia.w	r6, {r1, r2}
 80142ce:	f7f2 fd07 	bl	8006ce0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80142d2:	b00d      	add	sp, #52	@ 0x34
 80142d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142d8:	24026474 	.word	0x24026474
 80142dc:	24026470 	.word	0x24026470
 80142e0:	24026478 	.word	0x24026478
 80142e4:	24026418 	.word	0x24026418
 80142e8:	2402647c 	.word	0x2402647c

080142ec <_ZN8touchgfx5ImageD1Ev>:
 80142ec:	4770      	bx	lr

080142ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80142ee:	b570      	push	{r4, r5, r6, lr}
 80142f0:	880b      	ldrh	r3, [r1, #0]
 80142f2:	460d      	mov	r5, r1
 80142f4:	4604      	mov	r4, r0
 80142f6:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80142f8:	4608      	mov	r0, r1
 80142fa:	f006 fb5d 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80142fe:	4606      	mov	r6, r0
 8014300:	4628      	mov	r0, r5
 8014302:	f006 fb8d 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014306:	6823      	ldr	r3, [r4, #0]
 8014308:	4605      	mov	r5, r0
 801430a:	4631      	mov	r1, r6
 801430c:	4620      	mov	r0, r4
 801430e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014310:	4798      	blx	r3
 8014312:	6823      	ldr	r3, [r4, #0]
 8014314:	4629      	mov	r1, r5
 8014316:	4620      	mov	r0, r4
 8014318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801431a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801431e:	4718      	bx	r3

08014320 <_ZN8touchgfx5ImageD0Ev>:
 8014320:	b510      	push	{r4, lr}
 8014322:	4604      	mov	r4, r0
 8014324:	212c      	movs	r1, #44	@ 0x2c
 8014326:	f011 f90a 	bl	802553e <_ZdlPvj>
 801432a:	4620      	mov	r0, r4
 801432c:	bd10      	pop	{r4, pc}

0801432e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801432e:	b510      	push	{r4, lr}
 8014330:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8014334:	4604      	mov	r4, r0
 8014336:	2bff      	cmp	r3, #255	@ 0xff
 8014338:	d006      	beq.n	8014348 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801433a:	2300      	movs	r3, #0
 801433c:	8003      	strh	r3, [r0, #0]
 801433e:	8043      	strh	r3, [r0, #2]
 8014340:	8083      	strh	r3, [r0, #4]
 8014342:	80c3      	strh	r3, [r0, #6]
 8014344:	4620      	mov	r0, r4
 8014346:	bd10      	pop	{r4, pc}
 8014348:	3126      	adds	r1, #38	@ 0x26
 801434a:	f006 fb9d 	bl	801aa88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801434e:	e7f9      	b.n	8014344 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08014350 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8014350:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8014354:	b12a      	cbz	r2, 8014362 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014356:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801435a:	b112      	cbz	r2, 8014362 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801435c:	6803      	ldr	r3, [r0, #0]
 801435e:	695b      	ldr	r3, [r3, #20]
 8014360:	4718      	bx	r3
 8014362:	4770      	bx	lr

08014364 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014368:	4604      	mov	r4, r0
 801436a:	b088      	sub	sp, #32
 801436c:	2500      	movs	r5, #0
 801436e:	460f      	mov	r7, r1
 8014370:	f854 3b26 	ldr.w	r3, [r4], #38
 8014374:	a904      	add	r1, sp, #16
 8014376:	4606      	mov	r6, r0
 8014378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801437a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801437e:	4798      	blx	r3
 8014380:	4620      	mov	r0, r4
 8014382:	f006 fb19 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014386:	4680      	mov	r8, r0
 8014388:	4620      	mov	r0, r4
 801438a:	f006 fb49 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801438e:	9506      	str	r5, [sp, #24]
 8014390:	ad06      	add	r5, sp, #24
 8014392:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014396:	4639      	mov	r1, r7
 8014398:	f8ad 801c 	strh.w	r8, [sp, #28]
 801439c:	4628      	mov	r0, r5
 801439e:	f7fc fe27 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 80143a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	dd19      	ble.n	80143de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80143aa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	dd15      	ble.n	80143de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80143b2:	4b0c      	ldr	r3, [pc, #48]	@ (80143e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80143ba:	b10a      	cbz	r2, 80143c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80143bc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80143be:	b900      	cbnz	r0, 80143c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80143c0:	6898      	ldr	r0, [r3, #8]
 80143c2:	2701      	movs	r7, #1
 80143c4:	6801      	ldr	r1, [r0, #0]
 80143c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80143ca:	9702      	str	r7, [sp, #8]
 80143cc:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80143d0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80143d4:	e9cd 5600 	strd	r5, r6, [sp]
 80143d8:	688d      	ldr	r5, [r1, #8]
 80143da:	4621      	mov	r1, r4
 80143dc:	47a8      	blx	r5
 80143de:	b008      	add	sp, #32
 80143e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143e4:	24026418 	.word	0x24026418

080143e8 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 80143e8:	4770      	bx	lr

080143ea <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 80143ea:	b510      	push	{r4, lr}
 80143ec:	4604      	mov	r4, r0
 80143ee:	2148      	movs	r1, #72	@ 0x48
 80143f0:	f011 f8a5 	bl	802553e <_ZdlPvj>
 80143f4:	4620      	mov	r0, r4
 80143f6:	bd10      	pop	{r4, pc}

080143f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 80143f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143fc:	b08d      	sub	sp, #52	@ 0x34
 80143fe:	4604      	mov	r4, r0
 8014400:	460f      	mov	r7, r1
 8014402:	f7ff fe85 	bl	8014110 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8014406:	4a55      	ldr	r2, [pc, #340]	@ (801455c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8014408:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801440a:	8812      	ldrh	r2, [r2, #0]
 801440c:	429a      	cmp	r2, r3
 801440e:	f240 8082 	bls.w	8014516 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8014412:	4d53      	ldr	r5, [pc, #332]	@ (8014560 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8014414:	682a      	ldr	r2, [r5, #0]
 8014416:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801441a:	4b52      	ldr	r3, [pc, #328]	@ (8014564 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8014422:	2200      	movs	r2, #0
 8014424:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8014428:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801442c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8014430:	2a03      	cmp	r2, #3
 8014432:	d811      	bhi.n	8014458 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8014434:	e8df f002 	tbb	[pc, r2]
 8014438:	89727902 	.word	0x89727902
 801443c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014440:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8014444:	1ad2      	subs	r2, r2, r3
 8014446:	2002      	movs	r0, #2
 8014448:	f8ad 1010 	strh.w	r1, [sp, #16]
 801444c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014450:	fb92 f2f0 	sdiv	r2, r2, r0
 8014454:	f8ad 200e 	strh.w	r2, [sp, #14]
 8014458:	f10d 080c 	add.w	r8, sp, #12
 801445c:	f10d 0914 	add.w	r9, sp, #20
 8014460:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014464:	e889 0003 	stmia.w	r9, {r0, r1}
 8014468:	4639      	mov	r1, r7
 801446a:	4648      	mov	r0, r9
 801446c:	f7fc fdc0 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 8014470:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014474:	2b00      	cmp	r3, #0
 8014476:	dd4e      	ble.n	8014516 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8014478:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801447c:	2b00      	cmp	r3, #0
 801447e:	dd4a      	ble.n	8014516 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8014480:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8014484:	4641      	mov	r1, r8
 8014486:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801448a:	4620      	mov	r0, r4
 801448c:	1a9b      	subs	r3, r3, r2
 801448e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8014492:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014496:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801449a:	1a9b      	subs	r3, r3, r2
 801449c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80144a0:	6823      	ldr	r3, [r4, #0]
 80144a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144a4:	4798      	blx	r3
 80144a6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d053      	beq.n	8014556 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 80144ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80144b0:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80144b2:	682b      	ldr	r3, [r5, #0]
 80144b4:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 80144b8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80144bc:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 80144c0:	785b      	ldrb	r3, [r3, #1]
 80144c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80144c4:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80144c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80144cc:	9607      	str	r6, [sp, #28]
 80144ce:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80144d2:	2300      	movs	r3, #0
 80144d4:	f88d 5020 	strb.w	r5, [sp, #32]
 80144d8:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80144dc:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80144e0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80144e4:	4b20      	ldr	r3, [pc, #128]	@ (8014568 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80144e6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80144f0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80144f4:	b10a      	cbz	r2, 80144fa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 80144f6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80144f8:	b904      	cbnz	r4, 80144fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 80144fa:	689c      	ldr	r4, [r3, #8]
 80144fc:	4b1b      	ldr	r3, [pc, #108]	@ (801456c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 80144fe:	6818      	ldr	r0, [r3, #0]
 8014500:	f7f2 fc3c 	bl	8006d7c <_ZNK8touchgfx5Texts7getTextEt>
 8014504:	ab07      	add	r3, sp, #28
 8014506:	9001      	str	r0, [sp, #4]
 8014508:	4620      	mov	r0, r4
 801450a:	9300      	str	r3, [sp, #0]
 801450c:	464b      	mov	r3, r9
 801450e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8014512:	f7f2 fbe5 	bl	8006ce0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014516:	b00d      	add	sp, #52	@ 0x34
 8014518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801451c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014520:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8014524:	1ad2      	subs	r2, r2, r3
 8014526:	3201      	adds	r2, #1
 8014528:	e78d      	b.n	8014446 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 801452a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801452e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8014532:	1ad2      	subs	r2, r2, r3
 8014534:	3201      	adds	r2, #1
 8014536:	2002      	movs	r0, #2
 8014538:	f8ad 3010 	strh.w	r3, [sp, #16]
 801453c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014540:	fb92 f2f0 	sdiv	r2, r2, r0
 8014544:	f8ad 200c 	strh.w	r2, [sp, #12]
 8014548:	e786      	b.n	8014458 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801454a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801454e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8014552:	1ad2      	subs	r2, r2, r3
 8014554:	e7ef      	b.n	8014536 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 8014556:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8014558:	e7aa      	b.n	80144b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 801455a:	bf00      	nop
 801455c:	24026474 	.word	0x24026474
 8014560:	24026470 	.word	0x24026470
 8014564:	24026478 	.word	0x24026478
 8014568:	24026418 	.word	0x24026418
 801456c:	2402647c 	.word	0x2402647c

08014570 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8014570:	2101      	movs	r1, #1
 8014572:	2200      	movs	r2, #0
 8014574:	b510      	push	{r4, lr}
 8014576:	4c13      	ldr	r4, [pc, #76]	@ (80145c4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8014578:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801457c:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8014580:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014584:	6004      	str	r4, [r0, #0]
 8014586:	4c10      	ldr	r4, [pc, #64]	@ (80145c8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8014588:	8082      	strh	r2, [r0, #4]
 801458a:	80c2      	strh	r2, [r0, #6]
 801458c:	8102      	strh	r2, [r0, #8]
 801458e:	8142      	strh	r2, [r0, #10]
 8014590:	8182      	strh	r2, [r0, #12]
 8014592:	81c2      	strh	r2, [r0, #14]
 8014594:	8202      	strh	r2, [r0, #16]
 8014596:	8242      	strh	r2, [r0, #18]
 8014598:	61c2      	str	r2, [r0, #28]
 801459a:	8402      	strh	r2, [r0, #32]
 801459c:	8442      	strh	r2, [r0, #34]	@ 0x22
 801459e:	6282      	str	r2, [r0, #40]	@ 0x28
 80145a0:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 80145a4:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 80145a6:	8601      	strh	r1, [r0, #48]	@ 0x30
 80145a8:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 80145ac:	6344      	str	r4, [r0, #52]	@ 0x34
 80145ae:	8701      	strh	r1, [r0, #56]	@ 0x38
 80145b0:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 80145b4:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 80145b8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80145bc:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80145c0:	bd10      	pop	{r4, pc}
 80145c2:	bf00      	nop
 80145c4:	0802a2ec 	.word	0x0802a2ec
 80145c8:	080289bc 	.word	0x080289bc

080145cc <_ZN8touchgfx11RadioButtonD1Ev>:
 80145cc:	4770      	bx	lr

080145ce <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 80145ce:	b570      	push	{r4, r5, r6, lr}
 80145d0:	8809      	ldrh	r1, [r1, #0]
 80145d2:	f100 052e 	add.w	r5, r0, #46	@ 0x2e
 80145d6:	4604      	mov	r4, r0
 80145d8:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 80145da:	8812      	ldrh	r2, [r2, #0]
 80145dc:	8602      	strh	r2, [r0, #48]	@ 0x30
 80145de:	881b      	ldrh	r3, [r3, #0]
 80145e0:	8643      	strh	r3, [r0, #50]	@ 0x32
 80145e2:	9b04      	ldr	r3, [sp, #16]
 80145e4:	881b      	ldrh	r3, [r3, #0]
 80145e6:	8683      	strh	r3, [r0, #52]	@ 0x34
 80145e8:	4628      	mov	r0, r5
 80145ea:	f006 f9e5 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80145ee:	4606      	mov	r6, r0
 80145f0:	4628      	mov	r0, r5
 80145f2:	f006 fa15 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	4605      	mov	r5, r0
 80145fa:	4631      	mov	r1, r6
 80145fc:	4620      	mov	r0, r4
 80145fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014600:	4798      	blx	r3
 8014602:	6823      	ldr	r3, [r4, #0]
 8014604:	4629      	mov	r1, r5
 8014606:	4620      	mov	r0, r4
 8014608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801460a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801460e:	4718      	bx	r3

08014610 <_ZN8touchgfx11RadioButtonD0Ev>:
 8014610:	b510      	push	{r4, lr}
 8014612:	4604      	mov	r4, r0
 8014614:	2140      	movs	r1, #64	@ 0x40
 8014616:	f010 ff92 	bl	802553e <_ZdlPvj>
 801461a:	4620      	mov	r0, r4
 801461c:	bd10      	pop	{r4, pc}

0801461e <_ZNK8touchgfx11RadioButton17invalidateContentEv>:
 801461e:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 8014622:	b12a      	cbz	r2, 8014630 <_ZNK8touchgfx11RadioButton17invalidateContentEv+0x12>
 8014624:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8014628:	b112      	cbz	r2, 8014630 <_ZNK8touchgfx11RadioButton17invalidateContentEv+0x12>
 801462a:	6803      	ldr	r3, [r0, #0]
 801462c:	695b      	ldr	r3, [r3, #20]
 801462e:	4718      	bx	r3
 8014630:	4770      	bx	lr

08014632 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>:
 8014632:	f890 2037 	ldrb.w	r2, [r0, #55]	@ 0x37
 8014636:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801463a:	b122      	cbz	r2, 8014646 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x14>
 801463c:	b10b      	cbz	r3, 8014642 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x10>
 801463e:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8014640:	4770      	bx	lr
 8014642:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
 8014644:	4770      	bx	lr
 8014646:	b10b      	cbz	r3, 801464c <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x1a>
 8014648:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 801464a:	4770      	bx	lr
 801464c:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 801464e:	4770      	bx	lr

08014650 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE>:
 8014650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014652:	b08b      	sub	sp, #44	@ 0x2c
 8014654:	4604      	mov	r4, r0
 8014656:	460e      	mov	r6, r1
 8014658:	f7ff ffeb 	bl	8014632 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 801465c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014660:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014664:	b280      	uxth	r0, r0
 8014666:	4298      	cmp	r0, r3
 8014668:	d036      	beq.n	80146d8 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 801466a:	2500      	movs	r5, #0
 801466c:	6823      	ldr	r3, [r4, #0]
 801466e:	a906      	add	r1, sp, #24
 8014670:	4620      	mov	r0, r4
 8014672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014674:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8014678:	4798      	blx	r3
 801467a:	a805      	add	r0, sp, #20
 801467c:	f006 f99c 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014680:	4607      	mov	r7, r0
 8014682:	a805      	add	r0, sp, #20
 8014684:	f006 f9cc 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014688:	9508      	str	r5, [sp, #32]
 801468a:	ad08      	add	r5, sp, #32
 801468c:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8014690:	4631      	mov	r1, r6
 8014692:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8014696:	4628      	mov	r0, r5
 8014698:	f7fc fcaa 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 801469c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	dd19      	ble.n	80146d8 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 80146a4:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	dd15      	ble.n	80146d8 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 80146ac:	4b0b      	ldr	r3, [pc, #44]	@ (80146dc <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x8c>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80146b4:	b10a      	cbz	r2, 80146ba <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x6a>
 80146b6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80146b8:	b900      	cbnz	r0, 80146bc <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x6c>
 80146ba:	6898      	ldr	r0, [r3, #8]
 80146bc:	2601      	movs	r6, #1
 80146be:	6801      	ldr	r1, [r0, #0]
 80146c0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80146c4:	9602      	str	r6, [sp, #8]
 80146c6:	f894 4036 	ldrb.w	r4, [r4, #54]	@ 0x36
 80146ca:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80146ce:	e9cd 5400 	strd	r5, r4, [sp]
 80146d2:	688c      	ldr	r4, [r1, #8]
 80146d4:	a905      	add	r1, sp, #20
 80146d6:	47a0      	blx	r4
 80146d8:	b00b      	add	sp, #44	@ 0x2c
 80146da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146dc:	24026418 	.word	0x24026418

080146e0 <_ZNK8touchgfx11RadioButton12getSolidRectEv>:
 80146e0:	b513      	push	{r0, r1, r4, lr}
 80146e2:	f891 3036 	ldrb.w	r3, [r1, #54]	@ 0x36
 80146e6:	4604      	mov	r4, r0
 80146e8:	2bff      	cmp	r3, #255	@ 0xff
 80146ea:	d007      	beq.n	80146fc <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x1c>
 80146ec:	2300      	movs	r3, #0
 80146ee:	8003      	strh	r3, [r0, #0]
 80146f0:	8043      	strh	r3, [r0, #2]
 80146f2:	8083      	strh	r3, [r0, #4]
 80146f4:	80c3      	strh	r3, [r0, #6]
 80146f6:	4620      	mov	r0, r4
 80146f8:	b002      	add	sp, #8
 80146fa:	bd10      	pop	{r4, pc}
 80146fc:	4608      	mov	r0, r1
 80146fe:	f7ff ff98 	bl	8014632 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 8014702:	a902      	add	r1, sp, #8
 8014704:	f821 0d04 	strh.w	r0, [r1, #-4]!
 8014708:	4620      	mov	r0, r4
 801470a:	f006 f9bd 	bl	801aa88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801470e:	e7f2      	b.n	80146f6 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x16>

08014710 <_ZN8touchgfx11RadioButton11setSelectedEb>:
 8014710:	b510      	push	{r4, lr}
 8014712:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 8014716:	4604      	mov	r4, r0
 8014718:	f880 1037 	strb.w	r1, [r0, #55]	@ 0x37
 801471c:	b18b      	cbz	r3, 8014742 <_ZN8touchgfx11RadioButton11setSelectedEb+0x32>
 801471e:	b951      	cbnz	r1, 8014736 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8014720:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8014722:	b140      	cbz	r0, 8014736 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8014724:	6803      	ldr	r3, [r0, #0]
 8014726:	68db      	ldr	r3, [r3, #12]
 8014728:	4798      	blx	r3
 801472a:	b120      	cbz	r0, 8014736 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 801472c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801472e:	4621      	mov	r1, r4
 8014730:	6803      	ldr	r3, [r0, #0]
 8014732:	689b      	ldr	r3, [r3, #8]
 8014734:	4798      	blx	r3
 8014736:	6823      	ldr	r3, [r4, #0]
 8014738:	4620      	mov	r0, r4
 801473a:	695b      	ldr	r3, [r3, #20]
 801473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014740:	4718      	bx	r3
 8014742:	2900      	cmp	r1, #0
 8014744:	d0f7      	beq.n	8014736 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8014746:	6823      	ldr	r3, [r4, #0]
 8014748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801474a:	4798      	blx	r3
 801474c:	e7f3      	b.n	8014736 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>

0801474e <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE>:
 801474e:	b570      	push	{r4, r5, r6, lr}
 8014750:	790b      	ldrb	r3, [r1, #4]
 8014752:	4604      	mov	r4, r0
 8014754:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8014758:	460e      	mov	r6, r1
 801475a:	2b00      	cmp	r3, #0
 801475c:	bf0c      	ite	eq
 801475e:	2301      	moveq	r3, #1
 8014760:	2300      	movne	r3, #0
 8014762:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8014766:	d10f      	bne.n	8014788 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3a>
 8014768:	b17d      	cbz	r5, 801478a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801476a:	7931      	ldrb	r1, [r6, #4]
 801476c:	2901      	cmp	r1, #1
 801476e:	d112      	bne.n	8014796 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8014770:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8014774:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8014778:	b172      	cbz	r2, 8014798 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801477a:	f083 0101 	eor.w	r1, r3, #1
 801477e:	4620      	mov	r0, r4
 8014780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014784:	f7ff bfc4 	b.w	8014710 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8014788:	b12d      	cbz	r5, 8014796 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 801478a:	6823      	ldr	r3, [r4, #0]
 801478c:	4620      	mov	r0, r4
 801478e:	695b      	ldr	r3, [r3, #20]
 8014790:	4798      	blx	r3
 8014792:	2d00      	cmp	r5, #0
 8014794:	d1e9      	bne.n	801476a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8014796:	bd70      	pop	{r4, r5, r6, pc}
 8014798:	2b00      	cmp	r3, #0
 801479a:	d1fc      	bne.n	8014796 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 801479c:	e7ef      	b.n	801477e <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x30>

0801479e <_ZN8touchgfx7OutlineD1Ev>:
 801479e:	4770      	bx	lr

080147a0 <_ZN8touchgfx7OutlineD0Ev>:
 80147a0:	b510      	push	{r4, lr}
 80147a2:	4604      	mov	r4, r0
 80147a4:	2130      	movs	r1, #48	@ 0x30
 80147a6:	f010 feca 	bl	802553e <_ZdlPvj>
 80147aa:	4620      	mov	r0, r4
 80147ac:	bd10      	pop	{r4, pc}

080147ae <_ZN8touchgfx7Outline5resetEv>:
 80147ae:	b510      	push	{r4, lr}
 80147b0:	4604      	mov	r4, r0
 80147b2:	f000 fe71 	bl	8015498 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80147b6:	60e0      	str	r0, [r4, #12]
 80147b8:	f000 fe74 	bl	80154a4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80147bc:	68e3      	ldr	r3, [r4, #12]
 80147be:	08c0      	lsrs	r0, r0, #3
 80147c0:	2200      	movs	r2, #0
 80147c2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80147c6:	6123      	str	r3, [r4, #16]
 80147c8:	3801      	subs	r0, #1
 80147ca:	60a2      	str	r2, [r4, #8]
 80147cc:	6060      	str	r0, [r4, #4]
 80147ce:	8019      	strh	r1, [r3, #0]
 80147d0:	8059      	strh	r1, [r3, #2]
 80147d2:	809a      	strh	r2, [r3, #4]
 80147d4:	80da      	strh	r2, [r3, #6]
 80147d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80147d8:	f023 0301 	bic.w	r3, r3, #1
 80147dc:	f043 0302 	orr.w	r3, r3, #2
 80147e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80147e2:	bd10      	pop	{r4, pc}

080147e4 <_ZN8touchgfx7OutlineC1Ev>:
 80147e4:	4b0a      	ldr	r3, [pc, #40]	@ (8014810 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80147e6:	b510      	push	{r4, lr}
 80147e8:	6003      	str	r3, [r0, #0]
 80147ea:	2300      	movs	r3, #0
 80147ec:	4604      	mov	r4, r0
 80147ee:	6243      	str	r3, [r0, #36]	@ 0x24
 80147f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80147f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80147f8:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80147fc:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8014800:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014804:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8014808:	f7ff ffd1 	bl	80147ae <_ZN8touchgfx7Outline5resetEv>
 801480c:	4620      	mov	r0, r4
 801480e:	bd10      	pop	{r4, pc}
 8014810:	0802a3d4 	.word	0x0802a3d4

08014814 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8014814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014818:	b093      	sub	sp, #76	@ 0x4c
 801481a:	1156      	asrs	r6, r2, #5
 801481c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801481e:	9305      	str	r3, [sp, #20]
 8014820:	1153      	asrs	r3, r2, #5
 8014822:	f004 051f 	and.w	r5, r4, #31
 8014826:	9303      	str	r3, [sp, #12]
 8014828:	1163      	asrs	r3, r4, #5
 801482a:	9504      	str	r5, [sp, #16]
 801482c:	1165      	asrs	r5, r4, #5
 801482e:	9306      	str	r3, [sp, #24]
 8014830:	f002 031f 	and.w	r3, r2, #31
 8014834:	42ae      	cmp	r6, r5
 8014836:	f040 80f4 	bne.w	8014a22 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801483a:	9c04      	ldr	r4, [sp, #16]
 801483c:	9a05      	ldr	r2, [sp, #20]
 801483e:	42a3      	cmp	r3, r4
 8014840:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8014844:	6902      	ldr	r2, [r0, #16]
 8014846:	d125      	bne.n	8014894 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8014848:	f9b2 3000 	ldrsh.w	r3, [r2]
 801484c:	459e      	cmp	lr, r3
 801484e:	d103      	bne.n	8014858 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8014850:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014854:	429e      	cmp	r6, r3
 8014856:	d035      	beq.n	80148c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014858:	88d1      	ldrh	r1, [r2, #6]
 801485a:	8893      	ldrh	r3, [r2, #4]
 801485c:	430b      	orrs	r3, r1
 801485e:	d010      	beq.n	8014882 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014860:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014864:	2b00      	cmp	r3, #0
 8014866:	db0c      	blt.n	8014882 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014868:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801486a:	428b      	cmp	r3, r1
 801486c:	da09      	bge.n	8014882 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801486e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014872:	428b      	cmp	r3, r1
 8014874:	f103 0301 	add.w	r3, r3, #1
 8014878:	bf38      	it	cc
 801487a:	3208      	addcc	r2, #8
 801487c:	6083      	str	r3, [r0, #8]
 801487e:	bf38      	it	cc
 8014880:	6102      	strcc	r2, [r0, #16]
 8014882:	6903      	ldr	r3, [r0, #16]
 8014884:	9a03      	ldr	r2, [sp, #12]
 8014886:	f8a3 e000 	strh.w	lr, [r3]
 801488a:	805a      	strh	r2, [r3, #2]
 801488c:	2200      	movs	r2, #0
 801488e:	809a      	strh	r2, [r3, #4]
 8014890:	80da      	strh	r2, [r3, #6]
 8014892:	e017      	b.n	80148c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014894:	9c05      	ldr	r4, [sp, #20]
 8014896:	114e      	asrs	r6, r1, #5
 8014898:	f001 0c1f 	and.w	ip, r1, #31
 801489c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80148a0:	f004 041f 	and.w	r4, r4, #31
 80148a4:	4576      	cmp	r6, lr
 80148a6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80148aa:	9402      	str	r4, [sp, #8]
 80148ac:	9c04      	ldr	r4, [sp, #16]
 80148ae:	eba4 0403 	sub.w	r4, r4, r3
 80148b2:	d10a      	bne.n	80148ca <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80148b4:	9b02      	ldr	r3, [sp, #8]
 80148b6:	44a0      	add	r8, r4
 80148b8:	449c      	add	ip, r3
 80148ba:	f8a2 8004 	strh.w	r8, [r2, #4]
 80148be:	fb04 a40c 	mla	r4, r4, ip, sl
 80148c2:	80d4      	strh	r4, [r2, #6]
 80148c4:	b013      	add	sp, #76	@ 0x4c
 80148c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ca:	9d05      	ldr	r5, [sp, #20]
 80148cc:	1a69      	subs	r1, r5, r1
 80148ce:	bf51      	iteee	pl
 80148d0:	f1cc 0520 	rsbpl	r5, ip, #32
 80148d4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80148d8:	4249      	negmi	r1, r1
 80148da:	2500      	movmi	r5, #0
 80148dc:	bf5d      	ittte	pl
 80148de:	436c      	mulpl	r4, r5
 80148e0:	2520      	movpl	r5, #32
 80148e2:	f04f 0901 	movpl.w	r9, #1
 80148e6:	f04f 39ff 	movmi.w	r9, #4294967295
 80148ea:	9501      	str	r5, [sp, #4]
 80148ec:	9f01      	ldr	r7, [sp, #4]
 80148ee:	444e      	add	r6, r9
 80148f0:	fb94 f5f1 	sdiv	r5, r4, r1
 80148f4:	fb01 4415 	mls	r4, r1, r5, r4
 80148f8:	44bc      	add	ip, r7
 80148fa:	2c00      	cmp	r4, #0
 80148fc:	bfbc      	itt	lt
 80148fe:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014902:	1864      	addlt	r4, r4, r1
 8014904:	44a8      	add	r8, r5
 8014906:	fb05 ac0c 	mla	ip, r5, ip, sl
 801490a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801490e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014912:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014916:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801491a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801491e:	ea58 0202 	orrs.w	r2, r8, r2
 8014922:	d011      	beq.n	8014948 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014924:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014928:	f1b8 0f00 	cmp.w	r8, #0
 801492c:	db0c      	blt.n	8014948 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801492e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014930:	4590      	cmp	r8, r2
 8014932:	da09      	bge.n	8014948 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014934:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8014938:	4590      	cmp	r8, r2
 801493a:	bf3c      	itt	cc
 801493c:	f10c 0208 	addcc.w	r2, ip, #8
 8014940:	6102      	strcc	r2, [r0, #16]
 8014942:	f108 0201 	add.w	r2, r8, #1
 8014946:	6082      	str	r2, [r0, #8]
 8014948:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801494c:	2700      	movs	r7, #0
 801494e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014952:	45b6      	cmp	lr, r6
 8014954:	f8ac 6000 	strh.w	r6, [ip]
 8014958:	442b      	add	r3, r5
 801495a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801495e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014962:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014966:	d04b      	beq.n	8014a00 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8014968:	9f04      	ldr	r7, [sp, #16]
 801496a:	1a64      	subs	r4, r4, r1
 801496c:	f04f 0a00 	mov.w	sl, #0
 8014970:	1aff      	subs	r7, r7, r3
 8014972:	443d      	add	r5, r7
 8014974:	016d      	lsls	r5, r5, #5
 8014976:	fb95 f8f1 	sdiv	r8, r5, r1
 801497a:	fb01 5518 	mls	r5, r1, r8, r5
 801497e:	2d00      	cmp	r5, #0
 8014980:	bfbc      	itt	lt
 8014982:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014986:	186d      	addlt	r5, r5, r1
 8014988:	f108 0701 	add.w	r7, r8, #1
 801498c:	9703      	str	r7, [sp, #12]
 801498e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014992:	1964      	adds	r4, r4, r5
 8014994:	444e      	add	r6, r9
 8014996:	bf54      	ite	pl
 8014998:	9f03      	ldrpl	r7, [sp, #12]
 801499a:	4647      	movmi	r7, r8
 801499c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80149a0:	bf58      	it	pl
 80149a2:	1a64      	subpl	r4, r4, r1
 80149a4:	443b      	add	r3, r7
 80149a6:	44bb      	add	fp, r7
 80149a8:	f8ac b004 	strh.w	fp, [ip, #4]
 80149ac:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80149b0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80149b4:	f8ac b006 	strh.w	fp, [ip, #6]
 80149b8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80149bc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80149c0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80149c4:	ea5b 0707 	orrs.w	r7, fp, r7
 80149c8:	d011      	beq.n	80149ee <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80149ca:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80149ce:	f1bb 0f00 	cmp.w	fp, #0
 80149d2:	db0c      	blt.n	80149ee <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80149d4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80149d6:	45bb      	cmp	fp, r7
 80149d8:	da09      	bge.n	80149ee <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80149da:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80149de:	45bb      	cmp	fp, r7
 80149e0:	bf3c      	itt	cc
 80149e2:	f10c 0708 	addcc.w	r7, ip, #8
 80149e6:	6107      	strcc	r7, [r0, #16]
 80149e8:	f10b 0701 	add.w	r7, fp, #1
 80149ec:	6087      	str	r7, [r0, #8]
 80149ee:	6907      	ldr	r7, [r0, #16]
 80149f0:	45b6      	cmp	lr, r6
 80149f2:	803e      	strh	r6, [r7, #0]
 80149f4:	807a      	strh	r2, [r7, #2]
 80149f6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80149fa:	f8a7 a006 	strh.w	sl, [r7, #6]
 80149fe:	d1c6      	bne.n	801498e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8014a00:	9a04      	ldr	r2, [sp, #16]
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	6902      	ldr	r2, [r0, #16]
 8014a06:	8891      	ldrh	r1, [r2, #4]
 8014a08:	88d6      	ldrh	r6, [r2, #6]
 8014a0a:	4419      	add	r1, r3
 8014a0c:	8091      	strh	r1, [r2, #4]
 8014a0e:	9902      	ldr	r1, [sp, #8]
 8014a10:	f101 0c20 	add.w	ip, r1, #32
 8014a14:	9901      	ldr	r1, [sp, #4]
 8014a16:	ebac 0c01 	sub.w	ip, ip, r1
 8014a1a:	fb03 630c 	mla	r3, r3, ip, r6
 8014a1e:	80d3      	strh	r3, [r2, #6]
 8014a20:	e750      	b.n	80148c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014a22:	9d05      	ldr	r5, [sp, #20]
 8014a24:	1aa2      	subs	r2, r4, r2
 8014a26:	eba5 0501 	sub.w	r5, r5, r1
 8014a2a:	9202      	str	r2, [sp, #8]
 8014a2c:	9508      	str	r5, [sp, #32]
 8014a2e:	f140 8128 	bpl.w	8014c82 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8014a32:	9a03      	ldr	r2, [sp, #12]
 8014a34:	2a00      	cmp	r2, #0
 8014a36:	f6ff af45 	blt.w	80148c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014a3a:	9a02      	ldr	r2, [sp, #8]
 8014a3c:	f04f 34ff 	mov.w	r4, #4294967295
 8014a40:	4252      	negs	r2, r2
 8014a42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014a44:	2400      	movs	r4, #0
 8014a46:	9202      	str	r2, [sp, #8]
 8014a48:	9a06      	ldr	r2, [sp, #24]
 8014a4a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8014a4e:	9206      	str	r2, [sp, #24]
 8014a50:	462a      	mov	r2, r5
 8014a52:	435a      	muls	r2, r3
 8014a54:	9401      	str	r4, [sp, #4]
 8014a56:	9c02      	ldr	r4, [sp, #8]
 8014a58:	9d02      	ldr	r5, [sp, #8]
 8014a5a:	fb92 f4f4 	sdiv	r4, r2, r4
 8014a5e:	fb05 2214 	mls	r2, r5, r4, r2
 8014a62:	2a00      	cmp	r2, #0
 8014a64:	9207      	str	r2, [sp, #28]
 8014a66:	bfbc      	itt	lt
 8014a68:	1952      	addlt	r2, r2, r5
 8014a6a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014a6e:	6905      	ldr	r5, [r0, #16]
 8014a70:	bfb8      	it	lt
 8014a72:	9207      	strlt	r2, [sp, #28]
 8014a74:	eb04 0901 	add.w	r9, r4, r1
 8014a78:	9a01      	ldr	r2, [sp, #4]
 8014a7a:	ea4f 1669 	mov.w	r6, r9, asr #5
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	f040 8111 	bne.w	8014ca6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8014a84:	f9b5 3000 	ldrsh.w	r3, [r5]
 8014a88:	429e      	cmp	r6, r3
 8014a8a:	d104      	bne.n	8014a96 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8014a8c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014a90:	9a03      	ldr	r2, [sp, #12]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d01b      	beq.n	8014ace <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014a96:	88ea      	ldrh	r2, [r5, #6]
 8014a98:	88ab      	ldrh	r3, [r5, #4]
 8014a9a:	4313      	orrs	r3, r2
 8014a9c:	d010      	beq.n	8014ac0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014a9e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014aa2:	2a00      	cmp	r2, #0
 8014aa4:	db0c      	blt.n	8014ac0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014aa6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	da09      	bge.n	8014ac0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014aac:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	f102 0201 	add.w	r2, r2, #1
 8014ab6:	bf38      	it	cc
 8014ab8:	3508      	addcc	r5, #8
 8014aba:	6082      	str	r2, [r0, #8]
 8014abc:	bf38      	it	cc
 8014abe:	6105      	strcc	r5, [r0, #16]
 8014ac0:	6903      	ldr	r3, [r0, #16]
 8014ac2:	9a03      	ldr	r2, [sp, #12]
 8014ac4:	801e      	strh	r6, [r3, #0]
 8014ac6:	805a      	strh	r2, [r3, #2]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	809a      	strh	r2, [r3, #4]
 8014acc:	80da      	strh	r2, [r3, #6]
 8014ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ad0:	9a03      	ldr	r2, [sp, #12]
 8014ad2:	6901      	ldr	r1, [r0, #16]
 8014ad4:	441a      	add	r2, r3
 8014ad6:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014ada:	42b3      	cmp	r3, r6
 8014adc:	d103      	bne.n	8014ae6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8014ade:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d01a      	beq.n	8014b1c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8014ae6:	88cc      	ldrh	r4, [r1, #6]
 8014ae8:	888b      	ldrh	r3, [r1, #4]
 8014aea:	4323      	orrs	r3, r4
 8014aec:	d010      	beq.n	8014b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014aee:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014af2:	2c00      	cmp	r4, #0
 8014af4:	db0c      	blt.n	8014b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014af6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014af8:	429c      	cmp	r4, r3
 8014afa:	da09      	bge.n	8014b10 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014afc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014b00:	429c      	cmp	r4, r3
 8014b02:	f104 0401 	add.w	r4, r4, #1
 8014b06:	bf38      	it	cc
 8014b08:	3108      	addcc	r1, #8
 8014b0a:	6084      	str	r4, [r0, #8]
 8014b0c:	bf38      	it	cc
 8014b0e:	6101      	strcc	r1, [r0, #16]
 8014b10:	6903      	ldr	r3, [r0, #16]
 8014b12:	2100      	movs	r1, #0
 8014b14:	801e      	strh	r6, [r3, #0]
 8014b16:	805a      	strh	r2, [r3, #2]
 8014b18:	8099      	strh	r1, [r3, #4]
 8014b1a:	80d9      	strh	r1, [r3, #6]
 8014b1c:	9b06      	ldr	r3, [sp, #24]
 8014b1e:	4293      	cmp	r3, r2
 8014b20:	f000 8082 	beq.w	8014c28 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8014b24:	9b08      	ldr	r3, [sp, #32]
 8014b26:	9902      	ldr	r1, [sp, #8]
 8014b28:	015b      	lsls	r3, r3, #5
 8014b2a:	9c02      	ldr	r4, [sp, #8]
 8014b2c:	fb93 f1f1 	sdiv	r1, r3, r1
 8014b30:	fb04 3311 	mls	r3, r4, r1, r3
 8014b34:	9103      	str	r1, [sp, #12]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	9308      	str	r3, [sp, #32]
 8014b3a:	da04      	bge.n	8014b46 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8014b3c:	1e4b      	subs	r3, r1, #1
 8014b3e:	9303      	str	r3, [sp, #12]
 8014b40:	9b08      	ldr	r3, [sp, #32]
 8014b42:	4423      	add	r3, r4
 8014b44:	9308      	str	r3, [sp, #32]
 8014b46:	9b07      	ldr	r3, [sp, #28]
 8014b48:	464f      	mov	r7, r9
 8014b4a:	9902      	ldr	r1, [sp, #8]
 8014b4c:	2600      	movs	r6, #0
 8014b4e:	1a5b      	subs	r3, r3, r1
 8014b50:	9307      	str	r3, [sp, #28]
 8014b52:	9b01      	ldr	r3, [sp, #4]
 8014b54:	f1c3 0320 	rsb	r3, r3, #32
 8014b58:	930e      	str	r3, [sp, #56]	@ 0x38
 8014b5a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014b5c:	9b01      	ldr	r3, [sp, #4]
 8014b5e:	1a5b      	subs	r3, r3, r1
 8014b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8014b62:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8014b66:	185b      	adds	r3, r3, r1
 8014b68:	bf58      	it	pl
 8014b6a:	9902      	ldrpl	r1, [sp, #8]
 8014b6c:	9307      	str	r3, [sp, #28]
 8014b6e:	bf57      	itett	pl
 8014b70:	1a5b      	subpl	r3, r3, r1
 8014b72:	9903      	ldrmi	r1, [sp, #12]
 8014b74:	9307      	strpl	r3, [sp, #28]
 8014b76:	9b03      	ldrpl	r3, [sp, #12]
 8014b78:	bf58      	it	pl
 8014b7a:	1c59      	addpl	r1, r3, #1
 8014b7c:	2a00      	cmp	r2, #0
 8014b7e:	4489      	add	r9, r1
 8014b80:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8014b84:	db2e      	blt.n	8014be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014b86:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014b88:	4293      	cmp	r3, r2
 8014b8a:	dd2b      	ble.n	8014be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014b8c:	9c01      	ldr	r4, [sp, #4]
 8014b8e:	6905      	ldr	r5, [r0, #16]
 8014b90:	46a0      	mov	r8, r4
 8014b92:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8014b94:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8014b98:	45a0      	cmp	r8, r4
 8014b9a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8014b9e:	f040 814c 	bne.w	8014e3a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8014ba2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014ba6:	4551      	cmp	r1, sl
 8014ba8:	d103      	bne.n	8014bb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8014baa:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8014bae:	4291      	cmp	r1, r2
 8014bb0:	d018      	beq.n	8014be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014bb2:	ea5c 010e 	orrs.w	r1, ip, lr
 8014bb6:	d00f      	beq.n	8014bd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014bb8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8014bbc:	2900      	cmp	r1, #0
 8014bbe:	db0b      	blt.n	8014bd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014bc0:	428b      	cmp	r3, r1
 8014bc2:	dd09      	ble.n	8014bd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014bc4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014bc8:	4299      	cmp	r1, r3
 8014bca:	f101 0101 	add.w	r1, r1, #1
 8014bce:	bf38      	it	cc
 8014bd0:	3508      	addcc	r5, #8
 8014bd2:	6081      	str	r1, [r0, #8]
 8014bd4:	bf38      	it	cc
 8014bd6:	6105      	strcc	r5, [r0, #16]
 8014bd8:	6903      	ldr	r3, [r0, #16]
 8014bda:	f8a3 a000 	strh.w	sl, [r3]
 8014bde:	805a      	strh	r2, [r3, #2]
 8014be0:	809e      	strh	r6, [r3, #4]
 8014be2:	80de      	strh	r6, [r3, #6]
 8014be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014be6:	6901      	ldr	r1, [r0, #16]
 8014be8:	441a      	add	r2, r3
 8014bea:	88cc      	ldrh	r4, [r1, #6]
 8014bec:	888b      	ldrh	r3, [r1, #4]
 8014bee:	4323      	orrs	r3, r4
 8014bf0:	d010      	beq.n	8014c14 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014bf2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014bf6:	2c00      	cmp	r4, #0
 8014bf8:	db0c      	blt.n	8014c14 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014bfa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014bfc:	429c      	cmp	r4, r3
 8014bfe:	da09      	bge.n	8014c14 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014c00:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014c04:	429c      	cmp	r4, r3
 8014c06:	f104 0401 	add.w	r4, r4, #1
 8014c0a:	bf38      	it	cc
 8014c0c:	3108      	addcc	r1, #8
 8014c0e:	6084      	str	r4, [r0, #8]
 8014c10:	bf38      	it	cc
 8014c12:	6101      	strcc	r1, [r0, #16]
 8014c14:	6903      	ldr	r3, [r0, #16]
 8014c16:	464f      	mov	r7, r9
 8014c18:	f8a3 a000 	strh.w	sl, [r3]
 8014c1c:	805a      	strh	r2, [r3, #2]
 8014c1e:	809e      	strh	r6, [r3, #4]
 8014c20:	80de      	strh	r6, [r3, #6]
 8014c22:	9b06      	ldr	r3, [sp, #24]
 8014c24:	4293      	cmp	r3, r2
 8014c26:	d19c      	bne.n	8014b62 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8014c28:	9b01      	ldr	r3, [sp, #4]
 8014c2a:	6907      	ldr	r7, [r0, #16]
 8014c2c:	f1c3 0620 	rsb	r6, r3, #32
 8014c30:	9b05      	ldr	r3, [sp, #20]
 8014c32:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8014c36:	9b04      	ldr	r3, [sp, #16]
 8014c38:	429e      	cmp	r6, r3
 8014c3a:	f040 81c7 	bne.w	8014fcc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8014c3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8014c42:	459e      	cmp	lr, r3
 8014c44:	d104      	bne.n	8014c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8014c46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014c4a:	429a      	cmp	r2, r3
 8014c4c:	f43f ae3a 	beq.w	80148c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014c50:	88f9      	ldrh	r1, [r7, #6]
 8014c52:	88bb      	ldrh	r3, [r7, #4]
 8014c54:	430b      	orrs	r3, r1
 8014c56:	d010      	beq.n	8014c7a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	db0c      	blt.n	8014c7a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014c60:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8014c62:	428b      	cmp	r3, r1
 8014c64:	da09      	bge.n	8014c7a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014c66:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014c6a:	428b      	cmp	r3, r1
 8014c6c:	f103 0301 	add.w	r3, r3, #1
 8014c70:	bf38      	it	cc
 8014c72:	3708      	addcc	r7, #8
 8014c74:	6083      	str	r3, [r0, #8]
 8014c76:	bf38      	it	cc
 8014c78:	6107      	strcc	r7, [r0, #16]
 8014c7a:	6903      	ldr	r3, [r0, #16]
 8014c7c:	f8a3 e000 	strh.w	lr, [r3]
 8014c80:	e603      	b.n	801488a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8014c82:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014c84:	9c03      	ldr	r4, [sp, #12]
 8014c86:	42a2      	cmp	r2, r4
 8014c88:	f6ff ae1c 	blt.w	80148c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014c8c:	9c06      	ldr	r4, [sp, #24]
 8014c8e:	42a2      	cmp	r2, r4
 8014c90:	9c08      	ldr	r4, [sp, #32]
 8014c92:	bfbc      	itt	lt
 8014c94:	3201      	addlt	r2, #1
 8014c96:	9206      	strlt	r2, [sp, #24]
 8014c98:	f1c3 0220 	rsb	r2, r3, #32
 8014c9c:	4362      	muls	r2, r4
 8014c9e:	2401      	movs	r4, #1
 8014ca0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014ca2:	2420      	movs	r4, #32
 8014ca4:	e6d6      	b.n	8014a54 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8014ca6:	ea4f 1861 	mov.w	r8, r1, asr #5
 8014caa:	f009 021f 	and.w	r2, r9, #31
 8014cae:	f001 011f 	and.w	r1, r1, #31
 8014cb2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8014cb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8014cb8:	45b0      	cmp	r8, r6
 8014cba:	9a01      	ldr	r2, [sp, #4]
 8014cbc:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8014cc0:	eba2 0203 	sub.w	r2, r2, r3
 8014cc4:	d108      	bne.n	8014cd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8014cc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cc8:	4496      	add	lr, r2
 8014cca:	4419      	add	r1, r3
 8014ccc:	f8a5 e004 	strh.w	lr, [r5, #4]
 8014cd0:	fb02 a101 	mla	r1, r2, r1, sl
 8014cd4:	80e9      	strh	r1, [r5, #6]
 8014cd6:	e6fa      	b.n	8014ace <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014cd8:	2c00      	cmp	r4, #0
 8014cda:	f2c0 80a7 	blt.w	8014e2c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8014cde:	2701      	movs	r7, #1
 8014ce0:	f1c1 0c20 	rsb	ip, r1, #32
 8014ce4:	970a      	str	r7, [sp, #40]	@ 0x28
 8014ce6:	2720      	movs	r7, #32
 8014ce8:	fb02 f20c 	mul.w	r2, r2, ip
 8014cec:	9709      	str	r7, [sp, #36]	@ 0x24
 8014cee:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8014cf0:	fb92 fcf4 	sdiv	ip, r2, r4
 8014cf4:	fb04 221c 	mls	r2, r4, ip, r2
 8014cf8:	4439      	add	r1, r7
 8014cfa:	2a00      	cmp	r2, #0
 8014cfc:	bfbc      	itt	lt
 8014cfe:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8014d02:	1912      	addlt	r2, r2, r4
 8014d04:	fb0c a101 	mla	r1, ip, r1, sl
 8014d08:	44e6      	add	lr, ip
 8014d0a:	80e9      	strh	r1, [r5, #6]
 8014d0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014d0e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8014d12:	eb08 0501 	add.w	r5, r8, r1
 8014d16:	6901      	ldr	r1, [r0, #16]
 8014d18:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8014d1c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8014d20:	ea58 070e 	orrs.w	r7, r8, lr
 8014d24:	d010      	beq.n	8014d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014d26:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8014d2a:	f1be 0f00 	cmp.w	lr, #0
 8014d2e:	db0b      	blt.n	8014d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014d30:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014d32:	45be      	cmp	lr, r7
 8014d34:	da08      	bge.n	8014d48 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014d36:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014d3a:	45be      	cmp	lr, r7
 8014d3c:	bf3c      	itt	cc
 8014d3e:	3108      	addcc	r1, #8
 8014d40:	6101      	strcc	r1, [r0, #16]
 8014d42:	f10e 0101 	add.w	r1, lr, #1
 8014d46:	6081      	str	r1, [r0, #8]
 8014d48:	6901      	ldr	r1, [r0, #16]
 8014d4a:	f04f 0e00 	mov.w	lr, #0
 8014d4e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8014d52:	42ae      	cmp	r6, r5
 8014d54:	800d      	strh	r5, [r1, #0]
 8014d56:	4463      	add	r3, ip
 8014d58:	f8a1 8002 	strh.w	r8, [r1, #2]
 8014d5c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8014d60:	f8a1 e006 	strh.w	lr, [r1, #6]
 8014d64:	d053      	beq.n	8014e0e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8014d66:	9901      	ldr	r1, [sp, #4]
 8014d68:	1b12      	subs	r2, r2, r4
 8014d6a:	1ac9      	subs	r1, r1, r3
 8014d6c:	4461      	add	r1, ip
 8014d6e:	0149      	lsls	r1, r1, #5
 8014d70:	fb91 fef4 	sdiv	lr, r1, r4
 8014d74:	fb04 111e 	mls	r1, r4, lr, r1
 8014d78:	2900      	cmp	r1, #0
 8014d7a:	bfbc      	itt	lt
 8014d7c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8014d80:	1909      	addlt	r1, r1, r4
 8014d82:	f10e 0701 	add.w	r7, lr, #1
 8014d86:	970d      	str	r7, [sp, #52]	@ 0x34
 8014d88:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8014d8c:	1852      	adds	r2, r2, r1
 8014d8e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8014d90:	bf54      	ite	pl
 8014d92:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8014d96:	46f4      	movmi	ip, lr
 8014d98:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8014d9c:	bf58      	it	pl
 8014d9e:	1b12      	subpl	r2, r2, r4
 8014da0:	4463      	add	r3, ip
 8014da2:	443d      	add	r5, r7
 8014da4:	44e3      	add	fp, ip
 8014da6:	f8aa b004 	strh.w	fp, [sl, #4]
 8014daa:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8014dae:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8014db2:	f8aa b006 	strh.w	fp, [sl, #6]
 8014db6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014dba:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014dbe:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8014dc2:	ea5b 070a 	orrs.w	r7, fp, sl
 8014dc6:	d014      	beq.n	8014df2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014dc8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8014dcc:	f1ba 0f00 	cmp.w	sl, #0
 8014dd0:	db0f      	blt.n	8014df2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014dd2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014dd4:	45ba      	cmp	sl, r7
 8014dd6:	da0c      	bge.n	8014df2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014dd8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014ddc:	45ba      	cmp	sl, r7
 8014dde:	f10a 0a01 	add.w	sl, sl, #1
 8014de2:	bf38      	it	cc
 8014de4:	f10c 0c08 	addcc.w	ip, ip, #8
 8014de8:	f8c0 a008 	str.w	sl, [r0, #8]
 8014dec:	bf38      	it	cc
 8014dee:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8014df2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014df6:	f04f 0700 	mov.w	r7, #0
 8014dfa:	42ae      	cmp	r6, r5
 8014dfc:	f8ac 5000 	strh.w	r5, [ip]
 8014e00:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014e04:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014e08:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014e0c:	d1bc      	bne.n	8014d88 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8014e0e:	6904      	ldr	r4, [r0, #16]
 8014e10:	9a01      	ldr	r2, [sp, #4]
 8014e12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014e14:	1ad3      	subs	r3, r2, r3
 8014e16:	88a2      	ldrh	r2, [r4, #4]
 8014e18:	3120      	adds	r1, #32
 8014e1a:	441a      	add	r2, r3
 8014e1c:	80a2      	strh	r2, [r4, #4]
 8014e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014e20:	1a89      	subs	r1, r1, r2
 8014e22:	88e2      	ldrh	r2, [r4, #6]
 8014e24:	fb03 2301 	mla	r3, r3, r1, r2
 8014e28:	80e3      	strh	r3, [r4, #6]
 8014e2a:	e650      	b.n	8014ace <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8014e30:	434a      	muls	r2, r1
 8014e32:	4264      	negs	r4, r4
 8014e34:	970a      	str	r7, [sp, #40]	@ 0x28
 8014e36:	2700      	movs	r7, #0
 8014e38:	e758      	b.n	8014cec <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8014e3a:	ea4f 1867 	mov.w	r8, r7, asr #5
 8014e3e:	f009 031f 	and.w	r3, r9, #31
 8014e42:	f007 071f 	and.w	r7, r7, #31
 8014e46:	fa1f fc8c 	uxth.w	ip, ip
 8014e4a:	45d0      	cmp	r8, sl
 8014e4c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014e4e:	fa1f fe8e 	uxth.w	lr, lr
 8014e52:	d10a      	bne.n	8014e6a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8014e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e56:	449c      	add	ip, r3
 8014e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e5a:	441f      	add	r7, r3
 8014e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e5e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014e62:	fb03 e707 	mla	r7, r3, r7, lr
 8014e66:	80ef      	strh	r7, [r5, #6]
 8014e68:	e6bc      	b.n	8014be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014e6a:	2900      	cmp	r1, #0
 8014e6c:	f2c0 80a6 	blt.w	8014fbc <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8014e70:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014e72:	f1c7 0320 	rsb	r3, r7, #32
 8014e76:	4363      	muls	r3, r4
 8014e78:	2401      	movs	r4, #1
 8014e7a:	940d      	str	r4, [sp, #52]	@ 0x34
 8014e7c:	2420      	movs	r4, #32
 8014e7e:	940c      	str	r4, [sp, #48]	@ 0x30
 8014e80:	fb93 f4f1 	sdiv	r4, r3, r1
 8014e84:	fb01 3b14 	mls	fp, r1, r4, r3
 8014e88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e8a:	f1bb 0f00 	cmp.w	fp, #0
 8014e8e:	441f      	add	r7, r3
 8014e90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e92:	bfbc      	itt	lt
 8014e94:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014e98:	448b      	addlt	fp, r1
 8014e9a:	fb04 e707 	mla	r7, r4, r7, lr
 8014e9e:	44a4      	add	ip, r4
 8014ea0:	80ef      	strh	r7, [r5, #6]
 8014ea2:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014ea6:	eb08 0503 	add.w	r5, r8, r3
 8014eaa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014eae:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8014eb2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014eb6:	ea5e 0307 	orrs.w	r3, lr, r7
 8014eba:	d011      	beq.n	8014ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014ebc:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8014ec0:	f1be 0f00 	cmp.w	lr, #0
 8014ec4:	db0c      	blt.n	8014ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014ec6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014ec8:	45be      	cmp	lr, r7
 8014eca:	da09      	bge.n	8014ee0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014ecc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014ed0:	45be      	cmp	lr, r7
 8014ed2:	bf3c      	itt	cc
 8014ed4:	f10c 0708 	addcc.w	r7, ip, #8
 8014ed8:	6107      	strcc	r7, [r0, #16]
 8014eda:	f10e 0701 	add.w	r7, lr, #1
 8014ede:	6087      	str	r7, [r0, #8]
 8014ee0:	6907      	ldr	r7, [r0, #16]
 8014ee2:	b213      	sxth	r3, r2
 8014ee4:	4555      	cmp	r5, sl
 8014ee6:	9310      	str	r3, [sp, #64]	@ 0x40
 8014ee8:	807b      	strh	r3, [r7, #2]
 8014eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014eec:	803d      	strh	r5, [r7, #0]
 8014eee:	80be      	strh	r6, [r7, #4]
 8014ef0:	eb04 0c03 	add.w	ip, r4, r3
 8014ef4:	80fe      	strh	r6, [r7, #6]
 8014ef6:	d050      	beq.n	8014f9a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8014ef8:	9b01      	ldr	r3, [sp, #4]
 8014efa:	eba3 070c 	sub.w	r7, r3, ip
 8014efe:	ebab 0301 	sub.w	r3, fp, r1
 8014f02:	443c      	add	r4, r7
 8014f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f06:	0164      	lsls	r4, r4, #5
 8014f08:	fb94 f8f1 	sdiv	r8, r4, r1
 8014f0c:	fb01 4418 	mls	r4, r1, r8, r4
 8014f10:	2c00      	cmp	r4, #0
 8014f12:	bfbc      	itt	lt
 8014f14:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014f18:	1864      	addlt	r4, r4, r1
 8014f1a:	f108 0701 	add.w	r7, r8, #1
 8014f1e:	9711      	str	r7, [sp, #68]	@ 0x44
 8014f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f22:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014f26:	191b      	adds	r3, r3, r4
 8014f28:	f8be b004 	ldrh.w	fp, [lr, #4]
 8014f2c:	bf54      	ite	pl
 8014f2e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8014f30:	4647      	movmi	r7, r8
 8014f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f34:	bf58      	it	pl
 8014f36:	1a5b      	subpl	r3, r3, r1
 8014f38:	44bb      	add	fp, r7
 8014f3a:	44bc      	add	ip, r7
 8014f3c:	bf58      	it	pl
 8014f3e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8014f40:	f8ae b004 	strh.w	fp, [lr, #4]
 8014f44:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014f48:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014f4c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8014f4e:	f8ae b006 	strh.w	fp, [lr, #6]
 8014f52:	443d      	add	r5, r7
 8014f54:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014f58:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014f5c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8014f60:	ea5b 0307 	orrs.w	r3, fp, r7
 8014f64:	d011      	beq.n	8014f8a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014f66:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8014f6a:	f1bb 0f00 	cmp.w	fp, #0
 8014f6e:	db0c      	blt.n	8014f8a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014f70:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014f72:	45bb      	cmp	fp, r7
 8014f74:	da09      	bge.n	8014f8a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014f76:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014f7a:	45bb      	cmp	fp, r7
 8014f7c:	bf3c      	itt	cc
 8014f7e:	f10e 0708 	addcc.w	r7, lr, #8
 8014f82:	6107      	strcc	r7, [r0, #16]
 8014f84:	f10b 0701 	add.w	r7, fp, #1
 8014f88:	6087      	str	r7, [r0, #8]
 8014f8a:	6907      	ldr	r7, [r0, #16]
 8014f8c:	4555      	cmp	r5, sl
 8014f8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014f90:	803d      	strh	r5, [r7, #0]
 8014f92:	807b      	strh	r3, [r7, #2]
 8014f94:	80be      	strh	r6, [r7, #4]
 8014f96:	80fe      	strh	r6, [r7, #6]
 8014f98:	d1c2      	bne.n	8014f20 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8014f9a:	9b01      	ldr	r3, [sp, #4]
 8014f9c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8014f9e:	eba3 0c0c 	sub.w	ip, r3, ip
 8014fa2:	6903      	ldr	r3, [r0, #16]
 8014fa4:	3720      	adds	r7, #32
 8014fa6:	8899      	ldrh	r1, [r3, #4]
 8014fa8:	4461      	add	r1, ip
 8014faa:	8099      	strh	r1, [r3, #4]
 8014fac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014fae:	1a7f      	subs	r7, r7, r1
 8014fb0:	88d9      	ldrh	r1, [r3, #6]
 8014fb2:	fb0c 1c07 	mla	ip, ip, r7, r1
 8014fb6:	f8a3 c006 	strh.w	ip, [r3, #6]
 8014fba:	e613      	b.n	8014be4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014fbc:	f04f 34ff 	mov.w	r4, #4294967295
 8014fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014fc2:	4249      	negs	r1, r1
 8014fc4:	940d      	str	r4, [sp, #52]	@ 0x34
 8014fc6:	2400      	movs	r4, #0
 8014fc8:	437b      	muls	r3, r7
 8014fca:	e758      	b.n	8014e7e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8014fcc:	9905      	ldr	r1, [sp, #20]
 8014fce:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8014fd2:	f009 0c1f 	and.w	ip, r9, #31
 8014fd6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8014fda:	f001 011f 	and.w	r1, r1, #31
 8014fde:	45f3      	cmp	fp, lr
 8014fe0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014fe4:	9102      	str	r1, [sp, #8]
 8014fe6:	9904      	ldr	r1, [sp, #16]
 8014fe8:	eba1 0406 	sub.w	r4, r1, r6
 8014fec:	d108      	bne.n	8015000 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8014fee:	9b02      	ldr	r3, [sp, #8]
 8014ff0:	44a0      	add	r8, r4
 8014ff2:	449c      	add	ip, r3
 8014ff4:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014ff8:	fb04 a40c 	mla	r4, r4, ip, sl
 8014ffc:	80fc      	strh	r4, [r7, #6]
 8014ffe:	e461      	b.n	80148c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015000:	9905      	ldr	r1, [sp, #20]
 8015002:	ebb1 0109 	subs.w	r1, r1, r9
 8015006:	bf51      	iteee	pl
 8015008:	f1cc 0520 	rsbpl	r5, ip, #32
 801500c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8015010:	4249      	negmi	r1, r1
 8015012:	2500      	movmi	r5, #0
 8015014:	bf5d      	ittte	pl
 8015016:	436c      	mulpl	r4, r5
 8015018:	2520      	movpl	r5, #32
 801501a:	f04f 0901 	movpl.w	r9, #1
 801501e:	f04f 39ff 	movmi.w	r9, #4294967295
 8015022:	9501      	str	r5, [sp, #4]
 8015024:	9b01      	ldr	r3, [sp, #4]
 8015026:	fb94 f5f1 	sdiv	r5, r4, r1
 801502a:	fb01 4415 	mls	r4, r1, r5, r4
 801502e:	449c      	add	ip, r3
 8015030:	eb0b 0309 	add.w	r3, fp, r9
 8015034:	2c00      	cmp	r4, #0
 8015036:	bfbc      	itt	lt
 8015038:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801503c:	1864      	addlt	r4, r4, r1
 801503e:	44a8      	add	r8, r5
 8015040:	fb05 ac0c 	mla	ip, r5, ip, sl
 8015044:	f8a7 8004 	strh.w	r8, [r7, #4]
 8015048:	f8a7 c006 	strh.w	ip, [r7, #6]
 801504c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015050:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8015054:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015058:	ea58 0707 	orrs.w	r7, r8, r7
 801505c:	d011      	beq.n	8015082 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801505e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8015062:	f1b8 0f00 	cmp.w	r8, #0
 8015066:	db0c      	blt.n	8015082 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8015068:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801506a:	45b8      	cmp	r8, r7
 801506c:	da09      	bge.n	8015082 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801506e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8015072:	45b8      	cmp	r8, r7
 8015074:	bf3c      	itt	cc
 8015076:	f10c 0708 	addcc.w	r7, ip, #8
 801507a:	6107      	strcc	r7, [r0, #16]
 801507c:	f108 0701 	add.w	r7, r8, #1
 8015080:	6087      	str	r7, [r0, #8]
 8015082:	6907      	ldr	r7, [r0, #16]
 8015084:	f04f 0c00 	mov.w	ip, #0
 8015088:	b212      	sxth	r2, r2
 801508a:	459e      	cmp	lr, r3
 801508c:	803b      	strh	r3, [r7, #0]
 801508e:	442e      	add	r6, r5
 8015090:	807a      	strh	r2, [r7, #2]
 8015092:	f8a7 c004 	strh.w	ip, [r7, #4]
 8015096:	f8a7 c006 	strh.w	ip, [r7, #6]
 801509a:	d04b      	beq.n	8015134 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801509c:	9f04      	ldr	r7, [sp, #16]
 801509e:	1a64      	subs	r4, r4, r1
 80150a0:	f04f 0a00 	mov.w	sl, #0
 80150a4:	1bbf      	subs	r7, r7, r6
 80150a6:	443d      	add	r5, r7
 80150a8:	016d      	lsls	r5, r5, #5
 80150aa:	fb95 f8f1 	sdiv	r8, r5, r1
 80150ae:	fb01 5518 	mls	r5, r1, r8, r5
 80150b2:	4565      	cmp	r5, ip
 80150b4:	bfbc      	itt	lt
 80150b6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80150ba:	186d      	addlt	r5, r5, r1
 80150bc:	f108 0701 	add.w	r7, r8, #1
 80150c0:	9703      	str	r7, [sp, #12]
 80150c2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80150c6:	1964      	adds	r4, r4, r5
 80150c8:	444b      	add	r3, r9
 80150ca:	bf54      	ite	pl
 80150cc:	9f03      	ldrpl	r7, [sp, #12]
 80150ce:	4647      	movmi	r7, r8
 80150d0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80150d4:	bf58      	it	pl
 80150d6:	1a64      	subpl	r4, r4, r1
 80150d8:	443e      	add	r6, r7
 80150da:	44bb      	add	fp, r7
 80150dc:	f8ac b004 	strh.w	fp, [ip, #4]
 80150e0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80150e4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80150e8:	f8ac b006 	strh.w	fp, [ip, #6]
 80150ec:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80150f0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80150f4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80150f8:	ea5b 0707 	orrs.w	r7, fp, r7
 80150fc:	d011      	beq.n	8015122 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80150fe:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015102:	f1bb 0f00 	cmp.w	fp, #0
 8015106:	db0c      	blt.n	8015122 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8015108:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801510a:	45bb      	cmp	fp, r7
 801510c:	da09      	bge.n	8015122 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801510e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8015112:	45bb      	cmp	fp, r7
 8015114:	bf3c      	itt	cc
 8015116:	f10c 0708 	addcc.w	r7, ip, #8
 801511a:	6107      	strcc	r7, [r0, #16]
 801511c:	f10b 0701 	add.w	r7, fp, #1
 8015120:	6087      	str	r7, [r0, #8]
 8015122:	6907      	ldr	r7, [r0, #16]
 8015124:	459e      	cmp	lr, r3
 8015126:	803b      	strh	r3, [r7, #0]
 8015128:	807a      	strh	r2, [r7, #2]
 801512a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801512e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8015132:	d1c6      	bne.n	80150c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8015134:	9b04      	ldr	r3, [sp, #16]
 8015136:	1b9e      	subs	r6, r3, r6
 8015138:	6903      	ldr	r3, [r0, #16]
 801513a:	889a      	ldrh	r2, [r3, #4]
 801513c:	4432      	add	r2, r6
 801513e:	809a      	strh	r2, [r3, #4]
 8015140:	9a02      	ldr	r2, [sp, #8]
 8015142:	f102 0c20 	add.w	ip, r2, #32
 8015146:	9a01      	ldr	r2, [sp, #4]
 8015148:	ebac 0c02 	sub.w	ip, ip, r2
 801514c:	88da      	ldrh	r2, [r3, #6]
 801514e:	fb06 260c 	mla	r6, r6, ip, r2
 8015152:	80de      	strh	r6, [r3, #6]
 8015154:	f7ff bbb6 	b.w	80148c4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08015158 <_ZN8touchgfx7Outline6lineToEii>:
 8015158:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801515a:	079b      	lsls	r3, r3, #30
 801515c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801515e:	460e      	mov	r6, r1
 8015160:	4615      	mov	r5, r2
 8015162:	d511      	bpl.n	8015188 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015164:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8015168:	ea86 0701 	eor.w	r7, r6, r1
 801516c:	ea85 0302 	eor.w	r3, r5, r2
 8015170:	433b      	orrs	r3, r7
 8015172:	d009      	beq.n	8015188 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015174:	4633      	mov	r3, r6
 8015176:	9500      	str	r5, [sp, #0]
 8015178:	f7ff fb4c 	bl	8014814 <_ZN8touchgfx7Outline10renderLineEiiii>
 801517c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801517e:	f043 0301 	orr.w	r3, r3, #1
 8015182:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8015186:	6243      	str	r3, [r0, #36]	@ 0x24
 8015188:	b003      	add	sp, #12
 801518a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801518c <_ZN8touchgfx7Outline6moveToEii>:
 801518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801518e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015190:	4615      	mov	r5, r2
 8015192:	4604      	mov	r4, r0
 8015194:	460e      	mov	r6, r1
 8015196:	079a      	lsls	r2, r3, #30
 8015198:	d401      	bmi.n	801519e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801519a:	f7ff fb08 	bl	80147ae <_ZN8touchgfx7Outline5resetEv>
 801519e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80151a0:	07db      	lsls	r3, r3, #31
 80151a2:	d504      	bpl.n	80151ae <_ZN8touchgfx7Outline6moveToEii+0x22>
 80151a4:	4620      	mov	r0, r4
 80151a6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80151aa:	f7ff ffd5 	bl	8015158 <_ZN8touchgfx7Outline6lineToEii>
 80151ae:	6923      	ldr	r3, [r4, #16]
 80151b0:	1170      	asrs	r0, r6, #5
 80151b2:	1169      	asrs	r1, r5, #5
 80151b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80151b8:	4290      	cmp	r0, r2
 80151ba:	d103      	bne.n	80151c4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80151bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80151c0:	4291      	cmp	r1, r2
 80151c2:	d01a      	beq.n	80151fa <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80151c4:	88df      	ldrh	r7, [r3, #6]
 80151c6:	889a      	ldrh	r2, [r3, #4]
 80151c8:	433a      	orrs	r2, r7
 80151ca:	d010      	beq.n	80151ee <_ZN8touchgfx7Outline6moveToEii+0x62>
 80151cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	db0c      	blt.n	80151ee <_ZN8touchgfx7Outline6moveToEii+0x62>
 80151d4:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80151d6:	42ba      	cmp	r2, r7
 80151d8:	da09      	bge.n	80151ee <_ZN8touchgfx7Outline6moveToEii+0x62>
 80151da:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80151de:	42ba      	cmp	r2, r7
 80151e0:	f102 0201 	add.w	r2, r2, #1
 80151e4:	bf38      	it	cc
 80151e6:	3308      	addcc	r3, #8
 80151e8:	60a2      	str	r2, [r4, #8]
 80151ea:	bf38      	it	cc
 80151ec:	6123      	strcc	r3, [r4, #16]
 80151ee:	6923      	ldr	r3, [r4, #16]
 80151f0:	2200      	movs	r2, #0
 80151f2:	8018      	strh	r0, [r3, #0]
 80151f4:	8059      	strh	r1, [r3, #2]
 80151f6:	809a      	strh	r2, [r3, #4]
 80151f8:	80da      	strh	r2, [r3, #6]
 80151fa:	6166      	str	r6, [r4, #20]
 80151fc:	6225      	str	r5, [r4, #32]
 80151fe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015204 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8015204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015208:	b0d0      	sub	sp, #320	@ 0x140
 801520a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801520e:	466c      	mov	r4, sp
 8015210:	4627      	mov	r7, r4
 8015212:	1a0d      	subs	r5, r1, r0
 8015214:	f100 0308 	add.w	r3, r0, #8
 8015218:	2d48      	cmp	r5, #72	@ 0x48
 801521a:	f340 80d5 	ble.w	80153c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801521e:	112d      	asrs	r5, r5, #4
 8015220:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8015224:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015228:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801522c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8015230:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8015234:	6816      	ldr	r6, [r2, #0]
 8015236:	6006      	str	r6, [r0, #0]
 8015238:	6856      	ldr	r6, [r2, #4]
 801523a:	6046      	str	r6, [r0, #4]
 801523c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8015240:	f8a2 8002 	strh.w	r8, [r2, #2]
 8015244:	f8a2 e004 	strh.w	lr, [r2, #4]
 8015248:	f8a2 c006 	strh.w	ip, [r2, #6]
 801524c:	f1a1 0208 	sub.w	r2, r1, #8
 8015250:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8015254:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8015258:	4565      	cmp	r5, ip
 801525a:	db06      	blt.n	801526a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801525c:	d119      	bne.n	8015292 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801525e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8015262:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8015266:	42ae      	cmp	r6, r5
 8015268:	dd13      	ble.n	8015292 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801526a:	460e      	mov	r6, r1
 801526c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8015270:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8015274:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8015278:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801527c:	601d      	str	r5, [r3, #0]
 801527e:	6875      	ldr	r5, [r6, #4]
 8015280:	605d      	str	r5, [r3, #4]
 8015282:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015286:	f821 cc06 	strh.w	ip, [r1, #-6]
 801528a:	f821 8c04 	strh.w	r8, [r1, #-4]
 801528e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015292:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015296:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801529a:	42ae      	cmp	r6, r5
 801529c:	db06      	blt.n	80152ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801529e:	d116      	bne.n	80152ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80152a0:	f9b0 c000 	ldrsh.w	ip, [r0]
 80152a4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80152a8:	45ac      	cmp	ip, r5
 80152aa:	da10      	bge.n	80152ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80152ac:	681d      	ldr	r5, [r3, #0]
 80152ae:	f9b0 8000 	ldrsh.w	r8, [r0]
 80152b2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80152b6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80152ba:	6005      	str	r5, [r0, #0]
 80152bc:	685d      	ldr	r5, [r3, #4]
 80152be:	f8a0 8008 	strh.w	r8, [r0, #8]
 80152c2:	6045      	str	r5, [r0, #4]
 80152c4:	8146      	strh	r6, [r0, #10]
 80152c6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80152ca:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80152ce:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80152d2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80152d6:	4565      	cmp	r5, ip
 80152d8:	db06      	blt.n	80152e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80152da:	d119      	bne.n	8015310 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80152dc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80152e0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80152e4:	42ae      	cmp	r6, r5
 80152e6:	da13      	bge.n	8015310 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80152e8:	460e      	mov	r6, r1
 80152ea:	f9b0 9000 	ldrsh.w	r9, [r0]
 80152ee:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80152f2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80152f6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80152fa:	6005      	str	r5, [r0, #0]
 80152fc:	6875      	ldr	r5, [r6, #4]
 80152fe:	6045      	str	r5, [r0, #4]
 8015300:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015304:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015308:	f821 8c04 	strh.w	r8, [r1, #-4]
 801530c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015310:	3308      	adds	r3, #8
 8015312:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015316:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801531a:	45e6      	cmp	lr, ip
 801531c:	dbf8      	blt.n	8015310 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801531e:	d105      	bne.n	801532c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015320:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015324:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015328:	42ae      	cmp	r6, r5
 801532a:	dbf1      	blt.n	8015310 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801532c:	4615      	mov	r5, r2
 801532e:	3a08      	subs	r2, #8
 8015330:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8015334:	45b4      	cmp	ip, r6
 8015336:	dbf9      	blt.n	801532c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015338:	d105      	bne.n	8015346 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801533a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801533e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8015342:	45b0      	cmp	r8, r6
 8015344:	dbf2      	blt.n	801532c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8015346:	4293      	cmp	r3, r2
 8015348:	f1a5 0608 	sub.w	r6, r5, #8
 801534c:	d816      	bhi.n	801537c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801534e:	f8d6 c000 	ldr.w	ip, [r6]
 8015352:	f9b3 a000 	ldrsh.w	sl, [r3]
 8015356:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801535a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801535e:	f8c3 c000 	str.w	ip, [r3]
 8015362:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8015366:	f8c3 c004 	str.w	ip, [r3, #4]
 801536a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801536e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8015372:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015376:	f825 8c02 	strh.w	r8, [r5, #-2]
 801537a:	e7c9      	b.n	8015310 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801537c:	f8d6 e000 	ldr.w	lr, [r6]
 8015380:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015384:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8015388:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801538c:	f8c0 e000 	str.w	lr, [r0]
 8015390:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015394:	1a16      	subs	r6, r2, r0
 8015396:	f8c0 e004 	str.w	lr, [r0, #4]
 801539a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801539e:	f825 cc06 	strh.w	ip, [r5, #-6]
 80153a2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80153a6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80153aa:	1acd      	subs	r5, r1, r3
 80153ac:	10ed      	asrs	r5, r5, #3
 80153ae:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80153b2:	bfb5      	itete	lt
 80153b4:	e9c4 0200 	strdlt	r0, r2, [r4]
 80153b8:	e9c4 3100 	strdge	r3, r1, [r4]
 80153bc:	460a      	movlt	r2, r1
 80153be:	4603      	movge	r3, r0
 80153c0:	3408      	adds	r4, #8
 80153c2:	4618      	mov	r0, r3
 80153c4:	4611      	mov	r1, r2
 80153c6:	e724      	b.n	8015212 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80153c8:	4299      	cmp	r1, r3
 80153ca:	d927      	bls.n	801541c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80153cc:	f1a3 0210 	sub.w	r2, r3, #16
 80153d0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80153d4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80153d8:	45ac      	cmp	ip, r5
 80153da:	db06      	blt.n	80153ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80153dc:	d11c      	bne.n	8015418 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80153de:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80153e2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80153e6:	42ae      	cmp	r6, r5
 80153e8:	da16      	bge.n	8015418 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80153ea:	4615      	mov	r5, r2
 80153ec:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80153f0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80153f4:	3a08      	subs	r2, #8
 80153f6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80153fa:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80153fe:	6196      	str	r6, [r2, #24]
 8015400:	42a8      	cmp	r0, r5
 8015402:	686e      	ldr	r6, [r5, #4]
 8015404:	f8a2 9010 	strh.w	r9, [r2, #16]
 8015408:	61d6      	str	r6, [r2, #28]
 801540a:	f8a2 c012 	strh.w	ip, [r2, #18]
 801540e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8015412:	f8a2 e016 	strh.w	lr, [r2, #22]
 8015416:	d1db      	bne.n	80153d0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8015418:	3308      	adds	r3, #8
 801541a:	e7d5      	b.n	80153c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801541c:	42bc      	cmp	r4, r7
 801541e:	d903      	bls.n	8015428 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8015420:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8015424:	3c08      	subs	r4, #8
 8015426:	e6f4      	b.n	8015212 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015428:	b050      	add	sp, #320	@ 0x140
 801542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801542e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801542e:	b510      	push	{r4, lr}
 8015430:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015432:	4604      	mov	r4, r0
 8015434:	07da      	lsls	r2, r3, #31
 8015436:	d507      	bpl.n	8015448 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8015438:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801543c:	f7ff fe8c 	bl	8015158 <_ZN8touchgfx7Outline6lineToEii>
 8015440:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015442:	f023 0301 	bic.w	r3, r3, #1
 8015446:	6243      	str	r3, [r0, #36]	@ 0x24
 8015448:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801544a:	079b      	lsls	r3, r3, #30
 801544c:	d521      	bpl.n	8015492 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801544e:	6923      	ldr	r3, [r4, #16]
 8015450:	88d9      	ldrh	r1, [r3, #6]
 8015452:	889a      	ldrh	r2, [r3, #4]
 8015454:	430a      	orrs	r2, r1
 8015456:	d010      	beq.n	801547a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015458:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801545c:	2a00      	cmp	r2, #0
 801545e:	db0c      	blt.n	801547a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015460:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015462:	428a      	cmp	r2, r1
 8015464:	da09      	bge.n	801547a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015466:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801546a:	4291      	cmp	r1, r2
 801546c:	f102 0201 	add.w	r2, r2, #1
 8015470:	bf88      	it	hi
 8015472:	3308      	addhi	r3, #8
 8015474:	60a2      	str	r2, [r4, #8]
 8015476:	bf88      	it	hi
 8015478:	6123      	strhi	r3, [r4, #16]
 801547a:	68a1      	ldr	r1, [r4, #8]
 801547c:	b129      	cbz	r1, 801548a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801547e:	6863      	ldr	r3, [r4, #4]
 8015480:	4299      	cmp	r1, r3
 8015482:	d802      	bhi.n	801548a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015484:	68e0      	ldr	r0, [r4, #12]
 8015486:	f7ff febd 	bl	8015204 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801548a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801548c:	f023 0302 	bic.w	r3, r3, #2
 8015490:	6263      	str	r3, [r4, #36]	@ 0x24
 8015492:	68e0      	ldr	r0, [r4, #12]
 8015494:	bd10      	pop	{r4, pc}
	...

08015498 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8015498:	4b01      	ldr	r3, [pc, #4]	@ (80154a0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801549a:	6818      	ldr	r0, [r3, #0]
 801549c:	4770      	bx	lr
 801549e:	bf00      	nop
 80154a0:	24026420 	.word	0x24026420

080154a4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80154a4:	4b01      	ldr	r3, [pc, #4]	@ (80154ac <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80154a6:	6818      	ldr	r0, [r3, #0]
 80154a8:	4770      	bx	lr
 80154aa:	bf00      	nop
 80154ac:	24026424 	.word	0x24026424

080154b0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80154b0:	b510      	push	{r4, lr}
 80154b2:	6803      	ldr	r3, [r0, #0]
 80154b4:	460c      	mov	r4, r1
 80154b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154b8:	4798      	blx	r3
 80154ba:	1b03      	subs	r3, r0, r4
 80154bc:	4258      	negs	r0, r3
 80154be:	4158      	adcs	r0, r3
 80154c0:	bd10      	pop	{r4, pc}
	...

080154c4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80154c4:	4b01      	ldr	r3, [pc, #4]	@ (80154cc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80154c6:	6019      	str	r1, [r3, #0]
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	24026428 	.word	0x24026428

080154d0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80154d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154d4:	4696      	mov	lr, r2
 80154d6:	b097      	sub	sp, #92	@ 0x5c
 80154d8:	4605      	mov	r5, r0
 80154da:	4614      	mov	r4, r2
 80154dc:	460e      	mov	r6, r1
 80154de:	461f      	mov	r7, r3
 80154e0:	f10d 0c1c 	add.w	ip, sp, #28
 80154e4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80154e8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80154ec:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80154f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154f8:	f8de 3000 	ldr.w	r3, [lr]
 80154fc:	f104 0e14 	add.w	lr, r4, #20
 8015500:	f8cc 3000 	str.w	r3, [ip]
 8015504:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015508:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801550c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015510:	f8de 3000 	ldr.w	r3, [lr]
 8015514:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015518:	f8cc 3000 	str.w	r3, [ip]
 801551c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015520:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015528:	f8de 3000 	ldr.w	r3, [lr]
 801552c:	4631      	mov	r1, r6
 801552e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015530:	4628      	mov	r0, r5
 8015532:	f8cc 3000 	str.w	r3, [ip]
 8015536:	682b      	ldr	r3, [r5, #0]
 8015538:	9201      	str	r2, [sp, #4]
 801553a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801553c:	f8cd 8008 	str.w	r8, [sp, #8]
 8015540:	9200      	str	r2, [sp, #0]
 8015542:	aa07      	add	r2, sp, #28
 8015544:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015548:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801554c:	463b      	mov	r3, r7
 801554e:	47d8      	blx	fp
 8015550:	46a6      	mov	lr, r4
 8015552:	f10d 0c1c 	add.w	ip, sp, #28
 8015556:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801555a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801555e:	f8de 3000 	ldr.w	r3, [lr]
 8015562:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015566:	343c      	adds	r4, #60	@ 0x3c
 8015568:	f8cc 3000 	str.w	r3, [ip]
 801556c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015570:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015574:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015578:	f8de 3000 	ldr.w	r3, [lr]
 801557c:	f8cc 3000 	str.w	r3, [ip]
 8015580:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801558a:	6823      	ldr	r3, [r4, #0]
 801558c:	4631      	mov	r1, r6
 801558e:	4628      	mov	r0, r5
 8015590:	f8cc 3000 	str.w	r3, [ip]
 8015594:	682b      	ldr	r3, [r5, #0]
 8015596:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801559a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801559c:	f8cd 8008 	str.w	r8, [sp, #8]
 80155a0:	9201      	str	r2, [sp, #4]
 80155a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80155a4:	9200      	str	r2, [sp, #0]
 80155a6:	aa07      	add	r2, sp, #28
 80155a8:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80155aa:	463b      	mov	r3, r7
 80155ac:	47a0      	blx	r4
 80155ae:	b017      	add	sp, #92	@ 0x5c
 80155b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080155b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80155b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155b8:	b08d      	sub	sp, #52	@ 0x34
 80155ba:	4688      	mov	r8, r1
 80155bc:	f8d3 c000 	ldr.w	ip, [r3]
 80155c0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80155c2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80155c6:	680f      	ldr	r7, [r1, #0]
 80155c8:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80155cc:	eba7 070c 	sub.w	r7, r7, ip
 80155d0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80155d4:	edd3 6a07 	vldr	s13, [r3, #28]
 80155d8:	42bc      	cmp	r4, r7
 80155da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80155dc:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80155e0:	bfa8      	it	ge
 80155e2:	463c      	movge	r4, r7
 80155e4:	f9b1 9000 	ldrsh.w	r9, [r1]
 80155e8:	f9ba 1000 	ldrsh.w	r1, [sl]
 80155ec:	ee07 4a90 	vmov	s15, r4
 80155f0:	eb09 0e0c 	add.w	lr, r9, ip
 80155f4:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80155f8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80155fc:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8015600:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8015604:	4571      	cmp	r1, lr
 8015606:	ee25 4a04 	vmul.f32	s8, s10, s8
 801560a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801560e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8015612:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015616:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801561a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801561e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015622:	ee36 0a84 	vadd.f32	s0, s13, s8
 8015626:	ee61 1a87 	vmul.f32	s3, s3, s14
 801562a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801562e:	f340 808c 	ble.w	801574a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8015632:	eba1 060e 	sub.w	r6, r1, lr
 8015636:	fb96 f5f4 	sdiv	r5, r6, r4
 801563a:	ee07 5a10 	vmov	s14, r5
 801563e:	2d00      	cmp	r5, #0
 8015640:	fb04 6615 	mls	r6, r4, r5, r6
 8015644:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015648:	eea7 0a04 	vfma.f32	s0, s14, s8
 801564c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015650:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015654:	dd12      	ble.n	801567c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015656:	ee70 6a44 	vsub.f32	s13, s0, s8
 801565a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801565e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015662:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566a:	bf14      	ite	ne
 801566c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015670:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015674:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015678:	ee22 2a07 	vmul.f32	s4, s4, s14
 801567c:	fb05 f204 	mul.w	r2, r5, r4
 8015680:	1abf      	subs	r7, r7, r2
 8015682:	4494      	add	ip, r2
 8015684:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015688:	4411      	add	r1, r2
 801568a:	eb09 020c 	add.w	r2, r9, ip
 801568e:	b209      	sxth	r1, r1
 8015690:	443a      	add	r2, r7
 8015692:	428a      	cmp	r2, r1
 8015694:	bfc4      	itt	gt
 8015696:	eba1 0209 	subgt.w	r2, r1, r9
 801569a:	eba2 070c 	subgt.w	r7, r2, ip
 801569e:	2f00      	cmp	r7, #0
 80156a0:	dd50      	ble.n	8015744 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80156a2:	fb97 f1f4 	sdiv	r1, r7, r4
 80156a6:	fb04 7211 	mls	r2, r4, r1, r7
 80156aa:	b90a      	cbnz	r2, 80156b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80156ac:	3901      	subs	r1, #1
 80156ae:	4622      	mov	r2, r4
 80156b0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80156b4:	6840      	ldr	r0, [r0, #4]
 80156b6:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80156ba:	44b6      	add	lr, r6
 80156bc:	f8d0 a000 	ldr.w	sl, [r0]
 80156c0:	2900      	cmp	r1, #0
 80156c2:	bfcc      	ite	gt
 80156c4:	46a1      	movgt	r9, r4
 80156c6:	4691      	movle	r9, r2
 80156c8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80156ca:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80156cc:	fb04 e505 	mla	r5, r4, r5, lr
 80156d0:	eef0 6a42 	vmov.f32	s13, s4
 80156d4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80156d8:	9008      	str	r0, [sp, #32]
 80156da:	eeb0 7a61 	vmov.f32	s14, s3
 80156de:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80156e0:	695b      	ldr	r3, [r3, #20]
 80156e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80156e6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80156ea:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80156ee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80156f0:	445b      	add	r3, fp
 80156f2:	9307      	str	r3, [sp, #28]
 80156f4:	ee16 3a90 	vmov	r3, s13
 80156f8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80156fc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015700:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015704:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015708:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801570c:	ee17 7a90 	vmov	r7, s15
 8015710:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015714:	fb97 f7f4 	sdiv	r7, r7, r4
 8015718:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801571c:	ee17 ca90 	vmov	ip, s15
 8015720:	fb9c fcf4 	sdiv	ip, ip, r4
 8015724:	fb0c 3306 	mla	r3, ip, r6, r3
 8015728:	9302      	str	r3, [sp, #8]
 801572a:	ee17 3a10 	vmov	r3, s14
 801572e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015732:	fb07 3706 	mla	r7, r7, r6, r3
 8015736:	eba9 0306 	sub.w	r3, r9, r6
 801573a:	e9cd 4700 	strd	r4, r7, [sp]
 801573e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015742:	47a0      	blx	r4
 8015744:	b00d      	add	sp, #52	@ 0x34
 8015746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801574a:	2500      	movs	r5, #0
 801574c:	462e      	mov	r6, r5
 801574e:	e799      	b.n	8015684 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015754:	b0db      	sub	sp, #364	@ 0x16c
 8015756:	461d      	mov	r5, r3
 8015758:	4614      	mov	r4, r2
 801575a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801575e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015760:	4629      	mov	r1, r5
 8015762:	930a      	str	r3, [sp, #40]	@ 0x28
 8015764:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8015768:	9009      	str	r0, [sp, #36]	@ 0x24
 801576a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801576c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8015770:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8015774:	9310      	str	r3, [sp, #64]	@ 0x40
 8015776:	6803      	ldr	r3, [r0, #0]
 8015778:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801577a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801577e:	47b8      	blx	r7
 8015780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015782:	6058      	str	r0, [r3, #4]
 8015784:	2800      	cmp	r0, #0
 8015786:	f000 83a1 	beq.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801578a:	682b      	ldr	r3, [r5, #0]
 801578c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8015790:	ed94 7a02 	vldr	s14, [r4, #8]
 8015794:	9314      	str	r3, [sp, #80]	@ 0x50
 8015796:	686b      	ldr	r3, [r5, #4]
 8015798:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801579c:	9315      	str	r3, [sp, #84]	@ 0x54
 801579e:	4bc1      	ldr	r3, [pc, #772]	@ (8015aa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80157a0:	7819      	ldrb	r1, [r3, #0]
 80157a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80157a6:	2900      	cmp	r1, #0
 80157a8:	bf16      	itet	ne
 80157aa:	4619      	movne	r1, r3
 80157ac:	4611      	moveq	r1, r2
 80157ae:	4613      	movne	r3, r2
 80157b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b4:	9116      	str	r1, [sp, #88]	@ 0x58
 80157b6:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80157ba:	f240 8387 	bls.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80157be:	ed94 7a07 	vldr	s14, [r4, #28]
 80157c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ca:	f240 837f 	bls.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80157ce:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80157d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157da:	f240 8377 	bls.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80157de:	6822      	ldr	r2, [r4, #0]
 80157e0:	4bb1      	ldr	r3, [pc, #708]	@ (8015aa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80157e2:	429a      	cmp	r2, r3
 80157e4:	f2c0 8372 	blt.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80157e8:	49b0      	ldr	r1, [pc, #704]	@ (8015aac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80157ea:	6963      	ldr	r3, [r4, #20]
 80157ec:	428a      	cmp	r2, r1
 80157ee:	f300 836d 	bgt.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80157f2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80157f6:	48ae      	ldr	r0, [pc, #696]	@ (8015ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80157f8:	33ff      	adds	r3, #255	@ 0xff
 80157fa:	4283      	cmp	r3, r0
 80157fc:	f200 8366 	bhi.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015800:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015802:	4dac      	ldr	r5, [pc, #688]	@ (8015ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015804:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015808:	33ff      	adds	r3, #255	@ 0xff
 801580a:	42ab      	cmp	r3, r5
 801580c:	f200 835e 	bhi.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015810:	6862      	ldr	r2, [r4, #4]
 8015812:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8015816:	33ff      	adds	r3, #255	@ 0xff
 8015818:	4283      	cmp	r3, r0
 801581a:	f200 8357 	bhi.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801581e:	69a1      	ldr	r1, [r4, #24]
 8015820:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8015824:	33ff      	adds	r3, #255	@ 0xff
 8015826:	4283      	cmp	r3, r0
 8015828:	f200 8350 	bhi.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801582c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801582e:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8015832:	30ff      	adds	r0, #255	@ 0xff
 8015834:	42a8      	cmp	r0, r5
 8015836:	f200 8349 	bhi.w	8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801583a:	428a      	cmp	r2, r1
 801583c:	f280 8110 	bge.w	8015a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015840:	429a      	cmp	r2, r3
 8015842:	f300 8119 	bgt.w	8015a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015846:	4299      	cmp	r1, r3
 8015848:	f280 811d 	bge.w	8015a86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801584c:	2502      	movs	r5, #2
 801584e:	2701      	movs	r7, #1
 8015850:	46a9      	mov	r9, r5
 8015852:	46b8      	mov	r8, r7
 8015854:	f04f 0a00 	mov.w	sl, #0
 8015858:	4621      	mov	r1, r4
 801585a:	a849      	add	r0, sp, #292	@ 0x124
 801585c:	f004 f9ae 	bl	8019bbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015860:	4622      	mov	r2, r4
 8015862:	4653      	mov	r3, sl
 8015864:	a949      	add	r1, sp, #292	@ 0x124
 8015866:	f8cd 9000 	str.w	r9, [sp]
 801586a:	a819      	add	r0, sp, #100	@ 0x64
 801586c:	f004 fad6 	bl	8019e1c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015870:	4622      	mov	r2, r4
 8015872:	4653      	mov	r3, sl
 8015874:	a949      	add	r1, sp, #292	@ 0x124
 8015876:	f8cd 8000 	str.w	r8, [sp]
 801587a:	a829      	add	r0, sp, #164	@ 0xa4
 801587c:	f004 face 	bl	8019e1c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015880:	4643      	mov	r3, r8
 8015882:	4622      	mov	r2, r4
 8015884:	a949      	add	r1, sp, #292	@ 0x124
 8015886:	f8cd 9000 	str.w	r9, [sp]
 801588a:	a839      	add	r0, sp, #228	@ 0xe4
 801588c:	f004 fac6 	bl	8019e1c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015890:	42af      	cmp	r7, r5
 8015892:	af12      	add	r7, sp, #72	@ 0x48
 8015894:	bfb7      	itett	lt
 8015896:	2300      	movlt	r3, #0
 8015898:	2301      	movge	r3, #1
 801589a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801589c:	ac19      	addlt	r4, sp, #100	@ 0x64
 801589e:	bfb1      	iteee	lt
 80158a0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80158a2:	ad19      	addge	r5, sp, #100	@ 0x64
 80158a4:	930e      	strge	r3, [sp, #56]	@ 0x38
 80158a6:	ac29      	addge	r4, sp, #164	@ 0xa4
 80158a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80158aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80158ae:	e887 0003 	stmia.w	r7, {r0, r1}
 80158b2:	b928      	cbnz	r0, 80158c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80158b4:	4b80      	ldr	r3, [pc, #512]	@ (8015ab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80158b6:	6818      	ldr	r0, [r3, #0]
 80158b8:	6803      	ldr	r3, [r0, #0]
 80158ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80158bc:	4798      	blx	r3
 80158be:	6038      	str	r0, [r7, #0]
 80158c0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80158c2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80158c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80158ca:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80158cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80158ce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80158d0:	6963      	ldr	r3, [r4, #20]
 80158d2:	440b      	add	r3, r1
 80158d4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80158d8:	4408      	add	r0, r1
 80158da:	b200      	sxth	r0, r0
 80158dc:	4283      	cmp	r3, r0
 80158de:	900d      	str	r0, [sp, #52]	@ 0x34
 80158e0:	f280 80dd 	bge.w	8015a9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80158e4:	428b      	cmp	r3, r1
 80158e6:	da08      	bge.n	80158fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80158e8:	2a00      	cmp	r2, #0
 80158ea:	dd06      	ble.n	80158fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80158ec:	1acb      	subs	r3, r1, r3
 80158ee:	429a      	cmp	r2, r3
 80158f0:	f2c0 80e4 	blt.w	8015abc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	f300 80e2 	bgt.w	8015abe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80158fa:	6967      	ldr	r7, [r4, #20]
 80158fc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015900:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015902:	443b      	add	r3, r7
 8015904:	461f      	mov	r7, r3
 8015906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015908:	1bdf      	subs	r7, r3, r7
 801590a:	4297      	cmp	r7, r2
 801590c:	bfa8      	it	ge
 801590e:	4617      	movge	r7, r2
 8015910:	2f00      	cmp	r7, #0
 8015912:	f340 8166 	ble.w	8015be2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015916:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015918:	6829      	ldr	r1, [r5, #0]
 801591a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801591e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015922:	4411      	add	r1, r2
 8015924:	6820      	ldr	r0, [r4, #0]
 8015926:	4299      	cmp	r1, r3
 8015928:	dd1a      	ble.n	8015960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801592a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801592e:	4402      	add	r2, r0
 8015930:	440b      	add	r3, r1
 8015932:	b21b      	sxth	r3, r3
 8015934:	429a      	cmp	r2, r3
 8015936:	dc13      	bgt.n	8015960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015938:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801593a:	a912      	add	r1, sp, #72	@ 0x48
 801593c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801593e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	9206      	str	r2, [sp, #24]
 8015944:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015946:	9500      	str	r5, [sp, #0]
 8015948:	9205      	str	r2, [sp, #20]
 801594a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801594c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015950:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015952:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015956:	aa49      	add	r2, sp, #292	@ 0x124
 8015958:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801595c:	4623      	mov	r3, r4
 801595e:	47c8      	blx	r9
 8015960:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015964:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015968:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801596c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015970:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015974:	68a1      	ldr	r1, [r4, #8]
 8015976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801597a:	ed94 6a08 	vldr	s12, [r4, #32]
 801597e:	edd4 6a07 	vldr	s13, [r4, #28]
 8015982:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015986:	ee76 6a86 	vadd.f32	s13, s13, s12
 801598a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801598e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015992:	edc4 6a07 	vstr	s13, [r4, #28]
 8015996:	441a      	add	r2, r3
 8015998:	6963      	ldr	r3, [r4, #20]
 801599a:	3301      	adds	r3, #1
 801599c:	6022      	str	r2, [r4, #0]
 801599e:	6163      	str	r3, [r4, #20]
 80159a0:	69a3      	ldr	r3, [r4, #24]
 80159a2:	3b01      	subs	r3, #1
 80159a4:	61a3      	str	r3, [r4, #24]
 80159a6:	6923      	ldr	r3, [r4, #16]
 80159a8:	440b      	add	r3, r1
 80159aa:	68e1      	ldr	r1, [r4, #12]
 80159ac:	428b      	cmp	r3, r1
 80159ae:	6123      	str	r3, [r4, #16]
 80159b0:	db15      	blt.n	80159de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80159b2:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80159b6:	3201      	adds	r2, #1
 80159b8:	1a5b      	subs	r3, r3, r1
 80159ba:	ee76 6a26 	vadd.f32	s13, s12, s13
 80159be:	6022      	str	r2, [r4, #0]
 80159c0:	6123      	str	r3, [r4, #16]
 80159c2:	edc4 6a07 	vstr	s13, [r4, #28]
 80159c6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80159ca:	ee36 7a87 	vadd.f32	s14, s13, s14
 80159ce:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80159d2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80159d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159da:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80159de:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80159e2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80159e6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80159ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80159ee:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80159f2:	68a9      	ldr	r1, [r5, #8]
 80159f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80159f8:	ed95 6a08 	vldr	s12, [r5, #32]
 80159fc:	edd5 6a07 	vldr	s13, [r5, #28]
 8015a00:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015a04:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015a08:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015a0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a10:	edc5 6a07 	vstr	s13, [r5, #28]
 8015a14:	441a      	add	r2, r3
 8015a16:	696b      	ldr	r3, [r5, #20]
 8015a18:	3301      	adds	r3, #1
 8015a1a:	602a      	str	r2, [r5, #0]
 8015a1c:	616b      	str	r3, [r5, #20]
 8015a1e:	69ab      	ldr	r3, [r5, #24]
 8015a20:	3b01      	subs	r3, #1
 8015a22:	61ab      	str	r3, [r5, #24]
 8015a24:	692b      	ldr	r3, [r5, #16]
 8015a26:	440b      	add	r3, r1
 8015a28:	68e9      	ldr	r1, [r5, #12]
 8015a2a:	428b      	cmp	r3, r1
 8015a2c:	612b      	str	r3, [r5, #16]
 8015a2e:	db15      	blt.n	8015a5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015a30:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015a34:	3201      	adds	r2, #1
 8015a36:	1a5b      	subs	r3, r3, r1
 8015a38:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015a3c:	602a      	str	r2, [r5, #0]
 8015a3e:	612b      	str	r3, [r5, #16]
 8015a40:	edc5 6a07 	vstr	s13, [r5, #28]
 8015a44:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015a48:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015a4c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015a50:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a58:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015a5c:	3f01      	subs	r7, #1
 8015a5e:	e757      	b.n	8015910 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015a60:	4299      	cmp	r1, r3
 8015a62:	dc13      	bgt.n	8015a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015a64:	429a      	cmp	r2, r3
 8015a66:	da14      	bge.n	8015a92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015a68:	2502      	movs	r5, #2
 8015a6a:	2703      	movs	r7, #3
 8015a6c:	f04f 0800 	mov.w	r8, #0
 8015a70:	46a9      	mov	r9, r5
 8015a72:	f04f 0a01 	mov.w	sl, #1
 8015a76:	e6ef      	b.n	8015858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015a78:	2501      	movs	r5, #1
 8015a7a:	2700      	movs	r7, #0
 8015a7c:	46a9      	mov	r9, r5
 8015a7e:	46b8      	mov	r8, r7
 8015a80:	f04f 0a02 	mov.w	sl, #2
 8015a84:	e6e8      	b.n	8015858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015a86:	2501      	movs	r5, #1
 8015a88:	2702      	movs	r7, #2
 8015a8a:	e6e1      	b.n	8015850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015a8c:	2500      	movs	r5, #0
 8015a8e:	2701      	movs	r7, #1
 8015a90:	e7f4      	b.n	8015a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015a92:	2702      	movs	r7, #2
 8015a94:	2503      	movs	r5, #3
 8015a96:	f04f 0900 	mov.w	r9, #0
 8015a9a:	46b8      	mov	r8, r7
 8015a9c:	e7e9      	b.n	8015a72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015a9e:	4613      	mov	r3, r2
 8015aa0:	e728      	b.n	80158f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015aa2:	bf00      	nop
 8015aa4:	24026410 	.word	0x24026410
 8015aa8:	fffd8f01 	.word	0xfffd8f01
 8015aac:	00027100 	.word	0x00027100
 8015ab0:	0004e1ff 	.word	0x0004e1ff
 8015ab4:	0004e1fe 	.word	0x0004e1fe
 8015ab8:	24026418 	.word	0x24026418
 8015abc:	4613      	mov	r3, r2
 8015abe:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015ac0:	469e      	mov	lr, r3
 8015ac2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015ac4:	469c      	mov	ip, r3
 8015ac6:	9111      	str	r1, [sp, #68]	@ 0x44
 8015ac8:	f04f 0900 	mov.w	r9, #0
 8015acc:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8015ad0:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8015ad4:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8015ad8:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8015adc:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8015ae0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8015ae4:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8015ae8:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8015aec:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8015af0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8015af4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8015af8:	f1bc 0f00 	cmp.w	ip, #0
 8015afc:	d147      	bne.n	8015b8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015afe:	eb03 0c07 	add.w	ip, r3, r7
 8015b02:	1ad7      	subs	r7, r2, r3
 8015b04:	f1b9 0f00 	cmp.w	r9, #0
 8015b08:	d009      	beq.n	8015b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015b0a:	9029      	str	r0, [sp, #164]	@ 0xa4
 8015b0c:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8015b10:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8015b14:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8015b18:	912d      	str	r1, [sp, #180]	@ 0xb4
 8015b1a:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8015b1e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015b20:	f04f 0800 	mov.w	r8, #0
 8015b24:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015b28:	9111      	str	r1, [sp, #68]	@ 0x44
 8015b2a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015b2e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015b32:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015b36:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8015b3a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015b3e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015b42:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015b46:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8015b4a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015b4e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015b52:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015b56:	f1be 0f00 	cmp.w	lr, #0
 8015b5a:	d031      	beq.n	8015bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015b5c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015b5e:	4450      	add	r0, sl
 8015b60:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015b64:	4431      	add	r1, r6
 8015b66:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015b6a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015b6e:	4549      	cmp	r1, r9
 8015b70:	db08      	blt.n	8015b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015b72:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015b76:	3001      	adds	r0, #1
 8015b78:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015b7c:	eba1 0109 	sub.w	r1, r1, r9
 8015b80:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015b84:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015b88:	f04f 0801 	mov.w	r8, #1
 8015b8c:	e7e3      	b.n	8015b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015b8e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015b90:	4450      	add	r0, sl
 8015b92:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015b96:	4431      	add	r1, r6
 8015b98:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015b9c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015ba0:	4541      	cmp	r1, r8
 8015ba2:	db08      	blt.n	8015bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015ba4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015ba8:	3001      	adds	r0, #1
 8015baa:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015bae:	eba1 0108 	sub.w	r1, r1, r8
 8015bb2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015bb6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015bba:	f04f 0901 	mov.w	r9, #1
 8015bbe:	e79b      	b.n	8015af8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015bc0:	449c      	add	ip, r3
 8015bc2:	1aff      	subs	r7, r7, r3
 8015bc4:	f1b8 0f00 	cmp.w	r8, #0
 8015bc8:	d009      	beq.n	8015bde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015bca:	9019      	str	r0, [sp, #100]	@ 0x64
 8015bcc:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015bd0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015bd4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015bd8:	911d      	str	r1, [sp, #116]	@ 0x74
 8015bda:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015bde:	1ad2      	subs	r2, r2, r3
 8015be0:	e68b      	b.n	80158fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015be4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	f000 80d1 	beq.w	8015d8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015bec:	ad19      	add	r5, sp, #100	@ 0x64
 8015bee:	ac39      	add	r4, sp, #228	@ 0xe4
 8015bf0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015bf2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015bfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8015bfc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015bfe:	6963      	ldr	r3, [r4, #20]
 8015c00:	440b      	add	r3, r1
 8015c02:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015c06:	4408      	add	r0, r1
 8015c08:	b200      	sxth	r0, r0
 8015c0a:	4283      	cmp	r3, r0
 8015c0c:	900d      	str	r0, [sp, #52]	@ 0x34
 8015c0e:	f280 80c1 	bge.w	8015d94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015c12:	428b      	cmp	r3, r1
 8015c14:	da08      	bge.n	8015c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015c16:	2a00      	cmp	r2, #0
 8015c18:	dd06      	ble.n	8015c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015c1a:	1acb      	subs	r3, r1, r3
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	f2c0 80bb 	blt.w	8015d98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	f300 80b9 	bgt.w	8015d9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015c28:	6967      	ldr	r7, [r4, #20]
 8015c2a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015c2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c30:	443b      	add	r3, r7
 8015c32:	461f      	mov	r7, r3
 8015c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c36:	1bdf      	subs	r7, r3, r7
 8015c38:	4297      	cmp	r7, r2
 8015c3a:	bfa8      	it	ge
 8015c3c:	4617      	movge	r7, r2
 8015c3e:	2f00      	cmp	r7, #0
 8015c40:	f340 813c 	ble.w	8015ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015c44:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015c46:	6829      	ldr	r1, [r5, #0]
 8015c48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c4c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015c50:	4411      	add	r1, r2
 8015c52:	6820      	ldr	r0, [r4, #0]
 8015c54:	4299      	cmp	r1, r3
 8015c56:	dd1a      	ble.n	8015c8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015c58:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015c5c:	4402      	add	r2, r0
 8015c5e:	440b      	add	r3, r1
 8015c60:	b21b      	sxth	r3, r3
 8015c62:	429a      	cmp	r2, r3
 8015c64:	dc13      	bgt.n	8015c8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015c66:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015c68:	a912      	add	r1, sp, #72	@ 0x48
 8015c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	9206      	str	r2, [sp, #24]
 8015c72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015c74:	9500      	str	r5, [sp, #0]
 8015c76:	9205      	str	r2, [sp, #20]
 8015c78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015c7a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015c7e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015c80:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015c84:	aa49      	add	r2, sp, #292	@ 0x124
 8015c86:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015c8a:	4623      	mov	r3, r4
 8015c8c:	47c8      	blx	r9
 8015c8e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015c92:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015c96:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8015c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c9e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015ca2:	68a1      	ldr	r1, [r4, #8]
 8015ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ca8:	ed94 6a08 	vldr	s12, [r4, #32]
 8015cac:	edd4 6a07 	vldr	s13, [r4, #28]
 8015cb0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015cb4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015cb8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015cbc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015cc0:	edc4 6a07 	vstr	s13, [r4, #28]
 8015cc4:	441a      	add	r2, r3
 8015cc6:	6963      	ldr	r3, [r4, #20]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	6022      	str	r2, [r4, #0]
 8015ccc:	6163      	str	r3, [r4, #20]
 8015cce:	69a3      	ldr	r3, [r4, #24]
 8015cd0:	3b01      	subs	r3, #1
 8015cd2:	61a3      	str	r3, [r4, #24]
 8015cd4:	6923      	ldr	r3, [r4, #16]
 8015cd6:	440b      	add	r3, r1
 8015cd8:	68e1      	ldr	r1, [r4, #12]
 8015cda:	428b      	cmp	r3, r1
 8015cdc:	6123      	str	r3, [r4, #16]
 8015cde:	db15      	blt.n	8015d0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015ce0:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015ce4:	3201      	adds	r2, #1
 8015ce6:	1a5b      	subs	r3, r3, r1
 8015ce8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015cec:	6022      	str	r2, [r4, #0]
 8015cee:	6123      	str	r3, [r4, #16]
 8015cf0:	edc4 6a07 	vstr	s13, [r4, #28]
 8015cf4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8015cf8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015cfc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015d00:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d08:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015d0c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015d10:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015d14:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8015d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d1c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015d20:	68a9      	ldr	r1, [r5, #8]
 8015d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d26:	ed95 6a08 	vldr	s12, [r5, #32]
 8015d2a:	edd5 6a07 	vldr	s13, [r5, #28]
 8015d2e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015d32:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d36:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015d3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d3e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015d42:	441a      	add	r2, r3
 8015d44:	696b      	ldr	r3, [r5, #20]
 8015d46:	3301      	adds	r3, #1
 8015d48:	602a      	str	r2, [r5, #0]
 8015d4a:	616b      	str	r3, [r5, #20]
 8015d4c:	69ab      	ldr	r3, [r5, #24]
 8015d4e:	3b01      	subs	r3, #1
 8015d50:	61ab      	str	r3, [r5, #24]
 8015d52:	692b      	ldr	r3, [r5, #16]
 8015d54:	440b      	add	r3, r1
 8015d56:	68e9      	ldr	r1, [r5, #12]
 8015d58:	428b      	cmp	r3, r1
 8015d5a:	612b      	str	r3, [r5, #16]
 8015d5c:	db15      	blt.n	8015d8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015d5e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015d62:	3201      	adds	r2, #1
 8015d64:	1a5b      	subs	r3, r3, r1
 8015d66:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015d6a:	602a      	str	r2, [r5, #0]
 8015d6c:	612b      	str	r3, [r5, #16]
 8015d6e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015d72:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015d76:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015d7a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015d7e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d86:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015d8a:	3f01      	subs	r7, #1
 8015d8c:	e757      	b.n	8015c3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015d8e:	ad39      	add	r5, sp, #228	@ 0xe4
 8015d90:	ac19      	add	r4, sp, #100	@ 0x64
 8015d92:	e72d      	b.n	8015bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015d94:	4613      	mov	r3, r2
 8015d96:	e744      	b.n	8015c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015d98:	4613      	mov	r3, r2
 8015d9a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8015d9c:	469e      	mov	lr, r3
 8015d9e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8015da2:	461f      	mov	r7, r3
 8015da4:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8015da8:	f04f 0900 	mov.w	r9, #0
 8015dac:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8015db0:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8015db4:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8015db8:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8015dbc:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8015dc0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8015dc2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8015dc6:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8015dca:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8015dce:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8015dd2:	960e      	str	r6, [sp, #56]	@ 0x38
 8015dd4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8015dd8:	2f00      	cmp	r7, #0
 8015dda:	d146      	bne.n	8015e6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015ddc:	449c      	add	ip, r3
 8015dde:	1ad7      	subs	r7, r2, r3
 8015de0:	f1b9 0f00 	cmp.w	r9, #0
 8015de4:	d009      	beq.n	8015dfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8015de6:	9039      	str	r0, [sp, #228]	@ 0xe4
 8015de8:	913d      	str	r1, [sp, #244]	@ 0xf4
 8015dea:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8015dee:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8015df2:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8015df6:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8015dfa:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015dfc:	f04f 0800 	mov.w	r8, #0
 8015e00:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015e04:	910e      	str	r1, [sp, #56]	@ 0x38
 8015e06:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015e0a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015e0e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015e12:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8015e16:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015e1a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015e1e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015e22:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8015e26:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015e2a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015e2e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015e32:	f1be 0f00 	cmp.w	lr, #0
 8015e36:	d030      	beq.n	8015e9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015e38:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015e3a:	4450      	add	r0, sl
 8015e3c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015e40:	4431      	add	r1, r6
 8015e42:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015e46:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015e4a:	4549      	cmp	r1, r9
 8015e4c:	db08      	blt.n	8015e60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015e4e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015e52:	3001      	adds	r0, #1
 8015e54:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015e58:	eba1 0109 	sub.w	r1, r1, r9
 8015e5c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015e60:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015e64:	f04f 0801 	mov.w	r8, #1
 8015e68:	e7e3      	b.n	8015e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015e6a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015e6c:	4450      	add	r0, sl
 8015e6e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015e72:	4431      	add	r1, r6
 8015e74:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015e78:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015e7c:	4541      	cmp	r1, r8
 8015e7e:	db08      	blt.n	8015e92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015e80:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015e84:	3001      	adds	r0, #1
 8015e86:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015e8a:	eba1 0108 	sub.w	r1, r1, r8
 8015e8e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015e92:	3f01      	subs	r7, #1
 8015e94:	f04f 0901 	mov.w	r9, #1
 8015e98:	e79e      	b.n	8015dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015e9a:	449c      	add	ip, r3
 8015e9c:	1aff      	subs	r7, r7, r3
 8015e9e:	f1b8 0f00 	cmp.w	r8, #0
 8015ea2:	d009      	beq.n	8015eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015ea4:	9019      	str	r0, [sp, #100]	@ 0x64
 8015ea6:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015eaa:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015eae:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015eb2:	911d      	str	r1, [sp, #116]	@ 0x74
 8015eb4:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015eb8:	1ad2      	subs	r2, r2, r3
 8015eba:	e6b5      	b.n	8015c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	b923      	cbnz	r3, 8015ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ec2:	4b04      	ldr	r3, [pc, #16]	@ (8015ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015ec4:	6818      	ldr	r0, [r3, #0]
 8015ec6:	6803      	ldr	r3, [r0, #0]
 8015ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eca:	4798      	blx	r3
 8015ecc:	b05b      	add	sp, #364	@ 0x16c
 8015ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ed2:	bf00      	nop
 8015ed4:	24026418 	.word	0x24026418

08015ed8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8015ed8:	b570      	push	{r4, r5, r6, lr}
 8015eda:	4604      	mov	r4, r0
 8015edc:	2500      	movs	r5, #0
 8015ede:	9805      	ldr	r0, [sp, #20]
 8015ee0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015ee4:	6061      	str	r1, [r4, #4]
 8015ee6:	8263      	strh	r3, [r4, #18]
 8015ee8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8015eec:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015ef0:	8025      	strh	r5, [r4, #0]
 8015ef2:	7221      	strb	r1, [r4, #8]
 8015ef4:	7266      	strb	r6, [r4, #9]
 8015ef6:	60e0      	str	r0, [r4, #12]
 8015ef8:	8222      	strh	r2, [r4, #16]
 8015efa:	82a3      	strh	r3, [r4, #20]
 8015efc:	82e5      	strh	r5, [r4, #22]
 8015efe:	8325      	strh	r5, [r4, #24]
 8015f00:	8365      	strh	r5, [r4, #26]
 8015f02:	83a5      	strh	r5, [r4, #28]
 8015f04:	83e5      	strh	r5, [r4, #30]
 8015f06:	8425      	strh	r5, [r4, #32]
 8015f08:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8015f0c:	b32e      	cbz	r6, 8015f5a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015f0e:	6803      	ldr	r3, [r0, #0]
 8015f10:	695b      	ldr	r3, [r3, #20]
 8015f12:	4798      	blx	r3
 8015f14:	4606      	mov	r6, r0
 8015f16:	b300      	cbz	r0, 8015f5a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015f18:	68e0      	ldr	r0, [r4, #12]
 8015f1a:	4631      	mov	r1, r6
 8015f1c:	6803      	ldr	r3, [r0, #0]
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	4798      	blx	r3
 8015f22:	4605      	mov	r5, r0
 8015f24:	b1c8      	cbz	r0, 8015f5a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015f26:	7b43      	ldrb	r3, [r0, #13]
 8015f28:	7a82      	ldrb	r2, [r0, #10]
 8015f2a:	005b      	lsls	r3, r3, #1
 8015f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015f30:	4313      	orrs	r3, r2
 8015f32:	8423      	strh	r3, [r4, #32]
 8015f34:	7a63      	ldrb	r3, [r4, #9]
 8015f36:	2b06      	cmp	r3, #6
 8015f38:	d10f      	bne.n	8015f5a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015f3a:	68e0      	ldr	r0, [r4, #12]
 8015f3c:	462a      	mov	r2, r5
 8015f3e:	4631      	mov	r1, r6
 8015f40:	6803      	ldr	r3, [r0, #0]
 8015f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f44:	4798      	blx	r3
 8015f46:	7b6b      	ldrb	r3, [r5, #13]
 8015f48:	005b      	lsls	r3, r3, #1
 8015f4a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015f4e:	7aab      	ldrb	r3, [r5, #10]
 8015f50:	4313      	orrs	r3, r2
 8015f52:	4418      	add	r0, r3
 8015f54:	8c23      	ldrh	r3, [r4, #32]
 8015f56:	4418      	add	r0, r3
 8015f58:	8420      	strh	r0, [r4, #32]
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	bd70      	pop	{r4, r5, r6, pc}

08015f5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015f5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f62:	2400      	movs	r4, #0
 8015f64:	b085      	sub	sp, #20
 8015f66:	4681      	mov	r9, r0
 8015f68:	4688      	mov	r8, r1
 8015f6a:	4692      	mov	sl, r2
 8015f6c:	469b      	mov	fp, r3
 8015f6e:	4627      	mov	r7, r4
 8015f70:	4625      	mov	r5, r4
 8015f72:	4626      	mov	r6, r4
 8015f74:	4554      	cmp	r4, sl
 8015f76:	da2a      	bge.n	8015fce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015f78:	2300      	movs	r3, #0
 8015f7a:	9303      	str	r3, [sp, #12]
 8015f7c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015f80:	429d      	cmp	r5, r3
 8015f82:	d004      	beq.n	8015f8e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015f84:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015f88:	429d      	cmp	r5, r3
 8015f8a:	bf18      	it	ne
 8015f8c:	462f      	movne	r7, r5
 8015f8e:	ab03      	add	r3, sp, #12
 8015f90:	4642      	mov	r2, r8
 8015f92:	4659      	mov	r1, fp
 8015f94:	4648      	mov	r0, r9
 8015f96:	f003 fc27 	bl	80197e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015f9a:	4605      	mov	r5, r0
 8015f9c:	b1b8      	cbz	r0, 8015fce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015f9e:	280a      	cmp	r0, #10
 8015fa0:	d015      	beq.n	8015fce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015fa2:	9a03      	ldr	r2, [sp, #12]
 8015fa4:	b18a      	cbz	r2, 8015fca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015fa6:	7b50      	ldrb	r0, [r2, #13]
 8015fa8:	4639      	mov	r1, r7
 8015faa:	7a93      	ldrb	r3, [r2, #10]
 8015fac:	0040      	lsls	r0, r0, #1
 8015fae:	8895      	ldrh	r5, [r2, #4]
 8015fb0:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8015fb4:	4303      	orrs	r3, r0
 8015fb6:	4640      	mov	r0, r8
 8015fb8:	9301      	str	r3, [sp, #4]
 8015fba:	f8d8 3000 	ldr.w	r3, [r8]
 8015fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fc0:	4798      	blx	r3
 8015fc2:	9b01      	ldr	r3, [sp, #4]
 8015fc4:	4418      	add	r0, r3
 8015fc6:	4406      	add	r6, r0
 8015fc8:	b2b6      	uxth	r6, r6
 8015fca:	3401      	adds	r4, #1
 8015fcc:	e7d2      	b.n	8015f74 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015fce:	4630      	mov	r0, r6
 8015fd0:	b005      	add	sp, #20
 8015fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015fd6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015fd6:	2a02      	cmp	r2, #2
 8015fd8:	b530      	push	{r4, r5, lr}
 8015fda:	d011      	beq.n	8016000 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015fdc:	2a03      	cmp	r2, #3
 8015fde:	d01c      	beq.n	801601a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015fe0:	2a01      	cmp	r2, #1
 8015fe2:	d10c      	bne.n	8015ffe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015fe4:	888b      	ldrh	r3, [r1, #4]
 8015fe6:	8801      	ldrh	r1, [r0, #0]
 8015fe8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015fec:	1a5b      	subs	r3, r3, r1
 8015fee:	8844      	ldrh	r4, [r0, #2]
 8015ff0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015ff4:	1a9b      	subs	r3, r3, r2
 8015ff6:	8004      	strh	r4, [r0, #0]
 8015ff8:	8081      	strh	r1, [r0, #4]
 8015ffa:	8043      	strh	r3, [r0, #2]
 8015ffc:	80c2      	strh	r2, [r0, #6]
 8015ffe:	bd30      	pop	{r4, r5, pc}
 8016000:	88cb      	ldrh	r3, [r1, #6]
 8016002:	8842      	ldrh	r2, [r0, #2]
 8016004:	1a9b      	subs	r3, r3, r2
 8016006:	88c2      	ldrh	r2, [r0, #6]
 8016008:	1a9b      	subs	r3, r3, r2
 801600a:	888a      	ldrh	r2, [r1, #4]
 801600c:	8801      	ldrh	r1, [r0, #0]
 801600e:	8043      	strh	r3, [r0, #2]
 8016010:	1a52      	subs	r2, r2, r1
 8016012:	8881      	ldrh	r1, [r0, #4]
 8016014:	1a52      	subs	r2, r2, r1
 8016016:	8002      	strh	r2, [r0, #0]
 8016018:	e7f1      	b.n	8015ffe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801601a:	88cb      	ldrh	r3, [r1, #6]
 801601c:	8841      	ldrh	r1, [r0, #2]
 801601e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016022:	1a5b      	subs	r3, r3, r1
 8016024:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016028:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801602c:	1a9b      	subs	r3, r3, r2
 801602e:	8045      	strh	r5, [r0, #2]
 8016030:	8082      	strh	r2, [r0, #4]
 8016032:	8003      	strh	r3, [r0, #0]
 8016034:	80c4      	strh	r4, [r0, #6]
 8016036:	e7e2      	b.n	8015ffe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08016038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8016038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801603c:	b09f      	sub	sp, #124	@ 0x7c
 801603e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016040:	9312      	str	r3, [sp, #72]	@ 0x48
 8016042:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016044:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8016046:	8812      	ldrh	r2, [r2, #0]
 8016048:	889b      	ldrh	r3, [r3, #4]
 801604a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801604c:	4413      	add	r3, r2
 801604e:	900e      	str	r0, [sp, #56]	@ 0x38
 8016050:	6828      	ldr	r0, [r5, #0]
 8016052:	b21b      	sxth	r3, r3
 8016054:	9117      	str	r1, [sp, #92]	@ 0x5c
 8016056:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801605a:	9311      	str	r3, [sp, #68]	@ 0x44
 801605c:	6803      	ldr	r3, [r0, #0]
 801605e:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8016062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016064:	4798      	blx	r3
 8016066:	682b      	ldr	r3, [r5, #0]
 8016068:	9013      	str	r0, [sp, #76]	@ 0x4c
 801606a:	7b1a      	ldrb	r2, [r3, #12]
 801606c:	7adb      	ldrb	r3, [r3, #11]
 801606e:	9215      	str	r2, [sp, #84]	@ 0x54
 8016070:	9316      	str	r3, [sp, #88]	@ 0x58
 8016072:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8016076:	2c00      	cmp	r4, #0
 8016078:	d067      	beq.n	801614a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801607a:	7c2b      	ldrb	r3, [r5, #16]
 801607c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801607e:	2b06      	cmp	r3, #6
 8016080:	bf14      	ite	ne
 8016082:	2301      	movne	r3, #1
 8016084:	2302      	moveq	r3, #2
 8016086:	4413      	add	r3, r2
 8016088:	f04f 0900 	mov.w	r9, #0
 801608c:	9310      	str	r3, [sp, #64]	@ 0x40
 801608e:	464c      	mov	r4, r9
 8016090:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8016094:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8016098:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801609a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801609c:	4293      	cmp	r3, r2
 801609e:	f280 808b 	bge.w	80161b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80160a2:	2300      	movs	r3, #0
 80160a4:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80160a8:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80160ac:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80160b0:	429c      	cmp	r4, r3
 80160b2:	d006      	beq.n	80160c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 80160b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160b6:	f242 020b 	movw	r2, #8203	@ 0x200b
 80160ba:	4294      	cmp	r4, r2
 80160bc:	bf18      	it	ne
 80160be:	4623      	movne	r3, r4
 80160c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80160c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80160c4:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80160c6:	682a      	ldr	r2, [r5, #0]
 80160c8:	428b      	cmp	r3, r1
 80160ca:	db40      	blt.n	801614e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80160cc:	6813      	ldr	r3, [r2, #0]
 80160ce:	4610      	mov	r0, r2
 80160d0:	695b      	ldr	r3, [r3, #20]
 80160d2:	4798      	blx	r3
 80160d4:	4604      	mov	r4, r0
 80160d6:	6828      	ldr	r0, [r5, #0]
 80160d8:	aa1d      	add	r2, sp, #116	@ 0x74
 80160da:	4621      	mov	r1, r4
 80160dc:	6803      	ldr	r3, [r0, #0]
 80160de:	689f      	ldr	r7, [r3, #8]
 80160e0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80160e4:	47b8      	blx	r7
 80160e6:	901c      	str	r0, [sp, #112]	@ 0x70
 80160e8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80160ec:	429c      	cmp	r4, r3
 80160ee:	f000 80eb 	beq.w	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80160f2:	f242 030b 	movw	r3, #8203	@ 0x200b
 80160f6:	429c      	cmp	r4, r3
 80160f8:	f000 80e6 	beq.w	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80160fc:	2c00      	cmp	r4, #0
 80160fe:	f000 810d 	beq.w	801631c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8016102:	2c0a      	cmp	r4, #10
 8016104:	d05e      	beq.n	80161c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8016106:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016108:	b36a      	cbz	r2, 8016166 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801610a:	8894      	ldrh	r4, [r2, #4]
 801610c:	f1bb 0f00 	cmp.w	fp, #0
 8016110:	d03a      	beq.n	8016188 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8016112:	f892 900d 	ldrb.w	r9, [r2, #13]
 8016116:	f1bb 0f01 	cmp.w	fp, #1
 801611a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801611e:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8016122:	f892 900a 	ldrb.w	r9, [r2, #10]
 8016126:	ea49 0903 	orr.w	r9, r9, r3
 801612a:	d133      	bne.n	8016194 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 801612c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801612e:	eba6 0609 	sub.w	r6, r6, r9
 8016132:	2b00      	cmp	r3, #0
 8016134:	d14d      	bne.n	80161d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8016136:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8016138:	eb09 0306 	add.w	r3, r9, r6
 801613c:	4413      	add	r3, r2
 801613e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016140:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016144:	4293      	cmp	r3, r2
 8016146:	da4e      	bge.n	80161e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8016148:	e036      	b.n	80161b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801614a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801614c:	e79c      	b.n	8016088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801614e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8016152:	4659      	mov	r1, fp
 8016154:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8016156:	9301      	str	r3, [sp, #4]
 8016158:	ab1d      	add	r3, sp, #116	@ 0x74
 801615a:	9300      	str	r3, [sp, #0]
 801615c:	ab1c      	add	r3, sp, #112	@ 0x70
 801615e:	f003 fb8c 	bl	801987a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016162:	4604      	mov	r4, r0
 8016164:	e7c0      	b.n	80160e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8016166:	6828      	ldr	r0, [r5, #0]
 8016168:	6803      	ldr	r3, [r0, #0]
 801616a:	691b      	ldr	r3, [r3, #16]
 801616c:	4798      	blx	r3
 801616e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016172:	4298      	cmp	r0, r3
 8016174:	f000 80a8 	beq.w	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016178:	f242 030b 	movw	r3, #8203	@ 0x200b
 801617c:	4298      	cmp	r0, r3
 801617e:	f000 80a3 	beq.w	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016182:	f1bb 0f00 	cmp.w	fp, #0
 8016186:	d100      	bne.n	801618a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8016188:	444e      	add	r6, r9
 801618a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801618c:	2a00      	cmp	r2, #0
 801618e:	d1c0      	bne.n	8016112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8016190:	4691      	mov	r9, r2
 8016192:	e099      	b.n	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016196:	2b00      	cmp	r3, #0
 8016198:	f000 80c2 	beq.w	8016320 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 801619c:	f1bb 0f00 	cmp.w	fp, #0
 80161a0:	d117      	bne.n	80161d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80161a2:	6828      	ldr	r0, [r5, #0]
 80161a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80161a6:	6803      	ldr	r3, [r0, #0]
 80161a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161aa:	4798      	blx	r3
 80161ac:	4406      	add	r6, r0
 80161ae:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80161b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80161b2:	1af3      	subs	r3, r6, r3
 80161b4:	4293      	cmp	r3, r2
 80161b6:	dd16      	ble.n	80161e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80161b8:	2c00      	cmp	r4, #0
 80161ba:	f000 80af 	beq.w	801631c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80161be:	2c0a      	cmp	r4, #10
 80161c0:	f040 809d 	bne.w	80162fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 80161c4:	240a      	movs	r4, #10
 80161c6:	fab4 f084 	clz	r0, r4
 80161ca:	0940      	lsrs	r0, r0, #5
 80161cc:	b01f      	add	sp, #124	@ 0x7c
 80161ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161d2:	6828      	ldr	r0, [r5, #0]
 80161d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80161d6:	6803      	ldr	r3, [r0, #0]
 80161d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161da:	4798      	blx	r3
 80161dc:	f1bb 0f01 	cmp.w	fp, #1
 80161e0:	eba6 0600 	sub.w	r6, r6, r0
 80161e4:	d0a7      	beq.n	8016136 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80161e6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80161e8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80161ea:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80161ee:	f9b3 8000 	ldrsh.w	r8, [r3]
 80161f2:	7b43      	ldrb	r3, [r0, #13]
 80161f4:	4431      	add	r1, r6
 80161f6:	015b      	lsls	r3, r3, #5
 80161f8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80161fc:	7983      	ldrb	r3, [r0, #6]
 80161fe:	4313      	orrs	r3, r2
 8016200:	440b      	add	r3, r1
 8016202:	4543      	cmp	r3, r8
 8016204:	db60      	blt.n	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016206:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016208:	4299      	cmp	r1, r3
 801620a:	da5d      	bge.n	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801620c:	6828      	ldr	r0, [r5, #0]
 801620e:	45b0      	cmp	r8, r6
 8016210:	6803      	ldr	r3, [r0, #0]
 8016212:	bfcc      	ite	gt
 8016214:	eba8 0806 	subgt.w	r8, r8, r6
 8016218:	f04f 0800 	movle.w	r8, #0
 801621c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801621e:	bfc8      	it	gt
 8016220:	fa1f f888 	uxthgt.w	r8, r8
 8016224:	4798      	blx	r3
 8016226:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016228:	7b53      	ldrb	r3, [r2, #13]
 801622a:	00d9      	lsls	r1, r3, #3
 801622c:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8016230:	7a11      	ldrb	r1, [r2, #8]
 8016232:	4339      	orrs	r1, r7
 8016234:	065f      	lsls	r7, r3, #25
 8016236:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8016238:	bf48      	it	mi
 801623a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801623e:	4407      	add	r7, r0
 8016240:	bf48      	it	mi
 8016242:	b209      	sxthmi	r1, r1
 8016244:	1a7f      	subs	r7, r7, r1
 8016246:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8016248:	b2bf      	uxth	r7, r7
 801624a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801624e:	fa0f fa87 	sxth.w	sl, r7
 8016252:	4551      	cmp	r1, sl
 8016254:	dd3c      	ble.n	80162d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8016256:	011b      	lsls	r3, r3, #4
 8016258:	79d0      	ldrb	r0, [r2, #7]
 801625a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801625e:	4303      	orrs	r3, r0
 8016260:	449a      	add	sl, r3
 8016262:	4551      	cmp	r1, sl
 8016264:	dc30      	bgt.n	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8016266:	1bcf      	subs	r7, r1, r7
 8016268:	468a      	mov	sl, r1
 801626a:	b23f      	sxth	r7, r7
 801626c:	9219      	str	r2, [sp, #100]	@ 0x64
 801626e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016270:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016272:	6828      	ldr	r0, [r5, #0]
 8016274:	2a00      	cmp	r2, #0
 8016276:	d12d      	bne.n	80162d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8016278:	9318      	str	r3, [sp, #96]	@ 0x60
 801627a:	b2bf      	uxth	r7, r7
 801627c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801627e:	6819      	ldr	r1, [r3, #0]
 8016280:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8016282:	6801      	ldr	r1, [r0, #0]
 8016284:	9314      	str	r3, [sp, #80]	@ 0x50
 8016286:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016288:	4788      	blx	r1
 801628a:	79a9      	ldrb	r1, [r5, #6]
 801628c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801628e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016290:	7ba9      	ldrb	r1, [r5, #14]
 8016292:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016294:	910a      	str	r1, [sp, #40]	@ 0x28
 8016296:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801629a:	9109      	str	r1, [sp, #36]	@ 0x24
 801629c:	68a9      	ldr	r1, [r5, #8]
 801629e:	9306      	str	r3, [sp, #24]
 80162a0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80162a2:	9205      	str	r2, [sp, #20]
 80162a4:	9304      	str	r3, [sp, #16]
 80162a6:	f8cd a004 	str.w	sl, [sp, #4]
 80162aa:	e9cd 8702 	strd	r8, r7, [sp, #8]
 80162ae:	44b0      	add	r8, r6
 80162b0:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80162b2:	fa0f f388 	sxth.w	r3, r8
 80162b6:	9300      	str	r3, [sp, #0]
 80162b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162ba:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80162be:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80162c0:	681a      	ldr	r2, [r3, #0]
 80162c2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80162c4:	685b      	ldr	r3, [r3, #4]
 80162c6:	47b8      	blx	r7
 80162c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162ca:	3301      	adds	r3, #1
 80162cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80162ce:	e6e3      	b.n	8016098 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 80162d0:	2700      	movs	r7, #0
 80162d2:	e7cb      	b.n	801626c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 80162d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80162d6:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80162da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80162dc:	f8dc 1000 	ldr.w	r1, [ip]
 80162e0:	e9cd 6204 	strd	r6, r2, [sp, #16]
 80162e4:	79aa      	ldrb	r2, [r5, #6]
 80162e6:	9203      	str	r2, [sp, #12]
 80162e8:	7baa      	ldrb	r2, [r5, #14]
 80162ea:	9202      	str	r2, [sp, #8]
 80162ec:	68aa      	ldr	r2, [r5, #8]
 80162ee:	e9cd 0200 	strd	r0, r2, [sp]
 80162f2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80162f4:	4660      	mov	r0, ip
 80162f6:	688f      	ldr	r7, [r1, #8]
 80162f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80162fa:	47b8      	blx	r7
 80162fc:	e7e4      	b.n	80162c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80162fe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8016300:	3501      	adds	r5, #1
 8016302:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8016304:	429d      	cmp	r5, r3
 8016306:	f6bf af5e 	bge.w	80161c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801630a:	4659      	mov	r1, fp
 801630c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801630e:	f7f0 fca3 	bl	8006c58 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016312:	4604      	mov	r4, r0
 8016314:	b110      	cbz	r0, 801631c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8016316:	280a      	cmp	r0, #10
 8016318:	d1f2      	bne.n	8016300 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 801631a:	e753      	b.n	80161c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801631c:	2400      	movs	r4, #0
 801631e:	e752      	b.n	80161c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8016320:	f1bb 0f00 	cmp.w	fp, #0
 8016324:	f43f af43 	beq.w	80161ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016328:	e75d      	b.n	80161e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801632a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801632a:	b530      	push	{r4, r5, lr}
 801632c:	8ac4      	ldrh	r4, [r0, #22]
 801632e:	8b45      	ldrh	r5, [r0, #26]
 8016330:	8343      	strh	r3, [r0, #26]
 8016332:	442c      	add	r4, r5
 8016334:	1ae4      	subs	r4, r4, r3
 8016336:	8b83      	ldrh	r3, [r0, #28]
 8016338:	82c4      	strh	r4, [r0, #22]
 801633a:	8b04      	ldrh	r4, [r0, #24]
 801633c:	4422      	add	r2, r4
 801633e:	440c      	add	r4, r1
 8016340:	1a59      	subs	r1, r3, r1
 8016342:	83c2      	strh	r2, [r0, #30]
 8016344:	8304      	strh	r4, [r0, #24]
 8016346:	8381      	strh	r1, [r0, #28]
 8016348:	bd30      	pop	{r4, r5, pc}

0801634a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801634a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634e:	4604      	mov	r4, r0
 8016350:	8a47      	ldrh	r7, [r0, #18]
 8016352:	68c0      	ldr	r0, [r0, #12]
 8016354:	b085      	sub	sp, #20
 8016356:	6803      	ldr	r3, [r0, #0]
 8016358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801635a:	4798      	blx	r3
 801635c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8016360:	7a63      	ldrb	r3, [r4, #9]
 8016362:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8016366:	3b01      	subs	r3, #1
 8016368:	42b7      	cmp	r7, r6
 801636a:	bfac      	ite	ge
 801636c:	f04f 0900 	movge.w	r9, #0
 8016370:	f04f 0901 	movlt.w	r9, #1
 8016374:	2b05      	cmp	r3, #5
 8016376:	d804      	bhi.n	8016382 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8016378:	e8df f003 	tbb	[pc, r3]
 801637c:	470f0854 	.word	0x470f0854
 8016380:	4c4c      	.short	0x4c4c
 8016382:	2500      	movs	r5, #0
 8016384:	46a9      	mov	r9, r5
 8016386:	462e      	mov	r6, r5
 8016388:	462f      	mov	r7, r5
 801638a:	e00e      	b.n	80163aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801638c:	42b7      	cmp	r7, r6
 801638e:	f04f 0500 	mov.w	r5, #0
 8016392:	bfb4      	ite	lt
 8016394:	2600      	movlt	r6, #0
 8016396:	2601      	movge	r6, #1
 8016398:	e7f6      	b.n	8016388 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801639a:	42b7      	cmp	r7, r6
 801639c:	464d      	mov	r5, r9
 801639e:	f04f 0900 	mov.w	r9, #0
 80163a2:	bfb4      	ite	lt
 80163a4:	2600      	movlt	r6, #0
 80163a6:	2601      	movge	r6, #1
 80163a8:	464f      	mov	r7, r9
 80163aa:	f04f 0800 	mov.w	r8, #0
 80163ae:	f8a4 8016 	strh.w	r8, [r4, #22]
 80163b2:	f8a4 8018 	strh.w	r8, [r4, #24]
 80163b6:	f8cd 8004 	str.w	r8, [sp, #4]
 80163ba:	2300      	movs	r3, #0
 80163bc:	9303      	str	r3, [sp, #12]
 80163be:	8823      	ldrh	r3, [r4, #0]
 80163c0:	2b20      	cmp	r3, #32
 80163c2:	d033      	beq.n	801642c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80163c4:	f242 010b 	movw	r1, #8203	@ 0x200b
 80163c8:	1a5a      	subs	r2, r3, r1
 80163ca:	f1d2 0a00 	rsbs	sl, r2, #0
 80163ce:	eb4a 0a02 	adc.w	sl, sl, r2
 80163d2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80163d6:	4293      	cmp	r3, r2
 80163d8:	d008      	beq.n	80163ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80163da:	428b      	cmp	r3, r1
 80163dc:	9a01      	ldr	r2, [sp, #4]
 80163de:	bf0e      	itee	eq
 80163e0:	f04f 0a01 	moveq.w	sl, #1
 80163e4:	461a      	movne	r2, r3
 80163e6:	f04f 0a00 	movne.w	sl, #0
 80163ea:	9201      	str	r2, [sp, #4]
 80163ec:	ab03      	add	r3, sp, #12
 80163ee:	68e2      	ldr	r2, [r4, #12]
 80163f0:	7a21      	ldrb	r1, [r4, #8]
 80163f2:	6860      	ldr	r0, [r4, #4]
 80163f4:	f003 f9f8 	bl	80197e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80163f8:	8020      	strh	r0, [r4, #0]
 80163fa:	b9d8      	cbnz	r0, 8016434 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80163fc:	8ba2      	ldrh	r2, [r4, #28]
 80163fe:	2300      	movs	r3, #0
 8016400:	4611      	mov	r1, r2
 8016402:	4620      	mov	r0, r4
 8016404:	f7ff ff91 	bl	801632a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016408:	e06e      	b.n	80164e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801640a:	2500      	movs	r5, #0
 801640c:	2701      	movs	r7, #1
 801640e:	46a9      	mov	r9, r5
 8016410:	462e      	mov	r6, r5
 8016412:	e7ca      	b.n	80163aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016414:	42b7      	cmp	r7, r6
 8016416:	f04f 0500 	mov.w	r5, #0
 801641a:	bfb4      	ite	lt
 801641c:	2700      	movlt	r7, #0
 801641e:	2701      	movge	r7, #1
 8016420:	462e      	mov	r6, r5
 8016422:	e7c2      	b.n	80163aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016424:	2500      	movs	r5, #0
 8016426:	2601      	movs	r6, #1
 8016428:	46a9      	mov	r9, r5
 801642a:	e7ad      	b.n	8016388 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801642c:	9301      	str	r3, [sp, #4]
 801642e:	f04f 0a01 	mov.w	sl, #1
 8016432:	e7db      	b.n	80163ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8016434:	8b63      	ldrh	r3, [r4, #26]
 8016436:	280a      	cmp	r0, #10
 8016438:	f103 0301 	add.w	r3, r3, #1
 801643c:	8363      	strh	r3, [r4, #26]
 801643e:	d0dd      	beq.n	80163fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8016440:	9a03      	ldr	r2, [sp, #12]
 8016442:	bb62      	cbnz	r2, 801649e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8016444:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016448:	4298      	cmp	r0, r3
 801644a:	d003      	beq.n	8016454 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801644c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8016450:	4298      	cmp	r0, r3
 8016452:	d1b2      	bne.n	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016454:	8823      	ldrh	r3, [r4, #0]
 8016456:	8ba1      	ldrh	r1, [r4, #28]
 8016458:	2b20      	cmp	r3, #32
 801645a:	d003      	beq.n	8016464 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801645c:	f242 000b 	movw	r0, #8203	@ 0x200b
 8016460:	4283      	cmp	r3, r0
 8016462:	d131      	bne.n	80164c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8016464:	f1ba 0f00 	cmp.w	sl, #0
 8016468:	bf0a      	itet	eq
 801646a:	4688      	moveq	r8, r1
 801646c:	4650      	movne	r0, sl
 801646e:	2001      	moveq	r0, #1
 8016470:	440a      	add	r2, r1
 8016472:	8b23      	ldrh	r3, [r4, #24]
 8016474:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016478:	b292      	uxth	r2, r2
 801647a:	83a2      	strh	r2, [r4, #28]
 801647c:	4413      	add	r3, r2
 801647e:	f1b9 0f00 	cmp.w	r9, #0
 8016482:	d102      	bne.n	801648a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8016484:	2d00      	cmp	r5, #0
 8016486:	d042      	beq.n	801650e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8016488:	b300      	cbz	r0, 80164cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801648a:	8c21      	ldrh	r1, [r4, #32]
 801648c:	4419      	add	r1, r3
 801648e:	458c      	cmp	ip, r1
 8016490:	da37      	bge.n	8016502 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016492:	8ae1      	ldrh	r1, [r4, #22]
 8016494:	2900      	cmp	r1, #0
 8016496:	d034      	beq.n	8016502 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016498:	4563      	cmp	r3, ip
 801649a:	dd8e      	ble.n	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801649c:	e01d      	b.n	80164da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801649e:	8893      	ldrh	r3, [r2, #4]
 80164a0:	9901      	ldr	r1, [sp, #4]
 80164a2:	8023      	strh	r3, [r4, #0]
 80164a4:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80164a8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80164ac:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 80164b0:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80164b4:	ea4b 0b00 	orr.w	fp, fp, r0
 80164b8:	68e0      	ldr	r0, [r4, #12]
 80164ba:	6803      	ldr	r3, [r0, #0]
 80164bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164be:	4798      	blx	r3
 80164c0:	eb0b 0200 	add.w	r2, fp, r0
 80164c4:	b292      	uxth	r2, r2
 80164c6:	e7c5      	b.n	8016454 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80164c8:	2000      	movs	r0, #0
 80164ca:	e7d1      	b.n	8016470 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 80164cc:	4563      	cmp	r3, ip
 80164ce:	f77f af74 	ble.w	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80164d2:	8ae3      	ldrh	r3, [r4, #22]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	f43f af70 	beq.w	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80164da:	2301      	movs	r3, #1
 80164dc:	8c22      	ldrh	r2, [r4, #32]
 80164de:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80164e2:	8be3      	ldrh	r3, [r4, #30]
 80164e4:	4413      	add	r3, r2
 80164e6:	83e3      	strh	r3, [r4, #30]
 80164e8:	68e0      	ldr	r0, [r4, #12]
 80164ea:	6803      	ldr	r3, [r0, #0]
 80164ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164ee:	4798      	blx	r3
 80164f0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80164f4:	4418      	add	r0, r3
 80164f6:	8a63      	ldrh	r3, [r4, #18]
 80164f8:	1a18      	subs	r0, r3, r0
 80164fa:	8260      	strh	r0, [r4, #18]
 80164fc:	b005      	add	sp, #20
 80164fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016502:	2300      	movs	r3, #0
 8016504:	4611      	mov	r1, r2
 8016506:	4620      	mov	r0, r4
 8016508:	f7ff ff0f 	bl	801632a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801650c:	e755      	b.n	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801650e:	4563      	cmp	r3, ip
 8016510:	dd14      	ble.n	801653c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8016512:	b117      	cbz	r7, 801651a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8016514:	2301      	movs	r3, #1
 8016516:	460a      	mov	r2, r1
 8016518:	e772      	b.n	8016400 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801651a:	2e00      	cmp	r6, #0
 801651c:	f43f af4d 	beq.w	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016520:	2800      	cmp	r0, #0
 8016522:	f47f af4a 	bne.w	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016526:	f1ba 0f00 	cmp.w	sl, #0
 801652a:	d002      	beq.n	8016532 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801652c:	2301      	movs	r3, #1
 801652e:	4642      	mov	r2, r8
 8016530:	e767      	b.n	8016402 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8016532:	8ae3      	ldrh	r3, [r4, #22]
 8016534:	2b00      	cmp	r3, #0
 8016536:	f43f af40 	beq.w	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801653a:	e7d5      	b.n	80164e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801653c:	2800      	cmp	r0, #0
 801653e:	f47f af3c 	bne.w	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016542:	f1ba 0f00 	cmp.w	sl, #0
 8016546:	f43f af38 	beq.w	80163ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801654a:	2301      	movs	r3, #1
 801654c:	4642      	mov	r2, r8
 801654e:	e7da      	b.n	8016506 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08016550 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8016550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016552:	4605      	mov	r5, r0
 8016554:	b08f      	sub	sp, #60	@ 0x3c
 8016556:	4617      	mov	r7, r2
 8016558:	461c      	mov	r4, r3
 801655a:	460e      	mov	r6, r1
 801655c:	b1d1      	cbz	r1, 8016594 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	4620      	mov	r0, r4
 8016562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016564:	4798      	blx	r3
 8016566:	4240      	negs	r0, r0
 8016568:	9603      	str	r6, [sp, #12]
 801656a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801656e:	b200      	sxth	r0, r0
 8016570:	9700      	str	r7, [sp, #0]
 8016572:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8016576:	4629      	mov	r1, r5
 8016578:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801657c:	2401      	movs	r4, #1
 801657e:	a805      	add	r0, sp, #20
 8016580:	f7ff fcaa 	bl	8015ed8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016584:	a805      	add	r0, sp, #20
 8016586:	f7ff fee0 	bl	801634a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801658a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801658e:	b163      	cbz	r3, 80165aa <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8016590:	3401      	adds	r4, #1
 8016592:	e7f7      	b.n	8016584 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016594:	2401      	movs	r4, #1
 8016596:	f003 f9f3 	bl	8019980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801659a:	280a      	cmp	r0, #10
 801659c:	4628      	mov	r0, r5
 801659e:	bf08      	it	eq
 80165a0:	3401      	addeq	r4, #1
 80165a2:	f003 f9ed 	bl	8019980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80165a6:	2800      	cmp	r0, #0
 80165a8:	d1f7      	bne.n	801659a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80165aa:	b2a0      	uxth	r0, r4
 80165ac:	b00f      	add	sp, #60	@ 0x3c
 80165ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80165b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b4:	b0e3      	sub	sp, #396	@ 0x18c
 80165b6:	461c      	mov	r4, r3
 80165b8:	4683      	mov	fp, r0
 80165ba:	4688      	mov	r8, r1
 80165bc:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 80165be:	2b00      	cmp	r3, #0
 80165c0:	f000 8112 	beq.w	80167e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80165c4:	6823      	ldr	r3, [r4, #0]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	f000 810e 	beq.w	80167e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80165cc:	7ba3      	ldrb	r3, [r4, #14]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	f000 810a 	beq.w	80167e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80165d4:	ad0a      	add	r5, sp, #40	@ 0x28
 80165d6:	6810      	ldr	r0, [r2, #0]
 80165d8:	6851      	ldr	r1, [r2, #4]
 80165da:	462b      	mov	r3, r5
 80165dc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80165e0:	c303      	stmia	r3!, {r0, r1}
 80165e2:	2100      	movs	r1, #0
 80165e4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80165e8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80165ec:	4628      	mov	r0, r5
 80165ee:	910c      	str	r1, [sp, #48]	@ 0x30
 80165f0:	a90c      	add	r1, sp, #48	@ 0x30
 80165f2:	79a2      	ldrb	r2, [r4, #6]
 80165f4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80165f8:	f7ff fced 	bl	8015fd6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80165fc:	a90c      	add	r1, sp, #48	@ 0x30
 80165fe:	79a2      	ldrb	r2, [r4, #6]
 8016600:	4608      	mov	r0, r1
 8016602:	f7ff fce8 	bl	8015fd6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016606:	a817      	add	r0, sp, #92	@ 0x5c
 8016608:	f002 fd60 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 801660c:	6820      	ldr	r0, [r4, #0]
 801660e:	6803      	ldr	r3, [r0, #0]
 8016610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016612:	4798      	blx	r3
 8016614:	4606      	mov	r6, r0
 8016616:	6820      	ldr	r0, [r4, #0]
 8016618:	6803      	ldr	r3, [r0, #0]
 801661a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801661c:	4798      	blx	r3
 801661e:	4633      	mov	r3, r6
 8016620:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8016622:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8016624:	9000      	str	r0, [sp, #0]
 8016626:	a817      	add	r0, sp, #92	@ 0x5c
 8016628:	f002 fdab 	bl	8019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801662c:	6820      	ldr	r0, [r4, #0]
 801662e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8016632:	6803      	ldr	r3, [r0, #0]
 8016634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016636:	4798      	blx	r3
 8016638:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801663c:	6823      	ldr	r3, [r4, #0]
 801663e:	4607      	mov	r7, r0
 8016640:	4406      	add	r6, r0
 8016642:	a830      	add	r0, sp, #192	@ 0xc0
 8016644:	f893 9009 	ldrb.w	r9, [r3, #9]
 8016648:	f002 fd40 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 801664c:	7c23      	ldrb	r3, [r4, #16]
 801664e:	b17b      	cbz	r3, 8016670 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8016650:	6820      	ldr	r0, [r4, #0]
 8016652:	6803      	ldr	r3, [r0, #0]
 8016654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016656:	4798      	blx	r3
 8016658:	9009      	str	r0, [sp, #36]	@ 0x24
 801665a:	6820      	ldr	r0, [r4, #0]
 801665c:	6802      	ldr	r2, [r0, #0]
 801665e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016660:	4790      	blx	r2
 8016662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016664:	9000      	str	r0, [sp, #0]
 8016666:	a830      	add	r0, sp, #192	@ 0xc0
 8016668:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801666a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801666c:	f002 fd89 	bl	8019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016670:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8016674:	a80e      	add	r0, sp, #56	@ 0x38
 8016676:	7be2      	ldrb	r2, [r4, #15]
 8016678:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801667c:	1a8a      	subs	r2, r1, r2
 801667e:	7c21      	ldrb	r1, [r4, #16]
 8016680:	9103      	str	r1, [sp, #12]
 8016682:	b292      	uxth	r2, r2
 8016684:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8016688:	9102      	str	r1, [sp, #8]
 801668a:	6821      	ldr	r1, [r4, #0]
 801668c:	9101      	str	r1, [sp, #4]
 801668e:	7961      	ldrb	r1, [r4, #5]
 8016690:	9100      	str	r1, [sp, #0]
 8016692:	a930      	add	r1, sp, #192	@ 0xc0
 8016694:	f7ff fc20 	bl	8015ed8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016698:	2e00      	cmp	r6, #0
 801669a:	dc5b      	bgt.n	8016754 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801669c:	af17      	add	r7, sp, #92	@ 0x5c
 801669e:	f04f 0900 	mov.w	r9, #0
 80166a2:	7c23      	ldrb	r3, [r4, #16]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	f000 80b1 	beq.w	801680c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80166aa:	a80e      	add	r0, sp, #56	@ 0x38
 80166ac:	f7ff fe4d 	bl	801634a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80166b0:	f1ba 0f00 	cmp.w	sl, #0
 80166b4:	f000 80a5 	beq.w	8016802 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80166b8:	7c23      	ldrb	r3, [r4, #16]
 80166ba:	2264      	movs	r2, #100	@ 0x64
 80166bc:	4639      	mov	r1, r7
 80166be:	a849      	add	r0, sp, #292	@ 0x124
 80166c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80166c2:	f00f fe32 	bl	802632a <memcpy>
 80166c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	f000 80a7 	beq.w	801681c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80166ce:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80166d2:	7922      	ldrb	r2, [r4, #4]
 80166d4:	2a01      	cmp	r2, #1
 80166d6:	f040 808a 	bne.w	80167ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80166da:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 80166de:	1ac0      	subs	r0, r0, r3
 80166e0:	2302      	movs	r3, #2
 80166e2:	fb90 f0f3 	sdiv	r0, r0, r3
 80166e6:	b200      	sxth	r0, r0
 80166e8:	7c23      	ldrb	r3, [r4, #16]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	f000 808b 	beq.w	8016806 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80166f0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 80166f4:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 80166f8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80166fc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016700:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8016704:	2100      	movs	r1, #0
 8016706:	4410      	add	r0, r2
 8016708:	4642      	mov	r2, r8
 801670a:	b200      	sxth	r0, r0
 801670c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8016710:	9000      	str	r0, [sp, #0]
 8016712:	4658      	mov	r0, fp
 8016714:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8016718:	f7ff fc8e 	bl	8016038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801671c:	2800      	cmp	r0, #0
 801671e:	d163      	bne.n	80167e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016720:	b2b2      	uxth	r2, r6
 8016722:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016726:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801672a:	4413      	add	r3, r2
 801672c:	1a8a      	subs	r2, r1, r2
 801672e:	b21b      	sxth	r3, r3
 8016730:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8016734:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8016738:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801673c:	2a00      	cmp	r2, #0
 801673e:	d153      	bne.n	80167e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016740:	6822      	ldr	r2, [r4, #0]
 8016742:	8869      	ldrh	r1, [r5, #2]
 8016744:	7a12      	ldrb	r2, [r2, #8]
 8016746:	1a9b      	subs	r3, r3, r2
 8016748:	88ea      	ldrh	r2, [r5, #6]
 801674a:	440a      	add	r2, r1
 801674c:	b212      	sxth	r2, r2
 801674e:	4293      	cmp	r3, r2
 8016750:	dda7      	ble.n	80166a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8016752:	e049      	b.n	80167e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016754:	7c23      	ldrb	r3, [r4, #16]
 8016756:	444f      	add	r7, r9
 8016758:	b1c3      	cbz	r3, 801678c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801675a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801675e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016762:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016766:	443b      	add	r3, r7
 8016768:	4293      	cmp	r3, r2
 801676a:	da97      	bge.n	801669c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801676c:	a80e      	add	r0, sp, #56	@ 0x38
 801676e:	f7ff fdec 	bl	801634a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016772:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8016776:	3b01      	subs	r3, #1
 8016778:	b29b      	uxth	r3, r3
 801677a:	454b      	cmp	r3, r9
 801677c:	9309      	str	r3, [sp, #36]	@ 0x24
 801677e:	d021      	beq.n	80167c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8016780:	7961      	ldrb	r1, [r4, #5]
 8016782:	a817      	add	r0, sp, #92	@ 0x5c
 8016784:	f7f0 fa68 	bl	8006c58 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801678a:	e7f4      	b.n	8016776 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801678c:	fa1f f986 	uxth.w	r9, r6
 8016790:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016794:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016798:	443b      	add	r3, r7
 801679a:	4293      	cmp	r3, r2
 801679c:	f6bf af7e 	bge.w	801669c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80167a0:	a817      	add	r0, sp, #92	@ 0x5c
 80167a2:	f003 f8ed 	bl	8019980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80167a6:	b1f8      	cbz	r0, 80167e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80167a8:	280a      	cmp	r0, #10
 80167aa:	d1f1      	bne.n	8016790 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80167ac:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80167b0:	444b      	add	r3, r9
 80167b2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80167b6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80167ba:	eba3 0309 	sub.w	r3, r3, r9
 80167be:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80167c2:	e7e5      	b.n	8016790 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80167c4:	b2b3      	uxth	r3, r6
 80167c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80167ca:	441a      	add	r2, r3
 80167cc:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80167d0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80167d4:	1ad3      	subs	r3, r2, r3
 80167d6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80167da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80167de:	b11b      	cbz	r3, 80167e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80167e0:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d0ba      	beq.n	801675e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80167e8:	b063      	add	sp, #396	@ 0x18c
 80167ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ee:	2a02      	cmp	r2, #2
 80167f0:	d105      	bne.n	80167fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80167f2:	7be2      	ldrb	r2, [r4, #15]
 80167f4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80167f8:	1a80      	subs	r0, r0, r2
 80167fa:	1ac0      	subs	r0, r0, r3
 80167fc:	e773      	b.n	80166e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80167fe:	2000      	movs	r0, #0
 8016800:	e772      	b.n	80166e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016802:	7be0      	ldrb	r0, [r4, #15]
 8016804:	e770      	b.n	80166e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016806:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801680a:	e773      	b.n	80166f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801680c:	f1ba 0f00 	cmp.w	sl, #0
 8016810:	d0f7      	beq.n	8016802 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8016812:	2264      	movs	r2, #100	@ 0x64
 8016814:	4639      	mov	r1, r7
 8016816:	a849      	add	r0, sp, #292	@ 0x124
 8016818:	f00f fd87 	bl	802632a <memcpy>
 801681c:	2300      	movs	r3, #0
 801681e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016822:	6821      	ldr	r1, [r4, #0]
 8016824:	a849      	add	r0, sp, #292	@ 0x124
 8016826:	f7ff fb9a 	bl	8015f5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801682a:	b203      	sxth	r3, r0
 801682c:	e751      	b.n	80166d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801682e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801682e:	2b03      	cmp	r3, #3
 8016830:	d818      	bhi.n	8016864 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016832:	e8df f003 	tbb	[pc, r3]
 8016836:	0602      	.short	0x0602
 8016838:	130d      	.short	0x130d
 801683a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801683e:	1850      	adds	r0, r2, r1
 8016840:	4770      	bx	lr
 8016842:	8803      	ldrh	r3, [r0, #0]
 8016844:	8880      	ldrh	r0, [r0, #4]
 8016846:	4418      	add	r0, r3
 8016848:	b200      	sxth	r0, r0
 801684a:	1a80      	subs	r0, r0, r2
 801684c:	3801      	subs	r0, #1
 801684e:	4770      	bx	lr
 8016850:	8803      	ldrh	r3, [r0, #0]
 8016852:	8880      	ldrh	r0, [r0, #4]
 8016854:	4418      	add	r0, r3
 8016856:	b200      	sxth	r0, r0
 8016858:	1a40      	subs	r0, r0, r1
 801685a:	e7f7      	b.n	801684c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801685c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016860:	4410      	add	r0, r2
 8016862:	4770      	bx	lr
 8016864:	2000      	movs	r0, #0
 8016866:	4770      	bx	lr

08016868 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016868:	2b03      	cmp	r3, #3
 801686a:	d817      	bhi.n	801689c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801686c:	e8df f003 	tbb	[pc, r3]
 8016870:	10090602 	.word	0x10090602
 8016874:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016878:	1850      	adds	r0, r2, r1
 801687a:	4770      	bx	lr
 801687c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016880:	e7fa      	b.n	8016878 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016882:	8843      	ldrh	r3, [r0, #2]
 8016884:	88c0      	ldrh	r0, [r0, #6]
 8016886:	4418      	add	r0, r3
 8016888:	b200      	sxth	r0, r0
 801688a:	1a80      	subs	r0, r0, r2
 801688c:	3801      	subs	r0, #1
 801688e:	4770      	bx	lr
 8016890:	8843      	ldrh	r3, [r0, #2]
 8016892:	88c0      	ldrh	r0, [r0, #6]
 8016894:	4418      	add	r0, r3
 8016896:	b200      	sxth	r0, r0
 8016898:	1a40      	subs	r0, r0, r1
 801689a:	e7f7      	b.n	801688c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801689c:	2000      	movs	r0, #0
 801689e:	4770      	bx	lr

080168a0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80168a0:	4b01      	ldr	r3, [pc, #4]	@ (80168a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80168a2:	2200      	movs	r2, #0
 80168a4:	601a      	str	r2, [r3, #0]
 80168a6:	4770      	bx	lr
 80168a8:	24026428 	.word	0x24026428

080168ac <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80168ac:	4603      	mov	r3, r0
 80168ae:	b1c8      	cbz	r0, 80168e4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80168b0:	0c02      	lsrs	r2, r0, #16
 80168b2:	0412      	lsls	r2, r2, #16
 80168b4:	b9a2      	cbnz	r2, 80168e0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80168b6:	0403      	lsls	r3, r0, #16
 80168b8:	2010      	movs	r0, #16
 80168ba:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80168be:	bf04      	itt	eq
 80168c0:	021b      	lsleq	r3, r3, #8
 80168c2:	3008      	addeq	r0, #8
 80168c4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80168c8:	bf04      	itt	eq
 80168ca:	011b      	lsleq	r3, r3, #4
 80168cc:	3004      	addeq	r0, #4
 80168ce:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80168d2:	bf04      	itt	eq
 80168d4:	009b      	lsleq	r3, r3, #2
 80168d6:	3002      	addeq	r0, #2
 80168d8:	2b00      	cmp	r3, #0
 80168da:	db04      	blt.n	80168e6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80168dc:	3001      	adds	r0, #1
 80168de:	4770      	bx	lr
 80168e0:	2000      	movs	r0, #0
 80168e2:	e7ea      	b.n	80168ba <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80168e4:	2020      	movs	r0, #32
 80168e6:	4770      	bx	lr

080168e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80168e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168ec:	b087      	sub	sp, #28
 80168ee:	460d      	mov	r5, r1
 80168f0:	4616      	mov	r6, r2
 80168f2:	4698      	mov	r8, r3
 80168f4:	4601      	mov	r1, r0
 80168f6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80168fa:	b120      	cbz	r0, 8016906 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80168fc:	b11a      	cbz	r2, 8016906 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80168fe:	2d1f      	cmp	r5, #31
 8016900:	d801      	bhi.n	8016906 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016902:	2b1f      	cmp	r3, #31
 8016904:	d904      	bls.n	8016910 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8016906:	2000      	movs	r0, #0
 8016908:	6038      	str	r0, [r7, #0]
 801690a:	b007      	add	sp, #28
 801690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016910:	b97d      	cbnz	r5, 8016932 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8016912:	b143      	cbz	r3, 8016926 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8016914:	4602      	mov	r2, r0
 8016916:	462b      	mov	r3, r5
 8016918:	4641      	mov	r1, r8
 801691a:	4630      	mov	r0, r6
 801691c:	e9cd 4700 	strd	r4, r7, [sp]
 8016920:	f7ff ffe2 	bl	80168e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016924:	e7f1      	b.n	801690a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016926:	f04f 33ff 	mov.w	r3, #4294967295
 801692a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801692e:	603b      	str	r3, [r7, #0]
 8016930:	e7eb      	b.n	801690a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016932:	fa32 fa05 	lsrs.w	sl, r2, r5
 8016936:	d106      	bne.n	8016946 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8016938:	4346      	muls	r6, r0
 801693a:	fbb6 f0f4 	udiv	r0, r6, r4
 801693e:	fb04 6610 	mls	r6, r4, r0, r6
 8016942:	603e      	str	r6, [r7, #0]
 8016944:	e7e1      	b.n	801690a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016946:	2201      	movs	r2, #1
 8016948:	fa00 fb05 	lsl.w	fp, r0, r5
 801694c:	40aa      	lsls	r2, r5
 801694e:	fbbb f9f4 	udiv	r9, fp, r4
 8016952:	3a01      	subs	r2, #1
 8016954:	fb0a f309 	mul.w	r3, sl, r9
 8016958:	fb04 b919 	mls	r9, r4, r9, fp
 801695c:	4016      	ands	r6, r2
 801695e:	9303      	str	r3, [sp, #12]
 8016960:	4630      	mov	r0, r6
 8016962:	f7ff ffa3 	bl	80168ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016966:	462b      	mov	r3, r5
 8016968:	460a      	mov	r2, r1
 801696a:	4601      	mov	r1, r0
 801696c:	4630      	mov	r0, r6
 801696e:	e9cd 4700 	strd	r4, r7, [sp]
 8016972:	f7ff ffb9 	bl	80168e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016976:	4606      	mov	r6, r0
 8016978:	4648      	mov	r0, r9
 801697a:	eb05 0108 	add.w	r1, r5, r8
 801697e:	f7ff ff95 	bl	80168ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016982:	ab05      	add	r3, sp, #20
 8016984:	464a      	mov	r2, r9
 8016986:	e9cd 4300 	strd	r4, r3, [sp]
 801698a:	4603      	mov	r3, r0
 801698c:	4650      	mov	r0, sl
 801698e:	f7ff ffab 	bl	80168e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016992:	6839      	ldr	r1, [r7, #0]
 8016994:	9a05      	ldr	r2, [sp, #20]
 8016996:	9b03      	ldr	r3, [sp, #12]
 8016998:	4411      	add	r1, r2
 801699a:	fbb1 f2f4 	udiv	r2, r1, r4
 801699e:	18d3      	adds	r3, r2, r3
 80169a0:	fb04 1412 	mls	r4, r4, r2, r1
 80169a4:	441e      	add	r6, r3
 80169a6:	603c      	str	r4, [r7, #0]
 80169a8:	4430      	add	r0, r6
 80169aa:	e7ae      	b.n	801690a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080169ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80169ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169b0:	b085      	sub	sp, #20
 80169b2:	f1b0 0900 	subs.w	r9, r0, #0
 80169b6:	461d      	mov	r5, r3
 80169b8:	4617      	mov	r7, r2
 80169ba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80169bc:	bfbb      	ittet	lt
 80169be:	f1c9 0900 	rsblt	r9, r9, #0
 80169c2:	f04f 36ff 	movlt.w	r6, #4294967295
 80169c6:	2601      	movge	r6, #1
 80169c8:	6823      	ldrlt	r3, [r4, #0]
 80169ca:	bfbc      	itt	lt
 80169cc:	425b      	neglt	r3, r3
 80169ce:	6023      	strlt	r3, [r4, #0]
 80169d0:	2a00      	cmp	r2, #0
 80169d2:	da04      	bge.n	80169de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80169d4:	6823      	ldr	r3, [r4, #0]
 80169d6:	4257      	negs	r7, r2
 80169d8:	4276      	negs	r6, r6
 80169da:	425b      	negs	r3, r3
 80169dc:	6023      	str	r3, [r4, #0]
 80169de:	2d00      	cmp	r5, #0
 80169e0:	4638      	mov	r0, r7
 80169e2:	bfba      	itte	lt
 80169e4:	426d      	neglt	r5, r5
 80169e6:	f04f 38ff 	movlt.w	r8, #4294967295
 80169ea:	f04f 0801 	movge.w	r8, #1
 80169ee:	f7ff ff5d 	bl	80168ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 80169f2:	ab03      	add	r3, sp, #12
 80169f4:	463a      	mov	r2, r7
 80169f6:	e9cd 5300 	strd	r5, r3, [sp]
 80169fa:	4603      	mov	r3, r0
 80169fc:	4648      	mov	r0, r9
 80169fe:	f7ff ff73 	bl	80168e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016a02:	6823      	ldr	r3, [r4, #0]
 8016a04:	9a03      	ldr	r2, [sp, #12]
 8016a06:	4546      	cmp	r6, r8
 8016a08:	441a      	add	r2, r3
 8016a0a:	fb92 f3f5 	sdiv	r3, r2, r5
 8016a0e:	4418      	add	r0, r3
 8016a10:	fb05 2313 	mls	r3, r5, r3, r2
 8016a14:	bf18      	it	ne
 8016a16:	4240      	negne	r0, r0
 8016a18:	1c72      	adds	r2, r6, #1
 8016a1a:	6023      	str	r3, [r4, #0]
 8016a1c:	d105      	bne.n	8016a2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	f1c3 0200 	rsb	r2, r3, #0
 8016a24:	db0b      	blt.n	8016a3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016a26:	6022      	str	r2, [r4, #0]
 8016a28:	e006      	b.n	8016a38 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016a2a:	2e01      	cmp	r6, #1
 8016a2c:	d104      	bne.n	8016a38 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	da02      	bge.n	8016a38 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016a32:	442b      	add	r3, r5
 8016a34:	3801      	subs	r0, #1
 8016a36:	6023      	str	r3, [r4, #0]
 8016a38:	b005      	add	sp, #20
 8016a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a3e:	3801      	subs	r0, #1
 8016a40:	1b52      	subs	r2, r2, r5
 8016a42:	e7f0      	b.n	8016a26 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08016a44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016a44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016a48:	4c1c      	ldr	r4, [pc, #112]	@ (8016abc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016a4a:	4605      	mov	r5, r0
 8016a4c:	6807      	ldr	r7, [r0, #0]
 8016a4e:	69a3      	ldr	r3, [r4, #24]
 8016a50:	b92b      	cbnz	r3, 8016a5e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016a52:	6840      	ldr	r0, [r0, #4]
 8016a54:	e9c5 7000 	strd	r7, r0, [r5]
 8016a58:	b004      	add	sp, #16
 8016a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a5e:	f04f 0802 	mov.w	r8, #2
 8016a62:	68a2      	ldr	r2, [r4, #8]
 8016a64:	ae04      	add	r6, sp, #16
 8016a66:	6820      	ldr	r0, [r4, #0]
 8016a68:	fb93 f1f8 	sdiv	r1, r3, r8
 8016a6c:	440a      	add	r2, r1
 8016a6e:	69e1      	ldr	r1, [r4, #28]
 8016a70:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016a74:	463a      	mov	r2, r7
 8016a76:	9600      	str	r6, [sp, #0]
 8016a78:	f7ff ff98 	bl	80169ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016a7c:	69a3      	ldr	r3, [r4, #24]
 8016a7e:	4607      	mov	r7, r0
 8016a80:	686a      	ldr	r2, [r5, #4]
 8016a82:	6a21      	ldr	r1, [r4, #32]
 8016a84:	9600      	str	r6, [sp, #0]
 8016a86:	6860      	ldr	r0, [r4, #4]
 8016a88:	f7ff ff90 	bl	80169ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016a8c:	69a3      	ldr	r3, [r4, #24]
 8016a8e:	6962      	ldr	r2, [r4, #20]
 8016a90:	4407      	add	r7, r0
 8016a92:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8016a94:	9600      	str	r6, [sp, #0]
 8016a96:	68e0      	ldr	r0, [r4, #12]
 8016a98:	fb93 f8f8 	sdiv	r8, r3, r8
 8016a9c:	4442      	add	r2, r8
 8016a9e:	9203      	str	r2, [sp, #12]
 8016aa0:	682a      	ldr	r2, [r5, #0]
 8016aa2:	f7ff ff83 	bl	80169ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016aa6:	4680      	mov	r8, r0
 8016aa8:	9600      	str	r6, [sp, #0]
 8016aaa:	69a3      	ldr	r3, [r4, #24]
 8016aac:	686a      	ldr	r2, [r5, #4]
 8016aae:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8016ab0:	6920      	ldr	r0, [r4, #16]
 8016ab2:	f7ff ff7b 	bl	80169ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016ab6:	4440      	add	r0, r8
 8016ab8:	e7cc      	b.n	8016a54 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016aba:	bf00      	nop
 8016abc:	2402642c 	.word	0x2402642c

08016ac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016ac0:	4b07      	ldr	r3, [pc, #28]	@ (8016ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016ac2:	781b      	ldrb	r3, [r3, #0]
 8016ac4:	2b01      	cmp	r3, #1
 8016ac6:	d109      	bne.n	8016adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016ac8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016acc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016ad0:	8003      	strh	r3, [r0, #0]
 8016ad2:	4b04      	ldr	r3, [pc, #16]	@ (8016ae4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016ad4:	881b      	ldrh	r3, [r3, #0]
 8016ad6:	3b01      	subs	r3, #1
 8016ad8:	1a9b      	subs	r3, r3, r2
 8016ada:	800b      	strh	r3, [r1, #0]
 8016adc:	4770      	bx	lr
 8016ade:	bf00      	nop
 8016ae0:	24026410 	.word	0x24026410
 8016ae4:	2402640c 	.word	0x2402640c

08016ae8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016ae8:	4b07      	ldr	r3, [pc, #28]	@ (8016b08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016aea:	b510      	push	{r4, lr}
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	2b01      	cmp	r3, #1
 8016af0:	d108      	bne.n	8016b04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016af2:	4b06      	ldr	r3, [pc, #24]	@ (8016b0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016af4:	880c      	ldrh	r4, [r1, #0]
 8016af6:	881b      	ldrh	r3, [r3, #0]
 8016af8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016afc:	3b01      	subs	r3, #1
 8016afe:	1b1b      	subs	r3, r3, r4
 8016b00:	8003      	strh	r3, [r0, #0]
 8016b02:	800a      	strh	r2, [r1, #0]
 8016b04:	bd10      	pop	{r4, pc}
 8016b06:	bf00      	nop
 8016b08:	24026410 	.word	0x24026410
 8016b0c:	2402640c 	.word	0x2402640c

08016b10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016b10:	4b0a      	ldr	r3, [pc, #40]	@ (8016b3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016b12:	b510      	push	{r4, lr}
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	2b01      	cmp	r3, #1
 8016b18:	d10e      	bne.n	8016b38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016b1a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016b1e:	8843      	ldrh	r3, [r0, #2]
 8016b20:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016b24:	18ca      	adds	r2, r1, r3
 8016b26:	4b06      	ldr	r3, [pc, #24]	@ (8016b40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016b28:	8044      	strh	r4, [r0, #2]
 8016b2a:	881b      	ldrh	r3, [r3, #0]
 8016b2c:	1a9b      	subs	r3, r3, r2
 8016b2e:	8003      	strh	r3, [r0, #0]
 8016b30:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016b34:	8081      	strh	r1, [r0, #4]
 8016b36:	80c3      	strh	r3, [r0, #6]
 8016b38:	bd10      	pop	{r4, pc}
 8016b3a:	bf00      	nop
 8016b3c:	24026410 	.word	0x24026410
 8016b40:	2402640c 	.word	0x2402640c

08016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016b44:	4b08      	ldr	r3, [pc, #32]	@ (8016b68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b01      	cmp	r3, #1
 8016b4a:	d10c      	bne.n	8016b66 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016b4c:	8803      	ldrh	r3, [r0, #0]
 8016b4e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016b52:	8842      	ldrh	r2, [r0, #2]
 8016b54:	8002      	strh	r2, [r0, #0]
 8016b56:	185a      	adds	r2, r3, r1
 8016b58:	4b04      	ldr	r3, [pc, #16]	@ (8016b6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016b5a:	881b      	ldrh	r3, [r3, #0]
 8016b5c:	1a9b      	subs	r3, r3, r2
 8016b5e:	8043      	strh	r3, [r0, #2]
 8016b60:	88c3      	ldrh	r3, [r0, #6]
 8016b62:	80c1      	strh	r1, [r0, #6]
 8016b64:	8083      	strh	r3, [r0, #4]
 8016b66:	4770      	bx	lr
 8016b68:	24026410 	.word	0x24026410
 8016b6c:	2402640c 	.word	0x2402640c

08016b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016b70:	4b07      	ldr	r3, [pc, #28]	@ (8016b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016b72:	b510      	push	{r4, lr}
 8016b74:	781b      	ldrb	r3, [r3, #0]
 8016b76:	2b01      	cmp	r3, #1
 8016b78:	d108      	bne.n	8016b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016b7a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016b7e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016b82:	8003      	strh	r3, [r0, #0]
 8016b84:	8893      	ldrh	r3, [r2, #4]
 8016b86:	3b01      	subs	r3, #1
 8016b88:	1b1b      	subs	r3, r3, r4
 8016b8a:	800b      	strh	r3, [r1, #0]
 8016b8c:	bd10      	pop	{r4, pc}
 8016b8e:	bf00      	nop
 8016b90:	24026410 	.word	0x24026410

08016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016b94:	4b0a      	ldr	r3, [pc, #40]	@ (8016bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016b96:	460a      	mov	r2, r1
 8016b98:	b510      	push	{r4, lr}
 8016b9a:	781b      	ldrb	r3, [r3, #0]
 8016b9c:	2b01      	cmp	r3, #1
 8016b9e:	d10d      	bne.n	8016bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016ba0:	8881      	ldrh	r1, [r0, #4]
 8016ba2:	8803      	ldrh	r3, [r0, #0]
 8016ba4:	440b      	add	r3, r1
 8016ba6:	4601      	mov	r1, r0
 8016ba8:	3b01      	subs	r3, #1
 8016baa:	f821 3b02 	strh.w	r3, [r1], #2
 8016bae:	f7ff ffdf 	bl	8016b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016bb2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016bb6:	88c2      	ldrh	r2, [r0, #6]
 8016bb8:	80c3      	strh	r3, [r0, #6]
 8016bba:	8082      	strh	r2, [r0, #4]
 8016bbc:	bd10      	pop	{r4, pc}
 8016bbe:	bf00      	nop
 8016bc0:	24026410 	.word	0x24026410

08016bc4 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016bc4:	4b06      	ldr	r3, [pc, #24]	@ (8016be0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016bc6:	2100      	movs	r1, #0
 8016bc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016bcc:	4b05      	ldr	r3, [pc, #20]	@ (8016be4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016bce:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8016bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bd6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8016bda:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8016bde:	4770      	bx	lr
 8016be0:	2402640c 	.word	0x2402640c
 8016be4:	2402640e 	.word	0x2402640e

08016be8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016be8:	4b03      	ldr	r3, [pc, #12]	@ (8016bf8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016bea:	6818      	ldr	r0, [r3, #0]
 8016bec:	b110      	cbz	r0, 8016bf4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016bee:	6803      	ldr	r3, [r0, #0]
 8016bf0:	699b      	ldr	r3, [r3, #24]
 8016bf2:	4718      	bx	r3
 8016bf4:	4770      	bx	lr
 8016bf6:	bf00      	nop
 8016bf8:	2402645c 	.word	0x2402645c

08016bfc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016bfc:	4770      	bx	lr
	...

08016c00 <_ZN8touchgfx11Application4drawEv>:
 8016c00:	4b09      	ldr	r3, [pc, #36]	@ (8016c28 <_ZN8touchgfx11Application4drawEv+0x28>)
 8016c02:	b507      	push	{r0, r1, r2, lr}
 8016c04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016c08:	2100      	movs	r1, #0
 8016c0a:	4b08      	ldr	r3, [pc, #32]	@ (8016c2c <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016c0c:	9100      	str	r1, [sp, #0]
 8016c0e:	4669      	mov	r1, sp
 8016c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c14:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016c18:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016c1c:	6803      	ldr	r3, [r0, #0]
 8016c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c20:	4798      	blx	r3
 8016c22:	b003      	add	sp, #12
 8016c24:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c28:	2402640c 	.word	0x2402640c
 8016c2c:	2402640e 	.word	0x2402640e

08016c30 <_ZN8touchgfx11Application10invalidateEv>:
 8016c30:	4b09      	ldr	r3, [pc, #36]	@ (8016c58 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016c32:	b082      	sub	sp, #8
 8016c34:	2100      	movs	r1, #0
 8016c36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016c3a:	4b08      	ldr	r3, [pc, #32]	@ (8016c5c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016c3c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016c40:	aa02      	add	r2, sp, #8
 8016c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c46:	9100      	str	r1, [sp, #0]
 8016c48:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016c4c:	6803      	ldr	r3, [r0, #0]
 8016c4e:	e912 0006 	ldmdb	r2, {r1, r2}
 8016c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016c54:	b002      	add	sp, #8
 8016c56:	4718      	bx	r3
 8016c58:	2402640c 	.word	0x2402640c
 8016c5c:	2402640e 	.word	0x2402640e

08016c60 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016c60:	4b03      	ldr	r3, [pc, #12]	@ (8016c70 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016c62:	6818      	ldr	r0, [r3, #0]
 8016c64:	b110      	cbz	r0, 8016c6c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016c66:	6803      	ldr	r3, [r0, #0]
 8016c68:	69db      	ldr	r3, [r3, #28]
 8016c6a:	4718      	bx	r3
 8016c6c:	4770      	bx	lr
 8016c6e:	bf00      	nop
 8016c70:	2402645c 	.word	0x2402645c

08016c74 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016c74:	4b03      	ldr	r3, [pc, #12]	@ (8016c84 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016c76:	6818      	ldr	r0, [r3, #0]
 8016c78:	b110      	cbz	r0, 8016c80 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016c7a:	6803      	ldr	r3, [r0, #0]
 8016c7c:	6a1b      	ldr	r3, [r3, #32]
 8016c7e:	4718      	bx	r3
 8016c80:	4770      	bx	lr
 8016c82:	bf00      	nop
 8016c84:	2402645c 	.word	0x2402645c

08016c88 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016c88:	2300      	movs	r3, #0
 8016c8a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8016c8e:	4770      	bx	lr

08016c90 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016c90:	4b03      	ldr	r3, [pc, #12]	@ (8016ca0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016c92:	6818      	ldr	r0, [r3, #0]
 8016c94:	b110      	cbz	r0, 8016c9c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016c96:	6803      	ldr	r3, [r0, #0]
 8016c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c9a:	4718      	bx	r3
 8016c9c:	4770      	bx	lr
 8016c9e:	bf00      	nop
 8016ca0:	2402645c 	.word	0x2402645c

08016ca4 <_ZN8touchgfx11ApplicationD1Ev>:
 8016ca4:	4770      	bx	lr

08016ca6 <_ZN8touchgfx11ApplicationD0Ev>:
 8016ca6:	b510      	push	{r4, lr}
 8016ca8:	4604      	mov	r4, r0
 8016caa:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8016cae:	f00e fc46 	bl	802553e <_ZdlPvj>
 8016cb2:	4620      	mov	r0, r4
 8016cb4:	bd10      	pop	{r4, pc}

08016cb6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016cb6:	b510      	push	{r4, lr}
 8016cb8:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016cbc:	888a      	ldrh	r2, [r1, #4]
 8016cbe:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016cc2:	4422      	add	r2, r4
 8016cc4:	b212      	sxth	r2, r2
 8016cc6:	4293      	cmp	r3, r2
 8016cc8:	da15      	bge.n	8016cf6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016cca:	8882      	ldrh	r2, [r0, #4]
 8016ccc:	4413      	add	r3, r2
 8016cce:	b21b      	sxth	r3, r3
 8016cd0:	429c      	cmp	r4, r3
 8016cd2:	da10      	bge.n	8016cf6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016cd4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016cd8:	88c9      	ldrh	r1, [r1, #6]
 8016cda:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016cde:	4419      	add	r1, r3
 8016ce0:	b209      	sxth	r1, r1
 8016ce2:	428a      	cmp	r2, r1
 8016ce4:	da07      	bge.n	8016cf6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016ce6:	88c0      	ldrh	r0, [r0, #6]
 8016ce8:	4410      	add	r0, r2
 8016cea:	b200      	sxth	r0, r0
 8016cec:	4283      	cmp	r3, r0
 8016cee:	bfac      	ite	ge
 8016cf0:	2000      	movge	r0, #0
 8016cf2:	2001      	movlt	r0, #1
 8016cf4:	bd10      	pop	{r4, pc}
 8016cf6:	2000      	movs	r0, #0
 8016cf8:	e7fc      	b.n	8016cf4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016cfa <_ZN8touchgfx4Rect10restrictToEss>:
 8016cfa:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	b510      	push	{r4, lr}
 8016d02:	da04      	bge.n	8016d0e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016d04:	8884      	ldrh	r4, [r0, #4]
 8016d06:	4423      	add	r3, r4
 8016d08:	8083      	strh	r3, [r0, #4]
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	8003      	strh	r3, [r0, #0]
 8016d0e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016d12:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016d16:	1b09      	subs	r1, r1, r4
 8016d18:	428b      	cmp	r3, r1
 8016d1a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016d1e:	bfc8      	it	gt
 8016d20:	8081      	strhgt	r1, [r0, #4]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	da04      	bge.n	8016d30 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016d26:	88c1      	ldrh	r1, [r0, #6]
 8016d28:	440b      	add	r3, r1
 8016d2a:	80c3      	strh	r3, [r0, #6]
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	8043      	strh	r3, [r0, #2]
 8016d30:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016d34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016d38:	1a52      	subs	r2, r2, r1
 8016d3a:	4293      	cmp	r3, r2
 8016d3c:	bfc8      	it	gt
 8016d3e:	80c2      	strhgt	r2, [r0, #6]
 8016d40:	bd10      	pop	{r4, pc}
	...

08016d44 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016d44:	4b10      	ldr	r3, [pc, #64]	@ (8016d88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016d46:	b510      	push	{r4, lr}
 8016d48:	460c      	mov	r4, r1
 8016d4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8016d8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016d50:	4620      	mov	r0, r4
 8016d52:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016d56:	f7ff ffd0 	bl	8016cfa <_ZN8touchgfx4Rect10restrictToEss>
 8016d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016d5c:	6818      	ldr	r0, [r3, #0]
 8016d5e:	b190      	cbz	r0, 8016d86 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016d60:	6803      	ldr	r3, [r0, #0]
 8016d62:	4621      	mov	r1, r4
 8016d64:	689b      	ldr	r3, [r3, #8]
 8016d66:	4798      	blx	r3
 8016d68:	4b0a      	ldr	r3, [pc, #40]	@ (8016d94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016d6a:	6818      	ldr	r0, [r3, #0]
 8016d6c:	b118      	cbz	r0, 8016d76 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016d6e:	6803      	ldr	r3, [r0, #0]
 8016d70:	4621      	mov	r1, r4
 8016d72:	689b      	ldr	r3, [r3, #8]
 8016d74:	4798      	blx	r3
 8016d76:	4b08      	ldr	r3, [pc, #32]	@ (8016d98 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016d78:	4621      	mov	r1, r4
 8016d7a:	6818      	ldr	r0, [r3, #0]
 8016d7c:	6803      	ldr	r3, [r0, #0]
 8016d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d82:	69db      	ldr	r3, [r3, #28]
 8016d84:	4718      	bx	r3
 8016d86:	bd10      	pop	{r4, pc}
 8016d88:	2402640e 	.word	0x2402640e
 8016d8c:	2402640c 	.word	0x2402640c
 8016d90:	2402645c 	.word	0x2402645c
 8016d94:	24026458 	.word	0x24026458
 8016d98:	24026418 	.word	0x24026418

08016d9c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d9e:	4606      	mov	r6, r0
 8016da0:	4608      	mov	r0, r1
 8016da2:	460f      	mov	r7, r1
 8016da4:	f7fa f967 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016da8:	b9e8      	cbnz	r0, 8016de6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016daa:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016dae:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016db2:	42a5      	cmp	r5, r4
 8016db4:	db17      	blt.n	8016de6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016db6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016dba:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	db11      	blt.n	8016de6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016dc2:	88b9      	ldrh	r1, [r7, #4]
 8016dc4:	440d      	add	r5, r1
 8016dc6:	88b1      	ldrh	r1, [r6, #4]
 8016dc8:	440c      	add	r4, r1
 8016dca:	b22d      	sxth	r5, r5
 8016dcc:	b224      	sxth	r4, r4
 8016dce:	42a5      	cmp	r5, r4
 8016dd0:	dc09      	bgt.n	8016de6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016dd2:	88f8      	ldrh	r0, [r7, #6]
 8016dd4:	4410      	add	r0, r2
 8016dd6:	88f2      	ldrh	r2, [r6, #6]
 8016dd8:	4413      	add	r3, r2
 8016dda:	b200      	sxth	r0, r0
 8016ddc:	b21b      	sxth	r3, r3
 8016dde:	4298      	cmp	r0, r3
 8016de0:	bfcc      	ite	gt
 8016de2:	2000      	movgt	r0, #0
 8016de4:	2001      	movle	r0, #1
 8016de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016de8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dea:	4604      	mov	r4, r0
 8016dec:	4608      	mov	r0, r1
 8016dee:	460d      	mov	r5, r1
 8016df0:	f7fa f941 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016df4:	b978      	cbnz	r0, 8016e16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016df6:	4620      	mov	r0, r4
 8016df8:	f7fa f93d 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016dfc:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016e00:	b150      	cbz	r0, 8016e18 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016e02:	8026      	strh	r6, [r4, #0]
 8016e04:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016e08:	8063      	strh	r3, [r4, #2]
 8016e0a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016e0e:	80a3      	strh	r3, [r4, #4]
 8016e10:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016e14:	80e3      	strh	r3, [r4, #6]
 8016e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e18:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016e1c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016e20:	42b1      	cmp	r1, r6
 8016e22:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016e26:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016e2a:	460f      	mov	r7, r1
 8016e2c:	88ed      	ldrh	r5, [r5, #6]
 8016e2e:	bfa8      	it	ge
 8016e30:	4637      	movge	r7, r6
 8016e32:	4293      	cmp	r3, r2
 8016e34:	4618      	mov	r0, r3
 8016e36:	4466      	add	r6, ip
 8016e38:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016e3c:	bfa8      	it	ge
 8016e3e:	4610      	movge	r0, r2
 8016e40:	442a      	add	r2, r5
 8016e42:	88e5      	ldrh	r5, [r4, #6]
 8016e44:	4461      	add	r1, ip
 8016e46:	b236      	sxth	r6, r6
 8016e48:	8027      	strh	r7, [r4, #0]
 8016e4a:	442b      	add	r3, r5
 8016e4c:	b209      	sxth	r1, r1
 8016e4e:	b212      	sxth	r2, r2
 8016e50:	8060      	strh	r0, [r4, #2]
 8016e52:	b21b      	sxth	r3, r3
 8016e54:	428e      	cmp	r6, r1
 8016e56:	bfac      	ite	ge
 8016e58:	ebc7 0106 	rsbge	r1, r7, r6
 8016e5c:	ebc7 0101 	rsblt	r1, r7, r1
 8016e60:	429a      	cmp	r2, r3
 8016e62:	bfac      	ite	ge
 8016e64:	ebc0 0202 	rsbge	r2, r0, r2
 8016e68:	ebc0 0203 	rsblt	r2, r0, r3
 8016e6c:	80a1      	strh	r1, [r4, #4]
 8016e6e:	80e2      	strh	r2, [r4, #6]
 8016e70:	e7d1      	b.n	8016e16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016e74 <_ZN8touchgfx11Application11getInstanceEv>:
 8016e74:	4b01      	ldr	r3, [pc, #4]	@ (8016e7c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016e76:	6818      	ldr	r0, [r3, #0]
 8016e78:	4770      	bx	lr
 8016e7a:	bf00      	nop
 8016e7c:	2402646c 	.word	0x2402646c

08016e80 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016e80:	2300      	movs	r3, #0
 8016e82:	b510      	push	{r4, lr}
 8016e84:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8016e88:	4604      	mov	r4, r0
 8016e8a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016e8e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016e92:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016e96:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8016e9a:	429a      	cmp	r2, r3
 8016e9c:	d90e      	bls.n	8016ebc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8016e9e:	18e2      	adds	r2, r4, r3
 8016ea0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8016ea4:	b122      	cbz	r2, 8016eb0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016ea6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8016eaa:	6803      	ldr	r3, [r0, #0]
 8016eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016eae:	4798      	blx	r3
 8016eb0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016eb4:	3301      	adds	r3, #1
 8016eb6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8016eba:	e7ea      	b.n	8016e92 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016ebc:	bd10      	pop	{r4, pc}

08016ebe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8016ebe:	b530      	push	{r4, r5, lr}
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8016ec6:	b293      	uxth	r3, r2
 8016ec8:	429d      	cmp	r5, r3
 8016eca:	d90e      	bls.n	8016eea <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8016ecc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8016ed0:	428b      	cmp	r3, r1
 8016ed2:	d10b      	bne.n	8016eec <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8016ed4:	1884      	adds	r4, r0, r2
 8016ed6:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8016eda:	b13b      	cbz	r3, 8016eec <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8016edc:	3b01      	subs	r3, #1
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8016ee4:	b90b      	cbnz	r3, 8016eea <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8016ee6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8016eea:	bd30      	pop	{r4, r5, pc}
 8016eec:	3201      	adds	r2, #1
 8016eee:	e7ea      	b.n	8016ec6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08016ef0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8016ef6:	30a4      	adds	r0, #164	@ 0xa4
 8016ef8:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016efc:	f802 3b01 	strb.w	r3, [r2], #1
 8016f00:	4282      	cmp	r2, r0
 8016f02:	d1fb      	bne.n	8016efc <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8016f04:	4770      	bx	lr
	...

08016f08 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016f08:	b570      	push	{r4, r5, r6, lr}
 8016f0a:	4c0b      	ldr	r4, [pc, #44]	@ (8016f38 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016f0c:	4605      	mov	r5, r0
 8016f0e:	460e      	mov	r6, r1
 8016f10:	6820      	ldr	r0, [r4, #0]
 8016f12:	b110      	cbz	r0, 8016f1a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8016f14:	6803      	ldr	r3, [r0, #0]
 8016f16:	695b      	ldr	r3, [r3, #20]
 8016f18:	4798      	blx	r3
 8016f1a:	1d28      	adds	r0, r5, #4
 8016f1c:	f7ff ffe8 	bl	8016ef0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016f20:	6026      	str	r6, [r4, #0]
 8016f22:	6833      	ldr	r3, [r6, #0]
 8016f24:	4630      	mov	r0, r6
 8016f26:	68db      	ldr	r3, [r3, #12]
 8016f28:	4798      	blx	r3
 8016f2a:	682b      	ldr	r3, [r5, #0]
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f34:	4718      	bx	r3
 8016f36:	bf00      	nop
 8016f38:	2402645c 	.word	0x2402645c

08016f3c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8016f42:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8016f46:	461a      	mov	r2, r3
 8016f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f4a:	461c      	mov	r4, r3
 8016f4c:	461d      	mov	r5, r3
 8016f4e:	459c      	cmp	ip, r3
 8016f50:	dd1a      	ble.n	8016f88 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016f52:	18c6      	adds	r6, r0, r3
 8016f54:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8016f58:	b16e      	cbz	r6, 8016f76 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8016f5a:	429a      	cmp	r2, r3
 8016f5c:	d008      	beq.n	8016f70 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8016f5e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016f62:	fa1f fe82 	uxth.w	lr, r2
 8016f66:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8016f6a:	1887      	adds	r7, r0, r2
 8016f6c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8016f70:	3201      	adds	r2, #1
 8016f72:	3301      	adds	r3, #1
 8016f74:	e7eb      	b.n	8016f4e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8016f76:	4299      	cmp	r1, r3
 8016f78:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8016f7c:	bfa8      	it	ge
 8016f7e:	3501      	addge	r5, #1
 8016f80:	429e      	cmp	r6, r3
 8016f82:	bfc8      	it	gt
 8016f84:	3401      	addgt	r4, #1
 8016f86:	e7f4      	b.n	8016f72 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8016f88:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8016f8c:	1b49      	subs	r1, r1, r5
 8016f8e:	1b1b      	subs	r3, r3, r4
 8016f90:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8016f94:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016f98:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016f9c:	4293      	cmp	r3, r2
 8016f9e:	dd03      	ble.n	8016fa8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8016fa0:	3b01      	subs	r3, #1
 8016fa2:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8016fa6:	e7f7      	b.n	8016f98 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016fac <_ZN8touchgfx11Application15handleTickEventEv>:
 8016fac:	b570      	push	{r4, r5, r6, lr}
 8016fae:	4d16      	ldr	r5, [pc, #88]	@ (8017008 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016fb0:	4604      	mov	r4, r0
 8016fb2:	6828      	ldr	r0, [r5, #0]
 8016fb4:	b140      	cbz	r0, 8016fc8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016fb6:	7a03      	ldrb	r3, [r0, #8]
 8016fb8:	b933      	cbnz	r3, 8016fc8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016fba:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8016fbe:	6803      	ldr	r3, [r0, #0]
 8016fc0:	689b      	ldr	r3, [r3, #8]
 8016fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fc6:	4718      	bx	r3
 8016fc8:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8016fcc:	4e0f      	ldr	r6, [pc, #60]	@ (801700c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8016fce:	b973      	cbnz	r3, 8016fee <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016fd0:	b168      	cbz	r0, 8016fee <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016fd2:	7a03      	ldrb	r3, [r0, #8]
 8016fd4:	b15b      	cbz	r3, 8016fee <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016fd6:	6830      	ldr	r0, [r6, #0]
 8016fd8:	b110      	cbz	r0, 8016fe0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016fda:	6803      	ldr	r3, [r0, #0]
 8016fdc:	691b      	ldr	r3, [r3, #16]
 8016fde:	4798      	blx	r3
 8016fe0:	6828      	ldr	r0, [r5, #0]
 8016fe2:	6803      	ldr	r3, [r0, #0]
 8016fe4:	68db      	ldr	r3, [r3, #12]
 8016fe6:	4798      	blx	r3
 8016fe8:	2301      	movs	r3, #1
 8016fea:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8016fee:	3404      	adds	r4, #4
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f7ff ff45 	bl	8016e80 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	f7ff ffa0 	bl	8016f3c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016ffc:	6830      	ldr	r0, [r6, #0]
 8016ffe:	b110      	cbz	r0, 8017006 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8017000:	6803      	ldr	r3, [r0, #0]
 8017002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017004:	e7dd      	b.n	8016fc2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017006:	bd70      	pop	{r4, r5, r6, pc}
 8017008:	24026460 	.word	0x24026460
 801700c:	2402645c 	.word	0x2402645c

08017010 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8017010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017012:	2300      	movs	r3, #0
 8017014:	4604      	mov	r4, r0
 8017016:	460d      	mov	r5, r1
 8017018:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 801701c:	4618      	mov	r0, r3
 801701e:	b29a      	uxth	r2, r3
 8017020:	4291      	cmp	r1, r2
 8017022:	d912      	bls.n	801704a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8017024:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8017028:	18e6      	adds	r6, r4, r3
 801702a:	42af      	cmp	r7, r5
 801702c:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8017030:	d105      	bne.n	801703e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8017032:	2aff      	cmp	r2, #255	@ 0xff
 8017034:	d002      	beq.n	801703c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8017036:	3201      	adds	r2, #1
 8017038:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801703e:	2a00      	cmp	r2, #0
 8017040:	f103 0301 	add.w	r3, r3, #1
 8017044:	bf08      	it	eq
 8017046:	2001      	moveq	r0, #1
 8017048:	e7e9      	b.n	801701e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801704a:	b120      	cbz	r0, 8017056 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801704c:	2920      	cmp	r1, #32
 801704e:	d102      	bne.n	8017056 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8017050:	4620      	mov	r0, r4
 8017052:	f7ff ff73 	bl	8016f3c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8017056:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801705a:	2b1f      	cmp	r3, #31
 801705c:	d8ee      	bhi.n	801703c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801705e:	18e2      	adds	r2, r4, r3
 8017060:	2101      	movs	r1, #1
 8017062:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8017066:	185a      	adds	r2, r3, r1
 8017068:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801706c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8017070:	e7e4      	b.n	801703c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08017072 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017072:	4603      	mov	r3, r0
 8017074:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8017078:	2200      	movs	r2, #0
 801707a:	801a      	strh	r2, [r3, #0]
 801707c:	3308      	adds	r3, #8
 801707e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8017082:	f823 2c04 	strh.w	r2, [r3, #-4]
 8017086:	f823 2c02 	strh.w	r2, [r3, #-2]
 801708a:	428b      	cmp	r3, r1
 801708c:	d1f5      	bne.n	801707a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801708e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8017092:	4770      	bx	lr

08017094 <_ZN8touchgfx11ApplicationC1Ev>:
 8017094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017096:	4b1d      	ldr	r3, [pc, #116]	@ (801710c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017098:	4606      	mov	r6, r0
 801709a:	4604      	mov	r4, r0
 801709c:	2500      	movs	r5, #0
 801709e:	f846 3b04 	str.w	r3, [r6], #4
 80170a2:	22a8      	movs	r2, #168	@ 0xa8
 80170a4:	2100      	movs	r1, #0
 80170a6:	4630      	mov	r0, r6
 80170a8:	f00f f85e 	bl	8026168 <memset>
 80170ac:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80170b0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80170b4:	4f16      	ldr	r7, [pc, #88]	@ (8017110 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80170b6:	f7ff ffdc 	bl	8017072 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80170ba:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80170be:	f7ff ffd8 	bl	8017072 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80170c2:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80170c6:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80170ca:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80170ce:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80170d2:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80170d6:	490f      	ldr	r1, [pc, #60]	@ (8017114 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80170d8:	480f      	ldr	r0, [pc, #60]	@ (8017118 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80170da:	f00d fbbf 	bl	802485c <CRC_Lock>
 80170de:	4b0f      	ldr	r3, [pc, #60]	@ (801711c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80170e0:	b158      	cbz	r0, 80170fa <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80170e2:	801d      	strh	r5, [r3, #0]
 80170e4:	2300      	movs	r3, #0
 80170e6:	4a0e      	ldr	r2, [pc, #56]	@ (8017120 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80170e8:	4630      	mov	r0, r6
 80170ea:	6013      	str	r3, [r2, #0]
 80170ec:	4a0d      	ldr	r2, [pc, #52]	@ (8017124 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80170ee:	603b      	str	r3, [r7, #0]
 80170f0:	6013      	str	r3, [r2, #0]
 80170f2:	f7ff fefd 	bl	8016ef0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80170f6:	4620      	mov	r0, r4
 80170f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80170fe:	2002      	movs	r0, #2
 8017100:	801a      	strh	r2, [r3, #0]
 8017102:	6038      	str	r0, [r7, #0]
 8017104:	f001 fe08 	bl	8018d18 <_ZN8touchgfx6Screen4drawEv>
 8017108:	e7ec      	b.n	80170e4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801710a:	bf00      	nop
 801710c:	0802a3e4 	.word	0x0802a3e4
 8017110:	2402645c 	.word	0x2402645c
 8017114:	b5e8b5cd 	.word	0xb5e8b5cd
 8017118:	f407a5c2 	.word	0xf407a5c2
 801711c:	24000080 	.word	0x24000080
 8017120:	2402646c 	.word	0x2402646c
 8017124:	24026460 	.word	0x24026460

08017128 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017128:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801712c:	3b01      	subs	r3, #1
 801712e:	b29b      	uxth	r3, r3
 8017130:	428b      	cmp	r3, r1
 8017132:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8017136:	b510      	push	{r4, lr}
 8017138:	d908      	bls.n	801714c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801713a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801713e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017142:	681a      	ldr	r2, [r3, #0]
 8017144:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017148:	685a      	ldr	r2, [r3, #4]
 801714a:	6062      	str	r2, [r4, #4]
 801714c:	bd10      	pop	{r4, pc}
	...

08017150 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017154:	b08f      	sub	sp, #60	@ 0x3c
 8017156:	4b8f      	ldr	r3, [pc, #572]	@ (8017394 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8017158:	4683      	mov	fp, r0
 801715a:	ac0a      	add	r4, sp, #40	@ 0x28
 801715c:	e884 0006 	stmia.w	r4, {r1, r2}
 8017160:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017164:	4620      	mov	r0, r4
 8017166:	4b8c      	ldr	r3, [pc, #560]	@ (8017398 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8017168:	f9b3 1000 	ldrsh.w	r1, [r3]
 801716c:	f7ff fdc5 	bl	8016cfa <_ZN8touchgfx4Rect10restrictToEss>
 8017170:	4620      	mov	r0, r4
 8017172:	f7f9 ff80 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017176:	2800      	cmp	r0, #0
 8017178:	d16a      	bne.n	8017250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801717a:	9403      	str	r4, [sp, #12]
 801717c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8017180:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8017184:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8017188:	9301      	str	r3, [sp, #4]
 801718a:	35a4      	adds	r5, #164	@ 0xa4
 801718c:	b15c      	cbz	r4, 80171a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801718e:	4629      	mov	r1, r5
 8017190:	9803      	ldr	r0, [sp, #12]
 8017192:	f7ff fe03 	bl	8016d9c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017196:	3c01      	subs	r4, #1
 8017198:	b118      	cbz	r0, 80171a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801719a:	b2a1      	uxth	r1, r4
 801719c:	9801      	ldr	r0, [sp, #4]
 801719e:	f7ff ffc3 	bl	8017128 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80171a2:	3d08      	subs	r5, #8
 80171a4:	e7f2      	b.n	801718c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80171a6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80171aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80171ae:	f8cd a010 	str.w	sl, [sp, #16]
 80171b2:	9302      	str	r3, [sp, #8]
 80171b4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80171b8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80171bc:	9306      	str	r3, [sp, #24]
 80171be:	445c      	add	r4, fp
 80171c0:	2500      	movs	r5, #0
 80171c2:	4626      	mov	r6, r4
 80171c4:	f8cd a014 	str.w	sl, [sp, #20]
 80171c8:	462f      	mov	r7, r5
 80171ca:	9b05      	ldr	r3, [sp, #20]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d073      	beq.n	80172b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80171d0:	9903      	ldr	r1, [sp, #12]
 80171d2:	4630      	mov	r0, r6
 80171d4:	f7ff fd6f 	bl	8016cb6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80171d8:	b350      	cbz	r0, 8017230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80171da:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80171de:	f9b6 c000 	ldrsh.w	ip, [r6]
 80171e2:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80171e6:	45e6      	cmp	lr, ip
 80171e8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80171ec:	db33      	blt.n	8017256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80171ee:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80171f2:	88b3      	ldrh	r3, [r6, #4]
 80171f4:	4472      	add	r2, lr
 80171f6:	4463      	add	r3, ip
 80171f8:	b212      	sxth	r2, r2
 80171fa:	b21b      	sxth	r3, r3
 80171fc:	429a      	cmp	r2, r3
 80171fe:	dc2a      	bgt.n	8017256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017200:	fa1f f289 	uxth.w	r2, r9
 8017204:	88f3      	ldrh	r3, [r6, #6]
 8017206:	45c8      	cmp	r8, r9
 8017208:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801720c:	4413      	add	r3, r2
 801720e:	fa1f fc88 	uxth.w	ip, r8
 8017212:	b29b      	uxth	r3, r3
 8017214:	fa0f fe83 	sxth.w	lr, r3
 8017218:	db0f      	blt.n	801723a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801721a:	eba3 030c 	sub.w	r3, r3, ip
 801721e:	1ac9      	subs	r1, r1, r3
 8017220:	b209      	sxth	r1, r1
 8017222:	2900      	cmp	r1, #0
 8017224:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017228:	dd12      	ble.n	8017250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801722a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801722e:	4605      	mov	r5, r0
 8017230:	9b05      	ldr	r3, [sp, #20]
 8017232:	3e08      	subs	r6, #8
 8017234:	3b01      	subs	r3, #1
 8017236:	9305      	str	r3, [sp, #20]
 8017238:	e7c7      	b.n	80171ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801723a:	4461      	add	r1, ip
 801723c:	b209      	sxth	r1, r1
 801723e:	4571      	cmp	r1, lr
 8017240:	dc38      	bgt.n	80172b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017242:	eba2 020c 	sub.w	r2, r2, ip
 8017246:	b212      	sxth	r2, r2
 8017248:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801724c:	2a00      	cmp	r2, #0
 801724e:	dcee      	bgt.n	801722e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017250:	b00f      	add	sp, #60	@ 0x3c
 8017252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017256:	45c8      	cmp	r8, r9
 8017258:	db2c      	blt.n	80172b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801725a:	88f3      	ldrh	r3, [r6, #6]
 801725c:	4499      	add	r9, r3
 801725e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8017262:	4498      	add	r8, r3
 8017264:	fa0f f989 	sxth.w	r9, r9
 8017268:	fa0f f888 	sxth.w	r8, r8
 801726c:	45c1      	cmp	r9, r8
 801726e:	db21      	blt.n	80172b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017270:	fa1f f28c 	uxth.w	r2, ip
 8017274:	88b3      	ldrh	r3, [r6, #4]
 8017276:	45e6      	cmp	lr, ip
 8017278:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801727c:	4413      	add	r3, r2
 801727e:	fa1f f88e 	uxth.w	r8, lr
 8017282:	b29b      	uxth	r3, r3
 8017284:	fa0f f983 	sxth.w	r9, r3
 8017288:	db0a      	blt.n	80172a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801728a:	eba3 0308 	sub.w	r3, r3, r8
 801728e:	1ac9      	subs	r1, r1, r3
 8017290:	b209      	sxth	r1, r1
 8017292:	2900      	cmp	r1, #0
 8017294:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8017298:	ddda      	ble.n	8017250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801729a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801729e:	e7c6      	b.n	801722e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80172a0:	4441      	add	r1, r8
 80172a2:	b209      	sxth	r1, r1
 80172a4:	4549      	cmp	r1, r9
 80172a6:	dc05      	bgt.n	80172b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80172a8:	eba2 0208 	sub.w	r2, r2, r8
 80172ac:	b212      	sxth	r2, r2
 80172ae:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80172b2:	e7cb      	b.n	801724c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80172b4:	4607      	mov	r7, r0
 80172b6:	e7bb      	b.n	8017230 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80172b8:	2d00      	cmp	r5, #0
 80172ba:	d181      	bne.n	80171c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80172bc:	2f00      	cmp	r7, #0
 80172be:	f000 81dd 	beq.w	801767c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80172c2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80172c6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80172ca:	b2b3      	uxth	r3, r6
 80172cc:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 80172d0:	9305      	str	r3, [sp, #20]
 80172d2:	9a05      	ldr	r2, [sp, #20]
 80172d4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80172d8:	4413      	add	r3, r2
 80172da:	b2ba      	uxth	r2, r7
 80172dc:	4492      	add	sl, r2
 80172de:	b29b      	uxth	r3, r3
 80172e0:	fa1f fa8a 	uxth.w	sl, sl
 80172e4:	fa0f f883 	sxth.w	r8, r3
 80172e8:	fa0f f98a 	sxth.w	r9, sl
 80172ec:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80172f0:	9b04      	ldr	r3, [sp, #16]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d052      	beq.n	801739c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80172f6:	9903      	ldr	r1, [sp, #12]
 80172f8:	4620      	mov	r0, r4
 80172fa:	f7ff fcdc 	bl	8016cb6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80172fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017302:	b1c0      	cbz	r0, 8017336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017304:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017308:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801730c:	4576      	cmp	r6, lr
 801730e:	dc22      	bgt.n	8017356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017310:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017314:	44f4      	add	ip, lr
 8017316:	fa0f fc8c 	sxth.w	ip, ip
 801731a:	45e0      	cmp	r8, ip
 801731c:	db1b      	blt.n	8017356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801731e:	428f      	cmp	r7, r1
 8017320:	fa1f fc81 	uxth.w	ip, r1
 8017324:	88e1      	ldrh	r1, [r4, #6]
 8017326:	dc0d      	bgt.n	8017344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8017328:	ebaa 0c0c 	sub.w	ip, sl, ip
 801732c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8017330:	eba1 010c 	sub.w	r1, r1, ip
 8017334:	80e1      	strh	r1, [r4, #6]
 8017336:	4628      	mov	r0, r5
 8017338:	9904      	ldr	r1, [sp, #16]
 801733a:	3c08      	subs	r4, #8
 801733c:	4605      	mov	r5, r0
 801733e:	3901      	subs	r1, #1
 8017340:	9104      	str	r1, [sp, #16]
 8017342:	e7d3      	b.n	80172ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8017344:	4461      	add	r1, ip
 8017346:	b209      	sxth	r1, r1
 8017348:	4549      	cmp	r1, r9
 801734a:	dcf5      	bgt.n	8017338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801734c:	eba2 0c0c 	sub.w	ip, r2, ip
 8017350:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017354:	e7ef      	b.n	8017336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017356:	428f      	cmp	r7, r1
 8017358:	dcee      	bgt.n	8017338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801735a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801735e:	4461      	add	r1, ip
 8017360:	b209      	sxth	r1, r1
 8017362:	4589      	cmp	r9, r1
 8017364:	dbe8      	blt.n	8017338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017366:	4576      	cmp	r6, lr
 8017368:	fa1f fc8e 	uxth.w	ip, lr
 801736c:	88a1      	ldrh	r1, [r4, #4]
 801736e:	dc07      	bgt.n	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8017370:	eba3 0c0c 	sub.w	ip, r3, ip
 8017374:	f8a4 8000 	strh.w	r8, [r4]
 8017378:	eba1 010c 	sub.w	r1, r1, ip
 801737c:	80a1      	strh	r1, [r4, #4]
 801737e:	e7da      	b.n	8017336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017380:	4461      	add	r1, ip
 8017382:	b209      	sxth	r1, r1
 8017384:	4588      	cmp	r8, r1
 8017386:	dbd7      	blt.n	8017338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017388:	9905      	ldr	r1, [sp, #20]
 801738a:	eba1 0c0c 	sub.w	ip, r1, ip
 801738e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8017392:	e7d0      	b.n	8017336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017394:	2402640e 	.word	0x2402640e
 8017398:	2402640c 	.word	0x2402640c
 801739c:	2d00      	cmp	r5, #0
 801739e:	f000 816d 	beq.w	801767c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80173a2:	9b06      	ldr	r3, [sp, #24]
 80173a4:	445b      	add	r3, fp
 80173a6:	461c      	mov	r4, r3
 80173a8:	9b02      	ldr	r3, [sp, #8]
 80173aa:	3301      	adds	r3, #1
 80173ac:	f000 8166 	beq.w	801767c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80173b0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80173b4:	9803      	ldr	r0, [sp, #12]
 80173b6:	4629      	mov	r1, r5
 80173b8:	f7ff fcf0 	bl	8016d9c <_ZNK8touchgfx4Rect8includesERKS0_>
 80173bc:	b120      	cbz	r0, 80173c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80173be:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80173c2:	9801      	ldr	r0, [sp, #4]
 80173c4:	f7ff feb0 	bl	8017128 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80173c8:	9903      	ldr	r1, [sp, #12]
 80173ca:	4628      	mov	r0, r5
 80173cc:	f7ff fc73 	bl	8016cb6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80173d0:	2800      	cmp	r0, #0
 80173d2:	f000 809c 	beq.w	801750e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80173d6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 80173da:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80173de:	fa1f f189 	uxth.w	r1, r9
 80173e2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80173e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80173e8:	eb01 0c03 	add.w	ip, r1, r3
 80173ec:	b283      	uxth	r3, r0
 80173ee:	4548      	cmp	r0, r9
 80173f0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80173f4:	fa1f fa8c 	uxth.w	sl, ip
 80173f8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80173fc:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8017400:	eb03 050c 	add.w	r5, r3, ip
 8017404:	b2ad      	uxth	r5, r5
 8017406:	9505      	str	r5, [sp, #20]
 8017408:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801740c:	9504      	str	r5, [sp, #16]
 801740e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8017412:	f340 8099 	ble.w	8017548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8017416:	1a5b      	subs	r3, r3, r1
 8017418:	4596      	cmp	lr, r2
 801741a:	fa0f f08a 	sxth.w	r0, sl
 801741e:	b29b      	uxth	r3, r3
 8017420:	b21e      	sxth	r6, r3
 8017422:	dd2e      	ble.n	8017482 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8017424:	9f02      	ldr	r7, [sp, #8]
 8017426:	fa1f fe8e 	uxth.w	lr, lr
 801742a:	b292      	uxth	r2, r2
 801742c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8017430:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017434:	9f04      	ldr	r7, [sp, #16]
 8017436:	ebae 0102 	sub.w	r1, lr, r2
 801743a:	44a6      	add	lr, r4
 801743c:	1a3f      	subs	r7, r7, r0
 801743e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8017442:	b289      	uxth	r1, r1
 8017444:	4402      	add	r2, r0
 8017446:	fa0f fe8e 	sxth.w	lr, lr
 801744a:	b20d      	sxth	r5, r1
 801744c:	b212      	sxth	r2, r2
 801744e:	436f      	muls	r7, r5
 8017450:	ebae 0202 	sub.w	r2, lr, r2
 8017454:	4372      	muls	r2, r6
 8017456:	4297      	cmp	r7, r2
 8017458:	db09      	blt.n	801746e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801745a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801745e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8017462:	449c      	add	ip, r3
 8017464:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017468:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801746c:	e686      	b.n	801717c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801746e:	4421      	add	r1, r4
 8017470:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8017474:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8017478:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801747c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017480:	e67c      	b.n	801717c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017482:	9f04      	ldr	r7, [sp, #16]
 8017484:	42b8      	cmp	r0, r7
 8017486:	da27      	bge.n	80174d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017488:	9902      	ldr	r1, [sp, #8]
 801748a:	1a3f      	subs	r7, r7, r0
 801748c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8017490:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017494:	eb05 010e 	add.w	r1, r5, lr
 8017498:	fa1f f881 	uxth.w	r8, r1
 801749c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 80174a0:	4411      	add	r1, r2
 80174a2:	fa0f f988 	sxth.w	r9, r8
 80174a6:	eba2 020e 	sub.w	r2, r2, lr
 80174aa:	eba1 0108 	sub.w	r1, r1, r8
 80174ae:	4372      	muls	r2, r6
 80174b0:	b289      	uxth	r1, r1
 80174b2:	fa0f f881 	sxth.w	r8, r1
 80174b6:	fb08 f707 	mul.w	r7, r8, r7
 80174ba:	42ba      	cmp	r2, r7
 80174bc:	dc06      	bgt.n	80174cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80174be:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 80174c2:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80174c6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80174ca:	e7ca      	b.n	8017462 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80174cc:	4429      	add	r1, r5
 80174ce:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 80174d2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80174d6:	e651      	b.n	801717c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80174d8:	9805      	ldr	r0, [sp, #20]
 80174da:	2d06      	cmp	r5, #6
 80174dc:	ebaa 0000 	sub.w	r0, sl, r0
 80174e0:	b280      	uxth	r0, r0
 80174e2:	fa0f fe80 	sxth.w	lr, r0
 80174e6:	d817      	bhi.n	8017518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80174e8:	9b04      	ldr	r3, [sp, #16]
 80174ea:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 80174ee:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80174f2:	1c6b      	adds	r3, r5, #1
 80174f4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 80174f8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80174fc:	9b01      	ldr	r3, [sp, #4]
 80174fe:	9801      	ldr	r0, [sp, #4]
 8017500:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017504:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017508:	805a      	strh	r2, [r3, #2]
 801750a:	809e      	strh	r6, [r3, #4]
 801750c:	80d9      	strh	r1, [r3, #6]
 801750e:	9b02      	ldr	r3, [sp, #8]
 8017510:	3c08      	subs	r4, #8
 8017512:	3b01      	subs	r3, #1
 8017514:	9302      	str	r3, [sp, #8]
 8017516:	e747      	b.n	80173a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8017518:	9a02      	ldr	r2, [sp, #8]
 801751a:	45b6      	cmp	lr, r6
 801751c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017520:	db0d      	blt.n	801753e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8017522:	449c      	add	ip, r3
 8017524:	445a      	add	r2, fp
 8017526:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801752a:	fa1f fc8c 	uxth.w	ip, ip
 801752e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8017532:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8017536:	448c      	add	ip, r1
 8017538:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801753c:	e61e      	b.n	801717c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801753e:	445a      	add	r2, fp
 8017540:	4484      	add	ip, r0
 8017542:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8017546:	e78f      	b.n	8017468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017548:	fa1f f18e 	uxth.w	r1, lr
 801754c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8017550:	b293      	uxth	r3, r2
 8017552:	4596      	cmp	lr, r2
 8017554:	eb01 0806 	add.w	r8, r1, r6
 8017558:	9306      	str	r3, [sp, #24]
 801755a:	fa1f f888 	uxth.w	r8, r8
 801755e:	9f06      	ldr	r7, [sp, #24]
 8017560:	fa0f f388 	sxth.w	r3, r8
 8017564:	9307      	str	r3, [sp, #28]
 8017566:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801756a:	443b      	add	r3, r7
 801756c:	b29b      	uxth	r3, r3
 801756e:	9308      	str	r3, [sp, #32]
 8017570:	da24      	bge.n	80175bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8017572:	9905      	ldr	r1, [sp, #20]
 8017574:	eba3 0308 	sub.w	r3, r3, r8
 8017578:	eba2 020e 	sub.w	r2, r2, lr
 801757c:	eba9 0000 	sub.w	r0, r9, r0
 8017580:	ebaa 0401 	sub.w	r4, sl, r1
 8017584:	b29b      	uxth	r3, r3
 8017586:	b2a4      	uxth	r4, r4
 8017588:	b219      	sxth	r1, r3
 801758a:	b225      	sxth	r5, r4
 801758c:	4348      	muls	r0, r1
 801758e:	436a      	muls	r2, r5
 8017590:	4282      	cmp	r2, r0
 8017592:	9a02      	ldr	r2, [sp, #8]
 8017594:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017598:	445a      	add	r2, fp
 801759a:	dc06      	bgt.n	80175aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801759c:	9b07      	ldr	r3, [sp, #28]
 801759e:	44a4      	add	ip, r4
 80175a0:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 80175a4:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 80175a8:	e75e      	b.n	8017468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80175aa:	9904      	ldr	r1, [sp, #16]
 80175ac:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 80175b0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 80175b4:	4433      	add	r3, r6
 80175b6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80175ba:	e5df      	b.n	801717c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80175bc:	9f06      	ldr	r7, [sp, #24]
 80175be:	9b04      	ldr	r3, [sp, #16]
 80175c0:	1bc9      	subs	r1, r1, r7
 80175c2:	fa0f f78a 	sxth.w	r7, sl
 80175c6:	b289      	uxth	r1, r1
 80175c8:	429f      	cmp	r7, r3
 80175ca:	fa0f fe81 	sxth.w	lr, r1
 80175ce:	dd23      	ble.n	8017618 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80175d0:	9a05      	ldr	r2, [sp, #20]
 80175d2:	eba9 0000 	sub.w	r0, r9, r0
 80175d6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80175da:	ebaa 0202 	sub.w	r2, sl, r2
 80175de:	9d07      	ldr	r5, [sp, #28]
 80175e0:	fb0e f000 	mul.w	r0, lr, r0
 80175e4:	b292      	uxth	r2, r2
 80175e6:	eba5 0a03 	sub.w	sl, r5, r3
 80175ea:	9b02      	ldr	r3, [sp, #8]
 80175ec:	b214      	sxth	r4, r2
 80175ee:	00db      	lsls	r3, r3, #3
 80175f0:	fb04 fa0a 	mul.w	sl, r4, sl
 80175f4:	445b      	add	r3, fp
 80175f6:	4550      	cmp	r0, sl
 80175f8:	db03      	blt.n	8017602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80175fa:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80175fe:	4494      	add	ip, r2
 8017600:	e732      	b.n	8017468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017602:	9a04      	ldr	r2, [sp, #16]
 8017604:	4431      	add	r1, r6
 8017606:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801760a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801760e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8017612:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017616:	e75c      	b.n	80174d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8017618:	9b08      	ldr	r3, [sp, #32]
 801761a:	2d06      	cmp	r5, #6
 801761c:	eba3 0308 	sub.w	r3, r3, r8
 8017620:	b29b      	uxth	r3, r3
 8017622:	b218      	sxth	r0, r3
 8017624:	d813      	bhi.n	801764e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8017626:	9b07      	ldr	r3, [sp, #28]
 8017628:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801762c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8017630:	1c6b      	adds	r3, r5, #1
 8017632:	9901      	ldr	r1, [sp, #4]
 8017634:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8017638:	9b01      	ldr	r3, [sp, #4]
 801763a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801763e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017642:	805a      	strh	r2, [r3, #2]
 8017644:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017646:	f8a3 e006 	strh.w	lr, [r3, #6]
 801764a:	809a      	strh	r2, [r3, #4]
 801764c:	e75f      	b.n	801750e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801764e:	9c02      	ldr	r4, [sp, #8]
 8017650:	4570      	cmp	r0, lr
 8017652:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8017656:	db0d      	blt.n	8017674 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8017658:	4431      	add	r1, r6
 801765a:	9b06      	ldr	r3, [sp, #24]
 801765c:	445c      	add	r4, fp
 801765e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8017662:	b289      	uxth	r1, r1
 8017664:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8017668:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801766c:	4419      	add	r1, r3
 801766e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8017672:	e583      	b.n	801717c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017674:	445c      	add	r4, fp
 8017676:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801767a:	e79b      	b.n	80175b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801767c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8017680:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8017684:	1e65      	subs	r5, r4, #1
 8017686:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801768a:	b2ad      	uxth	r5, r5
 801768c:	42b5      	cmp	r5, r6
 801768e:	d044      	beq.n	801771a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8017690:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8017694:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8017698:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801769c:	4282      	cmp	r2, r0
 801769e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 80176a2:	d11f      	bne.n	80176e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80176a4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 80176a8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80176ac:	459c      	cmp	ip, r3
 80176ae:	d119      	bne.n	80176e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80176b0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80176b4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80176b8:	19d8      	adds	r0, r3, r7
 80176ba:	b200      	sxth	r0, r0
 80176bc:	4288      	cmp	r0, r1
 80176be:	d109      	bne.n	80176d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80176c0:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80176c4:	4413      	add	r3, r2
 80176c6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80176ca:	4629      	mov	r1, r5
 80176cc:	9801      	ldr	r0, [sp, #4]
 80176ce:	f7ff fd2b 	bl	8017128 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80176d2:	e003      	b.n	80176dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80176d4:	4411      	add	r1, r2
 80176d6:	b209      	sxth	r1, r1
 80176d8:	42b9      	cmp	r1, r7
 80176da:	d0f3      	beq.n	80176c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80176dc:	3d01      	subs	r5, #1
 80176de:	3c08      	subs	r4, #8
 80176e0:	b2ad      	uxth	r5, r5
 80176e2:	e7d3      	b.n	801768c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80176e4:	42b9      	cmp	r1, r7
 80176e6:	d1f9      	bne.n	80176dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80176e8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80176ec:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80176f0:	4299      	cmp	r1, r3
 80176f2:	d1f3      	bne.n	80176dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80176f4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80176f8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80176fc:	181f      	adds	r7, r3, r0
 80176fe:	b23f      	sxth	r7, r7
 8017700:	42ba      	cmp	r2, r7
 8017702:	d105      	bne.n	8017710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8017704:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8017708:	440b      	add	r3, r1
 801770a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801770e:	e7dc      	b.n	80176ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8017710:	440a      	add	r2, r1
 8017712:	b212      	sxth	r2, r2
 8017714:	4290      	cmp	r0, r2
 8017716:	d1e1      	bne.n	80176dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8017718:	e7f6      	b.n	8017708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801771a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801771e:	2e07      	cmp	r6, #7
 8017720:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017724:	d812      	bhi.n	801774c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8017726:	1c75      	adds	r5, r6, #1
 8017728:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801772c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8017730:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8017734:	9d01      	ldr	r5, [sp, #4]
 8017736:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801773a:	442c      	add	r4, r5
 801773c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8017740:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017744:	8061      	strh	r1, [r4, #2]
 8017746:	80a2      	strh	r2, [r4, #4]
 8017748:	80e3      	strh	r3, [r4, #6]
 801774a:	e581      	b.n	8017250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801774c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8017750:	3e01      	subs	r6, #1
 8017752:	445c      	add	r4, fp
 8017754:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8017758:	f04f 37ff 	mov.w	r7, #4294967295
 801775c:	2500      	movs	r5, #0
 801775e:	9305      	str	r3, [sp, #20]
 8017760:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017764:	1e72      	subs	r2, r6, #1
 8017766:	9302      	str	r3, [sp, #8]
 8017768:	4691      	mov	r9, r2
 801776a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801776e:	9304      	str	r3, [sp, #16]
 8017770:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8017774:	f1b9 3fff 	cmp.w	r9, #4294967295
 8017778:	6818      	ldr	r0, [r3, #0]
 801777a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801777e:	9207      	str	r2, [sp, #28]
 8017780:	bf16      	itet	ne
 8017782:	9905      	ldrne	r1, [sp, #20]
 8017784:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8017788:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801778c:	9306      	str	r3, [sp, #24]
 801778e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017792:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017796:	fb18 f801 	smulbb	r8, r8, r1
 801779a:	6859      	ldr	r1, [r3, #4]
 801779c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80177a0:	4671      	mov	r1, lr
 80177a2:	a80c      	add	r0, sp, #48	@ 0x30
 80177a4:	f7ff fb20 	bl	8016de8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80177a8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80177ac:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80177b0:	f04f 0c08 	mov.w	ip, #8
 80177b4:	9b04      	ldr	r3, [sp, #16]
 80177b6:	9a02      	ldr	r2, [sp, #8]
 80177b8:	fb10 f001 	smulbb	r0, r0, r1
 80177bc:	fb02 8803 	mla	r8, r2, r3, r8
 80177c0:	eba0 0108 	sub.w	r1, r0, r8
 80177c4:	fb90 f0fc 	sdiv	r0, r0, ip
 80177c8:	4288      	cmp	r0, r1
 80177ca:	dc20      	bgt.n	801780e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80177cc:	4551      	cmp	r1, sl
 80177ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80177d2:	da03      	bge.n	80177dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 80177d4:	b1d9      	cbz	r1, 801780e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80177d6:	468a      	mov	sl, r1
 80177d8:	464f      	mov	r7, r9
 80177da:	4635      	mov	r5, r6
 80177dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80177e0:	f119 0f02 	cmn.w	r9, #2
 80177e4:	d1c6      	bne.n	8017774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80177e6:	4616      	mov	r6, r2
 80177e8:	3201      	adds	r2, #1
 80177ea:	f1a4 0408 	sub.w	r4, r4, #8
 80177ee:	d1b7      	bne.n	8017760 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80177f0:	9b01      	ldr	r3, [sp, #4]
 80177f2:	b2ac      	uxth	r4, r5
 80177f4:	00ed      	lsls	r5, r5, #3
 80177f6:	1958      	adds	r0, r3, r5
 80177f8:	1c7b      	adds	r3, r7, #1
 80177fa:	d10b      	bne.n	8017814 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 80177fc:	4601      	mov	r1, r0
 80177fe:	9803      	ldr	r0, [sp, #12]
 8017800:	f7ff faf2 	bl	8016de8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017804:	4621      	mov	r1, r4
 8017806:	9801      	ldr	r0, [sp, #4]
 8017808:	f7ff fc8e 	bl	8017128 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801780c:	e4b6      	b.n	801717c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801780e:	464f      	mov	r7, r9
 8017810:	4635      	mov	r5, r6
 8017812:	e7ed      	b.n	80177f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8017814:	9b01      	ldr	r3, [sp, #4]
 8017816:	00ff      	lsls	r7, r7, #3
 8017818:	445d      	add	r5, fp
 801781a:	19d9      	adds	r1, r3, r7
 801781c:	445f      	add	r7, fp
 801781e:	f7ff fae3 	bl	8016de8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017822:	9b03      	ldr	r3, [sp, #12]
 8017824:	cb03      	ldmia	r3!, {r0, r1}
 8017826:	9b03      	ldr	r3, [sp, #12]
 8017828:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801782c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8017830:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8017834:	6869      	ldr	r1, [r5, #4]
 8017836:	c303      	stmia	r3!, {r0, r1}
 8017838:	e7e4      	b.n	8017804 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801783a:	bf00      	nop

0801783c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017840:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8017844:	b09b      	sub	sp, #108	@ 0x6c
 8017846:	4604      	mov	r4, r0
 8017848:	4630      	mov	r0, r6
 801784a:	f7f9 fc14 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801784e:	4605      	mov	r5, r0
 8017850:	b948      	cbnz	r0, 8017866 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8017852:	6823      	ldr	r3, [r4, #0]
 8017854:	4620      	mov	r0, r4
 8017856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017858:	e896 0006 	ldmia.w	r6, {r1, r2}
 801785c:	4798      	blx	r3
 801785e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017862:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8017866:	4bc5      	ldr	r3, [pc, #788]	@ (8017b7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d03f      	beq.n	80178ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801786e:	4dc4      	ldr	r5, [pc, #784]	@ (8017b80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8017870:	4628      	mov	r0, r5
 8017872:	f7f9 fc00 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017876:	4606      	mov	r6, r0
 8017878:	2800      	cmp	r0, #0
 801787a:	d138      	bne.n	80178ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801787c:	4628      	mov	r0, r5
 801787e:	f7ff f947 	bl	8016b10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017882:	6823      	ldr	r3, [r4, #0]
 8017884:	6829      	ldr	r1, [r5, #0]
 8017886:	4620      	mov	r0, r4
 8017888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801788a:	686a      	ldr	r2, [r5, #4]
 801788c:	4798      	blx	r3
 801788e:	802e      	strh	r6, [r5, #0]
 8017890:	806e      	strh	r6, [r5, #2]
 8017892:	80ae      	strh	r6, [r5, #4]
 8017894:	80ee      	strh	r6, [r5, #6]
 8017896:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801789a:	4dba      	ldr	r5, [pc, #744]	@ (8017b84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801789c:	4640      	mov	r0, r8
 801789e:	f7ff fbe8 	bl	8017072 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80178a2:	882e      	ldrh	r6, [r5, #0]
 80178a4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80178a8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80178ac:	4633      	mov	r3, r6
 80178ae:	42bb      	cmp	r3, r7
 80178b0:	d224      	bcs.n	80178fc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80178b2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80178b6:	2907      	cmp	r1, #7
 80178b8:	d816      	bhi.n	80178e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80178ba:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80178be:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80178c2:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80178c6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80178ca:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80178ce:	1c4a      	adds	r2, r1, #1
 80178d0:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80178d4:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80178d8:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80178dc:	f8a2 a002 	strh.w	sl, [r2, #2]
 80178e0:	f8a2 e004 	strh.w	lr, [r2, #4]
 80178e4:	f8a2 c006 	strh.w	ip, [r2, #6]
 80178e8:	3301      	adds	r3, #1
 80178ea:	b29b      	uxth	r3, r3
 80178ec:	e7df      	b.n	80178ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80178ee:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d1cf      	bne.n	8017896 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80178f6:	b01b      	add	sp, #108	@ 0x6c
 80178f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178fc:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8017900:	42b3      	cmp	r3, r6
 8017902:	d90c      	bls.n	801791e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8017904:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8017908:	6822      	ldr	r2, [r4, #0]
 801790a:	3601      	adds	r6, #1
 801790c:	4620      	mov	r0, r4
 801790e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8017910:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8017914:	b2b6      	uxth	r6, r6
 8017916:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801791a:	47b8      	blx	r7
 801791c:	e7ee      	b.n	80178fc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801791e:	4a9a      	ldr	r2, [pc, #616]	@ (8017b88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8017920:	6813      	ldr	r3, [r2, #0]
 8017922:	4691      	mov	r9, r2
 8017924:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8017928:	2b01      	cmp	r3, #1
 801792a:	f040 80e0 	bne.w	8017aee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801792e:	8829      	ldrh	r1, [r5, #0]
 8017930:	2600      	movs	r6, #0
 8017932:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8017936:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801793a:	33ae      	adds	r3, #174	@ 0xae
 801793c:	428f      	cmp	r7, r1
 801793e:	f103 0308 	add.w	r3, r3, #8
 8017942:	dd0a      	ble.n	801795a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8017944:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8017948:	3101      	adds	r1, #1
 801794a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801794e:	4402      	add	r2, r0
 8017950:	b212      	sxth	r2, r2
 8017952:	4296      	cmp	r6, r2
 8017954:	bfb8      	it	lt
 8017956:	4616      	movlt	r6, r2
 8017958:	e7f0      	b.n	801793c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801795a:	4b8c      	ldr	r3, [pc, #560]	@ (8017b8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801795c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8017b88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8017960:	881b      	ldrh	r3, [r3, #0]
 8017962:	2b0f      	cmp	r3, #15
 8017964:	bf8c      	ite	hi
 8017966:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801796a:	f04f 0b01 	movls.w	fp, #1
 801796e:	2300      	movs	r3, #0
 8017970:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017974:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8017978:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801797c:	4b82      	ldr	r3, [pc, #520]	@ (8017b88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801797e:	4438      	add	r0, r7
 8017980:	b207      	sxth	r7, r0
 8017982:	6818      	ldr	r0, [r3, #0]
 8017984:	42b7      	cmp	r7, r6
 8017986:	6803      	ldr	r3, [r0, #0]
 8017988:	f280 8083 	bge.w	8017a92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801798c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017990:	4798      	blx	r3
 8017992:	eb07 030b 	add.w	r3, r7, fp
 8017996:	4298      	cmp	r0, r3
 8017998:	da07      	bge.n	80179aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801799a:	42b0      	cmp	r0, r6
 801799c:	da05      	bge.n	80179aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801799e:	4287      	cmp	r7, r0
 80179a0:	dd6c      	ble.n	8017a7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80179a2:	2f00      	cmp	r7, #0
 80179a4:	dd6a      	ble.n	8017a7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80179a6:	4630      	mov	r0, r6
 80179a8:	e004      	b.n	80179b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 80179aa:	4287      	cmp	r7, r0
 80179ac:	dcfb      	bgt.n	80179a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 80179ae:	42b0      	cmp	r0, r6
 80179b0:	bfa8      	it	ge
 80179b2:	4630      	movge	r0, r6
 80179b4:	4b76      	ldr	r3, [pc, #472]	@ (8017b90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80179b6:	1bc0      	subs	r0, r0, r7
 80179b8:	2200      	movs	r2, #0
 80179ba:	f8ad 7016 	strh.w	r7, [sp, #22]
 80179be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80179c2:	882f      	ldrh	r7, [r5, #0]
 80179c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80179c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80179cc:	f8ad 001a 	strh.w	r0, [sp, #26]
 80179d0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80179d4:	42bb      	cmp	r3, r7
 80179d6:	d9cd      	bls.n	8017974 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80179d8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80179dc:	ab07      	add	r3, sp, #28
 80179de:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80179e2:	6851      	ldr	r1, [r2, #4]
 80179e4:	c303      	stmia	r3!, {r0, r1}
 80179e6:	a905      	add	r1, sp, #20
 80179e8:	a807      	add	r0, sp, #28
 80179ea:	f7ff f964 	bl	8016cb6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80179ee:	2800      	cmp	r0, #0
 80179f0:	d04c      	beq.n	8017a8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80179f2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80179f6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80179fa:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80179fe:	4686      	mov	lr, r0
 8017a00:	4290      	cmp	r0, r2
 8017a02:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8017a06:	4450      	add	r0, sl
 8017a08:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8017a0c:	bfb8      	it	lt
 8017a0e:	4696      	movlt	lr, r2
 8017a10:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017a14:	4452      	add	r2, sl
 8017a16:	b280      	uxth	r0, r0
 8017a18:	4299      	cmp	r1, r3
 8017a1a:	468c      	mov	ip, r1
 8017a1c:	b292      	uxth	r2, r2
 8017a1e:	9302      	str	r3, [sp, #8]
 8017a20:	bfb8      	it	lt
 8017a22:	469c      	movlt	ip, r3
 8017a24:	b203      	sxth	r3, r0
 8017a26:	fa0f fa82 	sxth.w	sl, r2
 8017a2a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8017a2e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017a32:	4553      	cmp	r3, sl
 8017a34:	bfb8      	it	lt
 8017a36:	4602      	movlt	r2, r0
 8017a38:	9b02      	ldr	r3, [sp, #8]
 8017a3a:	eba2 020e 	sub.w	r2, r2, lr
 8017a3e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017a42:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8017a46:	4411      	add	r1, r2
 8017a48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017a4c:	4413      	add	r3, r2
 8017a4e:	b289      	uxth	r1, r1
 8017a50:	b29b      	uxth	r3, r3
 8017a52:	b208      	sxth	r0, r1
 8017a54:	b21a      	sxth	r2, r3
 8017a56:	4290      	cmp	r0, r2
 8017a58:	bfb8      	it	lt
 8017a5a:	460b      	movlt	r3, r1
 8017a5c:	eba3 030c 	sub.w	r3, r3, ip
 8017a60:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017a64:	a807      	add	r0, sp, #28
 8017a66:	f7f9 fb06 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a6a:	b920      	cbnz	r0, 8017a76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8017a6c:	6823      	ldr	r3, [r4, #0]
 8017a6e:	a907      	add	r1, sp, #28
 8017a70:	4620      	mov	r0, r4
 8017a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a74:	4798      	blx	r3
 8017a76:	3701      	adds	r7, #1
 8017a78:	b2bf      	uxth	r7, r7
 8017a7a:	e7a9      	b.n	80179d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8017a7c:	f8d9 0000 	ldr.w	r0, [r9]
 8017a80:	2101      	movs	r1, #1
 8017a82:	6803      	ldr	r3, [r0, #0]
 8017a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017a88:	4798      	blx	r3
 8017a8a:	e773      	b.n	8017974 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8017a8c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017a90:	e7e8      	b.n	8017a64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8017a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a94:	4798      	blx	r3
 8017a96:	4b3f      	ldr	r3, [pc, #252]	@ (8017b94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017a98:	781b      	ldrb	r3, [r3, #0]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	f43f af2b 	beq.w	80178f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8017aa6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8017aaa:	882b      	ldrh	r3, [r5, #0]
 8017aac:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8017ab0:	42ab      	cmp	r3, r5
 8017ab2:	f4bf af20 	bcs.w	80178f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017ab6:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8017aba:	2907      	cmp	r1, #7
 8017abc:	d814      	bhi.n	8017ae8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8017abe:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8017ac2:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8017ac6:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8017aca:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8017ace:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8017ad2:	1c4a      	adds	r2, r1, #1
 8017ad4:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8017ad8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8017adc:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8017ae0:	f8a2 c002 	strh.w	ip, [r2, #2]
 8017ae4:	8097      	strh	r7, [r2, #4]
 8017ae6:	80d6      	strh	r6, [r2, #6]
 8017ae8:	3301      	adds	r3, #1
 8017aea:	b29b      	uxth	r3, r3
 8017aec:	e7e0      	b.n	8017ab0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8017aee:	2b02      	cmp	r3, #2
 8017af0:	f040 8133 	bne.w	8017d5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8017af4:	4b28      	ldr	r3, [pc, #160]	@ (8017b98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8017af6:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8017afa:	781b      	ldrb	r3, [r3, #0]
 8017afc:	2b01      	cmp	r3, #1
 8017afe:	f000 8098 	beq.w	8017c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8017b02:	882a      	ldrh	r2, [r5, #0]
 8017b04:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8017b08:	3201      	adds	r2, #1
 8017b0a:	b292      	uxth	r2, r2
 8017b0c:	2900      	cmp	r1, #0
 8017b0e:	d0c2      	beq.n	8017a96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017b10:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8017b14:	4694      	mov	ip, r2
 8017b16:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8017b1a:	f04f 0900 	mov.w	r9, #0
 8017b1e:	441e      	add	r6, r3
 8017b20:	b236      	sxth	r6, r6
 8017b22:	fa1f f38c 	uxth.w	r3, ip
 8017b26:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8017b2a:	4299      	cmp	r1, r3
 8017b2c:	f240 80be 	bls.w	8017cac <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8017b30:	4427      	add	r7, r4
 8017b32:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8017b36:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8017b3a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8017b3e:	4283      	cmp	r3, r0
 8017b40:	f340 80a0 	ble.w	8017c84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8017b44:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8017b48:	46e1      	mov	r9, ip
 8017b4a:	4406      	add	r6, r0
 8017b4c:	b236      	sxth	r6, r6
 8017b4e:	429e      	cmp	r6, r3
 8017b50:	bfa8      	it	ge
 8017b52:	461e      	movge	r6, r3
 8017b54:	f10c 0c01 	add.w	ip, ip, #1
 8017b58:	e7e3      	b.n	8017b22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8017b5a:	d10a      	bne.n	8017b72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8017b5c:	4562      	cmp	r2, ip
 8017b5e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8017b62:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8017b66:	bfb8      	it	lt
 8017b68:	4662      	movlt	r2, ip
 8017b6a:	4288      	cmp	r0, r1
 8017b6c:	bfb8      	it	lt
 8017b6e:	461f      	movlt	r7, r3
 8017b70:	e086      	b.n	8017c80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8017b72:	428a      	cmp	r2, r1
 8017b74:	bfb8      	it	lt
 8017b76:	460a      	movlt	r2, r1
 8017b78:	e082      	b.n	8017c80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8017b7a:	bf00      	nop
 8017b7c:	24026458 	.word	0x24026458
 8017b80:	24026464 	.word	0x24026464
 8017b84:	24000080 	.word	0x24000080
 8017b88:	24026418 	.word	0x24026418
 8017b8c:	2402640e 	.word	0x2402640e
 8017b90:	2402640c 	.word	0x2402640c
 8017b94:	24026416 	.word	0x24026416
 8017b98:	24026410 	.word	0x24026410
 8017b9c:	19a1      	adds	r1, r4, r6
 8017b9e:	ab07      	add	r3, sp, #28
 8017ba0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8017ba4:	6849      	ldr	r1, [r1, #4]
 8017ba6:	c303      	stmia	r3!, {r0, r1}
 8017ba8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017bac:	a807      	add	r0, sp, #28
 8017bae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017bb2:	2b13      	cmp	r3, #19
 8017bb4:	440b      	add	r3, r1
 8017bb6:	bfd8      	it	le
 8017bb8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017bbc:	1a9b      	subs	r3, r3, r2
 8017bbe:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017bc2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017bc6:	f7fe ffbd 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017bca:	a807      	add	r0, sp, #28
 8017bcc:	f7f9 fa53 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017bd0:	bb78      	cbnz	r0, 8017c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8017bd2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8017bd6:	4426      	add	r6, r4
 8017bd8:	f8d9 0000 	ldr.w	r0, [r9]
 8017bdc:	f1bc 0f14 	cmp.w	ip, #20
 8017be0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017be4:	f8d0 e000 	ldr.w	lr, [r0]
 8017be8:	bfa8      	it	ge
 8017bea:	f04f 0c14 	movge.w	ip, #20
 8017bee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017bf2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017bf6:	fa1f fc8c 	uxth.w	ip, ip
 8017bfa:	f8cd c000 	str.w	ip, [sp]
 8017bfe:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8017c02:	47d8      	blx	fp
 8017c04:	4683      	mov	fp, r0
 8017c06:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8017c0a:	a807      	add	r0, sp, #28
 8017c0c:	f7fe ff80 	bl	8016b10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017c10:	6823      	ldr	r3, [r4, #0]
 8017c12:	4620      	mov	r0, r4
 8017c14:	a907      	add	r1, sp, #28
 8017c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017c18:	4798      	blx	r3
 8017c1a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017c1e:	eba0 000b 	sub.w	r0, r0, fp
 8017c22:	b200      	sxth	r0, r0
 8017c24:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8017c28:	b918      	cbnz	r0, 8017c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8017c2a:	b2b9      	uxth	r1, r7
 8017c2c:	4650      	mov	r0, sl
 8017c2e:	f7ff fa7b 	bl	8017128 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017c32:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8017c36:	f1bb 0f00 	cmp.w	fp, #0
 8017c3a:	f43f af2c 	beq.w	8017a96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017c3e:	882b      	ldrh	r3, [r5, #0]
 8017c40:	2700      	movs	r7, #0
 8017c42:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8017c46:	3301      	adds	r3, #1
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	b299      	uxth	r1, r3
 8017c4c:	00fe      	lsls	r6, r7, #3
 8017c4e:	458b      	cmp	fp, r1
 8017c50:	d9a4      	bls.n	8017b9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8017c52:	4426      	add	r6, r4
 8017c54:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8017c58:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8017c5c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017c60:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8017c64:	4408      	add	r0, r1
 8017c66:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8017c6a:	4461      	add	r1, ip
 8017c6c:	b200      	sxth	r0, r0
 8017c6e:	b209      	sxth	r1, r1
 8017c70:	4288      	cmp	r0, r1
 8017c72:	f6bf af72 	bge.w	8017b5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8017c76:	4584      	cmp	ip, r0
 8017c78:	4662      	mov	r2, ip
 8017c7a:	461f      	mov	r7, r3
 8017c7c:	bfb8      	it	lt
 8017c7e:	4602      	movlt	r2, r0
 8017c80:	3301      	adds	r3, #1
 8017c82:	e7e2      	b.n	8017c4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8017c84:	d10e      	bne.n	8017ca4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8017c86:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8017c8a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8017c8e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8017c92:	4473      	add	r3, lr
 8017c94:	b21b      	sxth	r3, r3
 8017c96:	429e      	cmp	r6, r3
 8017c98:	bfa8      	it	ge
 8017c9a:	461e      	movge	r6, r3
 8017c9c:	4287      	cmp	r7, r0
 8017c9e:	bfb8      	it	lt
 8017ca0:	46e1      	movlt	r9, ip
 8017ca2:	e757      	b.n	8017b54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017ca4:	4286      	cmp	r6, r0
 8017ca6:	bfa8      	it	ge
 8017ca8:	4606      	movge	r6, r0
 8017caa:	e753      	b.n	8017b54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017cac:	eb0a 0007 	add.w	r0, sl, r7
 8017cb0:	4427      	add	r7, r4
 8017cb2:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8017cb6:	f1bb 0f13 	cmp.w	fp, #19
 8017cba:	bfdc      	itt	le
 8017cbc:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8017cc0:	445e      	addle	r6, fp
 8017cc2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017cc6:	bfd8      	it	le
 8017cc8:	b236      	sxthle	r6, r6
 8017cca:	f7f9 f9d4 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017cce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017cd2:	2800      	cmp	r0, #0
 8017cd4:	f47f af1a 	bne.w	8017b0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8017cd8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8017cdc:	fa1f fb8b 	uxth.w	fp, fp
 8017ce0:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8017ce4:	1ab6      	subs	r6, r6, r2
 8017ce6:	4829      	ldr	r0, [pc, #164]	@ (8017d8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8017ce8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8017cec:	2e14      	cmp	r6, #20
 8017cee:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8017cf2:	6800      	ldr	r0, [r0, #0]
 8017cf4:	bfa8      	it	ge
 8017cf6:	2614      	movge	r6, #20
 8017cf8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017cfc:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017d00:	b289      	uxth	r1, r1
 8017d02:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017d06:	b2b6      	uxth	r6, r6
 8017d08:	f8d0 c000 	ldr.w	ip, [r0]
 8017d0c:	b292      	uxth	r2, r2
 8017d0e:	455e      	cmp	r6, fp
 8017d10:	bf94      	ite	ls
 8017d12:	9600      	strls	r6, [sp, #0]
 8017d14:	f8cd b000 	strhi.w	fp, [sp]
 8017d18:	b29b      	uxth	r3, r3
 8017d1a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8017d1e:	47b0      	blx	r6
 8017d20:	6823      	ldr	r3, [r4, #0]
 8017d22:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8017d26:	a907      	add	r1, sp, #28
 8017d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017d2a:	4620      	mov	r0, r4
 8017d2c:	4798      	blx	r3
 8017d2e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8017d32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8017d36:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8017d3a:	1a5b      	subs	r3, r3, r1
 8017d3c:	440a      	add	r2, r1
 8017d3e:	b21b      	sxth	r3, r3
 8017d40:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8017d44:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	f47f aeda 	bne.w	8017b02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8017d4e:	fa1f f189 	uxth.w	r1, r9
 8017d52:	4650      	mov	r0, sl
 8017d54:	f7ff f9e8 	bl	8017128 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017d58:	e6d3      	b.n	8017b02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8017d5a:	882e      	ldrh	r6, [r5, #0]
 8017d5c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017d60:	42b3      	cmp	r3, r6
 8017d62:	f67f ae98 	bls.w	8017a96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017d66:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8017d6a:	ab07      	add	r3, sp, #28
 8017d6c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017d70:	6851      	ldr	r1, [r2, #4]
 8017d72:	c303      	stmia	r3!, {r0, r1}
 8017d74:	a807      	add	r0, sp, #28
 8017d76:	f7f9 f97e 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d7a:	b920      	cbnz	r0, 8017d86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8017d7c:	6823      	ldr	r3, [r4, #0]
 8017d7e:	a907      	add	r1, sp, #28
 8017d80:	4620      	mov	r0, r4
 8017d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017d84:	4798      	blx	r3
 8017d86:	3601      	adds	r6, #1
 8017d88:	b2b6      	uxth	r6, r6
 8017d8a:	e7e7      	b.n	8017d5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8017d8c:	24026418 	.word	0x24026418

08017d90 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017d90:	4b03      	ldr	r3, [pc, #12]	@ (8017da0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017d92:	2200      	movs	r2, #0
 8017d94:	801a      	strh	r2, [r3, #0]
 8017d96:	805a      	strh	r2, [r3, #2]
 8017d98:	809a      	strh	r2, [r3, #4]
 8017d9a:	80da      	strh	r2, [r3, #6]
 8017d9c:	4770      	bx	lr
 8017d9e:	bf00      	nop
 8017da0:	24026464 	.word	0x24026464

08017da4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da8:	b09d      	sub	sp, #116	@ 0x74
 8017daa:	4606      	mov	r6, r0
 8017dac:	4614      	mov	r4, r2
 8017dae:	468a      	mov	sl, r1
 8017db0:	a803      	add	r0, sp, #12
 8017db2:	461d      	mov	r5, r3
 8017db4:	f001 f98a 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 8017db8:	6833      	ldr	r3, [r6, #0]
 8017dba:	4630      	mov	r0, r6
 8017dbc:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8017dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017dc2:	4798      	blx	r3
 8017dc4:	6833      	ldr	r3, [r6, #0]
 8017dc6:	4607      	mov	r7, r0
 8017dc8:	4630      	mov	r0, r6
 8017dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017dcc:	4798      	blx	r3
 8017dce:	462a      	mov	r2, r5
 8017dd0:	2500      	movs	r5, #0
 8017dd2:	4621      	mov	r1, r4
 8017dd4:	9000      	str	r0, [sp, #0]
 8017dd6:	463b      	mov	r3, r7
 8017dd8:	462c      	mov	r4, r5
 8017dda:	46a9      	mov	r9, r5
 8017ddc:	46a8      	mov	r8, r5
 8017dde:	a803      	add	r0, sp, #12
 8017de0:	f001 f9cf 	bl	8019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017de4:	2300      	movs	r3, #0
 8017de6:	9302      	str	r3, [sp, #8]
 8017de8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017dec:	429c      	cmp	r4, r3
 8017dee:	d002      	beq.n	8017df6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017df0:	455c      	cmp	r4, fp
 8017df2:	bf18      	it	ne
 8017df4:	4625      	movne	r5, r4
 8017df6:	ab02      	add	r3, sp, #8
 8017df8:	4632      	mov	r2, r6
 8017dfa:	4651      	mov	r1, sl
 8017dfc:	a803      	add	r0, sp, #12
 8017dfe:	f001 fcf3 	bl	80197e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017e02:	4604      	mov	r4, r0
 8017e04:	b108      	cbz	r0, 8017e0a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017e06:	280a      	cmp	r0, #10
 8017e08:	d10a      	bne.n	8017e20 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017e0a:	45c1      	cmp	r9, r8
 8017e0c:	bf38      	it	cc
 8017e0e:	46c1      	movcc	r9, r8
 8017e10:	f04f 0800 	mov.w	r8, #0
 8017e14:	2c00      	cmp	r4, #0
 8017e16:	d1e5      	bne.n	8017de4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017e18:	4648      	mov	r0, r9
 8017e1a:	b01d      	add	sp, #116	@ 0x74
 8017e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e20:	9a02      	ldr	r2, [sp, #8]
 8017e22:	2a00      	cmp	r2, #0
 8017e24:	d0de      	beq.n	8017de4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017e26:	7b57      	ldrb	r7, [r2, #13]
 8017e28:	4629      	mov	r1, r5
 8017e2a:	6833      	ldr	r3, [r6, #0]
 8017e2c:	007f      	lsls	r7, r7, #1
 8017e2e:	8894      	ldrh	r4, [r2, #4]
 8017e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e32:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8017e36:	7a97      	ldrb	r7, [r2, #10]
 8017e38:	4307      	orrs	r7, r0
 8017e3a:	4630      	mov	r0, r6
 8017e3c:	4798      	blx	r3
 8017e3e:	4438      	add	r0, r7
 8017e40:	4480      	add	r8, r0
 8017e42:	fa1f f888 	uxth.w	r8, r8
 8017e46:	e7e5      	b.n	8017e14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017e48 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017e48:	b508      	push	{r3, lr}
 8017e4a:	6803      	ldr	r3, [r0, #0]
 8017e4c:	68db      	ldr	r3, [r3, #12]
 8017e4e:	4798      	blx	r3
 8017e50:	b128      	cbz	r0, 8017e5e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017e52:	7b43      	ldrb	r3, [r0, #13]
 8017e54:	7a80      	ldrb	r0, [r0, #10]
 8017e56:	005b      	lsls	r3, r3, #1
 8017e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017e5c:	4318      	orrs	r0, r3
 8017e5e:	bd08      	pop	{r3, pc}

08017e60 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017e60:	b40e      	push	{r1, r2, r3}
 8017e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e64:	b09e      	sub	sp, #120	@ 0x78
 8017e66:	4605      	mov	r5, r0
 8017e68:	ab23      	add	r3, sp, #140	@ 0x8c
 8017e6a:	a805      	add	r0, sp, #20
 8017e6c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017e70:	9303      	str	r3, [sp, #12]
 8017e72:	f001 f92b 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 8017e76:	682b      	ldr	r3, [r5, #0]
 8017e78:	4628      	mov	r0, r5
 8017e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e7c:	4798      	blx	r3
 8017e7e:	682b      	ldr	r3, [r5, #0]
 8017e80:	4606      	mov	r6, r0
 8017e82:	4628      	mov	r0, r5
 8017e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e86:	4798      	blx	r3
 8017e88:	4633      	mov	r3, r6
 8017e8a:	4621      	mov	r1, r4
 8017e8c:	ae1e      	add	r6, sp, #120	@ 0x78
 8017e8e:	2400      	movs	r4, #0
 8017e90:	9000      	str	r0, [sp, #0]
 8017e92:	9a03      	ldr	r2, [sp, #12]
 8017e94:	a805      	add	r0, sp, #20
 8017e96:	f001 f974 	bl	8019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017e9a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017e9e:	462a      	mov	r2, r5
 8017ea0:	4633      	mov	r3, r6
 8017ea2:	4621      	mov	r1, r4
 8017ea4:	a805      	add	r0, sp, #20
 8017ea6:	f001 fc9f 	bl	80197e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017eaa:	b300      	cbz	r0, 8017eee <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017eac:	280a      	cmp	r0, #10
 8017eae:	d01a      	beq.n	8017ee6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017eb0:	9f04      	ldr	r7, [sp, #16]
 8017eb2:	b1c7      	cbz	r7, 8017ee6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017eb4:	7b78      	ldrb	r0, [r7, #13]
 8017eb6:	7a3b      	ldrb	r3, [r7, #8]
 8017eb8:	00c1      	lsls	r1, r0, #3
 8017eba:	88ea      	ldrh	r2, [r5, #6]
 8017ebc:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017ec0:	4319      	orrs	r1, r3
 8017ec2:	0643      	lsls	r3, r0, #25
 8017ec4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017ec8:	bf48      	it	mi
 8017eca:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8017ece:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8017ed2:	bf48      	it	mi
 8017ed4:	b219      	sxthmi	r1, r3
 8017ed6:	79fb      	ldrb	r3, [r7, #7]
 8017ed8:	4303      	orrs	r3, r0
 8017eda:	4413      	add	r3, r2
 8017edc:	1a5b      	subs	r3, r3, r1
 8017ede:	b21b      	sxth	r3, r3
 8017ee0:	429c      	cmp	r4, r3
 8017ee2:	bfb8      	it	lt
 8017ee4:	461c      	movlt	r4, r3
 8017ee6:	4633      	mov	r3, r6
 8017ee8:	462a      	mov	r2, r5
 8017eea:	2100      	movs	r1, #0
 8017eec:	e7da      	b.n	8017ea4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017eee:	b2a0      	uxth	r0, r4
 8017ef0:	b01e      	add	sp, #120	@ 0x78
 8017ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017ef6:	b003      	add	sp, #12
 8017ef8:	4770      	bx	lr

08017efa <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8017efa:	7a43      	ldrb	r3, [r0, #9]
 8017efc:	8880      	ldrh	r0, [r0, #4]
 8017efe:	4418      	add	r0, r3
 8017f00:	b280      	uxth	r0, r0
 8017f02:	4770      	bx	lr

08017f04 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017f04:	6803      	ldr	r3, [r0, #0]
 8017f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f08:	4718      	bx	r3

08017f0a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017f0a:	b40e      	push	{r1, r2, r3}
 8017f0c:	b570      	push	{r4, r5, r6, lr}
 8017f0e:	b09d      	sub	sp, #116	@ 0x74
 8017f10:	4604      	mov	r4, r0
 8017f12:	ab21      	add	r3, sp, #132	@ 0x84
 8017f14:	a803      	add	r0, sp, #12
 8017f16:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f1a:	9302      	str	r3, [sp, #8]
 8017f1c:	f001 f8d6 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 8017f20:	6823      	ldr	r3, [r4, #0]
 8017f22:	4620      	mov	r0, r4
 8017f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f26:	4798      	blx	r3
 8017f28:	6823      	ldr	r3, [r4, #0]
 8017f2a:	4606      	mov	r6, r0
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f30:	2401      	movs	r4, #1
 8017f32:	4798      	blx	r3
 8017f34:	4633      	mov	r3, r6
 8017f36:	9000      	str	r0, [sp, #0]
 8017f38:	4629      	mov	r1, r5
 8017f3a:	9a02      	ldr	r2, [sp, #8]
 8017f3c:	a803      	add	r0, sp, #12
 8017f3e:	f001 f920 	bl	8019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017f42:	a803      	add	r0, sp, #12
 8017f44:	f001 fd1c 	bl	8019980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017f48:	b2a3      	uxth	r3, r4
 8017f4a:	b138      	cbz	r0, 8017f5c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8017f4c:	280a      	cmp	r0, #10
 8017f4e:	a803      	add	r0, sp, #12
 8017f50:	bf04      	itt	eq
 8017f52:	3301      	addeq	r3, #1
 8017f54:	b21c      	sxtheq	r4, r3
 8017f56:	f001 fd13 	bl	8019980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017f5a:	e7f5      	b.n	8017f48 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	b01d      	add	sp, #116	@ 0x74
 8017f60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f64:	b003      	add	sp, #12
 8017f66:	4770      	bx	lr

08017f68 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017f68:	b40e      	push	{r1, r2, r3}
 8017f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f6c:	b09e      	sub	sp, #120	@ 0x78
 8017f6e:	4604      	mov	r4, r0
 8017f70:	ab23      	add	r3, sp, #140	@ 0x8c
 8017f72:	a805      	add	r0, sp, #20
 8017f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f78:	9303      	str	r3, [sp, #12]
 8017f7a:	f001 f8a7 	bl	80190cc <_ZN8touchgfx12TextProviderC1Ev>
 8017f7e:	6823      	ldr	r3, [r4, #0]
 8017f80:	4620      	mov	r0, r4
 8017f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f84:	4798      	blx	r3
 8017f86:	6823      	ldr	r3, [r4, #0]
 8017f88:	4606      	mov	r6, r0
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f8e:	4798      	blx	r3
 8017f90:	4633      	mov	r3, r6
 8017f92:	4629      	mov	r1, r5
 8017f94:	9000      	str	r0, [sp, #0]
 8017f96:	9a03      	ldr	r2, [sp, #12]
 8017f98:	a805      	add	r0, sp, #20
 8017f9a:	f001 f8f2 	bl	8019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017f9e:	ad1e      	add	r5, sp, #120	@ 0x78
 8017fa0:	2100      	movs	r1, #0
 8017fa2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8017fa6:	4622      	mov	r2, r4
 8017fa8:	a805      	add	r0, sp, #20
 8017faa:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017fae:	462b      	mov	r3, r5
 8017fb0:	f001 fc1a 	bl	80197e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017fb4:	b1d8      	cbz	r0, 8017fee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017fb6:	280a      	cmp	r0, #10
 8017fb8:	d012      	beq.n	8017fe0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017fba:	9804      	ldr	r0, [sp, #16]
 8017fbc:	b180      	cbz	r0, 8017fe0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017fbe:	7b47      	ldrb	r7, [r0, #13]
 8017fc0:	88e2      	ldrh	r2, [r4, #6]
 8017fc2:	00fb      	lsls	r3, r7, #3
 8017fc4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017fc8:	7a03      	ldrb	r3, [r0, #8]
 8017fca:	430b      	orrs	r3, r1
 8017fcc:	0679      	lsls	r1, r7, #25
 8017fce:	bf44      	itt	mi
 8017fd0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017fd4:	b21b      	sxthmi	r3, r3
 8017fd6:	1ad3      	subs	r3, r2, r3
 8017fd8:	b21b      	sxth	r3, r3
 8017fda:	429e      	cmp	r6, r3
 8017fdc:	bfa8      	it	ge
 8017fde:	461e      	movge	r6, r3
 8017fe0:	462b      	mov	r3, r5
 8017fe2:	4622      	mov	r2, r4
 8017fe4:	2100      	movs	r1, #0
 8017fe6:	a805      	add	r0, sp, #20
 8017fe8:	f001 fbfe 	bl	80197e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017fec:	e7e2      	b.n	8017fb4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8017fee:	4630      	mov	r0, r6
 8017ff0:	b01e      	add	sp, #120	@ 0x78
 8017ff2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017ff6:	b003      	add	sp, #12
 8017ff8:	4770      	bx	lr

08017ffa <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017ffa:	b513      	push	{r0, r1, r4, lr}
 8017ffc:	6803      	ldr	r3, [r0, #0]
 8017ffe:	2400      	movs	r4, #0
 8018000:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018004:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018008:	f8ad 1004 	strh.w	r1, [sp, #4]
 801800c:	4669      	mov	r1, sp
 801800e:	691b      	ldr	r3, [r3, #16]
 8018010:	9400      	str	r4, [sp, #0]
 8018012:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018016:	4798      	blx	r3
 8018018:	b002      	add	sp, #8
 801801a:	bd10      	pop	{r4, pc}

0801801c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801801c:	b538      	push	{r3, r4, r5, lr}
 801801e:	680b      	ldr	r3, [r1, #0]
 8018020:	460c      	mov	r4, r1
 8018022:	4605      	mov	r5, r0
 8018024:	68db      	ldr	r3, [r3, #12]
 8018026:	4798      	blx	r3
 8018028:	6823      	ldr	r3, [r4, #0]
 801802a:	4620      	mov	r0, r4
 801802c:	4629      	mov	r1, r5
 801802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018030:	4798      	blx	r3
 8018032:	4628      	mov	r0, r5
 8018034:	bd38      	pop	{r3, r4, r5, pc}

08018036 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018036:	b410      	push	{r4}
 8018038:	880a      	ldrh	r2, [r1, #0]
 801803a:	8884      	ldrh	r4, [r0, #4]
 801803c:	4422      	add	r2, r4
 801803e:	800a      	strh	r2, [r1, #0]
 8018040:	884a      	ldrh	r2, [r1, #2]
 8018042:	88c4      	ldrh	r4, [r0, #6]
 8018044:	4422      	add	r2, r4
 8018046:	804a      	strh	r2, [r1, #2]
 8018048:	6940      	ldr	r0, [r0, #20]
 801804a:	b120      	cbz	r0, 8018056 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801804c:	6803      	ldr	r3, [r0, #0]
 801804e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018054:	4718      	bx	r3
 8018056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801805a:	4770      	bx	lr

0801805c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801805c:	b570      	push	{r4, r5, r6, lr}
 801805e:	8882      	ldrh	r2, [r0, #4]
 8018060:	460c      	mov	r4, r1
 8018062:	880b      	ldrh	r3, [r1, #0]
 8018064:	4605      	mov	r5, r0
 8018066:	4413      	add	r3, r2
 8018068:	800b      	strh	r3, [r1, #0]
 801806a:	884b      	ldrh	r3, [r1, #2]
 801806c:	88c2      	ldrh	r2, [r0, #6]
 801806e:	4413      	add	r3, r2
 8018070:	804b      	strh	r3, [r1, #2]
 8018072:	1d01      	adds	r1, r0, #4
 8018074:	4620      	mov	r0, r4
 8018076:	f7f8 ffbb 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 801807a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801807e:	2b00      	cmp	r3, #0
 8018080:	dd0b      	ble.n	801809a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018082:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018086:	2b00      	cmp	r3, #0
 8018088:	dd07      	ble.n	801809a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801808a:	6968      	ldr	r0, [r5, #20]
 801808c:	b128      	cbz	r0, 801809a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801808e:	6803      	ldr	r3, [r0, #0]
 8018090:	4621      	mov	r1, r4
 8018092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018098:	4718      	bx	r3
 801809a:	bd70      	pop	{r4, r5, r6, pc}

0801809c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801809c:	b570      	push	{r4, r5, r6, lr}
 801809e:	8882      	ldrh	r2, [r0, #4]
 80180a0:	460c      	mov	r4, r1
 80180a2:	880b      	ldrh	r3, [r1, #0]
 80180a4:	4605      	mov	r5, r0
 80180a6:	4413      	add	r3, r2
 80180a8:	800b      	strh	r3, [r1, #0]
 80180aa:	884b      	ldrh	r3, [r1, #2]
 80180ac:	88c2      	ldrh	r2, [r0, #6]
 80180ae:	4413      	add	r3, r2
 80180b0:	804b      	strh	r3, [r1, #2]
 80180b2:	1d01      	adds	r1, r0, #4
 80180b4:	4620      	mov	r0, r4
 80180b6:	f7f8 ff9b 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 80180ba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	dd19      	ble.n	80180f6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80180c2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	dd15      	ble.n	80180f6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80180ca:	6968      	ldr	r0, [r5, #20]
 80180cc:	b128      	cbz	r0, 80180da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80180ce:	6803      	ldr	r3, [r0, #0]
 80180d0:	4621      	mov	r1, r4
 80180d2:	691b      	ldr	r3, [r3, #16]
 80180d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180d8:	4718      	bx	r3
 80180da:	4b07      	ldr	r3, [pc, #28]	@ (80180f8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	3304      	adds	r3, #4
 80180e0:	429d      	cmp	r5, r3
 80180e2:	d108      	bne.n	80180f6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80180e4:	f7fe fec6 	bl	8016e74 <_ZN8touchgfx11Application11getInstanceEv>
 80180e8:	6803      	ldr	r3, [r0, #0]
 80180ea:	6821      	ldr	r1, [r4, #0]
 80180ec:	6862      	ldr	r2, [r4, #4]
 80180ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80180f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180f4:	4718      	bx	r3
 80180f6:	bd70      	pop	{r4, r5, r6, pc}
 80180f8:	2402645c 	.word	0x2402645c

080180fc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80180fc:	b570      	push	{r4, r5, r6, lr}
 80180fe:	4604      	mov	r4, r0
 8018100:	4616      	mov	r6, r2
 8018102:	460d      	mov	r5, r1
 8018104:	b901      	cbnz	r1, 8018108 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018106:	b192      	cbz	r2, 801812e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018108:	6823      	ldr	r3, [r4, #0]
 801810a:	4620      	mov	r0, r4
 801810c:	699b      	ldr	r3, [r3, #24]
 801810e:	4798      	blx	r3
 8018110:	88e2      	ldrh	r2, [r4, #6]
 8018112:	88a1      	ldrh	r1, [r4, #4]
 8018114:	4620      	mov	r0, r4
 8018116:	4432      	add	r2, r6
 8018118:	4429      	add	r1, r5
 801811a:	b212      	sxth	r2, r2
 801811c:	b209      	sxth	r1, r1
 801811e:	f7ec fab6 	bl	800468e <_ZN8touchgfx8Drawable5setXYEss>
 8018122:	6823      	ldr	r3, [r4, #0]
 8018124:	4620      	mov	r0, r4
 8018126:	699b      	ldr	r3, [r3, #24]
 8018128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801812c:	4718      	bx	r3
 801812e:	bd70      	pop	{r4, r5, r6, pc}

08018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018130:	b510      	push	{r4, lr}
 8018132:	2300      	movs	r3, #0
 8018134:	4604      	mov	r4, r0
 8018136:	4608      	mov	r0, r1
 8018138:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801813c:	8023      	strh	r3, [r4, #0]
 801813e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018142:	8063      	strh	r3, [r4, #2]
 8018144:	6803      	ldr	r3, [r0, #0]
 8018146:	80a1      	strh	r1, [r4, #4]
 8018148:	4621      	mov	r1, r4
 801814a:	80e2      	strh	r2, [r4, #6]
 801814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801814e:	4798      	blx	r3
 8018150:	4620      	mov	r0, r4
 8018152:	bd10      	pop	{r4, pc}

08018154 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8018154:	4770      	bx	lr

08018156 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8018156:	b510      	push	{r4, lr}
 8018158:	4604      	mov	r4, r0
 801815a:	211c      	movs	r1, #28
 801815c:	f00d f9ef 	bl	802553e <_ZdlPvj>
 8018160:	4620      	mov	r0, r4
 8018162:	bd10      	pop	{r4, pc}

08018164 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8018164:	4a04      	ldr	r2, [pc, #16]	@ (8018178 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8018166:	6002      	str	r2, [r0, #0]
 8018168:	2200      	movs	r2, #0
 801816a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801816e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018172:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018176:	4770      	bx	lr
 8018178:	0802a4a0 	.word	0x0802a4a0

0801817c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018180:	4604      	mov	r4, r0
 8018182:	b087      	sub	sp, #28
 8018184:	4696      	mov	lr, r2
 8018186:	6880      	ldr	r0, [r0, #8]
 8018188:	8b22      	ldrh	r2, [r4, #24]
 801818a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801818e:	9105      	str	r1, [sp, #20]
 8018190:	1c51      	adds	r1, r2, #1
 8018192:	8321      	strh	r1, [r4, #24]
 8018194:	2101      	movs	r1, #1
 8018196:	5481      	strb	r1, [r0, r2]
 8018198:	4689      	mov	r9, r1
 801819a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801819e:	8b60      	ldrh	r0, [r4, #26]
 80181a0:	ee06 2a90 	vmov	s13, r2
 80181a4:	68e2      	ldr	r2, [r4, #12]
 80181a6:	1845      	adds	r5, r0, r1
 80181a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80181ac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80181b0:	8365      	strh	r5, [r4, #26]
 80181b2:	edc2 6a00 	vstr	s13, [r2]
 80181b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80181ba:	8b60      	ldrh	r0, [r4, #26]
 80181bc:	ee07 2a10 	vmov	s14, r2
 80181c0:	68e2      	ldr	r2, [r4, #12]
 80181c2:	1845      	adds	r5, r0, r1
 80181c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80181c8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80181cc:	8365      	strh	r5, [r4, #26]
 80181ce:	1d18      	adds	r0, r3, #4
 80181d0:	460d      	mov	r5, r1
 80181d2:	ed82 7a00 	vstr	s14, [r2]
 80181d6:	f8be 2000 	ldrh.w	r2, [lr]
 80181da:	9203      	str	r2, [sp, #12]
 80181dc:	2200      	movs	r2, #0
 80181de:	4613      	mov	r3, r2
 80181e0:	4694      	mov	ip, r2
 80181e2:	9201      	str	r2, [sp, #4]
 80181e4:	9202      	str	r2, [sp, #8]
 80181e6:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80181ea:	9e05      	ldr	r6, [sp, #20]
 80181ec:	f108 0701 	add.w	r7, r8, #1
 80181f0:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80181f4:	428e      	cmp	r6, r1
 80181f6:	b2bf      	uxth	r7, r7
 80181f8:	eb0a 0b08 	add.w	fp, sl, r8
 80181fc:	f340 80b6 	ble.w	801836c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8018200:	9b03      	ldr	r3, [sp, #12]
 8018202:	f9b0 c000 	ldrsh.w	ip, [r0]
 8018206:	fa43 fb05 	asr.w	fp, r3, r5
 801820a:	f00b 0b01 	and.w	fp, fp, #1
 801820e:	fa5f f38b 	uxtb.w	r3, fp
 8018212:	9304      	str	r3, [sp, #16]
 8018214:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018218:	f1bb 0f00 	cmp.w	fp, #0
 801821c:	d057      	beq.n	80182ce <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801821e:	ee07 ca90 	vmov	s15, ip
 8018222:	8327      	strh	r7, [r4, #24]
 8018224:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8018228:	ee07 3a90 	vmov	s15, r3
 801822c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018230:	f1b9 0f00 	cmp.w	r9, #0
 8018234:	d028      	beq.n	8018288 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8018236:	f04f 0602 	mov.w	r6, #2
 801823a:	f80a 6008 	strb.w	r6, [sl, r8]
 801823e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018242:	68e7      	ldr	r7, [r4, #12]
 8018244:	f108 0901 	add.w	r9, r8, #1
 8018248:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801824c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018250:	edc7 5a00 	vstr	s11, [r7]
 8018254:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018258:	68e7      	ldr	r7, [r4, #12]
 801825a:	f108 0901 	add.w	r9, r8, #1
 801825e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018262:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018266:	edc7 7a00 	vstr	s15, [r7]
 801826a:	3501      	adds	r5, #1
 801826c:	2d10      	cmp	r5, #16
 801826e:	d106      	bne.n	801827e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8018270:	9d02      	ldr	r5, [sp, #8]
 8018272:	3501      	adds	r5, #1
 8018274:	9502      	str	r5, [sp, #8]
 8018276:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 801827a:	9503      	str	r5, [sp, #12]
 801827c:	2500      	movs	r5, #0
 801827e:	3101      	adds	r1, #1
 8018280:	3004      	adds	r0, #4
 8018282:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8018286:	e7ae      	b.n	80181e6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8018288:	f04f 0605 	mov.w	r6, #5
 801828c:	ed9d 5a01 	vldr	s10, [sp, #4]
 8018290:	f80a 6008 	strb.w	r6, [sl, r8]
 8018294:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8018298:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801829c:	68e7      	ldr	r7, [r4, #12]
 801829e:	f108 0901 	add.w	r9, r8, #1
 80182a2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80182a6:	f8a4 901a 	strh.w	r9, [r4, #26]
 80182aa:	ed87 5a00 	vstr	s10, [r7]
 80182ae:	ee05 2a10 	vmov	s10, r2
 80182b2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80182b6:	68e7      	ldr	r7, [r4, #12]
 80182b8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80182bc:	f108 0901 	add.w	r9, r8, #1
 80182c0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80182c4:	f8a4 901a 	strh.w	r9, [r4, #26]
 80182c8:	ed87 5a00 	vstr	s10, [r7]
 80182cc:	e7b7      	b.n	801823e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 80182ce:	f1b9 0f00 	cmp.w	r9, #0
 80182d2:	d147      	bne.n	8018364 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 80182d4:	f04f 0605 	mov.w	r6, #5
 80182d8:	eddd 7a01 	vldr	s15, [sp, #4]
 80182dc:	8327      	strh	r7, [r4, #24]
 80182de:	f80a 6008 	strb.w	r6, [sl, r8]
 80182e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182e6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80182ea:	68e7      	ldr	r7, [r4, #12]
 80182ec:	f108 0901 	add.w	r9, r8, #1
 80182f0:	9e01      	ldr	r6, [sp, #4]
 80182f2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80182f6:	f8a4 901a 	strh.w	r9, [r4, #26]
 80182fa:	4466      	add	r6, ip
 80182fc:	edc7 7a00 	vstr	s15, [r7]
 8018300:	ee07 2a90 	vmov	s15, r2
 8018304:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018308:	441a      	add	r2, r3
 801830a:	68e7      	ldr	r7, [r4, #12]
 801830c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018310:	f108 0901 	add.w	r9, r8, #1
 8018314:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018318:	f8a4 901a 	strh.w	r9, [r4, #26]
 801831c:	edc7 7a00 	vstr	s15, [r7]
 8018320:	ee07 6a90 	vmov	s15, r6
 8018324:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8018328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801832c:	68e7      	ldr	r7, [r4, #12]
 801832e:	f108 0901 	add.w	r9, r8, #1
 8018332:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018336:	ee67 7a86 	vmul.f32	s15, s15, s12
 801833a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801833e:	edc7 7a00 	vstr	s15, [r7]
 8018342:	ee07 2a90 	vmov	s15, r2
 8018346:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801834a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801834e:	68e7      	ldr	r7, [r4, #12]
 8018350:	f108 0901 	add.w	r9, r8, #1
 8018354:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8018358:	ee67 7a86 	vmul.f32	s15, s15, s12
 801835c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018360:	edc7 7a00 	vstr	s15, [r7]
 8018364:	461a      	mov	r2, r3
 8018366:	f8cd c004 	str.w	ip, [sp, #4]
 801836a:	e77e      	b.n	801826a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801836c:	f1b9 0f00 	cmp.w	r9, #0
 8018370:	d028      	beq.n	80183c4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8018372:	ee07 ca90 	vmov	s15, ip
 8018376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801837a:	eef4 6a67 	vcmp.f32	s13, s15
 801837e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018382:	d108      	bne.n	8018396 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8018384:	ee07 3a90 	vmov	s15, r3
 8018388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801838c:	eeb4 7a67 	vcmp.f32	s14, s15
 8018390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018394:	d016      	beq.n	80183c4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8018396:	2302      	movs	r3, #2
 8018398:	8327      	strh	r7, [r4, #24]
 801839a:	f88b 3000 	strb.w	r3, [fp]
 801839e:	8b62      	ldrh	r2, [r4, #26]
 80183a0:	68e3      	ldr	r3, [r4, #12]
 80183a2:	1c51      	adds	r1, r2, #1
 80183a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80183a8:	8361      	strh	r1, [r4, #26]
 80183aa:	edc3 6a00 	vstr	s13, [r3]
 80183ae:	8b62      	ldrh	r2, [r4, #26]
 80183b0:	68e3      	ldr	r3, [r4, #12]
 80183b2:	1c51      	adds	r1, r2, #1
 80183b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80183b8:	8361      	strh	r1, [r4, #26]
 80183ba:	ed83 7a00 	vstr	s14, [r3]
 80183be:	b007      	add	sp, #28
 80183c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183c4:	2305      	movs	r3, #5
 80183c6:	eddd 7a01 	vldr	s15, [sp, #4]
 80183ca:	8327      	strh	r7, [r4, #24]
 80183cc:	f88b 3000 	strb.w	r3, [fp]
 80183d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80183d4:	8b61      	ldrh	r1, [r4, #26]
 80183d6:	68e3      	ldr	r3, [r4, #12]
 80183d8:	1c4d      	adds	r5, r1, #1
 80183da:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80183de:	8365      	strh	r5, [r4, #26]
 80183e0:	edc3 7a00 	vstr	s15, [r3]
 80183e4:	ee07 2a90 	vmov	s15, r2
 80183e8:	8b61      	ldrh	r1, [r4, #26]
 80183ea:	68e3      	ldr	r3, [r4, #12]
 80183ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80183f0:	1c4d      	adds	r5, r1, #1
 80183f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80183f6:	8365      	strh	r5, [r4, #26]
 80183f8:	edc3 7a00 	vstr	s15, [r3]
 80183fc:	e7cf      	b.n	801839e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08018400 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8018400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018404:	4604      	mov	r4, r0
 8018406:	b08e      	sub	sp, #56	@ 0x38
 8018408:	4699      	mov	r9, r3
 801840a:	4688      	mov	r8, r1
 801840c:	4615      	mov	r5, r2
 801840e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8018410:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8018414:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018416:	f7eb fb63 	bl	8003ae0 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801841a:	6060      	str	r0, [r4, #4]
 801841c:	f1b9 0f00 	cmp.w	r9, #0
 8018420:	f000 80e8 	beq.w	80185f4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8018424:	2800      	cmp	r0, #0
 8018426:	f000 80e5 	beq.w	80185f4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801842a:	a805      	add	r0, sp, #20
 801842c:	f000 f8f9 	bl	8018622 <_ZN8touchgfx9Matrix3x3C1Ev>
 8018430:	6833      	ldr	r3, [r6, #0]
 8018432:	4630      	mov	r0, r6
 8018434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018436:	4798      	blx	r3
 8018438:	a805      	add	r0, sp, #20
 801843a:	eef0 0a40 	vmov.f32	s1, s0
 801843e:	f000 f8f4 	bl	801862a <_ZN8touchgfx9Matrix3x35scaleEff>
 8018442:	6860      	ldr	r0, [r4, #4]
 8018444:	f1ba 0f03 	cmp.w	sl, #3
 8018448:	d83b      	bhi.n	80184c2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801844a:	e8df f00a 	tbb	[pc, sl]
 801844e:	1002      	.short	0x1002
 8018450:	9f71      	.short	0x9f71
 8018452:	6803      	ldr	r3, [r0, #0]
 8018454:	462a      	mov	r2, r5
 8018456:	4641      	mov	r1, r8
 8018458:	689b      	ldr	r3, [r3, #8]
 801845a:	4798      	blx	r3
 801845c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8018460:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8018464:	ee07 7a90 	vmov	s15, r7
 8018468:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801846c:	e026      	b.n	80184bc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801846e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8018472:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8018476:	8869      	ldrh	r1, [r5, #2]
 8018478:	1a9b      	subs	r3, r3, r2
 801847a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801847e:	aa03      	add	r2, sp, #12
 8018480:	1a5b      	subs	r3, r3, r1
 8018482:	4641      	mov	r1, r8
 8018484:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018488:	882b      	ldrh	r3, [r5, #0]
 801848a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801848e:	88ab      	ldrh	r3, [r5, #4]
 8018490:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018494:	6803      	ldr	r3, [r0, #0]
 8018496:	689b      	ldr	r3, [r3, #8]
 8018498:	4798      	blx	r3
 801849a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80185fc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801849e:	a805      	add	r0, sp, #20
 80184a0:	f000 f8e8 	bl	8018674 <_ZN8touchgfx9Matrix3x36rotateEf>
 80184a4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 80184a8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80184aa:	ee07 7a90 	vmov	s15, r7
 80184ae:	1a9b      	subs	r3, r3, r2
 80184b0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80184b4:	ee00 3a10 	vmov	s0, r3
 80184b8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80184bc:	a805      	add	r0, sp, #20
 80184be:	f000 f927 	bl	8018710 <_ZN8touchgfx9Matrix3x39translateEff>
 80184c2:	6860      	ldr	r0, [r4, #4]
 80184c4:	a905      	add	r1, sp, #20
 80184c6:	2500      	movs	r5, #0
 80184c8:	f109 0602 	add.w	r6, r9, #2
 80184cc:	6803      	ldr	r3, [r0, #0]
 80184ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80184d0:	4798      	blx	r3
 80184d2:	6860      	ldr	r0, [r4, #4]
 80184d4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80184d6:	6803      	ldr	r3, [r0, #0]
 80184d8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80184dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184de:	4798      	blx	r3
 80184e0:	6860      	ldr	r0, [r4, #4]
 80184e2:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 80184e6:	6803      	ldr	r3, [r0, #0]
 80184e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184ea:	4798      	blx	r3
 80184ec:	6860      	ldr	r0, [r4, #4]
 80184ee:	2101      	movs	r1, #1
 80184f0:	6803      	ldr	r3, [r0, #0]
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	4798      	blx	r3
 80184f6:	f8b9 7000 	ldrh.w	r7, [r9]
 80184fa:	f104 0310 	add.w	r3, r4, #16
 80184fe:	61a5      	str	r5, [r4, #24]
 8018500:	f104 0208 	add.w	r2, r4, #8
 8018504:	f104 0114 	add.w	r1, r4, #20
 8018508:	f104 000c 	add.w	r0, r4, #12
 801850c:	f7ee fc58 	bl	8006dc0 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8018510:	42af      	cmp	r7, r5
 8018512:	dd60      	ble.n	80185d6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8018514:	8831      	ldrh	r1, [r6, #0]
 8018516:	1cb2      	adds	r2, r6, #2
 8018518:	4620      	mov	r0, r4
 801851a:	3501      	adds	r5, #1
 801851c:	f101 030f 	add.w	r3, r1, #15
 8018520:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8018524:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018528:	f7ff fe28 	bl	801817c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801852c:	4606      	mov	r6, r0
 801852e:	e7ef      	b.n	8018510 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8018530:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018534:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8018538:	8829      	ldrh	r1, [r5, #0]
 801853a:	1a9b      	subs	r3, r3, r2
 801853c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018540:	aa03      	add	r2, sp, #12
 8018542:	1a5b      	subs	r3, r3, r1
 8018544:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018548:	886d      	ldrh	r5, [r5, #2]
 801854a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801854e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8018552:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018556:	1a5b      	subs	r3, r3, r1
 8018558:	4641      	mov	r1, r8
 801855a:	1b5b      	subs	r3, r3, r5
 801855c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018560:	6803      	ldr	r3, [r0, #0]
 8018562:	689b      	ldr	r3, [r3, #8]
 8018564:	4798      	blx	r3
 8018566:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8018600 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801856a:	a805      	add	r0, sp, #20
 801856c:	f000 f882 	bl	8018674 <_ZN8touchgfx9Matrix3x36rotateEf>
 8018570:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018574:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018576:	1a9b      	subs	r3, r3, r2
 8018578:	ee00 3a90 	vmov	s1, r3
 801857c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8018580:	1bdb      	subs	r3, r3, r7
 8018582:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8018586:	ee00 3a10 	vmov	s0, r3
 801858a:	e795      	b.n	80184b8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801858c:	886b      	ldrh	r3, [r5, #2]
 801858e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018592:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018596:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801859a:	8829      	ldrh	r1, [r5, #0]
 801859c:	1a9b      	subs	r3, r3, r2
 801859e:	f8ad 2012 	strh.w	r2, [sp, #18]
 80185a2:	aa03      	add	r2, sp, #12
 80185a4:	1a5b      	subs	r3, r3, r1
 80185a6:	4641      	mov	r1, r8
 80185a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80185ac:	88eb      	ldrh	r3, [r5, #6]
 80185ae:	f8ad 3010 	strh.w	r3, [sp, #16]
 80185b2:	6803      	ldr	r3, [r0, #0]
 80185b4:	689b      	ldr	r3, [r3, #8]
 80185b6:	4798      	blx	r3
 80185b8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8018604 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 80185bc:	a805      	add	r0, sp, #20
 80185be:	f000 f859 	bl	8018674 <_ZN8touchgfx9Matrix3x36rotateEf>
 80185c2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80185c6:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 80185ca:	1bdb      	subs	r3, r3, r7
 80185cc:	ee00 3a90 	vmov	s1, r3
 80185d0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80185d4:	e748      	b.n	8018468 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 80185d6:	6860      	ldr	r0, [r4, #4]
 80185d8:	2100      	movs	r1, #0
 80185da:	8b22      	ldrh	r2, [r4, #24]
 80185dc:	6803      	ldr	r3, [r0, #0]
 80185de:	9101      	str	r1, [sp, #4]
 80185e0:	8b61      	ldrh	r1, [r4, #26]
 80185e2:	9100      	str	r1, [sp, #0]
 80185e4:	6a1d      	ldr	r5, [r3, #32]
 80185e6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80185ea:	47a8      	blx	r5
 80185ec:	6860      	ldr	r0, [r4, #4]
 80185ee:	6803      	ldr	r3, [r0, #0]
 80185f0:	69db      	ldr	r3, [r3, #28]
 80185f2:	4798      	blx	r3
 80185f4:	b00e      	add	sp, #56	@ 0x38
 80185f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185fa:	bf00      	nop
 80185fc:	42b40000 	.word	0x42b40000
 8018600:	43340000 	.word	0x43340000
 8018604:	43870000 	.word	0x43870000

08018608 <_ZN8touchgfx9Matrix3x35resetEv>:
 8018608:	2300      	movs	r3, #0
 801860a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801860e:	6043      	str	r3, [r0, #4]
 8018610:	6002      	str	r2, [r0, #0]
 8018612:	6083      	str	r3, [r0, #8]
 8018614:	60c3      	str	r3, [r0, #12]
 8018616:	6102      	str	r2, [r0, #16]
 8018618:	6143      	str	r3, [r0, #20]
 801861a:	6183      	str	r3, [r0, #24]
 801861c:	61c3      	str	r3, [r0, #28]
 801861e:	6202      	str	r2, [r0, #32]
 8018620:	4770      	bx	lr

08018622 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8018622:	b508      	push	{r3, lr}
 8018624:	f7ff fff0 	bl	8018608 <_ZN8touchgfx9Matrix3x35resetEv>
 8018628:	bd08      	pop	{r3, pc}

0801862a <_ZN8touchgfx9Matrix3x35scaleEff>:
 801862a:	edd0 7a00 	vldr	s15, [r0]
 801862e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018632:	edc0 7a00 	vstr	s15, [r0]
 8018636:	edd0 7a01 	vldr	s15, [r0, #4]
 801863a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801863e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018642:	edd0 7a02 	vldr	s15, [r0, #8]
 8018646:	ee27 0a80 	vmul.f32	s0, s15, s0
 801864a:	edd0 7a03 	vldr	s15, [r0, #12]
 801864e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8018652:	ed80 0a02 	vstr	s0, [r0, #8]
 8018656:	edc0 7a03 	vstr	s15, [r0, #12]
 801865a:	edd0 7a04 	vldr	s15, [r0, #16]
 801865e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8018662:	edc0 7a04 	vstr	s15, [r0, #16]
 8018666:	edd0 7a05 	vldr	s15, [r0, #20]
 801866a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801866e:	edc0 0a05 	vstr	s1, [r0, #20]
 8018672:	4770      	bx	lr

08018674 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8018674:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8018708 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8018678:	ee20 0a27 	vmul.f32	s0, s0, s15
 801867c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801870c <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8018680:	b510      	push	{r4, lr}
 8018682:	ed2d 8b02 	vpush	{d8}
 8018686:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801868a:	4604      	mov	r4, r0
 801868c:	eeb0 0a68 	vmov.f32	s0, s17
 8018690:	f00d f88e 	bl	80257b0 <cosf>
 8018694:	eeb0 8a40 	vmov.f32	s16, s0
 8018698:	eeb0 0a68 	vmov.f32	s0, s17
 801869c:	f00c ffc4 	bl	8025628 <sinf>
 80186a0:	edd4 6a03 	vldr	s13, [r4, #12]
 80186a4:	edd4 4a00 	vldr	s9, [r4]
 80186a8:	ee60 7a66 	vnmul.f32	s15, s0, s13
 80186ac:	ed94 7a04 	vldr	s14, [r4, #16]
 80186b0:	ed94 5a01 	vldr	s10, [r4, #4]
 80186b4:	ee66 6a88 	vmul.f32	s13, s13, s16
 80186b8:	edd4 5a02 	vldr	s11, [r4, #8]
 80186bc:	eee8 7a24 	vfma.f32	s15, s16, s9
 80186c0:	eee0 6a24 	vfma.f32	s13, s0, s9
 80186c4:	edc4 7a00 	vstr	s15, [r4]
 80186c8:	ee60 7a47 	vnmul.f32	s15, s0, s14
 80186cc:	ee27 7a08 	vmul.f32	s14, s14, s16
 80186d0:	edc4 6a03 	vstr	s13, [r4, #12]
 80186d4:	eee8 7a05 	vfma.f32	s15, s16, s10
 80186d8:	eea0 7a05 	vfma.f32	s14, s0, s10
 80186dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80186e0:	edd4 7a05 	vldr	s15, [r4, #20]
 80186e4:	ed84 7a04 	vstr	s14, [r4, #16]
 80186e8:	ee20 6a67 	vnmul.f32	s12, s0, s15
 80186ec:	ee67 7a88 	vmul.f32	s15, s15, s16
 80186f0:	eea8 6a25 	vfma.f32	s12, s16, s11
 80186f4:	eee0 7a25 	vfma.f32	s15, s0, s11
 80186f8:	ecbd 8b02 	vpop	{d8}
 80186fc:	ed84 6a02 	vstr	s12, [r4, #8]
 8018700:	edc4 7a05 	vstr	s15, [r4, #20]
 8018704:	bd10      	pop	{r4, pc}
 8018706:	bf00      	nop
 8018708:	40490fdb 	.word	0x40490fdb
 801870c:	43340000 	.word	0x43340000

08018710 <_ZN8touchgfx9Matrix3x39translateEff>:
 8018710:	ed90 6a06 	vldr	s12, [r0, #24]
 8018714:	edd0 7a00 	vldr	s15, [r0]
 8018718:	edd0 6a07 	vldr	s13, [r0, #28]
 801871c:	eee6 7a00 	vfma.f32	s15, s12, s0
 8018720:	ed90 7a08 	vldr	s14, [r0, #32]
 8018724:	edc0 7a00 	vstr	s15, [r0]
 8018728:	edd0 7a01 	vldr	s15, [r0, #4]
 801872c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8018730:	edc0 7a01 	vstr	s15, [r0, #4]
 8018734:	edd0 7a02 	vldr	s15, [r0, #8]
 8018738:	eee7 7a00 	vfma.f32	s15, s14, s0
 801873c:	edc0 7a02 	vstr	s15, [r0, #8]
 8018740:	edd0 7a03 	vldr	s15, [r0, #12]
 8018744:	eee6 7a20 	vfma.f32	s15, s12, s1
 8018748:	edc0 7a03 	vstr	s15, [r0, #12]
 801874c:	edd0 7a04 	vldr	s15, [r0, #16]
 8018750:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8018754:	edc0 7a04 	vstr	s15, [r0, #16]
 8018758:	edd0 7a05 	vldr	s15, [r0, #20]
 801875c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8018760:	edc0 7a05 	vstr	s15, [r0, #20]
 8018764:	4770      	bx	lr

08018766 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8018766:	edd0 6a01 	vldr	s13, [r0, #4]
 801876a:	b084      	sub	sp, #16
 801876c:	edd0 7a04 	vldr	s15, [r0, #16]
 8018770:	ed90 7a03 	vldr	s14, [r0, #12]
 8018774:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8018778:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801877c:	edd0 6a00 	vldr	s13, [r0]
 8018780:	eee7 7a00 	vfma.f32	s15, s14, s0
 8018784:	ed90 7a05 	vldr	s14, [r0, #20]
 8018788:	eee6 0a80 	vfma.f32	s1, s13, s0
 801878c:	ed90 0a02 	vldr	s0, [r0, #8]
 8018790:	ee30 0a80 	vadd.f32	s0, s1, s0
 8018794:	ee77 0a87 	vadd.f32	s1, s15, s14
 8018798:	b004      	add	sp, #16
 801879a:	4770      	bx	lr

0801879c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801879c:	b530      	push	{r4, r5, lr}
 801879e:	8083      	strh	r3, [r0, #4]
 80187a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80187a4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80187a8:	80c3      	strh	r3, [r0, #6]
 80187aa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80187ae:	6141      	str	r1, [r0, #20]
 80187b0:	7203      	strb	r3, [r0, #8]
 80187b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80187b6:	8302      	strh	r2, [r0, #24]
 80187b8:	7243      	strb	r3, [r0, #9]
 80187ba:	7a83      	ldrb	r3, [r0, #10]
 80187bc:	f365 0306 	bfi	r3, r5, #0, #7
 80187c0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80187c4:	f365 13c7 	bfi	r3, r5, #7, #1
 80187c8:	7283      	strb	r3, [r0, #10]
 80187ca:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80187ce:	72c3      	strb	r3, [r0, #11]
 80187d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80187d4:	7303      	strb	r3, [r0, #12]
 80187d6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80187da:	81c3      	strh	r3, [r0, #14]
 80187dc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80187e0:	8203      	strh	r3, [r0, #16]
 80187e2:	4b01      	ldr	r3, [pc, #4]	@ (80187e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80187e4:	6003      	str	r3, [r0, #0]
 80187e6:	bd30      	pop	{r4, r5, pc}
 80187e8:	0802a4b4 	.word	0x0802a4b4

080187ec <_ZNK8touchgfx9ConstFont4findEt>:
 80187ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ee:	6944      	ldr	r4, [r0, #20]
 80187f0:	b3bc      	cbz	r4, 8018862 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80187f2:	88a3      	ldrh	r3, [r4, #4]
 80187f4:	8b02      	ldrh	r2, [r0, #24]
 80187f6:	1acb      	subs	r3, r1, r3
 80187f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80187fc:	d431      	bmi.n	8018862 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80187fe:	4293      	cmp	r3, r2
 8018800:	dd0c      	ble.n	801881c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018802:	230e      	movs	r3, #14
 8018804:	fb03 4302 	mla	r3, r3, r2, r4
 8018808:	889b      	ldrh	r3, [r3, #4]
 801880a:	1a5b      	subs	r3, r3, r1
 801880c:	1ad3      	subs	r3, r2, r3
 801880e:	429a      	cmp	r2, r3
 8018810:	db27      	blt.n	8018862 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018812:	2b00      	cmp	r3, #0
 8018814:	bfbc      	itt	lt
 8018816:	2302      	movlt	r3, #2
 8018818:	fb92 f3f3 	sdivlt	r3, r2, r3
 801881c:	2500      	movs	r5, #0
 801881e:	260e      	movs	r6, #14
 8018820:	4295      	cmp	r5, r2
 8018822:	dc1e      	bgt.n	8018862 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018824:	fb06 4003 	mla	r0, r6, r3, r4
 8018828:	8887      	ldrh	r7, [r0, #4]
 801882a:	42b9      	cmp	r1, r7
 801882c:	d01a      	beq.n	8018864 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801882e:	d20d      	bcs.n	801884c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018830:	1e5a      	subs	r2, r3, #1
 8018832:	4295      	cmp	r5, r2
 8018834:	dc15      	bgt.n	8018862 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018836:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801883a:	1a5b      	subs	r3, r3, r1
 801883c:	1ad3      	subs	r3, r2, r3
 801883e:	429a      	cmp	r2, r3
 8018840:	db0f      	blt.n	8018862 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018842:	429d      	cmp	r5, r3
 8018844:	ddec      	ble.n	8018820 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018846:	1953      	adds	r3, r2, r5
 8018848:	105b      	asrs	r3, r3, #1
 801884a:	e7e9      	b.n	8018820 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801884c:	1c5d      	adds	r5, r3, #1
 801884e:	42aa      	cmp	r2, r5
 8018850:	db07      	blt.n	8018862 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018852:	8a43      	ldrh	r3, [r0, #18]
 8018854:	1acb      	subs	r3, r1, r3
 8018856:	442b      	add	r3, r5
 8018858:	429d      	cmp	r5, r3
 801885a:	dc02      	bgt.n	8018862 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801885c:	429a      	cmp	r2, r3
 801885e:	dadf      	bge.n	8018820 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018860:	e7f1      	b.n	8018846 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018862:	2000      	movs	r0, #0
 8018864:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018866 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018868:	4604      	mov	r4, r0
 801886a:	4617      	mov	r7, r2
 801886c:	461e      	mov	r6, r3
 801886e:	b911      	cbnz	r1, 8018876 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018870:	2500      	movs	r5, #0
 8018872:	4628      	mov	r0, r5
 8018874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018876:	290a      	cmp	r1, #10
 8018878:	d0fa      	beq.n	8018870 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801887a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801887e:	4291      	cmp	r1, r2
 8018880:	d0f6      	beq.n	8018870 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018882:	f242 020b 	movw	r2, #8203	@ 0x200b
 8018886:	4291      	cmp	r1, r2
 8018888:	d0f2      	beq.n	8018870 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801888a:	f7ff ffaf 	bl	80187ec <_ZNK8touchgfx9ConstFont4findEt>
 801888e:	4605      	mov	r5, r0
 8018890:	b950      	cbnz	r0, 80188a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018892:	6823      	ldr	r3, [r4, #0]
 8018894:	4620      	mov	r0, r4
 8018896:	691b      	ldr	r3, [r3, #16]
 8018898:	4798      	blx	r3
 801889a:	4601      	mov	r1, r0
 801889c:	4620      	mov	r0, r4
 801889e:	f7ff ffa5 	bl	80187ec <_ZNK8touchgfx9ConstFont4findEt>
 80188a2:	4605      	mov	r5, r0
 80188a4:	2800      	cmp	r0, #0
 80188a6:	d0e3      	beq.n	8018870 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80188a8:	6823      	ldr	r3, [r4, #0]
 80188aa:	4629      	mov	r1, r5
 80188ac:	4620      	mov	r0, r4
 80188ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80188b0:	4798      	blx	r3
 80188b2:	6038      	str	r0, [r7, #0]
 80188b4:	6823      	ldr	r3, [r4, #0]
 80188b6:	4620      	mov	r0, r4
 80188b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80188ba:	4798      	blx	r3
 80188bc:	7030      	strb	r0, [r6, #0]
 80188be:	e7d8      	b.n	8018872 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080188c0 <_ZN8touchgfx4clzuEm>:
 80188c0:	4603      	mov	r3, r0
 80188c2:	b1c8      	cbz	r0, 80188f8 <_ZN8touchgfx4clzuEm+0x38>
 80188c4:	0c02      	lsrs	r2, r0, #16
 80188c6:	0412      	lsls	r2, r2, #16
 80188c8:	b9a2      	cbnz	r2, 80188f4 <_ZN8touchgfx4clzuEm+0x34>
 80188ca:	0403      	lsls	r3, r0, #16
 80188cc:	2010      	movs	r0, #16
 80188ce:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80188d2:	bf04      	itt	eq
 80188d4:	021b      	lsleq	r3, r3, #8
 80188d6:	3008      	addeq	r0, #8
 80188d8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80188dc:	bf04      	itt	eq
 80188de:	011b      	lsleq	r3, r3, #4
 80188e0:	3004      	addeq	r0, #4
 80188e2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80188e6:	bf04      	itt	eq
 80188e8:	009b      	lsleq	r3, r3, #2
 80188ea:	3002      	addeq	r0, #2
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	db04      	blt.n	80188fa <_ZN8touchgfx4clzuEm+0x3a>
 80188f0:	3001      	adds	r0, #1
 80188f2:	4770      	bx	lr
 80188f4:	2000      	movs	r0, #0
 80188f6:	e7ea      	b.n	80188ce <_ZN8touchgfx4clzuEm+0xe>
 80188f8:	2020      	movs	r0, #32
 80188fa:	4770      	bx	lr

080188fc <_ZN8touchgfx7muldivuEmmmRm>:
 80188fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018900:	460f      	mov	r7, r1
 8018902:	4615      	mov	r5, r2
 8018904:	461e      	mov	r6, r3
 8018906:	4601      	mov	r1, r0
 8018908:	b100      	cbz	r0, 801890c <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801890a:	b927      	cbnz	r7, 8018916 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801890c:	2000      	movs	r0, #0
 801890e:	6030      	str	r0, [r6, #0]
 8018910:	b002      	add	sp, #8
 8018912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018916:	f7ff ffd3 	bl	80188c0 <_ZN8touchgfx4clzuEm>
 801891a:	b980      	cbnz	r0, 801893e <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801891c:	4638      	mov	r0, r7
 801891e:	f7ff ffcf 	bl	80188c0 <_ZN8touchgfx4clzuEm>
 8018922:	2800      	cmp	r0, #0
 8018924:	dd05      	ble.n	8018932 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 8018926:	4633      	mov	r3, r6
 8018928:	462a      	mov	r2, r5
 801892a:	4638      	mov	r0, r7
 801892c:	f7ff ffe6 	bl	80188fc <_ZN8touchgfx7muldivuEmmmRm>
 8018930:	e7ee      	b.n	8018910 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8018932:	f04f 33ff 	mov.w	r3, #4294967295
 8018936:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801893a:	6033      	str	r3, [r6, #0]
 801893c:	e7e8      	b.n	8018910 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801893e:	fa37 f800 	lsrs.w	r8, r7, r0
 8018942:	fb07 f301 	mul.w	r3, r7, r1
 8018946:	d105      	bne.n	8018954 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8018948:	fbb3 f0f5 	udiv	r0, r3, r5
 801894c:	fb05 3510 	mls	r5, r5, r0, r3
 8018950:	6035      	str	r5, [r6, #0]
 8018952:	e7dd      	b.n	8018910 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8018954:	2301      	movs	r3, #1
 8018956:	fa01 fa00 	lsl.w	sl, r1, r0
 801895a:	462a      	mov	r2, r5
 801895c:	fa03 f000 	lsl.w	r0, r3, r0
 8018960:	4633      	mov	r3, r6
 8018962:	fbba f9f5 	udiv	r9, sl, r5
 8018966:	3801      	subs	r0, #1
 8018968:	fb08 f409 	mul.w	r4, r8, r9
 801896c:	4038      	ands	r0, r7
 801896e:	f7ff ffc5 	bl	80188fc <_ZN8touchgfx7muldivuEmmmRm>
 8018972:	462a      	mov	r2, r5
 8018974:	4607      	mov	r7, r0
 8018976:	ab01      	add	r3, sp, #4
 8018978:	fb05 a119 	mls	r1, r5, r9, sl
 801897c:	4640      	mov	r0, r8
 801897e:	f7ff ffbd 	bl	80188fc <_ZN8touchgfx7muldivuEmmmRm>
 8018982:	9b01      	ldr	r3, [sp, #4]
 8018984:	6832      	ldr	r2, [r6, #0]
 8018986:	441a      	add	r2, r3
 8018988:	fbb2 f3f5 	udiv	r3, r2, r5
 801898c:	441c      	add	r4, r3
 801898e:	fb05 2513 	mls	r5, r5, r3, r2
 8018992:	443c      	add	r4, r7
 8018994:	4420      	add	r0, r4
 8018996:	e7db      	b.n	8018950 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08018998 <_ZN8touchgfx6muldivElllRl>:
 8018998:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801899a:	2800      	cmp	r0, #0
 801899c:	461e      	mov	r6, r3
 801899e:	bfba      	itte	lt
 80189a0:	4240      	neglt	r0, r0
 80189a2:	f04f 34ff 	movlt.w	r4, #4294967295
 80189a6:	2401      	movge	r4, #1
 80189a8:	2900      	cmp	r1, #0
 80189aa:	bfbc      	itt	lt
 80189ac:	4249      	neglt	r1, r1
 80189ae:	4264      	neglt	r4, r4
 80189b0:	2a00      	cmp	r2, #0
 80189b2:	bfb6      	itet	lt
 80189b4:	4265      	neglt	r5, r4
 80189b6:	4625      	movge	r5, r4
 80189b8:	4252      	neglt	r2, r2
 80189ba:	4288      	cmp	r0, r1
 80189bc:	bfc2      	ittt	gt
 80189be:	4603      	movgt	r3, r0
 80189c0:	4608      	movgt	r0, r1
 80189c2:	4619      	movgt	r1, r3
 80189c4:	ab01      	add	r3, sp, #4
 80189c6:	f7ff ff99 	bl	80188fc <_ZN8touchgfx7muldivuEmmmRm>
 80189ca:	9b01      	ldr	r3, [sp, #4]
 80189cc:	4368      	muls	r0, r5
 80189ce:	435c      	muls	r4, r3
 80189d0:	6034      	str	r4, [r6, #0]
 80189d2:	b002      	add	sp, #8
 80189d4:	bd70      	pop	{r4, r5, r6, pc}

080189d6 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80189d6:	2000      	movs	r0, #0
 80189d8:	4770      	bx	lr

080189da <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80189da:	2001      	movs	r0, #1
 80189dc:	4770      	bx	lr

080189de <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80189de:	2002      	movs	r0, #2
 80189e0:	4770      	bx	lr

080189e2 <_ZN8touchgfx6ScreenD1Ev>:
 80189e2:	4770      	bx	lr

080189e4 <_ZN8touchgfx12GestureEventD1Ev>:
 80189e4:	4770      	bx	lr

080189e6 <_ZN8touchgfx9DragEventD1Ev>:
 80189e6:	4770      	bx	lr

080189e8 <_ZN8touchgfx10ClickEventD1Ev>:
 80189e8:	4770      	bx	lr

080189ea <_ZN8touchgfx10ClickEventD0Ev>:
 80189ea:	b510      	push	{r4, lr}
 80189ec:	4604      	mov	r4, r0
 80189ee:	210c      	movs	r1, #12
 80189f0:	f00c fda5 	bl	802553e <_ZdlPvj>
 80189f4:	4620      	mov	r0, r4
 80189f6:	bd10      	pop	{r4, pc}

080189f8 <_ZN8touchgfx9DragEventD0Ev>:
 80189f8:	b510      	push	{r4, lr}
 80189fa:	4604      	mov	r4, r0
 80189fc:	2110      	movs	r1, #16
 80189fe:	f00c fd9e 	bl	802553e <_ZdlPvj>
 8018a02:	4620      	mov	r0, r4
 8018a04:	bd10      	pop	{r4, pc}

08018a06 <_ZN8touchgfx12GestureEventD0Ev>:
 8018a06:	b510      	push	{r4, lr}
 8018a08:	4604      	mov	r4, r0
 8018a0a:	210c      	movs	r1, #12
 8018a0c:	f00c fd97 	bl	802553e <_ZdlPvj>
 8018a10:	4620      	mov	r0, r4
 8018a12:	bd10      	pop	{r4, pc}

08018a14 <_ZN8touchgfx6ScreenD0Ev>:
 8018a14:	b510      	push	{r4, lr}
 8018a16:	4604      	mov	r4, r0
 8018a18:	213c      	movs	r1, #60	@ 0x3c
 8018a1a:	f00c fd90 	bl	802553e <_ZdlPvj>
 8018a1e:	4620      	mov	r0, r4
 8018a20:	bd10      	pop	{r4, pc}
	...

08018a24 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018a24:	b530      	push	{r4, r5, lr}
 8018a26:	460d      	mov	r5, r1
 8018a28:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8018a2a:	b087      	sub	sp, #28
 8018a2c:	4604      	mov	r4, r0
 8018a2e:	b301      	cbz	r1, 8018a72 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018a30:	a801      	add	r0, sp, #4
 8018a32:	f7ff fb7d 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a36:	892a      	ldrh	r2, [r5, #8]
 8018a38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018a3c:	7928      	ldrb	r0, [r5, #4]
 8018a3e:	1ad2      	subs	r2, r2, r3
 8018a40:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018a42:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018a46:	441a      	add	r2, r3
 8018a48:	896b      	ldrh	r3, [r5, #10]
 8018a4a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018a4e:	f88d 0010 	strb.w	r0, [sp, #16]
 8018a52:	1b5b      	subs	r3, r3, r5
 8018a54:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8018a56:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018a58:	442b      	add	r3, r5
 8018a5a:	4d07      	ldr	r5, [pc, #28]	@ (8018a78 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018a5c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018a60:	a903      	add	r1, sp, #12
 8018a62:	9503      	str	r5, [sp, #12]
 8018a64:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018a68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018a6c:	6803      	ldr	r3, [r0, #0]
 8018a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018a70:	4798      	blx	r3
 8018a72:	b007      	add	sp, #28
 8018a74:	bd30      	pop	{r4, r5, pc}
 8018a76:	bf00      	nop
 8018a78:	0802a544 	.word	0x0802a544

08018a7c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a80:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018a82:	b08a      	sub	sp, #40	@ 0x28
 8018a84:	4604      	mov	r4, r0
 8018a86:	460d      	mov	r5, r1
 8018a88:	b113      	cbz	r3, 8018a90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018a8a:	790b      	ldrb	r3, [r1, #4]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d044      	beq.n	8018b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018a90:	f104 0804 	add.w	r8, r4, #4
 8018a94:	a803      	add	r0, sp, #12
 8018a96:	4641      	mov	r1, r8
 8018a98:	f7ff fb4a 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018a9c:	792b      	ldrb	r3, [r5, #4]
 8018a9e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018aa2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018aa6:	b983      	cbnz	r3, 8018aca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018aa8:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8018aac:	892a      	ldrh	r2, [r5, #8]
 8018aae:	88e9      	ldrh	r1, [r5, #6]
 8018ab0:	4640      	mov	r0, r8
 8018ab2:	1b92      	subs	r2, r2, r6
 8018ab4:	9301      	str	r3, [sp, #4]
 8018ab6:	1bc9      	subs	r1, r1, r7
 8018ab8:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8018abc:	b212      	sxth	r2, r2
 8018abe:	9300      	str	r3, [sp, #0]
 8018ac0:	b209      	sxth	r1, r1
 8018ac2:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8018ac6:	f7f8 f9b1 	bl	8010e2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8018aca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018acc:	b329      	cbz	r1, 8018b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018ace:	a805      	add	r0, sp, #20
 8018ad0:	f7ff fb2e 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ad4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018ad8:	792b      	ldrb	r3, [r5, #4]
 8018ada:	a907      	add	r1, sp, #28
 8018adc:	1abf      	subs	r7, r7, r2
 8018ade:	88ea      	ldrh	r2, [r5, #6]
 8018ae0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018ae2:	4417      	add	r7, r2
 8018ae4:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8018ae6:	f88d 3020 	strb.w	r3, [sp, #32]
 8018aea:	4417      	add	r7, r2
 8018aec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018af0:	1ab6      	subs	r6, r6, r2
 8018af2:	892a      	ldrh	r2, [r5, #8]
 8018af4:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8018af8:	4416      	add	r6, r2
 8018afa:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018afc:	4416      	add	r6, r2
 8018afe:	4a08      	ldr	r2, [pc, #32]	@ (8018b20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018b00:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8018b04:	2600      	movs	r6, #0
 8018b06:	9207      	str	r2, [sp, #28]
 8018b08:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8018b0c:	6803      	ldr	r3, [r0, #0]
 8018b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b10:	4798      	blx	r3
 8018b12:	792b      	ldrb	r3, [r5, #4]
 8018b14:	b10b      	cbz	r3, 8018b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018b16:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8018b1a:	b00a      	add	sp, #40	@ 0x28
 8018b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b20:	0802a51c 	.word	0x0802a51c

08018b24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b28:	460c      	mov	r4, r1
 8018b2a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8018b2c:	b088      	sub	sp, #32
 8018b2e:	4605      	mov	r5, r0
 8018b30:	2900      	cmp	r1, #0
 8018b32:	d06d      	beq.n	8018c10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018b34:	4668      	mov	r0, sp
 8018b36:	f7ff fafb 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018b3a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8018b3c:	88e3      	ldrh	r3, [r4, #6]
 8018b3e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018b42:	440b      	add	r3, r1
 8018b44:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018b48:	b21b      	sxth	r3, r3
 8018b4a:	4543      	cmp	r3, r8
 8018b4c:	db31      	blt.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b4e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018b52:	44c4      	add	ip, r8
 8018b54:	fa0f fc8c 	sxth.w	ip, ip
 8018b58:	4563      	cmp	r3, ip
 8018b5a:	da2a      	bge.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b5c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8018b5e:	8926      	ldrh	r6, [r4, #8]
 8018b60:	4416      	add	r6, r2
 8018b62:	b236      	sxth	r6, r6
 8018b64:	42be      	cmp	r6, r7
 8018b66:	db24      	blt.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b68:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018b6c:	4438      	add	r0, r7
 8018b6e:	b200      	sxth	r0, r0
 8018b70:	4286      	cmp	r6, r0
 8018b72:	da1e      	bge.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b74:	8963      	ldrh	r3, [r4, #10]
 8018b76:	4419      	add	r1, r3
 8018b78:	b209      	sxth	r1, r1
 8018b7a:	4541      	cmp	r1, r8
 8018b7c:	db08      	blt.n	8018b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018b7e:	4561      	cmp	r1, ip
 8018b80:	da06      	bge.n	8018b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018b82:	89a3      	ldrh	r3, [r4, #12]
 8018b84:	441a      	add	r2, r3
 8018b86:	b212      	sxth	r2, r2
 8018b88:	42ba      	cmp	r2, r7
 8018b8a:	db01      	blt.n	8018b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018b8c:	4282      	cmp	r2, r0
 8018b8e:	db10      	blt.n	8018bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018b90:	4b21      	ldr	r3, [pc, #132]	@ (8018c18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018b92:	a904      	add	r1, sp, #16
 8018b94:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018b96:	9304      	str	r3, [sp, #16]
 8018b98:	2302      	movs	r3, #2
 8018b9a:	f88d 3014 	strb.w	r3, [sp, #20]
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ba4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018ba8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018bac:	6803      	ldr	r3, [r0, #0]
 8018bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018bb0:	4798      	blx	r3
 8018bb2:	1d29      	adds	r1, r5, #4
 8018bb4:	a802      	add	r0, sp, #8
 8018bb6:	f7ff fabb 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018bba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018bbe:	88e0      	ldrh	r0, [r4, #6]
 8018bc0:	eba3 0808 	sub.w	r8, r3, r8
 8018bc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018bc8:	7921      	ldrb	r1, [r4, #4]
 8018bca:	fa1f f888 	uxth.w	r8, r8
 8018bce:	1bdf      	subs	r7, r3, r7
 8018bd0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8018bd4:	b2bb      	uxth	r3, r7
 8018bd6:	4440      	add	r0, r8
 8018bd8:	8922      	ldrh	r2, [r4, #8]
 8018bda:	8967      	ldrh	r7, [r4, #10]
 8018bdc:	4460      	add	r0, ip
 8018bde:	89a4      	ldrh	r4, [r4, #12]
 8018be0:	441a      	add	r2, r3
 8018be2:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8018be4:	44b8      	add	r8, r7
 8018be6:	4423      	add	r3, r4
 8018be8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018bec:	4432      	add	r2, r6
 8018bee:	44e0      	add	r8, ip
 8018bf0:	4433      	add	r3, r6
 8018bf2:	4c0a      	ldr	r4, [pc, #40]	@ (8018c1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018bf4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018bf6:	f88d 1014 	strb.w	r1, [sp, #20]
 8018bfa:	a904      	add	r1, sp, #16
 8018bfc:	9404      	str	r4, [sp, #16]
 8018bfe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018c02:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018c06:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018c0a:	6803      	ldr	r3, [r0, #0]
 8018c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018c0e:	4798      	blx	r3
 8018c10:	b008      	add	sp, #32
 8018c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c16:	bf00      	nop
 8018c18:	0802a51c 	.word	0x0802a51c
 8018c1c:	0802a530 	.word	0x0802a530

08018c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018c22:	4604      	mov	r4, r0
 8018c24:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018c28:	3201      	adds	r2, #1
 8018c2a:	d112      	bne.n	8018c52 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018c2c:	2500      	movs	r5, #0
 8018c2e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018c32:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018c36:	6803      	ldr	r3, [r0, #0]
 8018c38:	9500      	str	r5, [sp, #0]
 8018c3a:	466d      	mov	r5, sp
 8018c3c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018c40:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018c44:	4629      	mov	r1, r5
 8018c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c48:	4798      	blx	r3
 8018c4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018c4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018c52:	4620      	mov	r0, r4
 8018c54:	b003      	add	sp, #12
 8018c56:	bd30      	pop	{r4, r5, pc}

08018c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018c58:	b513      	push	{r0, r1, r4, lr}
 8018c5a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018c5e:	4604      	mov	r4, r0
 8018c60:	3301      	adds	r3, #1
 8018c62:	d109      	bne.n	8018c78 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018c64:	4601      	mov	r1, r0
 8018c66:	4668      	mov	r0, sp
 8018c68:	f7ff fa62 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018c6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018c70:	8423      	strh	r3, [r4, #32]
 8018c72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018c76:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018c78:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018c7c:	b002      	add	sp, #8
 8018c7e:	bd10      	pop	{r4, pc}

08018c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018c80:	b513      	push	{r0, r1, r4, lr}
 8018c82:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8018c86:	4604      	mov	r4, r0
 8018c88:	3301      	adds	r3, #1
 8018c8a:	d109      	bne.n	8018ca0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018c8c:	4601      	mov	r1, r0
 8018c8e:	4668      	mov	r0, sp
 8018c90:	f7ff fa4e 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018c94:	f8bd 3000 	ldrh.w	r3, [sp]
 8018c98:	8423      	strh	r3, [r4, #32]
 8018c9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018c9e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018ca0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8018ca4:	b002      	add	sp, #8
 8018ca6:	bd10      	pop	{r4, pc}

08018ca8 <_ZN8touchgfx6ScreenC1Ev>:
 8018ca8:	b570      	push	{r4, r5, r6, lr}
 8018caa:	4b17      	ldr	r3, [pc, #92]	@ (8018d08 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018cac:	4605      	mov	r5, r0
 8018cae:	4a17      	ldr	r2, [pc, #92]	@ (8018d0c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018cb0:	2101      	movs	r1, #1
 8018cb2:	f845 3b04 	str.w	r3, [r5], #4
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	6042      	str	r2, [r0, #4]
 8018cba:	4604      	mov	r4, r0
 8018cbc:	8103      	strh	r3, [r0, #8]
 8018cbe:	8143      	strh	r3, [r0, #10]
 8018cc0:	8183      	strh	r3, [r0, #12]
 8018cc2:	81c3      	strh	r3, [r0, #14]
 8018cc4:	8203      	strh	r3, [r0, #16]
 8018cc6:	8243      	strh	r3, [r0, #18]
 8018cc8:	8283      	strh	r3, [r0, #20]
 8018cca:	82c3      	strh	r3, [r0, #22]
 8018ccc:	6203      	str	r3, [r0, #32]
 8018cce:	8483      	strh	r3, [r0, #36]	@ 0x24
 8018cd0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8018cd2:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8018cd6:	6343      	str	r3, [r0, #52]	@ 0x34
 8018cd8:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8018cdc:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018ce0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018ce4:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8018ce8:	4b09      	ldr	r3, [pc, #36]	@ (8018d10 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018cea:	4628      	mov	r0, r5
 8018cec:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018cf0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8018cf2:	4a08      	ldr	r2, [pc, #32]	@ (8018d14 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018cf4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018cf8:	4798      	blx	r3
 8018cfa:	6863      	ldr	r3, [r4, #4]
 8018cfc:	4628      	mov	r0, r5
 8018cfe:	4631      	mov	r1, r6
 8018d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018d02:	4798      	blx	r3
 8018d04:	4620      	mov	r0, r4
 8018d06:	bd70      	pop	{r4, r5, r6, pc}
 8018d08:	0802a558 	.word	0x0802a558
 8018d0c:	08029e44 	.word	0x08029e44
 8018d10:	2402640e 	.word	0x2402640e
 8018d14:	2402640c 	.word	0x2402640c

08018d18 <_ZN8touchgfx6Screen4drawEv>:
 8018d18:	4b09      	ldr	r3, [pc, #36]	@ (8018d40 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018d1a:	b507      	push	{r0, r1, r2, lr}
 8018d1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d20:	2100      	movs	r1, #0
 8018d22:	4b08      	ldr	r3, [pc, #32]	@ (8018d44 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018d24:	9100      	str	r1, [sp, #0]
 8018d26:	4669      	mov	r1, sp
 8018d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d2c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018d30:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018d34:	6803      	ldr	r3, [r0, #0]
 8018d36:	689b      	ldr	r3, [r3, #8]
 8018d38:	4798      	blx	r3
 8018d3a:	b003      	add	sp, #12
 8018d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d40:	2402640c 	.word	0x2402640c
 8018d44:	2402640e 	.word	0x2402640e

08018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018d50:	b089      	sub	sp, #36	@ 0x24
 8018d52:	4680      	mov	r8, r0
 8018d54:	460c      	mov	r4, r1
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	4615      	mov	r5, r2
 8018d5a:	dd0e      	ble.n	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018d5c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	dd0a      	ble.n	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018d64:	4628      	mov	r0, r5
 8018d66:	f7ff ff5b 	bl	8018c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	f7fd ffa3 	bl	8016cb6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018d70:	69eb      	ldr	r3, [r5, #28]
 8018d72:	b928      	cbnz	r0, 8018d80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018d74:	461d      	mov	r5, r3
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d1f4      	bne.n	8018d64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018d7a:	b009      	add	sp, #36	@ 0x24
 8018d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d80:	ae04      	add	r6, sp, #16
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	f000 80b5 	beq.w	8018ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018d88:	682b      	ldr	r3, [r5, #0]
 8018d8a:	4629      	mov	r1, r5
 8018d8c:	a802      	add	r0, sp, #8
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	4798      	blx	r3
 8018d92:	4628      	mov	r0, r5
 8018d94:	f7ff ff60 	bl	8018c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018d98:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018d9c:	4407      	add	r7, r0
 8018d9e:	4628      	mov	r0, r5
 8018da0:	f7ff ff6e 	bl	8018c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018da4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018da8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018dac:	b23f      	sxth	r7, r7
 8018dae:	4418      	add	r0, r3
 8018db0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018db4:	4621      	mov	r1, r4
 8018db6:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018dba:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018dbe:	4630      	mov	r0, r6
 8018dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018dc4:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018dc8:	f7f8 f912 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 8018dcc:	4628      	mov	r0, r5
 8018dce:	f7ff ff27 	bl	8018c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018dd2:	ab06      	add	r3, sp, #24
 8018dd4:	4602      	mov	r2, r0
 8018dd6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8018dda:	e883 0003 	stmia.w	r3, {r0, r1}
 8018dde:	4611      	mov	r1, r2
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7f8 f905 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 8018de6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018dea:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018dee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018df2:	4299      	cmp	r1, r3
 8018df4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018df8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018dfc:	d10b      	bne.n	8018e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018dfe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018e02:	4552      	cmp	r2, sl
 8018e04:	d107      	bne.n	8018e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018e06:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018e0a:	455a      	cmp	r2, fp
 8018e0c:	d103      	bne.n	8018e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018e0e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018e12:	454a      	cmp	r2, r9
 8018e14:	d06d      	beq.n	8018ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018e16:	f1bb 0f00 	cmp.w	fp, #0
 8018e1a:	dd65      	ble.n	8018ee8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018e1c:	f1b9 0f00 	cmp.w	r9, #0
 8018e20:	dd62      	ble.n	8018ee8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018e22:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018e26:	fa1f f08a 	uxth.w	r0, sl
 8018e2a:	4552      	cmp	r2, sl
 8018e2c:	9000      	str	r0, [sp, #0]
 8018e2e:	da12      	bge.n	8018e56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018e30:	9301      	str	r3, [sp, #4]
 8018e32:	9b00      	ldr	r3, [sp, #0]
 8018e34:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018e38:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018e3c:	1a9a      	subs	r2, r3, r2
 8018e3e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018e42:	4631      	mov	r1, r6
 8018e44:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018e48:	4640      	mov	r0, r8
 8018e4a:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018e4e:	69ea      	ldr	r2, [r5, #28]
 8018e50:	f7ff ff7a 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018e54:	9b01      	ldr	r3, [sp, #4]
 8018e56:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018e5a:	b29f      	uxth	r7, r3
 8018e5c:	429a      	cmp	r2, r3
 8018e5e:	da0d      	bge.n	8018e7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018e60:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018e64:	1aba      	subs	r2, r7, r2
 8018e66:	f8ad a012 	strh.w	sl, [sp, #18]
 8018e6a:	4631      	mov	r1, r6
 8018e6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018e70:	4640      	mov	r0, r8
 8018e72:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018e76:	69ea      	ldr	r2, [r5, #28]
 8018e78:	f7ff ff66 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018e7c:	8822      	ldrh	r2, [r4, #0]
 8018e7e:	445f      	add	r7, fp
 8018e80:	88a3      	ldrh	r3, [r4, #4]
 8018e82:	b2bf      	uxth	r7, r7
 8018e84:	4413      	add	r3, r2
 8018e86:	b23a      	sxth	r2, r7
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	b219      	sxth	r1, r3
 8018e8c:	4291      	cmp	r1, r2
 8018e8e:	dd0d      	ble.n	8018eac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018e90:	1bdb      	subs	r3, r3, r7
 8018e92:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018e96:	f8ad a012 	strh.w	sl, [sp, #18]
 8018e9a:	4631      	mov	r1, r6
 8018e9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018ea0:	4640      	mov	r0, r8
 8018ea2:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018ea6:	69ea      	ldr	r2, [r5, #28]
 8018ea8:	f7ff ff4e 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018eac:	88e2      	ldrh	r2, [r4, #6]
 8018eae:	8863      	ldrh	r3, [r4, #2]
 8018eb0:	4413      	add	r3, r2
 8018eb2:	9a00      	ldr	r2, [sp, #0]
 8018eb4:	444a      	add	r2, r9
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	fa1f f982 	uxth.w	r9, r2
 8018ebc:	b219      	sxth	r1, r3
 8018ebe:	fa0f f289 	sxth.w	r2, r9
 8018ec2:	428a      	cmp	r2, r1
 8018ec4:	da15      	bge.n	8018ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018ec6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018eca:	eba3 0309 	sub.w	r3, r3, r9
 8018ece:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018ed2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018ed6:	4631      	mov	r1, r6
 8018ed8:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018edc:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018ee0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ee4:	69ea      	ldr	r2, [r5, #28]
 8018ee6:	e001      	b.n	8018eec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018ee8:	69ea      	ldr	r2, [r5, #28]
 8018eea:	4621      	mov	r1, r4
 8018eec:	4640      	mov	r0, r8
 8018eee:	f7ff ff2b 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018ef2:	4628      	mov	r0, r5
 8018ef4:	f7ff fe94 	bl	8018c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018ef8:	6861      	ldr	r1, [r4, #4]
 8018efa:	4602      	mov	r2, r0
 8018efc:	4633      	mov	r3, r6
 8018efe:	6820      	ldr	r0, [r4, #0]
 8018f00:	c303      	stmia	r3!, {r0, r1}
 8018f02:	4611      	mov	r1, r2
 8018f04:	4630      	mov	r0, r6
 8018f06:	f7f8 f873 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 8018f0a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	f77f af33 	ble.w	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018f14:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	f77f af2e 	ble.w	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018f1e:	4628      	mov	r0, r5
 8018f20:	f7ff fe9a 	bl	8018c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018f24:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018f28:	1a18      	subs	r0, r3, r0
 8018f2a:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018f2e:	4628      	mov	r0, r5
 8018f30:	f7ff fea6 	bl	8018c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018f34:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018f38:	4631      	mov	r1, r6
 8018f3a:	1a18      	subs	r0, r3, r0
 8018f3c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018f40:	4628      	mov	r0, r5
 8018f42:	682b      	ldr	r3, [r5, #0]
 8018f44:	689b      	ldr	r3, [r3, #8]
 8018f46:	4798      	blx	r3
 8018f48:	e717      	b.n	8018d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018f4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018f4a:	b570      	push	{r4, r5, r6, lr}
 8018f4c:	1d06      	adds	r6, r0, #4
 8018f4e:	b086      	sub	sp, #24
 8018f50:	460c      	mov	r4, r1
 8018f52:	2300      	movs	r3, #0
 8018f54:	4631      	mov	r1, r6
 8018f56:	4605      	mov	r5, r0
 8018f58:	a802      	add	r0, sp, #8
 8018f5a:	9301      	str	r3, [sp, #4]
 8018f5c:	f7ff f8e8 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018f64:	8822      	ldrh	r2, [r4, #0]
 8018f66:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018f6a:	1ad2      	subs	r2, r2, r3
 8018f6c:	8863      	ldrh	r3, [r4, #2]
 8018f6e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018f72:	1a5b      	subs	r3, r3, r1
 8018f74:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018f78:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018f7c:	aa01      	add	r2, sp, #4
 8018f7e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018f82:	4630      	mov	r0, r6
 8018f84:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018f88:	a904      	add	r1, sp, #16
 8018f8a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018f8e:	f7f8 f907 	bl	80111a0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018f92:	9a01      	ldr	r2, [sp, #4]
 8018f94:	b11a      	cbz	r2, 8018f9e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018f96:	4621      	mov	r1, r4
 8018f98:	4628      	mov	r0, r5
 8018f9a:	f7ff fed5 	bl	8018d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018f9e:	b006      	add	sp, #24
 8018fa0:	bd70      	pop	{r4, r5, r6, pc}

08018fa2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018fa2:	4602      	mov	r2, r0
 8018fa4:	b530      	push	{r4, r5, lr}
 8018fa6:	4604      	mov	r4, r0
 8018fa8:	b085      	sub	sp, #20
 8018faa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018fae:	460d      	mov	r5, r1
 8018fb0:	466b      	mov	r3, sp
 8018fb2:	6851      	ldr	r1, [r2, #4]
 8018fb4:	c303      	stmia	r3!, {r0, r1}
 8018fb6:	4629      	mov	r1, r5
 8018fb8:	4668      	mov	r0, sp
 8018fba:	f7f8 f819 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 8018fbe:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018fc2:	b12b      	cbz	r3, 8018fd0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018fc4:	4669      	mov	r1, sp
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	f7ff ffbf 	bl	8018f4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018fcc:	b005      	add	sp, #20
 8018fce:	bd30      	pop	{r4, r5, pc}
 8018fd0:	3404      	adds	r4, #4
 8018fd2:	a802      	add	r0, sp, #8
 8018fd4:	4621      	mov	r1, r4
 8018fd6:	f7ff f8ab 	bl	8018130 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018fda:	f8bd 3000 	ldrh.w	r3, [sp]
 8018fde:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018fe2:	4669      	mov	r1, sp
 8018fe4:	4620      	mov	r0, r4
 8018fe6:	1a9b      	subs	r3, r3, r2
 8018fe8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018fec:	f8ad 3000 	strh.w	r3, [sp]
 8018ff0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018ff4:	1a9b      	subs	r3, r3, r2
 8018ff6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018ffa:	f7f8 f898 	bl	801112e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018ffe:	e7e5      	b.n	8018fcc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019000:	460b      	mov	r3, r1
 8019002:	680a      	ldr	r2, [r1, #0]
 8019004:	1d01      	adds	r1, r0, #4
 8019006:	6992      	ldr	r2, [r2, #24]
 8019008:	4618      	mov	r0, r3
 801900a:	4710      	bx	r2

0801900c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801900c:	4298      	cmp	r0, r3
 801900e:	d200      	bcs.n	8019012 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8019010:	b913      	cbnz	r3, 8019018 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8019012:	440a      	add	r2, r1
 8019014:	b210      	sxth	r0, r2
 8019016:	4770      	bx	lr
 8019018:	ee07 0a90 	vmov	s15, r0
 801901c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019020:	ee07 3a90 	vmov	s15, r3
 8019024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801902c:	ee07 2a90 	vmov	s15, r2
 8019030:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019034:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019038:	ee07 1a90 	vmov	s15, r1
 801903c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019040:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019044:	ee67 5a07 	vmul.f32	s11, s14, s14
 8019048:	eee5 6a87 	vfma.f32	s13, s11, s14
 801904c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019050:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801905c:	bfcc      	ite	gt
 801905e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019062:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019066:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801906a:	ee17 3a90 	vmov	r3, s15
 801906e:	b218      	sxth	r0, r3
 8019070:	4770      	bx	lr

08019072 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8019072:	4298      	cmp	r0, r3
 8019074:	d200      	bcs.n	8019078 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8019076:	b913      	cbnz	r3, 801907e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8019078:	440a      	add	r2, r1
 801907a:	b210      	sxth	r0, r2
 801907c:	4770      	bx	lr
 801907e:	ee07 2a90 	vmov	s15, r2
 8019082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019086:	ee07 0a90 	vmov	s15, r0
 801908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019092:	ee07 3a10 	vmov	s14, r3
 8019096:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801909a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801909e:	ee07 1a90 	vmov	s15, r1
 80190a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80190ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80190b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190b6:	bfcc      	ite	gt
 80190b8:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80190bc:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80190c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80190c4:	ee17 3a90 	vmov	r3, s15
 80190c8:	b218      	sxth	r0, r3
 80190ca:	4770      	bx	lr

080190cc <_ZN8touchgfx12TextProviderC1Ev>:
 80190cc:	b538      	push	{r3, r4, r5, lr}
 80190ce:	2500      	movs	r5, #0
 80190d0:	2302      	movs	r3, #2
 80190d2:	4604      	mov	r4, r0
 80190d4:	220e      	movs	r2, #14
 80190d6:	7403      	strb	r3, [r0, #16]
 80190d8:	4629      	mov	r1, r5
 80190da:	6145      	str	r5, [r0, #20]
 80190dc:	7605      	strb	r5, [r0, #24]
 80190de:	83c5      	strh	r5, [r0, #30]
 80190e0:	8405      	strh	r5, [r0, #32]
 80190e2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80190e4:	8705      	strh	r5, [r0, #56]	@ 0x38
 80190e6:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80190e8:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80190ec:	e9c0 5500 	strd	r5, r5, [r0]
 80190f0:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80190f4:	304c      	adds	r0, #76	@ 0x4c
 80190f6:	f00d f837 	bl	8026168 <memset>
 80190fa:	2301      	movs	r3, #1
 80190fc:	4620      	mov	r0, r4
 80190fe:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8019102:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019106:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801910a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801910e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8019112:	f7ed fde3 	bl	8006cdc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019116:	4620      	mov	r0, r4
 8019118:	bd38      	pop	{r3, r4, r5, pc}

0801911a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801911a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801911c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019120:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8019122:	fab0 f080 	clz	r0, r0
 8019126:	0940      	lsrs	r0, r0, #5
 8019128:	4770      	bx	lr

0801912a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801912a:	b530      	push	{r4, r5, lr}
 801912c:	2500      	movs	r5, #0
 801912e:	2401      	movs	r4, #1
 8019130:	6843      	ldr	r3, [r0, #4]
 8019132:	b913      	cbnz	r3, 801913a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8019134:	6803      	ldr	r3, [r0, #0]
 8019136:	b313      	cbz	r3, 801917e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019138:	6043      	str	r3, [r0, #4]
 801913a:	7e03      	ldrb	r3, [r0, #24]
 801913c:	b143      	cbz	r3, 8019150 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801913e:	6943      	ldr	r3, [r0, #20]
 8019140:	b12b      	cbz	r3, 801914e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019142:	881a      	ldrh	r2, [r3, #0]
 8019144:	b11a      	cbz	r2, 801914e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019146:	1c9a      	adds	r2, r3, #2
 8019148:	6142      	str	r2, [r0, #20]
 801914a:	8818      	ldrh	r0, [r3, #0]
 801914c:	bd30      	pop	{r4, r5, pc}
 801914e:	7605      	strb	r5, [r0, #24]
 8019150:	6843      	ldr	r3, [r0, #4]
 8019152:	8819      	ldrh	r1, [r3, #0]
 8019154:	b199      	cbz	r1, 801917e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019156:	1c9a      	adds	r2, r3, #2
 8019158:	2902      	cmp	r1, #2
 801915a:	6042      	str	r2, [r0, #4]
 801915c:	d1f5      	bne.n	801914a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801915e:	7c03      	ldrb	r3, [r0, #16]
 8019160:	2b01      	cmp	r3, #1
 8019162:	d8e5      	bhi.n	8019130 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019164:	1c5a      	adds	r2, r3, #1
 8019166:	3302      	adds	r3, #2
 8019168:	7402      	strb	r2, [r0, #16]
 801916a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801916e:	6143      	str	r3, [r0, #20]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d0dd      	beq.n	8019130 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019174:	881b      	ldrh	r3, [r3, #0]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d0da      	beq.n	8019130 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801917a:	7604      	strb	r4, [r0, #24]
 801917c:	e7d8      	b.n	8019130 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801917e:	2000      	movs	r0, #0
 8019180:	e7e4      	b.n	801914c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019182:	6001      	str	r1, [r0, #0]
 8019184:	2100      	movs	r1, #0
 8019186:	b430      	push	{r4, r5}
 8019188:	6041      	str	r1, [r0, #4]
 801918a:	6815      	ldr	r5, [r2, #0]
 801918c:	6085      	str	r5, [r0, #8]
 801918e:	6852      	ldr	r2, [r2, #4]
 8019190:	6443      	str	r3, [r0, #68]	@ 0x44
 8019192:	9b02      	ldr	r3, [sp, #8]
 8019194:	60c2      	str	r2, [r0, #12]
 8019196:	7401      	strb	r1, [r0, #16]
 8019198:	6141      	str	r1, [r0, #20]
 801919a:	7601      	strb	r1, [r0, #24]
 801919c:	8701      	strh	r1, [r0, #56]	@ 0x38
 801919e:	8401      	strh	r1, [r0, #32]
 80191a0:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80191a4:	6483      	str	r3, [r0, #72]	@ 0x48
 80191a6:	bc30      	pop	{r4, r5}
 80191a8:	f7ed bd98 	b.w	8006cdc <_ZN8touchgfx12TextProvider18initializeInternalEv>

080191ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80191ac:	b408      	push	{r3}
 80191ae:	b510      	push	{r4, lr}
 80191b0:	b085      	sub	sp, #20
 80191b2:	ac07      	add	r4, sp, #28
 80191b4:	f854 3b04 	ldr.w	r3, [r4], #4
 80191b8:	9300      	str	r3, [sp, #0]
 80191ba:	4613      	mov	r3, r2
 80191bc:	4622      	mov	r2, r4
 80191be:	9403      	str	r4, [sp, #12]
 80191c0:	f7ff ffdf 	bl	8019182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80191c4:	b005      	add	sp, #20
 80191c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191ca:	b001      	add	sp, #4
 80191cc:	4770      	bx	lr

080191ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80191ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191d0:	4605      	mov	r5, r0
 80191d2:	4608      	mov	r0, r1
 80191d4:	b1f1      	cbz	r1, 8019214 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80191d6:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80191da:	460b      	mov	r3, r1
 80191dc:	f101 0708 	add.w	r7, r1, #8
 80191e0:	4622      	mov	r2, r4
 80191e2:	6818      	ldr	r0, [r3, #0]
 80191e4:	3308      	adds	r3, #8
 80191e6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80191ea:	4626      	mov	r6, r4
 80191ec:	42bb      	cmp	r3, r7
 80191ee:	c603      	stmia	r6!, {r0, r1}
 80191f0:	4634      	mov	r4, r6
 80191f2:	d1f6      	bne.n	80191e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80191f4:	6818      	ldr	r0, [r3, #0]
 80191f6:	6030      	str	r0, [r6, #0]
 80191f8:	4610      	mov	r0, r2
 80191fa:	889b      	ldrh	r3, [r3, #4]
 80191fc:	80b3      	strh	r3, [r6, #4]
 80191fe:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8019202:	015b      	lsls	r3, r3, #5
 8019204:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019208:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801920c:	430b      	orrs	r3, r1
 801920e:	425b      	negs	r3, r3
 8019210:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8019214:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019216 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019216:	b538      	push	{r3, r4, r5, lr}
 8019218:	460c      	mov	r4, r1
 801921a:	6811      	ldr	r1, [r2, #0]
 801921c:	4610      	mov	r0, r2
 801921e:	68cd      	ldr	r5, [r1, #12]
 8019220:	4619      	mov	r1, r3
 8019222:	47a8      	blx	r5
 8019224:	2800      	cmp	r0, #0
 8019226:	bf08      	it	eq
 8019228:	4620      	moveq	r0, r4
 801922a:	bd38      	pop	{r3, r4, r5, pc}

0801922c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019230:	468c      	mov	ip, r1
 8019232:	4605      	mov	r5, r0
 8019234:	4614      	mov	r4, r2
 8019236:	b942      	cbnz	r2, 801924a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8019238:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801923c:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8019240:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8019244:	4620      	mov	r0, r4
 8019246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801924a:	7b50      	ldrb	r0, [r2, #13]
 801924c:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8019250:	8893      	ldrh	r3, [r2, #4]
 8019252:	0106      	lsls	r6, r0, #4
 8019254:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8019258:	79e6      	ldrb	r6, [r4, #7]
 801925a:	4316      	orrs	r6, r2
 801925c:	185a      	adds	r2, r3, r1
 801925e:	b291      	uxth	r1, r2
 8019260:	b2b7      	uxth	r7, r6
 8019262:	291d      	cmp	r1, #29
 8019264:	d87f      	bhi.n	8019366 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8019266:	2201      	movs	r2, #1
 8019268:	10f6      	asrs	r6, r6, #3
 801926a:	408a      	lsls	r2, r1
 801926c:	498b      	ldr	r1, [pc, #556]	@ (801949c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 801926e:	420a      	tst	r2, r1
 8019270:	d12e      	bne.n	80192d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8019272:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8019276:	d076      	beq.n	8019366 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8019278:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801927c:	4623      	mov	r3, r4
 801927e:	f104 0e08 	add.w	lr, r4, #8
 8019282:	4614      	mov	r4, r2
 8019284:	6818      	ldr	r0, [r3, #0]
 8019286:	3308      	adds	r3, #8
 8019288:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801928c:	4694      	mov	ip, r2
 801928e:	4573      	cmp	r3, lr
 8019290:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019294:	4662      	mov	r2, ip
 8019296:	d1f5      	bne.n	8019284 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019298:	6818      	ldr	r0, [r3, #0]
 801929a:	f8cc 0000 	str.w	r0, [ip]
 801929e:	889b      	ldrh	r3, [r3, #4]
 80192a0:	f8ac 3004 	strh.w	r3, [ip, #4]
 80192a4:	b2b3      	uxth	r3, r6
 80192a6:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 80192aa:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 80192ae:	1aca      	subs	r2, r1, r3
 80192b0:	1bcf      	subs	r7, r1, r7
 80192b2:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80192b6:	b292      	uxth	r2, r2
 80192b8:	1afb      	subs	r3, r7, r3
 80192ba:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80192be:	10d2      	asrs	r2, r2, #3
 80192c0:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80192c4:	4302      	orrs	r2, r0
 80192c6:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80192ca:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80192ce:	e7b9      	b.n	8019244 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80192d0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80192d4:	4623      	mov	r3, r4
 80192d6:	f104 0808 	add.w	r8, r4, #8
 80192da:	4614      	mov	r4, r2
 80192dc:	6818      	ldr	r0, [r3, #0]
 80192de:	3308      	adds	r3, #8
 80192e0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80192e4:	4696      	mov	lr, r2
 80192e6:	4543      	cmp	r3, r8
 80192e8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80192ec:	4672      	mov	r2, lr
 80192ee:	d1f5      	bne.n	80192dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80192f0:	6818      	ldr	r0, [r3, #0]
 80192f2:	f8ce 0000 	str.w	r0, [lr]
 80192f6:	889b      	ldrh	r3, [r3, #4]
 80192f8:	f8ae 3004 	strh.w	r3, [lr, #4]
 80192fc:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 80192fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8019302:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8019304:	f640 6333 	movw	r3, #3635	@ 0xe33
 8019308:	4299      	cmp	r1, r3
 801930a:	d111      	bne.n	8019330 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 801930c:	f8dc 3000 	ldr.w	r3, [ip]
 8019310:	4660      	mov	r0, ip
 8019312:	68db      	ldr	r3, [r3, #12]
 8019314:	4798      	blx	r3
 8019316:	7b41      	ldrb	r1, [r0, #13]
 8019318:	00cb      	lsls	r3, r1, #3
 801931a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801931e:	7a03      	ldrb	r3, [r0, #8]
 8019320:	4313      	orrs	r3, r2
 8019322:	064a      	lsls	r2, r1, #25
 8019324:	bf44      	itt	mi
 8019326:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801932a:	b21b      	sxthmi	r3, r3
 801932c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8019330:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8019334:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8019338:	443b      	add	r3, r7
 801933a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801933e:	4433      	add	r3, r6
 8019340:	b29b      	uxth	r3, r3
 8019342:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8019346:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801934a:	10db      	asrs	r3, r3, #3
 801934c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019350:	4313      	orrs	r3, r2
 8019352:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8019356:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801935a:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801935e:	1a9b      	subs	r3, r3, r2
 8019360:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8019364:	e76e      	b.n	8019244 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8019366:	f023 0204 	bic.w	r2, r3, #4
 801936a:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801936e:	428a      	cmp	r2, r1
 8019370:	d003      	beq.n	801937a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8019372:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8019376:	4293      	cmp	r3, r2
 8019378:	d138      	bne.n	80193ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 801937a:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801937e:	4622      	mov	r2, r4
 8019380:	f104 0808 	add.w	r8, r4, #8
 8019384:	4634      	mov	r4, r6
 8019386:	6810      	ldr	r0, [r2, #0]
 8019388:	3208      	adds	r2, #8
 801938a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801938e:	46b6      	mov	lr, r6
 8019390:	4542      	cmp	r2, r8
 8019392:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019396:	4676      	mov	r6, lr
 8019398:	d1f5      	bne.n	8019386 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 801939a:	6810      	ldr	r0, [r2, #0]
 801939c:	3b01      	subs	r3, #1
 801939e:	4621      	mov	r1, r4
 80193a0:	f8ce 0000 	str.w	r0, [lr]
 80193a4:	b29b      	uxth	r3, r3
 80193a6:	8892      	ldrh	r2, [r2, #4]
 80193a8:	4628      	mov	r0, r5
 80193aa:	f8ae 2004 	strh.w	r2, [lr, #4]
 80193ae:	4662      	mov	r2, ip
 80193b0:	f7ff ff31 	bl	8019216 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80193b4:	7b41      	ldrb	r1, [r0, #13]
 80193b6:	00cb      	lsls	r3, r1, #3
 80193b8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80193bc:	7a03      	ldrb	r3, [r0, #8]
 80193be:	0648      	lsls	r0, r1, #25
 80193c0:	ea43 0302 	orr.w	r3, r3, r2
 80193c4:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80193c8:	bf44      	itt	mi
 80193ca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80193ce:	b21b      	sxthmi	r3, r3
 80193d0:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80193d4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80193d8:	005b      	lsls	r3, r3, #1
 80193da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80193de:	4313      	orrs	r3, r2
 80193e0:	115a      	asrs	r2, r3, #5
 80193e2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80193e6:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80193ea:	e047      	b.n	801947c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 80193ec:	00c2      	lsls	r2, r0, #3
 80193ee:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80193f2:	7a22      	ldrb	r2, [r4, #8]
 80193f4:	430a      	orrs	r2, r1
 80193f6:	0641      	lsls	r1, r0, #25
 80193f8:	f640 6109 	movw	r1, #3593	@ 0xe09
 80193fc:	bf44      	itt	mi
 80193fe:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8019402:	b212      	sxthmi	r2, r2
 8019404:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8019408:	f023 0210 	bic.w	r2, r3, #16
 801940c:	428a      	cmp	r2, r1
 801940e:	d003      	beq.n	8019418 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8019410:	f640 6213 	movw	r2, #3603	@ 0xe13
 8019414:	4293      	cmp	r3, r2
 8019416:	d13e      	bne.n	8019496 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8019418:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801941c:	f104 0808 	add.w	r8, r4, #8
 8019420:	4696      	mov	lr, r2
 8019422:	6820      	ldr	r0, [r4, #0]
 8019424:	3408      	adds	r4, #8
 8019426:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801942a:	4616      	mov	r6, r2
 801942c:	4544      	cmp	r4, r8
 801942e:	c603      	stmia	r6!, {r0, r1}
 8019430:	4632      	mov	r2, r6
 8019432:	d1f6      	bne.n	8019422 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8019434:	6820      	ldr	r0, [r4, #0]
 8019436:	6030      	str	r0, [r6, #0]
 8019438:	4628      	mov	r0, r5
 801943a:	88a1      	ldrh	r1, [r4, #4]
 801943c:	4674      	mov	r4, lr
 801943e:	80b1      	strh	r1, [r6, #4]
 8019440:	4671      	mov	r1, lr
 8019442:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8019446:	0076      	lsls	r6, r6, #1
 8019448:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801944c:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8019450:	4316      	orrs	r6, r2
 8019452:	f640 6213 	movw	r2, #3603	@ 0xe13
 8019456:	4293      	cmp	r3, r2
 8019458:	4662      	mov	r2, ip
 801945a:	bf16      	itet	ne
 801945c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019460:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8019464:	b29b      	uxthne	r3, r3
 8019466:	f7ff fed6 	bl	8019216 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801946a:	7b43      	ldrb	r3, [r0, #13]
 801946c:	7a82      	ldrb	r2, [r0, #10]
 801946e:	005b      	lsls	r3, r3, #1
 8019470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019474:	4313      	orrs	r3, r2
 8019476:	1af6      	subs	r6, r6, r3
 8019478:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801947c:	7b61      	ldrb	r1, [r4, #13]
 801947e:	00cb      	lsls	r3, r1, #3
 8019480:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019484:	7a23      	ldrb	r3, [r4, #8]
 8019486:	4313      	orrs	r3, r2
 8019488:	064a      	lsls	r2, r1, #25
 801948a:	bf44      	itt	mi
 801948c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019490:	b21b      	sxthmi	r3, r3
 8019492:	1bdb      	subs	r3, r3, r7
 8019494:	e719      	b.n	80192ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019496:	2300      	movs	r3, #0
 8019498:	e7a5      	b.n	80193e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801949a:	bf00      	nop
 801949c:	3fc00079 	.word	0x3fc00079

080194a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80194a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194a4:	4604      	mov	r4, r0
 80194a6:	b942      	cbnz	r2, 80194ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80194a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80194ac:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80194b0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80194b4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80194b8:	e047      	b.n	801954a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80194ba:	7b51      	ldrb	r1, [r2, #13]
 80194bc:	8893      	ldrh	r3, [r2, #4]
 80194be:	010d      	lsls	r5, r1, #4
 80194c0:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80194c4:	79d5      	ldrb	r5, [r2, #7]
 80194c6:	4305      	orrs	r5, r0
 80194c8:	2d04      	cmp	r5, #4
 80194ca:	bfcc      	ite	gt
 80194cc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80194d0:	f04f 0e01 	movle.w	lr, #1
 80194d4:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80194d8:	f200 80ab 	bhi.w	8019632 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80194dc:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80194e0:	4283      	cmp	r3, r0
 80194e2:	d216      	bcs.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194e4:	f240 605b 	movw	r0, #1627	@ 0x65b
 80194e8:	4283      	cmp	r3, r0
 80194ea:	d859      	bhi.n	80195a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80194ec:	f240 6057 	movw	r0, #1623	@ 0x657
 80194f0:	4283      	cmp	r3, r0
 80194f2:	d20e      	bcs.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80194f4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80194f8:	d24a      	bcs.n	8019590 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80194fa:	f240 604e 	movw	r0, #1614	@ 0x64e
 80194fe:	4283      	cmp	r3, r0
 8019500:	d207      	bcs.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019502:	f240 601a 	movw	r0, #1562	@ 0x61a
 8019506:	4283      	cmp	r3, r0
 8019508:	d02a      	beq.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801950a:	d821      	bhi.n	8019550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801950c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8019510:	d35b      	bcc.n	80195ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019512:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8019516:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801951a:	f040 80d0 	bne.w	80196be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801951e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8019522:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019526:	f040 80ca 	bne.w	80196be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801952a:	00cb      	lsls	r3, r1, #3
 801952c:	0649      	lsls	r1, r1, #25
 801952e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8019532:	7a13      	ldrb	r3, [r2, #8]
 8019534:	ea43 0300 	orr.w	r3, r3, r0
 8019538:	bf44      	itt	mi
 801953a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801953e:	b21b      	sxthmi	r3, r3
 8019540:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019544:	1b5d      	subs	r5, r3, r5
 8019546:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801954a:	4610      	mov	r0, r2
 801954c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019550:	f240 604b 	movw	r0, #1611	@ 0x64b
 8019554:	4283      	cmp	r3, r0
 8019556:	d338      	bcc.n	80195ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019558:	f240 604c 	movw	r0, #1612	@ 0x64c
 801955c:	4283      	cmp	r3, r0
 801955e:	d9d8      	bls.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019560:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8019564:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8019568:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801956c:	f040 80f3 	bne.w	8019756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019570:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019574:	f040 80ef 	bne.w	8019756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019578:	00cb      	lsls	r3, r1, #3
 801957a:	064e      	lsls	r6, r1, #25
 801957c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8019580:	7a13      	ldrb	r3, [r2, #8]
 8019582:	ea43 0300 	orr.w	r3, r3, r0
 8019586:	bf44      	itt	mi
 8019588:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801958c:	b21b      	sxthmi	r3, r3
 801958e:	e7d9      	b.n	8019544 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019590:	f240 6054 	movw	r0, #1620	@ 0x654
 8019594:	4283      	cmp	r3, r0
 8019596:	d8e3      	bhi.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019598:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801959c:	d9e0      	bls.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801959e:	e7b8      	b.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80195a0:	f240 6074 	movw	r0, #1652	@ 0x674
 80195a4:	4283      	cmp	r3, r0
 80195a6:	d0b4      	beq.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80195a8:	d82d      	bhi.n	8019606 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80195aa:	f240 605e 	movw	r0, #1630	@ 0x65e
 80195ae:	4283      	cmp	r3, r0
 80195b0:	d804      	bhi.n	80195bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80195b2:	f240 605d 	movw	r0, #1629	@ 0x65d
 80195b6:	4283      	cmp	r3, r0
 80195b8:	d3d2      	bcc.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80195ba:	e7aa      	b.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80195bc:	f240 605f 	movw	r0, #1631	@ 0x65f
 80195c0:	4283      	cmp	r3, r0
 80195c2:	d0cd      	beq.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80195c4:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80195c8:	d0a3      	beq.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80195ca:	00cb      	lsls	r3, r1, #3
 80195cc:	0649      	lsls	r1, r1, #25
 80195ce:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80195d2:	7a13      	ldrb	r3, [r2, #8]
 80195d4:	ea43 0300 	orr.w	r3, r3, r0
 80195d8:	bf44      	itt	mi
 80195da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80195de:	b21b      	sxthmi	r3, r3
 80195e0:	1b5d      	subs	r5, r3, r5
 80195e2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80195e6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80195ea:	7b53      	ldrb	r3, [r2, #13]
 80195ec:	015b      	lsls	r3, r3, #5
 80195ee:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80195f2:	7993      	ldrb	r3, [r2, #6]
 80195f4:	430b      	orrs	r3, r1
 80195f6:	2105      	movs	r1, #5
 80195f8:	005b      	lsls	r3, r3, #1
 80195fa:	fb93 f3f1 	sdiv	r3, r3, r1
 80195fe:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019602:	440b      	add	r3, r1
 8019604:	e756      	b.n	80194b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019606:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801960a:	4283      	cmp	r3, r0
 801960c:	d809      	bhi.n	8019622 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801960e:	f240 60df 	movw	r0, #1759	@ 0x6df
 8019612:	4283      	cmp	r3, r0
 8019614:	f4bf af7d 	bcs.w	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019618:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801961c:	2b05      	cmp	r3, #5
 801961e:	d8d4      	bhi.n	80195ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019620:	e777      	b.n	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019622:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8019626:	4283      	cmp	r3, r0
 8019628:	d09a      	beq.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801962a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801962e:	4283      	cmp	r3, r0
 8019630:	e7ca      	b.n	80195c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019632:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8019636:	d22b      	bcs.n	8019690 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019638:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801963c:	4283      	cmp	r3, r0
 801963e:	d28f      	bcs.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019640:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019644:	4283      	cmp	r3, r0
 8019646:	d816      	bhi.n	8019676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019648:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801964c:	4283      	cmp	r3, r0
 801964e:	f4bf af60 	bcs.w	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019652:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8019656:	4283      	cmp	r3, r0
 8019658:	d80a      	bhi.n	8019670 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801965a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801965e:	4283      	cmp	r3, r0
 8019660:	f4bf af57 	bcs.w	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019664:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8019668:	4283      	cmp	r3, r0
 801966a:	f43f af79 	beq.w	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801966e:	e7ac      	b.n	80195ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019670:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8019674:	e7f8      	b.n	8019668 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019676:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801967a:	4283      	cmp	r3, r0
 801967c:	d802      	bhi.n	8019684 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801967e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019682:	e798      	b.n	80195b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019684:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8019688:	4283      	cmp	r3, r0
 801968a:	f47f af42 	bne.w	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801968e:	e767      	b.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019690:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8019694:	4283      	cmp	r3, r0
 8019696:	f43f af63 	beq.w	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801969a:	d802      	bhi.n	80196a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801969c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80196a0:	e7f2      	b.n	8019688 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80196a2:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80196a6:	4283      	cmp	r3, r0
 80196a8:	d805      	bhi.n	80196b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80196aa:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80196ae:	4283      	cmp	r3, r0
 80196b0:	f4ff af2f 	bcc.w	8019512 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196b4:	e754      	b.n	8019560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80196b6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80196ba:	4283      	cmp	r3, r0
 80196bc:	e7af      	b.n	801961e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80196be:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80196c2:	4617      	mov	r7, r2
 80196c4:	f102 0808 	add.w	r8, r2, #8
 80196c8:	4666      	mov	r6, ip
 80196ca:	6838      	ldr	r0, [r7, #0]
 80196cc:	3708      	adds	r7, #8
 80196ce:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80196d2:	46e6      	mov	lr, ip
 80196d4:	4547      	cmp	r7, r8
 80196d6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80196da:	46f4      	mov	ip, lr
 80196dc:	d1f5      	bne.n	80196ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80196de:	6838      	ldr	r0, [r7, #0]
 80196e0:	f8ce 0000 	str.w	r0, [lr]
 80196e4:	88b9      	ldrh	r1, [r7, #4]
 80196e6:	f8ae 1004 	strh.w	r1, [lr, #4]
 80196ea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80196ee:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80196f2:	d009      	beq.n	8019708 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80196f4:	7b51      	ldrb	r1, [r2, #13]
 80196f6:	7992      	ldrb	r2, [r2, #6]
 80196f8:	0149      	lsls	r1, r1, #5
 80196fa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80196fe:	4311      	orrs	r1, r2
 8019700:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019704:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8019708:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801970c:	b2ad      	uxth	r5, r5
 801970e:	d00d      	beq.n	801972c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8019710:	442b      	add	r3, r5
 8019712:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8019716:	b29b      	uxth	r3, r3
 8019718:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801971c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8019720:	10db      	asrs	r3, r3, #3
 8019722:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019726:	4313      	orrs	r3, r2
 8019728:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801972c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8019730:	00cb      	lsls	r3, r1, #3
 8019732:	064f      	lsls	r7, r1, #25
 8019734:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019738:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801973c:	ea43 0302 	orr.w	r3, r3, r2
 8019740:	bf44      	itt	mi
 8019742:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8019746:	b21b      	sxthmi	r3, r3
 8019748:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801974c:	1b5b      	subs	r3, r3, r5
 801974e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8019752:	4632      	mov	r2, r6
 8019754:	e6f9      	b.n	801954a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019756:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801975a:	4617      	mov	r7, r2
 801975c:	f102 0908 	add.w	r9, r2, #8
 8019760:	4666      	mov	r6, ip
 8019762:	6838      	ldr	r0, [r7, #0]
 8019764:	3708      	adds	r7, #8
 8019766:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801976a:	46e0      	mov	r8, ip
 801976c:	454f      	cmp	r7, r9
 801976e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019772:	46c4      	mov	ip, r8
 8019774:	d1f5      	bne.n	8019762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8019776:	6838      	ldr	r0, [r7, #0]
 8019778:	f8c8 0000 	str.w	r0, [r8]
 801977c:	88b9      	ldrh	r1, [r7, #4]
 801977e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019782:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8019786:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801978a:	d009      	beq.n	80197a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801978c:	7b51      	ldrb	r1, [r2, #13]
 801978e:	7992      	ldrb	r2, [r2, #6]
 8019790:	0149      	lsls	r1, r1, #5
 8019792:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8019796:	4311      	orrs	r1, r2
 8019798:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801979c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80197a0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80197a4:	d00e      	beq.n	80197c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80197a6:	eba3 030e 	sub.w	r3, r3, lr
 80197aa:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80197ae:	b29b      	uxth	r3, r3
 80197b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80197b4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80197b8:	10db      	asrs	r3, r3, #3
 80197ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80197be:	4313      	orrs	r3, r2
 80197c0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80197c4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80197c8:	00cb      	lsls	r3, r1, #3
 80197ca:	0648      	lsls	r0, r1, #25
 80197cc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80197d0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80197d4:	ea43 0302 	orr.w	r3, r3, r2
 80197d8:	bf44      	itt	mi
 80197da:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80197de:	b21b      	sxthmi	r3, r3
 80197e0:	1b5d      	subs	r5, r3, r5
 80197e2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80197e6:	e7b4      	b.n	8019752 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080197e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80197e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197ec:	461e      	mov	r6, r3
 80197ee:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80197f0:	4604      	mov	r4, r0
 80197f2:	4617      	mov	r7, r2
 80197f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80197f8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80197fc:	f7ed fa2c 	bl	8006c58 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019800:	4605      	mov	r5, r0
 8019802:	b918      	cbnz	r0, 801980c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019804:	6030      	str	r0, [r6, #0]
 8019806:	4628      	mov	r0, r5
 8019808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	4601      	mov	r1, r0
 8019810:	4638      	mov	r0, r7
 8019812:	68db      	ldr	r3, [r3, #12]
 8019814:	4798      	blx	r3
 8019816:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801981a:	4602      	mov	r2, r0
 801981c:	6030      	str	r0, [r6, #0]
 801981e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019822:	d213      	bcs.n	801984c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019824:	4643      	mov	r3, r8
 8019826:	4639      	mov	r1, r7
 8019828:	4620      	mov	r0, r4
 801982a:	f7ff fe39 	bl	80194a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801982e:	6030      	str	r0, [r6, #0]
 8019830:	6833      	ldr	r3, [r6, #0]
 8019832:	b143      	cbz	r3, 8019846 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019834:	7b5a      	ldrb	r2, [r3, #13]
 8019836:	7a9b      	ldrb	r3, [r3, #10]
 8019838:	0052      	lsls	r2, r2, #1
 801983a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801983e:	4313      	orrs	r3, r2
 8019840:	bf0c      	ite	eq
 8019842:	2301      	moveq	r3, #1
 8019844:	2300      	movne	r3, #0
 8019846:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801984a:	e7dc      	b.n	8019806 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801984c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8019850:	b29b      	uxth	r3, r3
 8019852:	2b7f      	cmp	r3, #127	@ 0x7f
 8019854:	d804      	bhi.n	8019860 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019856:	4639      	mov	r1, r7
 8019858:	4620      	mov	r0, r4
 801985a:	f7ff fce7 	bl	801922c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801985e:	e7e6      	b.n	801982e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019860:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8019864:	2b00      	cmp	r3, #0
 8019866:	d0e3      	beq.n	8019830 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019868:	f640 1302 	movw	r3, #2306	@ 0x902
 801986c:	429d      	cmp	r5, r3
 801986e:	d1df      	bne.n	8019830 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019870:	4601      	mov	r1, r0
 8019872:	4620      	mov	r0, r4
 8019874:	f7ff fcab 	bl	80191ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019878:	e7d9      	b.n	801982e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801987a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801987a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801987e:	461e      	mov	r6, r3
 8019880:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019882:	4604      	mov	r4, r0
 8019884:	4617      	mov	r7, r2
 8019886:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801988a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801988e:	f7ed f9e3 	bl	8006c58 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019892:	4605      	mov	r5, r0
 8019894:	b918      	cbnz	r0, 801989e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8019896:	6030      	str	r0, [r6, #0]
 8019898:	4628      	mov	r0, r5
 801989a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	4601      	mov	r1, r0
 80198a2:	4638      	mov	r0, r7
 80198a4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80198a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80198ac:	47c8      	blx	r9
 80198ae:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80198b2:	4602      	mov	r2, r0
 80198b4:	6030      	str	r0, [r6, #0]
 80198b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80198ba:	d213      	bcs.n	80198e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80198bc:	4643      	mov	r3, r8
 80198be:	4639      	mov	r1, r7
 80198c0:	4620      	mov	r0, r4
 80198c2:	f7ff fded 	bl	80194a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80198c6:	6030      	str	r0, [r6, #0]
 80198c8:	6833      	ldr	r3, [r6, #0]
 80198ca:	b143      	cbz	r3, 80198de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80198cc:	7b5a      	ldrb	r2, [r3, #13]
 80198ce:	7a9b      	ldrb	r3, [r3, #10]
 80198d0:	0052      	lsls	r2, r2, #1
 80198d2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80198d6:	4313      	orrs	r3, r2
 80198d8:	bf0c      	ite	eq
 80198da:	2301      	moveq	r3, #1
 80198dc:	2300      	movne	r3, #0
 80198de:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80198e2:	e7d9      	b.n	8019898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80198e4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80198ec:	d804      	bhi.n	80198f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80198ee:	4639      	mov	r1, r7
 80198f0:	4620      	mov	r0, r4
 80198f2:	f7ff fc9b 	bl	801922c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80198f6:	e7e6      	b.n	80198c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80198f8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d0e3      	beq.n	80198c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019900:	f640 1302 	movw	r3, #2306	@ 0x902
 8019904:	429d      	cmp	r5, r3
 8019906:	d1df      	bne.n	80198c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019908:	4601      	mov	r1, r0
 801990a:	4620      	mov	r0, r4
 801990c:	f7ff fc5f 	bl	80191ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019910:	e7d9      	b.n	80198c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08019912 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019912:	b510      	push	{r4, lr}
 8019914:	4604      	mov	r4, r0
 8019916:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801991a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801991c:	b1e1      	cbz	r1, 8019958 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801991e:	2b0a      	cmp	r3, #10
 8019920:	d02d      	beq.n	801997e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8019922:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8019924:	3901      	subs	r1, #1
 8019926:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801992a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801992c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8019930:	1c51      	adds	r1, r2, #1
 8019932:	b289      	uxth	r1, r1
 8019934:	2901      	cmp	r1, #1
 8019936:	bf8a      	itet	hi
 8019938:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801993c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801993e:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8019940:	1c5a      	adds	r2, r3, #1
 8019942:	8722      	strh	r2, [r4, #56]	@ 0x38
 8019944:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019946:	4413      	add	r3, r2
 8019948:	b29b      	uxth	r3, r3
 801994a:	2b09      	cmp	r3, #9
 801994c:	bf88      	it	hi
 801994e:	3b0a      	subhi	r3, #10
 8019950:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019954:	8458      	strh	r0, [r3, #34]	@ 0x22
 8019956:	e7de      	b.n	8019916 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019958:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801995a:	2b0a      	cmp	r3, #10
 801995c:	d00f      	beq.n	801997e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801995e:	4620      	mov	r0, r4
 8019960:	f7ff fbe3 	bl	801912a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019964:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8019966:	1c5a      	adds	r2, r3, #1
 8019968:	8722      	strh	r2, [r4, #56]	@ 0x38
 801996a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801996c:	4413      	add	r3, r2
 801996e:	b29b      	uxth	r3, r3
 8019970:	2b09      	cmp	r3, #9
 8019972:	bf88      	it	hi
 8019974:	3b0a      	subhi	r3, #10
 8019976:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801997a:	8458      	strh	r0, [r3, #34]	@ 0x22
 801997c:	e7ec      	b.n	8019958 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801997e:	bd10      	pop	{r4, pc}

08019980 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019980:	b538      	push	{r3, r4, r5, lr}
 8019982:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019984:	4604      	mov	r4, r0
 8019986:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801998a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801998c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801998e:	3a01      	subs	r2, #1
 8019990:	8702      	strh	r2, [r0, #56]	@ 0x38
 8019992:	1c5a      	adds	r2, r3, #1
 8019994:	b292      	uxth	r2, r2
 8019996:	2a09      	cmp	r2, #9
 8019998:	bf8a      	itet	hi
 801999a:	3b09      	subhi	r3, #9
 801999c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801999e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80199a0:	f7ff ffb7 	bl	8019912 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80199a4:	8c23      	ldrh	r3, [r4, #32]
 80199a6:	2b01      	cmp	r3, #1
 80199a8:	bf9c      	itt	ls
 80199aa:	3301      	addls	r3, #1
 80199ac:	8423      	strhls	r3, [r4, #32]
 80199ae:	8be3      	ldrh	r3, [r4, #30]
 80199b0:	b90b      	cbnz	r3, 80199b6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80199b2:	2302      	movs	r3, #2
 80199b4:	83e3      	strh	r3, [r4, #30]
 80199b6:	8be3      	ldrh	r3, [r4, #30]
 80199b8:	4628      	mov	r0, r5
 80199ba:	3b01      	subs	r3, #1
 80199bc:	b29b      	uxth	r3, r3
 80199be:	83e3      	strh	r3, [r4, #30]
 80199c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80199c4:	8365      	strh	r5, [r4, #26]
 80199c6:	bd38      	pop	{r3, r4, r5, pc}

080199c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80199c8:	428a      	cmp	r2, r1
 80199ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199ce:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80199d0:	d932      	bls.n	8019a38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80199d2:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80199d4:	1a54      	subs	r4, r2, r1
 80199d6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80199da:	19ee      	adds	r6, r5, r7
 80199dc:	fa1f fe84 	uxth.w	lr, r4
 80199e0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80199e4:	3e01      	subs	r6, #1
 80199e6:	b2b4      	uxth	r4, r6
 80199e8:	eba4 090e 	sub.w	r9, r4, lr
 80199ec:	fa1f f989 	uxth.w	r9, r9
 80199f0:	2c09      	cmp	r4, #9
 80199f2:	4626      	mov	r6, r4
 80199f4:	bf88      	it	hi
 80199f6:	f1a4 060a 	subhi.w	r6, r4, #10
 80199fa:	f1bc 0f00 	cmp.w	ip, #0
 80199fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8019a02:	bf08      	it	eq
 8019a04:	f04f 0c02 	moveq.w	ip, #2
 8019a08:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019a0c:	b2a4      	uxth	r4, r4
 8019a0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019a12:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8019a16:	454c      	cmp	r4, r9
 8019a18:	fa1f fc8c 	uxth.w	ip, ip
 8019a1c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019a20:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8019a24:	d1e4      	bne.n	80199f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019a26:	eba5 050e 	sub.w	r5, r5, lr
 8019a2a:	eb0e 0408 	add.w	r4, lr, r8
 8019a2e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8019a32:	8705      	strh	r5, [r0, #56]	@ 0x38
 8019a34:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8019a38:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8019a3a:	250a      	movs	r5, #10
 8019a3c:	1a64      	subs	r4, r4, r1
 8019a3e:	4439      	add	r1, r7
 8019a40:	b289      	uxth	r1, r1
 8019a42:	8704      	strh	r4, [r0, #56]	@ 0x38
 8019a44:	2909      	cmp	r1, #9
 8019a46:	bf88      	it	hi
 8019a48:	390a      	subhi	r1, #10
 8019a4a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8019a4c:	b18a      	cbz	r2, 8019a72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8019a4e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8019a50:	3a01      	subs	r2, #1
 8019a52:	3101      	adds	r1, #1
 8019a54:	b292      	uxth	r2, r2
 8019a56:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019a5a:	8701      	strh	r1, [r0, #56]	@ 0x38
 8019a5c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8019a5e:	b901      	cbnz	r1, 8019a62 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8019a60:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8019a62:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8019a64:	3901      	subs	r1, #1
 8019a66:	b289      	uxth	r1, r1
 8019a68:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8019a6a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019a6e:	844c      	strh	r4, [r1, #34]	@ 0x22
 8019a70:	e7ec      	b.n	8019a4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8019a72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a76:	f7ff bf4c 	b.w	8019912 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019a7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019a7a:	b570      	push	{r4, r5, r6, lr}
 8019a7c:	2500      	movs	r5, #0
 8019a7e:	4295      	cmp	r5, r2
 8019a80:	d011      	beq.n	8019aa6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019a82:	8bc4      	ldrh	r4, [r0, #30]
 8019a84:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019a88:	4414      	add	r4, r2
 8019a8a:	3c01      	subs	r4, #1
 8019a8c:	1b64      	subs	r4, r4, r5
 8019a8e:	b2a4      	uxth	r4, r4
 8019a90:	2c01      	cmp	r4, #1
 8019a92:	bf88      	it	hi
 8019a94:	3c02      	subhi	r4, #2
 8019a96:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019a9a:	8b64      	ldrh	r4, [r4, #26]
 8019a9c:	42b4      	cmp	r4, r6
 8019a9e:	d117      	bne.n	8019ad0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019aa0:	3501      	adds	r5, #1
 8019aa2:	b2ad      	uxth	r5, r5
 8019aa4:	e7eb      	b.n	8019a7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019aa6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019aaa:	2400      	movs	r4, #0
 8019aac:	4413      	add	r3, r2
 8019aae:	b2a2      	uxth	r2, r4
 8019ab0:	429a      	cmp	r2, r3
 8019ab2:	da0f      	bge.n	8019ad4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019ab4:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8019ab6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019aba:	3401      	adds	r4, #1
 8019abc:	4432      	add	r2, r6
 8019abe:	b292      	uxth	r2, r2
 8019ac0:	2a09      	cmp	r2, #9
 8019ac2:	bf88      	it	hi
 8019ac4:	3a0a      	subhi	r2, #10
 8019ac6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019aca:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8019acc:	42aa      	cmp	r2, r5
 8019ace:	d0ee      	beq.n	8019aae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019ad0:	2000      	movs	r0, #0
 8019ad2:	bd70      	pop	{r4, r5, r6, pc}
 8019ad4:	2001      	movs	r0, #1
 8019ad6:	e7fc      	b.n	8019ad2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019ad8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019adc:	4605      	mov	r5, r0
 8019ade:	4616      	mov	r6, r2
 8019ae0:	1c8c      	adds	r4, r1, #2
 8019ae2:	8809      	ldrh	r1, [r1, #0]
 8019ae4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019ae8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019aec:	42b3      	cmp	r3, r6
 8019aee:	d124      	bne.n	8019b3a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019af0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019af4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019af8:	f001 070f 	and.w	r7, r1, #15
 8019afc:	4652      	mov	r2, sl
 8019afe:	f8cd 8000 	str.w	r8, [sp]
 8019b02:	464b      	mov	r3, r9
 8019b04:	4621      	mov	r1, r4
 8019b06:	4628      	mov	r0, r5
 8019b08:	f7ff ffb7 	bl	8019a7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019b0c:	4683      	mov	fp, r0
 8019b0e:	b168      	cbz	r0, 8019b2c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019b10:	eb0a 0109 	add.w	r1, sl, r9
 8019b14:	463a      	mov	r2, r7
 8019b16:	4628      	mov	r0, r5
 8019b18:	4441      	add	r1, r8
 8019b1a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019b1e:	4649      	mov	r1, r9
 8019b20:	f7ff ff52 	bl	80199c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019b24:	4658      	mov	r0, fp
 8019b26:	b003      	add	sp, #12
 8019b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b2c:	eb07 010a 	add.w	r1, r7, sl
 8019b30:	4449      	add	r1, r9
 8019b32:	4441      	add	r1, r8
 8019b34:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019b38:	e7d2      	b.n	8019ae0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019b3a:	f04f 0b00 	mov.w	fp, #0
 8019b3e:	e7f1      	b.n	8019b24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019b40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019b40:	b570      	push	{r4, r5, r6, lr}
 8019b42:	8810      	ldrh	r0, [r2, #0]
 8019b44:	4298      	cmp	r0, r3
 8019b46:	d817      	bhi.n	8019b78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019b48:	1e48      	subs	r0, r1, #1
 8019b4a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019b4e:	4298      	cmp	r0, r3
 8019b50:	d312      	bcc.n	8019b78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019b52:	2400      	movs	r4, #0
 8019b54:	428c      	cmp	r4, r1
 8019b56:	d20f      	bcs.n	8019b78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019b58:	1860      	adds	r0, r4, r1
 8019b5a:	1040      	asrs	r0, r0, #1
 8019b5c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019b60:	0085      	lsls	r5, r0, #2
 8019b62:	42b3      	cmp	r3, r6
 8019b64:	d902      	bls.n	8019b6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019b66:	3001      	adds	r0, #1
 8019b68:	b284      	uxth	r4, r0
 8019b6a:	e7f3      	b.n	8019b54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019b6c:	d201      	bcs.n	8019b72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019b6e:	b281      	uxth	r1, r0
 8019b70:	e7f0      	b.n	8019b54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019b72:	442a      	add	r2, r5
 8019b74:	8850      	ldrh	r0, [r2, #2]
 8019b76:	bd70      	pop	{r4, r5, r6, pc}
 8019b78:	2000      	movs	r0, #0
 8019b7a:	e7fc      	b.n	8019b76 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019b7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b80:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8019b82:	4604      	mov	r4, r0
 8019b84:	260b      	movs	r6, #11
 8019b86:	886f      	ldrh	r7, [r5, #2]
 8019b88:	087f      	lsrs	r7, r7, #1
 8019b8a:	3e01      	subs	r6, #1
 8019b8c:	d013      	beq.n	8019bb6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019b8e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019b90:	462a      	mov	r2, r5
 8019b92:	4639      	mov	r1, r7
 8019b94:	4620      	mov	r0, r4
 8019b96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019b9a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8019b9e:	4643      	mov	r3, r8
 8019ba0:	f7ff ffce 	bl	8019b40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019ba4:	b138      	cbz	r0, 8019bb6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019ba6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019baa:	4642      	mov	r2, r8
 8019bac:	4620      	mov	r0, r4
 8019bae:	f7ff ff93 	bl	8019ad8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019bb2:	2800      	cmp	r0, #0
 8019bb4:	d1e9      	bne.n	8019b8a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08019bbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019bbc:	b570      	push	{r4, r5, r6, lr}
 8019bbe:	694a      	ldr	r2, [r1, #20]
 8019bc0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8019bc2:	684b      	ldr	r3, [r1, #4]
 8019bc4:	1b54      	subs	r4, r2, r5
 8019bc6:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8019bc8:	f000 8106 	beq.w	8019dd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8019bcc:	1b9b      	subs	r3, r3, r6
 8019bce:	d003      	beq.n	8019bd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019bd0:	4363      	muls	r3, r4
 8019bd2:	2210      	movs	r2, #16
 8019bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8019bd8:	680c      	ldr	r4, [r1, #0]
 8019bda:	698a      	ldr	r2, [r1, #24]
 8019bdc:	1b65      	subs	r5, r4, r5
 8019bde:	f000 80fd 	beq.w	8019ddc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019be2:	1b92      	subs	r2, r2, r6
 8019be4:	d003      	beq.n	8019bee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019be6:	436a      	muls	r2, r5
 8019be8:	2410      	movs	r4, #16
 8019bea:	fb92 f2f4 	sdiv	r2, r2, r4
 8019bee:	1a9b      	subs	r3, r3, r2
 8019bf0:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8019e18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019bf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019bf8:	460a      	mov	r2, r1
 8019bfa:	ee07 3a90 	vmov	s15, r3
 8019bfe:	f100 040c 	add.w	r4, r0, #12
 8019c02:	4603      	mov	r3, r0
 8019c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c08:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019c0c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019c10:	eeb1 6a43 	vneg.f32	s12, s6
 8019c14:	edd2 7a02 	vldr	s15, [r2, #8]
 8019c18:	3214      	adds	r2, #20
 8019c1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019c1e:	ece3 6a01 	vstmia	r3!, {s13}
 8019c22:	429c      	cmp	r4, r3
 8019c24:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019c28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019c2c:	edc3 7a02 	vstr	s15, [r3, #8]
 8019c30:	ed52 7a01 	vldr	s15, [r2, #-4]
 8019c34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019c38:	edc3 7a05 	vstr	s15, [r3, #20]
 8019c3c:	d1ea      	bne.n	8019c14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019c3e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019c40:	698b      	ldr	r3, [r1, #24]
 8019c42:	edd0 4a02 	vldr	s9, [r0, #8]
 8019c46:	1a9b      	subs	r3, r3, r2
 8019c48:	edd0 3a00 	vldr	s7, [r0]
 8019c4c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019c50:	ee07 3a90 	vmov	s15, r3
 8019c54:	684b      	ldr	r3, [r1, #4]
 8019c56:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019c5a:	ed90 5a05 	vldr	s10, [r0, #20]
 8019c5e:	1a9b      	subs	r3, r3, r2
 8019c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c64:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019c68:	ed90 2a03 	vldr	s4, [r0, #12]
 8019c6c:	ee07 3a10 	vmov	s14, r3
 8019c70:	edd0 5a04 	vldr	s11, [r0, #16]
 8019c74:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019c78:	ed90 1a07 	vldr	s2, [r0, #28]
 8019c7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c80:	edd0 2a06 	vldr	s5, [r0, #24]
 8019c84:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019c88:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019c8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019c90:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019c94:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019c98:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019c9c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8019ca0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019ca2:	694a      	ldr	r2, [r1, #20]
 8019ca4:	1b13      	subs	r3, r2, r4
 8019ca6:	ee07 3a10 	vmov	s14, r3
 8019caa:	680b      	ldr	r3, [r1, #0]
 8019cac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019cb0:	1b1b      	subs	r3, r3, r4
 8019cb2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019cb6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019cba:	ee07 3a10 	vmov	s14, r3
 8019cbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019cc2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019cc6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019cca:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019cce:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8019cd2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019cd4:	698b      	ldr	r3, [r1, #24]
 8019cd6:	1a9b      	subs	r3, r3, r2
 8019cd8:	ee06 3a90 	vmov	s13, r3
 8019cdc:	684b      	ldr	r3, [r1, #4]
 8019cde:	1a9b      	subs	r3, r3, r2
 8019ce0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019ce4:	ee07 3a10 	vmov	s14, r3
 8019ce8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019cec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019cf0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019cf4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019cf8:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019cfc:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019d00:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8019d04:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019d06:	694a      	ldr	r2, [r1, #20]
 8019d08:	1b13      	subs	r3, r2, r4
 8019d0a:	ee07 3a10 	vmov	s14, r3
 8019d0e:	680b      	ldr	r3, [r1, #0]
 8019d10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d14:	1b1b      	subs	r3, r3, r4
 8019d16:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d1a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019d1e:	ee07 3a10 	vmov	s14, r3
 8019d22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d26:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d2a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019d2e:	edd0 5a08 	vldr	s11, [r0, #32]
 8019d32:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019d36:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019d3a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019d3e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8019d42:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019d44:	698b      	ldr	r3, [r1, #24]
 8019d46:	1a9b      	subs	r3, r3, r2
 8019d48:	ee07 3a10 	vmov	s14, r3
 8019d4c:	684b      	ldr	r3, [r1, #4]
 8019d4e:	1a9b      	subs	r3, r3, r2
 8019d50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d54:	ee01 3a90 	vmov	s3, r3
 8019d58:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019d5c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019d60:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019d64:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019d68:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019d6c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019d70:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019d74:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019d76:	694a      	ldr	r2, [r1, #20]
 8019d78:	1b13      	subs	r3, r2, r4
 8019d7a:	ee03 3a10 	vmov	s6, r3
 8019d7e:	680b      	ldr	r3, [r1, #0]
 8019d80:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019d84:	1b1b      	subs	r3, r3, r4
 8019d86:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019d8a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019d8e:	ee03 3a10 	vmov	s6, r3
 8019d92:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019d96:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019d9a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019d9e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019da2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019da6:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8019daa:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019dae:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019db6:	dd13      	ble.n	8019de0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019dbc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019dc0:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019dc2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019dc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dce:	dd15      	ble.n	8019dfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019dd4:	6403      	str	r3, [r0, #64]	@ 0x40
 8019dd6:	bd70      	pop	{r4, r5, r6, pc}
 8019dd8:	4623      	mov	r3, r4
 8019dda:	e6fd      	b.n	8019bd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019ddc:	462a      	mov	r2, r5
 8019dde:	e706      	b.n	8019bee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019de0:	d502      	bpl.n	8019de8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019de2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019de6:	e7e9      	b.n	8019dbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8019de8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019dec:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019df0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019df8:	dade      	bge.n	8019db8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8019dfa:	e7f2      	b.n	8019de2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019dfc:	d502      	bpl.n	8019e04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8019dfe:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019e02:	e7e7      	b.n	8019dd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019e04:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019e08:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019e0c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8019e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e14:	dadc      	bge.n	8019dd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019e16:	e7f2      	b.n	8019dfe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019e18:	3d800000 	.word	0x3d800000

08019e1c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e20:	2714      	movs	r7, #20
 8019e22:	435f      	muls	r7, r3
 8019e24:	eb02 0c07 	add.w	ip, r2, r7
 8019e28:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019e2c:	f115 0e0f 	adds.w	lr, r5, #15
 8019e30:	f100 80a2 	bmi.w	8019f78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019e34:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019e38:	9c08      	ldr	r4, [sp, #32]
 8019e3a:	2614      	movs	r6, #20
 8019e3c:	f8c0 e014 	str.w	lr, [r0, #20]
 8019e40:	4366      	muls	r6, r4
 8019e42:	eb02 0806 	add.w	r8, r2, r6
 8019e46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019e4a:	f115 040f 	adds.w	r4, r5, #15
 8019e4e:	f100 809f 	bmi.w	8019f90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019e52:	1124      	asrs	r4, r4, #4
 8019e54:	eba4 040e 	sub.w	r4, r4, lr
 8019e58:	6184      	str	r4, [r0, #24]
 8019e5a:	2c00      	cmp	r4, #0
 8019e5c:	f000 808a 	beq.w	8019f74 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019e60:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019e64:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019e68:	5995      	ldr	r5, [r2, r6]
 8019e6a:	eba4 0809 	sub.w	r8, r4, r9
 8019e6e:	59d4      	ldr	r4, [r2, r7]
 8019e70:	eba5 0a04 	sub.w	sl, r5, r4
 8019e74:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019e78:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8019e7c:	fb0e fe05 	mul.w	lr, lr, r5
 8019e80:	fb0a ee19 	mls	lr, sl, r9, lr
 8019e84:	fb08 e404 	mla	r4, r8, r4, lr
 8019e88:	3c01      	subs	r4, #1
 8019e8a:	19a4      	adds	r4, r4, r6
 8019e8c:	f100 808c 	bmi.w	8019fa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019e90:	fb94 fef6 	sdiv	lr, r4, r6
 8019e94:	fb06 441e 	mls	r4, r6, lr, r4
 8019e98:	f8c0 e000 	str.w	lr, [r0]
 8019e9c:	6104      	str	r4, [r0, #16]
 8019e9e:	2d00      	cmp	r5, #0
 8019ea0:	f2c0 8095 	blt.w	8019fce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019ea4:	fb95 f4f6 	sdiv	r4, r5, r6
 8019ea8:	fb06 5514 	mls	r5, r6, r4, r5
 8019eac:	6044      	str	r4, [r0, #4]
 8019eae:	6085      	str	r5, [r0, #8]
 8019eb0:	60c6      	str	r6, [r0, #12]
 8019eb2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019eb6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019eba:	6945      	ldr	r5, [r0, #20]
 8019ebc:	59d2      	ldr	r2, [r2, r7]
 8019ebe:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019ec2:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8019ff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019ec6:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8019eca:	ee07 4a10 	vmov	s14, r4
 8019ece:	6804      	ldr	r4, [r0, #0]
 8019ed0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019ed4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ed8:	ee07 2a90 	vmov	s15, r2
 8019edc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ee4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019ee8:	edd3 6a00 	vldr	s13, [r3]
 8019eec:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019ef0:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8019ef4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019ef8:	edc0 6a07 	vstr	s13, [r0, #28]
 8019efc:	edd0 6a01 	vldr	s13, [r0, #4]
 8019f00:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8019f04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019f08:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8019f0c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019f10:	ed80 6a08 	vstr	s12, [r0, #32]
 8019f14:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8019f16:	6242      	str	r2, [r0, #36]	@ 0x24
 8019f18:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8019f1c:	ed93 6a03 	vldr	s12, [r3, #12]
 8019f20:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019f24:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019f28:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019f2c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8019f30:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019f34:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8019f38:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019f3c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8019f40:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019f42:	6302      	str	r2, [r0, #48]	@ 0x30
 8019f44:	ed93 6a06 	vldr	s12, [r3, #24]
 8019f48:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8019f4c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019f50:	eeb0 7a46 	vmov.f32	s14, s12
 8019f54:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8019f58:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019f5c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019f60:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8019f64:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8019f68:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019f6c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8019f70:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8019f72:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f78:	2410      	movs	r4, #16
 8019f7a:	f1c5 0501 	rsb	r5, r5, #1
 8019f7e:	fb9e fef4 	sdiv	lr, lr, r4
 8019f82:	f015 050f 	ands.w	r5, r5, #15
 8019f86:	bf18      	it	ne
 8019f88:	2501      	movne	r5, #1
 8019f8a:	ebae 0e05 	sub.w	lr, lr, r5
 8019f8e:	e753      	b.n	8019e38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019f90:	f04f 0910 	mov.w	r9, #16
 8019f94:	f1c5 0501 	rsb	r5, r5, #1
 8019f98:	fb94 f4f9 	sdiv	r4, r4, r9
 8019f9c:	f015 050f 	ands.w	r5, r5, #15
 8019fa0:	bf18      	it	ne
 8019fa2:	2501      	movne	r5, #1
 8019fa4:	1b64      	subs	r4, r4, r5
 8019fa6:	e755      	b.n	8019e54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8019fa8:	4264      	negs	r4, r4
 8019faa:	fb94 fef6 	sdiv	lr, r4, r6
 8019fae:	f1ce 0800 	rsb	r8, lr, #0
 8019fb2:	fb06 441e 	mls	r4, r6, lr, r4
 8019fb6:	f8c0 8000 	str.w	r8, [r0]
 8019fba:	6104      	str	r4, [r0, #16]
 8019fbc:	2c00      	cmp	r4, #0
 8019fbe:	f43f af6e 	beq.w	8019e9e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019fc2:	ea6f 0e0e 	mvn.w	lr, lr
 8019fc6:	1b34      	subs	r4, r6, r4
 8019fc8:	f8c0 e000 	str.w	lr, [r0]
 8019fcc:	e766      	b.n	8019e9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8019fce:	426d      	negs	r5, r5
 8019fd0:	fb95 f4f6 	sdiv	r4, r5, r6
 8019fd4:	f1c4 0e00 	rsb	lr, r4, #0
 8019fd8:	fb06 5514 	mls	r5, r6, r4, r5
 8019fdc:	f8c0 e004 	str.w	lr, [r0, #4]
 8019fe0:	6085      	str	r5, [r0, #8]
 8019fe2:	2d00      	cmp	r5, #0
 8019fe4:	f43f af64 	beq.w	8019eb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019fe8:	43e4      	mvns	r4, r4
 8019fea:	1b75      	subs	r5, r6, r5
 8019fec:	6044      	str	r4, [r0, #4]
 8019fee:	e75e      	b.n	8019eae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019ff0:	3d800000 	.word	0x3d800000

08019ff4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8019ff4:	4602      	mov	r2, r0
 8019ff6:	b148      	cbz	r0, 801a00c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	b298      	uxth	r0, r3
 8019ffc:	3301      	adds	r3, #1
 8019ffe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a002:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a006:	2900      	cmp	r1, #0
 801a008:	d1f7      	bne.n	8019ffa <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a00a:	4770      	bx	lr
 801a00c:	4770      	bx	lr

0801a00e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a00e:	b530      	push	{r4, r5, lr}
 801a010:	4604      	mov	r4, r0
 801a012:	b159      	cbz	r1, 801a02c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a014:	b148      	cbz	r0, 801a02a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a016:	2300      	movs	r3, #0
 801a018:	b298      	uxth	r0, r3
 801a01a:	4282      	cmp	r2, r0
 801a01c:	d905      	bls.n	801a02a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a01e:	5ccd      	ldrb	r5, [r1, r3]
 801a020:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a024:	3301      	adds	r3, #1
 801a026:	2d00      	cmp	r5, #0
 801a028:	d1f6      	bne.n	801a018 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a02a:	bd30      	pop	{r4, r5, pc}
 801a02c:	4608      	mov	r0, r1
 801a02e:	e7fc      	b.n	801a02a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a030 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801a030:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a032:	b08b      	sub	sp, #44	@ 0x2c
 801a034:	468c      	mov	ip, r1
 801a036:	4604      	mov	r4, r0
 801a038:	2100      	movs	r1, #0
 801a03a:	261f      	movs	r6, #31
 801a03c:	af01      	add	r7, sp, #4
 801a03e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a042:	1e71      	subs	r1, r6, #1
 801a044:	fb94 fef3 	sdiv	lr, r4, r3
 801a048:	fb03 441e 	mls	r4, r3, lr, r4
 801a04c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a050:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a054:	b2ec      	uxtb	r4, r5
 801a056:	2d09      	cmp	r5, #9
 801a058:	bfd4      	ite	le
 801a05a:	3430      	addle	r4, #48	@ 0x30
 801a05c:	3457      	addgt	r4, #87	@ 0x57
 801a05e:	b2e4      	uxtb	r4, r4
 801a060:	55bc      	strb	r4, [r7, r6]
 801a062:	4674      	mov	r4, lr
 801a064:	b974      	cbnz	r4, 801a084 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801a066:	2800      	cmp	r0, #0
 801a068:	da05      	bge.n	801a076 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801a06a:	ab0a      	add	r3, sp, #40	@ 0x28
 801a06c:	4419      	add	r1, r3
 801a06e:	232d      	movs	r3, #45	@ 0x2d
 801a070:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a074:	1eb1      	subs	r1, r6, #2
 801a076:	3101      	adds	r1, #1
 801a078:	4660      	mov	r0, ip
 801a07a:	4439      	add	r1, r7
 801a07c:	f7ff ffc7 	bl	801a00e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a080:	b00b      	add	sp, #44	@ 0x2c
 801a082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a084:	460e      	mov	r6, r1
 801a086:	e7dc      	b.n	801a042 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801a088 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801a088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a08a:	468c      	mov	ip, r1
 801a08c:	b08b      	sub	sp, #44	@ 0x2c
 801a08e:	2100      	movs	r1, #0
 801a090:	ae01      	add	r6, sp, #4
 801a092:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a096:	211f      	movs	r1, #31
 801a098:	fbb0 f7f3 	udiv	r7, r0, r3
 801a09c:	fb03 0517 	mls	r5, r3, r7, r0
 801a0a0:	4638      	mov	r0, r7
 801a0a2:	b2ec      	uxtb	r4, r5
 801a0a4:	2d09      	cmp	r5, #9
 801a0a6:	bfd4      	ite	le
 801a0a8:	3430      	addle	r4, #48	@ 0x30
 801a0aa:	3457      	addgt	r4, #87	@ 0x57
 801a0ac:	b2e4      	uxtb	r4, r4
 801a0ae:	558c      	strb	r4, [r1, r6]
 801a0b0:	1e4c      	subs	r4, r1, #1
 801a0b2:	b92f      	cbnz	r7, 801a0c0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801a0b4:	4431      	add	r1, r6
 801a0b6:	4660      	mov	r0, ip
 801a0b8:	f7ff ffa9 	bl	801a00e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a0bc:	b00b      	add	sp, #44	@ 0x2c
 801a0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0c0:	4621      	mov	r1, r4
 801a0c2:	e7e9      	b.n	801a098 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801a0c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0c8:	b085      	sub	sp, #20
 801a0ca:	4691      	mov	r9, r2
 801a0cc:	6802      	ldr	r2, [r0, #0]
 801a0ce:	4688      	mov	r8, r1
 801a0d0:	461c      	mov	r4, r3
 801a0d2:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801a0d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801a0da:	4683      	mov	fp, r0
 801a0dc:	4610      	mov	r0, r2
 801a0de:	9103      	str	r1, [sp, #12]
 801a0e0:	9302      	str	r3, [sp, #8]
 801a0e2:	9201      	str	r2, [sp, #4]
 801a0e4:	f7ff ff86 	bl	8019ff4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a0e8:	f1b8 0f00 	cmp.w	r8, #0
 801a0ec:	bf0c      	ite	eq
 801a0ee:	4684      	moveq	ip, r0
 801a0f0:	f100 0c01 	addne.w	ip, r0, #1
 801a0f4:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801a0f8:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801a0fc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a0fe:	fa1f fc8c 	uxth.w	ip, ip
 801a102:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a104:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801a108:	9903      	ldr	r1, [sp, #12]
 801a10a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a10e:	d041      	beq.n	801a194 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a110:	d834      	bhi.n	801a17c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a112:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801a116:	d059      	beq.n	801a1cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a118:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801a11c:	d03a      	beq.n	801a194 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a11e:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801a122:	d034      	beq.n	801a18e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a124:	2400      	movs	r4, #0
 801a126:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a12a:	3a01      	subs	r2, #1
 801a12c:	b169      	cbz	r1, 801a14a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a12e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a130:	458c      	cmp	ip, r1
 801a132:	da09      	bge.n	801a148 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a134:	eba1 010c 	sub.w	r1, r1, ip
 801a138:	b289      	uxth	r1, r1
 801a13a:	b933      	cbnz	r3, 801a14a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a13c:	2e00      	cmp	r6, #0
 801a13e:	d051      	beq.n	801a1e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a140:	2800      	cmp	r0, #0
 801a142:	d04f      	beq.n	801a1e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a144:	440c      	add	r4, r1
 801a146:	b2a4      	uxth	r4, r4
 801a148:	2100      	movs	r1, #0
 801a14a:	682b      	ldr	r3, [r5, #0]
 801a14c:	4293      	cmp	r3, r2
 801a14e:	da07      	bge.n	801a160 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a150:	f1b8 0f00 	cmp.w	r8, #0
 801a154:	d004      	beq.n	801a160 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a156:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a15a:	682b      	ldr	r3, [r5, #0]
 801a15c:	3301      	adds	r3, #1
 801a15e:	602b      	str	r3, [r5, #0]
 801a160:	2730      	movs	r7, #48	@ 0x30
 801a162:	2c00      	cmp	r4, #0
 801a164:	d04e      	beq.n	801a204 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a166:	682e      	ldr	r6, [r5, #0]
 801a168:	3c01      	subs	r4, #1
 801a16a:	42b2      	cmp	r2, r6
 801a16c:	b2a4      	uxth	r4, r4
 801a16e:	dd49      	ble.n	801a204 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a170:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a174:	682b      	ldr	r3, [r5, #0]
 801a176:	3301      	adds	r3, #1
 801a178:	602b      	str	r3, [r5, #0]
 801a17a:	e7f2      	b.n	801a162 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a17c:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801a180:	d01d      	beq.n	801a1be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a182:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801a186:	d002      	beq.n	801a18e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a188:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801a18c:	e7c9      	b.n	801a122 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a18e:	4684      	mov	ip, r0
 801a190:	f04f 0800 	mov.w	r8, #0
 801a194:	2c00      	cmp	r4, #0
 801a196:	d0c6      	beq.n	801a126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a198:	b947      	cbnz	r7, 801a1ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a19a:	2801      	cmp	r0, #1
 801a19c:	d106      	bne.n	801a1ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a19e:	8814      	ldrh	r4, [r2, #0]
 801a1a0:	2c30      	cmp	r4, #48	@ 0x30
 801a1a2:	bf02      	ittt	eq
 801a1a4:	3202      	addeq	r2, #2
 801a1a6:	4638      	moveq	r0, r7
 801a1a8:	f8cb 2000 	streq.w	r2, [fp]
 801a1ac:	45bc      	cmp	ip, r7
 801a1ae:	da14      	bge.n	801a1da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a1b0:	b2bf      	uxth	r7, r7
 801a1b2:	eba7 040c 	sub.w	r4, r7, ip
 801a1b6:	46bc      	mov	ip, r7
 801a1b8:	b2a4      	uxth	r4, r4
 801a1ba:	2600      	movs	r6, #0
 801a1bc:	e7b3      	b.n	801a126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a1be:	4684      	mov	ip, r0
 801a1c0:	b16c      	cbz	r4, 801a1de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801a1c2:	42b8      	cmp	r0, r7
 801a1c4:	dd00      	ble.n	801a1c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801a1c6:	b2b8      	uxth	r0, r7
 801a1c8:	2400      	movs	r4, #0
 801a1ca:	e003      	b.n	801a1d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801a1cc:	f04f 0c01 	mov.w	ip, #1
 801a1d0:	2400      	movs	r4, #0
 801a1d2:	4660      	mov	r0, ip
 801a1d4:	4626      	mov	r6, r4
 801a1d6:	46a0      	mov	r8, r4
 801a1d8:	e7a5      	b.n	801a126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a1da:	2400      	movs	r4, #0
 801a1dc:	e7ed      	b.n	801a1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801a1de:	4626      	mov	r6, r4
 801a1e0:	46a0      	mov	r8, r4
 801a1e2:	e7a0      	b.n	801a126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a1e4:	2900      	cmp	r1, #0
 801a1e6:	d0b0      	beq.n	801a14a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a1e8:	2720      	movs	r7, #32
 801a1ea:	682e      	ldr	r6, [r5, #0]
 801a1ec:	2900      	cmp	r1, #0
 801a1ee:	d0ac      	beq.n	801a14a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a1f0:	3901      	subs	r1, #1
 801a1f2:	4296      	cmp	r6, r2
 801a1f4:	b289      	uxth	r1, r1
 801a1f6:	daa7      	bge.n	801a148 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a1f8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a1fc:	682b      	ldr	r3, [r5, #0]
 801a1fe:	3301      	adds	r3, #1
 801a200:	602b      	str	r3, [r5, #0]
 801a202:	e7f2      	b.n	801a1ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801a204:	b188      	cbz	r0, 801a22a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a206:	682b      	ldr	r3, [r5, #0]
 801a208:	3801      	subs	r0, #1
 801a20a:	429a      	cmp	r2, r3
 801a20c:	b280      	uxth	r0, r0
 801a20e:	dd0c      	ble.n	801a22a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a210:	f8db 3000 	ldr.w	r3, [fp]
 801a214:	1c9c      	adds	r4, r3, #2
 801a216:	f8cb 4000 	str.w	r4, [fp]
 801a21a:	881c      	ldrh	r4, [r3, #0]
 801a21c:	682b      	ldr	r3, [r5, #0]
 801a21e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801a222:	682b      	ldr	r3, [r5, #0]
 801a224:	3301      	adds	r3, #1
 801a226:	602b      	str	r3, [r5, #0]
 801a228:	e7ec      	b.n	801a204 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a22a:	2620      	movs	r6, #32
 801a22c:	b151      	cbz	r1, 801a244 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a22e:	6828      	ldr	r0, [r5, #0]
 801a230:	3901      	subs	r1, #1
 801a232:	4282      	cmp	r2, r0
 801a234:	b289      	uxth	r1, r1
 801a236:	dd05      	ble.n	801a244 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a238:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801a23c:	682b      	ldr	r3, [r5, #0]
 801a23e:	3301      	adds	r3, #1
 801a240:	602b      	str	r3, [r5, #0]
 801a242:	e7f3      	b.n	801a22c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801a244:	b005      	add	sp, #20
 801a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a24a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801a24a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a24e:	2400      	movs	r4, #0
 801a250:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801a254:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801a258:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801a25c:	8014      	strh	r4, [r2, #0]
 801a25e:	701c      	strb	r4, [r3, #0]
 801a260:	f888 4000 	strb.w	r4, [r8]
 801a264:	f88c 4000 	strb.w	r4, [ip]
 801a268:	f88e 4000 	strb.w	r4, [lr]
 801a26c:	703c      	strb	r4, [r7, #0]
 801a26e:	6804      	ldr	r4, [r0, #0]
 801a270:	b1a4      	cbz	r4, 801a29c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801a272:	8824      	ldrh	r4, [r4, #0]
 801a274:	f04f 0901 	mov.w	r9, #1
 801a278:	b314      	cbz	r4, 801a2c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a27a:	2c2b      	cmp	r4, #43	@ 0x2b
 801a27c:	d001      	beq.n	801a282 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801a27e:	2c20      	cmp	r4, #32
 801a280:	d110      	bne.n	801a2a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801a282:	8014      	strh	r4, [r2, #0]
 801a284:	6804      	ldr	r4, [r0, #0]
 801a286:	b10c      	cbz	r4, 801a28c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801a288:	3402      	adds	r4, #2
 801a28a:	6004      	str	r4, [r0, #0]
 801a28c:	680c      	ldr	r4, [r1, #0]
 801a28e:	b10c      	cbz	r4, 801a294 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801a290:	3401      	adds	r4, #1
 801a292:	600c      	str	r4, [r1, #0]
 801a294:	6804      	ldr	r4, [r0, #0]
 801a296:	b17c      	cbz	r4, 801a2b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801a298:	8824      	ldrh	r4, [r4, #0]
 801a29a:	e7ed      	b.n	801a278 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a29c:	680c      	ldr	r4, [r1, #0]
 801a29e:	b17c      	cbz	r4, 801a2c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a2a0:	7824      	ldrb	r4, [r4, #0]
 801a2a2:	e7e7      	b.n	801a274 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801a2a4:	2c2d      	cmp	r4, #45	@ 0x2d
 801a2a6:	d102      	bne.n	801a2ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801a2a8:	f883 9000 	strb.w	r9, [r3]
 801a2ac:	e7ea      	b.n	801a284 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a2ae:	2c23      	cmp	r4, #35	@ 0x23
 801a2b0:	d107      	bne.n	801a2c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801a2b2:	f888 9000 	strb.w	r9, [r8]
 801a2b6:	e7e5      	b.n	801a284 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a2b8:	680c      	ldr	r4, [r1, #0]
 801a2ba:	b10c      	cbz	r4, 801a2c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a2bc:	7824      	ldrb	r4, [r4, #0]
 801a2be:	e7db      	b.n	801a278 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a2c0:	2400      	movs	r4, #0
 801a2c2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801a2c6:	2b09      	cmp	r3, #9
 801a2c8:	d901      	bls.n	801a2ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801a2ca:	2c2a      	cmp	r4, #42	@ 0x2a
 801a2cc:	d122      	bne.n	801a314 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a2ce:	2301      	movs	r3, #1
 801a2d0:	2c30      	cmp	r4, #48	@ 0x30
 801a2d2:	f88e 3000 	strb.w	r3, [lr]
 801a2d6:	d10d      	bne.n	801a2f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a2d8:	f88c 3000 	strb.w	r3, [ip]
 801a2dc:	6803      	ldr	r3, [r0, #0]
 801a2de:	b10b      	cbz	r3, 801a2e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801a2e0:	3302      	adds	r3, #2
 801a2e2:	6003      	str	r3, [r0, #0]
 801a2e4:	680b      	ldr	r3, [r1, #0]
 801a2e6:	b10b      	cbz	r3, 801a2ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801a2e8:	3301      	adds	r3, #1
 801a2ea:	600b      	str	r3, [r1, #0]
 801a2ec:	6803      	ldr	r3, [r0, #0]
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d02f      	beq.n	801a352 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801a2f2:	881c      	ldrh	r4, [r3, #0]
 801a2f4:	2c2a      	cmp	r4, #42	@ 0x2a
 801a2f6:	d135      	bne.n	801a364 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 801a2fc:	6033      	str	r3, [r6, #0]
 801a2fe:	6803      	ldr	r3, [r0, #0]
 801a300:	b10b      	cbz	r3, 801a306 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801a302:	3302      	adds	r3, #2
 801a304:	6003      	str	r3, [r0, #0]
 801a306:	680b      	ldr	r3, [r1, #0]
 801a308:	b10b      	cbz	r3, 801a30e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801a30a:	3301      	adds	r3, #1
 801a30c:	600b      	str	r3, [r1, #0]
 801a30e:	6803      	ldr	r3, [r0, #0]
 801a310:	b31b      	cbz	r3, 801a35a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801a312:	881c      	ldrh	r4, [r3, #0]
 801a314:	2c2e      	cmp	r4, #46	@ 0x2e
 801a316:	d11a      	bne.n	801a34e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a318:	2301      	movs	r3, #1
 801a31a:	703b      	strb	r3, [r7, #0]
 801a31c:	6803      	ldr	r3, [r0, #0]
 801a31e:	b10b      	cbz	r3, 801a324 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801a320:	3302      	adds	r3, #2
 801a322:	6003      	str	r3, [r0, #0]
 801a324:	680b      	ldr	r3, [r1, #0]
 801a326:	b10b      	cbz	r3, 801a32c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801a328:	3301      	adds	r3, #1
 801a32a:	600b      	str	r3, [r1, #0]
 801a32c:	6803      	ldr	r3, [r0, #0]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d036      	beq.n	801a3a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801a332:	881b      	ldrh	r3, [r3, #0]
 801a334:	2b2a      	cmp	r3, #42	@ 0x2a
 801a336:	d137      	bne.n	801a3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a338:	f04f 33ff 	mov.w	r3, #4294967295
 801a33c:	602b      	str	r3, [r5, #0]
 801a33e:	6803      	ldr	r3, [r0, #0]
 801a340:	b10b      	cbz	r3, 801a346 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801a342:	3302      	adds	r3, #2
 801a344:	6003      	str	r3, [r0, #0]
 801a346:	680b      	ldr	r3, [r1, #0]
 801a348:	b10b      	cbz	r3, 801a34e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a34a:	3301      	adds	r3, #1
 801a34c:	600b      	str	r3, [r1, #0]
 801a34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a352:	680c      	ldr	r4, [r1, #0]
 801a354:	b134      	cbz	r4, 801a364 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a356:	7824      	ldrb	r4, [r4, #0]
 801a358:	e7cc      	b.n	801a2f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a35a:	680b      	ldr	r3, [r1, #0]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d0f6      	beq.n	801a34e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a360:	781c      	ldrb	r4, [r3, #0]
 801a362:	e7d7      	b.n	801a314 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a364:	2300      	movs	r3, #0
 801a366:	220a      	movs	r2, #10
 801a368:	6033      	str	r3, [r6, #0]
 801a36a:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a36e:	fa1f f38c 	uxth.w	r3, ip
 801a372:	2b09      	cmp	r3, #9
 801a374:	d8ce      	bhi.n	801a314 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a376:	6833      	ldr	r3, [r6, #0]
 801a378:	fb02 c303 	mla	r3, r2, r3, ip
 801a37c:	6033      	str	r3, [r6, #0]
 801a37e:	6803      	ldr	r3, [r0, #0]
 801a380:	b10b      	cbz	r3, 801a386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801a382:	3302      	adds	r3, #2
 801a384:	6003      	str	r3, [r0, #0]
 801a386:	680b      	ldr	r3, [r1, #0]
 801a388:	b10b      	cbz	r3, 801a38e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801a38a:	3301      	adds	r3, #1
 801a38c:	600b      	str	r3, [r1, #0]
 801a38e:	6803      	ldr	r3, [r0, #0]
 801a390:	b10b      	cbz	r3, 801a396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801a392:	881c      	ldrh	r4, [r3, #0]
 801a394:	e7e9      	b.n	801a36a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a396:	680c      	ldr	r4, [r1, #0]
 801a398:	2c00      	cmp	r4, #0
 801a39a:	d0e6      	beq.n	801a36a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a39c:	7824      	ldrb	r4, [r4, #0]
 801a39e:	e7e4      	b.n	801a36a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a3a0:	680b      	ldr	r3, [r1, #0]
 801a3a2:	b10b      	cbz	r3, 801a3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a3a4:	781b      	ldrb	r3, [r3, #0]
 801a3a6:	e7c5      	b.n	801a334 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	240a      	movs	r4, #10
 801a3ac:	602a      	str	r2, [r5, #0]
 801a3ae:	3b30      	subs	r3, #48	@ 0x30
 801a3b0:	682a      	ldr	r2, [r5, #0]
 801a3b2:	b29e      	uxth	r6, r3
 801a3b4:	2e09      	cmp	r6, #9
 801a3b6:	d813      	bhi.n	801a3e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801a3b8:	fb04 3302 	mla	r3, r4, r2, r3
 801a3bc:	602b      	str	r3, [r5, #0]
 801a3be:	6803      	ldr	r3, [r0, #0]
 801a3c0:	b10b      	cbz	r3, 801a3c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801a3c2:	3302      	adds	r3, #2
 801a3c4:	6003      	str	r3, [r0, #0]
 801a3c6:	680b      	ldr	r3, [r1, #0]
 801a3c8:	b10b      	cbz	r3, 801a3ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801a3ca:	3301      	adds	r3, #1
 801a3cc:	600b      	str	r3, [r1, #0]
 801a3ce:	6803      	ldr	r3, [r0, #0]
 801a3d0:	b10b      	cbz	r3, 801a3d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801a3d2:	881b      	ldrh	r3, [r3, #0]
 801a3d4:	e7eb      	b.n	801a3ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a3d6:	680b      	ldr	r3, [r1, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d0e8      	beq.n	801a3ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a3dc:	781b      	ldrb	r3, [r3, #0]
 801a3de:	e7e6      	b.n	801a3ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a3e0:	2a06      	cmp	r2, #6
 801a3e2:	bfa8      	it	ge
 801a3e4:	2206      	movge	r2, #6
 801a3e6:	602a      	str	r2, [r5, #0]
 801a3e8:	e7b1      	b.n	801a34e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801a3ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801a3ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3ee:	b0a3      	sub	sp, #140	@ 0x8c
 801a3f0:	2600      	movs	r6, #0
 801a3f2:	4607      	mov	r7, r0
 801a3f4:	4688      	mov	r8, r1
 801a3f6:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801a3fa:	4631      	mov	r1, r6
 801a3fc:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801a3fe:	4648      	mov	r0, r9
 801a400:	960d      	str	r6, [sp, #52]	@ 0x34
 801a402:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801a406:	2242      	movs	r2, #66	@ 0x42
 801a408:	f00b feae 	bl	8026168 <memset>
 801a40c:	b15f      	cbz	r7, 801a426 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801a40e:	f108 3aff 	add.w	sl, r8, #4294967295
 801a412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a416:	b152      	cbz	r2, 801a42e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801a418:	8812      	ldrh	r2, [r2, #0]
 801a41a:	b10a      	cbz	r2, 801a420 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a41c:	459a      	cmp	sl, r3
 801a41e:	dc2e      	bgt.n	801a47e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801a420:	2200      	movs	r2, #0
 801a422:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a426:	4638      	mov	r0, r7
 801a428:	b023      	add	sp, #140	@ 0x8c
 801a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a42e:	9a08      	ldr	r2, [sp, #32]
 801a430:	2a00      	cmp	r2, #0
 801a432:	d0f5      	beq.n	801a420 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a434:	7812      	ldrb	r2, [r2, #0]
 801a436:	e7f0      	b.n	801a41a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801a438:	2d00      	cmp	r5, #0
 801a43a:	d0ea      	beq.n	801a412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a43c:	782a      	ldrb	r2, [r5, #0]
 801a43e:	b142      	cbz	r2, 801a452 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801a440:	2a25      	cmp	r2, #37	@ 0x25
 801a442:	d001      	beq.n	801a448 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801a444:	459a      	cmp	sl, r3
 801a446:	dc08      	bgt.n	801a45a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801a448:	f1bb 0f00 	cmp.w	fp, #0
 801a44c:	d121      	bne.n	801a492 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801a44e:	2d00      	cmp	r5, #0
 801a450:	d0df      	beq.n	801a412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a452:	782a      	ldrb	r2, [r5, #0]
 801a454:	f04f 0b00 	mov.w	fp, #0
 801a458:	e01d      	b.n	801a496 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801a45a:	f1bb 0f00 	cmp.w	fp, #0
 801a45e:	d077      	beq.n	801a550 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801a460:	f8bb 2000 	ldrh.w	r2, [fp]
 801a464:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a468:	f1bb 0f00 	cmp.w	fp, #0
 801a46c:	d002      	beq.n	801a474 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801a46e:	f10b 0202 	add.w	r2, fp, #2
 801a472:	9209      	str	r2, [sp, #36]	@ 0x24
 801a474:	b10d      	cbz	r5, 801a47a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801a476:	3501      	adds	r5, #1
 801a478:	9508      	str	r5, [sp, #32]
 801a47a:	3301      	adds	r3, #1
 801a47c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a47e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a480:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801a484:	f1bb 0f00 	cmp.w	fp, #0
 801a488:	d0d6      	beq.n	801a438 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801a48a:	f8bb 2000 	ldrh.w	r2, [fp]
 801a48e:	2a00      	cmp	r2, #0
 801a490:	d1d6      	bne.n	801a440 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801a492:	f8bb 2000 	ldrh.w	r2, [fp]
 801a496:	2a00      	cmp	r2, #0
 801a498:	d0bb      	beq.n	801a412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a49a:	459a      	cmp	sl, r3
 801a49c:	ddb9      	ble.n	801a412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a49e:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801a4a2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801a4a6:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801a4aa:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801a4ae:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801a4b2:	960e      	str	r6, [sp, #56]	@ 0x38
 801a4b4:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801a4b8:	960f      	str	r6, [sp, #60]	@ 0x3c
 801a4ba:	f1bb 0f00 	cmp.w	fp, #0
 801a4be:	d002      	beq.n	801a4c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801a4c0:	f10b 0302 	add.w	r3, fp, #2
 801a4c4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a4c6:	b10d      	cbz	r5, 801a4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801a4c8:	1c6b      	adds	r3, r5, #1
 801a4ca:	9308      	str	r3, [sp, #32]
 801a4cc:	ab0f      	add	r3, sp, #60	@ 0x3c
 801a4ce:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801a4d2:	a908      	add	r1, sp, #32
 801a4d4:	a809      	add	r0, sp, #36	@ 0x24
 801a4d6:	9305      	str	r3, [sp, #20]
 801a4d8:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801a4dc:	9304      	str	r3, [sp, #16]
 801a4de:	ab0e      	add	r3, sp, #56	@ 0x38
 801a4e0:	9303      	str	r3, [sp, #12]
 801a4e2:	ab0c      	add	r3, sp, #48	@ 0x30
 801a4e4:	9302      	str	r3, [sp, #8]
 801a4e6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801a4ea:	9301      	str	r3, [sp, #4]
 801a4ec:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801a4f0:	9300      	str	r3, [sp, #0]
 801a4f2:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801a4f6:	f7ff fea8 	bl	801a24a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801a4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	bfbf      	itttt	lt
 801a500:	6823      	ldrlt	r3, [r4, #0]
 801a502:	3404      	addlt	r4, #4
 801a504:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a508:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801a50a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	bfbe      	ittt	lt
 801a510:	6823      	ldrlt	r3, [r4, #0]
 801a512:	3404      	addlt	r4, #4
 801a514:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a518:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a51c:	bfb8      	it	lt
 801a51e:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801a520:	b1d9      	cbz	r1, 801a55a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801a522:	880b      	ldrh	r3, [r1, #0]
 801a524:	2b69      	cmp	r3, #105	@ 0x69
 801a526:	d01f      	beq.n	801a568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a528:	d82f      	bhi.n	801a58a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801a52a:	2b58      	cmp	r3, #88	@ 0x58
 801a52c:	d01c      	beq.n	801a568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a52e:	d818      	bhi.n	801a562 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801a530:	2b25      	cmp	r3, #37	@ 0x25
 801a532:	d034      	beq.n	801a59e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801a534:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a536:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801a53a:	f1bb 0f00 	cmp.w	fp, #0
 801a53e:	f000 80b7 	beq.w	801a6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801a542:	f8bb 5000 	ldrh.w	r5, [fp]
 801a546:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801a54a:	3301      	adds	r3, #1
 801a54c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a54e:	e029      	b.n	801a5a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a550:	b10d      	cbz	r5, 801a556 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801a552:	782a      	ldrb	r2, [r5, #0]
 801a554:	e786      	b.n	801a464 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a556:	462a      	mov	r2, r5
 801a558:	e784      	b.n	801a464 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a55a:	2a00      	cmp	r2, #0
 801a55c:	d0ea      	beq.n	801a534 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a55e:	7813      	ldrb	r3, [r2, #0]
 801a560:	e7e0      	b.n	801a524 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801a562:	3b63      	subs	r3, #99	@ 0x63
 801a564:	2b01      	cmp	r3, #1
 801a566:	d8e5      	bhi.n	801a534 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a568:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801a56c:	b329      	cbz	r1, 801a5ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801a56e:	880b      	ldrh	r3, [r1, #0]
 801a570:	2b69      	cmp	r3, #105	@ 0x69
 801a572:	d063      	beq.n	801a63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a574:	d825      	bhi.n	801a5c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801a576:	2b63      	cmp	r3, #99	@ 0x63
 801a578:	d038      	beq.n	801a5ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801a57a:	2b64      	cmp	r3, #100	@ 0x64
 801a57c:	d05e      	beq.n	801a63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a57e:	2b58      	cmp	r3, #88	@ 0x58
 801a580:	d07a      	beq.n	801a678 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801a582:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801a586:	4625      	mov	r5, r4
 801a588:	e036      	b.n	801a5f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a58a:	2b73      	cmp	r3, #115	@ 0x73
 801a58c:	d0ec      	beq.n	801a568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a58e:	d802      	bhi.n	801a596 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801a590:	2b6f      	cmp	r3, #111	@ 0x6f
 801a592:	d1cf      	bne.n	801a534 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a594:	e7e8      	b.n	801a568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a596:	2b75      	cmp	r3, #117	@ 0x75
 801a598:	d0e6      	beq.n	801a568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a59a:	2b78      	cmp	r3, #120	@ 0x78
 801a59c:	e7f9      	b.n	801a592 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801a59e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a5a0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801a5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5a6:	b10b      	cbz	r3, 801a5ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801a5a8:	3302      	adds	r3, #2
 801a5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801a5ac:	9b08      	ldr	r3, [sp, #32]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	f43f af2f 	beq.w	801a412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a5b4:	3301      	adds	r3, #1
 801a5b6:	9308      	str	r3, [sp, #32]
 801a5b8:	e72b      	b.n	801a412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a5ba:	2a00      	cmp	r2, #0
 801a5bc:	d0e1      	beq.n	801a582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a5be:	7813      	ldrb	r3, [r2, #0]
 801a5c0:	e7d6      	b.n	801a570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801a5c2:	2b73      	cmp	r3, #115	@ 0x73
 801a5c4:	d036      	beq.n	801a634 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801a5c6:	d807      	bhi.n	801a5d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801a5c8:	2b6f      	cmp	r3, #111	@ 0x6f
 801a5ca:	d1da      	bne.n	801a582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a5cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a5ce:	1d25      	adds	r5, r4, #4
 801a5d0:	2308      	movs	r3, #8
 801a5d2:	eba8 0202 	sub.w	r2, r8, r2
 801a5d6:	e049      	b.n	801a66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a5d8:	2b75      	cmp	r3, #117	@ 0x75
 801a5da:	d042      	beq.n	801a662 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801a5dc:	2b78      	cmp	r3, #120	@ 0x78
 801a5de:	d1d0      	bne.n	801a582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a5e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a5e2:	1d25      	adds	r5, r4, #4
 801a5e4:	2310      	movs	r3, #16
 801a5e6:	eba8 0202 	sub.w	r2, r8, r2
 801a5ea:	e03f      	b.n	801a66c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a5ec:	6823      	ldr	r3, [r4, #0]
 801a5ee:	1d25      	adds	r5, r4, #4
 801a5f0:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801a5f4:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801a5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a5fa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d051      	beq.n	801a6a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801a602:	881a      	ldrh	r2, [r3, #0]
 801a604:	a80d      	add	r0, sp, #52	@ 0x34
 801a606:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801a60a:	462c      	mov	r4, r5
 801a60c:	9005      	str	r0, [sp, #20]
 801a60e:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801a612:	9004      	str	r0, [sp, #16]
 801a614:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a616:	9003      	str	r0, [sp, #12]
 801a618:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801a61c:	9002      	str	r0, [sp, #8]
 801a61e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a620:	9001      	str	r0, [sp, #4]
 801a622:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801a626:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801a62a:	9000      	str	r0, [sp, #0]
 801a62c:	a810      	add	r0, sp, #64	@ 0x40
 801a62e:	f7ff fd49 	bl	801a0c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801a632:	e7b7      	b.n	801a5a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a634:	1d25      	adds	r5, r4, #4
 801a636:	6823      	ldr	r3, [r4, #0]
 801a638:	9310      	str	r3, [sp, #64]	@ 0x40
 801a63a:	e7dd      	b.n	801a5f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a63c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a63e:	230a      	movs	r3, #10
 801a640:	4649      	mov	r1, r9
 801a642:	6820      	ldr	r0, [r4, #0]
 801a644:	eba8 0202 	sub.w	r2, r8, r2
 801a648:	1d25      	adds	r5, r4, #4
 801a64a:	b292      	uxth	r2, r2
 801a64c:	f7ff fcf0 	bl	801a030 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801a650:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801a654:	2b2d      	cmp	r3, #45	@ 0x2d
 801a656:	d1cf      	bne.n	801a5f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a658:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a65c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a65e:	3302      	adds	r3, #2
 801a660:	e7ea      	b.n	801a638 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801a662:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a664:	1d25      	adds	r5, r4, #4
 801a666:	230a      	movs	r3, #10
 801a668:	eba8 0202 	sub.w	r2, r8, r2
 801a66c:	b292      	uxth	r2, r2
 801a66e:	4649      	mov	r1, r9
 801a670:	6820      	ldr	r0, [r4, #0]
 801a672:	f7ff fd09 	bl	801a088 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a676:	e7bf      	b.n	801a5f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a678:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a67a:	2310      	movs	r3, #16
 801a67c:	4649      	mov	r1, r9
 801a67e:	6820      	ldr	r0, [r4, #0]
 801a680:	eba8 0202 	sub.w	r2, r8, r2
 801a684:	1d25      	adds	r5, r4, #4
 801a686:	b292      	uxth	r2, r2
 801a688:	f7ff fcfe 	bl	801a088 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a68c:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801a690:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a694:	2b00      	cmp	r3, #0
 801a696:	d0af      	beq.n	801a5f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a698:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801a69c:	2919      	cmp	r1, #25
 801a69e:	d8f7      	bhi.n	801a690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a6a0:	3b20      	subs	r3, #32
 801a6a2:	8013      	strh	r3, [r2, #0]
 801a6a4:	e7f4      	b.n	801a690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a6a6:	9a08      	ldr	r2, [sp, #32]
 801a6a8:	2a00      	cmp	r2, #0
 801a6aa:	d0ab      	beq.n	801a604 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a6ac:	7812      	ldrb	r2, [r2, #0]
 801a6ae:	e7a9      	b.n	801a604 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a6b0:	2d00      	cmp	r5, #0
 801a6b2:	f43f af48 	beq.w	801a546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801a6b6:	782d      	ldrb	r5, [r5, #0]
 801a6b8:	e745      	b.n	801a546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801a6ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a6ba:	b507      	push	{r0, r1, r2, lr}
 801a6bc:	9300      	str	r3, [sp, #0]
 801a6be:	4613      	mov	r3, r2
 801a6c0:	2200      	movs	r2, #0
 801a6c2:	f7ff fe92 	bl	801a3ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801a6c6:	b003      	add	sp, #12
 801a6c8:	f85d fb04 	ldr.w	pc, [sp], #4

0801a6cc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a6cc:	b40c      	push	{r2, r3}
 801a6ce:	b507      	push	{r0, r1, r2, lr}
 801a6d0:	ab04      	add	r3, sp, #16
 801a6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6d6:	9301      	str	r3, [sp, #4]
 801a6d8:	f7ff ffef 	bl	801a6ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a6dc:	b003      	add	sp, #12
 801a6de:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6e2:	b002      	add	sp, #8
 801a6e4:	4770      	bx	lr
	...

0801a6e8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a6e8:	4b01      	ldr	r3, [pc, #4]	@ (801a6f0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a6ea:	6018      	str	r0, [r3, #0]
 801a6ec:	4770      	bx	lr
 801a6ee:	bf00      	nop
 801a6f0:	24026480 	.word	0x24026480

0801a6f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a6f4:	4b06      	ldr	r3, [pc, #24]	@ (801a710 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a6f6:	881a      	ldrh	r2, [r3, #0]
 801a6f8:	4282      	cmp	r2, r0
 801a6fa:	d807      	bhi.n	801a70c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a6fc:	4b05      	ldr	r3, [pc, #20]	@ (801a714 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a6fe:	881b      	ldrh	r3, [r3, #0]
 801a700:	4413      	add	r3, r2
 801a702:	4298      	cmp	r0, r3
 801a704:	bfac      	ite	ge
 801a706:	2000      	movge	r0, #0
 801a708:	2001      	movlt	r0, #1
 801a70a:	4770      	bx	lr
 801a70c:	2000      	movs	r0, #0
 801a70e:	4770      	bx	lr
 801a710:	240264a0 	.word	0x240264a0
 801a714:	240264a4 	.word	0x240264a4

0801a718 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a718:	b508      	push	{r3, lr}
 801a71a:	4601      	mov	r1, r0
 801a71c:	f7ff ffea 	bl	801a6f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a720:	b118      	cbz	r0, 801a72a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a722:	4b02      	ldr	r3, [pc, #8]	@ (801a72c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a72a:	bd08      	pop	{r3, pc}
 801a72c:	24026484 	.word	0x24026484

0801a730 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801a730:	b538      	push	{r3, r4, r5, lr}
 801a732:	4604      	mov	r4, r0
 801a734:	f7ff ffde 	bl	801a6f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a738:	b1d8      	cbz	r0, 801a772 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801a73a:	4b0f      	ldr	r3, [pc, #60]	@ (801a778 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801a73c:	881b      	ldrh	r3, [r3, #0]
 801a73e:	1ae4      	subs	r4, r4, r3
 801a740:	230e      	movs	r3, #14
 801a742:	4363      	muls	r3, r4
 801a744:	4c0d      	ldr	r4, [pc, #52]	@ (801a77c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801a746:	6825      	ldr	r5, [r4, #0]
 801a748:	18ea      	adds	r2, r5, r3
 801a74a:	7b12      	ldrb	r2, [r2, #12]
 801a74c:	f012 0220 	ands.w	r2, r2, #32
 801a750:	d010      	beq.n	801a774 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801a752:	f9b1 2000 	ldrsh.w	r2, [r1]
 801a756:	52ea      	strh	r2, [r5, r3]
 801a758:	6822      	ldr	r2, [r4, #0]
 801a75a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801a75e:	441a      	add	r2, r3
 801a760:	8055      	strh	r5, [r2, #2]
 801a762:	6822      	ldr	r2, [r4, #0]
 801a764:	4413      	add	r3, r2
 801a766:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801a76a:	809a      	strh	r2, [r3, #4]
 801a76c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801a770:	80da      	strh	r2, [r3, #6]
 801a772:	bd38      	pop	{r3, r4, r5, pc}
 801a774:	4610      	mov	r0, r2
 801a776:	e7fc      	b.n	801a772 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801a778:	240264a0 	.word	0x240264a0
 801a77c:	24026488 	.word	0x24026488

0801a780 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801a780:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a784:	4606      	mov	r6, r0
 801a786:	460c      	mov	r4, r1
 801a788:	f7ff ffb4 	bl	801a6f4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a78c:	b918      	cbnz	r0, 801a796 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801a78e:	2000      	movs	r0, #0
 801a790:	b002      	add	sp, #8
 801a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a796:	4608      	mov	r0, r1
 801a798:	f7f6 fc6d 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a79c:	2800      	cmp	r0, #0
 801a79e:	d1f6      	bne.n	801a78e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a7a0:	4b3f      	ldr	r3, [pc, #252]	@ (801a8a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801a7a2:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801a8a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801a7a6:	881d      	ldrh	r5, [r3, #0]
 801a7a8:	f8d9 a000 	ldr.w	sl, [r9]
 801a7ac:	46c8      	mov	r8, r9
 801a7ae:	1b73      	subs	r3, r6, r5
 801a7b0:	250e      	movs	r5, #14
 801a7b2:	435d      	muls	r5, r3
 801a7b4:	eb0a 0705 	add.w	r7, sl, r5
 801a7b8:	7b3b      	ldrb	r3, [r7, #12]
 801a7ba:	f013 0f20 	tst.w	r3, #32
 801a7be:	d0e6      	beq.n	801a78e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a7c0:	4621      	mov	r1, r4
 801a7c2:	4638      	mov	r0, r7
 801a7c4:	f7fc faea 	bl	8016d9c <_ZNK8touchgfx4Rect8includesERKS0_>
 801a7c8:	2800      	cmp	r0, #0
 801a7ca:	d1e1      	bne.n	801a790 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801a7cc:	4639      	mov	r1, r7
 801a7ce:	4620      	mov	r0, r4
 801a7d0:	f7fc fae4 	bl	8016d9c <_ZNK8touchgfx4Rect8includesERKS0_>
 801a7d4:	b108      	cbz	r0, 801a7da <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801a7d6:	4621      	mov	r1, r4
 801a7d8:	e020      	b.n	801a81c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801a7da:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a7de:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801a7e2:	429a      	cmp	r2, r3
 801a7e4:	d11e      	bne.n	801a824 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a7e6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a7ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801a7ee:	429a      	cmp	r2, r3
 801a7f0:	d118      	bne.n	801a824 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a7f2:	6820      	ldr	r0, [r4, #0]
 801a7f4:	466b      	mov	r3, sp
 801a7f6:	6861      	ldr	r1, [r4, #4]
 801a7f8:	c303      	stmia	r3!, {r0, r1}
 801a7fa:	4639      	mov	r1, r7
 801a7fc:	4668      	mov	r0, sp
 801a7fe:	f7fc faf3 	bl	8016de8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a802:	f8d9 3000 	ldr.w	r3, [r9]
 801a806:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a80a:	442b      	add	r3, r5
 801a80c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a810:	4413      	add	r3, r2
 801a812:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801a816:	4293      	cmp	r3, r2
 801a818:	dc04      	bgt.n	801a824 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a81a:	4669      	mov	r1, sp
 801a81c:	4630      	mov	r0, r6
 801a81e:	f7ff ff87 	bl	801a730 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801a822:	e7b5      	b.n	801a790 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801a824:	f8d8 3000 	ldr.w	r3, [r8]
 801a828:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a82c:	442b      	add	r3, r5
 801a82e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a832:	4291      	cmp	r1, r2
 801a834:	d119      	bne.n	801a86a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801a836:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a83a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801a83e:	4291      	cmp	r1, r2
 801a840:	d113      	bne.n	801a86a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801a842:	6820      	ldr	r0, [r4, #0]
 801a844:	466a      	mov	r2, sp
 801a846:	6861      	ldr	r1, [r4, #4]
 801a848:	c203      	stmia	r2!, {r0, r1}
 801a84a:	4619      	mov	r1, r3
 801a84c:	4668      	mov	r0, sp
 801a84e:	f7fc facb 	bl	8016de8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a852:	f8d8 3000 	ldr.w	r3, [r8]
 801a856:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a85a:	442b      	add	r3, r5
 801a85c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a860:	4413      	add	r3, r2
 801a862:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a866:	4293      	cmp	r3, r2
 801a868:	ddd7      	ble.n	801a81a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801a86a:	4620      	mov	r0, r4
 801a86c:	f7f6 fc03 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a870:	b990      	cbnz	r0, 801a898 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801a872:	88a7      	ldrh	r7, [r4, #4]
 801a874:	88e3      	ldrh	r3, [r4, #6]
 801a876:	fb17 f703 	smulbb	r7, r7, r3
 801a87a:	f8d8 3000 	ldr.w	r3, [r8]
 801a87e:	441d      	add	r5, r3
 801a880:	4628      	mov	r0, r5
 801a882:	f7f6 fbf8 	bl	8011076 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a886:	b948      	cbnz	r0, 801a89c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801a888:	88ab      	ldrh	r3, [r5, #4]
 801a88a:	88ea      	ldrh	r2, [r5, #6]
 801a88c:	fb13 f302 	smulbb	r3, r3, r2
 801a890:	42bb      	cmp	r3, r7
 801a892:	f6bf af7c 	bge.w	801a78e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a896:	e79e      	b.n	801a7d6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801a898:	2700      	movs	r7, #0
 801a89a:	e7ee      	b.n	801a87a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801a89c:	2300      	movs	r3, #0
 801a89e:	e7f7      	b.n	801a890 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801a8a0:	240264a0 	.word	0x240264a0
 801a8a4:	24026488 	.word	0x24026488

0801a8a8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8aa:	4c24      	ldr	r4, [pc, #144]	@ (801a93c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a8ac:	6823      	ldr	r3, [r4, #0]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d042      	beq.n	801a938 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a8b2:	4a23      	ldr	r2, [pc, #140]	@ (801a940 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a8b4:	4d23      	ldr	r5, [pc, #140]	@ (801a944 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a8b6:	8811      	ldrh	r1, [r2, #0]
 801a8b8:	f8b5 c000 	ldrh.w	ip, [r5]
 801a8bc:	4822      	ldr	r0, [pc, #136]	@ (801a948 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a8be:	4461      	add	r1, ip
 801a8c0:	1c4a      	adds	r2, r1, #1
 801a8c2:	008f      	lsls	r7, r1, #2
 801a8c4:	f022 0201 	bic.w	r2, r2, #1
 801a8c8:	19de      	adds	r6, r3, r7
 801a8ca:	0412      	lsls	r2, r2, #16
 801a8cc:	6006      	str	r6, [r0, #0]
 801a8ce:	4e1f      	ldr	r6, [pc, #124]	@ (801a94c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a8d0:	0c12      	lsrs	r2, r2, #16
 801a8d2:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a8d6:	19da      	adds	r2, r3, r7
 801a8d8:	6032      	str	r2, [r6, #0]
 801a8da:	220e      	movs	r2, #14
 801a8dc:	fb02 f20c 	mul.w	r2, r2, ip
 801a8e0:	3203      	adds	r2, #3
 801a8e2:	f022 0203 	bic.w	r2, r2, #3
 801a8e6:	443a      	add	r2, r7
 801a8e8:	4f19      	ldr	r7, [pc, #100]	@ (801a950 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a8ea:	4413      	add	r3, r2
 801a8ec:	603b      	str	r3, [r7, #0]
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	4f18      	ldr	r7, [pc, #96]	@ (801a954 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a8f2:	469c      	mov	ip, r3
 801a8f4:	803b      	strh	r3, [r7, #0]
 801a8f6:	4f18      	ldr	r7, [pc, #96]	@ (801a958 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a8f8:	683f      	ldr	r7, [r7, #0]
 801a8fa:	1aba      	subs	r2, r7, r2
 801a8fc:	4f17      	ldr	r7, [pc, #92]	@ (801a95c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a8fe:	603a      	str	r2, [r7, #0]
 801a900:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801a904:	4a16      	ldr	r2, [pc, #88]	@ (801a960 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a906:	8013      	strh	r3, [r2, #0]
 801a908:	428b      	cmp	r3, r1
 801a90a:	d10d      	bne.n	801a928 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a90c:	882d      	ldrh	r5, [r5, #0]
 801a90e:	2300      	movs	r3, #0
 801a910:	6830      	ldr	r0, [r6, #0]
 801a912:	240e      	movs	r4, #14
 801a914:	429d      	cmp	r5, r3
 801a916:	d90f      	bls.n	801a938 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a918:	fb04 0203 	mla	r2, r4, r3, r0
 801a91c:	3301      	adds	r3, #1
 801a91e:	7b11      	ldrb	r1, [r2, #12]
 801a920:	f36f 1145 	bfc	r1, #5, #1
 801a924:	7311      	strb	r1, [r2, #12]
 801a926:	e7f5      	b.n	801a914 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a928:	6822      	ldr	r2, [r4, #0]
 801a92a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a92e:	6802      	ldr	r2, [r0, #0]
 801a930:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a934:	3301      	adds	r3, #1
 801a936:	e7e7      	b.n	801a908 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a93a:	bf00      	nop
 801a93c:	24026484 	.word	0x24026484
 801a940:	240264a0 	.word	0x240264a0
 801a944:	240264a4 	.word	0x240264a4
 801a948:	24026498 	.word	0x24026498
 801a94c:	24026488 	.word	0x24026488
 801a950:	24026490 	.word	0x24026490
 801a954:	240264a2 	.word	0x240264a2
 801a958:	2402648c 	.word	0x2402648c
 801a95c:	2402649c 	.word	0x2402649c
 801a960:	24026494 	.word	0x24026494

0801a964 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a964:	4b06      	ldr	r3, [pc, #24]	@ (801a980 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	b943      	cbnz	r3, 801a97c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a96a:	b139      	cbz	r1, 801a97c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a96c:	4b05      	ldr	r3, [pc, #20]	@ (801a984 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a96e:	801a      	strh	r2, [r3, #0]
 801a970:	4b05      	ldr	r3, [pc, #20]	@ (801a988 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a972:	6019      	str	r1, [r3, #0]
 801a974:	4b05      	ldr	r3, [pc, #20]	@ (801a98c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a976:	6018      	str	r0, [r3, #0]
 801a978:	f7ff bf96 	b.w	801a8a8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a97c:	4770      	bx	lr
 801a97e:	bf00      	nop
 801a980:	24026490 	.word	0x24026490
 801a984:	240264a4 	.word	0x240264a4
 801a988:	2402648c 	.word	0x2402648c
 801a98c:	24026484 	.word	0x24026484

0801a990 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a990:	b470      	push	{r4, r5, r6}
 801a992:	4c07      	ldr	r4, [pc, #28]	@ (801a9b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a994:	4605      	mov	r5, r0
 801a996:	4610      	mov	r0, r2
 801a998:	9a03      	ldr	r2, [sp, #12]
 801a99a:	6826      	ldr	r6, [r4, #0]
 801a99c:	b936      	cbnz	r6, 801a9ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a99e:	6025      	str	r5, [r4, #0]
 801a9a0:	4c04      	ldr	r4, [pc, #16]	@ (801a9b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a9a2:	8021      	strh	r1, [r4, #0]
 801a9a4:	4619      	mov	r1, r3
 801a9a6:	bc70      	pop	{r4, r5, r6}
 801a9a8:	f7ff bfdc 	b.w	801a964 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a9ac:	bc70      	pop	{r4, r5, r6}
 801a9ae:	4770      	bx	lr
 801a9b0:	240264a8 	.word	0x240264a8
 801a9b4:	240264a0 	.word	0x240264a0

0801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a9b8:	4a12      	ldr	r2, [pc, #72]	@ (801aa04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a9ba:	8803      	ldrh	r3, [r0, #0]
 801a9bc:	8812      	ldrh	r2, [r2, #0]
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	d207      	bcs.n	801a9d2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a9c2:	4a11      	ldr	r2, [pc, #68]	@ (801aa08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a9c4:	2114      	movs	r1, #20
 801a9c6:	6812      	ldr	r2, [r2, #0]
 801a9c8:	fb01 2303 	mla	r3, r1, r3, r2
 801a9cc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a9d0:	4770      	bx	lr
 801a9d2:	490e      	ldr	r1, [pc, #56]	@ (801aa0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a9d4:	8809      	ldrh	r1, [r1, #0]
 801a9d6:	4411      	add	r1, r2
 801a9d8:	428b      	cmp	r3, r1
 801a9da:	da04      	bge.n	801a9e6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a9dc:	1a9b      	subs	r3, r3, r2
 801a9de:	4a0c      	ldr	r2, [pc, #48]	@ (801aa10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a9e0:	210e      	movs	r1, #14
 801a9e2:	6812      	ldr	r2, [r2, #0]
 801a9e4:	e7f0      	b.n	801a9c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a9e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a9ea:	4293      	cmp	r3, r2
 801a9ec:	d108      	bne.n	801aa00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a9ee:	4b09      	ldr	r3, [pc, #36]	@ (801aa14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a9f0:	781b      	ldrb	r3, [r3, #0]
 801a9f2:	b91b      	cbnz	r3, 801a9fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a9f4:	4b08      	ldr	r3, [pc, #32]	@ (801aa18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a9f6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a9fa:	4770      	bx	lr
 801a9fc:	4b07      	ldr	r3, [pc, #28]	@ (801aa1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a9fe:	e7fa      	b.n	801a9f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801aa00:	2000      	movs	r0, #0
 801aa02:	4770      	bx	lr
 801aa04:	240264a0 	.word	0x240264a0
 801aa08:	240264a8 	.word	0x240264a8
 801aa0c:	240264a4 	.word	0x240264a4
 801aa10:	24026488 	.word	0x24026488
 801aa14:	24026410 	.word	0x24026410
 801aa18:	24026412 	.word	0x24026412
 801aa1c:	24026414 	.word	0x24026414

0801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801aa20:	4a12      	ldr	r2, [pc, #72]	@ (801aa6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801aa22:	8803      	ldrh	r3, [r0, #0]
 801aa24:	8812      	ldrh	r2, [r2, #0]
 801aa26:	4293      	cmp	r3, r2
 801aa28:	d207      	bcs.n	801aa3a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801aa2a:	4a11      	ldr	r2, [pc, #68]	@ (801aa70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801aa2c:	2114      	movs	r1, #20
 801aa2e:	6812      	ldr	r2, [r2, #0]
 801aa30:	fb01 2303 	mla	r3, r1, r3, r2
 801aa34:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801aa38:	4770      	bx	lr
 801aa3a:	490e      	ldr	r1, [pc, #56]	@ (801aa74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801aa3c:	8809      	ldrh	r1, [r1, #0]
 801aa3e:	4411      	add	r1, r2
 801aa40:	428b      	cmp	r3, r1
 801aa42:	da04      	bge.n	801aa4e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801aa44:	1a9b      	subs	r3, r3, r2
 801aa46:	4a0c      	ldr	r2, [pc, #48]	@ (801aa78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801aa48:	210e      	movs	r1, #14
 801aa4a:	6812      	ldr	r2, [r2, #0]
 801aa4c:	e7f0      	b.n	801aa30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801aa4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801aa52:	4293      	cmp	r3, r2
 801aa54:	d108      	bne.n	801aa68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801aa56:	4b09      	ldr	r3, [pc, #36]	@ (801aa7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801aa58:	781b      	ldrb	r3, [r3, #0]
 801aa5a:	b91b      	cbnz	r3, 801aa64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801aa5c:	4b08      	ldr	r3, [pc, #32]	@ (801aa80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801aa5e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801aa62:	4770      	bx	lr
 801aa64:	4b07      	ldr	r3, [pc, #28]	@ (801aa84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801aa66:	e7fa      	b.n	801aa5e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801aa68:	2000      	movs	r0, #0
 801aa6a:	4770      	bx	lr
 801aa6c:	240264a0 	.word	0x240264a0
 801aa70:	240264a8 	.word	0x240264a8
 801aa74:	240264a4 	.word	0x240264a4
 801aa78:	24026488 	.word	0x24026488
 801aa7c:	24026410 	.word	0x24026410
 801aa80:	24026414 	.word	0x24026414
 801aa84:	24026412 	.word	0x24026412

0801aa88 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801aa88:	4a22      	ldr	r2, [pc, #136]	@ (801ab14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801aa8a:	b530      	push	{r4, r5, lr}
 801aa8c:	880b      	ldrh	r3, [r1, #0]
 801aa8e:	8812      	ldrh	r2, [r2, #0]
 801aa90:	4293      	cmp	r3, r2
 801aa92:	d213      	bcs.n	801aabc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801aa94:	4a20      	ldr	r2, [pc, #128]	@ (801ab18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801aa96:	2114      	movs	r1, #20
 801aa98:	6812      	ldr	r2, [r2, #0]
 801aa9a:	fb01 2303 	mla	r3, r1, r3, r2
 801aa9e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801aaa2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801aaa6:	8a1a      	ldrh	r2, [r3, #16]
 801aaa8:	8a5b      	ldrh	r3, [r3, #18]
 801aaaa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801aaae:	8004      	strh	r4, [r0, #0]
 801aab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aab4:	8041      	strh	r1, [r0, #2]
 801aab6:	8082      	strh	r2, [r0, #4]
 801aab8:	80c3      	strh	r3, [r0, #6]
 801aaba:	e024      	b.n	801ab06 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801aabc:	4917      	ldr	r1, [pc, #92]	@ (801ab1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801aabe:	8809      	ldrh	r1, [r1, #0]
 801aac0:	4411      	add	r1, r2
 801aac2:	428b      	cmp	r3, r1
 801aac4:	da10      	bge.n	801aae8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801aac6:	1a9b      	subs	r3, r3, r2
 801aac8:	220e      	movs	r2, #14
 801aaca:	4353      	muls	r3, r2
 801aacc:	4a14      	ldr	r2, [pc, #80]	@ (801ab20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801aace:	6811      	ldr	r1, [r2, #0]
 801aad0:	18ca      	adds	r2, r1, r3
 801aad2:	5ecd      	ldrsh	r5, [r1, r3]
 801aad4:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801aad8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801aadc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801aae0:	8005      	strh	r5, [r0, #0]
 801aae2:	8044      	strh	r4, [r0, #2]
 801aae4:	8081      	strh	r1, [r0, #4]
 801aae6:	e7e7      	b.n	801aab8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801aae8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801aaec:	4293      	cmp	r3, r2
 801aaee:	d10b      	bne.n	801ab08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801aaf0:	4b0c      	ldr	r3, [pc, #48]	@ (801ab24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801aaf2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801aaf6:	4b0c      	ldr	r3, [pc, #48]	@ (801ab28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801aaf8:	8081      	strh	r1, [r0, #4]
 801aafa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aafe:	2300      	movs	r3, #0
 801ab00:	80c2      	strh	r2, [r0, #6]
 801ab02:	8003      	strh	r3, [r0, #0]
 801ab04:	8043      	strh	r3, [r0, #2]
 801ab06:	bd30      	pop	{r4, r5, pc}
 801ab08:	2300      	movs	r3, #0
 801ab0a:	8003      	strh	r3, [r0, #0]
 801ab0c:	8043      	strh	r3, [r0, #2]
 801ab0e:	8083      	strh	r3, [r0, #4]
 801ab10:	e7d2      	b.n	801aab8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ab12:	bf00      	nop
 801ab14:	240264a0 	.word	0x240264a0
 801ab18:	240264a8 	.word	0x240264a8
 801ab1c:	240264a4 	.word	0x240264a4
 801ab20:	24026488 	.word	0x24026488
 801ab24:	2402640c 	.word	0x2402640c
 801ab28:	2402640e 	.word	0x2402640e

0801ab2c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ab2c:	4a12      	ldr	r2, [pc, #72]	@ (801ab78 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ab2e:	8803      	ldrh	r3, [r0, #0]
 801ab30:	8811      	ldrh	r1, [r2, #0]
 801ab32:	428b      	cmp	r3, r1
 801ab34:	d20b      	bcs.n	801ab4e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ab36:	4a11      	ldr	r2, [pc, #68]	@ (801ab7c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ab38:	6812      	ldr	r2, [r2, #0]
 801ab3a:	b112      	cbz	r2, 801ab42 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ab3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ab40:	b9c0      	cbnz	r0, 801ab74 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801ab42:	4a0f      	ldr	r2, [pc, #60]	@ (801ab80 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ab44:	6811      	ldr	r1, [r2, #0]
 801ab46:	2214      	movs	r2, #20
 801ab48:	4353      	muls	r3, r2
 801ab4a:	58c8      	ldr	r0, [r1, r3]
 801ab4c:	4770      	bx	lr
 801ab4e:	4a0d      	ldr	r2, [pc, #52]	@ (801ab84 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ab50:	8812      	ldrh	r2, [r2, #0]
 801ab52:	440a      	add	r2, r1
 801ab54:	4293      	cmp	r3, r2
 801ab56:	da04      	bge.n	801ab62 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ab58:	4a08      	ldr	r2, [pc, #32]	@ (801ab7c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ab5a:	6812      	ldr	r2, [r2, #0]
 801ab5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ab60:	4770      	bx	lr
 801ab62:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ab66:	4293      	cmp	r3, r2
 801ab68:	d103      	bne.n	801ab72 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ab6a:	4b07      	ldr	r3, [pc, #28]	@ (801ab88 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801ab70:	4770      	bx	lr
 801ab72:	2000      	movs	r0, #0
 801ab74:	4770      	bx	lr
 801ab76:	bf00      	nop
 801ab78:	240264a0 	.word	0x240264a0
 801ab7c:	24026484 	.word	0x24026484
 801ab80:	240264a8 	.word	0x240264a8
 801ab84:	240264a4 	.word	0x240264a4
 801ab88:	24026418 	.word	0x24026418

0801ab8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ab8c:	4b24      	ldr	r3, [pc, #144]	@ (801ac20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ab8e:	8802      	ldrh	r2, [r0, #0]
 801ab90:	8818      	ldrh	r0, [r3, #0]
 801ab92:	4282      	cmp	r2, r0
 801ab94:	d221      	bcs.n	801abda <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ab96:	4b23      	ldr	r3, [pc, #140]	@ (801ac24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ab98:	6819      	ldr	r1, [r3, #0]
 801ab9a:	2314      	movs	r3, #20
 801ab9c:	fb03 1302 	mla	r3, r3, r2, r1
 801aba0:	6858      	ldr	r0, [r3, #4]
 801aba2:	2800      	cmp	r0, #0
 801aba4:	d03a      	beq.n	801ac1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801aba6:	4920      	ldr	r1, [pc, #128]	@ (801ac28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801aba8:	6809      	ldr	r1, [r1, #0]
 801abaa:	2900      	cmp	r1, #0
 801abac:	d036      	beq.n	801ac1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801abae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801abb2:	2900      	cmp	r1, #0
 801abb4:	d032      	beq.n	801ac1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801abb6:	891a      	ldrh	r2, [r3, #8]
 801abb8:	8958      	ldrh	r0, [r3, #10]
 801abba:	4350      	muls	r0, r2
 801abbc:	7c5a      	ldrb	r2, [r3, #17]
 801abbe:	7cdb      	ldrb	r3, [r3, #19]
 801abc0:	0952      	lsrs	r2, r2, #5
 801abc2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801abc6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801abca:	2b0b      	cmp	r3, #11
 801abcc:	bf18      	it	ne
 801abce:	0040      	lslne	r0, r0, #1
 801abd0:	3003      	adds	r0, #3
 801abd2:	f020 0003 	bic.w	r0, r0, #3
 801abd6:	4408      	add	r0, r1
 801abd8:	4770      	bx	lr
 801abda:	4b14      	ldr	r3, [pc, #80]	@ (801ac2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801abdc:	881b      	ldrh	r3, [r3, #0]
 801abde:	4403      	add	r3, r0
 801abe0:	429a      	cmp	r2, r3
 801abe2:	da1a      	bge.n	801ac1a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801abe4:	4b12      	ldr	r3, [pc, #72]	@ (801ac30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801abe6:	1a10      	subs	r0, r2, r0
 801abe8:	210e      	movs	r1, #14
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	fb01 3000 	mla	r0, r1, r0, r3
 801abf0:	7b03      	ldrb	r3, [r0, #12]
 801abf2:	f003 031f 	and.w	r3, r3, #31
 801abf6:	2b0b      	cmp	r3, #11
 801abf8:	d10b      	bne.n	801ac12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801abfa:	8903      	ldrh	r3, [r0, #8]
 801abfc:	8940      	ldrh	r0, [r0, #10]
 801abfe:	4358      	muls	r0, r3
 801ac00:	4b09      	ldr	r3, [pc, #36]	@ (801ac28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ac02:	3003      	adds	r0, #3
 801ac04:	6819      	ldr	r1, [r3, #0]
 801ac06:	f020 0303 	bic.w	r3, r0, #3
 801ac0a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ac0e:	4418      	add	r0, r3
 801ac10:	4770      	bx	lr
 801ac12:	2b0d      	cmp	r3, #13
 801ac14:	d101      	bne.n	801ac1a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ac16:	300d      	adds	r0, #13
 801ac18:	4770      	bx	lr
 801ac1a:	2000      	movs	r0, #0
 801ac1c:	4770      	bx	lr
 801ac1e:	bf00      	nop
 801ac20:	240264a0 	.word	0x240264a0
 801ac24:	240264a8 	.word	0x240264a8
 801ac28:	24026484 	.word	0x24026484
 801ac2c:	240264a4 	.word	0x240264a4
 801ac30:	24026488 	.word	0x24026488

0801ac34 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ac34:	4b1f      	ldr	r3, [pc, #124]	@ (801acb4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801ac36:	b510      	push	{r4, lr}
 801ac38:	8802      	ldrh	r2, [r0, #0]
 801ac3a:	881b      	ldrh	r3, [r3, #0]
 801ac3c:	429a      	cmp	r2, r3
 801ac3e:	d21a      	bcs.n	801ac76 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801ac40:	4b1d      	ldr	r3, [pc, #116]	@ (801acb8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801ac42:	2114      	movs	r1, #20
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	fb01 3102 	mla	r1, r1, r2, r3
 801ac4a:	7c4b      	ldrb	r3, [r1, #17]
 801ac4c:	0958      	lsrs	r0, r3, #5
 801ac4e:	7ccb      	ldrb	r3, [r1, #19]
 801ac50:	491a      	ldr	r1, [pc, #104]	@ (801acbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801ac52:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ac56:	6809      	ldr	r1, [r1, #0]
 801ac58:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801ac5c:	b2d8      	uxtb	r0, r3
 801ac5e:	b149      	cbz	r1, 801ac74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ac60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801ac64:	b132      	cbz	r2, 801ac74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ac66:	2b0e      	cmp	r3, #14
 801ac68:	d021      	beq.n	801acae <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801ac6a:	280f      	cmp	r0, #15
 801ac6c:	d01d      	beq.n	801acaa <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801ac6e:	2810      	cmp	r0, #16
 801ac70:	bf08      	it	eq
 801ac72:	2002      	moveq	r0, #2
 801ac74:	bd10      	pop	{r4, pc}
 801ac76:	4912      	ldr	r1, [pc, #72]	@ (801acc0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801ac78:	8809      	ldrh	r1, [r1, #0]
 801ac7a:	4419      	add	r1, r3
 801ac7c:	428a      	cmp	r2, r1
 801ac7e:	da09      	bge.n	801ac94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801ac80:	1ad3      	subs	r3, r2, r3
 801ac82:	4a10      	ldr	r2, [pc, #64]	@ (801acc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801ac84:	210e      	movs	r1, #14
 801ac86:	6812      	ldr	r2, [r2, #0]
 801ac88:	fb01 2303 	mla	r3, r1, r3, r2
 801ac8c:	7b18      	ldrb	r0, [r3, #12]
 801ac8e:	f000 001f 	and.w	r0, r0, #31
 801ac92:	e7ef      	b.n	801ac74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801ac94:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	d108      	bne.n	801acae <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801ac9c:	f7e9 fb4e 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 801aca0:	6803      	ldr	r3, [r0, #0]
 801aca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aca8:	4718      	bx	r3
 801acaa:	2001      	movs	r0, #1
 801acac:	e7e2      	b.n	801ac74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801acae:	2000      	movs	r0, #0
 801acb0:	e7e0      	b.n	801ac74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801acb2:	bf00      	nop
 801acb4:	240264a0 	.word	0x240264a0
 801acb8:	240264a8 	.word	0x240264a8
 801acbc:	24026484 	.word	0x24026484
 801acc0:	240264a4 	.word	0x240264a4
 801acc4:	24026488 	.word	0x24026488

0801acc8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801acc8:	2018      	movs	r0, #24
 801acca:	4770      	bx	lr

0801accc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801accc:	2001      	movs	r0, #1
 801acce:	4770      	bx	lr

0801acd0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801acd0:	4b02      	ldr	r3, [pc, #8]	@ (801acdc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801acd2:	8818      	ldrh	r0, [r3, #0]
 801acd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801acd8:	b280      	uxth	r0, r0
 801acda:	4770      	bx	lr
 801acdc:	24026412 	.word	0x24026412

0801ace0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ace0:	2bff      	cmp	r3, #255	@ 0xff
 801ace2:	d04c      	beq.n	801ad7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ace4:	2a2c      	cmp	r2, #44	@ 0x2c
 801ace6:	d030      	beq.n	801ad4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801ace8:	d80f      	bhi.n	801ad0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801acea:	2a08      	cmp	r2, #8
 801acec:	d043      	beq.n	801ad76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801acee:	d805      	bhi.n	801acfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801acf0:	2a04      	cmp	r2, #4
 801acf2:	d03e      	beq.n	801ad72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801acf4:	2a05      	cmp	r2, #5
 801acf6:	d03a      	beq.n	801ad6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801acf8:	2300      	movs	r3, #0
 801acfa:	e024      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801acfc:	2a0a      	cmp	r2, #10
 801acfe:	d03a      	beq.n	801ad76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ad00:	d301      	bcc.n	801ad06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801ad02:	2a0b      	cmp	r2, #11
 801ad04:	d1f8      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ad06:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801ad08:	e01d      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad0a:	2a30      	cmp	r2, #48	@ 0x30
 801ad0c:	d035      	beq.n	801ad7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ad0e:	d80a      	bhi.n	801ad26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801ad10:	2a2e      	cmp	r2, #46	@ 0x2e
 801ad12:	684b      	ldr	r3, [r1, #4]
 801ad14:	d023      	beq.n	801ad5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ad16:	d90d      	bls.n	801ad34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801ad18:	781a      	ldrb	r2, [r3, #0]
 801ad1a:	785b      	ldrb	r3, [r3, #1]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d1eb      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ad20:	b98a      	cbnz	r2, 801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad22:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801ad24:	e00f      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad26:	2a32      	cmp	r2, #50	@ 0x32
 801ad28:	d027      	beq.n	801ad7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ad2a:	d301      	bcc.n	801ad30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801ad2c:	2a33      	cmp	r2, #51	@ 0x33
 801ad2e:	d1e3      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ad30:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801ad32:	e008      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad34:	781a      	ldrb	r2, [r3, #0]
 801ad36:	785b      	ldrb	r3, [r3, #1]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d1dd      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ad3c:	2a00      	cmp	r2, #0
 801ad3e:	d0f0      	beq.n	801ad22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801ad40:	2a01      	cmp	r2, #1
 801ad42:	d1d9      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ad44:	6943      	ldr	r3, [r0, #20]
 801ad46:	4618      	mov	r0, r3
 801ad48:	4770      	bx	lr
 801ad4a:	684b      	ldr	r3, [r1, #4]
 801ad4c:	781a      	ldrb	r2, [r3, #0]
 801ad4e:	785b      	ldrb	r3, [r3, #1]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d1d1      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ad54:	b14a      	cbz	r2, 801ad6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801ad56:	2a01      	cmp	r2, #1
 801ad58:	bf08      	it	eq
 801ad5a:	68c3      	ldreq	r3, [r0, #12]
 801ad5c:	e7f3      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad5e:	781a      	ldrb	r2, [r3, #0]
 801ad60:	785b      	ldrb	r3, [r3, #1]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d1c8      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ad66:	2a00      	cmp	r2, #0
 801ad68:	d1ed      	bne.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad6a:	69c3      	ldr	r3, [r0, #28]
 801ad6c:	e7eb      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad6e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801ad70:	e7e9      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad72:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801ad74:	e7e7      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad76:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801ad78:	e7e5      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad7a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801ad7c:	e7e3      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad7e:	2a2c      	cmp	r2, #44	@ 0x2c
 801ad80:	d030      	beq.n	801ade4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801ad82:	d80f      	bhi.n	801ada4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801ad84:	2a08      	cmp	r2, #8
 801ad86:	d042      	beq.n	801ae0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801ad88:	d805      	bhi.n	801ad96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801ad8a:	2a04      	cmp	r2, #4
 801ad8c:	d03d      	beq.n	801ae0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801ad8e:	2a05      	cmp	r2, #5
 801ad90:	d1b2      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ad92:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801ad94:	e7d7      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ad96:	2a0a      	cmp	r2, #10
 801ad98:	d039      	beq.n	801ae0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801ad9a:	d301      	bcc.n	801ada0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801ad9c:	2a0b      	cmp	r2, #11
 801ad9e:	d1ab      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ada0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801ada2:	e7d0      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ada4:	2a30      	cmp	r2, #48	@ 0x30
 801ada6:	d034      	beq.n	801ae12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ada8:	d80b      	bhi.n	801adc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801adaa:	2a2e      	cmp	r2, #46	@ 0x2e
 801adac:	684b      	ldr	r3, [r1, #4]
 801adae:	d023      	beq.n	801adf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801adb0:	d90e      	bls.n	801add0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801adb2:	781a      	ldrb	r2, [r3, #0]
 801adb4:	785b      	ldrb	r3, [r3, #1]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d19e      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801adba:	2a00      	cmp	r2, #0
 801adbc:	d1c3      	bne.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801adbe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801adc0:	e7c1      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801adc2:	2a32      	cmp	r2, #50	@ 0x32
 801adc4:	d025      	beq.n	801ae12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801adc6:	d301      	bcc.n	801adcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801adc8:	2a33      	cmp	r2, #51	@ 0x33
 801adca:	d195      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801adcc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801adce:	e7ba      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801add0:	781a      	ldrb	r2, [r3, #0]
 801add2:	785b      	ldrb	r3, [r3, #1]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d18f      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801add8:	2a00      	cmp	r2, #0
 801adda:	d0f0      	beq.n	801adbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801addc:	2a01      	cmp	r2, #1
 801adde:	d18b      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ade0:	6983      	ldr	r3, [r0, #24]
 801ade2:	e7b0      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ade4:	684b      	ldr	r3, [r1, #4]
 801ade6:	781a      	ldrb	r2, [r3, #0]
 801ade8:	785b      	ldrb	r3, [r3, #1]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d184      	bne.n	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801adee:	b152      	cbz	r2, 801ae06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801adf0:	2a01      	cmp	r2, #1
 801adf2:	bf08      	it	eq
 801adf4:	6903      	ldreq	r3, [r0, #16]
 801adf6:	e7a6      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801adf8:	781a      	ldrb	r2, [r3, #0]
 801adfa:	785b      	ldrb	r3, [r3, #1]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	f47f af7b 	bne.w	801acf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ae02:	2a00      	cmp	r2, #0
 801ae04:	d19f      	bne.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ae06:	6a03      	ldr	r3, [r0, #32]
 801ae08:	e79d      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ae0a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801ae0c:	e79b      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ae0e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801ae10:	e799      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ae12:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801ae14:	e797      	b.n	801ad46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801ae16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae1a:	b085      	sub	sp, #20
 801ae1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ae1e:	9203      	str	r2, [sp, #12]
 801ae20:	6870      	ldr	r0, [r6, #4]
 801ae22:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ae26:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801ae2a:	9101      	str	r1, [sp, #4]
 801ae2c:	fa1f f885 	uxth.w	r8, r5
 801ae30:	43ed      	mvns	r5, r5
 801ae32:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ae36:	b2ed      	uxtb	r5, r5
 801ae38:	fb00 2404 	mla	r4, r0, r4, r2
 801ae3c:	6832      	ldr	r2, [r6, #0]
 801ae3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ae42:	4414      	add	r4, r2
 801ae44:	f8dc 2000 	ldr.w	r2, [ip]
 801ae48:	9202      	str	r2, [sp, #8]
 801ae4a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ae4e:	f102 0e04 	add.w	lr, r2, #4
 801ae52:	9a01      	ldr	r2, [sp, #4]
 801ae54:	2a00      	cmp	r2, #0
 801ae56:	dc03      	bgt.n	801ae60 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ae58:	9a03      	ldr	r2, [sp, #12]
 801ae5a:	2a00      	cmp	r2, #0
 801ae5c:	f340 8116 	ble.w	801b08c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ae60:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ae62:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801ae66:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ae6a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ae6c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801ae70:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	dd0e      	ble.n	801ae96 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ae78:	1406      	asrs	r6, r0, #16
 801ae7a:	d405      	bmi.n	801ae88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae7c:	4556      	cmp	r6, sl
 801ae7e:	da03      	bge.n	801ae88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae80:	1416      	asrs	r6, r2, #16
 801ae82:	d401      	bmi.n	801ae88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ae84:	454e      	cmp	r6, r9
 801ae86:	db07      	blt.n	801ae98 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ae88:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ae8a:	3b01      	subs	r3, #1
 801ae8c:	3403      	adds	r4, #3
 801ae8e:	4430      	add	r0, r6
 801ae90:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801ae92:	4432      	add	r2, r6
 801ae94:	e7ee      	b.n	801ae74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ae96:	d063      	beq.n	801af60 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ae98:	1e5e      	subs	r6, r3, #1
 801ae9a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801ae9c:	fb07 0706 	mla	r7, r7, r6, r0
 801aea0:	143f      	asrs	r7, r7, #16
 801aea2:	d454      	bmi.n	801af4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aea4:	4557      	cmp	r7, sl
 801aea6:	da52      	bge.n	801af4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aea8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801aeaa:	fb07 2606 	mla	r6, r7, r6, r2
 801aeae:	1436      	asrs	r6, r6, #16
 801aeb0:	d44d      	bmi.n	801af4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aeb2:	454e      	cmp	r6, r9
 801aeb4:	da4b      	bge.n	801af4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aeb6:	1ce6      	adds	r6, r4, #3
 801aeb8:	4699      	mov	r9, r3
 801aeba:	f1b9 0f00 	cmp.w	r9, #0
 801aebe:	f106 0603 	add.w	r6, r6, #3
 801aec2:	dd48      	ble.n	801af56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801aec4:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801aec8:	1417      	asrs	r7, r2, #16
 801aeca:	9902      	ldr	r1, [sp, #8]
 801aecc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801aed0:	f109 39ff 	add.w	r9, r9, #4294967295
 801aed4:	fb0b 1707 	mla	r7, fp, r7, r1
 801aed8:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801aedc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801aede:	f817 700a 	ldrb.w	r7, [r7, sl]
 801aee2:	fb1b fb05 	smulbb	fp, fp, r5
 801aee6:	4408      	add	r0, r1
 801aee8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801aeea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801aeee:	440a      	add	r2, r1
 801aef0:	eb0e 0a07 	add.w	sl, lr, r7
 801aef4:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801aef8:	fb07 b708 	mla	r7, r7, r8, fp
 801aefc:	b2bf      	uxth	r7, r7
 801aefe:	f107 0b01 	add.w	fp, r7, #1
 801af02:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801af06:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801af0a:	fb1b fb05 	smulbb	fp, fp, r5
 801af0e:	123f      	asrs	r7, r7, #8
 801af10:	f806 7c06 	strb.w	r7, [r6, #-6]
 801af14:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801af18:	fb07 b708 	mla	r7, r7, r8, fp
 801af1c:	b2bf      	uxth	r7, r7
 801af1e:	f107 0b01 	add.w	fp, r7, #1
 801af22:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801af26:	123f      	asrs	r7, r7, #8
 801af28:	f806 7c05 	strb.w	r7, [r6, #-5]
 801af2c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801af30:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801af34:	fb1a fa05 	smulbb	sl, sl, r5
 801af38:	fb07 a708 	mla	r7, r7, r8, sl
 801af3c:	b2bf      	uxth	r7, r7
 801af3e:	f107 0a01 	add.w	sl, r7, #1
 801af42:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801af46:	123f      	asrs	r7, r7, #8
 801af48:	f806 7c04 	strb.w	r7, [r6, #-4]
 801af4c:	e7b5      	b.n	801aeba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801af4e:	2700      	movs	r7, #0
 801af50:	1bde      	subs	r6, r3, r7
 801af52:	2e00      	cmp	r6, #0
 801af54:	dc42      	bgt.n	801afdc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801af56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801af5e:	441c      	add	r4, r3
 801af60:	9b01      	ldr	r3, [sp, #4]
 801af62:	2b00      	cmp	r3, #0
 801af64:	f340 8092 	ble.w	801b08c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801af68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801af6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801af6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801af72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801af76:	eef0 6a62 	vmov.f32	s13, s5
 801af7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801af7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801af82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af86:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801af8a:	eef0 6a43 	vmov.f32	s13, s6
 801af8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af92:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801af96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801af9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801af9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801afa2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801afa6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801afaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801afae:	ee12 2a90 	vmov	r2, s5
 801afb2:	eef0 2a47 	vmov.f32	s5, s14
 801afb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801afba:	ee13 2a10 	vmov	r2, s6
 801afbe:	9311      	str	r3, [sp, #68]	@ 0x44
 801afc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801afc2:	eeb0 3a67 	vmov.f32	s6, s15
 801afc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801afca:	9312      	str	r3, [sp, #72]	@ 0x48
 801afcc:	9b01      	ldr	r3, [sp, #4]
 801afce:	9a03      	ldr	r2, [sp, #12]
 801afd0:	3b01      	subs	r3, #1
 801afd2:	9301      	str	r3, [sp, #4]
 801afd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801afd6:	bf08      	it	eq
 801afd8:	4613      	moveq	r3, r2
 801afda:	e73a      	b.n	801ae52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801afdc:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801afe0:	d44e      	bmi.n	801b080 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801afe2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801afe6:	4556      	cmp	r6, sl
 801afe8:	dd4a      	ble.n	801b080 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801afea:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801afee:	d447      	bmi.n	801b080 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801aff0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801aff4:	4559      	cmp	r1, fp
 801aff6:	dd43      	ble.n	801b080 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801aff8:	fa0f f986 	sxth.w	r9, r6
 801affc:	9902      	ldr	r1, [sp, #8]
 801affe:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b002:	fb0b 1909 	mla	r9, fp, r9, r1
 801b006:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b00a:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b00e:	fb1b fb05 	smulbb	fp, fp, r5
 801b012:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b016:	eb0e 0a09 	add.w	sl, lr, r9
 801b01a:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801b01e:	fb09 b908 	mla	r9, r9, r8, fp
 801b022:	fa1f f989 	uxth.w	r9, r9
 801b026:	f109 0b01 	add.w	fp, r9, #1
 801b02a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b02e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b032:	f804 9006 	strb.w	r9, [r4, r6]
 801b036:	4426      	add	r6, r4
 801b038:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b03c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b040:	fb1b fb05 	smulbb	fp, fp, r5
 801b044:	fb09 b908 	mla	r9, r9, r8, fp
 801b048:	fa1f f989 	uxth.w	r9, r9
 801b04c:	f109 0b01 	add.w	fp, r9, #1
 801b050:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b054:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b058:	f886 9001 	strb.w	r9, [r6, #1]
 801b05c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b060:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b064:	fb1a fa05 	smulbb	sl, sl, r5
 801b068:	fb09 a908 	mla	r9, r9, r8, sl
 801b06c:	fa1f f989 	uxth.w	r9, r9
 801b070:	f109 0a01 	add.w	sl, r9, #1
 801b074:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b078:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b07c:	f886 9002 	strb.w	r9, [r6, #2]
 801b080:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b082:	3701      	adds	r7, #1
 801b084:	4408      	add	r0, r1
 801b086:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b088:	440a      	add	r2, r1
 801b08a:	e761      	b.n	801af50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b08c:	b005      	add	sp, #20
 801b08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b092 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b096:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b098:	4693      	mov	fp, r2
 801b09a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b09c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b0a0:	6868      	ldr	r0, [r5, #4]
 801b0a2:	6877      	ldr	r7, [r6, #4]
 801b0a4:	9100      	str	r1, [sp, #0]
 801b0a6:	3704      	adds	r7, #4
 801b0a8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801b0ac:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801b0b0:	fb00 2404 	mla	r4, r0, r4, r2
 801b0b4:	682a      	ldr	r2, [r5, #0]
 801b0b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b0ba:	4414      	add	r4, r2
 801b0bc:	6832      	ldr	r2, [r6, #0]
 801b0be:	9201      	str	r2, [sp, #4]
 801b0c0:	9a00      	ldr	r2, [sp, #0]
 801b0c2:	2a00      	cmp	r2, #0
 801b0c4:	dc03      	bgt.n	801b0ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b0c6:	f1bb 0f00 	cmp.w	fp, #0
 801b0ca:	f340 80bc 	ble.w	801b246 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b0ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b0d0:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801b0d4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b0d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b0da:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801b0de:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	dd0c      	ble.n	801b100 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b0e6:	1405      	asrs	r5, r0, #16
 801b0e8:	d405      	bmi.n	801b0f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b0ea:	4555      	cmp	r5, sl
 801b0ec:	da03      	bge.n	801b0f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b0ee:	1415      	asrs	r5, r2, #16
 801b0f0:	d401      	bmi.n	801b0f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b0f2:	454d      	cmp	r5, r9
 801b0f4:	db05      	blt.n	801b102 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b0f6:	4440      	add	r0, r8
 801b0f8:	4472      	add	r2, lr
 801b0fa:	3b01      	subs	r3, #1
 801b0fc:	3403      	adds	r4, #3
 801b0fe:	e7f0      	b.n	801b0e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b100:	d03f      	beq.n	801b182 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801b102:	1e5d      	subs	r5, r3, #1
 801b104:	fb08 0c05 	mla	ip, r8, r5, r0
 801b108:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b10c:	d42e      	bmi.n	801b16c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b10e:	45d4      	cmp	ip, sl
 801b110:	da2c      	bge.n	801b16c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b112:	fb0e 2505 	mla	r5, lr, r5, r2
 801b116:	142d      	asrs	r5, r5, #16
 801b118:	d428      	bmi.n	801b16c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b11a:	454d      	cmp	r5, r9
 801b11c:	da26      	bge.n	801b16c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b11e:	1ce5      	adds	r5, r4, #3
 801b120:	469c      	mov	ip, r3
 801b122:	f1bc 0f00 	cmp.w	ip, #0
 801b126:	f105 0503 	add.w	r5, r5, #3
 801b12a:	dd25      	ble.n	801b178 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801b12c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b130:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b134:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b138:	4472      	add	r2, lr
 801b13a:	468a      	mov	sl, r1
 801b13c:	9901      	ldr	r1, [sp, #4]
 801b13e:	fb0a 1909 	mla	r9, sl, r9, r1
 801b142:	1401      	asrs	r1, r0, #16
 801b144:	4440      	add	r0, r8
 801b146:	f819 9001 	ldrb.w	r9, [r9, r1]
 801b14a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b14e:	eb07 0a09 	add.w	sl, r7, r9
 801b152:	f817 9009 	ldrb.w	r9, [r7, r9]
 801b156:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b15a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b15e:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b162:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b166:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b16a:	e7da      	b.n	801b122 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b16c:	2500      	movs	r5, #0
 801b16e:	eba3 0c05 	sub.w	ip, r3, r5
 801b172:	f1bc 0f00 	cmp.w	ip, #0
 801b176:	dc3b      	bgt.n	801b1f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b178:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b17c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b180:	441c      	add	r4, r3
 801b182:	9b00      	ldr	r3, [sp, #0]
 801b184:	2b00      	cmp	r3, #0
 801b186:	dd5e      	ble.n	801b246 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b188:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b18c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b18e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b192:	eeb0 6a62 	vmov.f32	s12, s5
 801b196:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b19a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b19e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1a2:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801b1a6:	eeb0 6a43 	vmov.f32	s12, s6
 801b1aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1ae:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801b1b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b1b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b1ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b1be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b1c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b1c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b1ca:	ee12 2a90 	vmov	r2, s5
 801b1ce:	eef0 2a47 	vmov.f32	s5, s14
 801b1d2:	fb92 f8f3 	sdiv	r8, r2, r3
 801b1d6:	ee13 2a10 	vmov	r2, s6
 801b1da:	eeb0 3a67 	vmov.f32	s6, s15
 801b1de:	fb92 fef3 	sdiv	lr, r2, r3
 801b1e2:	9b00      	ldr	r3, [sp, #0]
 801b1e4:	3b01      	subs	r3, #1
 801b1e6:	9300      	str	r3, [sp, #0]
 801b1e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b1ea:	bf08      	it	eq
 801b1ec:	465b      	moveq	r3, fp
 801b1ee:	e767      	b.n	801b0c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b1f0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b1f4:	d423      	bmi.n	801b23e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b1f6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801b1fa:	45cc      	cmp	ip, r9
 801b1fc:	dd1f      	ble.n	801b23e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b1fe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b202:	d41c      	bmi.n	801b23e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b204:	68f1      	ldr	r1, [r6, #12]
 801b206:	4551      	cmp	r1, sl
 801b208:	dd19      	ble.n	801b23e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b20a:	fa0f fc8c 	sxth.w	ip, ip
 801b20e:	9901      	ldr	r1, [sp, #4]
 801b210:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801b214:	f81c c009 	ldrb.w	ip, [ip, r9]
 801b218:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b21c:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801b220:	eb07 090c 	add.w	r9, r7, ip
 801b224:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801b228:	f804 a00c 	strb.w	sl, [r4, ip]
 801b22c:	44a4      	add	ip, r4
 801b22e:	f899 a001 	ldrb.w	sl, [r9, #1]
 801b232:	f88c a001 	strb.w	sl, [ip, #1]
 801b236:	f899 9002 	ldrb.w	r9, [r9, #2]
 801b23a:	f88c 9002 	strb.w	r9, [ip, #2]
 801b23e:	4440      	add	r0, r8
 801b240:	4472      	add	r2, lr
 801b242:	3501      	adds	r5, #1
 801b244:	e793      	b.n	801b16e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801b246:	b003      	add	sp, #12
 801b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b24c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b250:	b085      	sub	sp, #20
 801b252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b256:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b258:	9202      	str	r2, [sp, #8]
 801b25a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801b25e:	6860      	ldr	r0, [r4, #4]
 801b260:	9203      	str	r2, [sp, #12]
 801b262:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b266:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801b26a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801b26e:	fb00 2505 	mla	r5, r0, r5, r2
 801b272:	6822      	ldr	r2, [r4, #0]
 801b274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b278:	4415      	add	r5, r2
 801b27a:	f8dc 2000 	ldr.w	r2, [ip]
 801b27e:	9200      	str	r2, [sp, #0]
 801b280:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b284:	3204      	adds	r2, #4
 801b286:	9201      	str	r2, [sp, #4]
 801b288:	2900      	cmp	r1, #0
 801b28a:	dc03      	bgt.n	801b294 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b28c:	9a02      	ldr	r2, [sp, #8]
 801b28e:	2a00      	cmp	r2, #0
 801b290:	f340 8127 	ble.w	801b4e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b294:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b296:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b29a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b29e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b2a0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b2a4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	dd0d      	ble.n	801b2c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b2ac:	1422      	asrs	r2, r4, #16
 801b2ae:	d405      	bmi.n	801b2bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b2b0:	4542      	cmp	r2, r8
 801b2b2:	da03      	bge.n	801b2bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b2b4:	1402      	asrs	r2, r0, #16
 801b2b6:	d401      	bmi.n	801b2bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b2b8:	42ba      	cmp	r2, r7
 801b2ba:	db06      	blt.n	801b2ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b2bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b2be:	4474      	add	r4, lr
 801b2c0:	3b01      	subs	r3, #1
 801b2c2:	3503      	adds	r5, #3
 801b2c4:	4410      	add	r0, r2
 801b2c6:	e7ef      	b.n	801b2a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b2c8:	d075      	beq.n	801b3b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b2ca:	1e5a      	subs	r2, r3, #1
 801b2cc:	fb0e 4602 	mla	r6, lr, r2, r4
 801b2d0:	1436      	asrs	r6, r6, #16
 801b2d2:	d465      	bmi.n	801b3a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b2d4:	4546      	cmp	r6, r8
 801b2d6:	da63      	bge.n	801b3a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b2d8:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b2da:	fb06 0202 	mla	r2, r6, r2, r0
 801b2de:	1412      	asrs	r2, r2, #16
 801b2e0:	d45e      	bmi.n	801b3a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b2e2:	42ba      	cmp	r2, r7
 801b2e4:	da5c      	bge.n	801b3a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b2e6:	1cef      	adds	r7, r5, #3
 801b2e8:	4699      	mov	r9, r3
 801b2ea:	f1b9 0f00 	cmp.w	r9, #0
 801b2ee:	dd5d      	ble.n	801b3ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801b2f0:	1402      	asrs	r2, r0, #16
 801b2f2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b2f6:	1426      	asrs	r6, r4, #16
 801b2f8:	4692      	mov	sl, r2
 801b2fa:	9a00      	ldr	r2, [sp, #0]
 801b2fc:	fb08 220a 	mla	r2, r8, sl, r2
 801b300:	5d92      	ldrb	r2, [r2, r6]
 801b302:	9e01      	ldr	r6, [sp, #4]
 801b304:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b308:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801b30c:	d041      	beq.n	801b392 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b30e:	9a03      	ldr	r2, [sp, #12]
 801b310:	fa5f fb86 	uxtb.w	fp, r6
 801b314:	fb02 f808 	mul.w	r8, r2, r8
 801b318:	f108 0201 	add.w	r2, r8, #1
 801b31c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801b320:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801b324:	1212      	asrs	r2, r2, #8
 801b326:	fa1f fa82 	uxth.w	sl, r2
 801b32a:	43d2      	mvns	r2, r2
 801b32c:	fb1b fb0a 	smulbb	fp, fp, sl
 801b330:	b2d2      	uxtb	r2, r2
 801b332:	fb08 b802 	mla	r8, r8, r2, fp
 801b336:	fa1f f888 	uxth.w	r8, r8
 801b33a:	f108 0b01 	add.w	fp, r8, #1
 801b33e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b342:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b346:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b34a:	fb1b fb0a 	smulbb	fp, fp, sl
 801b34e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b352:	fb16 fa0a 	smulbb	sl, r6, sl
 801b356:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b35a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801b35e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801b362:	fb06 aa02 	mla	sl, r6, r2, sl
 801b366:	fb08 b802 	mla	r8, r8, r2, fp
 801b36a:	fa1f fa8a 	uxth.w	sl, sl
 801b36e:	fa1f f888 	uxth.w	r8, r8
 801b372:	f10a 0601 	add.w	r6, sl, #1
 801b376:	f108 0b01 	add.w	fp, r8, #1
 801b37a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b37e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b382:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b386:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b38a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b38e:	f807 8c02 	strb.w	r8, [r7, #-2]
 801b392:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b394:	4474      	add	r4, lr
 801b396:	3703      	adds	r7, #3
 801b398:	f109 39ff 	add.w	r9, r9, #4294967295
 801b39c:	4410      	add	r0, r2
 801b39e:	e7a4      	b.n	801b2ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b3a0:	f04f 0800 	mov.w	r8, #0
 801b3a4:	eba3 0208 	sub.w	r2, r3, r8
 801b3a8:	2a00      	cmp	r2, #0
 801b3aa:	dc3b      	bgt.n	801b424 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b3ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b3b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3b4:	441d      	add	r5, r3
 801b3b6:	2900      	cmp	r1, #0
 801b3b8:	f340 8093 	ble.w	801b4e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b3bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b3c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3c6:	3901      	subs	r1, #1
 801b3c8:	eeb0 6a62 	vmov.f32	s12, s5
 801b3cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b3d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3d8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b3dc:	eeb0 6a43 	vmov.f32	s12, s6
 801b3e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b3e4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b3e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b3f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b3f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b3f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b3fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b400:	ee12 2a90 	vmov	r2, s5
 801b404:	eef0 2a47 	vmov.f32	s5, s14
 801b408:	fb92 fef3 	sdiv	lr, r2, r3
 801b40c:	ee13 2a10 	vmov	r2, s6
 801b410:	eeb0 3a67 	vmov.f32	s6, s15
 801b414:	fb92 f3f3 	sdiv	r3, r2, r3
 801b418:	9a02      	ldr	r2, [sp, #8]
 801b41a:	9312      	str	r3, [sp, #72]	@ 0x48
 801b41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b41e:	bf08      	it	eq
 801b420:	4613      	moveq	r3, r2
 801b422:	e731      	b.n	801b288 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b424:	1427      	asrs	r7, r4, #16
 801b426:	d456      	bmi.n	801b4d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b428:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b42c:	42be      	cmp	r6, r7
 801b42e:	dd52      	ble.n	801b4d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b430:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b434:	d44f      	bmi.n	801b4d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b436:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b43a:	454a      	cmp	r2, r9
 801b43c:	dd4b      	ble.n	801b4d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b43e:	9a00      	ldr	r2, [sp, #0]
 801b440:	b236      	sxth	r6, r6
 801b442:	fb09 2606 	mla	r6, r9, r6, r2
 801b446:	5df2      	ldrb	r2, [r6, r7]
 801b448:	9e01      	ldr	r6, [sp, #4]
 801b44a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801b44e:	0e3a      	lsrs	r2, r7, #24
 801b450:	d041      	beq.n	801b4d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b452:	9e03      	ldr	r6, [sp, #12]
 801b454:	fa5f fb87 	uxtb.w	fp, r7
 801b458:	4372      	muls	r2, r6
 801b45a:	1c56      	adds	r6, r2, #1
 801b45c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b460:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801b464:	1212      	asrs	r2, r2, #8
 801b466:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b46a:	fa1f fa82 	uxth.w	sl, r2
 801b46e:	43d2      	mvns	r2, r2
 801b470:	fb1b fb0a 	smulbb	fp, fp, sl
 801b474:	b2d2      	uxtb	r2, r2
 801b476:	fb09 b902 	mla	r9, r9, r2, fp
 801b47a:	fa1f f989 	uxth.w	r9, r9
 801b47e:	f109 0b01 	add.w	fp, r9, #1
 801b482:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b486:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b48a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b48e:	fb1b fb0a 	smulbb	fp, fp, sl
 801b492:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b496:	fb17 fa0a 	smulbb	sl, r7, sl
 801b49a:	f805 9006 	strb.w	r9, [r5, r6]
 801b49e:	442e      	add	r6, r5
 801b4a0:	78b7      	ldrb	r7, [r6, #2]
 801b4a2:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b4a6:	fb07 aa02 	mla	sl, r7, r2, sl
 801b4aa:	fb09 b902 	mla	r9, r9, r2, fp
 801b4ae:	fa1f fa8a 	uxth.w	sl, sl
 801b4b2:	fa1f f989 	uxth.w	r9, r9
 801b4b6:	f10a 0701 	add.w	r7, sl, #1
 801b4ba:	f109 0b01 	add.w	fp, r9, #1
 801b4be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b4c2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b4c6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b4ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b4ce:	f886 a002 	strb.w	sl, [r6, #2]
 801b4d2:	f886 9001 	strb.w	r9, [r6, #1]
 801b4d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b4d8:	4474      	add	r4, lr
 801b4da:	f108 0801 	add.w	r8, r8, #1
 801b4de:	4410      	add	r0, r2
 801b4e0:	e760      	b.n	801b3a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801b4e2:	b005      	add	sp, #20
 801b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ec:	b085      	sub	sp, #20
 801b4ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b4f2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b4f4:	9203      	str	r2, [sp, #12]
 801b4f6:	6868      	ldr	r0, [r5, #4]
 801b4f8:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b4fc:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801b500:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b504:	fb00 2404 	mla	r4, r0, r4, r2
 801b508:	682a      	ldr	r2, [r5, #0]
 801b50a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b50e:	4414      	add	r4, r2
 801b510:	f8dc 2000 	ldr.w	r2, [ip]
 801b514:	9201      	str	r2, [sp, #4]
 801b516:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b51a:	3204      	adds	r2, #4
 801b51c:	9202      	str	r2, [sp, #8]
 801b51e:	2900      	cmp	r1, #0
 801b520:	dc03      	bgt.n	801b52a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b522:	9a03      	ldr	r2, [sp, #12]
 801b524:	2a00      	cmp	r2, #0
 801b526:	f340 8137 	ble.w	801b798 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b52a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b52c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b530:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b534:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b536:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b53a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b53e:	2b00      	cmp	r3, #0
 801b540:	dd0d      	ble.n	801b55e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b542:	1405      	asrs	r5, r0, #16
 801b544:	d405      	bmi.n	801b552 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b546:	4545      	cmp	r5, r8
 801b548:	da03      	bge.n	801b552 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b54a:	1415      	asrs	r5, r2, #16
 801b54c:	d401      	bmi.n	801b552 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b54e:	42bd      	cmp	r5, r7
 801b550:	db06      	blt.n	801b560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b552:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801b554:	4470      	add	r0, lr
 801b556:	3b01      	subs	r3, #1
 801b558:	3403      	adds	r4, #3
 801b55a:	442a      	add	r2, r5
 801b55c:	e7ef      	b.n	801b53e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b55e:	d070      	beq.n	801b642 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b560:	1e5d      	subs	r5, r3, #1
 801b562:	fb0e 0605 	mla	r6, lr, r5, r0
 801b566:	1436      	asrs	r6, r6, #16
 801b568:	d462      	bmi.n	801b630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b56a:	4546      	cmp	r6, r8
 801b56c:	da60      	bge.n	801b630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b56e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b570:	fb06 2505 	mla	r5, r6, r5, r2
 801b574:	142d      	asrs	r5, r5, #16
 801b576:	d45b      	bmi.n	801b630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b578:	42bd      	cmp	r5, r7
 801b57a:	da59      	bge.n	801b630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b57c:	1ce5      	adds	r5, r4, #3
 801b57e:	469a      	mov	sl, r3
 801b580:	f1ba 0f00 	cmp.w	sl, #0
 801b584:	dd58      	ble.n	801b638 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801b586:	1416      	asrs	r6, r2, #16
 801b588:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b58c:	1407      	asrs	r7, r0, #16
 801b58e:	46b1      	mov	r9, r6
 801b590:	9e01      	ldr	r6, [sp, #4]
 801b592:	fb08 6609 	mla	r6, r8, r9, r6
 801b596:	5df6      	ldrb	r6, [r6, r7]
 801b598:	9f02      	ldr	r7, [sp, #8]
 801b59a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801b59e:	0e37      	lsrs	r7, r6, #24
 801b5a0:	2fff      	cmp	r7, #255	@ 0xff
 801b5a2:	f000 80f0 	beq.w	801b786 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801b5a6:	fa5f f887 	uxtb.w	r8, r7
 801b5aa:	b3d7      	cbz	r7, 801b622 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b5ac:	fa1f f788 	uxth.w	r7, r8
 801b5b0:	ea6f 0808 	mvn.w	r8, r8
 801b5b4:	fa5f fb86 	uxtb.w	fp, r6
 801b5b8:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801b5bc:	fa5f f888 	uxtb.w	r8, r8
 801b5c0:	fb1b fb07 	smulbb	fp, fp, r7
 801b5c4:	fb09 b908 	mla	r9, r9, r8, fp
 801b5c8:	fa1f f989 	uxth.w	r9, r9
 801b5cc:	f109 0b01 	add.w	fp, r9, #1
 801b5d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b5d4:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b5d8:	fb1b fb08 	smulbb	fp, fp, r8
 801b5dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b5e0:	f805 9c03 	strb.w	r9, [r5, #-3]
 801b5e4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801b5e8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b5ec:	fb09 b907 	mla	r9, r9, r7, fp
 801b5f0:	fa1f f989 	uxth.w	r9, r9
 801b5f4:	f109 0b01 	add.w	fp, r9, #1
 801b5f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b5fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b600:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b604:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801b608:	fb19 f808 	smulbb	r8, r9, r8
 801b60c:	fb06 8607 	mla	r6, r6, r7, r8
 801b610:	b2b6      	uxth	r6, r6
 801b612:	f106 0801 	add.w	r8, r6, #1
 801b616:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801b61a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b61e:	f805 8c01 	strb.w	r8, [r5, #-1]
 801b622:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b624:	4470      	add	r0, lr
 801b626:	3503      	adds	r5, #3
 801b628:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b62c:	4432      	add	r2, r6
 801b62e:	e7a7      	b.n	801b580 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b630:	2600      	movs	r6, #0
 801b632:	1b9d      	subs	r5, r3, r6
 801b634:	2d00      	cmp	r5, #0
 801b636:	dc3b      	bgt.n	801b6b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b638:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b63c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b640:	441c      	add	r4, r3
 801b642:	2900      	cmp	r1, #0
 801b644:	f340 80a8 	ble.w	801b798 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b648:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b64c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b64e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b652:	3901      	subs	r1, #1
 801b654:	eeb0 6a62 	vmov.f32	s12, s5
 801b658:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b65c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b660:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b664:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b668:	eeb0 6a43 	vmov.f32	s12, s6
 801b66c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b670:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b674:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b678:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b67c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b680:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b684:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b688:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b68c:	ee12 2a90 	vmov	r2, s5
 801b690:	eef0 2a47 	vmov.f32	s5, s14
 801b694:	fb92 fef3 	sdiv	lr, r2, r3
 801b698:	ee13 2a10 	vmov	r2, s6
 801b69c:	eeb0 3a67 	vmov.f32	s6, s15
 801b6a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6a4:	9a03      	ldr	r2, [sp, #12]
 801b6a6:	9312      	str	r3, [sp, #72]	@ 0x48
 801b6a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b6aa:	bf08      	it	eq
 801b6ac:	4613      	moveq	r3, r2
 801b6ae:	e736      	b.n	801b51e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b6b0:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b6b4:	d457      	bmi.n	801b766 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b6b6:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801b6ba:	4547      	cmp	r7, r8
 801b6bc:	dd53      	ble.n	801b766 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b6be:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b6c2:	d450      	bmi.n	801b766 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b6c4:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801b6c8:	454d      	cmp	r5, r9
 801b6ca:	dd4c      	ble.n	801b766 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b6cc:	9d01      	ldr	r5, [sp, #4]
 801b6ce:	b23f      	sxth	r7, r7
 801b6d0:	fb09 5707 	mla	r7, r9, r7, r5
 801b6d4:	f817 5008 	ldrb.w	r5, [r7, r8]
 801b6d8:	9f02      	ldr	r7, [sp, #8]
 801b6da:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801b6de:	0e2f      	lsrs	r7, r5, #24
 801b6e0:	2fff      	cmp	r7, #255	@ 0xff
 801b6e2:	d045      	beq.n	801b770 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b6e4:	fa5f f987 	uxtb.w	r9, r7
 801b6e8:	b3ef      	cbz	r7, 801b766 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b6ea:	fa1f f889 	uxth.w	r8, r9
 801b6ee:	ea6f 0909 	mvn.w	r9, r9
 801b6f2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b6f6:	fa5f fb85 	uxtb.w	fp, r5
 801b6fa:	f814 a007 	ldrb.w	sl, [r4, r7]
 801b6fe:	fa5f f989 	uxtb.w	r9, r9
 801b702:	fb1b fb08 	smulbb	fp, fp, r8
 801b706:	fb0a ba09 	mla	sl, sl, r9, fp
 801b70a:	fa1f fa8a 	uxth.w	sl, sl
 801b70e:	f10a 0b01 	add.w	fp, sl, #1
 801b712:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b716:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b71a:	f804 a007 	strb.w	sl, [r4, r7]
 801b71e:	4427      	add	r7, r4
 801b720:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b724:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801b728:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b72c:	fb1b fb09 	smulbb	fp, fp, r9
 801b730:	fb0a ba08 	mla	sl, sl, r8, fp
 801b734:	fa1f fa8a 	uxth.w	sl, sl
 801b738:	f10a 0b01 	add.w	fp, sl, #1
 801b73c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b740:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b744:	f887 a001 	strb.w	sl, [r7, #1]
 801b748:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b74c:	fb1a f909 	smulbb	r9, sl, r9
 801b750:	fb05 9508 	mla	r5, r5, r8, r9
 801b754:	b2ad      	uxth	r5, r5
 801b756:	f105 0901 	add.w	r9, r5, #1
 801b75a:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801b75e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b762:	f887 9002 	strb.w	r9, [r7, #2]
 801b766:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801b768:	4470      	add	r0, lr
 801b76a:	3601      	adds	r6, #1
 801b76c:	442a      	add	r2, r5
 801b76e:	e760      	b.n	801b632 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b770:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b774:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801b778:	55e5      	strb	r5, [r4, r7]
 801b77a:	4427      	add	r7, r4
 801b77c:	0c2d      	lsrs	r5, r5, #16
 801b77e:	f887 8001 	strb.w	r8, [r7, #1]
 801b782:	70bd      	strb	r5, [r7, #2]
 801b784:	e7ef      	b.n	801b766 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b786:	0a37      	lsrs	r7, r6, #8
 801b788:	f805 6c03 	strb.w	r6, [r5, #-3]
 801b78c:	0c36      	lsrs	r6, r6, #16
 801b78e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801b792:	f805 6c01 	strb.w	r6, [r5, #-1]
 801b796:	e744      	b.n	801b622 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b798:	b005      	add	sp, #20
 801b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b79e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b79e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7a2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b7a4:	9201      	str	r2, [sp, #4]
 801b7a6:	6870      	ldr	r0, [r6, #4]
 801b7a8:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801b7ac:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801b7b0:	fa1f fe85 	uxth.w	lr, r5
 801b7b4:	43ed      	mvns	r5, r5
 801b7b6:	f8dc 8000 	ldr.w	r8, [ip]
 801b7ba:	b2ed      	uxtb	r5, r5
 801b7bc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801b7c0:	fb00 2404 	mla	r4, r0, r4, r2
 801b7c4:	6832      	ldr	r2, [r6, #0]
 801b7c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7ca:	4414      	add	r4, r2
 801b7cc:	2900      	cmp	r1, #0
 801b7ce:	dc03      	bgt.n	801b7d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b7d0:	9a01      	ldr	r2, [sp, #4]
 801b7d2:	2a00      	cmp	r2, #0
 801b7d4:	f340 810d 	ble.w	801b9f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b7d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b7da:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b7de:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b7e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b7e4:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b7e8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	dd0e      	ble.n	801b80e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b7f0:	1406      	asrs	r6, r0, #16
 801b7f2:	d405      	bmi.n	801b800 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b7f4:	4556      	cmp	r6, sl
 801b7f6:	da03      	bge.n	801b800 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b7f8:	1416      	asrs	r6, r2, #16
 801b7fa:	d401      	bmi.n	801b800 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b7fc:	454e      	cmp	r6, r9
 801b7fe:	db07      	blt.n	801b810 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b800:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801b802:	3b01      	subs	r3, #1
 801b804:	3403      	adds	r4, #3
 801b806:	4430      	add	r0, r6
 801b808:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801b80a:	4432      	add	r2, r6
 801b80c:	e7ee      	b.n	801b7ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801b80e:	d060      	beq.n	801b8d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801b810:	1e5e      	subs	r6, r3, #1
 801b812:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b814:	fb07 0706 	mla	r7, r7, r6, r0
 801b818:	143f      	asrs	r7, r7, #16
 801b81a:	d451      	bmi.n	801b8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b81c:	4557      	cmp	r7, sl
 801b81e:	da4f      	bge.n	801b8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b820:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b822:	fb07 2606 	mla	r6, r7, r6, r2
 801b826:	1436      	asrs	r6, r6, #16
 801b828:	d44a      	bmi.n	801b8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b82a:	454e      	cmp	r6, r9
 801b82c:	da48      	bge.n	801b8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b82e:	1ce6      	adds	r6, r4, #3
 801b830:	4699      	mov	r9, r3
 801b832:	f1b9 0f00 	cmp.w	r9, #0
 801b836:	f106 0603 	add.w	r6, r6, #3
 801b83a:	dd45      	ble.n	801b8c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801b83c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b840:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b844:	1417      	asrs	r7, r2, #16
 801b846:	f109 39ff 	add.w	r9, r9, #4294967295
 801b84a:	fb0b a707 	mla	r7, fp, r7, sl
 801b84e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b852:	fb1b fb05 	smulbb	fp, fp, r5
 801b856:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b85a:	eb08 0a07 	add.w	sl, r8, r7
 801b85e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801b862:	fb07 b70e 	mla	r7, r7, lr, fp
 801b866:	b2bf      	uxth	r7, r7
 801b868:	f107 0b01 	add.w	fp, r7, #1
 801b86c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b870:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b874:	fb1b fb05 	smulbb	fp, fp, r5
 801b878:	123f      	asrs	r7, r7, #8
 801b87a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b87e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b882:	fb07 b70e 	mla	r7, r7, lr, fp
 801b886:	b2bf      	uxth	r7, r7
 801b888:	f107 0b01 	add.w	fp, r7, #1
 801b88c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b890:	123f      	asrs	r7, r7, #8
 801b892:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b896:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b89a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b89e:	fb1a fa05 	smulbb	sl, sl, r5
 801b8a2:	fb07 a70e 	mla	r7, r7, lr, sl
 801b8a6:	b2bf      	uxth	r7, r7
 801b8a8:	f107 0a01 	add.w	sl, r7, #1
 801b8ac:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b8b0:	123f      	asrs	r7, r7, #8
 801b8b2:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b8b6:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b8b8:	4438      	add	r0, r7
 801b8ba:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b8bc:	443a      	add	r2, r7
 801b8be:	e7b8      	b.n	801b832 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8c0:	2700      	movs	r7, #0
 801b8c2:	1bde      	subs	r6, r3, r7
 801b8c4:	2e00      	cmp	r6, #0
 801b8c6:	dc3f      	bgt.n	801b948 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801b8c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8d0:	441c      	add	r4, r3
 801b8d2:	2900      	cmp	r1, #0
 801b8d4:	f340 808d 	ble.w	801b9f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b8d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b8dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b8de:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8e2:	3901      	subs	r1, #1
 801b8e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8e8:	eef0 6a62 	vmov.f32	s13, s5
 801b8ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b8f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8f8:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801b8fc:	eef0 6a43 	vmov.f32	s13, s6
 801b900:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b904:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801b908:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b90c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b910:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b914:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b918:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b91c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b920:	ee12 2a90 	vmov	r2, s5
 801b924:	eef0 2a47 	vmov.f32	s5, s14
 801b928:	fb92 f3f3 	sdiv	r3, r2, r3
 801b92c:	ee13 2a10 	vmov	r2, s6
 801b930:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b932:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b934:	eeb0 3a67 	vmov.f32	s6, s15
 801b938:	fb92 f3f3 	sdiv	r3, r2, r3
 801b93c:	9a01      	ldr	r2, [sp, #4]
 801b93e:	9310      	str	r3, [sp, #64]	@ 0x40
 801b940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b942:	bf08      	it	eq
 801b944:	4613      	moveq	r3, r2
 801b946:	e741      	b.n	801b7cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b948:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b94c:	d44b      	bmi.n	801b9e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b94e:	f8dc b008 	ldr.w	fp, [ip, #8]
 801b952:	45cb      	cmp	fp, r9
 801b954:	dd47      	ble.n	801b9e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b956:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b95a:	d444      	bmi.n	801b9e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b95c:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801b960:	4556      	cmp	r6, sl
 801b962:	dd40      	ble.n	801b9e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b964:	fa0f f68b 	sxth.w	r6, fp
 801b968:	fb0a 9906 	mla	r9, sl, r6, r9
 801b96c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b970:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b974:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b978:	fb1b fb05 	smulbb	fp, fp, r5
 801b97c:	eb08 0a09 	add.w	sl, r8, r9
 801b980:	f818 9009 	ldrb.w	r9, [r8, r9]
 801b984:	fb09 b90e 	mla	r9, r9, lr, fp
 801b988:	fa1f f989 	uxth.w	r9, r9
 801b98c:	f109 0b01 	add.w	fp, r9, #1
 801b990:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b994:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b998:	f804 9006 	strb.w	r9, [r4, r6]
 801b99c:	4426      	add	r6, r4
 801b99e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b9a2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b9a6:	fb1b fb05 	smulbb	fp, fp, r5
 801b9aa:	fb09 b90e 	mla	r9, r9, lr, fp
 801b9ae:	fa1f f989 	uxth.w	r9, r9
 801b9b2:	f109 0b01 	add.w	fp, r9, #1
 801b9b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b9ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b9be:	f886 9001 	strb.w	r9, [r6, #1]
 801b9c2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b9c6:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b9ca:	fb1a fa05 	smulbb	sl, sl, r5
 801b9ce:	fb09 a90e 	mla	r9, r9, lr, sl
 801b9d2:	fa1f f989 	uxth.w	r9, r9
 801b9d6:	f109 0a01 	add.w	sl, r9, #1
 801b9da:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b9de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b9e2:	f886 9002 	strb.w	r9, [r6, #2]
 801b9e6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801b9e8:	3701      	adds	r7, #1
 801b9ea:	4430      	add	r0, r6
 801b9ec:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801b9ee:	4432      	add	r2, r6
 801b9f0:	e767      	b.n	801b8c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801b9f2:	b003      	add	sp, #12
 801b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9fc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b9fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ba02:	9201      	str	r2, [sp, #4]
 801ba04:	6868      	ldr	r0, [r5, #4]
 801ba06:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801ba08:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801ba0c:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801ba10:	fb00 2404 	mla	r4, r0, r4, r2
 801ba14:	682a      	ldr	r2, [r5, #0]
 801ba16:	f8d7 8000 	ldr.w	r8, [r7]
 801ba1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ba1e:	4414      	add	r4, r2
 801ba20:	2900      	cmp	r1, #0
 801ba22:	dc03      	bgt.n	801ba2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ba24:	9a01      	ldr	r2, [sp, #4]
 801ba26:	2a00      	cmp	r2, #0
 801ba28:	f340 80af 	ble.w	801bb8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ba2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ba2e:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ba32:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ba36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ba38:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801ba3c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	dd0c      	ble.n	801ba5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ba44:	1405      	asrs	r5, r0, #16
 801ba46:	d405      	bmi.n	801ba54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ba48:	4555      	cmp	r5, sl
 801ba4a:	da03      	bge.n	801ba54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ba4c:	1415      	asrs	r5, r2, #16
 801ba4e:	d401      	bmi.n	801ba54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ba50:	454d      	cmp	r5, r9
 801ba52:	db05      	blt.n	801ba60 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ba54:	4470      	add	r0, lr
 801ba56:	4462      	add	r2, ip
 801ba58:	3b01      	subs	r3, #1
 801ba5a:	3403      	adds	r4, #3
 801ba5c:	e7f0      	b.n	801ba40 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ba5e:	d038      	beq.n	801bad2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ba60:	1e5d      	subs	r5, r3, #1
 801ba62:	fb0e 0605 	mla	r6, lr, r5, r0
 801ba66:	1436      	asrs	r6, r6, #16
 801ba68:	d42a      	bmi.n	801bac0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ba6a:	4556      	cmp	r6, sl
 801ba6c:	da28      	bge.n	801bac0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ba6e:	fb0c 2505 	mla	r5, ip, r5, r2
 801ba72:	142d      	asrs	r5, r5, #16
 801ba74:	d424      	bmi.n	801bac0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ba76:	454d      	cmp	r5, r9
 801ba78:	da22      	bge.n	801bac0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ba7a:	1ce6      	adds	r6, r4, #3
 801ba7c:	4699      	mov	r9, r3
 801ba7e:	f1b9 0f00 	cmp.w	r9, #0
 801ba82:	f106 0603 	add.w	r6, r6, #3
 801ba86:	dd1f      	ble.n	801bac8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801ba88:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ba8c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ba90:	1415      	asrs	r5, r2, #16
 801ba92:	4470      	add	r0, lr
 801ba94:	4462      	add	r2, ip
 801ba96:	f109 39ff 	add.w	r9, r9, #4294967295
 801ba9a:	fb0b a505 	mla	r5, fp, r5, sl
 801ba9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801baa2:	eb08 0a05 	add.w	sl, r8, r5
 801baa6:	f818 5005 	ldrb.w	r5, [r8, r5]
 801baaa:	f806 5c06 	strb.w	r5, [r6, #-6]
 801baae:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801bab2:	f806 5c05 	strb.w	r5, [r6, #-5]
 801bab6:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801baba:	f806 5c04 	strb.w	r5, [r6, #-4]
 801babe:	e7de      	b.n	801ba7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801bac0:	2600      	movs	r6, #0
 801bac2:	1b9d      	subs	r5, r3, r6
 801bac4:	2d00      	cmp	r5, #0
 801bac6:	dc38      	bgt.n	801bb3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801bac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bacc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bad0:	441c      	add	r4, r3
 801bad2:	2900      	cmp	r1, #0
 801bad4:	dd59      	ble.n	801bb8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bad6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bada:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801badc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bae0:	3901      	subs	r1, #1
 801bae2:	eeb0 6a62 	vmov.f32	s12, s5
 801bae6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801baea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801baee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baf2:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801baf6:	eeb0 6a43 	vmov.f32	s12, s6
 801bafa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bafe:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801bb02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb06:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb1a:	ee12 2a90 	vmov	r2, s5
 801bb1e:	eef0 2a47 	vmov.f32	s5, s14
 801bb22:	fb92 fef3 	sdiv	lr, r2, r3
 801bb26:	ee13 2a10 	vmov	r2, s6
 801bb2a:	eeb0 3a67 	vmov.f32	s6, s15
 801bb2e:	fb92 fcf3 	sdiv	ip, r2, r3
 801bb32:	9a01      	ldr	r2, [sp, #4]
 801bb34:	bf08      	it	eq
 801bb36:	4613      	moveq	r3, r2
 801bb38:	e772      	b.n	801ba20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801bb3a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bb3e:	d420      	bmi.n	801bb82 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bb40:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801bb44:	45cb      	cmp	fp, r9
 801bb46:	dd1c      	ble.n	801bb82 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bb48:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bb4c:	d419      	bmi.n	801bb82 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bb4e:	68fd      	ldr	r5, [r7, #12]
 801bb50:	4555      	cmp	r5, sl
 801bb52:	dd16      	ble.n	801bb82 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bb54:	fa0f f58b 	sxth.w	r5, fp
 801bb58:	fb0a 9505 	mla	r5, sl, r5, r9
 801bb5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb60:	f818 9005 	ldrb.w	r9, [r8, r5]
 801bb64:	eb08 0b05 	add.w	fp, r8, r5
 801bb68:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801bb6c:	f804 9005 	strb.w	r9, [r4, r5]
 801bb70:	4425      	add	r5, r4
 801bb72:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801bb76:	f885 9001 	strb.w	r9, [r5, #1]
 801bb7a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801bb7e:	f885 9002 	strb.w	r9, [r5, #2]
 801bb82:	4470      	add	r0, lr
 801bb84:	4462      	add	r2, ip
 801bb86:	3601      	adds	r6, #1
 801bb88:	e79b      	b.n	801bac2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801bb8a:	b003      	add	sp, #12
 801bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb94:	b085      	sub	sp, #20
 801bb96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bb9a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bb9c:	9202      	str	r2, [sp, #8]
 801bb9e:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801bba2:	6860      	ldr	r0, [r4, #4]
 801bba4:	9203      	str	r2, [sp, #12]
 801bba6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801bbaa:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801bbae:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801bbb2:	fb00 2505 	mla	r5, r0, r5, r2
 801bbb6:	6822      	ldr	r2, [r4, #0]
 801bbb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bbbc:	4415      	add	r5, r2
 801bbbe:	f8dc 2000 	ldr.w	r2, [ip]
 801bbc2:	9201      	str	r2, [sp, #4]
 801bbc4:	2900      	cmp	r1, #0
 801bbc6:	dc03      	bgt.n	801bbd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801bbc8:	9a02      	ldr	r2, [sp, #8]
 801bbca:	2a00      	cmp	r2, #0
 801bbcc:	f340 8122 	ble.w	801be14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801bbd0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bbd2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bbd6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801bbda:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bbdc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bbe0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	dd0d      	ble.n	801bc04 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bbe8:	1422      	asrs	r2, r4, #16
 801bbea:	d405      	bmi.n	801bbf8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bbec:	4542      	cmp	r2, r8
 801bbee:	da03      	bge.n	801bbf8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bbf0:	1402      	asrs	r2, r0, #16
 801bbf2:	d401      	bmi.n	801bbf8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bbf4:	42ba      	cmp	r2, r7
 801bbf6:	db06      	blt.n	801bc06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bbf8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bbfa:	4474      	add	r4, lr
 801bbfc:	3b01      	subs	r3, #1
 801bbfe:	3503      	adds	r5, #3
 801bc00:	4410      	add	r0, r2
 801bc02:	e7ef      	b.n	801bbe4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801bc04:	d072      	beq.n	801bcec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801bc06:	1e5a      	subs	r2, r3, #1
 801bc08:	fb0e 4602 	mla	r6, lr, r2, r4
 801bc0c:	1436      	asrs	r6, r6, #16
 801bc0e:	d462      	bmi.n	801bcd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bc10:	4546      	cmp	r6, r8
 801bc12:	da60      	bge.n	801bcd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bc14:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801bc16:	fb06 0202 	mla	r2, r6, r2, r0
 801bc1a:	1412      	asrs	r2, r2, #16
 801bc1c:	d45b      	bmi.n	801bcd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bc1e:	42ba      	cmp	r2, r7
 801bc20:	da59      	bge.n	801bcd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bc22:	1cef      	adds	r7, r5, #3
 801bc24:	4699      	mov	r9, r3
 801bc26:	f1b9 0f00 	cmp.w	r9, #0
 801bc2a:	dd5a      	ble.n	801bce2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bc2c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bc30:	1426      	asrs	r6, r4, #16
 801bc32:	1402      	asrs	r2, r0, #16
 801bc34:	fb08 6202 	mla	r2, r8, r2, r6
 801bc38:	9e01      	ldr	r6, [sp, #4]
 801bc3a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801bc3e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801bc42:	d041      	beq.n	801bcc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801bc44:	9a03      	ldr	r2, [sp, #12]
 801bc46:	fa5f fb86 	uxtb.w	fp, r6
 801bc4a:	fb02 f808 	mul.w	r8, r2, r8
 801bc4e:	f108 0201 	add.w	r2, r8, #1
 801bc52:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801bc56:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801bc5a:	1212      	asrs	r2, r2, #8
 801bc5c:	fa1f fa82 	uxth.w	sl, r2
 801bc60:	43d2      	mvns	r2, r2
 801bc62:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc66:	b2d2      	uxtb	r2, r2
 801bc68:	fb08 b802 	mla	r8, r8, r2, fp
 801bc6c:	fa1f f888 	uxth.w	r8, r8
 801bc70:	f108 0b01 	add.w	fp, r8, #1
 801bc74:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bc78:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bc7c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bc80:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc84:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bc88:	fb16 fa0a 	smulbb	sl, r6, sl
 801bc8c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bc90:	f807 8c03 	strb.w	r8, [r7, #-3]
 801bc94:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801bc98:	fb06 aa02 	mla	sl, r6, r2, sl
 801bc9c:	fb08 b802 	mla	r8, r8, r2, fp
 801bca0:	fa1f fa8a 	uxth.w	sl, sl
 801bca4:	fa1f f888 	uxth.w	r8, r8
 801bca8:	f10a 0601 	add.w	r6, sl, #1
 801bcac:	f108 0b01 	add.w	fp, r8, #1
 801bcb0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bcb4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bcb8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bcbc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bcc0:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bcc4:	f807 8c02 	strb.w	r8, [r7, #-2]
 801bcc8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bcca:	4474      	add	r4, lr
 801bccc:	3703      	adds	r7, #3
 801bcce:	f109 39ff 	add.w	r9, r9, #4294967295
 801bcd2:	4410      	add	r0, r2
 801bcd4:	e7a7      	b.n	801bc26 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bcd6:	f04f 0800 	mov.w	r8, #0
 801bcda:	eba3 0208 	sub.w	r2, r3, r8
 801bcde:	2a00      	cmp	r2, #0
 801bce0:	dc3b      	bgt.n	801bd5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801bce2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bce6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bcea:	441d      	add	r5, r3
 801bcec:	2900      	cmp	r1, #0
 801bcee:	f340 8091 	ble.w	801be14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801bcf2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bcf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bcf8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bcfc:	3901      	subs	r1, #1
 801bcfe:	eeb0 6a62 	vmov.f32	s12, s5
 801bd02:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd06:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd0e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801bd12:	eeb0 6a43 	vmov.f32	s12, s6
 801bd16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd1a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801bd1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd22:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd26:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd2e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd36:	ee12 2a90 	vmov	r2, s5
 801bd3a:	eef0 2a47 	vmov.f32	s5, s14
 801bd3e:	fb92 fef3 	sdiv	lr, r2, r3
 801bd42:	ee13 2a10 	vmov	r2, s6
 801bd46:	eeb0 3a67 	vmov.f32	s6, s15
 801bd4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd4e:	9a02      	ldr	r2, [sp, #8]
 801bd50:	9312      	str	r3, [sp, #72]	@ 0x48
 801bd52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd54:	bf08      	it	eq
 801bd56:	4613      	moveq	r3, r2
 801bd58:	e734      	b.n	801bbc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801bd5a:	1427      	asrs	r7, r4, #16
 801bd5c:	d454      	bmi.n	801be08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bd5e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bd62:	42be      	cmp	r6, r7
 801bd64:	dd50      	ble.n	801be08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bd66:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bd6a:	d44d      	bmi.n	801be08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bd6c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bd70:	454a      	cmp	r2, r9
 801bd72:	dd49      	ble.n	801be08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bd74:	b236      	sxth	r6, r6
 801bd76:	9a01      	ldr	r2, [sp, #4]
 801bd78:	fb09 7606 	mla	r6, r9, r6, r7
 801bd7c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801bd80:	0e3a      	lsrs	r2, r7, #24
 801bd82:	d041      	beq.n	801be08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bd84:	9e03      	ldr	r6, [sp, #12]
 801bd86:	fa5f fb87 	uxtb.w	fp, r7
 801bd8a:	4372      	muls	r2, r6
 801bd8c:	1c56      	adds	r6, r2, #1
 801bd8e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bd92:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801bd96:	1212      	asrs	r2, r2, #8
 801bd98:	f815 9006 	ldrb.w	r9, [r5, r6]
 801bd9c:	fa1f fa82 	uxth.w	sl, r2
 801bda0:	43d2      	mvns	r2, r2
 801bda2:	fb1b fb0a 	smulbb	fp, fp, sl
 801bda6:	b2d2      	uxtb	r2, r2
 801bda8:	fb09 b902 	mla	r9, r9, r2, fp
 801bdac:	fa1f f989 	uxth.w	r9, r9
 801bdb0:	f109 0b01 	add.w	fp, r9, #1
 801bdb4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bdb8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bdbc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bdc0:	fb1b fb0a 	smulbb	fp, fp, sl
 801bdc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdc8:	fb17 fa0a 	smulbb	sl, r7, sl
 801bdcc:	f805 9006 	strb.w	r9, [r5, r6]
 801bdd0:	442e      	add	r6, r5
 801bdd2:	78b7      	ldrb	r7, [r6, #2]
 801bdd4:	f896 9001 	ldrb.w	r9, [r6, #1]
 801bdd8:	fb07 aa02 	mla	sl, r7, r2, sl
 801bddc:	fb09 b902 	mla	r9, r9, r2, fp
 801bde0:	fa1f fa8a 	uxth.w	sl, sl
 801bde4:	fa1f f989 	uxth.w	r9, r9
 801bde8:	f10a 0701 	add.w	r7, sl, #1
 801bdec:	f109 0b01 	add.w	fp, r9, #1
 801bdf0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bdf4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bdf8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bdfc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be00:	f886 a002 	strb.w	sl, [r6, #2]
 801be04:	f886 9001 	strb.w	r9, [r6, #1]
 801be08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801be0a:	4474      	add	r4, lr
 801be0c:	f108 0801 	add.w	r8, r8, #1
 801be10:	4410      	add	r0, r2
 801be12:	e762      	b.n	801bcda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801be14:	b005      	add	sp, #20
 801be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be1e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801be20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801be24:	9201      	str	r2, [sp, #4]
 801be26:	6860      	ldr	r0, [r4, #4]
 801be28:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801be2c:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801be30:	fb00 2505 	mla	r5, r0, r5, r2
 801be34:	6822      	ldr	r2, [r4, #0]
 801be36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be3a:	4415      	add	r5, r2
 801be3c:	f8dc 2000 	ldr.w	r2, [ip]
 801be40:	9200      	str	r2, [sp, #0]
 801be42:	2900      	cmp	r1, #0
 801be44:	dc03      	bgt.n	801be4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801be46:	9a01      	ldr	r2, [sp, #4]
 801be48:	2a00      	cmp	r2, #0
 801be4a:	f340 812b 	ble.w	801c0a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801be4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801be50:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801be54:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801be58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801be5a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801be5e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801be62:	2b00      	cmp	r3, #0
 801be64:	dd0e      	ble.n	801be84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801be66:	1422      	asrs	r2, r4, #16
 801be68:	d405      	bmi.n	801be76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801be6a:	4572      	cmp	r2, lr
 801be6c:	da03      	bge.n	801be76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801be6e:	1402      	asrs	r2, r0, #16
 801be70:	d401      	bmi.n	801be76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801be72:	42ba      	cmp	r2, r7
 801be74:	db07      	blt.n	801be86 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801be76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801be78:	3b01      	subs	r3, #1
 801be7a:	3503      	adds	r5, #3
 801be7c:	4414      	add	r4, r2
 801be7e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801be80:	4410      	add	r0, r2
 801be82:	e7ee      	b.n	801be62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801be84:	d06f      	beq.n	801bf66 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801be86:	1e5a      	subs	r2, r3, #1
 801be88:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801be8a:	fb06 4602 	mla	r6, r6, r2, r4
 801be8e:	1436      	asrs	r6, r6, #16
 801be90:	d45e      	bmi.n	801bf50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801be92:	4576      	cmp	r6, lr
 801be94:	da5c      	bge.n	801bf50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801be96:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801be98:	fb06 0202 	mla	r2, r6, r2, r0
 801be9c:	1412      	asrs	r2, r2, #16
 801be9e:	d457      	bmi.n	801bf50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801bea0:	42ba      	cmp	r2, r7
 801bea2:	da55      	bge.n	801bf50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801bea4:	1cee      	adds	r6, r5, #3
 801bea6:	469a      	mov	sl, r3
 801bea8:	f1ba 0f00 	cmp.w	sl, #0
 801beac:	dd56      	ble.n	801bf5c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801beae:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801beb2:	1427      	asrs	r7, r4, #16
 801beb4:	1402      	asrs	r2, r0, #16
 801beb6:	fb0e 7202 	mla	r2, lr, r2, r7
 801beba:	9f00      	ldr	r7, [sp, #0]
 801bebc:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801bec0:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801bec4:	d03c      	beq.n	801bf40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801bec6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801beca:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bece:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801bed2:	fa5f f28e 	uxtb.w	r2, lr
 801bed6:	b2ff      	uxtb	r7, r7
 801bed8:	f000 80dd 	beq.w	801c096 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bedc:	fa1f f882 	uxth.w	r8, r2
 801bee0:	43d2      	mvns	r2, r2
 801bee2:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801bee6:	fb17 f708 	smulbb	r7, r7, r8
 801beea:	b2d2      	uxtb	r2, r2
 801beec:	fb19 f908 	smulbb	r9, r9, r8
 801bef0:	fb0e 7702 	mla	r7, lr, r2, r7
 801bef4:	fb1b f808 	smulbb	r8, fp, r8
 801bef8:	b2bf      	uxth	r7, r7
 801befa:	f107 0e01 	add.w	lr, r7, #1
 801befe:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801bf02:	123f      	asrs	r7, r7, #8
 801bf04:	f806 7c03 	strb.w	r7, [r6, #-3]
 801bf08:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801bf0c:	fb07 9902 	mla	r9, r7, r2, r9
 801bf10:	fa1f f989 	uxth.w	r9, r9
 801bf14:	f109 0701 	add.w	r7, r9, #1
 801bf18:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801bf1c:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bf20:	fb07 8802 	mla	r8, r7, r2, r8
 801bf24:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf28:	fa1f f888 	uxth.w	r8, r8
 801bf2c:	f806 9c02 	strb.w	r9, [r6, #-2]
 801bf30:	f108 0201 	add.w	r2, r8, #1
 801bf34:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bf38:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bf3c:	f806 8c01 	strb.w	r8, [r6, #-1]
 801bf40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bf42:	3603      	adds	r6, #3
 801bf44:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bf48:	4414      	add	r4, r2
 801bf4a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bf4c:	4410      	add	r0, r2
 801bf4e:	e7ab      	b.n	801bea8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801bf50:	f04f 0e00 	mov.w	lr, #0
 801bf54:	eba3 020e 	sub.w	r2, r3, lr
 801bf58:	2a00      	cmp	r2, #0
 801bf5a:	dc3d      	bgt.n	801bfd8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801bf5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf64:	441d      	add	r5, r3
 801bf66:	2900      	cmp	r1, #0
 801bf68:	f340 809c 	ble.w	801c0a4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bf6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf76:	3901      	subs	r1, #1
 801bf78:	eeb0 6a62 	vmov.f32	s12, s5
 801bf7c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf80:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf84:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf88:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801bf8c:	eeb0 6a43 	vmov.f32	s12, s6
 801bf90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf94:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801bf98:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfa0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfa4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfa8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfb0:	ee12 2a90 	vmov	r2, s5
 801bfb4:	eef0 2a47 	vmov.f32	s5, s14
 801bfb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfbc:	ee13 2a10 	vmov	r2, s6
 801bfc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bfc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bfc4:	eeb0 3a67 	vmov.f32	s6, s15
 801bfc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfcc:	9a01      	ldr	r2, [sp, #4]
 801bfce:	9310      	str	r3, [sp, #64]	@ 0x40
 801bfd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bfd2:	bf08      	it	eq
 801bfd4:	4613      	moveq	r3, r2
 801bfd6:	e734      	b.n	801be42 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801bfd8:	1427      	asrs	r7, r4, #16
 801bfda:	d44d      	bmi.n	801c078 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bfdc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bfe0:	42be      	cmp	r6, r7
 801bfe2:	dd49      	ble.n	801c078 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bfe4:	ea5f 4820 	movs.w	r8, r0, asr #16
 801bfe8:	d446      	bmi.n	801c078 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bfea:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bfee:	4542      	cmp	r2, r8
 801bff0:	dd42      	ble.n	801c078 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bff2:	b236      	sxth	r6, r6
 801bff4:	9a00      	ldr	r2, [sp, #0]
 801bff6:	fb08 7606 	mla	r6, r8, r6, r7
 801bffa:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801bffe:	0e3a      	lsrs	r2, r7, #24
 801c000:	d03a      	beq.n	801c078 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c002:	2aff      	cmp	r2, #255	@ 0xff
 801c004:	b2d6      	uxtb	r6, r2
 801c006:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c00a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c00e:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801c012:	b2ff      	uxtb	r7, r7
 801c014:	d037      	beq.n	801c086 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801c016:	fa1f f986 	uxth.w	r9, r6
 801c01a:	4472      	add	r2, lr
 801c01c:	43f6      	mvns	r6, r6
 801c01e:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c022:	fb17 f709 	smulbb	r7, r7, r9
 801c026:	fb1a fa09 	smulbb	sl, sl, r9
 801c02a:	b2f6      	uxtb	r6, r6
 801c02c:	fb1b f909 	smulbb	r9, fp, r9
 801c030:	fb08 7706 	mla	r7, r8, r6, r7
 801c034:	b2bf      	uxth	r7, r7
 801c036:	f107 0801 	add.w	r8, r7, #1
 801c03a:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c03e:	123f      	asrs	r7, r7, #8
 801c040:	54af      	strb	r7, [r5, r2]
 801c042:	442a      	add	r2, r5
 801c044:	7857      	ldrb	r7, [r2, #1]
 801c046:	fb07 aa06 	mla	sl, r7, r6, sl
 801c04a:	fa1f fa8a 	uxth.w	sl, sl
 801c04e:	f10a 0701 	add.w	r7, sl, #1
 801c052:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c056:	7897      	ldrb	r7, [r2, #2]
 801c058:	fb07 9906 	mla	r9, r7, r6, r9
 801c05c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c060:	fa1f f989 	uxth.w	r9, r9
 801c064:	f882 a001 	strb.w	sl, [r2, #1]
 801c068:	f109 0601 	add.w	r6, r9, #1
 801c06c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c070:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c074:	f882 9002 	strb.w	r9, [r2, #2]
 801c078:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c07a:	f10e 0e01 	add.w	lr, lr, #1
 801c07e:	4414      	add	r4, r2
 801c080:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c082:	4410      	add	r0, r2
 801c084:	e766      	b.n	801bf54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c086:	4472      	add	r2, lr
 801c088:	54af      	strb	r7, [r5, r2]
 801c08a:	442a      	add	r2, r5
 801c08c:	f882 a001 	strb.w	sl, [r2, #1]
 801c090:	f882 b002 	strb.w	fp, [r2, #2]
 801c094:	e7f0      	b.n	801c078 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c096:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c09a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c09e:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c0a2:	e74d      	b.n	801bf40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c0a4:	b003      	add	sp, #12
 801c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c0ac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0b0:	b087      	sub	sp, #28
 801c0b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c0b6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c0b8:	9204      	str	r2, [sp, #16]
 801c0ba:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c0be:	6860      	ldr	r0, [r4, #4]
 801c0c0:	9205      	str	r2, [sp, #20]
 801c0c2:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801c0c6:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801c0ca:	9101      	str	r1, [sp, #4]
 801c0cc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801c0d0:	fb00 2505 	mla	r5, r0, r5, r2
 801c0d4:	6822      	ldr	r2, [r4, #0]
 801c0d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c0da:	4415      	add	r5, r2
 801c0dc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c0e0:	3201      	adds	r2, #1
 801c0e2:	f022 0201 	bic.w	r2, r2, #1
 801c0e6:	9202      	str	r2, [sp, #8]
 801c0e8:	f8dc 2000 	ldr.w	r2, [ip]
 801c0ec:	9203      	str	r2, [sp, #12]
 801c0ee:	9a01      	ldr	r2, [sp, #4]
 801c0f0:	2a00      	cmp	r2, #0
 801c0f2:	dc03      	bgt.n	801c0fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c0f4:	9a04      	ldr	r2, [sp, #16]
 801c0f6:	2a00      	cmp	r2, #0
 801c0f8:	f340 8135 	ble.w	801c366 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c0fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c0fe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c102:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801c106:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c108:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c10c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c110:	2b00      	cmp	r3, #0
 801c112:	dd0d      	ble.n	801c130 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c114:	1422      	asrs	r2, r4, #16
 801c116:	d405      	bmi.n	801c124 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c118:	4542      	cmp	r2, r8
 801c11a:	da03      	bge.n	801c124 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c11c:	1402      	asrs	r2, r0, #16
 801c11e:	d401      	bmi.n	801c124 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c120:	42ba      	cmp	r2, r7
 801c122:	db06      	blt.n	801c132 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c124:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c126:	4474      	add	r4, lr
 801c128:	3b01      	subs	r3, #1
 801c12a:	3503      	adds	r5, #3
 801c12c:	4410      	add	r0, r2
 801c12e:	e7ef      	b.n	801c110 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c130:	d077      	beq.n	801c222 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801c132:	1e5a      	subs	r2, r3, #1
 801c134:	fb0e 4602 	mla	r6, lr, r2, r4
 801c138:	1436      	asrs	r6, r6, #16
 801c13a:	d469      	bmi.n	801c210 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c13c:	4546      	cmp	r6, r8
 801c13e:	da67      	bge.n	801c210 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c140:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c142:	fb06 0202 	mla	r2, r6, r2, r0
 801c146:	1412      	asrs	r2, r2, #16
 801c148:	d462      	bmi.n	801c210 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c14a:	42ba      	cmp	r2, r7
 801c14c:	da60      	bge.n	801c210 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c14e:	1cee      	adds	r6, r5, #3
 801c150:	4699      	mov	r9, r3
 801c152:	f1b9 0f00 	cmp.w	r9, #0
 801c156:	dd5f      	ble.n	801c218 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c158:	1422      	asrs	r2, r4, #16
 801c15a:	9902      	ldr	r1, [sp, #8]
 801c15c:	1407      	asrs	r7, r0, #16
 801c15e:	fb01 2707 	mla	r7, r1, r7, r2
 801c162:	9903      	ldr	r1, [sp, #12]
 801c164:	087a      	lsrs	r2, r7, #1
 801c166:	5c8a      	ldrb	r2, [r1, r2]
 801c168:	07f9      	lsls	r1, r7, #31
 801c16a:	bf54      	ite	pl
 801c16c:	f002 020f 	andpl.w	r2, r2, #15
 801c170:	1112      	asrmi	r2, r2, #4
 801c172:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c176:	b2d2      	uxtb	r2, r2
 801c178:	2a00      	cmp	r2, #0
 801c17a:	d042      	beq.n	801c202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c17c:	497b      	ldr	r1, [pc, #492]	@ (801c36c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c17e:	680f      	ldr	r7, [r1, #0]
 801c180:	9905      	ldr	r1, [sp, #20]
 801c182:	fa5f fb87 	uxtb.w	fp, r7
 801c186:	434a      	muls	r2, r1
 801c188:	f102 0801 	add.w	r8, r2, #1
 801c18c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801c190:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801c194:	1212      	asrs	r2, r2, #8
 801c196:	fa1f fa82 	uxth.w	sl, r2
 801c19a:	43d2      	mvns	r2, r2
 801c19c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c1a0:	b2d2      	uxtb	r2, r2
 801c1a2:	fb08 b802 	mla	r8, r8, r2, fp
 801c1a6:	fa1f f888 	uxth.w	r8, r8
 801c1aa:	f108 0b01 	add.w	fp, r8, #1
 801c1ae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c1b2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c1b6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c1ba:	fb1b fb0a 	smulbb	fp, fp, sl
 801c1be:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c1c2:	fb17 fa0a 	smulbb	sl, r7, sl
 801c1c6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c1ca:	f806 8c03 	strb.w	r8, [r6, #-3]
 801c1ce:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801c1d2:	fb07 aa02 	mla	sl, r7, r2, sl
 801c1d6:	fb08 b802 	mla	r8, r8, r2, fp
 801c1da:	fa1f fa8a 	uxth.w	sl, sl
 801c1de:	fa1f f888 	uxth.w	r8, r8
 801c1e2:	f10a 0701 	add.w	r7, sl, #1
 801c1e6:	f108 0b01 	add.w	fp, r8, #1
 801c1ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c1ee:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c1f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c1f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c1fa:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c1fe:	f806 8c02 	strb.w	r8, [r6, #-2]
 801c202:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c204:	4474      	add	r4, lr
 801c206:	3603      	adds	r6, #3
 801c208:	f109 39ff 	add.w	r9, r9, #4294967295
 801c20c:	4410      	add	r0, r2
 801c20e:	e7a0      	b.n	801c152 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c210:	2700      	movs	r7, #0
 801c212:	1bda      	subs	r2, r3, r7
 801c214:	2a00      	cmp	r2, #0
 801c216:	dc3e      	bgt.n	801c296 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c218:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c21c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c220:	441d      	add	r5, r3
 801c222:	9b01      	ldr	r3, [sp, #4]
 801c224:	2b00      	cmp	r3, #0
 801c226:	f340 809e 	ble.w	801c366 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c22a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c22e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c230:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c234:	eeb0 6a62 	vmov.f32	s12, s5
 801c238:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c23c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c240:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c244:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801c248:	eeb0 6a43 	vmov.f32	s12, s6
 801c24c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c250:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801c254:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c258:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c25c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c260:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c264:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c268:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c26c:	ee12 2a90 	vmov	r2, s5
 801c270:	eef0 2a47 	vmov.f32	s5, s14
 801c274:	fb92 fef3 	sdiv	lr, r2, r3
 801c278:	ee13 2a10 	vmov	r2, s6
 801c27c:	eeb0 3a67 	vmov.f32	s6, s15
 801c280:	fb92 f3f3 	sdiv	r3, r2, r3
 801c284:	9314      	str	r3, [sp, #80]	@ 0x50
 801c286:	9b01      	ldr	r3, [sp, #4]
 801c288:	9a04      	ldr	r2, [sp, #16]
 801c28a:	3b01      	subs	r3, #1
 801c28c:	9301      	str	r3, [sp, #4]
 801c28e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c290:	bf08      	it	eq
 801c292:	4613      	moveq	r3, r2
 801c294:	e72b      	b.n	801c0ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c296:	1426      	asrs	r6, r4, #16
 801c298:	d460      	bmi.n	801c35c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c29a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c29e:	42b2      	cmp	r2, r6
 801c2a0:	dd5c      	ble.n	801c35c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c2a2:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c2a6:	d459      	bmi.n	801c35c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c2a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c2ac:	4542      	cmp	r2, r8
 801c2ae:	dd55      	ble.n	801c35c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c2b0:	9a02      	ldr	r2, [sp, #8]
 801c2b2:	9903      	ldr	r1, [sp, #12]
 801c2b4:	fb08 6602 	mla	r6, r8, r2, r6
 801c2b8:	0872      	lsrs	r2, r6, #1
 801c2ba:	07f6      	lsls	r6, r6, #31
 801c2bc:	5c8a      	ldrb	r2, [r1, r2]
 801c2be:	bf54      	ite	pl
 801c2c0:	f002 020f 	andpl.w	r2, r2, #15
 801c2c4:	1112      	asrmi	r2, r2, #4
 801c2c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c2ca:	b2d2      	uxtb	r2, r2
 801c2cc:	2a00      	cmp	r2, #0
 801c2ce:	d045      	beq.n	801c35c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c2d0:	4926      	ldr	r1, [pc, #152]	@ (801c36c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c2d2:	f8d1 8000 	ldr.w	r8, [r1]
 801c2d6:	9905      	ldr	r1, [sp, #20]
 801c2d8:	fa5f fb88 	uxtb.w	fp, r8
 801c2dc:	434a      	muls	r2, r1
 801c2de:	1c56      	adds	r6, r2, #1
 801c2e0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c2e4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c2e8:	1212      	asrs	r2, r2, #8
 801c2ea:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c2ee:	fa1f fa82 	uxth.w	sl, r2
 801c2f2:	43d2      	mvns	r2, r2
 801c2f4:	fb1b fb0a 	smulbb	fp, fp, sl
 801c2f8:	b2d2      	uxtb	r2, r2
 801c2fa:	fb09 b902 	mla	r9, r9, r2, fp
 801c2fe:	fa1f f989 	uxth.w	r9, r9
 801c302:	f109 0b01 	add.w	fp, r9, #1
 801c306:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c30a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801c30e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801c312:	fb1b fb0a 	smulbb	fp, fp, sl
 801c316:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c31a:	fb18 fa0a 	smulbb	sl, r8, sl
 801c31e:	f805 9006 	strb.w	r9, [r5, r6]
 801c322:	442e      	add	r6, r5
 801c324:	f896 8002 	ldrb.w	r8, [r6, #2]
 801c328:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c32c:	fb08 aa02 	mla	sl, r8, r2, sl
 801c330:	fb09 b902 	mla	r9, r9, r2, fp
 801c334:	fa1f fa8a 	uxth.w	sl, sl
 801c338:	fa1f f989 	uxth.w	r9, r9
 801c33c:	f10a 0801 	add.w	r8, sl, #1
 801c340:	f109 0b01 	add.w	fp, r9, #1
 801c344:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801c348:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c34c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c350:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c354:	f886 a002 	strb.w	sl, [r6, #2]
 801c358:	f886 9001 	strb.w	r9, [r6, #1]
 801c35c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c35e:	4474      	add	r4, lr
 801c360:	3701      	adds	r7, #1
 801c362:	4410      	add	r0, r2
 801c364:	e755      	b.n	801c212 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801c366:	b007      	add	sp, #28
 801c368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c36c:	24026428 	.word	0x24026428

0801c370 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c374:	b085      	sub	sp, #20
 801c376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c37a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c37c:	9203      	str	r2, [sp, #12]
 801c37e:	6860      	ldr	r0, [r4, #4]
 801c380:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801c384:	9100      	str	r1, [sp, #0]
 801c386:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801c38a:	fb00 2606 	mla	r6, r0, r6, r2
 801c38e:	6822      	ldr	r2, [r4, #0]
 801c390:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c394:	4416      	add	r6, r2
 801c396:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c39a:	3201      	adds	r2, #1
 801c39c:	f022 0201 	bic.w	r2, r2, #1
 801c3a0:	9201      	str	r2, [sp, #4]
 801c3a2:	f8dc 2000 	ldr.w	r2, [ip]
 801c3a6:	9202      	str	r2, [sp, #8]
 801c3a8:	9a00      	ldr	r2, [sp, #0]
 801c3aa:	2a00      	cmp	r2, #0
 801c3ac:	dc03      	bgt.n	801c3b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c3ae:	9a03      	ldr	r2, [sp, #12]
 801c3b0:	2a00      	cmp	r2, #0
 801c3b2:	f340 8140 	ble.w	801c636 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801c3b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c3b8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c3bc:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801c3c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c3c2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c3c6:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	dd0e      	ble.n	801c3ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c3ce:	142a      	asrs	r2, r5, #16
 801c3d0:	d405      	bmi.n	801c3de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c3d2:	4572      	cmp	r2, lr
 801c3d4:	da03      	bge.n	801c3de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c3d6:	1422      	asrs	r2, r4, #16
 801c3d8:	d401      	bmi.n	801c3de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c3da:	42ba      	cmp	r2, r7
 801c3dc:	db07      	blt.n	801c3ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c3de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c3e0:	3b01      	subs	r3, #1
 801c3e2:	3603      	adds	r6, #3
 801c3e4:	4415      	add	r5, r2
 801c3e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c3e8:	4414      	add	r4, r2
 801c3ea:	e7ee      	b.n	801c3ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c3ec:	d072      	beq.n	801c4d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c3ee:	1e5a      	subs	r2, r3, #1
 801c3f0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801c3f2:	fb00 5002 	mla	r0, r0, r2, r5
 801c3f6:	1400      	asrs	r0, r0, #16
 801c3f8:	d463      	bmi.n	801c4c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c3fa:	4570      	cmp	r0, lr
 801c3fc:	da61      	bge.n	801c4c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c3fe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c400:	fb00 4202 	mla	r2, r0, r2, r4
 801c404:	1412      	asrs	r2, r2, #16
 801c406:	d45c      	bmi.n	801c4c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c408:	42ba      	cmp	r2, r7
 801c40a:	da5a      	bge.n	801c4c2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c40c:	1cf0      	adds	r0, r6, #3
 801c40e:	469a      	mov	sl, r3
 801c410:	f1ba 0f00 	cmp.w	sl, #0
 801c414:	dd59      	ble.n	801c4ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c416:	142a      	asrs	r2, r5, #16
 801c418:	9901      	ldr	r1, [sp, #4]
 801c41a:	1427      	asrs	r7, r4, #16
 801c41c:	fb01 2707 	mla	r7, r1, r7, r2
 801c420:	9902      	ldr	r1, [sp, #8]
 801c422:	087a      	lsrs	r2, r7, #1
 801c424:	5c8a      	ldrb	r2, [r1, r2]
 801c426:	07f9      	lsls	r1, r7, #31
 801c428:	bf54      	ite	pl
 801c42a:	f002 020f 	andpl.w	r2, r2, #15
 801c42e:	1112      	asrmi	r2, r2, #4
 801c430:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c434:	b2d2      	uxtb	r2, r2
 801c436:	2a00      	cmp	r2, #0
 801c438:	d03b      	beq.n	801c4b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c43a:	4980      	ldr	r1, [pc, #512]	@ (801c63c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801c43c:	2aff      	cmp	r2, #255	@ 0xff
 801c43e:	680f      	ldr	r7, [r1, #0]
 801c440:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c444:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c448:	b2ff      	uxtb	r7, r7
 801c44a:	f000 80ed 	beq.w	801c628 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801c44e:	fa1f f882 	uxth.w	r8, r2
 801c452:	43d2      	mvns	r2, r2
 801c454:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801c458:	fb17 f708 	smulbb	r7, r7, r8
 801c45c:	b2d2      	uxtb	r2, r2
 801c45e:	fb19 f908 	smulbb	r9, r9, r8
 801c462:	fb0e 7702 	mla	r7, lr, r2, r7
 801c466:	fb1b f808 	smulbb	r8, fp, r8
 801c46a:	b2bf      	uxth	r7, r7
 801c46c:	f107 0e01 	add.w	lr, r7, #1
 801c470:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c474:	123f      	asrs	r7, r7, #8
 801c476:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c47a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801c47e:	fb07 9902 	mla	r9, r7, r2, r9
 801c482:	fa1f f989 	uxth.w	r9, r9
 801c486:	f109 0701 	add.w	r7, r9, #1
 801c48a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c48e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801c492:	fb07 8802 	mla	r8, r7, r2, r8
 801c496:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c49a:	fa1f f888 	uxth.w	r8, r8
 801c49e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c4a2:	f108 0201 	add.w	r2, r8, #1
 801c4a6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c4aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c4ae:	f800 8c01 	strb.w	r8, [r0, #-1]
 801c4b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c4b4:	3003      	adds	r0, #3
 801c4b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c4ba:	4415      	add	r5, r2
 801c4bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c4be:	4414      	add	r4, r2
 801c4c0:	e7a6      	b.n	801c410 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c4c2:	2700      	movs	r7, #0
 801c4c4:	1bda      	subs	r2, r3, r7
 801c4c6:	2a00      	cmp	r2, #0
 801c4c8:	dc40      	bgt.n	801c54c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801c4ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c4ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4d2:	441e      	add	r6, r3
 801c4d4:	9b00      	ldr	r3, [sp, #0]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	f340 80ad 	ble.w	801c636 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801c4dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c4e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4e6:	eeb0 6a62 	vmov.f32	s12, s5
 801c4ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c4ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c4f6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c4fa:	eeb0 6a43 	vmov.f32	s12, s6
 801c4fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c502:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c506:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c50a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c50e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c512:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c516:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c51a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c51e:	ee12 2a90 	vmov	r2, s5
 801c522:	eef0 2a47 	vmov.f32	s5, s14
 801c526:	fb92 f3f3 	sdiv	r3, r2, r3
 801c52a:	ee13 2a10 	vmov	r2, s6
 801c52e:	9311      	str	r3, [sp, #68]	@ 0x44
 801c530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c532:	eeb0 3a67 	vmov.f32	s6, s15
 801c536:	fb92 f3f3 	sdiv	r3, r2, r3
 801c53a:	9312      	str	r3, [sp, #72]	@ 0x48
 801c53c:	9b00      	ldr	r3, [sp, #0]
 801c53e:	9a03      	ldr	r2, [sp, #12]
 801c540:	3b01      	subs	r3, #1
 801c542:	9300      	str	r3, [sp, #0]
 801c544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c546:	bf08      	it	eq
 801c548:	4613      	moveq	r3, r2
 801c54a:	e72d      	b.n	801c3a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c54c:	1428      	asrs	r0, r5, #16
 801c54e:	d45c      	bmi.n	801c60a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c550:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c554:	4282      	cmp	r2, r0
 801c556:	dd58      	ble.n	801c60a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c558:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c55c:	d455      	bmi.n	801c60a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c55e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c562:	4572      	cmp	r2, lr
 801c564:	dd51      	ble.n	801c60a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c566:	9a01      	ldr	r2, [sp, #4]
 801c568:	9902      	ldr	r1, [sp, #8]
 801c56a:	fb0e 0002 	mla	r0, lr, r2, r0
 801c56e:	0842      	lsrs	r2, r0, #1
 801c570:	07c0      	lsls	r0, r0, #31
 801c572:	5c8a      	ldrb	r2, [r1, r2]
 801c574:	bf54      	ite	pl
 801c576:	f002 020f 	andpl.w	r2, r2, #15
 801c57a:	1112      	asrmi	r2, r2, #4
 801c57c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c580:	b2d2      	uxtb	r2, r2
 801c582:	2a00      	cmp	r2, #0
 801c584:	d041      	beq.n	801c60a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c586:	492d      	ldr	r1, [pc, #180]	@ (801c63c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801c588:	2aff      	cmp	r2, #255	@ 0xff
 801c58a:	6808      	ldr	r0, [r1, #0]
 801c58c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801c590:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c594:	fa5f fe80 	uxtb.w	lr, r0
 801c598:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801c59c:	d03b      	beq.n	801c616 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801c59e:	fa1f f982 	uxth.w	r9, r2
 801c5a2:	4438      	add	r0, r7
 801c5a4:	43d2      	mvns	r2, r2
 801c5a6:	f816 8000 	ldrb.w	r8, [r6, r0]
 801c5aa:	fb1e fe09 	smulbb	lr, lr, r9
 801c5ae:	fb1a fa09 	smulbb	sl, sl, r9
 801c5b2:	b2d2      	uxtb	r2, r2
 801c5b4:	fb1b f909 	smulbb	r9, fp, r9
 801c5b8:	fb08 ee02 	mla	lr, r8, r2, lr
 801c5bc:	fa1f fe8e 	uxth.w	lr, lr
 801c5c0:	f10e 0801 	add.w	r8, lr, #1
 801c5c4:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801c5c8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c5cc:	f806 e000 	strb.w	lr, [r6, r0]
 801c5d0:	4430      	add	r0, r6
 801c5d2:	f890 e001 	ldrb.w	lr, [r0, #1]
 801c5d6:	fb0e aa02 	mla	sl, lr, r2, sl
 801c5da:	fa1f fa8a 	uxth.w	sl, sl
 801c5de:	f10a 0e01 	add.w	lr, sl, #1
 801c5e2:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801c5e6:	f890 e002 	ldrb.w	lr, [r0, #2]
 801c5ea:	fb0e 9902 	mla	r9, lr, r2, r9
 801c5ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c5f2:	fa1f f989 	uxth.w	r9, r9
 801c5f6:	f880 a001 	strb.w	sl, [r0, #1]
 801c5fa:	f109 0201 	add.w	r2, r9, #1
 801c5fe:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c602:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c606:	f880 9002 	strb.w	r9, [r0, #2]
 801c60a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c60c:	3701      	adds	r7, #1
 801c60e:	4415      	add	r5, r2
 801c610:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c612:	4414      	add	r4, r2
 801c614:	e756      	b.n	801c4c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c616:	4438      	add	r0, r7
 801c618:	f806 e000 	strb.w	lr, [r6, r0]
 801c61c:	4430      	add	r0, r6
 801c61e:	f880 a001 	strb.w	sl, [r0, #1]
 801c622:	f880 b002 	strb.w	fp, [r0, #2]
 801c626:	e7f0      	b.n	801c60a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c628:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c62c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c630:	f800 bc01 	strb.w	fp, [r0, #-1]
 801c634:	e73d      	b.n	801c4b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c636:	b005      	add	sp, #20
 801c638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c63c:	24026428 	.word	0x24026428

0801c640 <_ZN8touchgfx8LCD24bppD1Ev>:
 801c640:	4770      	bx	lr

0801c642 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801c642:	4770      	bx	lr

0801c644 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801c644:	4770      	bx	lr

0801c646 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801c646:	4770      	bx	lr

0801c648 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801c648:	4770      	bx	lr

0801c64a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c64a:	4770      	bx	lr

0801c64c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c64c:	4770      	bx	lr

0801c64e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c64e:	4770      	bx	lr

0801c650 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c650:	4770      	bx	lr

0801c652 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c652:	4770      	bx	lr

0801c654 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c654:	4770      	bx	lr

0801c656 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c656:	4770      	bx	lr

0801c658 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c658:	4770      	bx	lr

0801c65a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c65a:	4770      	bx	lr

0801c65c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c65c:	4770      	bx	lr

0801c65e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c65e:	4770      	bx	lr

0801c660 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c660:	4770      	bx	lr

0801c662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c662:	4770      	bx	lr

0801c664 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c664:	4770      	bx	lr

0801c666 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c666:	4770      	bx	lr

0801c668 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c668:	4770      	bx	lr

0801c66a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c66a:	4770      	bx	lr

0801c66c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c66c:	4770      	bx	lr

0801c66e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c66e:	4770      	bx	lr

0801c670 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c670:	4770      	bx	lr
	...

0801c674 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c676:	4606      	mov	r6, r0
 801c678:	b087      	sub	sp, #28
 801c67a:	4615      	mov	r5, r2
 801c67c:	461f      	mov	r7, r3
 801c67e:	b353      	cbz	r3, 801c6d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c680:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c684:	2b00      	cmp	r3, #0
 801c686:	dd26      	ble.n	801c6d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c688:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	dd22      	ble.n	801c6d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c690:	6808      	ldr	r0, [r1, #0]
 801c692:	aa04      	add	r2, sp, #16
 801c694:	6849      	ldr	r1, [r1, #4]
 801c696:	4c1b      	ldr	r4, [pc, #108]	@ (801c704 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c698:	c203      	stmia	r2!, {r0, r1}
 801c69a:	a804      	add	r0, sp, #16
 801c69c:	f7fa fa52 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c6a0:	6820      	ldr	r0, [r4, #0]
 801c6a2:	6803      	ldr	r3, [r0, #0]
 801c6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c6a6:	4798      	blx	r3
 801c6a8:	2fff      	cmp	r7, #255	@ 0xff
 801c6aa:	d016      	beq.n	801c6da <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c6ac:	f010 0f08 	tst.w	r0, #8
 801c6b0:	6820      	ldr	r0, [r4, #0]
 801c6b2:	d015      	beq.n	801c6e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801c6b4:	2400      	movs	r4, #0
 801c6b6:	6801      	ldr	r1, [r0, #0]
 801c6b8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c6bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c6c0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801c6c4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c6c8:	9401      	str	r4, [sp, #4]
 801c6ca:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c6ce:	9400      	str	r4, [sp, #0]
 801c6d0:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801c6d2:	4629      	mov	r1, r5
 801c6d4:	47a0      	blx	r4
 801c6d6:	b007      	add	sp, #28
 801c6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6da:	f010 0f02 	tst.w	r0, #2
 801c6de:	e7e7      	b.n	801c6b0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801c6e0:	6803      	ldr	r3, [r0, #0]
 801c6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6e4:	4798      	blx	r3
 801c6e6:	4b08      	ldr	r3, [pc, #32]	@ (801c708 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801c6e8:	4601      	mov	r1, r0
 801c6ea:	4630      	mov	r0, r6
 801c6ec:	881a      	ldrh	r2, [r3, #0]
 801c6ee:	6833      	ldr	r3, [r6, #0]
 801c6f0:	e9cd 5700 	strd	r5, r7, [sp]
 801c6f4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801c6f6:	ab04      	add	r3, sp, #16
 801c6f8:	47a8      	blx	r5
 801c6fa:	6820      	ldr	r0, [r4, #0]
 801c6fc:	6803      	ldr	r3, [r0, #0]
 801c6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c700:	4798      	blx	r3
 801c702:	e7e8      	b.n	801c6d6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c704:	24026418 	.word	0x24026418
 801c708:	24026412 	.word	0x24026412

0801c70c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c70c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c710:	b08b      	sub	sp, #44	@ 0x2c
 801c712:	460d      	mov	r5, r1
 801c714:	4616      	mov	r6, r2
 801c716:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801c71a:	f1b8 0f00 	cmp.w	r8, #0
 801c71e:	d047      	beq.n	801c7b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801c720:	6810      	ldr	r0, [r2, #0]
 801c722:	ac06      	add	r4, sp, #24
 801c724:	6851      	ldr	r1, [r2, #4]
 801c726:	4f51      	ldr	r7, [pc, #324]	@ (801c86c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801c728:	c403      	stmia	r4!, {r0, r1}
 801c72a:	6818      	ldr	r0, [r3, #0]
 801c72c:	ac08      	add	r4, sp, #32
 801c72e:	6859      	ldr	r1, [r3, #4]
 801c730:	c403      	stmia	r4!, {r0, r1}
 801c732:	a806      	add	r0, sp, #24
 801c734:	f7fa fa06 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c738:	4631      	mov	r1, r6
 801c73a:	a808      	add	r0, sp, #32
 801c73c:	f7fa fa2a 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c740:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c744:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c748:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c74c:	6838      	ldr	r0, [r7, #0]
 801c74e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c752:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801c756:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801c75a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c75e:	440d      	add	r5, r1
 801c760:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c764:	440a      	add	r2, r1
 801c766:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c76a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c76e:	4413      	add	r3, r2
 801c770:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c774:	6803      	ldr	r3, [r0, #0]
 801c776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c778:	4798      	blx	r3
 801c77a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801c77e:	d01a      	beq.n	801c7b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801c780:	f010 0f04 	tst.w	r0, #4
 801c784:	6838      	ldr	r0, [r7, #0]
 801c786:	d019      	beq.n	801c7bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801c788:	2100      	movs	r1, #0
 801c78a:	6807      	ldr	r7, [r0, #0]
 801c78c:	b2a4      	uxth	r4, r4
 801c78e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c792:	b2b6      	uxth	r6, r6
 801c794:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801c798:	9401      	str	r4, [sp, #4]
 801c79a:	9600      	str	r6, [sp, #0]
 801c79c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c7a0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801c7a4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c7a8:	9102      	str	r1, [sp, #8]
 801c7aa:	4629      	mov	r1, r5
 801c7ac:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801c7ae:	47a0      	blx	r4
 801c7b0:	b00b      	add	sp, #44	@ 0x2c
 801c7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7b6:	f010 0f01 	tst.w	r0, #1
 801c7ba:	e7e3      	b.n	801c784 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801c7bc:	6803      	ldr	r3, [r0, #0]
 801c7be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c7c0:	4798      	blx	r3
 801c7c2:	4a2b      	ldr	r2, [pc, #172]	@ (801c870 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801c7c4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801c7c8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801c7cc:	8813      	ldrh	r3, [r2, #0]
 801c7ce:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801c7d2:	fb03 f404 	mul.w	r4, r3, r4
 801c7d6:	fb03 c101 	mla	r1, r3, r1, ip
 801c7da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c7de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c7e2:	4408      	add	r0, r1
 801c7e4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801c7e8:	4404      	add	r4, r0
 801c7ea:	d02e      	beq.n	801c84a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801c7ec:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801c7f0:	1b9b      	subs	r3, r3, r6
 801c7f2:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801c7f6:	1b96      	subs	r6, r2, r6
 801c7f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c800:	42a0      	cmp	r0, r4
 801c802:	d22d      	bcs.n	801c860 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801c804:	eb00 0e01 	add.w	lr, r0, r1
 801c808:	4570      	cmp	r0, lr
 801c80a:	d210      	bcs.n	801c82e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801c80c:	f890 9000 	ldrb.w	r9, [r0]
 801c810:	f815 2b01 	ldrb.w	r2, [r5], #1
 801c814:	fb19 f90c 	smulbb	r9, r9, ip
 801c818:	fb02 9208 	mla	r2, r2, r8, r9
 801c81c:	b292      	uxth	r2, r2
 801c81e:	f102 0901 	add.w	r9, r2, #1
 801c822:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801c826:	1212      	asrs	r2, r2, #8
 801c828:	f800 2b01 	strb.w	r2, [r0], #1
 801c82c:	e7ec      	b.n	801c808 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801c82e:	4418      	add	r0, r3
 801c830:	4435      	add	r5, r6
 801c832:	e7e5      	b.n	801c800 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801c834:	8813      	ldrh	r3, [r2, #0]
 801c836:	1b9b      	subs	r3, r3, r6
 801c838:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c83c:	4418      	add	r0, r3
 801c83e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c842:	1b9b      	subs	r3, r3, r6
 801c844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c848:	441d      	add	r5, r3
 801c84a:	42a0      	cmp	r0, r4
 801c84c:	d208      	bcs.n	801c860 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801c84e:	eb00 0c01 	add.w	ip, r0, r1
 801c852:	4560      	cmp	r0, ip
 801c854:	d2ee      	bcs.n	801c834 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801c856:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c85a:	f800 3b01 	strb.w	r3, [r0], #1
 801c85e:	e7f8      	b.n	801c852 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801c860:	6838      	ldr	r0, [r7, #0]
 801c862:	6803      	ldr	r3, [r0, #0]
 801c864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c866:	4798      	blx	r3
 801c868:	e7a2      	b.n	801c7b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801c86a:	bf00      	nop
 801c86c:	24026418 	.word	0x24026418
 801c870:	24026412 	.word	0x24026412

0801c874 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c874:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c876:	2300      	movs	r3, #0
 801c878:	b085      	sub	sp, #20
 801c87a:	9300      	str	r3, [sp, #0]
 801c87c:	4b41      	ldr	r3, [pc, #260]	@ (801c984 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801c87e:	781b      	ldrb	r3, [r3, #0]
 801c880:	2b00      	cmp	r3, #0
 801c882:	d136      	bne.n	801c8f2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801c884:	4a40      	ldr	r2, [pc, #256]	@ (801c988 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c886:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c88a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d131      	bne.n	801c8f6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801c892:	4b3e      	ldr	r3, [pc, #248]	@ (801c98c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801c894:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c898:	ac02      	add	r4, sp, #8
 801c89a:	6808      	ldr	r0, [r1, #0]
 801c89c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c8a0:	ab02      	add	r3, sp, #8
 801c8a2:	6849      	ldr	r1, [r1, #4]
 801c8a4:	4d3a      	ldr	r5, [pc, #232]	@ (801c990 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801c8a6:	c303      	stmia	r3!, {r0, r1}
 801c8a8:	4669      	mov	r1, sp
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	f7fa f972 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c8b0:	4668      	mov	r0, sp
 801c8b2:	f7fa f947 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c8ba:	f8bd 2000 	ldrh.w	r2, [sp]
 801c8be:	462e      	mov	r6, r5
 801c8c0:	6828      	ldr	r0, [r5, #0]
 801c8c2:	4413      	add	r3, r2
 801c8c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c8c8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c8cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c8d0:	4413      	add	r3, r2
 801c8d2:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c8d6:	6803      	ldr	r3, [r0, #0]
 801c8d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c8da:	4798      	blx	r3
 801c8dc:	f010 0f01 	tst.w	r0, #1
 801c8e0:	d00b      	beq.n	801c8fa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801c8e2:	6828      	ldr	r0, [r5, #0]
 801c8e4:	6803      	ldr	r3, [r0, #0]
 801c8e6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c8ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c8ec:	4798      	blx	r3
 801c8ee:	b005      	add	sp, #20
 801c8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8f2:	4a26      	ldr	r2, [pc, #152]	@ (801c98c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801c8f4:	e7c7      	b.n	801c886 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c8f6:	4b24      	ldr	r3, [pc, #144]	@ (801c988 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c8f8:	e7cc      	b.n	801c894 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c8fa:	6830      	ldr	r0, [r6, #0]
 801c8fc:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801c900:	6803      	ldr	r3, [r0, #0]
 801c902:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801c906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c908:	4798      	blx	r3
 801c90a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c90e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c912:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801c916:	fb14 3402 	smlabb	r4, r4, r2, r3
 801c91a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c91e:	4404      	add	r4, r0
 801c920:	6830      	ldr	r0, [r6, #0]
 801c922:	6803      	ldr	r3, [r0, #0]
 801c924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c926:	4798      	blx	r3
 801c928:	4917      	ldr	r1, [pc, #92]	@ (801c988 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c92a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c92e:	880b      	ldrh	r3, [r1, #0]
 801c930:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801c934:	fb03 c202 	mla	r2, r3, r2, ip
 801c938:	437b      	muls	r3, r7
 801c93a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801c93e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c942:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c946:	4410      	add	r0, r2
 801c948:	18c2      	adds	r2, r0, r3
 801c94a:	4290      	cmp	r0, r2
 801c94c:	d214      	bcs.n	801c978 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801c94e:	eb00 0c07 	add.w	ip, r0, r7
 801c952:	4560      	cmp	r0, ip
 801c954:	d204      	bcs.n	801c960 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801c956:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c95a:	f800 3b01 	strb.w	r3, [r0], #1
 801c95e:	e7f8      	b.n	801c952 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801c960:	880b      	ldrh	r3, [r1, #0]
 801c962:	1b5b      	subs	r3, r3, r5
 801c964:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c968:	4418      	add	r0, r3
 801c96a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c96e:	1b5b      	subs	r3, r3, r5
 801c970:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c974:	441c      	add	r4, r3
 801c976:	e7e8      	b.n	801c94a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801c978:	6830      	ldr	r0, [r6, #0]
 801c97a:	6803      	ldr	r3, [r0, #0]
 801c97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c97e:	4798      	blx	r3
 801c980:	e7b5      	b.n	801c8ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c982:	bf00      	nop
 801c984:	24026410 	.word	0x24026410
 801c988:	24026412 	.word	0x24026412
 801c98c:	24026414 	.word	0x24026414
 801c990:	24026418 	.word	0x24026418

0801c994 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c998:	b08f      	sub	sp, #60	@ 0x3c
 801c99a:	461c      	mov	r4, r3
 801c99c:	9203      	str	r2, [sp, #12]
 801c99e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c9a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c9a4:	6820      	ldr	r0, [r4, #0]
 801c9a6:	9100      	str	r1, [sp, #0]
 801c9a8:	9204      	str	r2, [sp, #16]
 801c9aa:	aa0a      	add	r2, sp, #40	@ 0x28
 801c9ac:	6861      	ldr	r1, [r4, #4]
 801c9ae:	c203      	stmia	r2!, {r0, r1}
 801c9b0:	6818      	ldr	r0, [r3, #0]
 801c9b2:	aa0c      	add	r2, sp, #48	@ 0x30
 801c9b4:	6859      	ldr	r1, [r3, #4]
 801c9b6:	c203      	stmia	r2!, {r0, r1}
 801c9b8:	a80a      	add	r0, sp, #40	@ 0x28
 801c9ba:	f7fa f8c3 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c9be:	4621      	mov	r1, r4
 801c9c0:	a80c      	add	r0, sp, #48	@ 0x30
 801c9c2:	f7fa f8e7 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c9c6:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801c9ca:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801c9ce:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801c9d2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801c9d6:	bfdb      	ittet	le
 801c9d8:	b2b3      	uxthle	r3, r6
 801c9da:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801c9de:	2301      	movgt	r3, #1
 801c9e0:	fb92 f3f3 	sdivle	r3, r2, r3
 801c9e4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801c9e8:	441d      	add	r5, r3
 801c9ea:	fb92 f1f3 	sdiv	r1, r2, r3
 801c9ee:	fa1f fc81 	uxth.w	ip, r1
 801c9f2:	3d01      	subs	r5, #1
 801c9f4:	fb0c 2413 	mls	r4, ip, r3, r2
 801c9f8:	4661      	mov	r1, ip
 801c9fa:	fb14 f406 	smulbb	r4, r4, r6
 801c9fe:	4404      	add	r4, r0
 801ca00:	fb95 f5f3 	sdiv	r5, r5, r3
 801ca04:	b2a4      	uxth	r4, r4
 801ca06:	b131      	cbz	r1, 801ca16 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801ca08:	9b03      	ldr	r3, [sp, #12]
 801ca0a:	9900      	ldr	r1, [sp, #0]
 801ca0c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ca10:	ba1b      	rev	r3, r3
 801ca12:	4419      	add	r1, r3
 801ca14:	9100      	str	r1, [sp, #0]
 801ca16:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ca1a:	b2ad      	uxth	r5, r5
 801ca1c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801ca20:	4418      	add	r0, r3
 801ca22:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ca26:	00ad      	lsls	r5, r5, #2
 801ca28:	441a      	add	r2, r3
 801ca2a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ca2e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801ca32:	9301      	str	r3, [sp, #4]
 801ca34:	4b79      	ldr	r3, [pc, #484]	@ (801cc1c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801ca36:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ca3a:	6818      	ldr	r0, [r3, #0]
 801ca3c:	6803      	ldr	r3, [r0, #0]
 801ca3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca40:	4798      	blx	r3
 801ca42:	4a77      	ldr	r2, [pc, #476]	@ (801cc20 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801ca44:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801ca48:	2c00      	cmp	r4, #0
 801ca4a:	8813      	ldrh	r3, [r2, #0]
 801ca4c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801ca50:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca52:	fb03 c101 	mla	r1, r3, r1, ip
 801ca56:	fb06 f303 	mul.w	r3, r6, r3
 801ca5a:	bf18      	it	ne
 801ca5c:	2600      	movne	r6, #0
 801ca5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ca62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca66:	4408      	add	r0, r1
 801ca68:	4403      	add	r3, r0
 801ca6a:	9306      	str	r3, [sp, #24]
 801ca6c:	f105 0304 	add.w	r3, r5, #4
 801ca70:	9305      	str	r3, [sp, #20]
 801ca72:	9b01      	ldr	r3, [sp, #4]
 801ca74:	bf08      	it	eq
 801ca76:	461e      	moveq	r6, r3
 801ca78:	2300      	movs	r3, #0
 801ca7a:	b2b6      	uxth	r6, r6
 801ca7c:	9302      	str	r3, [sp, #8]
 801ca7e:	9a06      	ldr	r2, [sp, #24]
 801ca80:	4290      	cmp	r0, r2
 801ca82:	f080 80c2 	bcs.w	801cc0a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801ca86:	b963      	cbnz	r3, 801caa2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801ca88:	9b00      	ldr	r3, [sp, #0]
 801ca8a:	781a      	ldrb	r2, [r3, #0]
 801ca8c:	0993      	lsrs	r3, r2, #6
 801ca8e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ca92:	9202      	str	r2, [sp, #8]
 801ca94:	1e5a      	subs	r2, r3, #1
 801ca96:	2a02      	cmp	r2, #2
 801ca98:	d815      	bhi.n	801cac6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801ca9a:	9a00      	ldr	r2, [sp, #0]
 801ca9c:	b29b      	uxth	r3, r3
 801ca9e:	3201      	adds	r2, #1
 801caa0:	9200      	str	r2, [sp, #0]
 801caa2:	b1b4      	cbz	r4, 801cad2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801caa4:	429c      	cmp	r4, r3
 801caa6:	bf91      	iteee	ls
 801caa8:	1b1c      	subls	r4, r3, r4
 801caaa:	1ae4      	subhi	r4, r4, r3
 801caac:	4635      	movhi	r5, r6
 801caae:	f04f 0e00 	movhi.w	lr, #0
 801cab2:	bf9b      	ittet	ls
 801cab4:	fa1f fe84 	uxthls.w	lr, r4
 801cab8:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801cabc:	b2a4      	uxthhi	r4, r4
 801cabe:	2400      	movls	r4, #0
 801cac0:	4673      	mov	r3, lr
 801cac2:	462e      	mov	r6, r5
 801cac4:	e7db      	b.n	801ca7e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801cac6:	9a00      	ldr	r2, [sp, #0]
 801cac8:	9b00      	ldr	r3, [sp, #0]
 801caca:	3202      	adds	r2, #2
 801cacc:	785b      	ldrb	r3, [r3, #1]
 801cace:	9200      	str	r2, [sp, #0]
 801cad0:	e7e7      	b.n	801caa2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801cad2:	2204      	movs	r2, #4
 801cad4:	9905      	ldr	r1, [sp, #20]
 801cad6:	429e      	cmp	r6, r3
 801cad8:	4615      	mov	r5, r2
 801cada:	9a02      	ldr	r2, [sp, #8]
 801cadc:	bf94      	ite	ls
 801cade:	eba3 0e06 	subls.w	lr, r3, r6
 801cae2:	46a6      	movhi	lr, r4
 801cae4:	fb15 1202 	smlabb	r2, r5, r2, r1
 801cae8:	9903      	ldr	r1, [sp, #12]
 801caea:	bf8c      	ite	hi
 801caec:	1af5      	subhi	r5, r6, r3
 801caee:	fa1f fe8e 	uxthls.w	lr, lr
 801caf2:	f851 c002 	ldr.w	ip, [r1, r2]
 801caf6:	bf9a      	itte	ls
 801caf8:	4625      	movls	r5, r4
 801cafa:	4632      	movls	r2, r6
 801cafc:	b2ad      	uxthhi	r5, r5
 801cafe:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801cb02:	bf88      	it	hi
 801cb04:	461a      	movhi	r2, r3
 801cb06:	b179      	cbz	r1, 801cb28 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801cb08:	29ff      	cmp	r1, #255	@ 0xff
 801cb0a:	fa5f f98c 	uxtb.w	r9, ip
 801cb0e:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801cb12:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801cb16:	d126      	bne.n	801cb66 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801cb18:	9f04      	ldr	r7, [sp, #16]
 801cb1a:	2fff      	cmp	r7, #255	@ 0xff
 801cb1c:	d123      	bne.n	801cb66 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801cb1e:	4682      	mov	sl, r0
 801cb20:	4611      	mov	r1, r2
 801cb22:	f10a 0a03 	add.w	sl, sl, #3
 801cb26:	b9a9      	cbnz	r1, 801cb54 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801cb28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb2c:	429e      	cmp	r6, r3
 801cb2e:	4410      	add	r0, r2
 801cb30:	d8c6      	bhi.n	801cac0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801cb32:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801cb36:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801cb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb3c:	1b64      	subs	r4, r4, r5
 801cb3e:	9a01      	ldr	r2, [sp, #4]
 801cb40:	881b      	ldrh	r3, [r3, #0]
 801cb42:	b2a4      	uxth	r4, r4
 801cb44:	1a9b      	subs	r3, r3, r2
 801cb46:	2c00      	cmp	r4, #0
 801cb48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb4c:	bf18      	it	ne
 801cb4e:	2500      	movne	r5, #0
 801cb50:	4418      	add	r0, r3
 801cb52:	e7b5      	b.n	801cac0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801cb54:	3901      	subs	r1, #1
 801cb56:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801cb5a:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801cb5e:	f80a cc01 	strb.w	ip, [sl, #-1]
 801cb62:	b289      	uxth	r1, r1
 801cb64:	e7dd      	b.n	801cb22 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801cb66:	9f04      	ldr	r7, [sp, #16]
 801cb68:	fb07 fa01 	mul.w	sl, r7, r1
 801cb6c:	f10a 0101 	add.w	r1, sl, #1
 801cb70:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801cb74:	1209      	asrs	r1, r1, #8
 801cb76:	ea6f 0a01 	mvn.w	sl, r1
 801cb7a:	b289      	uxth	r1, r1
 801cb7c:	fb19 f901 	smulbb	r9, r9, r1
 801cb80:	fa5f fa8a 	uxtb.w	sl, sl
 801cb84:	fb18 f801 	smulbb	r8, r8, r1
 801cb88:	fb1c f101 	smulbb	r1, ip, r1
 801cb8c:	fa1f f789 	uxth.w	r7, r9
 801cb90:	4684      	mov	ip, r0
 801cb92:	4691      	mov	r9, r2
 801cb94:	9707      	str	r7, [sp, #28]
 801cb96:	b289      	uxth	r1, r1
 801cb98:	fa1f f788 	uxth.w	r7, r8
 801cb9c:	9708      	str	r7, [sp, #32]
 801cb9e:	f10c 0c03 	add.w	ip, ip, #3
 801cba2:	f1b9 0f00 	cmp.w	r9, #0
 801cba6:	d0bf      	beq.n	801cb28 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801cba8:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801cbac:	f109 39ff 	add.w	r9, r9, #4294967295
 801cbb0:	9f07      	ldr	r7, [sp, #28]
 801cbb2:	fa1f f989 	uxth.w	r9, r9
 801cbb6:	fb08 780a 	mla	r8, r8, sl, r7
 801cbba:	9f08      	ldr	r7, [sp, #32]
 801cbbc:	fa1f f888 	uxth.w	r8, r8
 801cbc0:	f108 0b01 	add.w	fp, r8, #1
 801cbc4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cbc8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cbcc:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801cbd0:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801cbd4:	fb08 780a 	mla	r8, r8, sl, r7
 801cbd8:	fa1f f888 	uxth.w	r8, r8
 801cbdc:	f108 0b01 	add.w	fp, r8, #1
 801cbe0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cbe4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cbe8:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801cbec:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801cbf0:	fb08 180a 	mla	r8, r8, sl, r1
 801cbf4:	fa1f f888 	uxth.w	r8, r8
 801cbf8:	f108 0b01 	add.w	fp, r8, #1
 801cbfc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cc00:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cc04:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801cc08:	e7c9      	b.n	801cb9e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801cc0a:	4b04      	ldr	r3, [pc, #16]	@ (801cc1c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801cc0c:	6818      	ldr	r0, [r3, #0]
 801cc0e:	6803      	ldr	r3, [r0, #0]
 801cc10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc12:	4798      	blx	r3
 801cc14:	b00f      	add	sp, #60	@ 0x3c
 801cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc1a:	bf00      	nop
 801cc1c:	24026418 	.word	0x24026418
 801cc20:	24026412 	.word	0x24026412

0801cc24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801cc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc28:	b089      	sub	sp, #36	@ 0x24
 801cc2a:	4607      	mov	r7, r0
 801cc2c:	4689      	mov	r9, r1
 801cc2e:	4692      	mov	sl, r2
 801cc30:	ac08      	add	r4, sp, #32
 801cc32:	461e      	mov	r6, r3
 801cc34:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801cc38:	4620      	mov	r0, r4
 801cc3a:	f7fd ff77 	bl	801ab2c <_ZNK8touchgfx6Bitmap7getDataEv>
 801cc3e:	683b      	ldr	r3, [r7, #0]
 801cc40:	4605      	mov	r5, r0
 801cc42:	4620      	mov	r0, r4
 801cc44:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801cc48:	f7fd feb6 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cc4c:	4683      	mov	fp, r0
 801cc4e:	4620      	mov	r0, r4
 801cc50:	f7fd fee6 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cc54:	4653      	mov	r3, sl
 801cc56:	464a      	mov	r2, r9
 801cc58:	4639      	mov	r1, r7
 801cc5a:	9500      	str	r5, [sp, #0]
 801cc5c:	e9cd b001 	strd	fp, r0, [sp, #4]
 801cc60:	a806      	add	r0, sp, #24
 801cc62:	47c0      	blx	r8
 801cc64:	a906      	add	r1, sp, #24
 801cc66:	4630      	mov	r0, r6
 801cc68:	f7fd fd8a 	bl	801a780 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801cc6c:	4628      	mov	r0, r5
 801cc6e:	b009      	add	sp, #36	@ 0x24
 801cc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc74 <_ZN8touchgfx8LCD24bppD0Ev>:
 801cc74:	b510      	push	{r4, lr}
 801cc76:	4604      	mov	r4, r0
 801cc78:	216c      	movs	r1, #108	@ 0x6c
 801cc7a:	f008 fc60 	bl	802553e <_ZdlPvj>
 801cc7e:	4620      	mov	r0, r4
 801cc80:	bd10      	pop	{r4, pc}

0801cc82 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801cc82:	b510      	push	{r4, lr}
 801cc84:	4604      	mov	r4, r0
 801cc86:	2104      	movs	r1, #4
 801cc88:	f008 fc59 	bl	802553e <_ZdlPvj>
 801cc8c:	4620      	mov	r0, r4
 801cc8e:	bd10      	pop	{r4, pc}

0801cc90 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801cc90:	b510      	push	{r4, lr}
 801cc92:	4604      	mov	r4, r0
 801cc94:	2104      	movs	r1, #4
 801cc96:	f008 fc52 	bl	802553e <_ZdlPvj>
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	bd10      	pop	{r4, pc}

0801cc9e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801cc9e:	b510      	push	{r4, lr}
 801cca0:	4604      	mov	r4, r0
 801cca2:	f640 0144 	movw	r1, #2116	@ 0x844
 801cca6:	f008 fc4a 	bl	802553e <_ZdlPvj>
 801ccaa:	4620      	mov	r0, r4
 801ccac:	bd10      	pop	{r4, pc}

0801ccae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801ccae:	b510      	push	{r4, lr}
 801ccb0:	4604      	mov	r4, r0
 801ccb2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801ccb6:	f008 fc42 	bl	802553e <_ZdlPvj>
 801ccba:	4620      	mov	r0, r4
 801ccbc:	bd10      	pop	{r4, pc}

0801ccbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ccbe:	b510      	push	{r4, lr}
 801ccc0:	4604      	mov	r4, r0
 801ccc2:	2104      	movs	r1, #4
 801ccc4:	f008 fc3b 	bl	802553e <_ZdlPvj>
 801ccc8:	4620      	mov	r0, r4
 801ccca:	bd10      	pop	{r4, pc}

0801cccc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cccc:	b510      	push	{r4, lr}
 801ccce:	4604      	mov	r4, r0
 801ccd0:	2104      	movs	r1, #4
 801ccd2:	f008 fc34 	bl	802553e <_ZdlPvj>
 801ccd6:	4620      	mov	r0, r4
 801ccd8:	bd10      	pop	{r4, pc}

0801ccda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ccda:	b510      	push	{r4, lr}
 801ccdc:	4604      	mov	r4, r0
 801ccde:	2104      	movs	r1, #4
 801cce0:	f008 fc2d 	bl	802553e <_ZdlPvj>
 801cce4:	4620      	mov	r0, r4
 801cce6:	bd10      	pop	{r4, pc}

0801cce8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cce8:	b510      	push	{r4, lr}
 801ccea:	4604      	mov	r4, r0
 801ccec:	2104      	movs	r1, #4
 801ccee:	f008 fc26 	bl	802553e <_ZdlPvj>
 801ccf2:	4620      	mov	r0, r4
 801ccf4:	bd10      	pop	{r4, pc}

0801ccf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ccf6:	b510      	push	{r4, lr}
 801ccf8:	4604      	mov	r4, r0
 801ccfa:	2104      	movs	r1, #4
 801ccfc:	f008 fc1f 	bl	802553e <_ZdlPvj>
 801cd00:	4620      	mov	r0, r4
 801cd02:	bd10      	pop	{r4, pc}

0801cd04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cd04:	b510      	push	{r4, lr}
 801cd06:	4604      	mov	r4, r0
 801cd08:	2104      	movs	r1, #4
 801cd0a:	f008 fc18 	bl	802553e <_ZdlPvj>
 801cd0e:	4620      	mov	r0, r4
 801cd10:	bd10      	pop	{r4, pc}

0801cd12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cd12:	b510      	push	{r4, lr}
 801cd14:	4604      	mov	r4, r0
 801cd16:	2104      	movs	r1, #4
 801cd18:	f008 fc11 	bl	802553e <_ZdlPvj>
 801cd1c:	4620      	mov	r0, r4
 801cd1e:	bd10      	pop	{r4, pc}

0801cd20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cd20:	b510      	push	{r4, lr}
 801cd22:	4604      	mov	r4, r0
 801cd24:	2104      	movs	r1, #4
 801cd26:	f008 fc0a 	bl	802553e <_ZdlPvj>
 801cd2a:	4620      	mov	r0, r4
 801cd2c:	bd10      	pop	{r4, pc}

0801cd2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cd2e:	b510      	push	{r4, lr}
 801cd30:	4604      	mov	r4, r0
 801cd32:	2104      	movs	r1, #4
 801cd34:	f008 fc03 	bl	802553e <_ZdlPvj>
 801cd38:	4620      	mov	r0, r4
 801cd3a:	bd10      	pop	{r4, pc}

0801cd3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cd3c:	b510      	push	{r4, lr}
 801cd3e:	4604      	mov	r4, r0
 801cd40:	2104      	movs	r1, #4
 801cd42:	f008 fbfc 	bl	802553e <_ZdlPvj>
 801cd46:	4620      	mov	r0, r4
 801cd48:	bd10      	pop	{r4, pc}

0801cd4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cd4a:	b510      	push	{r4, lr}
 801cd4c:	4604      	mov	r4, r0
 801cd4e:	2104      	movs	r1, #4
 801cd50:	f008 fbf5 	bl	802553e <_ZdlPvj>
 801cd54:	4620      	mov	r0, r4
 801cd56:	bd10      	pop	{r4, pc}

0801cd58 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cd58:	b510      	push	{r4, lr}
 801cd5a:	4604      	mov	r4, r0
 801cd5c:	2104      	movs	r1, #4
 801cd5e:	f008 fbee 	bl	802553e <_ZdlPvj>
 801cd62:	4620      	mov	r0, r4
 801cd64:	bd10      	pop	{r4, pc}

0801cd66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cd66:	b510      	push	{r4, lr}
 801cd68:	4604      	mov	r4, r0
 801cd6a:	2104      	movs	r1, #4
 801cd6c:	f008 fbe7 	bl	802553e <_ZdlPvj>
 801cd70:	4620      	mov	r0, r4
 801cd72:	bd10      	pop	{r4, pc}

0801cd74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cd74:	b510      	push	{r4, lr}
 801cd76:	4604      	mov	r4, r0
 801cd78:	2104      	movs	r1, #4
 801cd7a:	f008 fbe0 	bl	802553e <_ZdlPvj>
 801cd7e:	4620      	mov	r0, r4
 801cd80:	bd10      	pop	{r4, pc}

0801cd82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cd82:	b510      	push	{r4, lr}
 801cd84:	4604      	mov	r4, r0
 801cd86:	2104      	movs	r1, #4
 801cd88:	f008 fbd9 	bl	802553e <_ZdlPvj>
 801cd8c:	4620      	mov	r0, r4
 801cd8e:	bd10      	pop	{r4, pc}

0801cd90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cd90:	b510      	push	{r4, lr}
 801cd92:	4604      	mov	r4, r0
 801cd94:	2104      	movs	r1, #4
 801cd96:	f008 fbd2 	bl	802553e <_ZdlPvj>
 801cd9a:	4620      	mov	r0, r4
 801cd9c:	bd10      	pop	{r4, pc}

0801cd9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801cd9e:	b510      	push	{r4, lr}
 801cda0:	4604      	mov	r4, r0
 801cda2:	2104      	movs	r1, #4
 801cda4:	f008 fbcb 	bl	802553e <_ZdlPvj>
 801cda8:	4620      	mov	r0, r4
 801cdaa:	bd10      	pop	{r4, pc}

0801cdac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801cdac:	b510      	push	{r4, lr}
 801cdae:	4604      	mov	r4, r0
 801cdb0:	2104      	movs	r1, #4
 801cdb2:	f008 fbc4 	bl	802553e <_ZdlPvj>
 801cdb6:	4620      	mov	r0, r4
 801cdb8:	bd10      	pop	{r4, pc}

0801cdba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801cdba:	b510      	push	{r4, lr}
 801cdbc:	4604      	mov	r4, r0
 801cdbe:	2104      	movs	r1, #4
 801cdc0:	f008 fbbd 	bl	802553e <_ZdlPvj>
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	bd10      	pop	{r4, pc}

0801cdc8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801cdc8:	b510      	push	{r4, lr}
 801cdca:	4604      	mov	r4, r0
 801cdcc:	2104      	movs	r1, #4
 801cdce:	f008 fbb6 	bl	802553e <_ZdlPvj>
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	bd10      	pop	{r4, pc}
	...

0801cdd8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cddc:	b08f      	sub	sp, #60	@ 0x3c
 801cdde:	461c      	mov	r4, r3
 801cde0:	460e      	mov	r6, r1
 801cde2:	9206      	str	r2, [sp, #24]
 801cde4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801cde8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cdea:	9202      	str	r2, [sp, #8]
 801cdec:	2a00      	cmp	r2, #0
 801cdee:	f000 8128 	beq.w	801d042 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801cdf2:	6820      	ldr	r0, [r4, #0]
 801cdf4:	aa0a      	add	r2, sp, #40	@ 0x28
 801cdf6:	6861      	ldr	r1, [r4, #4]
 801cdf8:	c203      	stmia	r2!, {r0, r1}
 801cdfa:	6818      	ldr	r0, [r3, #0]
 801cdfc:	aa0c      	add	r2, sp, #48	@ 0x30
 801cdfe:	6859      	ldr	r1, [r3, #4]
 801ce00:	c203      	stmia	r2!, {r0, r1}
 801ce02:	a80a      	add	r0, sp, #40	@ 0x28
 801ce04:	f7f9 fe9e 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce08:	4621      	mov	r1, r4
 801ce0a:	a80c      	add	r0, sp, #48	@ 0x30
 801ce0c:	f7f9 fec2 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ce10:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801ce14:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801ce18:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801ce1c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801ce20:	bfdb      	ittet	le
 801ce22:	b2bb      	uxthle	r3, r7
 801ce24:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801ce28:	2301      	movgt	r3, #1
 801ce2a:	fb92 f3f3 	sdivle	r3, r2, r3
 801ce2e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ce32:	441d      	add	r5, r3
 801ce34:	fb92 f1f3 	sdiv	r1, r2, r3
 801ce38:	fa1f fc81 	uxth.w	ip, r1
 801ce3c:	3d01      	subs	r5, #1
 801ce3e:	fb0c 2413 	mls	r4, ip, r3, r2
 801ce42:	4661      	mov	r1, ip
 801ce44:	fb14 f407 	smulbb	r4, r4, r7
 801ce48:	4404      	add	r4, r0
 801ce4a:	fb95 f5f3 	sdiv	r5, r5, r3
 801ce4e:	b2a4      	uxth	r4, r4
 801ce50:	b121      	cbz	r1, 801ce5c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801ce52:	9b06      	ldr	r3, [sp, #24]
 801ce54:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ce58:	ba1b      	rev	r3, r3
 801ce5a:	441e      	add	r6, r3
 801ce5c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ce60:	b2ad      	uxth	r5, r5
 801ce62:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801ce66:	4418      	add	r0, r3
 801ce68:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ce6c:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801ce70:	00ad      	lsls	r5, r5, #2
 801ce72:	441a      	add	r2, r3
 801ce74:	4b74      	ldr	r3, [pc, #464]	@ (801d048 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801ce76:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801ce7a:	6818      	ldr	r0, [r3, #0]
 801ce7c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ce80:	6803      	ldr	r3, [r0, #0]
 801ce82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ce84:	4798      	blx	r3
 801ce86:	4a71      	ldr	r2, [pc, #452]	@ (801d04c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801ce88:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801ce8c:	2c00      	cmp	r4, #0
 801ce8e:	8813      	ldrh	r3, [r2, #0]
 801ce90:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801ce94:	9209      	str	r2, [sp, #36]	@ 0x24
 801ce96:	fb03 c101 	mla	r1, r3, r1, ip
 801ce9a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ce9e:	fb03 f307 	mul.w	r3, r3, r7
 801cea2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cea6:	9204      	str	r2, [sp, #16]
 801cea8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ceac:	9a02      	ldr	r2, [sp, #8]
 801ceae:	4408      	add	r0, r1
 801ceb0:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801ceb4:	4403      	add	r3, r0
 801ceb6:	b292      	uxth	r2, r2
 801ceb8:	9307      	str	r3, [sp, #28]
 801ceba:	f105 0304 	add.w	r3, r5, #4
 801cebe:	bf0c      	ite	eq
 801cec0:	4645      	moveq	r5, r8
 801cec2:	2500      	movne	r5, #0
 801cec4:	9308      	str	r3, [sp, #32]
 801cec6:	2300      	movs	r3, #0
 801cec8:	b2ad      	uxth	r5, r5
 801ceca:	9205      	str	r2, [sp, #20]
 801cecc:	9303      	str	r3, [sp, #12]
 801cece:	9a07      	ldr	r2, [sp, #28]
 801ced0:	4282      	cmp	r2, r0
 801ced2:	f240 80b1 	bls.w	801d038 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801ced6:	b95b      	cbnz	r3, 801cef0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801ced8:	7832      	ldrb	r2, [r6, #0]
 801ceda:	0993      	lsrs	r3, r2, #6
 801cedc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801cee0:	9203      	str	r2, [sp, #12]
 801cee2:	1e5a      	subs	r2, r3, #1
 801cee4:	2a02      	cmp	r2, #2
 801cee6:	bf8d      	iteet	hi
 801cee8:	7873      	ldrbhi	r3, [r6, #1]
 801ceea:	3601      	addls	r6, #1
 801ceec:	b29b      	uxthls	r3, r3
 801ceee:	3602      	addhi	r6, #2
 801cef0:	b184      	cbz	r4, 801cf14 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801cef2:	429c      	cmp	r4, r3
 801cef4:	bf91      	iteee	ls
 801cef6:	1b1c      	subls	r4, r3, r4
 801cef8:	1ae4      	subhi	r4, r4, r3
 801cefa:	4629      	movhi	r1, r5
 801cefc:	f04f 0e00 	movhi.w	lr, #0
 801cf00:	bf9b      	ittet	ls
 801cf02:	fa1f fe84 	uxthls.w	lr, r4
 801cf06:	2400      	movls	r4, #0
 801cf08:	b2a4      	uxthhi	r4, r4
 801cf0a:	fa1f f188 	uxthls.w	r1, r8
 801cf0e:	4673      	mov	r3, lr
 801cf10:	460d      	mov	r5, r1
 801cf12:	e7dc      	b.n	801cece <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801cf14:	2203      	movs	r2, #3
 801cf16:	9908      	ldr	r1, [sp, #32]
 801cf18:	42ab      	cmp	r3, r5
 801cf1a:	4617      	mov	r7, r2
 801cf1c:	9a03      	ldr	r2, [sp, #12]
 801cf1e:	bf24      	itt	cs
 801cf20:	eba3 0e05 	subcs.w	lr, r3, r5
 801cf24:	9501      	strcs	r5, [sp, #4]
 801cf26:	fb17 1702 	smlabb	r7, r7, r2, r1
 801cf2a:	9a06      	ldr	r2, [sp, #24]
 801cf2c:	bf34      	ite	cc
 801cf2e:	1ae9      	subcc	r1, r5, r3
 801cf30:	fa1f fe8e 	uxthcs.w	lr, lr
 801cf34:	4417      	add	r7, r2
 801cf36:	9a02      	ldr	r2, [sp, #8]
 801cf38:	bf2f      	iteee	cs
 801cf3a:	4621      	movcs	r1, r4
 801cf3c:	b289      	uxthcc	r1, r1
 801cf3e:	9301      	strcc	r3, [sp, #4]
 801cf40:	46a6      	movcc	lr, r4
 801cf42:	2aff      	cmp	r2, #255	@ 0xff
 801cf44:	d11e      	bne.n	801cf84 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801cf46:	4681      	mov	r9, r0
 801cf48:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cf4c:	f109 0903 	add.w	r9, r9, #3
 801cf50:	f1bc 0f00 	cmp.w	ip, #0
 801cf54:	d15f      	bne.n	801d016 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801cf56:	9a01      	ldr	r2, [sp, #4]
 801cf58:	42ab      	cmp	r3, r5
 801cf5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf5e:	4410      	add	r0, r2
 801cf60:	d3d5      	bcc.n	801cf0e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801cf62:	fa1f f188 	uxth.w	r1, r8
 801cf66:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801cf6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf6c:	1a64      	subs	r4, r4, r1
 801cf6e:	881b      	ldrh	r3, [r3, #0]
 801cf70:	b2a4      	uxth	r4, r4
 801cf72:	eba3 0308 	sub.w	r3, r3, r8
 801cf76:	2c00      	cmp	r4, #0
 801cf78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf7c:	bf18      	it	ne
 801cf7e:	2100      	movne	r1, #0
 801cf80:	4418      	add	r0, r3
 801cf82:	e7c4      	b.n	801cf0e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801cf84:	4684      	mov	ip, r0
 801cf86:	f8dd a004 	ldr.w	sl, [sp, #4]
 801cf8a:	f10c 0c03 	add.w	ip, ip, #3
 801cf8e:	f1ba 0f00 	cmp.w	sl, #0
 801cf92:	d0e0      	beq.n	801cf56 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801cf94:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801cf98:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cf9c:	9a05      	ldr	r2, [sp, #20]
 801cf9e:	f897 9000 	ldrb.w	r9, [r7]
 801cfa2:	fa1f fa8a 	uxth.w	sl, sl
 801cfa6:	fb1b fb02 	smulbb	fp, fp, r2
 801cfaa:	9a04      	ldr	r2, [sp, #16]
 801cfac:	fb09 b902 	mla	r9, r9, r2, fp
 801cfb0:	9a05      	ldr	r2, [sp, #20]
 801cfb2:	fa1f f989 	uxth.w	r9, r9
 801cfb6:	f109 0b01 	add.w	fp, r9, #1
 801cfba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cfbe:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801cfc2:	fb1b fb02 	smulbb	fp, fp, r2
 801cfc6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cfca:	9a04      	ldr	r2, [sp, #16]
 801cfcc:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801cfd0:	f897 9001 	ldrb.w	r9, [r7, #1]
 801cfd4:	fb09 b902 	mla	r9, r9, r2, fp
 801cfd8:	9a05      	ldr	r2, [sp, #20]
 801cfda:	fa1f f989 	uxth.w	r9, r9
 801cfde:	f109 0b01 	add.w	fp, r9, #1
 801cfe2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cfe6:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801cfea:	fb1b fb02 	smulbb	fp, fp, r2
 801cfee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cff2:	9a04      	ldr	r2, [sp, #16]
 801cff4:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801cff8:	f897 9002 	ldrb.w	r9, [r7, #2]
 801cffc:	fb09 b902 	mla	r9, r9, r2, fp
 801d000:	fa1f f989 	uxth.w	r9, r9
 801d004:	f109 0b01 	add.w	fp, r9, #1
 801d008:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d00c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d010:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801d014:	e7b9      	b.n	801cf8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801d016:	f897 a000 	ldrb.w	sl, [r7]
 801d01a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d01e:	f809 ac03 	strb.w	sl, [r9, #-3]
 801d022:	fa1f fc8c 	uxth.w	ip, ip
 801d026:	f897 a001 	ldrb.w	sl, [r7, #1]
 801d02a:	f809 ac02 	strb.w	sl, [r9, #-2]
 801d02e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d032:	f809 ac01 	strb.w	sl, [r9, #-1]
 801d036:	e789      	b.n	801cf4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801d038:	4b03      	ldr	r3, [pc, #12]	@ (801d048 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801d03a:	6818      	ldr	r0, [r3, #0]
 801d03c:	6803      	ldr	r3, [r0, #0]
 801d03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d040:	4798      	blx	r3
 801d042:	b00f      	add	sp, #60	@ 0x3c
 801d044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d048:	24026418 	.word	0x24026418
 801d04c:	24026412 	.word	0x24026412

0801d050 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d054:	b09b      	sub	sp, #108	@ 0x6c
 801d056:	461d      	mov	r5, r3
 801d058:	4604      	mov	r4, r0
 801d05a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d05c:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801d060:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801d064:	9208      	str	r2, [sp, #32]
 801d066:	2a00      	cmp	r2, #0
 801d068:	f000 81f3 	beq.w	801d452 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801d06c:	6828      	ldr	r0, [r5, #0]
 801d06e:	aa16      	add	r2, sp, #88	@ 0x58
 801d070:	6869      	ldr	r1, [r5, #4]
 801d072:	c203      	stmia	r2!, {r0, r1}
 801d074:	6818      	ldr	r0, [r3, #0]
 801d076:	aa18      	add	r2, sp, #96	@ 0x60
 801d078:	6859      	ldr	r1, [r3, #4]
 801d07a:	c203      	stmia	r2!, {r0, r1}
 801d07c:	a816      	add	r0, sp, #88	@ 0x58
 801d07e:	f7f9 fd61 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d082:	4629      	mov	r1, r5
 801d084:	a818      	add	r0, sp, #96	@ 0x60
 801d086:	f7f9 fd85 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d08a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801d08e:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801d092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d096:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801d09a:	bfdb      	ittet	le
 801d09c:	b29a      	uxthle	r2, r3
 801d09e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d0a2:	f04f 0a01 	movgt.w	sl, #1
 801d0a6:	fb91 faf2 	sdivle	sl, r1, r2
 801d0aa:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801d0ae:	4456      	add	r6, sl
 801d0b0:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801d0b4:	3e01      	subs	r6, #1
 801d0b6:	fb92 f0fa 	sdiv	r0, r2, sl
 801d0ba:	b280      	uxth	r0, r0
 801d0bc:	fb00 281a 	mls	r8, r0, sl, r2
 801d0c0:	900e      	str	r0, [sp, #56]	@ 0x38
 801d0c2:	fb18 f803 	smulbb	r8, r8, r3
 801d0c6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801d0ca:	4488      	add	r8, r1
 801d0cc:	4419      	add	r1, r3
 801d0ce:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801d0d2:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801d0d6:	fa1f f888 	uxth.w	r8, r8
 801d0da:	441a      	add	r2, r3
 801d0dc:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801d0e0:	9303      	str	r3, [sp, #12]
 801d0e2:	4b9c      	ldr	r3, [pc, #624]	@ (801d354 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801d0e4:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801d0e8:	6818      	ldr	r0, [r3, #0]
 801d0ea:	6803      	ldr	r3, [r0, #0]
 801d0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d0ee:	4798      	blx	r3
 801d0f0:	4b99      	ldr	r3, [pc, #612]	@ (801d358 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801d0f2:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801d0f6:	f1b8 0f00 	cmp.w	r8, #0
 801d0fa:	881a      	ldrh	r2, [r3, #0]
 801d0fc:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801d100:	fb02 f505 	mul.w	r5, r2, r5
 801d104:	fb02 7101 	mla	r1, r2, r1, r7
 801d108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d10c:	9314      	str	r3, [sp, #80]	@ 0x50
 801d10e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d112:	9b08      	ldr	r3, [sp, #32]
 801d114:	fb96 f6fa 	sdiv	r6, r6, sl
 801d118:	4408      	add	r0, r1
 801d11a:	f106 0601 	add.w	r6, r6, #1
 801d11e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801d122:	f04f 0100 	mov.w	r1, #0
 801d126:	eb00 0205 	add.w	r2, r0, r5
 801d12a:	b2b6      	uxth	r6, r6
 801d12c:	b29b      	uxth	r3, r3
 801d12e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d130:	9209      	str	r2, [sp, #36]	@ 0x24
 801d132:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d134:	930d      	str	r3, [sp, #52]	@ 0x34
 801d136:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d13a:	4b88      	ldr	r3, [pc, #544]	@ (801d35c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801d13c:	f106 0204 	add.w	r2, r6, #4
 801d140:	eba3 0304 	sub.w	r3, r3, r4
 801d144:	9205      	str	r2, [sp, #20]
 801d146:	9a03      	ldr	r2, [sp, #12]
 801d148:	bf18      	it	ne
 801d14a:	2200      	movne	r2, #0
 801d14c:	9315      	str	r3, [sp, #84]	@ 0x54
 801d14e:	b292      	uxth	r2, r2
 801d150:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d154:	fa11 f383 	uxtah	r3, r1, r3
 801d158:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d15a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d15e:	3304      	adds	r3, #4
 801d160:	9306      	str	r3, [sp, #24]
 801d162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d164:	4283      	cmp	r3, r0
 801d166:	f240 816f 	bls.w	801d448 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801d16a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801d16e:	f04f 0900 	mov.w	r9, #0
 801d172:	9d06      	ldr	r5, [sp, #24]
 801d174:	fbb8 f3f3 	udiv	r3, r8, r3
 801d178:	ebaa 0303 	sub.w	r3, sl, r3
 801d17c:	782d      	ldrb	r5, [r5, #0]
 801d17e:	b29b      	uxth	r3, r3
 801d180:	950f      	str	r5, [sp, #60]	@ 0x3c
 801d182:	3501      	adds	r5, #1
 801d184:	9312      	str	r3, [sp, #72]	@ 0x48
 801d186:	9b06      	ldr	r3, [sp, #24]
 801d188:	9504      	str	r5, [sp, #16]
 801d18a:	7859      	ldrb	r1, [r3, #1]
 801d18c:	789b      	ldrb	r3, [r3, #2]
 801d18e:	021b      	lsls	r3, r3, #8
 801d190:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801d194:	9906      	ldr	r1, [sp, #24]
 801d196:	78c9      	ldrb	r1, [r1, #3]
 801d198:	430b      	orrs	r3, r1
 801d19a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d19c:	4419      	add	r1, r3
 801d19e:	1c4d      	adds	r5, r1, #1
 801d1a0:	7849      	ldrb	r1, [r1, #1]
 801d1a2:	9502      	str	r5, [sp, #8]
 801d1a4:	0209      	lsls	r1, r1, #8
 801d1a6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801d1a8:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801d1ac:	5ceb      	ldrb	r3, [r5, r3]
 801d1ae:	4319      	orrs	r1, r3
 801d1b0:	b28b      	uxth	r3, r1
 801d1b2:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801d1b6:	930a      	str	r3, [sp, #40]	@ 0x28
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	9307      	str	r3, [sp, #28]
 801d1bc:	2301      	movs	r3, #1
 801d1be:	e9cd 3300 	strd	r3, r3, [sp]
 801d1c2:	469c      	mov	ip, r3
 801d1c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d1c8:	930c      	str	r3, [sp, #48]	@ 0x30
 801d1ca:	f1b8 0f00 	cmp.w	r8, #0
 801d1ce:	f000 8082 	beq.w	801d2d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801d1d2:	45c4      	cmp	ip, r8
 801d1d4:	d270      	bcs.n	801d2b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801d1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1d8:	eba8 080c 	sub.w	r8, r8, ip
 801d1dc:	4611      	mov	r1, r2
 801d1de:	4283      	cmp	r3, r0
 801d1e0:	fa1f f888 	uxth.w	r8, r8
 801d1e4:	d802      	bhi.n	801d1ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801d1e6:	e074      	b.n	801d2d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d15f      	bne.n	801d2ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801d1ec:	9b02      	ldr	r3, [sp, #8]
 801d1ee:	9a01      	ldr	r2, [sp, #4]
 801d1f0:	785b      	ldrb	r3, [r3, #1]
 801d1f2:	f1c2 0207 	rsb	r2, r2, #7
 801d1f6:	9d01      	ldr	r5, [sp, #4]
 801d1f8:	4093      	lsls	r3, r2
 801d1fa:	005b      	lsls	r3, r3, #1
 801d1fc:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801d200:	9b02      	ldr	r3, [sp, #8]
 801d202:	781b      	ldrb	r3, [r3, #0]
 801d204:	412b      	asrs	r3, r5
 801d206:	b2db      	uxtb	r3, r3
 801d208:	4313      	orrs	r3, r2
 801d20a:	462a      	mov	r2, r5
 801d20c:	3201      	adds	r2, #1
 801d20e:	b29e      	uxth	r6, r3
 801d210:	b2d2      	uxtb	r2, r2
 801d212:	2a08      	cmp	r2, #8
 801d214:	9201      	str	r2, [sp, #4]
 801d216:	9a02      	ldr	r2, [sp, #8]
 801d218:	bf09      	itett	eq
 801d21a:	3202      	addeq	r2, #2
 801d21c:	3201      	addne	r2, #1
 801d21e:	9202      	streq	r2, [sp, #8]
 801d220:	2200      	moveq	r2, #0
 801d222:	bf14      	ite	ne
 801d224:	9202      	strne	r2, [sp, #8]
 801d226:	9201      	streq	r2, [sp, #4]
 801d228:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d22a:	42b2      	cmp	r2, r6
 801d22c:	d309      	bcc.n	801d242 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801d22e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801d232:	2301      	movs	r3, #1
 801d234:	9a04      	ldr	r2, [sp, #16]
 801d236:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801d23a:	d30e      	bcc.n	801d25a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801d23c:	9300      	str	r3, [sp, #0]
 801d23e:	2500      	movs	r5, #0
 801d240:	e035      	b.n	801d2ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801d242:	9b04      	ldr	r3, [sp, #16]
 801d244:	429e      	cmp	r6, r3
 801d246:	d318      	bcc.n	801d27a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801d248:	9b00      	ldr	r3, [sp, #0]
 801d24a:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801d24e:	18e3      	adds	r3, r4, r3
 801d250:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801d254:	9b00      	ldr	r3, [sp, #0]
 801d256:	3301      	adds	r3, #1
 801d258:	b29b      	uxth	r3, r3
 801d25a:	9a04      	ldr	r2, [sp, #16]
 801d25c:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801d260:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d264:	9f00      	ldr	r7, [sp, #0]
 801d266:	7115      	strb	r5, [r2, #4]
 801d268:	3701      	adds	r7, #1
 801d26a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801d26c:	7157      	strb	r7, [r2, #5]
 801d26e:	80d5      	strh	r5, [r2, #6]
 801d270:	9a04      	ldr	r2, [sp, #16]
 801d272:	3201      	adds	r2, #1
 801d274:	b292      	uxth	r2, r2
 801d276:	9204      	str	r2, [sp, #16]
 801d278:	e7e0      	b.n	801d23c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801d27a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d27e:	4632      	mov	r2, r6
 801d280:	795b      	ldrb	r3, [r3, #5]
 801d282:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801d286:	4425      	add	r5, r4
 801d288:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801d28a:	eb07 0c05 	add.w	ip, r7, r5
 801d28e:	f1bc 0f00 	cmp.w	ip, #0
 801d292:	dd07      	ble.n	801d2a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801d294:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d298:	f892 c004 	ldrb.w	ip, [r2, #4]
 801d29c:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801d2a0:	88d2      	ldrh	r2, [r2, #6]
 801d2a2:	e7f1      	b.n	801d288 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801d2a4:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801d2a8:	b29b      	uxth	r3, r3
 801d2aa:	e7c3      	b.n	801d234 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801d2ac:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801d2ae:	460a      	mov	r2, r1
 801d2b0:	960a      	str	r6, [sp, #40]	@ 0x28
 801d2b2:	46a9      	mov	r9, r5
 801d2b4:	469c      	mov	ip, r3
 801d2b6:	e788      	b.n	801d1ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801d2b8:	ebac 0308 	sub.w	r3, ip, r8
 801d2bc:	eb09 0508 	add.w	r5, r9, r8
 801d2c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d2c4:	b29b      	uxth	r3, r3
 801d2c6:	b2ad      	uxth	r5, r5
 801d2c8:	f04f 0800 	mov.w	r8, #0
 801d2cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d2ce:	4282      	cmp	r2, r0
 801d2d0:	d88a      	bhi.n	801d1e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801d2d2:	460a      	mov	r2, r1
 801d2d4:	e745      	b.n	801d162 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801d2d6:	4594      	cmp	ip, r2
 801d2d8:	9d08      	ldr	r5, [sp, #32]
 801d2da:	4686      	mov	lr, r0
 801d2dc:	bf27      	ittee	cs
 801d2de:	ebac 0302 	subcs.w	r3, ip, r2
 801d2e2:	4616      	movcs	r6, r2
 801d2e4:	eba2 010c 	subcc.w	r1, r2, ip
 801d2e8:	4666      	movcc	r6, ip
 801d2ea:	bf27      	ittee	cs
 801d2ec:	b29b      	uxthcs	r3, r3
 801d2ee:	4641      	movcs	r1, r8
 801d2f0:	b289      	uxthcc	r1, r1
 801d2f2:	4643      	movcc	r3, r8
 801d2f4:	2dff      	cmp	r5, #255	@ 0xff
 801d2f6:	eb09 0506 	add.w	r5, r9, r6
 801d2fa:	b2ad      	uxth	r5, r5
 801d2fc:	d130      	bne.n	801d360 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801d2fe:	45a9      	cmp	r9, r5
 801d300:	f10e 0e03 	add.w	lr, lr, #3
 801d304:	d17a      	bne.n	801d3fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801d306:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d30a:	4594      	cmp	ip, r2
 801d30c:	4430      	add	r0, r6
 801d30e:	d3db      	bcc.n	801d2c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801d310:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d312:	9903      	ldr	r1, [sp, #12]
 801d314:	8812      	ldrh	r2, [r2, #0]
 801d316:	1a52      	subs	r2, r2, r1
 801d318:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d31a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d31e:	4410      	add	r0, r2
 801d320:	9a07      	ldr	r2, [sp, #28]
 801d322:	3201      	adds	r2, #1
 801d324:	428a      	cmp	r2, r1
 801d326:	9207      	str	r2, [sp, #28]
 801d328:	f040 8081 	bne.w	801d42e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801d32c:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801d330:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801d334:	9b03      	ldr	r3, [sp, #12]
 801d336:	eba8 080c 	sub.w	r8, r8, ip
 801d33a:	fa1f f888 	uxth.w	r8, r8
 801d33e:	f1b8 0f00 	cmp.w	r8, #0
 801d342:	bf08      	it	eq
 801d344:	461a      	moveq	r2, r3
 801d346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d348:	bf18      	it	ne
 801d34a:	2200      	movne	r2, #0
 801d34c:	3301      	adds	r3, #1
 801d34e:	b292      	uxth	r2, r2
 801d350:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d352:	e6fd      	b.n	801d150 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801d354:	24026418 	.word	0x24026418
 801d358:	24026412 	.word	0x24026412
 801d35c:	fffff7fb 	.word	0xfffff7fb
 801d360:	45a9      	cmp	r9, r5
 801d362:	f10e 0e03 	add.w	lr, lr, #3
 801d366:	d0ce      	beq.n	801d306 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801d368:	f109 0701 	add.w	r7, r9, #1
 801d36c:	44a1      	add	r9, r4
 801d36e:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801d372:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801d376:	9713      	str	r7, [sp, #76]	@ 0x4c
 801d378:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d37c:	9f05      	ldr	r7, [sp, #20]
 801d37e:	eb07 0908 	add.w	r9, r7, r8
 801d382:	f817 8008 	ldrb.w	r8, [r7, r8]
 801d386:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801d388:	fb1b fb07 	smulbb	fp, fp, r7
 801d38c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d38e:	fb08 b807 	mla	r8, r8, r7, fp
 801d392:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801d394:	fa1f f888 	uxth.w	r8, r8
 801d398:	f108 0b01 	add.w	fp, r8, #1
 801d39c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d3a0:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801d3a4:	fb1b fb07 	smulbb	fp, fp, r7
 801d3a8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d3ac:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d3ae:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801d3b2:	f899 8001 	ldrb.w	r8, [r9, #1]
 801d3b6:	fb08 b807 	mla	r8, r8, r7, fp
 801d3ba:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801d3bc:	fa1f f888 	uxth.w	r8, r8
 801d3c0:	f108 0b01 	add.w	fp, r8, #1
 801d3c4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d3c8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d3cc:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801d3d0:	f899 8002 	ldrb.w	r8, [r9, #2]
 801d3d4:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801d3d8:	fb19 f907 	smulbb	r9, r9, r7
 801d3dc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d3de:	fb08 9807 	mla	r8, r8, r7, r9
 801d3e2:	fa1f f888 	uxth.w	r8, r8
 801d3e6:	f108 0901 	add.w	r9, r8, #1
 801d3ea:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801d3ee:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801d3f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d3f6:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801d3fa:	e7b1      	b.n	801d360 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801d3fc:	f109 0b01 	add.w	fp, r9, #1
 801d400:	44a1      	add	r9, r4
 801d402:	9f05      	ldr	r7, [sp, #20]
 801d404:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801d408:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d40c:	eb07 0908 	add.w	r9, r7, r8
 801d410:	f817 8008 	ldrb.w	r8, [r7, r8]
 801d414:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801d418:	f899 8001 	ldrb.w	r8, [r9, #1]
 801d41c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801d420:	f899 8002 	ldrb.w	r8, [r9, #2]
 801d424:	fa1f f98b 	uxth.w	r9, fp
 801d428:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801d42c:	e767      	b.n	801d2fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801d42e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d432:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801d436:	eba8 0801 	sub.w	r8, r8, r1
 801d43a:	fa1f f888 	uxth.w	r8, r8
 801d43e:	f1b8 0f00 	cmp.w	r8, #0
 801d442:	bf18      	it	ne
 801d444:	2100      	movne	r1, #0
 801d446:	e741      	b.n	801d2cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801d448:	4b03      	ldr	r3, [pc, #12]	@ (801d458 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801d44a:	6818      	ldr	r0, [r3, #0]
 801d44c:	6803      	ldr	r3, [r0, #0]
 801d44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d450:	4798      	blx	r3
 801d452:	b01b      	add	sp, #108	@ 0x6c
 801d454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d458:	24026418 	.word	0x24026418

0801d45c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801d45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d460:	b09d      	sub	sp, #116	@ 0x74
 801d462:	461d      	mov	r5, r3
 801d464:	4604      	mov	r4, r0
 801d466:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d468:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801d46c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801d470:	920c      	str	r2, [sp, #48]	@ 0x30
 801d472:	2a00      	cmp	r2, #0
 801d474:	f000 81de 	beq.w	801d834 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801d478:	6828      	ldr	r0, [r5, #0]
 801d47a:	aa18      	add	r2, sp, #96	@ 0x60
 801d47c:	6869      	ldr	r1, [r5, #4]
 801d47e:	c203      	stmia	r2!, {r0, r1}
 801d480:	6818      	ldr	r0, [r3, #0]
 801d482:	aa1a      	add	r2, sp, #104	@ 0x68
 801d484:	6859      	ldr	r1, [r3, #4]
 801d486:	c203      	stmia	r2!, {r0, r1}
 801d488:	a818      	add	r0, sp, #96	@ 0x60
 801d48a:	f7f9 fb5b 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d48e:	4629      	mov	r1, r5
 801d490:	a81a      	add	r0, sp, #104	@ 0x68
 801d492:	f7f9 fb7f 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d496:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801d49a:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801d49e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d4a2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801d4a6:	bfdb      	ittet	le
 801d4a8:	b29a      	uxthle	r2, r3
 801d4aa:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d4ae:	2201      	movgt	r2, #1
 801d4b0:	fb91 f2f2 	sdivle	r2, r1, r2
 801d4b4:	9201      	str	r2, [sp, #4]
 801d4b6:	9801      	ldr	r0, [sp, #4]
 801d4b8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801d4bc:	9901      	ldr	r1, [sp, #4]
 801d4be:	fb92 f0f0 	sdiv	r0, r2, r0
 801d4c2:	b280      	uxth	r0, r0
 801d4c4:	440f      	add	r7, r1
 801d4c6:	900d      	str	r0, [sp, #52]	@ 0x34
 801d4c8:	3f01      	subs	r7, #1
 801d4ca:	9801      	ldr	r0, [sp, #4]
 801d4cc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801d4ce:	fb05 2510 	mls	r5, r5, r0, r2
 801d4d2:	fb97 f7f1 	sdiv	r7, r7, r1
 801d4d6:	fb15 f503 	smulbb	r5, r5, r3
 801d4da:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801d4de:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801d4e2:	3701      	adds	r7, #1
 801d4e4:	440d      	add	r5, r1
 801d4e6:	4419      	add	r1, r3
 801d4e8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801d4ec:	b2bf      	uxth	r7, r7
 801d4ee:	441a      	add	r2, r3
 801d4f0:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801d4f4:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801d4f8:	00bf      	lsls	r7, r7, #2
 801d4fa:	9304      	str	r3, [sp, #16]
 801d4fc:	b2ad      	uxth	r5, r5
 801d4fe:	4bb0      	ldr	r3, [pc, #704]	@ (801d7c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801d500:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801d504:	6818      	ldr	r0, [r3, #0]
 801d506:	6803      	ldr	r3, [r0, #0]
 801d508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d50a:	4798      	blx	r3
 801d50c:	4bad      	ldr	r3, [pc, #692]	@ (801d7c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801d50e:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801d512:	2d00      	cmp	r5, #0
 801d514:	881a      	ldrh	r2, [r3, #0]
 801d516:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801d51a:	fb02 f606 	mul.w	r6, r2, r6
 801d51e:	fb02 c101 	mla	r1, r2, r1, ip
 801d522:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d526:	9316      	str	r3, [sp, #88]	@ 0x58
 801d528:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d52c:	4ba6      	ldr	r3, [pc, #664]	@ (801d7c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801d52e:	eb00 0801 	add.w	r8, r0, r1
 801d532:	bf18      	it	ne
 801d534:	2100      	movne	r1, #0
 801d536:	eba3 0304 	sub.w	r3, r3, r4
 801d53a:	eb08 0206 	add.w	r2, r8, r6
 801d53e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d540:	9208      	str	r2, [sp, #32]
 801d542:	f107 0204 	add.w	r2, r7, #4
 801d546:	9211      	str	r2, [sp, #68]	@ 0x44
 801d548:	9a04      	ldr	r2, [sp, #16]
 801d54a:	bf08      	it	eq
 801d54c:	4611      	moveq	r1, r2
 801d54e:	2200      	movs	r2, #0
 801d550:	b289      	uxth	r1, r1
 801d552:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d554:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d558:	fa12 f383 	uxtah	r3, r2, r3
 801d55c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d55e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d562:	3304      	adds	r3, #4
 801d564:	9306      	str	r3, [sp, #24]
 801d566:	9b08      	ldr	r3, [sp, #32]
 801d568:	4543      	cmp	r3, r8
 801d56a:	f240 815e 	bls.w	801d82a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801d56e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801d572:	f04f 0b01 	mov.w	fp, #1
 801d576:	9a01      	ldr	r2, [sp, #4]
 801d578:	9806      	ldr	r0, [sp, #24]
 801d57a:	465e      	mov	r6, fp
 801d57c:	f8cd b008 	str.w	fp, [sp, #8]
 801d580:	7800      	ldrb	r0, [r0, #0]
 801d582:	fbb5 f3f3 	udiv	r3, r5, r3
 801d586:	1ad3      	subs	r3, r2, r3
 801d588:	900e      	str	r0, [sp, #56]	@ 0x38
 801d58a:	3001      	adds	r0, #1
 801d58c:	b29b      	uxth	r3, r3
 801d58e:	9005      	str	r0, [sp, #20]
 801d590:	9312      	str	r3, [sp, #72]	@ 0x48
 801d592:	9b06      	ldr	r3, [sp, #24]
 801d594:	785a      	ldrb	r2, [r3, #1]
 801d596:	789b      	ldrb	r3, [r3, #2]
 801d598:	021b      	lsls	r3, r3, #8
 801d59a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d59e:	9a06      	ldr	r2, [sp, #24]
 801d5a0:	78d2      	ldrb	r2, [r2, #3]
 801d5a2:	4313      	orrs	r3, r2
 801d5a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d5a6:	441a      	add	r2, r3
 801d5a8:	1c50      	adds	r0, r2, #1
 801d5aa:	7852      	ldrb	r2, [r2, #1]
 801d5ac:	9003      	str	r0, [sp, #12]
 801d5ae:	0212      	lsls	r2, r2, #8
 801d5b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801d5b2:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801d5b6:	5cc3      	ldrb	r3, [r0, r3]
 801d5b8:	431a      	orrs	r2, r3
 801d5ba:	b293      	uxth	r3, r2
 801d5bc:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801d5c0:	930a      	str	r3, [sp, #40]	@ 0x28
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	461a      	mov	r2, r3
 801d5c6:	9307      	str	r3, [sp, #28]
 801d5c8:	2d00      	cmp	r5, #0
 801d5ca:	d07c      	beq.n	801d6c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801d5cc:	42ae      	cmp	r6, r5
 801d5ce:	d26c      	bcs.n	801d6aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801d5d0:	9b08      	ldr	r3, [sp, #32]
 801d5d2:	1bad      	subs	r5, r5, r6
 801d5d4:	4608      	mov	r0, r1
 801d5d6:	4543      	cmp	r3, r8
 801d5d8:	b2ad      	uxth	r5, r5
 801d5da:	d802      	bhi.n	801d5e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801d5dc:	e071      	b.n	801d6c2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d15d      	bne.n	801d69e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801d5e2:	9b03      	ldr	r3, [sp, #12]
 801d5e4:	9a02      	ldr	r2, [sp, #8]
 801d5e6:	785b      	ldrb	r3, [r3, #1]
 801d5e8:	f1c2 0207 	rsb	r2, r2, #7
 801d5ec:	9902      	ldr	r1, [sp, #8]
 801d5ee:	4093      	lsls	r3, r2
 801d5f0:	005b      	lsls	r3, r3, #1
 801d5f2:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801d5f6:	9b03      	ldr	r3, [sp, #12]
 801d5f8:	781b      	ldrb	r3, [r3, #0]
 801d5fa:	410b      	asrs	r3, r1
 801d5fc:	3101      	adds	r1, #1
 801d5fe:	b2c9      	uxtb	r1, r1
 801d600:	b2db      	uxtb	r3, r3
 801d602:	2908      	cmp	r1, #8
 801d604:	9102      	str	r1, [sp, #8]
 801d606:	9903      	ldr	r1, [sp, #12]
 801d608:	ea43 0302 	orr.w	r3, r3, r2
 801d60c:	bf0c      	ite	eq
 801d60e:	3102      	addeq	r1, #2
 801d610:	3101      	addne	r1, #1
 801d612:	b29a      	uxth	r2, r3
 801d614:	bf05      	ittet	eq
 801d616:	9103      	streq	r1, [sp, #12]
 801d618:	2100      	moveq	r1, #0
 801d61a:	9103      	strne	r1, [sp, #12]
 801d61c:	9102      	streq	r1, [sp, #8]
 801d61e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d620:	4291      	cmp	r1, r2
 801d622:	d30a      	bcc.n	801d63a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801d624:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801d628:	2301      	movs	r3, #1
 801d62a:	9905      	ldr	r1, [sp, #20]
 801d62c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801d630:	d30f      	bcc.n	801d652 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801d632:	469b      	mov	fp, r3
 801d634:	f04f 0c00 	mov.w	ip, #0
 801d638:	e032      	b.n	801d6a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801d63a:	9b05      	ldr	r3, [sp, #20]
 801d63c:	429a      	cmp	r2, r3
 801d63e:	d318      	bcc.n	801d672 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801d640:	eb04 030b 	add.w	r3, r4, fp
 801d644:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801d648:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801d64c:	f10b 0301 	add.w	r3, fp, #1
 801d650:	b29b      	uxth	r3, r3
 801d652:	9905      	ldr	r1, [sp, #20]
 801d654:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801d658:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801d65c:	710e      	strb	r6, [r1, #4]
 801d65e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801d660:	80ce      	strh	r6, [r1, #6]
 801d662:	f10b 0601 	add.w	r6, fp, #1
 801d666:	714e      	strb	r6, [r1, #5]
 801d668:	9905      	ldr	r1, [sp, #20]
 801d66a:	3101      	adds	r1, #1
 801d66c:	b289      	uxth	r1, r1
 801d66e:	9105      	str	r1, [sp, #20]
 801d670:	e7df      	b.n	801d632 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801d672:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d676:	4611      	mov	r1, r2
 801d678:	795b      	ldrb	r3, [r3, #5]
 801d67a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801d67e:	4426      	add	r6, r4
 801d680:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801d682:	4437      	add	r7, r6
 801d684:	2f00      	cmp	r7, #0
 801d686:	dd06      	ble.n	801d696 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801d688:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801d68c:	790f      	ldrb	r7, [r1, #4]
 801d68e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d692:	88c9      	ldrh	r1, [r1, #6]
 801d694:	e7f4      	b.n	801d680 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801d696:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801d69a:	b29b      	uxth	r3, r3
 801d69c:	e7c5      	b.n	801d62a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801d69e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d6a0:	920a      	str	r2, [sp, #40]	@ 0x28
 801d6a2:	4601      	mov	r1, r0
 801d6a4:	4662      	mov	r2, ip
 801d6a6:	461e      	mov	r6, r3
 801d6a8:	e78e      	b.n	801d5c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801d6aa:	1b73      	subs	r3, r6, r5
 801d6ac:	eb02 0c05 	add.w	ip, r2, r5
 801d6b0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801d6b4:	b29b      	uxth	r3, r3
 801d6b6:	fa1f fc8c 	uxth.w	ip, ip
 801d6ba:	2500      	movs	r5, #0
 801d6bc:	9a08      	ldr	r2, [sp, #32]
 801d6be:	4542      	cmp	r2, r8
 801d6c0:	d88d      	bhi.n	801d5de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801d6c2:	4601      	mov	r1, r0
 801d6c4:	e74f      	b.n	801d566 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801d6c6:	428e      	cmp	r6, r1
 801d6c8:	bf2b      	itete	cs
 801d6ca:	468e      	movcs	lr, r1
 801d6cc:	46b6      	movcc	lr, r6
 801d6ce:	1a73      	subcs	r3, r6, r1
 801d6d0:	1b88      	subcc	r0, r1, r6
 801d6d2:	eb02 0c0e 	add.w	ip, r2, lr
 801d6d6:	bf2b      	itete	cs
 801d6d8:	4628      	movcs	r0, r5
 801d6da:	462b      	movcc	r3, r5
 801d6dc:	b29b      	uxthcs	r3, r3
 801d6de:	b280      	uxthcc	r0, r0
 801d6e0:	f108 0503 	add.w	r5, r8, #3
 801d6e4:	fa1f fc8c 	uxth.w	ip, ip
 801d6e8:	4562      	cmp	r2, ip
 801d6ea:	d06f      	beq.n	801d7cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801d6ec:	1c57      	adds	r7, r2, #1
 801d6ee:	4422      	add	r2, r4
 801d6f0:	b2bf      	uxth	r7, r7
 801d6f2:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801d6f6:	9713      	str	r7, [sp, #76]	@ 0x4c
 801d6f8:	2704      	movs	r7, #4
 801d6fa:	46b9      	mov	r9, r7
 801d6fc:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801d6fe:	fb19 7202 	smlabb	r2, r9, r2, r7
 801d702:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801d704:	58bf      	ldr	r7, [r7, r2]
 801d706:	0e3a      	lsrs	r2, r7, #24
 801d708:	9209      	str	r2, [sp, #36]	@ 0x24
 801d70a:	d016      	beq.n	801d73a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801d70c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d710:	fa5f fa87 	uxtb.w	sl, r7
 801d714:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d718:	fa5f f289 	uxtb.w	r2, r9
 801d71c:	9214      	str	r2, [sp, #80]	@ 0x50
 801d71e:	b2fa      	uxtb	r2, r7
 801d720:	9215      	str	r2, [sp, #84]	@ 0x54
 801d722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d724:	2aff      	cmp	r2, #255	@ 0xff
 801d726:	d10b      	bne.n	801d740 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801d728:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d72a:	2aff      	cmp	r2, #255	@ 0xff
 801d72c:	d108      	bne.n	801d740 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801d72e:	f805 ac03 	strb.w	sl, [r5, #-3]
 801d732:	f805 9c02 	strb.w	r9, [r5, #-2]
 801d736:	f805 7c01 	strb.w	r7, [r5, #-1]
 801d73a:	3503      	adds	r5, #3
 801d73c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d73e:	e7d3      	b.n	801d6e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801d740:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801d742:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d744:	437a      	muls	r2, r7
 801d746:	1c57      	adds	r7, r2, #1
 801d748:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801d74c:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801d750:	1212      	asrs	r2, r2, #8
 801d752:	fa1f f982 	uxth.w	r9, r2
 801d756:	43d2      	mvns	r2, r2
 801d758:	fb1a fa09 	smulbb	sl, sl, r9
 801d75c:	b2d2      	uxtb	r2, r2
 801d75e:	fb07 a702 	mla	r7, r7, r2, sl
 801d762:	9209      	str	r2, [sp, #36]	@ 0x24
 801d764:	b2bf      	uxth	r7, r7
 801d766:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d768:	f107 0a01 	add.w	sl, r7, #1
 801d76c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d770:	fb12 fa09 	smulbb	sl, r2, r9
 801d774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d776:	123f      	asrs	r7, r7, #8
 801d778:	f805 7c03 	strb.w	r7, [r5, #-3]
 801d77c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801d780:	fb07 aa02 	mla	sl, r7, r2, sl
 801d784:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d786:	fb12 f909 	smulbb	r9, r2, r9
 801d78a:	fa1f fa8a 	uxth.w	sl, sl
 801d78e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d790:	f10a 0701 	add.w	r7, sl, #1
 801d794:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d798:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801d79c:	fb07 9902 	mla	r9, r7, r2, r9
 801d7a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d7a4:	fa1f f989 	uxth.w	r9, r9
 801d7a8:	f805 ac02 	strb.w	sl, [r5, #-2]
 801d7ac:	f109 0201 	add.w	r2, r9, #1
 801d7b0:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d7b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d7b8:	f805 9c01 	strb.w	r9, [r5, #-1]
 801d7bc:	e7bd      	b.n	801d73a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801d7be:	bf00      	nop
 801d7c0:	24026418 	.word	0x24026418
 801d7c4:	24026412 	.word	0x24026412
 801d7c8:	fffff7fb 	.word	0xfffff7fb
 801d7cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d7d0:	428e      	cmp	r6, r1
 801d7d2:	44f0      	add	r8, lr
 801d7d4:	f4ff af71 	bcc.w	801d6ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801d7d8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d7da:	9904      	ldr	r1, [sp, #16]
 801d7dc:	8812      	ldrh	r2, [r2, #0]
 801d7de:	1a52      	subs	r2, r2, r1
 801d7e0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d7e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d7e6:	4490      	add	r8, r2
 801d7e8:	9a07      	ldr	r2, [sp, #28]
 801d7ea:	3201      	adds	r2, #1
 801d7ec:	428a      	cmp	r2, r1
 801d7ee:	9207      	str	r2, [sp, #28]
 801d7f0:	d111      	bne.n	801d816 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801d7f2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801d7f6:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801d7fa:	9b04      	ldr	r3, [sp, #16]
 801d7fc:	eba5 050c 	sub.w	r5, r5, ip
 801d800:	b2ad      	uxth	r5, r5
 801d802:	2d00      	cmp	r5, #0
 801d804:	bf08      	it	eq
 801d806:	4619      	moveq	r1, r3
 801d808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d80a:	bf18      	it	ne
 801d80c:	2100      	movne	r1, #0
 801d80e:	3301      	adds	r3, #1
 801d810:	b289      	uxth	r1, r1
 801d812:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d814:	e69e      	b.n	801d554 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801d816:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801d81a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801d81e:	1a2d      	subs	r5, r5, r0
 801d820:	b2ad      	uxth	r5, r5
 801d822:	2d00      	cmp	r5, #0
 801d824:	bf18      	it	ne
 801d826:	2000      	movne	r0, #0
 801d828:	e748      	b.n	801d6bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801d82a:	4b04      	ldr	r3, [pc, #16]	@ (801d83c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801d82c:	6818      	ldr	r0, [r3, #0]
 801d82e:	6803      	ldr	r3, [r0, #0]
 801d830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d832:	4798      	blx	r3
 801d834:	b01d      	add	sp, #116	@ 0x74
 801d836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d83a:	bf00      	nop
 801d83c:	24026418 	.word	0x24026418

0801d840 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d844:	b08f      	sub	sp, #60	@ 0x3c
 801d846:	4616      	mov	r6, r2
 801d848:	4681      	mov	r9, r0
 801d84a:	460d      	mov	r5, r1
 801d84c:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801d850:	9205      	str	r2, [sp, #20]
 801d852:	2a00      	cmp	r2, #0
 801d854:	f000 82a8 	beq.w	801dda8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801d858:	6830      	ldr	r0, [r6, #0]
 801d85a:	ac0a      	add	r4, sp, #40	@ 0x28
 801d85c:	6871      	ldr	r1, [r6, #4]
 801d85e:	c403      	stmia	r4!, {r0, r1}
 801d860:	6818      	ldr	r0, [r3, #0]
 801d862:	ac0c      	add	r4, sp, #48	@ 0x30
 801d864:	6859      	ldr	r1, [r3, #4]
 801d866:	c403      	stmia	r4!, {r0, r1}
 801d868:	a80a      	add	r0, sp, #40	@ 0x28
 801d86a:	f7f9 f96b 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d86e:	4631      	mov	r1, r6
 801d870:	a80c      	add	r0, sp, #48	@ 0x30
 801d872:	f7f9 f98f 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d876:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801d87a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801d87e:	bfdb      	ittet	le
 801d880:	b293      	uxthle	r3, r2
 801d882:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d886:	2301      	movgt	r3, #1
 801d888:	fb91 f3f3 	sdivle	r3, r1, r3
 801d88c:	9300      	str	r3, [sp, #0]
 801d88e:	f105 0308 	add.w	r3, r5, #8
 801d892:	9900      	ldr	r1, [sp, #0]
 801d894:	9306      	str	r3, [sp, #24]
 801d896:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801d89a:	440b      	add	r3, r1
 801d89c:	3b01      	subs	r3, #1
 801d89e:	fb93 f3f1 	sdiv	r3, r3, r1
 801d8a2:	3b01      	subs	r3, #1
 801d8a4:	9906      	ldr	r1, [sp, #24]
 801d8a6:	b29b      	uxth	r3, r3
 801d8a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d8ac:	9900      	ldr	r1, [sp, #0]
 801d8ae:	9307      	str	r3, [sp, #28]
 801d8b0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d8b4:	fb93 f0f1 	sdiv	r0, r3, r1
 801d8b8:	b284      	uxth	r4, r0
 801d8ba:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d8be:	b280      	uxth	r0, r0
 801d8c0:	9402      	str	r4, [sp, #8]
 801d8c2:	9d02      	ldr	r5, [sp, #8]
 801d8c4:	9c00      	ldr	r4, [sp, #0]
 801d8c6:	fb05 3514 	mls	r5, r5, r4, r3
 801d8ca:	fb15 f502 	smulbb	r5, r5, r2
 801d8ce:	440d      	add	r5, r1
 801d8d0:	b2ad      	uxth	r5, r5
 801d8d2:	2800      	cmp	r0, #0
 801d8d4:	d071      	beq.n	801d9ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801d8d6:	1e42      	subs	r2, r0, #1
 801d8d8:	9806      	ldr	r0, [sp, #24]
 801d8da:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801d8de:	9a07      	ldr	r2, [sp, #28]
 801d8e0:	fa98 f888 	rev.w	r8, r8
 801d8e4:	4490      	add	r8, r2
 801d8e6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801d8ea:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801d8ee:	4411      	add	r1, r2
 801d8f0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801d8f4:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801dc40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801d8f8:	4413      	add	r3, r2
 801d8fa:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801d8fe:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d902:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d906:	9301      	str	r3, [sp, #4]
 801d908:	4bcb      	ldr	r3, [pc, #812]	@ (801dc38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801d90a:	6818      	ldr	r0, [r3, #0]
 801d90c:	6803      	ldr	r3, [r0, #0]
 801d90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d910:	4798      	blx	r3
 801d912:	4bca      	ldr	r3, [pc, #808]	@ (801dc3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801d914:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801d918:	881b      	ldrh	r3, [r3, #0]
 801d91a:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801d91e:	fb03 2707 	mla	r7, r3, r7, r2
 801d922:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d926:	4363      	muls	r3, r4
 801d928:	2400      	movs	r4, #0
 801d92a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d92e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d932:	4621      	mov	r1, r4
 801d934:	4407      	add	r7, r0
 801d936:	18fb      	adds	r3, r7, r3
 801d938:	9309      	str	r3, [sp, #36]	@ 0x24
 801d93a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801d93e:	fb95 f3f3 	sdiv	r3, r5, r3
 801d942:	9304      	str	r3, [sp, #16]
 801d944:	f109 0304 	add.w	r3, r9, #4
 801d948:	4618      	mov	r0, r3
 801d94a:	9308      	str	r3, [sp, #32]
 801d94c:	f008 fc0c 	bl	8026168 <memset>
 801d950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d952:	42bb      	cmp	r3, r7
 801d954:	f240 8223 	bls.w	801dd9e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801d958:	2003      	movs	r0, #3
 801d95a:	f04f 0c07 	mov.w	ip, #7
 801d95e:	f04f 0e0b 	mov.w	lr, #11
 801d962:	2d00      	cmp	r5, #0
 801d964:	f000 813c 	beq.w	801dbe0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801d968:	f898 3000 	ldrb.w	r3, [r8]
 801d96c:	b2db      	uxtb	r3, r3
 801d96e:	2bfe      	cmp	r3, #254	@ 0xfe
 801d970:	d126      	bne.n	801d9c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801d972:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d976:	f108 0604 	add.w	r6, r8, #4
 801d97a:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d97e:	3d01      	subs	r5, #1
 801d980:	b2c9      	uxtb	r1, r1
 801d982:	f898 8003 	ldrb.w	r8, [r8, #3]
 801d986:	b2d2      	uxtb	r2, r2
 801d988:	f361 0407 	bfi	r4, r1, #0, #8
 801d98c:	fa5f f888 	uxtb.w	r8, r8
 801d990:	b2ad      	uxth	r5, r5
 801d992:	f362 240f 	bfi	r4, r2, #8, #8
 801d996:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d99a:	fb10 2208 	smlabb	r2, r0, r8, r2
 801d99e:	f368 4417 	bfi	r4, r8, #16, #8
 801d9a2:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801d9a6:	0e23      	lsrs	r3, r4, #24
 801d9a8:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801d9ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d9b0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d9b4:	605c      	str	r4, [r3, #4]
 801d9b6:	46b0      	mov	r8, r6
 801d9b8:	e7d3      	b.n	801d962 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801d9ba:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d9be:	e792      	b.n	801d8e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801d9c0:	2bff      	cmp	r3, #255	@ 0xff
 801d9c2:	d127      	bne.n	801da14 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801d9c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d9c8:	f108 0605 	add.w	r6, r8, #5
 801d9cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 801d9d0:	3d01      	subs	r5, #1
 801d9d2:	b2d2      	uxtb	r2, r2
 801d9d4:	f898 1003 	ldrb.w	r1, [r8, #3]
 801d9d8:	b2db      	uxtb	r3, r3
 801d9da:	f898 8004 	ldrb.w	r8, [r8, #4]
 801d9de:	f362 0407 	bfi	r4, r2, #0, #8
 801d9e2:	b2c9      	uxtb	r1, r1
 801d9e4:	fa5f f888 	uxtb.w	r8, r8
 801d9e8:	f363 240f 	bfi	r4, r3, #8, #8
 801d9ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d9f0:	b2ad      	uxth	r5, r5
 801d9f2:	fb10 3301 	smlabb	r3, r0, r1, r3
 801d9f6:	f361 4417 	bfi	r4, r1, #16, #8
 801d9fa:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801d9fe:	f368 641f 	bfi	r4, r8, #24, #8
 801da02:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801da06:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801da0a:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801da0e:	f8c8 4004 	str.w	r4, [r8, #4]
 801da12:	e7d0      	b.n	801d9b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801da14:	119a      	asrs	r2, r3, #6
 801da16:	f108 0601 	add.w	r6, r8, #1
 801da1a:	d107      	bne.n	801da2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801da1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801da20:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801da24:	685c      	ldr	r4, [r3, #4]
 801da26:	3d01      	subs	r5, #1
 801da28:	b2ad      	uxth	r5, r5
 801da2a:	e7c4      	b.n	801d9b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801da2c:	2a01      	cmp	r2, #1
 801da2e:	d129      	bne.n	801da84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801da30:	f003 0203 	and.w	r2, r3, #3
 801da34:	1ea1      	subs	r1, r4, #2
 801da36:	4411      	add	r1, r2
 801da38:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801da3c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801da40:	b2c9      	uxtb	r1, r1
 801da42:	3a02      	subs	r2, #2
 801da44:	3b02      	subs	r3, #2
 801da46:	f361 0407 	bfi	r4, r1, #0, #8
 801da4a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801da4e:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801da52:	f362 240f 	bfi	r4, r2, #8, #8
 801da56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801da5a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801da5e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801da62:	fb10 2203 	smlabb	r2, r0, r3, r2
 801da66:	f363 4417 	bfi	r4, r3, #16, #8
 801da6a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801da6e:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801da72:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801da76:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801da7a:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801da7e:	f8c8 4004 	str.w	r4, [r8, #4]
 801da82:	e7d0      	b.n	801da26 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801da84:	2a02      	cmp	r2, #2
 801da86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801da8a:	d12e      	bne.n	801daea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801da8c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801da90:	f1a3 0a20 	sub.w	sl, r3, #32
 801da94:	f108 0602 	add.w	r6, r8, #2
 801da98:	b2d2      	uxtb	r2, r2
 801da9a:	f002 010f 	and.w	r1, r2, #15
 801da9e:	1112      	asrs	r2, r2, #4
 801daa0:	3908      	subs	r1, #8
 801daa2:	3a08      	subs	r2, #8
 801daa4:	4451      	add	r1, sl
 801daa6:	4492      	add	sl, r2
 801daa8:	4421      	add	r1, r4
 801daaa:	b2c9      	uxtb	r1, r1
 801daac:	f361 0407 	bfi	r4, r1, #0, #8
 801dab0:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801dab4:	f1a8 0820 	sub.w	r8, r8, #32
 801dab8:	4443      	add	r3, r8
 801daba:	b2db      	uxtb	r3, r3
 801dabc:	f363 240f 	bfi	r4, r3, #8, #8
 801dac0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801dac4:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801dac8:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801dacc:	fb10 330a 	smlabb	r3, r0, sl, r3
 801dad0:	f36a 4417 	bfi	r4, sl, #16, #8
 801dad4:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801dad8:	0e22      	lsrs	r2, r4, #24
 801dada:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801dade:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801dae2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801dae6:	6054      	str	r4, [r2, #4]
 801dae8:	e79d      	b.n	801da26 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801daea:	3301      	adds	r3, #1
 801daec:	42ab      	cmp	r3, r5
 801daee:	dd59      	ble.n	801dba4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801daf0:	1b5d      	subs	r5, r3, r5
 801daf2:	2d00      	cmp	r5, #0
 801daf4:	dc58      	bgt.n	801dba8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801daf6:	f8dd a004 	ldr.w	sl, [sp, #4]
 801dafa:	f04f 0800 	mov.w	r8, #0
 801dafe:	f1ba 0f00 	cmp.w	sl, #0
 801db02:	f340 8108 	ble.w	801dd16 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801db06:	1c73      	adds	r3, r6, #1
 801db08:	9303      	str	r3, [sp, #12]
 801db0a:	7833      	ldrb	r3, [r6, #0]
 801db0c:	b2db      	uxtb	r3, r3
 801db0e:	2bfe      	cmp	r3, #254	@ 0xfe
 801db10:	d16a      	bne.n	801dbe8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801db12:	7871      	ldrb	r1, [r6, #1]
 801db14:	1d33      	adds	r3, r6, #4
 801db16:	78b2      	ldrb	r2, [r6, #2]
 801db18:	b2c9      	uxtb	r1, r1
 801db1a:	78f0      	ldrb	r0, [r6, #3]
 801db1c:	b2d2      	uxtb	r2, r2
 801db1e:	9303      	str	r3, [sp, #12]
 801db20:	f361 0407 	bfi	r4, r1, #0, #8
 801db24:	b2c0      	uxtb	r0, r0
 801db26:	2303      	movs	r3, #3
 801db28:	f362 240f 	bfi	r4, r2, #8, #8
 801db2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801db30:	fb13 2200 	smlabb	r2, r3, r0, r2
 801db34:	f360 4417 	bfi	r4, r0, #16, #8
 801db38:	2307      	movs	r3, #7
 801db3a:	0e25      	lsrs	r5, r4, #24
 801db3c:	fb13 2101 	smlabb	r1, r3, r1, r2
 801db40:	230b      	movs	r3, #11
 801db42:	fb13 1305 	smlabb	r3, r3, r5, r1
 801db46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801db4a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801db4e:	605c      	str	r4, [r3, #4]
 801db50:	2501      	movs	r5, #1
 801db52:	462e      	mov	r6, r5
 801db54:	eb06 0308 	add.w	r3, r6, r8
 801db58:	ebaa 0a06 	sub.w	sl, sl, r6
 801db5c:	1bad      	subs	r5, r5, r6
 801db5e:	2b40      	cmp	r3, #64	@ 0x40
 801db60:	dd16      	ble.n	801db90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801db62:	4658      	mov	r0, fp
 801db64:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801db68:	f7e5 fb4c 	bl	8003204 <_ZN8touchgfx5paint9flushLineEPmi>
 801db6c:	4659      	mov	r1, fp
 801db6e:	9b05      	ldr	r3, [sp, #20]
 801db70:	4642      	mov	r2, r8
 801db72:	4638      	mov	r0, r7
 801db74:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801db78:	f7e5 fbac 	bl	80032d4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801db7c:	4b30      	ldr	r3, [pc, #192]	@ (801dc40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801db7e:	4447      	add	r7, r8
 801db80:	f04f 0800 	mov.w	r8, #0
 801db84:	459b      	cmp	fp, r3
 801db86:	bf0c      	ite	eq
 801db88:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801dc44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801db8c:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801dc40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801db90:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801db94:	4633      	mov	r3, r6
 801db96:	3b01      	subs	r3, #1
 801db98:	f842 4b04 	str.w	r4, [r2], #4
 801db9c:	d1fb      	bne.n	801db96 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801db9e:	44b0      	add	r8, r6
 801dba0:	9e03      	ldr	r6, [sp, #12]
 801dba2:	e7ac      	b.n	801dafe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801dba4:	1aed      	subs	r5, r5, r3
 801dba6:	e73f      	b.n	801da28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801dba8:	9b01      	ldr	r3, [sp, #4]
 801dbaa:	42ab      	cmp	r3, r5
 801dbac:	bfa8      	it	ge
 801dbae:	462b      	movge	r3, r5
 801dbb0:	4698      	mov	r8, r3
 801dbb2:	9b01      	ldr	r3, [sp, #4]
 801dbb4:	eba3 0a08 	sub.w	sl, r3, r8
 801dbb8:	0e23      	lsrs	r3, r4, #24
 801dbba:	eba5 0508 	sub.w	r5, r5, r8
 801dbbe:	d00b      	beq.n	801dbd8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801dbc0:	9a05      	ldr	r2, [sp, #20]
 801dbc2:	4641      	mov	r1, r8
 801dbc4:	4638      	mov	r0, r7
 801dbc6:	4353      	muls	r3, r2
 801dbc8:	1c5a      	adds	r2, r3, #1
 801dbca:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801dbce:	4622      	mov	r2, r4
 801dbd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dbd4:	f7e5 fb30 	bl	8003238 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801dbd8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801dbdc:	4447      	add	r7, r8
 801dbde:	e78c      	b.n	801dafa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801dbe0:	f8dd a004 	ldr.w	sl, [sp, #4]
 801dbe4:	4646      	mov	r6, r8
 801dbe6:	e788      	b.n	801dafa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801dbe8:	2bff      	cmp	r3, #255	@ 0xff
 801dbea:	d11d      	bne.n	801dc28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801dbec:	7870      	ldrb	r0, [r6, #1]
 801dbee:	1d73      	adds	r3, r6, #5
 801dbf0:	78b2      	ldrb	r2, [r6, #2]
 801dbf2:	b2c0      	uxtb	r0, r0
 801dbf4:	78f5      	ldrb	r5, [r6, #3]
 801dbf6:	b2d2      	uxtb	r2, r2
 801dbf8:	9303      	str	r3, [sp, #12]
 801dbfa:	f360 0407 	bfi	r4, r0, #0, #8
 801dbfe:	7933      	ldrb	r3, [r6, #4]
 801dc00:	b2ed      	uxtb	r5, r5
 801dc02:	b2d9      	uxtb	r1, r3
 801dc04:	f362 240f 	bfi	r4, r2, #8, #8
 801dc08:	2303      	movs	r3, #3
 801dc0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801dc0e:	f365 4417 	bfi	r4, r5, #16, #8
 801dc12:	fb13 2205 	smlabb	r2, r3, r5, r2
 801dc16:	2307      	movs	r3, #7
 801dc18:	f361 641f 	bfi	r4, r1, #24, #8
 801dc1c:	fb13 2000 	smlabb	r0, r3, r0, r2
 801dc20:	230b      	movs	r3, #11
 801dc22:	fb13 0301 	smlabb	r3, r3, r1, r0
 801dc26:	e78e      	b.n	801db46 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801dc28:	119d      	asrs	r5, r3, #6
 801dc2a:	d10d      	bne.n	801dc48 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801dc2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dc30:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801dc34:	685c      	ldr	r4, [r3, #4]
 801dc36:	e78b      	b.n	801db50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801dc38:	24026418 	.word	0x24026418
 801dc3c:	24026412 	.word	0x24026412
 801dc40:	24000140 	.word	0x24000140
 801dc44:	24000240 	.word	0x24000240
 801dc48:	2d01      	cmp	r5, #1
 801dc4a:	d12a      	bne.n	801dca2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801dc4c:	f003 0203 	and.w	r2, r3, #3
 801dc50:	1ea1      	subs	r1, r4, #2
 801dc52:	2603      	movs	r6, #3
 801dc54:	4411      	add	r1, r2
 801dc56:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801dc5a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801dc5e:	b2c9      	uxtb	r1, r1
 801dc60:	3a02      	subs	r2, #2
 801dc62:	3b02      	subs	r3, #2
 801dc64:	f361 0407 	bfi	r4, r1, #0, #8
 801dc68:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801dc6c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801dc70:	f362 240f 	bfi	r4, r2, #8, #8
 801dc74:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801dc78:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801dc7c:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801dc80:	fb16 2203 	smlabb	r2, r6, r3, r2
 801dc84:	f363 4417 	bfi	r4, r3, #16, #8
 801dc88:	2307      	movs	r3, #7
 801dc8a:	0e20      	lsrs	r0, r4, #24
 801dc8c:	fb13 2101 	smlabb	r1, r3, r1, r2
 801dc90:	230b      	movs	r3, #11
 801dc92:	fb13 1300 	smlabb	r3, r3, r0, r1
 801dc96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dc9a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801dc9e:	605c      	str	r4, [r3, #4]
 801dca0:	e757      	b.n	801db52 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801dca2:	2d02      	cmp	r5, #2
 801dca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dca8:	d12f      	bne.n	801dd0a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801dcaa:	1cb2      	adds	r2, r6, #2
 801dcac:	f1a3 0020 	sub.w	r0, r3, #32
 801dcb0:	9203      	str	r2, [sp, #12]
 801dcb2:	7872      	ldrb	r2, [r6, #1]
 801dcb4:	b2d2      	uxtb	r2, r2
 801dcb6:	f002 010f 	and.w	r1, r2, #15
 801dcba:	1112      	asrs	r2, r2, #4
 801dcbc:	3908      	subs	r1, #8
 801dcbe:	3a08      	subs	r2, #8
 801dcc0:	4401      	add	r1, r0
 801dcc2:	4402      	add	r2, r0
 801dcc4:	4421      	add	r1, r4
 801dcc6:	b2c9      	uxtb	r1, r1
 801dcc8:	f361 0407 	bfi	r4, r1, #0, #8
 801dccc:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801dcd0:	3d20      	subs	r5, #32
 801dcd2:	442b      	add	r3, r5
 801dcd4:	2503      	movs	r5, #3
 801dcd6:	b2db      	uxtb	r3, r3
 801dcd8:	f363 240f 	bfi	r4, r3, #8, #8
 801dcdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801dce0:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801dce4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801dce8:	fb15 3302 	smlabb	r3, r5, r2, r3
 801dcec:	f362 4417 	bfi	r4, r2, #16, #8
 801dcf0:	2207      	movs	r2, #7
 801dcf2:	0e20      	lsrs	r0, r4, #24
 801dcf4:	fb12 3201 	smlabb	r2, r2, r1, r3
 801dcf8:	210b      	movs	r1, #11
 801dcfa:	fb11 2100 	smlabb	r1, r1, r0, r2
 801dcfe:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801dd02:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801dd06:	604c      	str	r4, [r1, #4]
 801dd08:	e722      	b.n	801db50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801dd0a:	1c5d      	adds	r5, r3, #1
 801dd0c:	4656      	mov	r6, sl
 801dd0e:	45aa      	cmp	sl, r5
 801dd10:	bfa8      	it	ge
 801dd12:	462e      	movge	r6, r5
 801dd14:	e71e      	b.n	801db54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801dd16:	f1b8 0f00 	cmp.w	r8, #0
 801dd1a:	d00d      	beq.n	801dd38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801dd1c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801dd20:	4658      	mov	r0, fp
 801dd22:	f7e5 fa6f 	bl	8003204 <_ZN8touchgfx5paint9flushLineEPmi>
 801dd26:	4642      	mov	r2, r8
 801dd28:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801dd2c:	4638      	mov	r0, r7
 801dd2e:	9b05      	ldr	r3, [sp, #20]
 801dd30:	4659      	mov	r1, fp
 801dd32:	4447      	add	r7, r8
 801dd34:	f7e5 face 	bl	80032d4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801dd38:	4b1d      	ldr	r3, [pc, #116]	@ (801ddb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801dd3a:	9a01      	ldr	r2, [sp, #4]
 801dd3c:	881b      	ldrh	r3, [r3, #0]
 801dd3e:	1a9b      	subs	r3, r3, r2
 801dd40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd44:	441f      	add	r7, r3
 801dd46:	9b04      	ldr	r3, [sp, #16]
 801dd48:	3301      	adds	r3, #1
 801dd4a:	9304      	str	r3, [sp, #16]
 801dd4c:	9a04      	ldr	r2, [sp, #16]
 801dd4e:	9b00      	ldr	r3, [sp, #0]
 801dd50:	4293      	cmp	r3, r2
 801dd52:	d11d      	bne.n	801dd90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801dd54:	9b02      	ldr	r3, [sp, #8]
 801dd56:	2400      	movs	r4, #0
 801dd58:	9a02      	ldr	r2, [sp, #8]
 801dd5a:	f103 0801 	add.w	r8, r3, #1
 801dd5e:	9b06      	ldr	r3, [sp, #24]
 801dd60:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801dd64:	4621      	mov	r1, r4
 801dd66:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801dd6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801dd6e:	9b07      	ldr	r3, [sp, #28]
 801dd70:	ba36      	rev	r6, r6
 801dd72:	9808      	ldr	r0, [sp, #32]
 801dd74:	441e      	add	r6, r3
 801dd76:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801dd7a:	1aed      	subs	r5, r5, r3
 801dd7c:	f008 f9f4 	bl	8026168 <memset>
 801dd80:	f8cd 8008 	str.w	r8, [sp, #8]
 801dd84:	b2ad      	uxth	r5, r5
 801dd86:	9404      	str	r4, [sp, #16]
 801dd88:	f7e5 fa32 	bl	80031f0 <_ZN8touchgfx5paint8tearDownEv>
 801dd8c:	46b0      	mov	r8, r6
 801dd8e:	e5df      	b.n	801d950 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801dd90:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801dd94:	9a01      	ldr	r2, [sp, #4]
 801dd96:	1a9b      	subs	r3, r3, r2
 801dd98:	1b5d      	subs	r5, r3, r5
 801dd9a:	b2ad      	uxth	r5, r5
 801dd9c:	e7f4      	b.n	801dd88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801dd9e:	4b05      	ldr	r3, [pc, #20]	@ (801ddb4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801dda0:	6818      	ldr	r0, [r3, #0]
 801dda2:	6803      	ldr	r3, [r0, #0]
 801dda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dda6:	4798      	blx	r3
 801dda8:	b00f      	add	sp, #60	@ 0x3c
 801ddaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddae:	bf00      	nop
 801ddb0:	24026412 	.word	0x24026412
 801ddb4:	24026418 	.word	0x24026418

0801ddb8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddbc:	b093      	sub	sp, #76	@ 0x4c
 801ddbe:	460d      	mov	r5, r1
 801ddc0:	4616      	mov	r6, r2
 801ddc2:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801ddc6:	9000      	str	r0, [sp, #0]
 801ddc8:	f1bb 0f00 	cmp.w	fp, #0
 801ddcc:	f000 82ac 	beq.w	801e328 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801ddd0:	6810      	ldr	r0, [r2, #0]
 801ddd2:	ac0e      	add	r4, sp, #56	@ 0x38
 801ddd4:	6851      	ldr	r1, [r2, #4]
 801ddd6:	c403      	stmia	r4!, {r0, r1}
 801ddd8:	6818      	ldr	r0, [r3, #0]
 801ddda:	ac10      	add	r4, sp, #64	@ 0x40
 801dddc:	6859      	ldr	r1, [r3, #4]
 801ddde:	c403      	stmia	r4!, {r0, r1}
 801dde0:	a80e      	add	r0, sp, #56	@ 0x38
 801dde2:	f7f8 feaf 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dde6:	4631      	mov	r1, r6
 801dde8:	a810      	add	r0, sp, #64	@ 0x40
 801ddea:	f7f8 fed3 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ddee:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801ddf2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ddf6:	bfdb      	ittet	le
 801ddf8:	b293      	uxthle	r3, r2
 801ddfa:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ddfe:	2301      	movgt	r3, #1
 801de00:	fb91 f3f3 	sdivle	r3, r1, r3
 801de04:	9301      	str	r3, [sp, #4]
 801de06:	f105 0308 	add.w	r3, r5, #8
 801de0a:	9901      	ldr	r1, [sp, #4]
 801de0c:	9305      	str	r3, [sp, #20]
 801de0e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801de12:	440b      	add	r3, r1
 801de14:	3b01      	subs	r3, #1
 801de16:	fb93 f3f1 	sdiv	r3, r3, r1
 801de1a:	3b01      	subs	r3, #1
 801de1c:	9905      	ldr	r1, [sp, #20]
 801de1e:	b29b      	uxth	r3, r3
 801de20:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801de24:	9901      	ldr	r1, [sp, #4]
 801de26:	9306      	str	r3, [sp, #24]
 801de28:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801de2c:	fb93 f0f1 	sdiv	r0, r3, r1
 801de30:	b284      	uxth	r4, r0
 801de32:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801de36:	9403      	str	r4, [sp, #12]
 801de38:	9d03      	ldr	r5, [sp, #12]
 801de3a:	9c01      	ldr	r4, [sp, #4]
 801de3c:	fb05 3714 	mls	r7, r5, r4, r3
 801de40:	fb17 f702 	smulbb	r7, r7, r2
 801de44:	440f      	add	r7, r1
 801de46:	b2bf      	uxth	r7, r7
 801de48:	2d00      	cmp	r5, #0
 801de4a:	d06b      	beq.n	801df24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801de4c:	1e6a      	subs	r2, r5, #1
 801de4e:	9805      	ldr	r0, [sp, #20]
 801de50:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801de54:	9a06      	ldr	r2, [sp, #24]
 801de56:	fa99 f989 	rev.w	r9, r9
 801de5a:	4491      	add	r9, r2
 801de5c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801de60:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801de64:	4411      	add	r1, r2
 801de66:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801de6a:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801e1c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801de6e:	4413      	add	r3, r2
 801de70:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801de74:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801de78:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801de7c:	9302      	str	r3, [sp, #8]
 801de7e:	4bd0      	ldr	r3, [pc, #832]	@ (801e1c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801de80:	6818      	ldr	r0, [r3, #0]
 801de82:	6803      	ldr	r3, [r0, #0]
 801de84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de86:	4798      	blx	r3
 801de88:	4bce      	ldr	r3, [pc, #824]	@ (801e1c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801de8a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801de8e:	881b      	ldrh	r3, [r3, #0]
 801de90:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801de94:	fb03 2404 	mla	r4, r3, r4, r2
 801de98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801de9c:	436b      	muls	r3, r5
 801de9e:	2500      	movs	r5, #0
 801dea0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dea4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dea8:	4629      	mov	r1, r5
 801deaa:	4404      	add	r4, r0
 801deac:	18e3      	adds	r3, r4, r3
 801deae:	930d      	str	r3, [sp, #52]	@ 0x34
 801deb0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801deb4:	fb97 f3f3 	sdiv	r3, r7, r3
 801deb8:	9304      	str	r3, [sp, #16]
 801deba:	9b00      	ldr	r3, [sp, #0]
 801debc:	3304      	adds	r3, #4
 801debe:	4618      	mov	r0, r3
 801dec0:	9309      	str	r3, [sp, #36]	@ 0x24
 801dec2:	f008 f951 	bl	8026168 <memset>
 801dec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dec8:	42a3      	cmp	r3, r4
 801deca:	f240 8228 	bls.w	801e31e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801dece:	2003      	movs	r0, #3
 801ded0:	2607      	movs	r6, #7
 801ded2:	2f00      	cmp	r7, #0
 801ded4:	f000 80cb 	beq.w	801e06e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801ded8:	f899 3000 	ldrb.w	r3, [r9]
 801dedc:	b2db      	uxtb	r3, r3
 801dede:	2bfe      	cmp	r3, #254	@ 0xfe
 801dee0:	d123      	bne.n	801df2a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801dee2:	f899 3001 	ldrb.w	r3, [r9, #1]
 801dee6:	3f01      	subs	r7, #1
 801dee8:	f899 2002 	ldrb.w	r2, [r9, #2]
 801deec:	f109 0804 	add.w	r8, r9, #4
 801def0:	b2db      	uxtb	r3, r3
 801def2:	f899 1003 	ldrb.w	r1, [r9, #3]
 801def6:	b2d2      	uxtb	r2, r2
 801def8:	f363 0507 	bfi	r5, r3, #0, #8
 801defc:	b2c9      	uxtb	r1, r1
 801defe:	b2bf      	uxth	r7, r7
 801df00:	f362 250f 	bfi	r5, r2, #8, #8
 801df04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801df08:	fb10 2201 	smlabb	r2, r0, r1, r2
 801df0c:	f361 4517 	bfi	r5, r1, #16, #8
 801df10:	fb16 2303 	smlabb	r3, r6, r3, r2
 801df14:	9a00      	ldr	r2, [sp, #0]
 801df16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801df1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801df1e:	605d      	str	r5, [r3, #4]
 801df20:	46c1      	mov	r9, r8
 801df22:	e7d6      	b.n	801ded2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801df24:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801df28:	e798      	b.n	801de5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801df2a:	119a      	asrs	r2, r3, #6
 801df2c:	f109 0801 	add.w	r8, r9, #1
 801df30:	d108      	bne.n	801df44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801df32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801df36:	9a00      	ldr	r2, [sp, #0]
 801df38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801df3c:	685d      	ldr	r5, [r3, #4]
 801df3e:	3f01      	subs	r7, #1
 801df40:	b2bf      	uxth	r7, r7
 801df42:	e7ed      	b.n	801df20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801df44:	2a01      	cmp	r2, #1
 801df46:	d125      	bne.n	801df94 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801df48:	f003 0103 	and.w	r1, r3, #3
 801df4c:	1eaa      	subs	r2, r5, #2
 801df4e:	440a      	add	r2, r1
 801df50:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801df54:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801df58:	b2d2      	uxtb	r2, r2
 801df5a:	3902      	subs	r1, #2
 801df5c:	3b02      	subs	r3, #2
 801df5e:	f362 0507 	bfi	r5, r2, #0, #8
 801df62:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801df66:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801df6a:	f361 250f 	bfi	r5, r1, #8, #8
 801df6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801df72:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801df76:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801df7a:	fb10 1103 	smlabb	r1, r0, r3, r1
 801df7e:	f363 4517 	bfi	r5, r3, #16, #8
 801df82:	9b00      	ldr	r3, [sp, #0]
 801df84:	fb16 1202 	smlabb	r2, r6, r2, r1
 801df88:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801df8c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801df90:	6055      	str	r5, [r2, #4]
 801df92:	e7d4      	b.n	801df3e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801df94:	2a02      	cmp	r2, #2
 801df96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801df9a:	d12c      	bne.n	801dff6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801df9c:	f899 2001 	ldrb.w	r2, [r9, #1]
 801dfa0:	f1a3 0c20 	sub.w	ip, r3, #32
 801dfa4:	f109 0802 	add.w	r8, r9, #2
 801dfa8:	b2d2      	uxtb	r2, r2
 801dfaa:	f002 010f 	and.w	r1, r2, #15
 801dfae:	1112      	asrs	r2, r2, #4
 801dfb0:	3908      	subs	r1, #8
 801dfb2:	3a08      	subs	r2, #8
 801dfb4:	4461      	add	r1, ip
 801dfb6:	4494      	add	ip, r2
 801dfb8:	4429      	add	r1, r5
 801dfba:	b2c9      	uxtb	r1, r1
 801dfbc:	f361 0507 	bfi	r5, r1, #0, #8
 801dfc0:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801dfc4:	f1ae 0e20 	sub.w	lr, lr, #32
 801dfc8:	4473      	add	r3, lr
 801dfca:	b2db      	uxtb	r3, r3
 801dfcc:	f363 250f 	bfi	r5, r3, #8, #8
 801dfd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801dfd4:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801dfd8:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801dfdc:	fb10 330c 	smlabb	r3, r0, ip, r3
 801dfe0:	f36c 4517 	bfi	r5, ip, #16, #8
 801dfe4:	fb16 3101 	smlabb	r1, r6, r1, r3
 801dfe8:	9b00      	ldr	r3, [sp, #0]
 801dfea:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801dfee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801dff2:	604d      	str	r5, [r1, #4]
 801dff4:	e7a3      	b.n	801df3e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801dff6:	3301      	adds	r3, #1
 801dff8:	42bb      	cmp	r3, r7
 801dffa:	dd23      	ble.n	801e044 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801dffc:	eba3 0907 	sub.w	r9, r3, r7
 801e000:	f1b9 0f00 	cmp.w	r9, #0
 801e004:	dc20      	bgt.n	801e048 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801e006:	9e02      	ldr	r6, [sp, #8]
 801e008:	2700      	movs	r7, #0
 801e00a:	2e00      	cmp	r6, #0
 801e00c:	f340 8142 	ble.w	801e294 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801e010:	f108 0301 	add.w	r3, r8, #1
 801e014:	9307      	str	r3, [sp, #28]
 801e016:	f898 3000 	ldrb.w	r3, [r8]
 801e01a:	b2db      	uxtb	r3, r3
 801e01c:	119a      	asrs	r2, r3, #6
 801e01e:	d12a      	bne.n	801e076 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801e020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e024:	9a00      	ldr	r2, [sp, #0]
 801e026:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e02a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e02e:	685d      	ldr	r5, [r3, #4]
 801e030:	f040 811f 	bne.w	801e272 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801e034:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e038:	7025      	strb	r5, [r4, #0]
 801e03a:	7063      	strb	r3, [r4, #1]
 801e03c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801e040:	70a3      	strb	r3, [r4, #2]
 801e042:	e04e      	b.n	801e0e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801e044:	1aff      	subs	r7, r7, r3
 801e046:	e77b      	b.n	801df40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801e048:	9b02      	ldr	r3, [sp, #8]
 801e04a:	4620      	mov	r0, r4
 801e04c:	462a      	mov	r2, r5
 801e04e:	454b      	cmp	r3, r9
 801e050:	bfa8      	it	ge
 801e052:	464b      	movge	r3, r9
 801e054:	461f      	mov	r7, r3
 801e056:	9b02      	ldr	r3, [sp, #8]
 801e058:	4639      	mov	r1, r7
 801e05a:	1bde      	subs	r6, r3, r7
 801e05c:	eba9 0907 	sub.w	r9, r9, r7
 801e060:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e064:	465b      	mov	r3, fp
 801e066:	f7e5 f8e7 	bl	8003238 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801e06a:	443c      	add	r4, r7
 801e06c:	e7cc      	b.n	801e008 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801e06e:	46c8      	mov	r8, r9
 801e070:	9e02      	ldr	r6, [sp, #8]
 801e072:	46b9      	mov	r9, r7
 801e074:	e7c8      	b.n	801e008 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801e076:	2a01      	cmp	r2, #1
 801e078:	d136      	bne.n	801e0e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801e07a:	f003 0103 	and.w	r1, r3, #3
 801e07e:	1ea8      	subs	r0, r5, #2
 801e080:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e084:	4408      	add	r0, r1
 801e086:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801e08a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801e08e:	b2c0      	uxtb	r0, r0
 801e090:	f1a1 0102 	sub.w	r1, r1, #2
 801e094:	f1a3 0302 	sub.w	r3, r3, #2
 801e098:	f360 0507 	bfi	r5, r0, #0, #8
 801e09c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801e0a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801e0a4:	f361 250f 	bfi	r5, r1, #8, #8
 801e0a8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801e0ac:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801e0b0:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801e0b4:	f04f 0303 	mov.w	r3, #3
 801e0b8:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801e0bc:	f04f 0c07 	mov.w	ip, #7
 801e0c0:	9b00      	ldr	r3, [sp, #0]
 801e0c2:	f368 4517 	bfi	r5, r8, #16, #8
 801e0c6:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801e0ca:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801e0ce:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801e0d2:	f8cc 5004 	str.w	r5, [ip, #4]
 801e0d6:	f040 80cd 	bne.w	801e274 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801e0da:	7020      	strb	r0, [r4, #0]
 801e0dc:	7061      	strb	r1, [r4, #1]
 801e0de:	f884 8002 	strb.w	r8, [r4, #2]
 801e0e2:	3e01      	subs	r6, #1
 801e0e4:	3403      	adds	r4, #3
 801e0e6:	e0c1      	b.n	801e26c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801e0e8:	2a02      	cmp	r2, #2
 801e0ea:	d13d      	bne.n	801e168 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801e0ec:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e0f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e0f4:	f108 0202 	add.w	r2, r8, #2
 801e0f8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e0fc:	b2c9      	uxtb	r1, r1
 801e0fe:	f1a3 0c20 	sub.w	ip, r3, #32
 801e102:	9207      	str	r2, [sp, #28]
 801e104:	f001 000f 	and.w	r0, r1, #15
 801e108:	f1a0 0008 	sub.w	r0, r0, #8
 801e10c:	4460      	add	r0, ip
 801e10e:	4428      	add	r0, r5
 801e110:	b2c0      	uxtb	r0, r0
 801e112:	f360 0507 	bfi	r5, r0, #0, #8
 801e116:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801e11a:	f1a2 0220 	sub.w	r2, r2, #32
 801e11e:	4413      	add	r3, r2
 801e120:	ea4f 1221 	mov.w	r2, r1, asr #4
 801e124:	b2db      	uxtb	r3, r3
 801e126:	f1a2 0208 	sub.w	r2, r2, #8
 801e12a:	f363 250f 	bfi	r5, r3, #8, #8
 801e12e:	4462      	add	r2, ip
 801e130:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801e134:	f04f 0c03 	mov.w	ip, #3
 801e138:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801e13c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801e140:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801e144:	f04f 0107 	mov.w	r1, #7
 801e148:	f362 4517 	bfi	r5, r2, #16, #8
 801e14c:	fb11 c100 	smlabb	r1, r1, r0, ip
 801e150:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801e154:	9900      	ldr	r1, [sp, #0]
 801e156:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801e15a:	604d      	str	r5, [r1, #4]
 801e15c:	f040 8089 	bne.w	801e272 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801e160:	7020      	strb	r0, [r4, #0]
 801e162:	7063      	strb	r3, [r4, #1]
 801e164:	70a2      	strb	r2, [r4, #2]
 801e166:	e7bc      	b.n	801e0e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801e168:	2bfe      	cmp	r3, #254	@ 0xfe
 801e16a:	d12f      	bne.n	801e1cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801e16c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e170:	f108 0304 	add.w	r3, r8, #4
 801e174:	f898 2002 	ldrb.w	r2, [r8, #2]
 801e178:	f04f 0c03 	mov.w	ip, #3
 801e17c:	f898 1003 	ldrb.w	r1, [r8, #3]
 801e180:	b2c0      	uxtb	r0, r0
 801e182:	b2d2      	uxtb	r2, r2
 801e184:	9307      	str	r3, [sp, #28]
 801e186:	b2c9      	uxtb	r1, r1
 801e188:	f360 0507 	bfi	r5, r0, #0, #8
 801e18c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801e190:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e194:	f362 250f 	bfi	r5, r2, #8, #8
 801e198:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801e19c:	f04f 0307 	mov.w	r3, #7
 801e1a0:	f361 4517 	bfi	r5, r1, #16, #8
 801e1a4:	fb13 c300 	smlabb	r3, r3, r0, ip
 801e1a8:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801e1ac:	9b00      	ldr	r3, [sp, #0]
 801e1ae:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801e1b2:	605d      	str	r5, [r3, #4]
 801e1b4:	d15d      	bne.n	801e272 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801e1b6:	7020      	strb	r0, [r4, #0]
 801e1b8:	7062      	strb	r2, [r4, #1]
 801e1ba:	70a1      	strb	r1, [r4, #2]
 801e1bc:	e791      	b.n	801e0e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801e1be:	bf00      	nop
 801e1c0:	24026418 	.word	0x24026418
 801e1c4:	24026412 	.word	0x24026412
 801e1c8:	24000140 	.word	0x24000140
 801e1cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e1d0:	1c5a      	adds	r2, r3, #1
 801e1d2:	b94b      	cbnz	r3, 801e1e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801e1d4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e1d8:	d14c      	bne.n	801e274 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801e1da:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801e1de:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801e1e2:	7025      	strb	r5, [r4, #0]
 801e1e4:	7062      	strb	r2, [r4, #1]
 801e1e6:	e72b      	b.n	801e040 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801e1e8:	4296      	cmp	r6, r2
 801e1ea:	46b0      	mov	r8, r6
 801e1ec:	bfa8      	it	ge
 801e1ee:	4690      	movge	r8, r2
 801e1f0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e1f4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e1f8:	eba6 0608 	sub.w	r6, r6, r8
 801e1fc:	eba2 0908 	sub.w	r9, r2, r8
 801e200:	9308      	str	r3, [sp, #32]
 801e202:	b2eb      	uxtb	r3, r5
 801e204:	930c      	str	r3, [sp, #48]	@ 0x30
 801e206:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e20a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e20c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801e210:	930a      	str	r3, [sp, #40]	@ 0x28
 801e212:	9b08      	ldr	r3, [sp, #32]
 801e214:	d030      	beq.n	801e278 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801e216:	18fb      	adds	r3, r7, r3
 801e218:	2bc0      	cmp	r3, #192	@ 0xc0
 801e21a:	dd15      	ble.n	801e248 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801e21c:	4650      	mov	r0, sl
 801e21e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801e222:	f7e4 ffef 	bl	8003204 <_ZN8touchgfx5paint9flushLineEPmi>
 801e226:	2203      	movs	r2, #3
 801e228:	4651      	mov	r1, sl
 801e22a:	465b      	mov	r3, fp
 801e22c:	4620      	mov	r0, r4
 801e22e:	443c      	add	r4, r7
 801e230:	fb97 f2f2 	sdiv	r2, r7, r2
 801e234:	f7e5 f82a 	bl	800328c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801e238:	4b3d      	ldr	r3, [pc, #244]	@ (801e330 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801e23a:	2700      	movs	r7, #0
 801e23c:	459a      	cmp	sl, r3
 801e23e:	bf0c      	ite	eq
 801e240:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801e33c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801e244:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801e330 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801e248:	eb0a 0307 	add.w	r3, sl, r7
 801e24c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e24e:	f1b8 0801 	subs.w	r8, r8, #1
 801e252:	f103 0303 	add.w	r3, r3, #3
 801e256:	f803 2c03 	strb.w	r2, [r3, #-3]
 801e25a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e25c:	f803 2c02 	strb.w	r2, [r3, #-2]
 801e260:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e262:	f803 2c01 	strb.w	r2, [r3, #-1]
 801e266:	d1f1      	bne.n	801e24c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801e268:	9b08      	ldr	r3, [sp, #32]
 801e26a:	441f      	add	r7, r3
 801e26c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801e270:	e6cb      	b.n	801e00a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801e272:	2201      	movs	r2, #1
 801e274:	4690      	mov	r8, r2
 801e276:	e7bb      	b.n	801e1f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801e278:	4423      	add	r3, r4
 801e27a:	42a3      	cmp	r3, r4
 801e27c:	d9f6      	bls.n	801e26c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801e27e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e280:	3403      	adds	r4, #3
 801e282:	f804 2c03 	strb.w	r2, [r4, #-3]
 801e286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e288:	f804 2c02 	strb.w	r2, [r4, #-2]
 801e28c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e28e:	f804 2c01 	strb.w	r2, [r4, #-1]
 801e292:	e7f2      	b.n	801e27a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801e294:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e298:	d00e      	beq.n	801e2b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801e29a:	b16f      	cbz	r7, 801e2b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801e29c:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801e2a0:	4650      	mov	r0, sl
 801e2a2:	f7e4 ffaf 	bl	8003204 <_ZN8touchgfx5paint9flushLineEPmi>
 801e2a6:	2203      	movs	r2, #3
 801e2a8:	4620      	mov	r0, r4
 801e2aa:	443c      	add	r4, r7
 801e2ac:	465b      	mov	r3, fp
 801e2ae:	4651      	mov	r1, sl
 801e2b0:	fb97 f2f2 	sdiv	r2, r7, r2
 801e2b4:	f7e4 ffea 	bl	800328c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801e2b8:	4b1e      	ldr	r3, [pc, #120]	@ (801e334 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801e2ba:	9a02      	ldr	r2, [sp, #8]
 801e2bc:	881b      	ldrh	r3, [r3, #0]
 801e2be:	1a9b      	subs	r3, r3, r2
 801e2c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2c4:	441c      	add	r4, r3
 801e2c6:	9b04      	ldr	r3, [sp, #16]
 801e2c8:	3301      	adds	r3, #1
 801e2ca:	9304      	str	r3, [sp, #16]
 801e2cc:	9a04      	ldr	r2, [sp, #16]
 801e2ce:	9b01      	ldr	r3, [sp, #4]
 801e2d0:	4293      	cmp	r3, r2
 801e2d2:	d11c      	bne.n	801e30e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801e2d4:	9b03      	ldr	r3, [sp, #12]
 801e2d6:	2500      	movs	r5, #0
 801e2d8:	9a03      	ldr	r2, [sp, #12]
 801e2da:	1c5e      	adds	r6, r3, #1
 801e2dc:	9b05      	ldr	r3, [sp, #20]
 801e2de:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801e2e2:	4629      	mov	r1, r5
 801e2e4:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801e2e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801e2ec:	9b06      	ldr	r3, [sp, #24]
 801e2ee:	fa98 f888 	rev.w	r8, r8
 801e2f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e2f4:	4498      	add	r8, r3
 801e2f6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801e2fa:	1aff      	subs	r7, r7, r3
 801e2fc:	f007 ff34 	bl	8026168 <memset>
 801e300:	b2bf      	uxth	r7, r7
 801e302:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801e306:	f7e4 ff73 	bl	80031f0 <_ZN8touchgfx5paint8tearDownEv>
 801e30a:	46c1      	mov	r9, r8
 801e30c:	e5db      	b.n	801dec6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801e30e:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801e312:	9b02      	ldr	r3, [sp, #8]
 801e314:	1aff      	subs	r7, r7, r3
 801e316:	eba7 0709 	sub.w	r7, r7, r9
 801e31a:	b2bf      	uxth	r7, r7
 801e31c:	e7f3      	b.n	801e306 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801e31e:	4b06      	ldr	r3, [pc, #24]	@ (801e338 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801e320:	6818      	ldr	r0, [r3, #0]
 801e322:	6803      	ldr	r3, [r0, #0]
 801e324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e326:	4798      	blx	r3
 801e328:	b013      	add	sp, #76	@ 0x4c
 801e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e32e:	bf00      	nop
 801e330:	24000140 	.word	0x24000140
 801e334:	24026412 	.word	0x24026412
 801e338:	24026418 	.word	0x24026418
 801e33c:	24000240 	.word	0x24000240

0801e340 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e344:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801e348:	9c06      	ldr	r4, [sp, #24]
 801e34a:	2800      	cmp	r0, #0
 801e34c:	d06e      	beq.n	801e42c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e34e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801e352:	2d00      	cmp	r5, #0
 801e354:	dd6a      	ble.n	801e42c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e356:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801e35a:	f1bc 0f00 	cmp.w	ip, #0
 801e35e:	dd65      	ble.n	801e42c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e360:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801e364:	28ff      	cmp	r0, #255	@ 0xff
 801e366:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e36a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801e36e:	fb02 3306 	mla	r3, r2, r6, r3
 801e372:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801e376:	b2e4      	uxtb	r4, r4
 801e378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e37c:	4419      	add	r1, r3
 801e37e:	fb02 f30c 	mul.w	r3, r2, ip
 801e382:	eba2 0205 	sub.w	r2, r2, r5
 801e386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e38a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e38e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e392:	440b      	add	r3, r1
 801e394:	d03e      	beq.n	801e414 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801e396:	fa1f fc80 	uxth.w	ip, r0
 801e39a:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801e39e:	fb06 f60c 	mul.w	r6, r6, ip
 801e3a2:	b280      	uxth	r0, r0
 801e3a4:	fb07 f70c 	mul.w	r7, r7, ip
 801e3a8:	fb04 f40c 	mul.w	r4, r4, ip
 801e3ac:	4299      	cmp	r1, r3
 801e3ae:	d23d      	bcs.n	801e42c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e3b0:	eb01 0c05 	add.w	ip, r1, r5
 801e3b4:	458c      	cmp	ip, r1
 801e3b6:	f101 0e03 	add.w	lr, r1, #3
 801e3ba:	d928      	bls.n	801e40e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801e3bc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e3c0:	fb11 f100 	smulbb	r1, r1, r0
 801e3c4:	4421      	add	r1, r4
 801e3c6:	b289      	uxth	r1, r1
 801e3c8:	f101 0801 	add.w	r8, r1, #1
 801e3cc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e3d0:	1209      	asrs	r1, r1, #8
 801e3d2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e3d6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801e3da:	fb11 f100 	smulbb	r1, r1, r0
 801e3de:	4439      	add	r1, r7
 801e3e0:	b289      	uxth	r1, r1
 801e3e2:	f101 0801 	add.w	r8, r1, #1
 801e3e6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e3ea:	1209      	asrs	r1, r1, #8
 801e3ec:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e3f0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e3f4:	fb11 f100 	smulbb	r1, r1, r0
 801e3f8:	4431      	add	r1, r6
 801e3fa:	b289      	uxth	r1, r1
 801e3fc:	f101 0801 	add.w	r8, r1, #1
 801e400:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e404:	1209      	asrs	r1, r1, #8
 801e406:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801e40a:	4671      	mov	r1, lr
 801e40c:	e7d2      	b.n	801e3b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801e40e:	4411      	add	r1, r2
 801e410:	e7cc      	b.n	801e3ac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801e412:	4411      	add	r1, r2
 801e414:	4299      	cmp	r1, r3
 801e416:	d209      	bcs.n	801e42c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e418:	1948      	adds	r0, r1, r5
 801e41a:	4281      	cmp	r1, r0
 801e41c:	d2f9      	bcs.n	801e412 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801e41e:	700c      	strb	r4, [r1, #0]
 801e420:	3103      	adds	r1, #3
 801e422:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e426:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e42a:	e7f6      	b.n	801e41a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801e42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e430 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801e430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e434:	b093      	sub	sp, #76	@ 0x4c
 801e436:	4699      	mov	r9, r3
 801e438:	4617      	mov	r7, r2
 801e43a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e43e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801e442:	4604      	mov	r4, r0
 801e444:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e448:	a80c      	add	r0, sp, #48	@ 0x30
 801e44a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801e44e:	460d      	mov	r5, r1
 801e450:	4649      	mov	r1, r9
 801e452:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801e456:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e45a:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801e45e:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801e462:	f7f2 fdc5 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 801e466:	4639      	mov	r1, r7
 801e468:	a80c      	add	r0, sp, #48	@ 0x30
 801e46a:	f7f2 fdc1 	bl	8010ff0 <_ZN8touchgfx4RectaNERKS0_>
 801e46e:	4b78      	ldr	r3, [pc, #480]	@ (801e650 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801e470:	8818      	ldrh	r0, [r3, #0]
 801e472:	4b78      	ldr	r3, [pc, #480]	@ (801e654 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801e474:	b202      	sxth	r2, r0
 801e476:	8819      	ldrh	r1, [r3, #0]
 801e478:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801e47c:	b20f      	sxth	r7, r1
 801e47e:	2b00      	cmp	r3, #0
 801e480:	da07      	bge.n	801e492 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801e482:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801e486:	4463      	add	r3, ip
 801e488:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801e48c:	2300      	movs	r3, #0
 801e48e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801e492:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801e496:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801e49a:	1ad2      	subs	r2, r2, r3
 801e49c:	4594      	cmp	ip, r2
 801e49e:	bfc4      	itt	gt
 801e4a0:	1ac2      	subgt	r2, r0, r3
 801e4a2:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801e4a6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e4aa:	2a00      	cmp	r2, #0
 801e4ac:	da07      	bge.n	801e4be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801e4ae:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801e4b2:	4462      	add	r2, ip
 801e4b4:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801e4be:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e4c2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801e4c6:	1abf      	subs	r7, r7, r2
 801e4c8:	45bc      	cmp	ip, r7
 801e4ca:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801e65c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801e4ce:	bfc8      	it	gt
 801e4d0:	1a8f      	subgt	r7, r1, r2
 801e4d2:	f89c c000 	ldrb.w	ip, [ip]
 801e4d6:	bfc8      	it	gt
 801e4d8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801e4dc:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801e4e0:	f1bc 0f00 	cmp.w	ip, #0
 801e4e4:	d176      	bne.n	801e5d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801e4e6:	4287      	cmp	r7, r0
 801e4e8:	bf14      	ite	ne
 801e4ea:	2100      	movne	r1, #0
 801e4ec:	2101      	moveq	r1, #1
 801e4ee:	2f00      	cmp	r7, #0
 801e4f0:	9107      	str	r1, [sp, #28]
 801e4f2:	dd73      	ble.n	801e5dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801e4f4:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801e4f8:	2900      	cmp	r1, #0
 801e4fa:	9104      	str	r1, [sp, #16]
 801e4fc:	dd6e      	ble.n	801e5dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801e4fe:	f8b9 1000 	ldrh.w	r1, [r9]
 801e502:	a80e      	add	r0, sp, #56	@ 0x38
 801e504:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801e508:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801e50c:	1a5b      	subs	r3, r3, r1
 801e50e:	a910      	add	r1, sp, #64	@ 0x40
 801e510:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801e514:	b21b      	sxth	r3, r3
 801e516:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801e51a:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801e660 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801e51e:	9305      	str	r3, [sp, #20]
 801e520:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801e524:	1ad2      	subs	r2, r2, r3
 801e526:	b213      	sxth	r3, r2
 801e528:	9306      	str	r3, [sp, #24]
 801e52a:	9b05      	ldr	r3, [sp, #20]
 801e52c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801e530:	9b06      	ldr	r3, [sp, #24]
 801e532:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e536:	9b04      	ldr	r3, [sp, #16]
 801e538:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801e53c:	2300      	movs	r3, #0
 801e53e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e540:	f7f8 fb28 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e544:	4640      	mov	r0, r8
 801e546:	f7f8 fafd 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e54a:	a810      	add	r0, sp, #64	@ 0x40
 801e54c:	f7f8 fafa 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e550:	4b41      	ldr	r3, [pc, #260]	@ (801e658 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801e552:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801e556:	4628      	mov	r0, r5
 801e558:	881b      	ldrh	r3, [r3, #0]
 801e55a:	9308      	str	r3, [sp, #32]
 801e55c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e560:	b21b      	sxth	r3, r3
 801e562:	9303      	str	r3, [sp, #12]
 801e564:	682b      	ldr	r3, [r5, #0]
 801e566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e568:	4798      	blx	r3
 801e56a:	9a03      	ldr	r2, [sp, #12]
 801e56c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801e570:	4681      	mov	r9, r0
 801e572:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801e576:	fb13 f302 	smulbb	r3, r3, r2
 801e57a:	2203      	movs	r2, #3
 801e57c:	f8da 0000 	ldr.w	r0, [sl]
 801e580:	fb15 3302 	smlabb	r3, r5, r2, r3
 801e584:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801e586:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e588:	441d      	add	r5, r3
 801e58a:	6803      	ldr	r3, [r0, #0]
 801e58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e58e:	4798      	blx	r3
 801e590:	9009      	str	r0, [sp, #36]	@ 0x24
 801e592:	f8da 0000 	ldr.w	r0, [sl]
 801e596:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801e59a:	6803      	ldr	r3, [r0, #0]
 801e59c:	910a      	str	r1, [sp, #40]	@ 0x28
 801e59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e5a0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801e5a4:	4798      	blx	r3
 801e5a6:	f010 0f01 	tst.w	r0, #1
 801e5aa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801e5ae:	d01e      	beq.n	801e5ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801e5b0:	f8da 0000 	ldr.w	r0, [sl]
 801e5b4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801e5b8:	6803      	ldr	r3, [r0, #0]
 801e5ba:	9200      	str	r2, [sp, #0]
 801e5bc:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801e5be:	462b      	mov	r3, r5
 801e5c0:	e898 0006 	ldmia.w	r8, {r1, r2}
 801e5c4:	47b0      	blx	r6
 801e5c6:	9b05      	ldr	r3, [sp, #20]
 801e5c8:	80a7      	strh	r7, [r4, #4]
 801e5ca:	8023      	strh	r3, [r4, #0]
 801e5cc:	9b06      	ldr	r3, [sp, #24]
 801e5ce:	8063      	strh	r3, [r4, #2]
 801e5d0:	9b04      	ldr	r3, [sp, #16]
 801e5d2:	e007      	b.n	801e5e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801e5d4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801e5d8:	4288      	cmp	r0, r1
 801e5da:	e785      	b.n	801e4e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801e5dc:	2300      	movs	r3, #0
 801e5de:	8023      	strh	r3, [r4, #0]
 801e5e0:	8063      	strh	r3, [r4, #2]
 801e5e2:	80a3      	strh	r3, [r4, #4]
 801e5e4:	4620      	mov	r0, r4
 801e5e6:	80e3      	strh	r3, [r4, #6]
 801e5e8:	b013      	add	sp, #76	@ 0x4c
 801e5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5ee:	fb09 f606 	mul.w	r6, r9, r6
 801e5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5f4:	fb11 6602 	smlabb	r6, r1, r2, r6
 801e5f8:	9a07      	ldr	r2, [sp, #28]
 801e5fa:	4433      	add	r3, r6
 801e5fc:	461e      	mov	r6, r3
 801e5fe:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801e602:	b16a      	cbz	r2, 801e620 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801e604:	9a08      	ldr	r2, [sp, #32]
 801e606:	4593      	cmp	fp, r2
 801e608:	d10a      	bne.n	801e620 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801e60a:	f8da 0000 	ldr.w	r0, [sl]
 801e60e:	fb09 f303 	mul.w	r3, r9, r3
 801e612:	4629      	mov	r1, r5
 801e614:	6802      	ldr	r2, [r0, #0]
 801e616:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801e61a:	4632      	mov	r2, r6
 801e61c:	47d0      	blx	sl
 801e61e:	e7d2      	b.n	801e5c6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801e620:	9a03      	ldr	r2, [sp, #12]
 801e622:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801e660 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801e626:	fb02 5803 	mla	r8, r2, r3, r5
 801e62a:	4545      	cmp	r5, r8
 801e62c:	d2cb      	bcs.n	801e5c6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801e62e:	f8db 0000 	ldr.w	r0, [fp]
 801e632:	4629      	mov	r1, r5
 801e634:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801e638:	6802      	ldr	r2, [r0, #0]
 801e63a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e63e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801e642:	4632      	mov	r2, r6
 801e644:	47d0      	blx	sl
 801e646:	9b03      	ldr	r3, [sp, #12]
 801e648:	444e      	add	r6, r9
 801e64a:	441d      	add	r5, r3
 801e64c:	e7ed      	b.n	801e62a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801e64e:	bf00      	nop
 801e650:	2402640c 	.word	0x2402640c
 801e654:	2402640e 	.word	0x2402640e
 801e658:	24026412 	.word	0x24026412
 801e65c:	24026410 	.word	0x24026410
 801e660:	24026418 	.word	0x24026418

0801e664 <_ZN8touchgfx8LCD24bppC1Ev>:
 801e664:	2200      	movs	r2, #0
 801e666:	490e      	ldr	r1, [pc, #56]	@ (801e6a0 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801e668:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801e66c:	6001      	str	r1, [r0, #0]
 801e66e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801e672:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801e676:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801e67a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801e67e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801e682:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801e686:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801e68a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801e68e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801e692:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801e696:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801e69a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801e69e:	4770      	bx	lr
 801e6a0:	0802a77c 	.word	0x0802a77c

0801e6a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6a8:	b091      	sub	sp, #68	@ 0x44
 801e6aa:	4607      	mov	r7, r0
 801e6ac:	4688      	mov	r8, r1
 801e6ae:	6810      	ldr	r0, [r2, #0]
 801e6b0:	6851      	ldr	r1, [r2, #4]
 801e6b2:	ac0c      	add	r4, sp, #48	@ 0x30
 801e6b4:	4616      	mov	r6, r2
 801e6b6:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801e6ba:	4d64      	ldr	r5, [pc, #400]	@ (801e84c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801e6bc:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801e850 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801e6c0:	c403      	stmia	r4!, {r0, r1}
 801e6c2:	6818      	ldr	r0, [r3, #0]
 801e6c4:	ac0e      	add	r4, sp, #56	@ 0x38
 801e6c6:	6859      	ldr	r1, [r3, #4]
 801e6c8:	c403      	stmia	r4!, {r0, r1}
 801e6ca:	a80c      	add	r0, sp, #48	@ 0x30
 801e6cc:	f7f8 fa3a 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e6d0:	4631      	mov	r1, r6
 801e6d2:	a80e      	add	r0, sp, #56	@ 0x38
 801e6d4:	f7f8 fa5e 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e6d8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801e6dc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e6e0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801e6e4:	6828      	ldr	r0, [r5, #0]
 801e6e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e6ea:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801e6ee:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801e6f2:	440f      	add	r7, r1
 801e6f4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801e6f8:	440a      	add	r2, r1
 801e6fa:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801e6fe:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801e702:	4413      	add	r3, r2
 801e704:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e708:	6803      	ldr	r3, [r0, #0]
 801e70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e70c:	4798      	blx	r3
 801e70e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801e712:	6828      	ldr	r0, [r5, #0]
 801e714:	d01f      	beq.n	801e756 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801e716:	2201      	movs	r2, #1
 801e718:	2500      	movs	r5, #0
 801e71a:	6801      	ldr	r1, [r0, #0]
 801e71c:	b2a4      	uxth	r4, r4
 801e71e:	b2b6      	uxth	r6, r6
 801e720:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801e724:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801e728:	250b      	movs	r5, #11
 801e72a:	9507      	str	r5, [sp, #28]
 801e72c:	f8ba 5000 	ldrh.w	r5, [sl]
 801e730:	f8cd 9010 	str.w	r9, [sp, #16]
 801e734:	9602      	str	r6, [sp, #8]
 801e736:	9401      	str	r4, [sp, #4]
 801e738:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801e73c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801e740:	9203      	str	r2, [sp, #12]
 801e742:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801e746:	9200      	str	r2, [sp, #0]
 801e748:	4642      	mov	r2, r8
 801e74a:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801e74c:	4639      	mov	r1, r7
 801e74e:	47a0      	blx	r4
 801e750:	b011      	add	sp, #68	@ 0x44
 801e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e756:	6803      	ldr	r3, [r0, #0]
 801e758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e75a:	4798      	blx	r3
 801e75c:	f8ba 5000 	ldrh.w	r5, [sl]
 801e760:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801e764:	f04f 0e04 	mov.w	lr, #4
 801e768:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e76c:	436e      	muls	r6, r5
 801e76e:	fb05 2303 	mla	r3, r5, r3, r2
 801e772:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e776:	1b2d      	subs	r5, r5, r4
 801e778:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e77c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e780:	4418      	add	r0, r3
 801e782:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801e786:	1982      	adds	r2, r0, r6
 801e788:	1b1b      	subs	r3, r3, r4
 801e78a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e78e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e790:	4290      	cmp	r0, r2
 801e792:	d254      	bcs.n	801e83e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801e794:	eb00 0a04 	add.w	sl, r0, r4
 801e798:	4550      	cmp	r0, sl
 801e79a:	d24c      	bcs.n	801e836 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801e79c:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e7a0:	fb1e e101 	smlabb	r1, lr, r1, lr
 801e7a4:	eb08 0c01 	add.w	ip, r8, r1
 801e7a8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e7ac:	b173      	cbz	r3, 801e7cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e7ae:	2bff      	cmp	r3, #255	@ 0xff
 801e7b0:	f818 b001 	ldrb.w	fp, [r8, r1]
 801e7b4:	d10c      	bne.n	801e7d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e7b6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801e7ba:	d109      	bne.n	801e7d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e7bc:	f880 b000 	strb.w	fp, [r0]
 801e7c0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e7c4:	7043      	strb	r3, [r0, #1]
 801e7c6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e7ca:	7083      	strb	r3, [r0, #2]
 801e7cc:	3003      	adds	r0, #3
 801e7ce:	e7e3      	b.n	801e798 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e7d0:	fb09 f103 	mul.w	r1, r9, r3
 801e7d4:	1c4b      	adds	r3, r1, #1
 801e7d6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e7da:	7801      	ldrb	r1, [r0, #0]
 801e7dc:	121b      	asrs	r3, r3, #8
 801e7de:	b29e      	uxth	r6, r3
 801e7e0:	43db      	mvns	r3, r3
 801e7e2:	fb1b fb06 	smulbb	fp, fp, r6
 801e7e6:	b2db      	uxtb	r3, r3
 801e7e8:	fb01 b103 	mla	r1, r1, r3, fp
 801e7ec:	b289      	uxth	r1, r1
 801e7ee:	f101 0b01 	add.w	fp, r1, #1
 801e7f2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e7f6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e7fa:	fb1b fb03 	smulbb	fp, fp, r3
 801e7fe:	1209      	asrs	r1, r1, #8
 801e800:	7001      	strb	r1, [r0, #0]
 801e802:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e806:	fb01 b106 	mla	r1, r1, r6, fp
 801e80a:	b289      	uxth	r1, r1
 801e80c:	f101 0b01 	add.w	fp, r1, #1
 801e810:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e814:	1209      	asrs	r1, r1, #8
 801e816:	7041      	strb	r1, [r0, #1]
 801e818:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801e81c:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e820:	fb1c f303 	smulbb	r3, ip, r3
 801e824:	fb01 3606 	mla	r6, r1, r6, r3
 801e828:	b2b6      	uxth	r6, r6
 801e82a:	1c73      	adds	r3, r6, #1
 801e82c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e830:	1236      	asrs	r6, r6, #8
 801e832:	7086      	strb	r6, [r0, #2]
 801e834:	e7ca      	b.n	801e7cc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e838:	4428      	add	r0, r5
 801e83a:	441f      	add	r7, r3
 801e83c:	e7a8      	b.n	801e790 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801e83e:	4b03      	ldr	r3, [pc, #12]	@ (801e84c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801e840:	6818      	ldr	r0, [r3, #0]
 801e842:	6803      	ldr	r3, [r0, #0]
 801e844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e846:	4798      	blx	r3
 801e848:	e782      	b.n	801e750 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801e84a:	bf00      	nop
 801e84c:	24026418 	.word	0x24026418
 801e850:	24026412 	.word	0x24026412

0801e854 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e858:	b091      	sub	sp, #68	@ 0x44
 801e85a:	4680      	mov	r8, r0
 801e85c:	460e      	mov	r6, r1
 801e85e:	6810      	ldr	r0, [r2, #0]
 801e860:	6851      	ldr	r1, [r2, #4]
 801e862:	ad0c      	add	r5, sp, #48	@ 0x30
 801e864:	4614      	mov	r4, r2
 801e866:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801e86a:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801ea04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801e86e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801ea08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801e872:	c503      	stmia	r5!, {r0, r1}
 801e874:	6818      	ldr	r0, [r3, #0]
 801e876:	ad0e      	add	r5, sp, #56	@ 0x38
 801e878:	6859      	ldr	r1, [r3, #4]
 801e87a:	c503      	stmia	r5!, {r0, r1}
 801e87c:	a80c      	add	r0, sp, #48	@ 0x30
 801e87e:	f7f8 f961 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e882:	4621      	mov	r1, r4
 801e884:	a80e      	add	r0, sp, #56	@ 0x38
 801e886:	f7f8 f985 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e88a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801e88e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e892:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801e896:	f8d9 0000 	ldr.w	r0, [r9]
 801e89a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e89e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801e8a2:	eb08 0401 	add.w	r4, r8, r1
 801e8a6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801e8aa:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801e8ae:	440a      	add	r2, r1
 801e8b0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801e8b4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801e8b8:	4413      	add	r3, r2
 801e8ba:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e8be:	6803      	ldr	r3, [r0, #0]
 801e8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e8c2:	4798      	blx	r3
 801e8c4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801e8c8:	f8d9 0000 	ldr.w	r0, [r9]
 801e8cc:	d022      	beq.n	801e914 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801e8ce:	2200      	movs	r2, #0
 801e8d0:	f04f 0c01 	mov.w	ip, #1
 801e8d4:	6801      	ldr	r1, [r0, #0]
 801e8d6:	b2ad      	uxth	r5, r5
 801e8d8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801e8dc:	e9cd c208 	strd	ip, r2, [sp, #32]
 801e8e0:	f04f 0c0b 	mov.w	ip, #11
 801e8e4:	f8cd c01c 	str.w	ip, [sp, #28]
 801e8e8:	f8ba c000 	ldrh.w	ip, [sl]
 801e8ec:	9704      	str	r7, [sp, #16]
 801e8ee:	9502      	str	r5, [sp, #8]
 801e8f0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801e8f4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801e8f8:	9203      	str	r2, [sp, #12]
 801e8fa:	fa1f f288 	uxth.w	r2, r8
 801e8fe:	9201      	str	r2, [sp, #4]
 801e900:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801e904:	9200      	str	r2, [sp, #0]
 801e906:	4632      	mov	r2, r6
 801e908:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801e90a:	4621      	mov	r1, r4
 801e90c:	47a8      	blx	r5
 801e90e:	b011      	add	sp, #68	@ 0x44
 801e910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e914:	6803      	ldr	r3, [r0, #0]
 801e916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e918:	4798      	blx	r3
 801e91a:	f8ba 2000 	ldrh.w	r2, [sl]
 801e91e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e922:	f04f 0e03 	mov.w	lr, #3
 801e926:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801e92a:	4355      	muls	r5, r2
 801e92c:	fa1f fc87 	uxth.w	ip, r7
 801e930:	fb02 1303 	mla	r3, r2, r3, r1
 801e934:	eba2 0208 	sub.w	r2, r2, r8
 801e938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e93c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e940:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e944:	4418      	add	r0, r3
 801e946:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e948:	1943      	adds	r3, r0, r5
 801e94a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801e94e:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801e952:	eba2 0208 	sub.w	r2, r2, r8
 801e956:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e95a:	b2ad      	uxth	r5, r5
 801e95c:	4298      	cmp	r0, r3
 801e95e:	d24a      	bcs.n	801e9f6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801e960:	eb00 0908 	add.w	r9, r0, r8
 801e964:	4621      	mov	r1, r4
 801e966:	4548      	cmp	r0, r9
 801e968:	460c      	mov	r4, r1
 801e96a:	d240      	bcs.n	801e9ee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801e96c:	f04f 0a04 	mov.w	sl, #4
 801e970:	7824      	ldrb	r4, [r4, #0]
 801e972:	2fff      	cmp	r7, #255	@ 0xff
 801e974:	f101 0101 	add.w	r1, r1, #1
 801e978:	fb1e a404 	smlabb	r4, lr, r4, sl
 801e97c:	eb06 0a04 	add.w	sl, r6, r4
 801e980:	f816 b004 	ldrb.w	fp, [r6, r4]
 801e984:	d02b      	beq.n	801e9de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801e986:	7804      	ldrb	r4, [r0, #0]
 801e988:	fb14 f405 	smulbb	r4, r4, r5
 801e98c:	fb0b 440c 	mla	r4, fp, ip, r4
 801e990:	b2a4      	uxth	r4, r4
 801e992:	f104 0b01 	add.w	fp, r4, #1
 801e996:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e99a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e99e:	fb1b fb05 	smulbb	fp, fp, r5
 801e9a2:	1224      	asrs	r4, r4, #8
 801e9a4:	7004      	strb	r4, [r0, #0]
 801e9a6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e9aa:	fb04 b40c 	mla	r4, r4, ip, fp
 801e9ae:	b2a4      	uxth	r4, r4
 801e9b0:	f104 0b01 	add.w	fp, r4, #1
 801e9b4:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e9b8:	1224      	asrs	r4, r4, #8
 801e9ba:	7044      	strb	r4, [r0, #1]
 801e9bc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e9c0:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e9c4:	fb1a fa05 	smulbb	sl, sl, r5
 801e9c8:	fb04 a40c 	mla	r4, r4, ip, sl
 801e9cc:	b2a4      	uxth	r4, r4
 801e9ce:	f104 0a01 	add.w	sl, r4, #1
 801e9d2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e9d6:	1224      	asrs	r4, r4, #8
 801e9d8:	7084      	strb	r4, [r0, #2]
 801e9da:	3003      	adds	r0, #3
 801e9dc:	e7c3      	b.n	801e966 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801e9de:	f880 b000 	strb.w	fp, [r0]
 801e9e2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e9e6:	7044      	strb	r4, [r0, #1]
 801e9e8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e9ec:	e7f4      	b.n	801e9d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801e9ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e9f0:	4420      	add	r0, r4
 801e9f2:	188c      	adds	r4, r1, r2
 801e9f4:	e7b2      	b.n	801e95c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801e9f6:	4b03      	ldr	r3, [pc, #12]	@ (801ea04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801e9f8:	6818      	ldr	r0, [r3, #0]
 801e9fa:	6803      	ldr	r3, [r0, #0]
 801e9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e9fe:	4798      	blx	r3
 801ea00:	e785      	b.n	801e90e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801ea02:	bf00      	nop
 801ea04:	24026418 	.word	0x24026418
 801ea08:	24026412 	.word	0x24026412

0801ea0c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801ea0c:	b4f0      	push	{r4, r5, r6, r7}
 801ea0e:	460c      	mov	r4, r1
 801ea10:	4611      	mov	r1, r2
 801ea12:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ea16:	461a      	mov	r2, r3
 801ea18:	780f      	ldrb	r7, [r1, #0]
 801ea1a:	9b04      	ldr	r3, [sp, #16]
 801ea1c:	784e      	ldrb	r6, [r1, #1]
 801ea1e:	b11f      	cbz	r7, 801ea28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801ea20:	2f01      	cmp	r7, #1
 801ea22:	d01d      	beq.n	801ea60 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801ea24:	bcf0      	pop	{r4, r5, r6, r7}
 801ea26:	4770      	bx	lr
 801ea28:	2e03      	cmp	r6, #3
 801ea2a:	d8fb      	bhi.n	801ea24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ea2c:	e8df f006 	tbb	[pc, r6]
 801ea30:	16140702 	.word	0x16140702
 801ea34:	9504      	str	r5, [sp, #16]
 801ea36:	4620      	mov	r0, r4
 801ea38:	bcf0      	pop	{r4, r5, r6, r7}
 801ea3a:	f7ff be33 	b.w	801e6a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ea3e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801ea40:	2800      	cmp	r0, #0
 801ea42:	d0ef      	beq.n	801ea24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ea44:	6806      	ldr	r6, [r0, #0]
 801ea46:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801ea4a:	68f5      	ldr	r5, [r6, #12]
 801ea4c:	4613      	mov	r3, r2
 801ea4e:	46ac      	mov	ip, r5
 801ea50:	460a      	mov	r2, r1
 801ea52:	4621      	mov	r1, r4
 801ea54:	bcf0      	pop	{r4, r5, r6, r7}
 801ea56:	4760      	bx	ip
 801ea58:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801ea5a:	e7f1      	b.n	801ea40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801ea5c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801ea5e:	e7ef      	b.n	801ea40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801ea60:	2e03      	cmp	r6, #3
 801ea62:	d8df      	bhi.n	801ea24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ea64:	e8df f006 	tbb	[pc, r6]
 801ea68:	110f0702 	.word	0x110f0702
 801ea6c:	9504      	str	r5, [sp, #16]
 801ea6e:	4620      	mov	r0, r4
 801ea70:	bcf0      	pop	{r4, r5, r6, r7}
 801ea72:	f7ff beef 	b.w	801e854 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801ea76:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801ea78:	2800      	cmp	r0, #0
 801ea7a:	d0d3      	beq.n	801ea24 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ea7c:	6806      	ldr	r6, [r0, #0]
 801ea7e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801ea82:	68b5      	ldr	r5, [r6, #8]
 801ea84:	e7e2      	b.n	801ea4c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801ea86:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801ea88:	e7f6      	b.n	801ea78 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801ea8a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801ea8c:	e7f4      	b.n	801ea78 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801ea90 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801ea90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea94:	4605      	mov	r5, r0
 801ea96:	b08f      	sub	sp, #60	@ 0x3c
 801ea98:	460c      	mov	r4, r1
 801ea9a:	461f      	mov	r7, r3
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	d052      	beq.n	801eb46 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801eaa0:	6808      	ldr	r0, [r1, #0]
 801eaa2:	ab0a      	add	r3, sp, #40	@ 0x28
 801eaa4:	6849      	ldr	r1, [r1, #4]
 801eaa6:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801ec70 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801eaaa:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801ec74 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801eaae:	c303      	stmia	r3!, {r0, r1}
 801eab0:	6810      	ldr	r0, [r2, #0]
 801eab2:	ab0c      	add	r3, sp, #48	@ 0x30
 801eab4:	6851      	ldr	r1, [r2, #4]
 801eab6:	c303      	stmia	r3!, {r0, r1}
 801eab8:	a80a      	add	r0, sp, #40	@ 0x28
 801eaba:	f7f8 f843 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eabe:	4621      	mov	r1, r4
 801eac0:	a80c      	add	r0, sp, #48	@ 0x30
 801eac2:	f7f8 f867 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eac6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801eaca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801eace:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801ead2:	f8d8 0000 	ldr.w	r0, [r8]
 801ead6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801eada:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801eade:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801eae2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801eae6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801eaea:	440a      	add	r2, r1
 801eaec:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801eaf0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801eaf4:	4413      	add	r3, r2
 801eaf6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801eafa:	6803      	ldr	r3, [r0, #0]
 801eafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eafe:	4798      	blx	r3
 801eb00:	2fff      	cmp	r7, #255	@ 0xff
 801eb02:	d023      	beq.n	801eb4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801eb04:	f010 0f04 	tst.w	r0, #4
 801eb08:	f8d8 0000 	ldr.w	r0, [r8]
 801eb0c:	d021      	beq.n	801eb52 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801eb0e:	2100      	movs	r1, #0
 801eb10:	f04f 0e01 	mov.w	lr, #1
 801eb14:	f8d0 c000 	ldr.w	ip, [r0]
 801eb18:	b2a4      	uxth	r4, r4
 801eb1a:	9106      	str	r1, [sp, #24]
 801eb1c:	b2b6      	uxth	r6, r6
 801eb1e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801eb22:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801eb26:	e9cd e107 	strd	lr, r1, [sp, #28]
 801eb2a:	f8b9 e000 	ldrh.w	lr, [r9]
 801eb2e:	9703      	str	r7, [sp, #12]
 801eb30:	9401      	str	r4, [sp, #4]
 801eb32:	9600      	str	r6, [sp, #0]
 801eb34:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801eb38:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801eb3c:	9102      	str	r1, [sp, #8]
 801eb3e:	4629      	mov	r1, r5
 801eb40:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801eb44:	47a0      	blx	r4
 801eb46:	b00f      	add	sp, #60	@ 0x3c
 801eb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb4c:	f010 0f01 	tst.w	r0, #1
 801eb50:	e7da      	b.n	801eb08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801eb52:	6803      	ldr	r3, [r0, #0]
 801eb54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb56:	4798      	blx	r3
 801eb58:	f8b9 1000 	ldrh.w	r1, [r9]
 801eb5c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801eb60:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801eb64:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801eb68:	434c      	muls	r4, r1
 801eb6a:	2fff      	cmp	r7, #255	@ 0xff
 801eb6c:	fb01 2303 	mla	r3, r1, r3, r2
 801eb70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801eb74:	eba1 0106 	sub.w	r1, r1, r6
 801eb78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801eb80:	4418      	add	r0, r3
 801eb82:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801eb86:	eba3 0606 	sub.w	r6, r3, r6
 801eb8a:	4404      	add	r4, r0
 801eb8c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801eb90:	d04a      	beq.n	801ec28 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801eb92:	43fa      	mvns	r2, r7
 801eb94:	b2bb      	uxth	r3, r7
 801eb96:	b2d7      	uxtb	r7, r2
 801eb98:	42a0      	cmp	r0, r4
 801eb9a:	d263      	bcs.n	801ec64 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801eb9c:	eb00 0e0c 	add.w	lr, r0, ip
 801eba0:	4586      	cmp	lr, r0
 801eba2:	f100 0803 	add.w	r8, r0, #3
 801eba6:	d93a      	bls.n	801ec1e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801eba8:	f835 2b02 	ldrh.w	r2, [r5], #2
 801ebac:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801ebb0:	00d0      	lsls	r0, r2, #3
 801ebb2:	fb19 f907 	smulbb	r9, r9, r7
 801ebb6:	b2c0      	uxtb	r0, r0
 801ebb8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801ebbc:	fb00 9003 	mla	r0, r0, r3, r9
 801ebc0:	b280      	uxth	r0, r0
 801ebc2:	f100 0901 	add.w	r9, r0, #1
 801ebc6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ebca:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801ebce:	fb19 f907 	smulbb	r9, r9, r7
 801ebd2:	1200      	asrs	r0, r0, #8
 801ebd4:	f808 0c03 	strb.w	r0, [r8, #-3]
 801ebd8:	10d0      	asrs	r0, r2, #3
 801ebda:	1212      	asrs	r2, r2, #8
 801ebdc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801ebe0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801ebe4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801ebe8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ebec:	fb00 9003 	mla	r0, r0, r3, r9
 801ebf0:	b280      	uxth	r0, r0
 801ebf2:	f100 0901 	add.w	r9, r0, #1
 801ebf6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801ebfa:	1200      	asrs	r0, r0, #8
 801ebfc:	f808 0c02 	strb.w	r0, [r8, #-2]
 801ec00:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801ec04:	fb10 f007 	smulbb	r0, r0, r7
 801ec08:	fb02 0203 	mla	r2, r2, r3, r0
 801ec0c:	b292      	uxth	r2, r2
 801ec0e:	1c50      	adds	r0, r2, #1
 801ec10:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ec14:	4640      	mov	r0, r8
 801ec16:	1212      	asrs	r2, r2, #8
 801ec18:	f808 2c01 	strb.w	r2, [r8, #-1]
 801ec1c:	e7c0      	b.n	801eba0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801ec1e:	4408      	add	r0, r1
 801ec20:	4435      	add	r5, r6
 801ec22:	e7b9      	b.n	801eb98 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801ec24:	4408      	add	r0, r1
 801ec26:	4435      	add	r5, r6
 801ec28:	42a0      	cmp	r0, r4
 801ec2a:	d21b      	bcs.n	801ec64 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801ec2c:	eb00 070c 	add.w	r7, r0, ip
 801ec30:	42b8      	cmp	r0, r7
 801ec32:	d2f7      	bcs.n	801ec24 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801ec34:	f835 3b02 	ldrh.w	r3, [r5], #2
 801ec38:	3003      	adds	r0, #3
 801ec3a:	00da      	lsls	r2, r3, #3
 801ec3c:	b2d2      	uxtb	r2, r2
 801ec3e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ec42:	f800 2c03 	strb.w	r2, [r0, #-3]
 801ec46:	10da      	asrs	r2, r3, #3
 801ec48:	121b      	asrs	r3, r3, #8
 801ec4a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801ec4e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801ec52:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801ec56:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801ec5a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801ec5e:	f800 3c01 	strb.w	r3, [r0, #-1]
 801ec62:	e7e5      	b.n	801ec30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801ec64:	4b02      	ldr	r3, [pc, #8]	@ (801ec70 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801ec66:	6818      	ldr	r0, [r3, #0]
 801ec68:	6803      	ldr	r3, [r0, #0]
 801ec6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec6c:	4798      	blx	r3
 801ec6e:	e76a      	b.n	801eb46 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801ec70:	24026418 	.word	0x24026418
 801ec74:	24026412 	.word	0x24026412

0801ec78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801ec78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec7c:	b08a      	sub	sp, #40	@ 0x28
 801ec7e:	460d      	mov	r5, r1
 801ec80:	4604      	mov	r4, r0
 801ec82:	461e      	mov	r6, r3
 801ec84:	6808      	ldr	r0, [r1, #0]
 801ec86:	ab06      	add	r3, sp, #24
 801ec88:	6849      	ldr	r1, [r1, #4]
 801ec8a:	4f5d      	ldr	r7, [pc, #372]	@ (801ee00 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801ec8c:	c303      	stmia	r3!, {r0, r1}
 801ec8e:	6810      	ldr	r0, [r2, #0]
 801ec90:	ab08      	add	r3, sp, #32
 801ec92:	6851      	ldr	r1, [r2, #4]
 801ec94:	c303      	stmia	r3!, {r0, r1}
 801ec96:	a806      	add	r0, sp, #24
 801ec98:	f7f7 ff54 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ec9c:	4629      	mov	r1, r5
 801ec9e:	a808      	add	r0, sp, #32
 801eca0:	f7f7 ff78 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eca4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801eca8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801ecac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ecb0:	6838      	ldr	r0, [r7, #0]
 801ecb2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ecb6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801ecba:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801ecbe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ecc2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ecc6:	440a      	add	r2, r1
 801ecc8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801eccc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ecd0:	4413      	add	r3, r2
 801ecd2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801ecd6:	6803      	ldr	r3, [r0, #0]
 801ecd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecda:	4798      	blx	r3
 801ecdc:	2eff      	cmp	r6, #255	@ 0xff
 801ecde:	d119      	bne.n	801ed14 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801ece0:	f010 0f20 	tst.w	r0, #32
 801ece4:	6838      	ldr	r0, [r7, #0]
 801ece6:	d018      	beq.n	801ed1a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801ece8:	b2ad      	uxth	r5, r5
 801ecea:	2700      	movs	r7, #0
 801ecec:	6801      	ldr	r1, [r0, #0]
 801ecee:	9501      	str	r5, [sp, #4]
 801ecf0:	fa1f f588 	uxth.w	r5, r8
 801ecf4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801ecf8:	9500      	str	r5, [sp, #0]
 801ecfa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ecfe:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801ed02:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ed06:	9602      	str	r6, [sp, #8]
 801ed08:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801ed0a:	4621      	mov	r1, r4
 801ed0c:	47a8      	blx	r5
 801ed0e:	b00a      	add	sp, #40	@ 0x28
 801ed10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed14:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801ed18:	e7e4      	b.n	801ece4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801ed1a:	6803      	ldr	r3, [r0, #0]
 801ed1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed1e:	4798      	blx	r3
 801ed20:	4b38      	ldr	r3, [pc, #224]	@ (801ee04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801ed22:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ed26:	f8b3 c000 	ldrh.w	ip, [r3]
 801ed2a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801ed2e:	fb0c f505 	mul.w	r5, ip, r5
 801ed32:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801ed36:	fb0c 2303 	mla	r3, ip, r3, r2
 801ed3a:	ebac 0c08 	sub.w	ip, ip, r8
 801ed3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed42:	ebae 0e08 	sub.w	lr, lr, r8
 801ed46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed4a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ed4e:	4418      	add	r0, r3
 801ed50:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801ed54:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801ed58:	4405      	add	r5, r0
 801ed5a:	42a8      	cmp	r0, r5
 801ed5c:	d24a      	bcs.n	801edf4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801ed5e:	eb00 0803 	add.w	r8, r0, r3
 801ed62:	4540      	cmp	r0, r8
 801ed64:	d243      	bcs.n	801edee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801ed66:	78e2      	ldrb	r2, [r4, #3]
 801ed68:	b15a      	cbz	r2, 801ed82 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801ed6a:	2aff      	cmp	r2, #255	@ 0xff
 801ed6c:	f894 9000 	ldrb.w	r9, [r4]
 801ed70:	d10a      	bne.n	801ed88 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801ed72:	2eff      	cmp	r6, #255	@ 0xff
 801ed74:	d108      	bne.n	801ed88 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801ed76:	f880 9000 	strb.w	r9, [r0]
 801ed7a:	7862      	ldrb	r2, [r4, #1]
 801ed7c:	7042      	strb	r2, [r0, #1]
 801ed7e:	78a2      	ldrb	r2, [r4, #2]
 801ed80:	7082      	strb	r2, [r0, #2]
 801ed82:	3003      	adds	r0, #3
 801ed84:	3404      	adds	r4, #4
 801ed86:	e7ec      	b.n	801ed62 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801ed88:	4372      	muls	r2, r6
 801ed8a:	1c51      	adds	r1, r2, #1
 801ed8c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801ed90:	1209      	asrs	r1, r1, #8
 801ed92:	fa1f fa81 	uxth.w	sl, r1
 801ed96:	43c9      	mvns	r1, r1
 801ed98:	fb19 f90a 	smulbb	r9, r9, sl
 801ed9c:	b2ca      	uxtb	r2, r1
 801ed9e:	7801      	ldrb	r1, [r0, #0]
 801eda0:	fb01 9902 	mla	r9, r1, r2, r9
 801eda4:	fa1f f989 	uxth.w	r9, r9
 801eda8:	f109 0101 	add.w	r1, r9, #1
 801edac:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801edb0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801edb4:	f880 9000 	strb.w	r9, [r0]
 801edb8:	f890 9001 	ldrb.w	r9, [r0, #1]
 801edbc:	7861      	ldrb	r1, [r4, #1]
 801edbe:	fb19 f902 	smulbb	r9, r9, r2
 801edc2:	fb01 910a 	mla	r1, r1, sl, r9
 801edc6:	b289      	uxth	r1, r1
 801edc8:	f101 0901 	add.w	r9, r1, #1
 801edcc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801edd0:	1209      	asrs	r1, r1, #8
 801edd2:	7041      	strb	r1, [r0, #1]
 801edd4:	7881      	ldrb	r1, [r0, #2]
 801edd6:	f894 9002 	ldrb.w	r9, [r4, #2]
 801edda:	fb11 f202 	smulbb	r2, r1, r2
 801edde:	fb09 220a 	mla	r2, r9, sl, r2
 801ede2:	b292      	uxth	r2, r2
 801ede4:	1c51      	adds	r1, r2, #1
 801ede6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801edea:	1212      	asrs	r2, r2, #8
 801edec:	e7c8      	b.n	801ed80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801edee:	4460      	add	r0, ip
 801edf0:	4474      	add	r4, lr
 801edf2:	e7b2      	b.n	801ed5a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801edf4:	6838      	ldr	r0, [r7, #0]
 801edf6:	6803      	ldr	r3, [r0, #0]
 801edf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801edfa:	4798      	blx	r3
 801edfc:	e787      	b.n	801ed0e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801edfe:	bf00      	nop
 801ee00:	24026418 	.word	0x24026418
 801ee04:	24026412 	.word	0x24026412

0801ee08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ee08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ee0c:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801ee10:	4607      	mov	r7, r0
 801ee12:	460c      	mov	r4, r1
 801ee14:	4692      	mov	sl, r2
 801ee16:	4699      	mov	r9, r3
 801ee18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ee1a:	b335      	cbz	r5, 801ee6a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801ee1c:	4608      	mov	r0, r1
 801ee1e:	f7fb fdcb 	bl	801a9b8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ee22:	4680      	mov	r8, r0
 801ee24:	4620      	mov	r0, r4
 801ee26:	f7fb fdfb 	bl	801aa20 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ee2a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ee2e:	4620      	mov	r0, r4
 801ee30:	f8ad a008 	strh.w	sl, [sp, #8]
 801ee34:	f8ad 900a 	strh.w	r9, [sp, #10]
 801ee38:	f8ad 800c 	strh.w	r8, [sp, #12]
 801ee3c:	f7fb fefa 	bl	801ac34 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ee40:	2810      	cmp	r0, #16
 801ee42:	d812      	bhi.n	801ee6a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801ee44:	e8df f000 	tbb	[pc, r0]
 801ee48:	11092d24 	.word	0x11092d24
 801ee4c:	11111111 	.word	0x11111111
 801ee50:	14111111 	.word	0x14111111
 801ee54:	4c111111 	.word	0x4c111111
 801ee58:	3c          	.byte	0x3c
 801ee59:	00          	.byte	0x00
 801ee5a:	4620      	mov	r0, r4
 801ee5c:	f7fb fe66 	bl	801ab2c <_ZNK8touchgfx6Bitmap7getDataEv>
 801ee60:	462b      	mov	r3, r5
 801ee62:	4632      	mov	r2, r6
 801ee64:	a902      	add	r1, sp, #8
 801ee66:	f7ff ff07 	bl	801ec78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ee6a:	b004      	add	sp, #16
 801ee6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee70:	4620      	mov	r0, r4
 801ee72:	f7fb fe5b 	bl	801ab2c <_ZNK8touchgfx6Bitmap7getDataEv>
 801ee76:	4680      	mov	r8, r0
 801ee78:	4620      	mov	r0, r4
 801ee7a:	f7fb fe87 	bl	801ab8c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ee7e:	ab02      	add	r3, sp, #8
 801ee80:	4602      	mov	r2, r0
 801ee82:	4641      	mov	r1, r8
 801ee84:	4638      	mov	r0, r7
 801ee86:	e9cd 6500 	strd	r6, r5, [sp]
 801ee8a:	f7ff fdbf 	bl	801ea0c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ee8e:	e7ec      	b.n	801ee6a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801ee90:	4620      	mov	r0, r4
 801ee92:	f7fb fe4b 	bl	801ab2c <_ZNK8touchgfx6Bitmap7getDataEv>
 801ee96:	462b      	mov	r3, r5
 801ee98:	4632      	mov	r2, r6
 801ee9a:	a902      	add	r1, sp, #8
 801ee9c:	f7ff fdf8 	bl	801ea90 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801eea0:	e7e3      	b.n	801ee6a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eea2:	683b      	ldr	r3, [r7, #0]
 801eea4:	4620      	mov	r0, r4
 801eea6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801eeaa:	f7fb fe3f 	bl	801ab2c <_ZNK8touchgfx6Bitmap7getDataEv>
 801eeae:	2300      	movs	r3, #0
 801eeb0:	4601      	mov	r1, r0
 801eeb2:	aa02      	add	r2, sp, #8
 801eeb4:	4638      	mov	r0, r7
 801eeb6:	e9cd 5300 	strd	r5, r3, [sp]
 801eeba:	4633      	mov	r3, r6
 801eebc:	47c0      	blx	r8
 801eebe:	e7d4      	b.n	801ee6a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eec0:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801eec2:	2f00      	cmp	r7, #0
 801eec4:	d0d1      	beq.n	801ee6a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eec6:	683b      	ldr	r3, [r7, #0]
 801eec8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801eecc:	4620      	mov	r0, r4
 801eece:	f7fb fe2d 	bl	801ab2c <_ZNK8touchgfx6Bitmap7getDataEv>
 801eed2:	9500      	str	r5, [sp, #0]
 801eed4:	4601      	mov	r1, r0
 801eed6:	4633      	mov	r3, r6
 801eed8:	aa02      	add	r2, sp, #8
 801eeda:	4638      	mov	r0, r7
 801eedc:	47c0      	blx	r8
 801eede:	e7c4      	b.n	801ee6a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eee0:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801eee2:	2f00      	cmp	r7, #0
 801eee4:	d0c1      	beq.n	801ee6a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eee6:	683b      	ldr	r3, [r7, #0]
 801eee8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801eeec:	e7ee      	b.n	801eecc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801eeee <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801eeee:	b4f0      	push	{r4, r5, r6, r7}
 801eef0:	4616      	mov	r6, r2
 801eef2:	461c      	mov	r4, r3
 801eef4:	460d      	mov	r5, r1
 801eef6:	9a04      	ldr	r2, [sp, #16]
 801eef8:	2e01      	cmp	r6, #1
 801eefa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801eefe:	d00e      	beq.n	801ef1e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801ef00:	d303      	bcc.n	801ef0a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801ef02:	2e02      	cmp	r6, #2
 801ef04:	d006      	beq.n	801ef14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801ef06:	bcf0      	pop	{r4, r5, r6, r7}
 801ef08:	4770      	bx	lr
 801ef0a:	4621      	mov	r1, r4
 801ef0c:	4628      	mov	r0, r5
 801ef0e:	bcf0      	pop	{r4, r5, r6, r7}
 801ef10:	f7ff bdbe 	b.w	801ea90 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801ef14:	4621      	mov	r1, r4
 801ef16:	4628      	mov	r0, r5
 801ef18:	bcf0      	pop	{r4, r5, r6, r7}
 801ef1a:	f7ff bead 	b.w	801ec78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ef1e:	6805      	ldr	r5, [r0, #0]
 801ef20:	2600      	movs	r6, #0
 801ef22:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801ef26:	68ed      	ldr	r5, [r5, #12]
 801ef28:	4613      	mov	r3, r2
 801ef2a:	4622      	mov	r2, r4
 801ef2c:	46ac      	mov	ip, r5
 801ef2e:	bcf0      	pop	{r4, r5, r6, r7}
 801ef30:	4760      	bx	ip
	...

0801ef34 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801ef34:	b160      	cbz	r0, 801ef50 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801ef36:	2903      	cmp	r1, #3
 801ef38:	d818      	bhi.n	801ef6c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801ef3a:	e8df f001 	tbb	[pc, r1]
 801ef3e:	1902      	.short	0x1902
 801ef40:	1b06      	.short	0x1b06
 801ef42:	4b0e      	ldr	r3, [pc, #56]	@ (801ef7c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801ef44:	8818      	ldrh	r0, [r3, #0]
 801ef46:	4240      	negs	r0, r0
 801ef48:	4770      	bx	lr
 801ef4a:	4b0c      	ldr	r3, [pc, #48]	@ (801ef7c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801ef4c:	8818      	ldrh	r0, [r3, #0]
 801ef4e:	4770      	bx	lr
 801ef50:	2903      	cmp	r1, #3
 801ef52:	d80b      	bhi.n	801ef6c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801ef54:	a301      	add	r3, pc, #4	@ (adr r3, 801ef5c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801ef56:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ef5a:	bf00      	nop
 801ef5c:	0801ef71 	.word	0x0801ef71
 801ef60:	0801ef4b 	.word	0x0801ef4b
 801ef64:	0801ef75 	.word	0x0801ef75
 801ef68:	0801ef43 	.word	0x0801ef43
 801ef6c:	2000      	movs	r0, #0
 801ef6e:	4770      	bx	lr
 801ef70:	2001      	movs	r0, #1
 801ef72:	4770      	bx	lr
 801ef74:	f04f 30ff 	mov.w	r0, #4294967295
 801ef78:	4770      	bx	lr
 801ef7a:	bf00      	nop
 801ef7c:	24026412 	.word	0x24026412

0801ef80 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801ef80:	b160      	cbz	r0, 801ef9c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801ef82:	2903      	cmp	r1, #3
 801ef84:	d818      	bhi.n	801efb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ef86:	e8df f001 	tbb	[pc, r1]
 801ef8a:	0219      	.short	0x0219
 801ef8c:	051b      	.short	0x051b
 801ef8e:	4b0e      	ldr	r3, [pc, #56]	@ (801efc8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ef90:	8818      	ldrh	r0, [r3, #0]
 801ef92:	4770      	bx	lr
 801ef94:	4b0c      	ldr	r3, [pc, #48]	@ (801efc8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ef96:	8818      	ldrh	r0, [r3, #0]
 801ef98:	4240      	negs	r0, r0
 801ef9a:	4770      	bx	lr
 801ef9c:	2903      	cmp	r1, #3
 801ef9e:	d80b      	bhi.n	801efb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801efa0:	a301      	add	r3, pc, #4	@ (adr r3, 801efa8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801efa2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801efa6:	bf00      	nop
 801efa8:	0801ef8f 	.word	0x0801ef8f
 801efac:	0801efc1 	.word	0x0801efc1
 801efb0:	0801ef95 	.word	0x0801ef95
 801efb4:	0801efbd 	.word	0x0801efbd
 801efb8:	2000      	movs	r0, #0
 801efba:	4770      	bx	lr
 801efbc:	2001      	movs	r0, #1
 801efbe:	4770      	bx	lr
 801efc0:	f04f 30ff 	mov.w	r0, #4294967295
 801efc4:	4770      	bx	lr
 801efc6:	bf00      	nop
 801efc8:	24026412 	.word	0x24026412

0801efcc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801efcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd0:	b097      	sub	sp, #92	@ 0x5c
 801efd2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801efd4:	a912      	add	r1, sp, #72	@ 0x48
 801efd6:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801efda:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801efde:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801efe2:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801efe6:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801efea:	e881 000c 	stmia.w	r1, {r2, r3}
 801efee:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801eff2:	930a      	str	r3, [sp, #40]	@ 0x28
 801eff4:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801eff8:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801effc:	9311      	str	r3, [sp, #68]	@ 0x44
 801effe:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801f002:	798d      	ldrb	r5, [r1, #6]
 801f004:	930c      	str	r3, [sp, #48]	@ 0x30
 801f006:	7b4b      	ldrb	r3, [r1, #13]
 801f008:	0158      	lsls	r0, r3, #5
 801f00a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801f00e:	4328      	orrs	r0, r5
 801f010:	9009      	str	r0, [sp, #36]	@ 0x24
 801f012:	f000 817c 	beq.w	801f30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f016:	011b      	lsls	r3, r3, #4
 801f018:	79c8      	ldrb	r0, [r1, #7]
 801f01a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f01e:	4303      	orrs	r3, r0
 801f020:	930e      	str	r3, [sp, #56]	@ 0x38
 801f022:	f000 8174 	beq.w	801f30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f026:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f02a:	b29b      	uxth	r3, r3
 801f02c:	2f00      	cmp	r7, #0
 801f02e:	f000 8116 	beq.w	801f25e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801f032:	1aff      	subs	r7, r7, r3
 801f034:	b2bf      	uxth	r7, r7
 801f036:	043b      	lsls	r3, r7, #16
 801f038:	d502      	bpl.n	801f040 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f03a:	1bf6      	subs	r6, r6, r7
 801f03c:	2700      	movs	r7, #0
 801f03e:	b236      	sxth	r6, r6
 801f040:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f044:	a812      	add	r0, sp, #72	@ 0x48
 801f046:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f04a:	428e      	cmp	r6, r1
 801f04c:	b28b      	uxth	r3, r1
 801f04e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801f052:	bfbf      	itttt	lt
 801f054:	18ff      	addlt	r7, r7, r3
 801f056:	1bbe      	sublt	r6, r7, r6
 801f058:	b2b7      	uxthlt	r7, r6
 801f05a:	460e      	movlt	r6, r1
 801f05c:	8891      	ldrh	r1, [r2, #4]
 801f05e:	440b      	add	r3, r1
 801f060:	4631      	mov	r1, r6
 801f062:	b21b      	sxth	r3, r3
 801f064:	9310      	str	r3, [sp, #64]	@ 0x40
 801f066:	88d3      	ldrh	r3, [r2, #6]
 801f068:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f06a:	449a      	add	sl, r3
 801f06c:	fa0f f38a 	sxth.w	r3, sl
 801f070:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801f074:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f076:	4bb5      	ldr	r3, [pc, #724]	@ (801f34c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801f078:	f893 b000 	ldrb.w	fp, [r3]
 801f07c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f080:	f1dc 0300 	rsbs	r3, ip, #0
 801f084:	eb43 030c 	adc.w	r3, r3, ip
 801f088:	930d      	str	r3, [sp, #52]	@ 0x34
 801f08a:	464b      	mov	r3, r9
 801f08c:	f7f7 fbcf 	bl	801682e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f090:	4631      	mov	r1, r6
 801f092:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801f096:	464b      	mov	r3, r9
 801f098:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f09a:	a812      	add	r0, sp, #72	@ 0x48
 801f09c:	f7f7 fbe4 	bl	8016868 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f0a0:	a916      	add	r1, sp, #88	@ 0x58
 801f0a2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f0a6:	a815      	add	r0, sp, #84	@ 0x54
 801f0a8:	f7f7 fd0a 	bl	8016ac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f0ac:	f1b9 0f00 	cmp.w	r9, #0
 801f0b0:	f040 80d8 	bne.w	801f264 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801f0b4:	f1bb 0f01 	cmp.w	fp, #1
 801f0b8:	f040 80dc 	bne.w	801f274 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801f0bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f0be:	b153      	cbz	r3, 801f0d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801f0c0:	2508      	movs	r5, #8
 801f0c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f0c4:	fb95 f3f8 	sdiv	r3, r5, r8
 801f0c8:	1e5d      	subs	r5, r3, #1
 801f0ca:	4415      	add	r5, r2
 801f0cc:	fb95 f5f3 	sdiv	r5, r5, r3
 801f0d0:	fb15 f503 	smulbb	r5, r5, r3
 801f0d4:	b2ad      	uxth	r5, r5
 801f0d6:	b907      	cbnz	r7, 801f0da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801f0d8:	b16c      	cbz	r4, 801f0f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801f0da:	fb04 7305 	mla	r3, r4, r5, r7
 801f0de:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f0e0:	ebaa 0a04 	sub.w	sl, sl, r4
 801f0e4:	fb08 f303 	mul.w	r3, r8, r3
 801f0e8:	fa1f fa8a 	uxth.w	sl, sl
 801f0ec:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801f0f0:	f003 0407 	and.w	r4, r3, #7
 801f0f4:	9226      	str	r2, [sp, #152]	@ 0x98
 801f0f6:	4649      	mov	r1, r9
 801f0f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801f0fa:	f7ff ff1b 	bl	801ef34 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f0fe:	4683      	mov	fp, r0
 801f100:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801f102:	f7ff ff3d 	bl	801ef80 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f106:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f108:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f10a:	4681      	mov	r9, r0
 801f10c:	1a9b      	subs	r3, r3, r2
 801f10e:	459a      	cmp	sl, r3
 801f110:	bfa8      	it	ge
 801f112:	469a      	movge	sl, r3
 801f114:	f1ba 0f00 	cmp.w	sl, #0
 801f118:	f340 80f9 	ble.w	801f30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f11c:	1bf6      	subs	r6, r6, r7
 801f11e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f120:	1b9e      	subs	r6, r3, r6
 801f122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f124:	429e      	cmp	r6, r3
 801f126:	bfd4      	ite	le
 801f128:	ebc7 0706 	rsble	r7, r7, r6
 801f12c:	ebc7 0703 	rsbgt	r7, r7, r3
 801f130:	2f00      	cmp	r7, #0
 801f132:	f340 80ec 	ble.w	801f30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f136:	1bed      	subs	r5, r5, r7
 801f138:	fb08 f305 	mul.w	r3, r8, r5
 801f13c:	930d      	str	r3, [sp, #52]	@ 0x34
 801f13e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f140:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f144:	930e      	str	r3, [sp, #56]	@ 0x38
 801f146:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f148:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f14c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f14e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f150:	b2db      	uxtb	r3, r3
 801f152:	9310      	str	r3, [sp, #64]	@ 0x40
 801f154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f156:	2b00      	cmp	r3, #0
 801f158:	f040 80de 	bne.w	801f318 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801f15c:	4b7c      	ldr	r3, [pc, #496]	@ (801f350 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801f15e:	6818      	ldr	r0, [r3, #0]
 801f160:	6803      	ldr	r3, [r0, #0]
 801f162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f164:	4798      	blx	r3
 801f166:	2301      	movs	r3, #1
 801f168:	4a7a      	ldr	r2, [pc, #488]	@ (801f354 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801f16a:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801f16e:	fb07 9b1b 	mls	fp, r7, fp, r9
 801f172:	fa03 f308 	lsl.w	r3, r3, r8
 801f176:	8811      	ldrh	r1, [r2, #0]
 801f178:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801f17c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801f180:	3b01      	subs	r3, #1
 801f182:	fb06 bb07 	mla	fp, r6, r7, fp
 801f186:	b2db      	uxtb	r3, r3
 801f188:	930a      	str	r3, [sp, #40]	@ 0x28
 801f18a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801f18e:	fb01 2303 	mla	r3, r1, r3, r2
 801f192:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f196:	18c3      	adds	r3, r0, r3
 801f198:	9309      	str	r3, [sp, #36]	@ 0x24
 801f19a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f19c:	781a      	ldrb	r2, [r3, #0]
 801f19e:	4122      	asrs	r2, r4
 801f1a0:	b2d2      	uxtb	r2, r2
 801f1a2:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f1a6:	f0c0 80d7 	bcc.w	801f358 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801f1aa:	46be      	mov	lr, r7
 801f1ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f1ae:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801f1b2:	f0c0 80ba 	bcc.w	801f32a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801f1b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f1b8:	4013      	ands	r3, r2
 801f1ba:	d041      	beq.n	801f240 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801f1bc:	20ff      	movs	r0, #255	@ 0xff
 801f1be:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801f1c0:	fb90 f5f5 	sdiv	r5, r0, r5
 801f1c4:	436b      	muls	r3, r5
 801f1c6:	2bfe      	cmp	r3, #254	@ 0xfe
 801f1c8:	dd03      	ble.n	801f1d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801f1ca:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f1cc:	4285      	cmp	r5, r0
 801f1ce:	f000 80a5 	beq.w	801f31c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801f1d2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f1d4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f1d6:	fb15 f303 	smulbb	r3, r5, r3
 801f1da:	b29b      	uxth	r3, r3
 801f1dc:	1c5d      	adds	r5, r3, #1
 801f1de:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f1e2:	780d      	ldrb	r5, [r1, #0]
 801f1e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f1e8:	fa1f fc83 	uxth.w	ip, r3
 801f1ec:	43db      	mvns	r3, r3
 801f1ee:	fb10 f90c 	smulbb	r9, r0, ip
 801f1f2:	b2db      	uxtb	r3, r3
 801f1f4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f1f6:	fb05 9503 	mla	r5, r5, r3, r9
 801f1fa:	b2ad      	uxth	r5, r5
 801f1fc:	f105 0901 	add.w	r9, r5, #1
 801f200:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f204:	fb10 f90c 	smulbb	r9, r0, ip
 801f208:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f20a:	122d      	asrs	r5, r5, #8
 801f20c:	fb10 fc0c 	smulbb	ip, r0, ip
 801f210:	700d      	strb	r5, [r1, #0]
 801f212:	784d      	ldrb	r5, [r1, #1]
 801f214:	fb05 9503 	mla	r5, r5, r3, r9
 801f218:	b2ad      	uxth	r5, r5
 801f21a:	f105 0901 	add.w	r9, r5, #1
 801f21e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f222:	122d      	asrs	r5, r5, #8
 801f224:	704d      	strb	r5, [r1, #1]
 801f226:	788d      	ldrb	r5, [r1, #2]
 801f228:	fb05 cc03 	mla	ip, r5, r3, ip
 801f22c:	fa1f fc8c 	uxth.w	ip, ip
 801f230:	f10c 0301 	add.w	r3, ip, #1
 801f234:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f238:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f23c:	f881 c002 	strb.w	ip, [r1, #2]
 801f240:	4444      	add	r4, r8
 801f242:	4431      	add	r1, r6
 801f244:	b2a4      	uxth	r4, r4
 801f246:	2c07      	cmp	r4, #7
 801f248:	bf89      	itett	hi
 801f24a:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801f24c:	fa42 f208 	asrls.w	r2, r2, r8
 801f250:	2400      	movhi	r4, #0
 801f252:	785a      	ldrbhi	r2, [r3, #1]
 801f254:	bf8a      	itet	hi
 801f256:	3301      	addhi	r3, #1
 801f258:	b2d2      	uxtbls	r2, r2
 801f25a:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801f25c:	e7a7      	b.n	801f1ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f25e:	441e      	add	r6, r3
 801f260:	b236      	sxth	r6, r6
 801f262:	e6ed      	b.n	801f040 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f264:	f1b9 0f01 	cmp.w	r9, #1
 801f268:	f47f af28 	bne.w	801f0bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f26c:	f1bb 0f01 	cmp.w	fp, #1
 801f270:	f47f af24 	bne.w	801f0bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f274:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801f350 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801f278:	f8db 0000 	ldr.w	r0, [fp]
 801f27c:	6803      	ldr	r3, [r0, #0]
 801f27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f280:	4798      	blx	r3
 801f282:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801f286:	465a      	mov	r2, fp
 801f288:	d006      	beq.n	801f298 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801f28a:	f1b8 0f04 	cmp.w	r8, #4
 801f28e:	d141      	bne.n	801f314 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801f290:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f292:	3300      	adds	r3, #0
 801f294:	bf18      	it	ne
 801f296:	2301      	movne	r3, #1
 801f298:	0580      	lsls	r0, r0, #22
 801f29a:	d566      	bpl.n	801f36a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801f29c:	f1b8 0f08 	cmp.w	r8, #8
 801f2a0:	d163      	bne.n	801f36a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	bf0c      	ite	eq
 801f2a6:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801f2aa:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801f2ae:	2f00      	cmp	r7, #0
 801f2b0:	f47f af04 	bne.w	801f0bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f2b4:	2c00      	cmp	r4, #0
 801f2b6:	f47f af01 	bne.w	801f0bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2bc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f2be:	18f3      	adds	r3, r6, r3
 801f2c0:	4283      	cmp	r3, r0
 801f2c2:	f73f aefb 	bgt.w	801f0bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f2c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f2c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2ca:	4403      	add	r3, r0
 801f2cc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f2ce:	4283      	cmp	r3, r0
 801f2d0:	f73f aef4 	bgt.w	801f0bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f2d4:	f1b8 0f08 	cmp.w	r8, #8
 801f2d8:	6810      	ldr	r0, [r2, #0]
 801f2da:	f04f 0600 	mov.w	r6, #0
 801f2de:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801f2e2:	bf18      	it	ne
 801f2e4:	3501      	addne	r5, #1
 801f2e6:	6804      	ldr	r4, [r0, #0]
 801f2e8:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801f2ec:	bf18      	it	ne
 801f2ee:	f025 0501 	bicne.w	r5, r5, #1
 801f2f2:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801f2f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f2f8:	bf18      	it	ne
 801f2fa:	b2ad      	uxthne	r5, r5
 801f2fc:	9104      	str	r1, [sp, #16]
 801f2fe:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f300:	e9cd 5a00 	strd	r5, sl, [sp]
 801f304:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801f308:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801f30a:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801f30c:	47a0      	blx	r4
 801f30e:	b017      	add	sp, #92	@ 0x5c
 801f310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f314:	2300      	movs	r3, #0
 801f316:	e7bf      	b.n	801f298 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801f318:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f31a:	e724      	b.n	801f166 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801f31c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f31e:	700b      	strb	r3, [r1, #0]
 801f320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f322:	704b      	strb	r3, [r1, #1]
 801f324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f326:	708b      	strb	r3, [r1, #2]
 801f328:	e78a      	b.n	801f240 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801f32a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f32c:	b153      	cbz	r3, 801f344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801f32e:	441c      	add	r4, r3
 801f330:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f332:	b2a4      	uxth	r4, r4
 801f334:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801f338:	f004 0407 	and.w	r4, r4, #7
 801f33c:	781a      	ldrb	r2, [r3, #0]
 801f33e:	9326      	str	r3, [sp, #152]	@ 0x98
 801f340:	4122      	asrs	r2, r4
 801f342:	b2d2      	uxtb	r2, r2
 801f344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f346:	445b      	add	r3, fp
 801f348:	9309      	str	r3, [sp, #36]	@ 0x24
 801f34a:	e72a      	b.n	801f1a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801f34c:	24026410 	.word	0x24026410
 801f350:	24026418 	.word	0x24026418
 801f354:	24026412 	.word	0x24026412
 801f358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d1d7      	bne.n	801f30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f35e:	4b06      	ldr	r3, [pc, #24]	@ (801f378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801f360:	6818      	ldr	r0, [r3, #0]
 801f362:	6803      	ldr	r3, [r0, #0]
 801f364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f366:	4798      	blx	r3
 801f368:	e7d1      	b.n	801f30e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	f43f aea6 	beq.w	801f0bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801f374:	e79b      	b.n	801f2ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801f376:	bf00      	nop
 801f378:	24026418 	.word	0x24026418

0801f37c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f37c:	b538      	push	{r3, r4, r5, lr}
 801f37e:	4c15      	ldr	r4, [pc, #84]	@ (801f3d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f380:	4605      	mov	r5, r0
 801f382:	7823      	ldrb	r3, [r4, #0]
 801f384:	f3bf 8f5b 	dmb	ish
 801f388:	07da      	lsls	r2, r3, #31
 801f38a:	d40b      	bmi.n	801f3a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f38c:	4620      	mov	r0, r4
 801f38e:	f006 f8d8 	bl	8025542 <__cxa_guard_acquire>
 801f392:	b138      	cbz	r0, 801f3a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f394:	4620      	mov	r0, r4
 801f396:	f006 f8e0 	bl	802555a <__cxa_guard_release>
 801f39a:	4a0f      	ldr	r2, [pc, #60]	@ (801f3d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f39c:	490f      	ldr	r1, [pc, #60]	@ (801f3dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f39e:	4810      	ldr	r0, [pc, #64]	@ (801f3e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f3a0:	f006 f8c8 	bl	8025534 <__aeabi_atexit>
 801f3a4:	4c0f      	ldr	r4, [pc, #60]	@ (801f3e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f3a6:	7823      	ldrb	r3, [r4, #0]
 801f3a8:	f3bf 8f5b 	dmb	ish
 801f3ac:	07db      	lsls	r3, r3, #31
 801f3ae:	d40b      	bmi.n	801f3c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f3b0:	4620      	mov	r0, r4
 801f3b2:	f006 f8c6 	bl	8025542 <__cxa_guard_acquire>
 801f3b6:	b138      	cbz	r0, 801f3c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f3b8:	4620      	mov	r0, r4
 801f3ba:	f006 f8ce 	bl	802555a <__cxa_guard_release>
 801f3be:	4a06      	ldr	r2, [pc, #24]	@ (801f3d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f3c0:	4909      	ldr	r1, [pc, #36]	@ (801f3e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f3c2:	480a      	ldr	r0, [pc, #40]	@ (801f3ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f3c4:	f006 f8b6 	bl	8025534 <__aeabi_atexit>
 801f3c8:	4b05      	ldr	r3, [pc, #20]	@ (801f3e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f3ca:	616b      	str	r3, [r5, #20]
 801f3cc:	4b07      	ldr	r3, [pc, #28]	@ (801f3ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f3ce:	61ab      	str	r3, [r5, #24]
 801f3d0:	bd38      	pop	{r3, r4, r5, pc}
 801f3d2:	bf00      	nop
 801f3d4:	240264fc 	.word	0x240264fc
 801f3d8:	24000000 	.word	0x24000000
 801f3dc:	0801c66d 	.word	0x0801c66d
 801f3e0:	240000cc 	.word	0x240000cc
 801f3e4:	24026500 	.word	0x24026500
 801f3e8:	0801c66b 	.word	0x0801c66b
 801f3ec:	240000d0 	.word	0x240000d0

0801f3f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f3f0:	b538      	push	{r3, r4, r5, lr}
 801f3f2:	4c15      	ldr	r4, [pc, #84]	@ (801f448 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f3f4:	4605      	mov	r5, r0
 801f3f6:	7823      	ldrb	r3, [r4, #0]
 801f3f8:	f3bf 8f5b 	dmb	ish
 801f3fc:	07da      	lsls	r2, r3, #31
 801f3fe:	d40b      	bmi.n	801f418 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f400:	4620      	mov	r0, r4
 801f402:	f006 f89e 	bl	8025542 <__cxa_guard_acquire>
 801f406:	b138      	cbz	r0, 801f418 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f408:	4620      	mov	r0, r4
 801f40a:	f006 f8a6 	bl	802555a <__cxa_guard_release>
 801f40e:	4a0f      	ldr	r2, [pc, #60]	@ (801f44c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f410:	490f      	ldr	r1, [pc, #60]	@ (801f450 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f412:	4810      	ldr	r0, [pc, #64]	@ (801f454 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f414:	f006 f88e 	bl	8025534 <__aeabi_atexit>
 801f418:	4c0f      	ldr	r4, [pc, #60]	@ (801f458 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f41a:	7823      	ldrb	r3, [r4, #0]
 801f41c:	f3bf 8f5b 	dmb	ish
 801f420:	07db      	lsls	r3, r3, #31
 801f422:	d40b      	bmi.n	801f43c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f424:	4620      	mov	r0, r4
 801f426:	f006 f88c 	bl	8025542 <__cxa_guard_acquire>
 801f42a:	b138      	cbz	r0, 801f43c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f42c:	4620      	mov	r0, r4
 801f42e:	f006 f894 	bl	802555a <__cxa_guard_release>
 801f432:	4a06      	ldr	r2, [pc, #24]	@ (801f44c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f434:	4909      	ldr	r1, [pc, #36]	@ (801f45c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f436:	480a      	ldr	r0, [pc, #40]	@ (801f460 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f438:	f006 f87c 	bl	8025534 <__aeabi_atexit>
 801f43c:	4b05      	ldr	r3, [pc, #20]	@ (801f454 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f43e:	60eb      	str	r3, [r5, #12]
 801f440:	4b07      	ldr	r3, [pc, #28]	@ (801f460 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f442:	612b      	str	r3, [r5, #16]
 801f444:	bd38      	pop	{r3, r4, r5, pc}
 801f446:	bf00      	nop
 801f448:	240264dc 	.word	0x240264dc
 801f44c:	24000000 	.word	0x24000000
 801f450:	0801c671 	.word	0x0801c671
 801f454:	240000ac 	.word	0x240000ac
 801f458:	240264e0 	.word	0x240264e0
 801f45c:	0801c66f 	.word	0x0801c66f
 801f460:	240000b0 	.word	0x240000b0

0801f464 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801f464:	b510      	push	{r4, lr}
 801f466:	4604      	mov	r4, r0
 801f468:	f7ff ff88 	bl	801f37c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f46c:	4620      	mov	r0, r4
 801f46e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f472:	f7ff bfbd 	b.w	801f3f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f478 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f478:	b538      	push	{r3, r4, r5, lr}
 801f47a:	4c15      	ldr	r4, [pc, #84]	@ (801f4d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f47c:	4605      	mov	r5, r0
 801f47e:	7823      	ldrb	r3, [r4, #0]
 801f480:	f3bf 8f5b 	dmb	ish
 801f484:	07da      	lsls	r2, r3, #31
 801f486:	d40b      	bmi.n	801f4a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f488:	4620      	mov	r0, r4
 801f48a:	f006 f85a 	bl	8025542 <__cxa_guard_acquire>
 801f48e:	b138      	cbz	r0, 801f4a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f490:	4620      	mov	r0, r4
 801f492:	f006 f862 	bl	802555a <__cxa_guard_release>
 801f496:	4a0f      	ldr	r2, [pc, #60]	@ (801f4d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f498:	490f      	ldr	r1, [pc, #60]	@ (801f4d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f49a:	4810      	ldr	r0, [pc, #64]	@ (801f4dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f49c:	f006 f84a 	bl	8025534 <__aeabi_atexit>
 801f4a0:	4c0f      	ldr	r4, [pc, #60]	@ (801f4e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f4a2:	7823      	ldrb	r3, [r4, #0]
 801f4a4:	f3bf 8f5b 	dmb	ish
 801f4a8:	07db      	lsls	r3, r3, #31
 801f4aa:	d40b      	bmi.n	801f4c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f4ac:	4620      	mov	r0, r4
 801f4ae:	f006 f848 	bl	8025542 <__cxa_guard_acquire>
 801f4b2:	b138      	cbz	r0, 801f4c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f4b4:	4620      	mov	r0, r4
 801f4b6:	f006 f850 	bl	802555a <__cxa_guard_release>
 801f4ba:	4a06      	ldr	r2, [pc, #24]	@ (801f4d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f4bc:	4909      	ldr	r1, [pc, #36]	@ (801f4e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f4be:	480a      	ldr	r0, [pc, #40]	@ (801f4e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f4c0:	f006 f838 	bl	8025534 <__aeabi_atexit>
 801f4c4:	4b05      	ldr	r3, [pc, #20]	@ (801f4dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f4c6:	626b      	str	r3, [r5, #36]	@ 0x24
 801f4c8:	4b07      	ldr	r3, [pc, #28]	@ (801f4e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f4ca:	62ab      	str	r3, [r5, #40]	@ 0x28
 801f4cc:	bd38      	pop	{r3, r4, r5, pc}
 801f4ce:	bf00      	nop
 801f4d0:	24026504 	.word	0x24026504
 801f4d4:	24000000 	.word	0x24000000
 801f4d8:	0801c665 	.word	0x0801c665
 801f4dc:	240000d4 	.word	0x240000d4
 801f4e0:	24026508 	.word	0x24026508
 801f4e4:	0801c663 	.word	0x0801c663
 801f4e8:	240000d8 	.word	0x240000d8

0801f4ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f4ec:	b538      	push	{r3, r4, r5, lr}
 801f4ee:	4c15      	ldr	r4, [pc, #84]	@ (801f544 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f4f0:	4605      	mov	r5, r0
 801f4f2:	7823      	ldrb	r3, [r4, #0]
 801f4f4:	f3bf 8f5b 	dmb	ish
 801f4f8:	07da      	lsls	r2, r3, #31
 801f4fa:	d40b      	bmi.n	801f514 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f4fc:	4620      	mov	r0, r4
 801f4fe:	f006 f820 	bl	8025542 <__cxa_guard_acquire>
 801f502:	b138      	cbz	r0, 801f514 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f504:	4620      	mov	r0, r4
 801f506:	f006 f828 	bl	802555a <__cxa_guard_release>
 801f50a:	4a0f      	ldr	r2, [pc, #60]	@ (801f548 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f50c:	490f      	ldr	r1, [pc, #60]	@ (801f54c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f50e:	4810      	ldr	r0, [pc, #64]	@ (801f550 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f510:	f006 f810 	bl	8025534 <__aeabi_atexit>
 801f514:	4c0f      	ldr	r4, [pc, #60]	@ (801f554 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f516:	7823      	ldrb	r3, [r4, #0]
 801f518:	f3bf 8f5b 	dmb	ish
 801f51c:	07db      	lsls	r3, r3, #31
 801f51e:	d40b      	bmi.n	801f538 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f520:	4620      	mov	r0, r4
 801f522:	f006 f80e 	bl	8025542 <__cxa_guard_acquire>
 801f526:	b138      	cbz	r0, 801f538 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f528:	4620      	mov	r0, r4
 801f52a:	f006 f816 	bl	802555a <__cxa_guard_release>
 801f52e:	4a06      	ldr	r2, [pc, #24]	@ (801f548 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f530:	4909      	ldr	r1, [pc, #36]	@ (801f558 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f532:	480a      	ldr	r0, [pc, #40]	@ (801f55c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f534:	f005 fffe 	bl	8025534 <__aeabi_atexit>
 801f538:	4b05      	ldr	r3, [pc, #20]	@ (801f550 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f53a:	61eb      	str	r3, [r5, #28]
 801f53c:	4b07      	ldr	r3, [pc, #28]	@ (801f55c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f53e:	622b      	str	r3, [r5, #32]
 801f540:	bd38      	pop	{r3, r4, r5, pc}
 801f542:	bf00      	nop
 801f544:	240264e4 	.word	0x240264e4
 801f548:	24000000 	.word	0x24000000
 801f54c:	0801c669 	.word	0x0801c669
 801f550:	240000b4 	.word	0x240000b4
 801f554:	240264e8 	.word	0x240264e8
 801f558:	0801c667 	.word	0x0801c667
 801f55c:	240000b8 	.word	0x240000b8

0801f560 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f560:	b510      	push	{r4, lr}
 801f562:	4604      	mov	r4, r0
 801f564:	f7ff ff88 	bl	801f478 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f568:	4620      	mov	r0, r4
 801f56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f56e:	f7ff bfbd 	b.w	801f4ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f574 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f574:	b538      	push	{r3, r4, r5, lr}
 801f576:	4c15      	ldr	r4, [pc, #84]	@ (801f5cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f578:	4605      	mov	r5, r0
 801f57a:	7823      	ldrb	r3, [r4, #0]
 801f57c:	f3bf 8f5b 	dmb	ish
 801f580:	07da      	lsls	r2, r3, #31
 801f582:	d40b      	bmi.n	801f59c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f584:	4620      	mov	r0, r4
 801f586:	f005 ffdc 	bl	8025542 <__cxa_guard_acquire>
 801f58a:	b138      	cbz	r0, 801f59c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f58c:	4620      	mov	r0, r4
 801f58e:	f005 ffe4 	bl	802555a <__cxa_guard_release>
 801f592:	4a0f      	ldr	r2, [pc, #60]	@ (801f5d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f594:	490f      	ldr	r1, [pc, #60]	@ (801f5d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f596:	4810      	ldr	r0, [pc, #64]	@ (801f5d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f598:	f005 ffcc 	bl	8025534 <__aeabi_atexit>
 801f59c:	4c0f      	ldr	r4, [pc, #60]	@ (801f5dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f59e:	7823      	ldrb	r3, [r4, #0]
 801f5a0:	f3bf 8f5b 	dmb	ish
 801f5a4:	07db      	lsls	r3, r3, #31
 801f5a6:	d40b      	bmi.n	801f5c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f5a8:	4620      	mov	r0, r4
 801f5aa:	f005 ffca 	bl	8025542 <__cxa_guard_acquire>
 801f5ae:	b138      	cbz	r0, 801f5c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f5b0:	4620      	mov	r0, r4
 801f5b2:	f005 ffd2 	bl	802555a <__cxa_guard_release>
 801f5b6:	4a06      	ldr	r2, [pc, #24]	@ (801f5d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f5b8:	4909      	ldr	r1, [pc, #36]	@ (801f5e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f5ba:	480a      	ldr	r0, [pc, #40]	@ (801f5e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f5bc:	f005 ffba 	bl	8025534 <__aeabi_atexit>
 801f5c0:	4b05      	ldr	r3, [pc, #20]	@ (801f5d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f5c2:	636b      	str	r3, [r5, #52]	@ 0x34
 801f5c4:	4b07      	ldr	r3, [pc, #28]	@ (801f5e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f5c6:	63ab      	str	r3, [r5, #56]	@ 0x38
 801f5c8:	bd38      	pop	{r3, r4, r5, pc}
 801f5ca:	bf00      	nop
 801f5cc:	240264ec 	.word	0x240264ec
 801f5d0:	24000000 	.word	0x24000000
 801f5d4:	0801c65d 	.word	0x0801c65d
 801f5d8:	240000bc 	.word	0x240000bc
 801f5dc:	240264f0 	.word	0x240264f0
 801f5e0:	0801c65b 	.word	0x0801c65b
 801f5e4:	240000c0 	.word	0x240000c0

0801f5e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f5e8:	b538      	push	{r3, r4, r5, lr}
 801f5ea:	4c15      	ldr	r4, [pc, #84]	@ (801f640 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f5ec:	4605      	mov	r5, r0
 801f5ee:	7823      	ldrb	r3, [r4, #0]
 801f5f0:	f3bf 8f5b 	dmb	ish
 801f5f4:	07da      	lsls	r2, r3, #31
 801f5f6:	d40b      	bmi.n	801f610 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f5f8:	4620      	mov	r0, r4
 801f5fa:	f005 ffa2 	bl	8025542 <__cxa_guard_acquire>
 801f5fe:	b138      	cbz	r0, 801f610 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f600:	4620      	mov	r0, r4
 801f602:	f005 ffaa 	bl	802555a <__cxa_guard_release>
 801f606:	4a0f      	ldr	r2, [pc, #60]	@ (801f644 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f608:	490f      	ldr	r1, [pc, #60]	@ (801f648 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f60a:	4810      	ldr	r0, [pc, #64]	@ (801f64c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f60c:	f005 ff92 	bl	8025534 <__aeabi_atexit>
 801f610:	4c0f      	ldr	r4, [pc, #60]	@ (801f650 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f612:	7823      	ldrb	r3, [r4, #0]
 801f614:	f3bf 8f5b 	dmb	ish
 801f618:	07db      	lsls	r3, r3, #31
 801f61a:	d40b      	bmi.n	801f634 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f61c:	4620      	mov	r0, r4
 801f61e:	f005 ff90 	bl	8025542 <__cxa_guard_acquire>
 801f622:	b138      	cbz	r0, 801f634 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f624:	4620      	mov	r0, r4
 801f626:	f005 ff98 	bl	802555a <__cxa_guard_release>
 801f62a:	4a06      	ldr	r2, [pc, #24]	@ (801f644 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f62c:	4909      	ldr	r1, [pc, #36]	@ (801f654 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f62e:	480a      	ldr	r0, [pc, #40]	@ (801f658 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f630:	f005 ff80 	bl	8025534 <__aeabi_atexit>
 801f634:	4b05      	ldr	r3, [pc, #20]	@ (801f64c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f636:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801f638:	4b07      	ldr	r3, [pc, #28]	@ (801f658 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f63a:	632b      	str	r3, [r5, #48]	@ 0x30
 801f63c:	bd38      	pop	{r3, r4, r5, pc}
 801f63e:	bf00      	nop
 801f640:	240264c4 	.word	0x240264c4
 801f644:	24000000 	.word	0x24000000
 801f648:	0801c661 	.word	0x0801c661
 801f64c:	24000094 	.word	0x24000094
 801f650:	240264c8 	.word	0x240264c8
 801f654:	0801c65f 	.word	0x0801c65f
 801f658:	24000098 	.word	0x24000098

0801f65c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f65c:	b510      	push	{r4, lr}
 801f65e:	4604      	mov	r4, r0
 801f660:	f7ff ff88 	bl	801f574 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f664:	4620      	mov	r0, r4
 801f666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f66a:	f7ff bfbd 	b.w	801f5e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f670 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f670:	b538      	push	{r3, r4, r5, lr}
 801f672:	4c15      	ldr	r4, [pc, #84]	@ (801f6c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f674:	4605      	mov	r5, r0
 801f676:	7823      	ldrb	r3, [r4, #0]
 801f678:	f3bf 8f5b 	dmb	ish
 801f67c:	07da      	lsls	r2, r3, #31
 801f67e:	d40b      	bmi.n	801f698 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f680:	4620      	mov	r0, r4
 801f682:	f005 ff5e 	bl	8025542 <__cxa_guard_acquire>
 801f686:	b138      	cbz	r0, 801f698 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f688:	4620      	mov	r0, r4
 801f68a:	f005 ff66 	bl	802555a <__cxa_guard_release>
 801f68e:	4a0f      	ldr	r2, [pc, #60]	@ (801f6cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f690:	490f      	ldr	r1, [pc, #60]	@ (801f6d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f692:	4810      	ldr	r0, [pc, #64]	@ (801f6d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f694:	f005 ff4e 	bl	8025534 <__aeabi_atexit>
 801f698:	4c0f      	ldr	r4, [pc, #60]	@ (801f6d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f69a:	7823      	ldrb	r3, [r4, #0]
 801f69c:	f3bf 8f5b 	dmb	ish
 801f6a0:	07db      	lsls	r3, r3, #31
 801f6a2:	d40b      	bmi.n	801f6bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f6a4:	4620      	mov	r0, r4
 801f6a6:	f005 ff4c 	bl	8025542 <__cxa_guard_acquire>
 801f6aa:	b138      	cbz	r0, 801f6bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f6ac:	4620      	mov	r0, r4
 801f6ae:	f005 ff54 	bl	802555a <__cxa_guard_release>
 801f6b2:	4a06      	ldr	r2, [pc, #24]	@ (801f6cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f6b4:	4909      	ldr	r1, [pc, #36]	@ (801f6dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f6b6:	480a      	ldr	r0, [pc, #40]	@ (801f6e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f6b8:	f005 ff3c 	bl	8025534 <__aeabi_atexit>
 801f6bc:	4b05      	ldr	r3, [pc, #20]	@ (801f6d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f6be:	646b      	str	r3, [r5, #68]	@ 0x44
 801f6c0:	4b07      	ldr	r3, [pc, #28]	@ (801f6e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f6c2:	64ab      	str	r3, [r5, #72]	@ 0x48
 801f6c4:	bd38      	pop	{r3, r4, r5, pc}
 801f6c6:	bf00      	nop
 801f6c8:	240264f4 	.word	0x240264f4
 801f6cc:	24000000 	.word	0x24000000
 801f6d0:	0801c655 	.word	0x0801c655
 801f6d4:	240000c4 	.word	0x240000c4
 801f6d8:	240264f8 	.word	0x240264f8
 801f6dc:	0801c653 	.word	0x0801c653
 801f6e0:	240000c8 	.word	0x240000c8

0801f6e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f6e4:	b538      	push	{r3, r4, r5, lr}
 801f6e6:	4c15      	ldr	r4, [pc, #84]	@ (801f73c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f6e8:	4605      	mov	r5, r0
 801f6ea:	7823      	ldrb	r3, [r4, #0]
 801f6ec:	f3bf 8f5b 	dmb	ish
 801f6f0:	07da      	lsls	r2, r3, #31
 801f6f2:	d40b      	bmi.n	801f70c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f6f4:	4620      	mov	r0, r4
 801f6f6:	f005 ff24 	bl	8025542 <__cxa_guard_acquire>
 801f6fa:	b138      	cbz	r0, 801f70c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f6fc:	4620      	mov	r0, r4
 801f6fe:	f005 ff2c 	bl	802555a <__cxa_guard_release>
 801f702:	4a0f      	ldr	r2, [pc, #60]	@ (801f740 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f704:	490f      	ldr	r1, [pc, #60]	@ (801f744 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f706:	4810      	ldr	r0, [pc, #64]	@ (801f748 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f708:	f005 ff14 	bl	8025534 <__aeabi_atexit>
 801f70c:	4c0f      	ldr	r4, [pc, #60]	@ (801f74c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f70e:	7823      	ldrb	r3, [r4, #0]
 801f710:	f3bf 8f5b 	dmb	ish
 801f714:	07db      	lsls	r3, r3, #31
 801f716:	d40b      	bmi.n	801f730 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f718:	4620      	mov	r0, r4
 801f71a:	f005 ff12 	bl	8025542 <__cxa_guard_acquire>
 801f71e:	b138      	cbz	r0, 801f730 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f720:	4620      	mov	r0, r4
 801f722:	f005 ff1a 	bl	802555a <__cxa_guard_release>
 801f726:	4a06      	ldr	r2, [pc, #24]	@ (801f740 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f728:	4909      	ldr	r1, [pc, #36]	@ (801f750 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f72a:	480a      	ldr	r0, [pc, #40]	@ (801f754 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f72c:	f005 ff02 	bl	8025534 <__aeabi_atexit>
 801f730:	4b05      	ldr	r3, [pc, #20]	@ (801f748 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f732:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801f734:	4b07      	ldr	r3, [pc, #28]	@ (801f754 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f736:	642b      	str	r3, [r5, #64]	@ 0x40
 801f738:	bd38      	pop	{r3, r4, r5, pc}
 801f73a:	bf00      	nop
 801f73c:	240264d4 	.word	0x240264d4
 801f740:	24000000 	.word	0x24000000
 801f744:	0801c659 	.word	0x0801c659
 801f748:	240000a4 	.word	0x240000a4
 801f74c:	240264d8 	.word	0x240264d8
 801f750:	0801c657 	.word	0x0801c657
 801f754:	240000a8 	.word	0x240000a8

0801f758 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f758:	b510      	push	{r4, lr}
 801f75a:	4604      	mov	r4, r0
 801f75c:	f7ff ff88 	bl	801f670 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f760:	4620      	mov	r0, r4
 801f762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f766:	f7ff bfbd 	b.w	801f6e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f76c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f76c:	b538      	push	{r3, r4, r5, lr}
 801f76e:	4c15      	ldr	r4, [pc, #84]	@ (801f7c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f770:	4605      	mov	r5, r0
 801f772:	7823      	ldrb	r3, [r4, #0]
 801f774:	f3bf 8f5b 	dmb	ish
 801f778:	07da      	lsls	r2, r3, #31
 801f77a:	d40b      	bmi.n	801f794 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f77c:	4620      	mov	r0, r4
 801f77e:	f005 fee0 	bl	8025542 <__cxa_guard_acquire>
 801f782:	b138      	cbz	r0, 801f794 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f784:	4620      	mov	r0, r4
 801f786:	f005 fee8 	bl	802555a <__cxa_guard_release>
 801f78a:	4a0f      	ldr	r2, [pc, #60]	@ (801f7c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f78c:	490f      	ldr	r1, [pc, #60]	@ (801f7cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f78e:	4810      	ldr	r0, [pc, #64]	@ (801f7d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f790:	f005 fed0 	bl	8025534 <__aeabi_atexit>
 801f794:	4c0f      	ldr	r4, [pc, #60]	@ (801f7d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f796:	7823      	ldrb	r3, [r4, #0]
 801f798:	f3bf 8f5b 	dmb	ish
 801f79c:	07db      	lsls	r3, r3, #31
 801f79e:	d40b      	bmi.n	801f7b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f7a0:	4620      	mov	r0, r4
 801f7a2:	f005 fece 	bl	8025542 <__cxa_guard_acquire>
 801f7a6:	b138      	cbz	r0, 801f7b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f7a8:	4620      	mov	r0, r4
 801f7aa:	f005 fed6 	bl	802555a <__cxa_guard_release>
 801f7ae:	4a06      	ldr	r2, [pc, #24]	@ (801f7c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f7b0:	4909      	ldr	r1, [pc, #36]	@ (801f7d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f7b2:	480a      	ldr	r0, [pc, #40]	@ (801f7dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f7b4:	f005 febe 	bl	8025534 <__aeabi_atexit>
 801f7b8:	4b05      	ldr	r3, [pc, #20]	@ (801f7d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f7ba:	656b      	str	r3, [r5, #84]	@ 0x54
 801f7bc:	4b07      	ldr	r3, [pc, #28]	@ (801f7dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f7be:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f7c0:	bd38      	pop	{r3, r4, r5, pc}
 801f7c2:	bf00      	nop
 801f7c4:	240264cc 	.word	0x240264cc
 801f7c8:	24000000 	.word	0x24000000
 801f7cc:	0801c64d 	.word	0x0801c64d
 801f7d0:	2400009c 	.word	0x2400009c
 801f7d4:	240264d0 	.word	0x240264d0
 801f7d8:	0801c64b 	.word	0x0801c64b
 801f7dc:	240000a0 	.word	0x240000a0

0801f7e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f7e0:	b538      	push	{r3, r4, r5, lr}
 801f7e2:	4c15      	ldr	r4, [pc, #84]	@ (801f838 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f7e4:	4605      	mov	r5, r0
 801f7e6:	7823      	ldrb	r3, [r4, #0]
 801f7e8:	f3bf 8f5b 	dmb	ish
 801f7ec:	07da      	lsls	r2, r3, #31
 801f7ee:	d40b      	bmi.n	801f808 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f7f0:	4620      	mov	r0, r4
 801f7f2:	f005 fea6 	bl	8025542 <__cxa_guard_acquire>
 801f7f6:	b138      	cbz	r0, 801f808 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f7f8:	4620      	mov	r0, r4
 801f7fa:	f005 feae 	bl	802555a <__cxa_guard_release>
 801f7fe:	4a0f      	ldr	r2, [pc, #60]	@ (801f83c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f800:	490f      	ldr	r1, [pc, #60]	@ (801f840 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f802:	4810      	ldr	r0, [pc, #64]	@ (801f844 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f804:	f005 fe96 	bl	8025534 <__aeabi_atexit>
 801f808:	4c0f      	ldr	r4, [pc, #60]	@ (801f848 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f80a:	7823      	ldrb	r3, [r4, #0]
 801f80c:	f3bf 8f5b 	dmb	ish
 801f810:	07db      	lsls	r3, r3, #31
 801f812:	d40b      	bmi.n	801f82c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f814:	4620      	mov	r0, r4
 801f816:	f005 fe94 	bl	8025542 <__cxa_guard_acquire>
 801f81a:	b138      	cbz	r0, 801f82c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f81c:	4620      	mov	r0, r4
 801f81e:	f005 fe9c 	bl	802555a <__cxa_guard_release>
 801f822:	4a06      	ldr	r2, [pc, #24]	@ (801f83c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f824:	4909      	ldr	r1, [pc, #36]	@ (801f84c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f826:	480a      	ldr	r0, [pc, #40]	@ (801f850 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f828:	f005 fe84 	bl	8025534 <__aeabi_atexit>
 801f82c:	4b05      	ldr	r3, [pc, #20]	@ (801f844 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f82e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801f830:	4b07      	ldr	r3, [pc, #28]	@ (801f850 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f832:	652b      	str	r3, [r5, #80]	@ 0x50
 801f834:	bd38      	pop	{r3, r4, r5, pc}
 801f836:	bf00      	nop
 801f838:	240264bc 	.word	0x240264bc
 801f83c:	24000000 	.word	0x24000000
 801f840:	0801c651 	.word	0x0801c651
 801f844:	2400008c 	.word	0x2400008c
 801f848:	240264c0 	.word	0x240264c0
 801f84c:	0801c64f 	.word	0x0801c64f
 801f850:	24000090 	.word	0x24000090

0801f854 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f854:	b510      	push	{r4, lr}
 801f856:	4604      	mov	r4, r0
 801f858:	f7ff ff88 	bl	801f76c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f85c:	4620      	mov	r0, r4
 801f85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f862:	f7ff bfbd 	b.w	801f7e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f866 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f866:	b510      	push	{r4, lr}
 801f868:	4604      	mov	r4, r0
 801f86a:	f7ff fff3 	bl	801f854 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f86e:	4620      	mov	r0, r4
 801f870:	f7ff ff72 	bl	801f758 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f874:	4620      	mov	r0, r4
 801f876:	f7ff fe73 	bl	801f560 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f87a:	4620      	mov	r0, r4
 801f87c:	f7ff fdf2 	bl	801f464 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f880:	4620      	mov	r0, r4
 801f882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f886:	f7ff bee9 	b.w	801f65c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f88c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801f88c:	b538      	push	{r3, r4, r5, lr}
 801f88e:	4c0b      	ldr	r4, [pc, #44]	@ (801f8bc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801f890:	4605      	mov	r5, r0
 801f892:	7823      	ldrb	r3, [r4, #0]
 801f894:	f3bf 8f5b 	dmb	ish
 801f898:	07db      	lsls	r3, r3, #31
 801f89a:	d40b      	bmi.n	801f8b4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801f89c:	4620      	mov	r0, r4
 801f89e:	f005 fe50 	bl	8025542 <__cxa_guard_acquire>
 801f8a2:	b138      	cbz	r0, 801f8b4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801f8a4:	4620      	mov	r0, r4
 801f8a6:	f005 fe58 	bl	802555a <__cxa_guard_release>
 801f8aa:	4a05      	ldr	r2, [pc, #20]	@ (801f8c0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801f8ac:	4905      	ldr	r1, [pc, #20]	@ (801f8c4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801f8ae:	4806      	ldr	r0, [pc, #24]	@ (801f8c8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801f8b0:	f005 fe40 	bl	8025534 <__aeabi_atexit>
 801f8b4:	4b04      	ldr	r3, [pc, #16]	@ (801f8c8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801f8b6:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801f8b8:	bd38      	pop	{r3, r4, r5, pc}
 801f8ba:	bf00      	nop
 801f8bc:	240264b0 	.word	0x240264b0
 801f8c0:	24000000 	.word	0x24000000
 801f8c4:	0801c649 	.word	0x0801c649
 801f8c8:	24000084 	.word	0x24000084

0801f8cc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801f8cc:	b538      	push	{r3, r4, r5, lr}
 801f8ce:	4c0b      	ldr	r4, [pc, #44]	@ (801f8fc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801f8d0:	4605      	mov	r5, r0
 801f8d2:	7823      	ldrb	r3, [r4, #0]
 801f8d4:	f3bf 8f5b 	dmb	ish
 801f8d8:	07db      	lsls	r3, r3, #31
 801f8da:	d40b      	bmi.n	801f8f4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801f8dc:	4620      	mov	r0, r4
 801f8de:	f005 fe30 	bl	8025542 <__cxa_guard_acquire>
 801f8e2:	b138      	cbz	r0, 801f8f4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801f8e4:	4620      	mov	r0, r4
 801f8e6:	f005 fe38 	bl	802555a <__cxa_guard_release>
 801f8ea:	4a05      	ldr	r2, [pc, #20]	@ (801f900 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801f8ec:	4905      	ldr	r1, [pc, #20]	@ (801f904 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801f8ee:	4806      	ldr	r0, [pc, #24]	@ (801f908 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801f8f0:	f005 fe20 	bl	8025534 <__aeabi_atexit>
 801f8f4:	4b04      	ldr	r3, [pc, #16]	@ (801f908 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801f8f6:	662b      	str	r3, [r5, #96]	@ 0x60
 801f8f8:	bd38      	pop	{r3, r4, r5, pc}
 801f8fa:	bf00      	nop
 801f8fc:	240264b4 	.word	0x240264b4
 801f900:	24000000 	.word	0x24000000
 801f904:	0801c647 	.word	0x0801c647
 801f908:	24000088 	.word	0x24000088

0801f90c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801f90c:	b570      	push	{r4, r5, r6, lr}
 801f90e:	4d0c      	ldr	r5, [pc, #48]	@ (801f940 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801f910:	4606      	mov	r6, r0
 801f912:	4c0c      	ldr	r4, [pc, #48]	@ (801f944 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801f914:	782b      	ldrb	r3, [r5, #0]
 801f916:	f3bf 8f5b 	dmb	ish
 801f91a:	f013 0f01 	tst.w	r3, #1
 801f91e:	d10d      	bne.n	801f93c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801f920:	4628      	mov	r0, r5
 801f922:	f005 fe0e 	bl	8025542 <__cxa_guard_acquire>
 801f926:	b148      	cbz	r0, 801f93c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801f928:	4b07      	ldr	r3, [pc, #28]	@ (801f948 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801f92a:	4628      	mov	r0, r5
 801f92c:	6023      	str	r3, [r4, #0]
 801f92e:	f005 fe14 	bl	802555a <__cxa_guard_release>
 801f932:	4a06      	ldr	r2, [pc, #24]	@ (801f94c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801f934:	4620      	mov	r0, r4
 801f936:	4906      	ldr	r1, [pc, #24]	@ (801f950 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801f938:	f005 fdfc 	bl	8025534 <__aeabi_atexit>
 801f93c:	6674      	str	r4, [r6, #100]	@ 0x64
 801f93e:	bd70      	pop	{r4, r5, r6, pc}
 801f940:	240264b8 	.word	0x240264b8
 801f944:	24026610 	.word	0x24026610
 801f948:	0802a5bc 	.word	0x0802a5bc
 801f94c:	24000000 	.word	0x24000000
 801f950:	0801c645 	.word	0x0801c645

0801f954 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801f954:	b510      	push	{r4, lr}
 801f956:	4604      	mov	r4, r0
 801f958:	f7ff ff98 	bl	801f88c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801f95c:	4620      	mov	r0, r4
 801f95e:	f7ff ffb5 	bl	801f8cc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801f962:	4620      	mov	r0, r4
 801f964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f968:	f7ff bfd0 	b.w	801f90c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801f96c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801f96c:	b570      	push	{r4, r5, r6, lr}
 801f96e:	4d0c      	ldr	r5, [pc, #48]	@ (801f9a0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801f970:	4606      	mov	r6, r0
 801f972:	4c0c      	ldr	r4, [pc, #48]	@ (801f9a4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801f974:	782b      	ldrb	r3, [r5, #0]
 801f976:	f3bf 8f5b 	dmb	ish
 801f97a:	f013 0f01 	tst.w	r3, #1
 801f97e:	d10d      	bne.n	801f99c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801f980:	4628      	mov	r0, r5
 801f982:	f005 fdde 	bl	8025542 <__cxa_guard_acquire>
 801f986:	b148      	cbz	r0, 801f99c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801f988:	4b07      	ldr	r3, [pc, #28]	@ (801f9a8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801f98a:	4628      	mov	r0, r5
 801f98c:	6023      	str	r3, [r4, #0]
 801f98e:	f005 fde4 	bl	802555a <__cxa_guard_release>
 801f992:	4a06      	ldr	r2, [pc, #24]	@ (801f9ac <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801f994:	4620      	mov	r0, r4
 801f996:	4906      	ldr	r1, [pc, #24]	@ (801f9b0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801f998:	f005 fdcc 	bl	8025534 <__aeabi_atexit>
 801f99c:	66b4      	str	r4, [r6, #104]	@ 0x68
 801f99e:	bd70      	pop	{r4, r5, r6, pc}
 801f9a0:	240264ac 	.word	0x240264ac
 801f9a4:	2402650c 	.word	0x2402650c
 801f9a8:	0802a5d4 	.word	0x0802a5d4
 801f9ac:	24000000 	.word	0x24000000
 801f9b0:	0801c643 	.word	0x0801c643

0801f9b4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9b8:	b087      	sub	sp, #28
 801f9ba:	788d      	ldrb	r5, [r1, #2]
 801f9bc:	f891 9000 	ldrb.w	r9, [r1]
 801f9c0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f9c4:	9501      	str	r5, [sp, #4]
 801f9c6:	784d      	ldrb	r5, [r1, #1]
 801f9c8:	9203      	str	r2, [sp, #12]
 801f9ca:	9502      	str	r5, [sp, #8]
 801f9cc:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801f9d0:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801f9d4:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801f9d8:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801f9dc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801f9e0:	fb06 0708 	mla	r7, r6, r8, r0
 801f9e4:	2e00      	cmp	r6, #0
 801f9e6:	eb02 0a07 	add.w	sl, r2, r7
 801f9ea:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801f9ee:	9d01      	ldr	r5, [sp, #4]
 801f9f0:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801f9f4:	ea45 0509 	orr.w	r5, r5, r9
 801f9f8:	9505      	str	r5, [sp, #20]
 801f9fa:	f2c0 80b2 	blt.w	801fb62 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801f9fe:	45b3      	cmp	fp, r6
 801fa00:	f340 80af 	ble.w	801fb62 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801fa04:	2800      	cmp	r0, #0
 801fa06:	f2c0 80aa 	blt.w	801fb5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801fa0a:	4580      	cmp	r8, r0
 801fa0c:	f340 80a7 	ble.w	801fb5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801fa10:	9a03      	ldr	r2, [sp, #12]
 801fa12:	5dd7      	ldrb	r7, [r2, r7]
 801fa14:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fa18:	441f      	add	r7, r3
 801fa1a:	1c42      	adds	r2, r0, #1
 801fa1c:	f100 80a4 	bmi.w	801fb68 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801fa20:	4590      	cmp	r8, r2
 801fa22:	f340 80a1 	ble.w	801fb68 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801fa26:	2c00      	cmp	r4, #0
 801fa28:	f000 809e 	beq.w	801fb68 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801fa2c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801fa30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fa34:	441d      	add	r5, r3
 801fa36:	3601      	adds	r6, #1
 801fa38:	f100 809a 	bmi.w	801fb70 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801fa3c:	45b3      	cmp	fp, r6
 801fa3e:	f340 8097 	ble.w	801fb70 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801fa42:	f1bc 0f00 	cmp.w	ip, #0
 801fa46:	f000 8093 	beq.w	801fb70 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801fa4a:	2800      	cmp	r0, #0
 801fa4c:	f2c0 808e 	blt.w	801fb6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801fa50:	4580      	cmp	r8, r0
 801fa52:	f340 808b 	ble.w	801fb6c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801fa56:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801fa5a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fa5e:	441e      	add	r6, r3
 801fa60:	3001      	adds	r0, #1
 801fa62:	f100 8088 	bmi.w	801fb76 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801fa66:	4580      	cmp	r8, r0
 801fa68:	f340 8085 	ble.w	801fb76 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801fa6c:	2c00      	cmp	r4, #0
 801fa6e:	f000 8082 	beq.w	801fb76 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801fa72:	44d0      	add	r8, sl
 801fa74:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fa78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa7c:	4413      	add	r3, r2
 801fa7e:	b2a4      	uxth	r4, r4
 801fa80:	f895 a000 	ldrb.w	sl, [r5]
 801fa84:	fa1f fc8c 	uxth.w	ip, ip
 801fa88:	fb04 fb0c 	mul.w	fp, r4, ip
 801fa8c:	0124      	lsls	r4, r4, #4
 801fa8e:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801fa92:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801fa96:	eba4 040b 	sub.w	r4, r4, fp
 801fa9a:	fa1f f08c 	uxth.w	r0, ip
 801fa9e:	b2a2      	uxth	r2, r4
 801faa0:	783c      	ldrb	r4, [r7, #0]
 801faa2:	eba8 0800 	sub.w	r8, r8, r0
 801faa6:	fa1f fc8e 	uxth.w	ip, lr
 801faaa:	fb02 fa0a 	mul.w	sl, r2, sl
 801faae:	ea6f 0e0e 	mvn.w	lr, lr
 801fab2:	fa1f f888 	uxth.w	r8, r8
 801fab6:	fa5f fe8e 	uxtb.w	lr, lr
 801faba:	fb08 aa04 	mla	sl, r8, r4, sl
 801fabe:	7834      	ldrb	r4, [r6, #0]
 801fac0:	fb19 f90e 	smulbb	r9, r9, lr
 801fac4:	fb00 aa04 	mla	sl, r0, r4, sl
 801fac8:	781c      	ldrb	r4, [r3, #0]
 801faca:	fb0b a404 	mla	r4, fp, r4, sl
 801face:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fad2:	fb04 990c 	mla	r9, r4, ip, r9
 801fad6:	fa1f f989 	uxth.w	r9, r9
 801fada:	f109 0401 	add.w	r4, r9, #1
 801fade:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801fae2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fae6:	f881 9000 	strb.w	r9, [r1]
 801faea:	f895 9001 	ldrb.w	r9, [r5, #1]
 801faee:	787c      	ldrb	r4, [r7, #1]
 801faf0:	fb02 f909 	mul.w	r9, r2, r9
 801faf4:	fb08 9904 	mla	r9, r8, r4, r9
 801faf8:	7874      	ldrb	r4, [r6, #1]
 801fafa:	fb00 9904 	mla	r9, r0, r4, r9
 801fafe:	785c      	ldrb	r4, [r3, #1]
 801fb00:	fb0b 9404 	mla	r4, fp, r4, r9
 801fb04:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801fb08:	9c02      	ldr	r4, [sp, #8]
 801fb0a:	fb14 f90e 	smulbb	r9, r4, lr
 801fb0e:	fb0a 940c 	mla	r4, sl, ip, r9
 801fb12:	b2a4      	uxth	r4, r4
 801fb14:	f104 0901 	add.w	r9, r4, #1
 801fb18:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801fb1c:	1224      	asrs	r4, r4, #8
 801fb1e:	704c      	strb	r4, [r1, #1]
 801fb20:	78ad      	ldrb	r5, [r5, #2]
 801fb22:	78bc      	ldrb	r4, [r7, #2]
 801fb24:	436a      	muls	r2, r5
 801fb26:	789b      	ldrb	r3, [r3, #2]
 801fb28:	fb08 2204 	mla	r2, r8, r4, r2
 801fb2c:	78b4      	ldrb	r4, [r6, #2]
 801fb2e:	fb00 2004 	mla	r0, r0, r4, r2
 801fb32:	fb0b 0b03 	mla	fp, fp, r3, r0
 801fb36:	9b01      	ldr	r3, [sp, #4]
 801fb38:	fb13 fe0e 	smulbb	lr, r3, lr
 801fb3c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801fb40:	fb0b ec0c 	mla	ip, fp, ip, lr
 801fb44:	fa1f fc8c 	uxth.w	ip, ip
 801fb48:	f10c 0e01 	add.w	lr, ip, #1
 801fb4c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801fb50:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fb54:	f881 c002 	strb.w	ip, [r1, #2]
 801fb58:	b007      	add	sp, #28
 801fb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb5e:	af05      	add	r7, sp, #20
 801fb60:	e75b      	b.n	801fa1a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801fb62:	ad05      	add	r5, sp, #20
 801fb64:	462f      	mov	r7, r5
 801fb66:	e766      	b.n	801fa36 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801fb68:	ad05      	add	r5, sp, #20
 801fb6a:	e764      	b.n	801fa36 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801fb6c:	ae05      	add	r6, sp, #20
 801fb6e:	e777      	b.n	801fa60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801fb70:	ab05      	add	r3, sp, #20
 801fb72:	461e      	mov	r6, r3
 801fb74:	e783      	b.n	801fa7e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801fb76:	ab05      	add	r3, sp, #20
 801fb78:	e781      	b.n	801fa7e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801fb7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb7e:	b093      	sub	sp, #76	@ 0x4c
 801fb80:	9210      	str	r2, [sp, #64]	@ 0x40
 801fb82:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb84:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801fb86:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801fb8a:	9011      	str	r0, [sp, #68]	@ 0x44
 801fb8c:	930e      	str	r3, [sp, #56]	@ 0x38
 801fb8e:	6850      	ldr	r0, [r2, #4]
 801fb90:	910d      	str	r1, [sp, #52]	@ 0x34
 801fb92:	6812      	ldr	r2, [r2, #0]
 801fb94:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801fb98:	fb00 1303 	mla	r3, r0, r3, r1
 801fb9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fba0:	18d3      	adds	r3, r2, r3
 801fba2:	930a      	str	r3, [sp, #40]	@ 0x28
 801fba4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	930c      	str	r3, [sp, #48]	@ 0x30
 801fbaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fbac:	685c      	ldr	r4, [r3, #4]
 801fbae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fbb0:	3404      	adds	r4, #4
 801fbb2:	43db      	mvns	r3, r3
 801fbb4:	b2db      	uxtb	r3, r3
 801fbb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fbb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	dc03      	bgt.n	801fbc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fbbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	f340 8250 	ble.w	8020066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801fbc6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fbc8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fbcc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fbd0:	1e48      	subs	r0, r1, #1
 801fbd2:	1e55      	subs	r5, r2, #1
 801fbd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	f340 80ee 	ble.w	801fdb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801fbdc:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801fbde:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fbe0:	1436      	asrs	r6, r6, #16
 801fbe2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fbe6:	d406      	bmi.n	801fbf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fbe8:	4286      	cmp	r6, r0
 801fbea:	da04      	bge.n	801fbf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	db02      	blt.n	801fbf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fbf0:	42ab      	cmp	r3, r5
 801fbf2:	f2c0 80e2 	blt.w	801fdba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801fbf6:	3601      	adds	r6, #1
 801fbf8:	f100 80cf 	bmi.w	801fd9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801fbfc:	42b1      	cmp	r1, r6
 801fbfe:	f2c0 80cc 	blt.w	801fd9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801fc02:	3301      	adds	r3, #1
 801fc04:	f100 80c9 	bmi.w	801fd9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801fc08:	429a      	cmp	r2, r3
 801fc0a:	f2c0 80c6 	blt.w	801fd9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801fc0e:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801fc12:	f1bb 0f00 	cmp.w	fp, #0
 801fc16:	f340 80f1 	ble.w	801fdfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801fc1a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fc1c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801fc1e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801fc20:	141d      	asrs	r5, r3, #16
 801fc22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fc24:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fc28:	68c7      	ldr	r7, [r0, #12]
 801fc2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fc2c:	1418      	asrs	r0, r3, #16
 801fc2e:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801fc32:	6892      	ldr	r2, [r2, #8]
 801fc34:	f100 8137 	bmi.w	801fea6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801fc38:	f102 3cff 	add.w	ip, r2, #4294967295
 801fc3c:	4560      	cmp	r0, ip
 801fc3e:	f280 8132 	bge.w	801fea6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801fc42:	2d00      	cmp	r5, #0
 801fc44:	f2c0 812f 	blt.w	801fea6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801fc48:	f107 3cff 	add.w	ip, r7, #4294967295
 801fc4c:	4565      	cmp	r5, ip
 801fc4e:	f280 812a 	bge.w	801fea6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801fc52:	b212      	sxth	r2, r2
 801fc54:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801fc56:	fb05 0002 	mla	r0, r5, r2, r0
 801fc5a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801fc5c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801fc60:	4405      	add	r5, r0
 801fc62:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fc66:	eb04 0e0c 	add.w	lr, r4, ip
 801fc6a:	f1b8 0f00 	cmp.w	r8, #0
 801fc6e:	f000 810c 	beq.w	801fe8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801fc72:	786f      	ldrb	r7, [r5, #1]
 801fc74:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fc78:	4427      	add	r7, r4
 801fc7a:	2900      	cmp	r1, #0
 801fc7c:	f000 810d 	beq.w	801fe9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801fc80:	18a8      	adds	r0, r5, r2
 801fc82:	5caa      	ldrb	r2, [r5, r2]
 801fc84:	7840      	ldrb	r0, [r0, #1]
 801fc86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fc8e:	4422      	add	r2, r4
 801fc90:	4420      	add	r0, r4
 801fc92:	fa1f f388 	uxth.w	r3, r8
 801fc96:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801fc9a:	b289      	uxth	r1, r1
 801fc9c:	f897 c000 	ldrb.w	ip, [r7]
 801fca0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801fca4:	fb03 f901 	mul.w	r9, r3, r1
 801fca8:	011b      	lsls	r3, r3, #4
 801fcaa:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fcae:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801fcb2:	eba3 0309 	sub.w	r3, r3, r9
 801fcb6:	b289      	uxth	r1, r1
 801fcb8:	b29b      	uxth	r3, r3
 801fcba:	eba8 0801 	sub.w	r8, r8, r1
 801fcbe:	fb03 fc0c 	mul.w	ip, r3, ip
 801fcc2:	fa1f f888 	uxth.w	r8, r8
 801fcc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fcc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fcca:	fb08 cc0a 	mla	ip, r8, sl, ip
 801fcce:	f892 a000 	ldrb.w	sl, [r2]
 801fcd2:	fb01 cc0a 	mla	ip, r1, sl, ip
 801fcd6:	f890 a000 	ldrb.w	sl, [r0]
 801fcda:	fb09 cc0a 	mla	ip, r9, sl, ip
 801fcde:	f896 a000 	ldrb.w	sl, [r6]
 801fce2:	fb1a fa03 	smulbb	sl, sl, r3
 801fce6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fcea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fcec:	fb0c ac05 	mla	ip, ip, r5, sl
 801fcf0:	fa1f fc8c 	uxth.w	ip, ip
 801fcf4:	f10c 0a01 	add.w	sl, ip, #1
 801fcf8:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801fcfc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fd00:	f886 a000 	strb.w	sl, [r6]
 801fd04:	f897 c001 	ldrb.w	ip, [r7, #1]
 801fd08:	f89e a001 	ldrb.w	sl, [lr, #1]
 801fd0c:	fb03 fc0c 	mul.w	ip, r3, ip
 801fd10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fd12:	fb08 cc0a 	mla	ip, r8, sl, ip
 801fd16:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fd1a:	fb01 cc0a 	mla	ip, r1, sl, ip
 801fd1e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fd22:	fb09 cc0a 	mla	ip, r9, sl, ip
 801fd26:	f896 a001 	ldrb.w	sl, [r6, #1]
 801fd2a:	fb1a fa03 	smulbb	sl, sl, r3
 801fd2e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801fd32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fd34:	fb0c ac05 	mla	ip, ip, r5, sl
 801fd38:	fa1f fc8c 	uxth.w	ip, ip
 801fd3c:	f10c 0a01 	add.w	sl, ip, #1
 801fd40:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801fd44:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fd48:	f886 c001 	strb.w	ip, [r6, #1]
 801fd4c:	78bf      	ldrb	r7, [r7, #2]
 801fd4e:	f89e c002 	ldrb.w	ip, [lr, #2]
 801fd52:	437b      	muls	r3, r7
 801fd54:	fb08 330c 	mla	r3, r8, ip, r3
 801fd58:	f892 c002 	ldrb.w	ip, [r2, #2]
 801fd5c:	7882      	ldrb	r2, [r0, #2]
 801fd5e:	fb01 310c 	mla	r1, r1, ip, r3
 801fd62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fd64:	fb09 1902 	mla	r9, r9, r2, r1
 801fd68:	78b1      	ldrb	r1, [r6, #2]
 801fd6a:	fb11 f103 	smulbb	r1, r1, r3
 801fd6e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801fd72:	fb09 1505 	mla	r5, r9, r5, r1
 801fd76:	b2ad      	uxth	r5, r5
 801fd78:	1c6b      	adds	r3, r5, #1
 801fd7a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fd7e:	122d      	asrs	r5, r5, #8
 801fd80:	70b5      	strb	r5, [r6, #2]
 801fd82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fd84:	3603      	adds	r6, #3
 801fd86:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801fd88:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fd8c:	4413      	add	r3, r2
 801fd8e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801fd90:	931d      	str	r3, [sp, #116]	@ 0x74
 801fd92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fd94:	4413      	add	r3, r2
 801fd96:	931e      	str	r3, [sp, #120]	@ 0x78
 801fd98:	e73b      	b.n	801fc12 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fd9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fd9c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801fd9e:	4433      	add	r3, r6
 801fda0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801fda2:	931d      	str	r3, [sp, #116]	@ 0x74
 801fda4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fda6:	4433      	add	r3, r6
 801fda8:	931e      	str	r3, [sp, #120]	@ 0x78
 801fdaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdac:	3b01      	subs	r3, #1
 801fdae:	9309      	str	r3, [sp, #36]	@ 0x24
 801fdb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fdb2:	3303      	adds	r3, #3
 801fdb4:	930a      	str	r3, [sp, #40]	@ 0x28
 801fdb6:	e70d      	b.n	801fbd4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fdb8:	d028      	beq.n	801fe0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801fdba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdbc:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801fdbe:	3b01      	subs	r3, #1
 801fdc0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801fdc2:	fb00 5003 	mla	r0, r0, r3, r5
 801fdc6:	1400      	asrs	r0, r0, #16
 801fdc8:	f53f af21 	bmi.w	801fc0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fdcc:	3901      	subs	r1, #1
 801fdce:	4288      	cmp	r0, r1
 801fdd0:	f6bf af1d 	bge.w	801fc0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fdd4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801fdd6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801fdd8:	fb01 0303 	mla	r3, r1, r3, r0
 801fddc:	141b      	asrs	r3, r3, #16
 801fdde:	f53f af16 	bmi.w	801fc0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fde2:	3a01      	subs	r2, #1
 801fde4:	4293      	cmp	r3, r2
 801fde6:	f6bf af12 	bge.w	801fc0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fdea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fdec:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801fdf0:	1cdf      	adds	r7, r3, #3
 801fdf2:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801fdf6:	f1b9 0f00 	cmp.w	r9, #0
 801fdfa:	dc73      	bgt.n	801fee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801fdfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fe00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe08:	441a      	add	r2, r3
 801fe0a:	920a      	str	r2, [sp, #40]	@ 0x28
 801fe0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	f340 8129 	ble.w	8020066 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801fe14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fe18:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fe1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe22:	eef0 6a62 	vmov.f32	s13, s5
 801fe26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fe2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe32:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801fe36:	eef0 6a43 	vmov.f32	s13, s6
 801fe3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe3e:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801fe42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe46:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe5a:	ee12 2a90 	vmov	r2, s5
 801fe5e:	eef0 2a47 	vmov.f32	s5, s14
 801fe62:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe66:	ee13 2a10 	vmov	r2, s6
 801fe6a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801fe6c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fe6e:	eeb0 3a67 	vmov.f32	s6, s15
 801fe72:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe76:	9320      	str	r3, [sp, #128]	@ 0x80
 801fe78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fe7a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fe7c:	3b01      	subs	r3, #1
 801fe7e:	930d      	str	r3, [sp, #52]	@ 0x34
 801fe80:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fe82:	bf08      	it	eq
 801fe84:	4613      	moveq	r3, r2
 801fe86:	9309      	str	r3, [sp, #36]	@ 0x24
 801fe88:	e696      	b.n	801fbb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fe8a:	b149      	cbz	r1, 801fea0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801fe8c:	5caa      	ldrb	r2, [r5, r2]
 801fe8e:	4670      	mov	r0, lr
 801fe90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe94:	4422      	add	r2, r4
 801fe96:	4677      	mov	r7, lr
 801fe98:	e6fb      	b.n	801fc92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fe9a:	4670      	mov	r0, lr
 801fe9c:	4672      	mov	r2, lr
 801fe9e:	e6f8      	b.n	801fc92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fea0:	4670      	mov	r0, lr
 801fea2:	4672      	mov	r2, lr
 801fea4:	e7f7      	b.n	801fe96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801fea6:	f110 0c01 	adds.w	ip, r0, #1
 801feaa:	f53f af6a 	bmi.w	801fd82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801feae:	4562      	cmp	r2, ip
 801feb0:	f6ff af67 	blt.w	801fd82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801feb4:	f115 0c01 	adds.w	ip, r5, #1
 801feb8:	f53f af63 	bmi.w	801fd82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801febc:	4567      	cmp	r7, ip
 801febe:	f6ff af60 	blt.w	801fd82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fec4:	b23f      	sxth	r7, r7
 801fec6:	b212      	sxth	r2, r2
 801fec8:	9002      	str	r0, [sp, #8]
 801feca:	9701      	str	r7, [sp, #4]
 801fecc:	9200      	str	r2, [sp, #0]
 801fece:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fed0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fed2:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801fed6:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801feda:	4623      	mov	r3, r4
 801fedc:	4631      	mov	r1, r6
 801fede:	f7ff fd69 	bl	801f9b4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801fee2:	e74e      	b.n	801fd82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fee4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801fee6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801fee8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801feec:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801feee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fef0:	1400      	asrs	r0, r0, #16
 801fef2:	142d      	asrs	r5, r5, #16
 801fef4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fef6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fefa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fefe:	fb02 5000 	mla	r0, r2, r0, r5
 801ff02:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ff04:	f815 e000 	ldrb.w	lr, [r5, r0]
 801ff08:	eb05 0c00 	add.w	ip, r5, r0
 801ff0c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ff10:	eb04 060e 	add.w	r6, r4, lr
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	f000 8097 	beq.w	8020048 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801ff1a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ff1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ff22:	4425      	add	r5, r4
 801ff24:	2900      	cmp	r1, #0
 801ff26:	f000 8098 	beq.w	802005a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801ff2a:	eb0c 0002 	add.w	r0, ip, r2
 801ff2e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ff32:	7840      	ldrb	r0, [r0, #1]
 801ff34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ff38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ff3c:	4422      	add	r2, r4
 801ff3e:	4420      	add	r0, r4
 801ff40:	b29b      	uxth	r3, r3
 801ff42:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ff46:	b289      	uxth	r1, r1
 801ff48:	f895 e000 	ldrb.w	lr, [r5]
 801ff4c:	3703      	adds	r7, #3
 801ff4e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ff52:	fb03 f801 	mul.w	r8, r3, r1
 801ff56:	011b      	lsls	r3, r3, #4
 801ff58:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ff5c:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801ff60:	eba3 0308 	sub.w	r3, r3, r8
 801ff64:	b289      	uxth	r1, r1
 801ff66:	b29b      	uxth	r3, r3
 801ff68:	ebac 0c01 	sub.w	ip, ip, r1
 801ff6c:	fb03 fe0e 	mul.w	lr, r3, lr
 801ff70:	fa1f fc8c 	uxth.w	ip, ip
 801ff74:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ff76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ff78:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ff7c:	f892 b000 	ldrb.w	fp, [r2]
 801ff80:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ff84:	f890 b000 	ldrb.w	fp, [r0]
 801ff88:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ff8c:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ff90:	fb1b fb03 	smulbb	fp, fp, r3
 801ff94:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ff98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff9a:	fb0e be0a 	mla	lr, lr, sl, fp
 801ff9e:	fa1f fe8e 	uxth.w	lr, lr
 801ffa2:	f10e 0b01 	add.w	fp, lr, #1
 801ffa6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ffaa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ffae:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ffb2:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ffb6:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ffba:	fb03 fe0e 	mul.w	lr, r3, lr
 801ffbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ffc0:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ffc4:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ffc8:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ffcc:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ffd0:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ffd4:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ffd8:	fb1b fb03 	smulbb	fp, fp, r3
 801ffdc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ffe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ffe2:	fb0e be0a 	mla	lr, lr, sl, fp
 801ffe6:	fa1f fe8e 	uxth.w	lr, lr
 801ffea:	f10e 0b01 	add.w	fp, lr, #1
 801ffee:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fff2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fff6:	f807 ec05 	strb.w	lr, [r7, #-5]
 801fffa:	78ad      	ldrb	r5, [r5, #2]
 801fffc:	78b6      	ldrb	r6, [r6, #2]
 801fffe:	436b      	muls	r3, r5
 8020000:	7895      	ldrb	r5, [r2, #2]
 8020002:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020004:	fb0c 3306 	mla	r3, ip, r6, r3
 8020008:	fb01 3305 	mla	r3, r1, r5, r3
 802000c:	7885      	ldrb	r5, [r0, #2]
 802000e:	fb08 3805 	mla	r8, r8, r5, r3
 8020012:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8020016:	fb13 f302 	smulbb	r3, r3, r2
 802001a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802001e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8020020:	fb08 380a 	mla	r8, r8, sl, r3
 8020024:	fa1f f888 	uxth.w	r8, r8
 8020028:	f108 0301 	add.w	r3, r8, #1
 802002c:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8020030:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020032:	4413      	add	r3, r2
 8020034:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8020036:	ea4f 2828 	mov.w	r8, r8, asr #8
 802003a:	931d      	str	r3, [sp, #116]	@ 0x74
 802003c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802003e:	f807 8c04 	strb.w	r8, [r7, #-4]
 8020042:	4413      	add	r3, r2
 8020044:	931e      	str	r3, [sp, #120]	@ 0x78
 8020046:	e6d6      	b.n	801fdf6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020048:	b151      	cbz	r1, 8020060 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802004a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802004e:	4630      	mov	r0, r6
 8020050:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020054:	4422      	add	r2, r4
 8020056:	4635      	mov	r5, r6
 8020058:	e772      	b.n	801ff40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 802005a:	4630      	mov	r0, r6
 802005c:	4632      	mov	r2, r6
 802005e:	e76f      	b.n	801ff40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8020060:	4630      	mov	r0, r6
 8020062:	4632      	mov	r2, r6
 8020064:	e7f7      	b.n	8020056 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020066:	b013      	add	sp, #76	@ 0x4c
 8020068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802006c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 802006c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8020070:	784c      	ldrb	r4, [r1, #1]
 8020072:	f891 a002 	ldrb.w	sl, [r1, #2]
 8020076:	0224      	lsls	r4, r4, #8
 8020078:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 802007c:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 8020080:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020084:	f891 a000 	ldrb.w	sl, [r1]
 8020088:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 802008c:	ea44 040a 	orr.w	r4, r4, sl
 8020090:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8020094:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 8020098:	9401      	str	r4, [sp, #4]
 802009a:	fb05 c70e 	mla	r7, r5, lr, ip
 802009e:	2d00      	cmp	r5, #0
 80200a0:	eb02 0807 	add.w	r8, r2, r7
 80200a4:	db72      	blt.n	802018c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80200a6:	45a9      	cmp	r9, r5
 80200a8:	dd70      	ble.n	802018c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80200aa:	f1bc 0f00 	cmp.w	ip, #0
 80200ae:	db6b      	blt.n	8020188 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80200b0:	45e6      	cmp	lr, ip
 80200b2:	dd69      	ble.n	8020188 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80200b4:	5dd7      	ldrb	r7, [r2, r7]
 80200b6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80200ba:	441f      	add	r7, r3
 80200bc:	f11c 0201 	adds.w	r2, ip, #1
 80200c0:	d467      	bmi.n	8020192 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80200c2:	4596      	cmp	lr, r2
 80200c4:	dd65      	ble.n	8020192 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80200c6:	2800      	cmp	r0, #0
 80200c8:	d063      	beq.n	8020192 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80200ca:	f898 4001 	ldrb.w	r4, [r8, #1]
 80200ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80200d2:	441c      	add	r4, r3
 80200d4:	3501      	adds	r5, #1
 80200d6:	d460      	bmi.n	802019a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80200d8:	45a9      	cmp	r9, r5
 80200da:	dd5e      	ble.n	802019a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80200dc:	2e00      	cmp	r6, #0
 80200de:	d05c      	beq.n	802019a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80200e0:	f1bc 0f00 	cmp.w	ip, #0
 80200e4:	db57      	blt.n	8020196 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80200e6:	45e6      	cmp	lr, ip
 80200e8:	dd55      	ble.n	8020196 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80200ea:	f818 500e 	ldrb.w	r5, [r8, lr]
 80200ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80200f2:	441d      	add	r5, r3
 80200f4:	f11c 0201 	adds.w	r2, ip, #1
 80200f8:	d452      	bmi.n	80201a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80200fa:	4596      	cmp	lr, r2
 80200fc:	dd50      	ble.n	80201a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80200fe:	2800      	cmp	r0, #0
 8020100:	d04e      	beq.n	80201a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8020102:	44c6      	add	lr, r8
 8020104:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020108:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802010c:	4413      	add	r3, r2
 802010e:	b280      	uxth	r0, r0
 8020110:	f897 8000 	ldrb.w	r8, [r7]
 8020114:	b2b2      	uxth	r2, r6
 8020116:	fb00 f602 	mul.w	r6, r0, r2
 802011a:	0100      	lsls	r0, r0, #4
 802011c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8020120:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8020124:	1b80      	subs	r0, r0, r6
 8020126:	fa1f fc82 	uxth.w	ip, r2
 802012a:	b282      	uxth	r2, r0
 802012c:	7820      	ldrb	r0, [r4, #0]
 802012e:	ebae 0e0c 	sub.w	lr, lr, ip
 8020132:	4350      	muls	r0, r2
 8020134:	fa1f fe8e 	uxth.w	lr, lr
 8020138:	fb0e 0808 	mla	r8, lr, r8, r0
 802013c:	7828      	ldrb	r0, [r5, #0]
 802013e:	fb0c 8800 	mla	r8, ip, r0, r8
 8020142:	7818      	ldrb	r0, [r3, #0]
 8020144:	fb06 8000 	mla	r0, r6, r0, r8
 8020148:	1200      	asrs	r0, r0, #8
 802014a:	7008      	strb	r0, [r1, #0]
 802014c:	7860      	ldrb	r0, [r4, #1]
 802014e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020152:	4350      	muls	r0, r2
 8020154:	fb0e 0808 	mla	r8, lr, r8, r0
 8020158:	7868      	ldrb	r0, [r5, #1]
 802015a:	fb0c 8800 	mla	r8, ip, r0, r8
 802015e:	7858      	ldrb	r0, [r3, #1]
 8020160:	fb06 8000 	mla	r0, r6, r0, r8
 8020164:	1200      	asrs	r0, r0, #8
 8020166:	7048      	strb	r0, [r1, #1]
 8020168:	78a0      	ldrb	r0, [r4, #2]
 802016a:	78bf      	ldrb	r7, [r7, #2]
 802016c:	4350      	muls	r0, r2
 802016e:	78aa      	ldrb	r2, [r5, #2]
 8020170:	fb0e 0007 	mla	r0, lr, r7, r0
 8020174:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020178:	789a      	ldrb	r2, [r3, #2]
 802017a:	fb06 c202 	mla	r2, r6, r2, ip
 802017e:	1212      	asrs	r2, r2, #8
 8020180:	708a      	strb	r2, [r1, #2]
 8020182:	b002      	add	sp, #8
 8020184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020188:	af01      	add	r7, sp, #4
 802018a:	e797      	b.n	80200bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 802018c:	ac01      	add	r4, sp, #4
 802018e:	4627      	mov	r7, r4
 8020190:	e7a0      	b.n	80200d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020192:	ac01      	add	r4, sp, #4
 8020194:	e79e      	b.n	80200d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020196:	ad01      	add	r5, sp, #4
 8020198:	e7ac      	b.n	80200f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 802019a:	ab01      	add	r3, sp, #4
 802019c:	461d      	mov	r5, r3
 802019e:	e7b6      	b.n	802010e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80201a0:	ab01      	add	r3, sp, #4
 80201a2:	e7b4      	b.n	802010e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080201a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a8:	b08d      	sub	sp, #52	@ 0x34
 80201aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80201ae:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 80201b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80201b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80201b6:	9306      	str	r3, [sp, #24]
 80201b8:	6850      	ldr	r0, [r2, #4]
 80201ba:	6812      	ldr	r2, [r2, #0]
 80201bc:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80201be:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 80201c2:	fb00 1303 	mla	r3, r0, r3, r1
 80201c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201ca:	18d3      	adds	r3, r2, r3
 80201cc:	9307      	str	r3, [sp, #28]
 80201ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	9308      	str	r3, [sp, #32]
 80201d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80201d6:	685d      	ldr	r5, [r3, #4]
 80201d8:	3504      	adds	r5, #4
 80201da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201dc:	2b00      	cmp	r3, #0
 80201de:	dc03      	bgt.n	80201e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80201e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	f340 81e6 	ble.w	80205b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80201e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80201ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80201ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80201f2:	1e48      	subs	r0, r1, #1
 80201f4:	1e56      	subs	r6, r2, #1
 80201f6:	9b06      	ldr	r3, [sp, #24]
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	f340 80bd 	ble.w	8020378 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80201fe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020200:	1427      	asrs	r7, r4, #16
 8020202:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020206:	d406      	bmi.n	8020216 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020208:	4287      	cmp	r7, r0
 802020a:	da04      	bge.n	8020216 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802020c:	2b00      	cmp	r3, #0
 802020e:	db02      	blt.n	8020216 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020210:	42b3      	cmp	r3, r6
 8020212:	f2c0 80b2 	blt.w	802037a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8020216:	3701      	adds	r7, #1
 8020218:	f100 80a1 	bmi.w	802035e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802021c:	42b9      	cmp	r1, r7
 802021e:	f2c0 809e 	blt.w	802035e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020222:	3301      	adds	r3, #1
 8020224:	f100 809b 	bmi.w	802035e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020228:	429a      	cmp	r2, r3
 802022a:	f2c0 8098 	blt.w	802035e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802022e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8020232:	f1bb 0f00 	cmp.w	fp, #0
 8020236:	f340 80bf 	ble.w	80203b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802023a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802023c:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802023e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020240:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020244:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8020248:	1420      	asrs	r0, r4, #16
 802024a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802024c:	ea4f 4723 	mov.w	r7, r3, asr #16
 8020250:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8020254:	6892      	ldr	r2, [r2, #8]
 8020256:	f100 8103 	bmi.w	8020460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802025a:	f102 3eff 	add.w	lr, r2, #4294967295
 802025e:	4570      	cmp	r0, lr
 8020260:	f280 80fe 	bge.w	8020460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8020264:	2f00      	cmp	r7, #0
 8020266:	f2c0 80fb 	blt.w	8020460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 802026a:	f10c 3eff 	add.w	lr, ip, #4294967295
 802026e:	4577      	cmp	r7, lr
 8020270:	f280 80f6 	bge.w	8020460 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8020274:	b212      	sxth	r2, r2
 8020276:	fb07 0002 	mla	r0, r7, r2, r0
 802027a:	9f08      	ldr	r7, [sp, #32]
 802027c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8020280:	eb07 0e00 	add.w	lr, r7, r0
 8020284:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020288:	eb05 0c08 	add.w	ip, r5, r8
 802028c:	2b00      	cmp	r3, #0
 802028e:	f000 80d8 	beq.w	8020442 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020292:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8020296:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802029a:	442f      	add	r7, r5
 802029c:	2900      	cmp	r1, #0
 802029e:	f000 80d9 	beq.w	8020454 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80202a2:	eb0e 0002 	add.w	r0, lr, r2
 80202a6:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80202aa:	7840      	ldrb	r0, [r0, #1]
 80202ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80202b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80202b4:	442a      	add	r2, r5
 80202b6:	4428      	add	r0, r5
 80202b8:	b29b      	uxth	r3, r3
 80202ba:	f815 a008 	ldrb.w	sl, [r5, r8]
 80202be:	b289      	uxth	r1, r1
 80202c0:	f897 8000 	ldrb.w	r8, [r7]
 80202c4:	fb03 f901 	mul.w	r9, r3, r1
 80202c8:	011b      	lsls	r3, r3, #4
 80202ca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80202ce:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80202d2:	eba3 0309 	sub.w	r3, r3, r9
 80202d6:	b289      	uxth	r1, r1
 80202d8:	b29b      	uxth	r3, r3
 80202da:	ebae 0e01 	sub.w	lr, lr, r1
 80202de:	fb03 f808 	mul.w	r8, r3, r8
 80202e2:	fa1f fe8e 	uxth.w	lr, lr
 80202e6:	fb0e 880a 	mla	r8, lr, sl, r8
 80202ea:	f892 a000 	ldrb.w	sl, [r2]
 80202ee:	fb01 880a 	mla	r8, r1, sl, r8
 80202f2:	f890 a000 	ldrb.w	sl, [r0]
 80202f6:	fb09 880a 	mla	r8, r9, sl, r8
 80202fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80202fe:	f886 8000 	strb.w	r8, [r6]
 8020302:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020306:	f89c a001 	ldrb.w	sl, [ip, #1]
 802030a:	fb03 f808 	mul.w	r8, r3, r8
 802030e:	fb0e 880a 	mla	r8, lr, sl, r8
 8020312:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020316:	fb01 880a 	mla	r8, r1, sl, r8
 802031a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802031e:	fb09 880a 	mla	r8, r9, sl, r8
 8020322:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020326:	f886 8001 	strb.w	r8, [r6, #1]
 802032a:	78bf      	ldrb	r7, [r7, #2]
 802032c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020330:	437b      	muls	r3, r7
 8020332:	7892      	ldrb	r2, [r2, #2]
 8020334:	fb0e 330c 	mla	r3, lr, ip, r3
 8020338:	fb01 3102 	mla	r1, r1, r2, r3
 802033c:	7882      	ldrb	r2, [r0, #2]
 802033e:	fb09 1902 	mla	r9, r9, r2, r1
 8020342:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020346:	f886 9002 	strb.w	r9, [r6, #2]
 802034a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802034c:	3603      	adds	r6, #3
 802034e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020350:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020354:	441c      	add	r4, r3
 8020356:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020358:	4413      	add	r3, r2
 802035a:	9318      	str	r3, [sp, #96]	@ 0x60
 802035c:	e769      	b.n	8020232 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802035e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020360:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8020362:	441c      	add	r4, r3
 8020364:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020366:	443b      	add	r3, r7
 8020368:	9318      	str	r3, [sp, #96]	@ 0x60
 802036a:	9b06      	ldr	r3, [sp, #24]
 802036c:	3b01      	subs	r3, #1
 802036e:	9306      	str	r3, [sp, #24]
 8020370:	9b07      	ldr	r3, [sp, #28]
 8020372:	3303      	adds	r3, #3
 8020374:	9307      	str	r3, [sp, #28]
 8020376:	e73e      	b.n	80201f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020378:	d026      	beq.n	80203c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802037a:	9b06      	ldr	r3, [sp, #24]
 802037c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802037e:	3b01      	subs	r3, #1
 8020380:	fb00 4003 	mla	r0, r0, r3, r4
 8020384:	1400      	asrs	r0, r0, #16
 8020386:	f53f af52 	bmi.w	802022e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802038a:	3901      	subs	r1, #1
 802038c:	4288      	cmp	r0, r1
 802038e:	f6bf af4e 	bge.w	802022e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020392:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020394:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8020396:	fb01 0303 	mla	r3, r1, r3, r0
 802039a:	141b      	asrs	r3, r3, #16
 802039c:	f53f af47 	bmi.w	802022e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80203a0:	3a01      	subs	r2, #1
 80203a2:	4293      	cmp	r3, r2
 80203a4:	f6bf af43 	bge.w	802022e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80203a8:	9b07      	ldr	r3, [sp, #28]
 80203aa:	f8dd a018 	ldr.w	sl, [sp, #24]
 80203ae:	f103 0803 	add.w	r8, r3, #3
 80203b2:	f1ba 0f00 	cmp.w	sl, #0
 80203b6:	dc71      	bgt.n	802049c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80203b8:	9b06      	ldr	r3, [sp, #24]
 80203ba:	9a07      	ldr	r2, [sp, #28]
 80203bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80203c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80203c4:	441a      	add	r2, r3
 80203c6:	9207      	str	r2, [sp, #28]
 80203c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	f340 80f2 	ble.w	80205b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80203d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80203d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203da:	eeb0 6a62 	vmov.f32	s12, s5
 80203de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203ea:	ee16 4a10 	vmov	r4, s12
 80203ee:	eeb0 6a43 	vmov.f32	s12, s6
 80203f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203f6:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 80203fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020402:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802040a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802040e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020412:	ee12 2a90 	vmov	r2, s5
 8020416:	eef0 2a47 	vmov.f32	s5, s14
 802041a:	fb92 f3f3 	sdiv	r3, r2, r3
 802041e:	ee13 2a10 	vmov	r2, s6
 8020422:	9319      	str	r3, [sp, #100]	@ 0x64
 8020424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020426:	eeb0 3a67 	vmov.f32	s6, s15
 802042a:	fb92 f3f3 	sdiv	r3, r2, r3
 802042e:	931a      	str	r3, [sp, #104]	@ 0x68
 8020430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020432:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020434:	3b01      	subs	r3, #1
 8020436:	9309      	str	r3, [sp, #36]	@ 0x24
 8020438:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802043a:	bf08      	it	eq
 802043c:	4613      	moveq	r3, r2
 802043e:	9306      	str	r3, [sp, #24]
 8020440:	e6cb      	b.n	80201da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020442:	b151      	cbz	r1, 802045a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020444:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020448:	4660      	mov	r0, ip
 802044a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802044e:	442a      	add	r2, r5
 8020450:	4667      	mov	r7, ip
 8020452:	e731      	b.n	80202b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8020454:	4660      	mov	r0, ip
 8020456:	4662      	mov	r2, ip
 8020458:	e72e      	b.n	80202b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 802045a:	4660      	mov	r0, ip
 802045c:	4662      	mov	r2, ip
 802045e:	e7f7      	b.n	8020450 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8020460:	f110 0e01 	adds.w	lr, r0, #1
 8020464:	f53f af71 	bmi.w	802034a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020468:	4572      	cmp	r2, lr
 802046a:	f6ff af6e 	blt.w	802034a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802046e:	f117 0e01 	adds.w	lr, r7, #1
 8020472:	f53f af6a 	bmi.w	802034a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020476:	45f4      	cmp	ip, lr
 8020478:	f6ff af67 	blt.w	802034a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802047c:	b212      	sxth	r2, r2
 802047e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020482:	fa0f f38c 	sxth.w	r3, ip
 8020486:	9200      	str	r2, [sp, #0]
 8020488:	4631      	mov	r1, r6
 802048a:	9a08      	ldr	r2, [sp, #32]
 802048c:	9301      	str	r3, [sp, #4]
 802048e:	462b      	mov	r3, r5
 8020490:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020494:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8020496:	f7ff fde9 	bl	802006c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 802049a:	e756      	b.n	802034a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802049c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802049e:	1426      	asrs	r6, r4, #16
 80204a0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80204a2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80204a6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80204aa:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80204ac:	1400      	asrs	r0, r0, #16
 80204ae:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80204b2:	fb02 6000 	mla	r0, r2, r0, r6
 80204b6:	9e08      	ldr	r6, [sp, #32]
 80204b8:	f816 e000 	ldrb.w	lr, [r6, r0]
 80204bc:	eb06 0c00 	add.w	ip, r6, r0
 80204c0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80204c4:	eb05 070e 	add.w	r7, r5, lr
 80204c8:	2b00      	cmp	r3, #0
 80204ca:	d064      	beq.n	8020596 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80204cc:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80204d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80204d4:	442e      	add	r6, r5
 80204d6:	2900      	cmp	r1, #0
 80204d8:	d066      	beq.n	80205a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80204da:	eb0c 0002 	add.w	r0, ip, r2
 80204de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80204e2:	7840      	ldrb	r0, [r0, #1]
 80204e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80204e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80204ec:	442a      	add	r2, r5
 80204ee:	4428      	add	r0, r5
 80204f0:	b29b      	uxth	r3, r3
 80204f2:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80204f6:	b289      	uxth	r1, r1
 80204f8:	f896 e000 	ldrb.w	lr, [r6]
 80204fc:	f108 0803 	add.w	r8, r8, #3
 8020500:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020504:	fb03 f901 	mul.w	r9, r3, r1
 8020508:	011b      	lsls	r3, r3, #4
 802050a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802050e:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8020512:	eba3 0309 	sub.w	r3, r3, r9
 8020516:	b289      	uxth	r1, r1
 8020518:	b29b      	uxth	r3, r3
 802051a:	ebac 0c01 	sub.w	ip, ip, r1
 802051e:	fb03 fe0e 	mul.w	lr, r3, lr
 8020522:	fa1f fc8c 	uxth.w	ip, ip
 8020526:	fb0c ee0b 	mla	lr, ip, fp, lr
 802052a:	f892 b000 	ldrb.w	fp, [r2]
 802052e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020532:	f890 b000 	ldrb.w	fp, [r0]
 8020536:	fb09 ee0b 	mla	lr, r9, fp, lr
 802053a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802053e:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020542:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020546:	f897 b001 	ldrb.w	fp, [r7, #1]
 802054a:	fb03 fe0e 	mul.w	lr, r3, lr
 802054e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020552:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020556:	fb01 ee0b 	mla	lr, r1, fp, lr
 802055a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802055e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020562:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020566:	f808 ec05 	strb.w	lr, [r8, #-5]
 802056a:	78b6      	ldrb	r6, [r6, #2]
 802056c:	78bf      	ldrb	r7, [r7, #2]
 802056e:	4373      	muls	r3, r6
 8020570:	7896      	ldrb	r6, [r2, #2]
 8020572:	7882      	ldrb	r2, [r0, #2]
 8020574:	fb0c 3307 	mla	r3, ip, r7, r3
 8020578:	fb01 3306 	mla	r3, r1, r6, r3
 802057c:	fb09 3902 	mla	r9, r9, r2, r3
 8020580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020582:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020584:	441c      	add	r4, r3
 8020586:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020588:	ea4f 2929 	mov.w	r9, r9, asr #8
 802058c:	4413      	add	r3, r2
 802058e:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020592:	9318      	str	r3, [sp, #96]	@ 0x60
 8020594:	e70d      	b.n	80203b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8020596:	b151      	cbz	r1, 80205ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8020598:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802059c:	4638      	mov	r0, r7
 802059e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80205a2:	442a      	add	r2, r5
 80205a4:	463e      	mov	r6, r7
 80205a6:	e7a3      	b.n	80204f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80205a8:	4638      	mov	r0, r7
 80205aa:	463a      	mov	r2, r7
 80205ac:	e7a0      	b.n	80204f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80205ae:	4638      	mov	r0, r7
 80205b0:	463a      	mov	r2, r7
 80205b2:	e7f7      	b.n	80205a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80205b4:	b00d      	add	sp, #52	@ 0x34
 80205b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80205ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205be:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80205c2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80205c6:	2d00      	cmp	r5, #0
 80205c8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80205cc:	fb05 700c 	mla	r0, r5, ip, r7
 80205d0:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80205d4:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 80205d8:	eb02 0800 	add.w	r8, r2, r0
 80205dc:	f2c0 8118 	blt.w	8020810 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80205e0:	45a9      	cmp	r9, r5
 80205e2:	f340 8115 	ble.w	8020810 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80205e6:	2f00      	cmp	r7, #0
 80205e8:	f2c0 8110 	blt.w	802080c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80205ec:	45bc      	cmp	ip, r7
 80205ee:	f340 810d 	ble.w	802080c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80205f2:	5c12      	ldrb	r2, [r2, r0]
 80205f4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80205f8:	1c7a      	adds	r2, r7, #1
 80205fa:	f100 810c 	bmi.w	8020816 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 80205fe:	4594      	cmp	ip, r2
 8020600:	f340 8109 	ble.w	8020816 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020604:	2c00      	cmp	r4, #0
 8020606:	f000 8108 	beq.w	802081a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 802060a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802060e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020612:	3501      	adds	r5, #1
 8020614:	f100 8105 	bmi.w	8020822 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020618:	45a9      	cmp	r9, r5
 802061a:	f340 8102 	ble.w	8020822 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802061e:	f1be 0f00 	cmp.w	lr, #0
 8020622:	f000 8101 	beq.w	8020828 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8020626:	2f00      	cmp	r7, #0
 8020628:	f2c0 80f9 	blt.w	802081e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802062c:	45bc      	cmp	ip, r7
 802062e:	f340 80f6 	ble.w	802081e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020632:	f818 200c 	ldrb.w	r2, [r8, ip]
 8020636:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802063a:	3701      	adds	r7, #1
 802063c:	f100 80f7 	bmi.w	802082e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020640:	45bc      	cmp	ip, r7
 8020642:	f340 80f4 	ble.w	802082e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020646:	2c00      	cmp	r4, #0
 8020648:	f000 80f3 	beq.w	8020832 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 802064c:	44c4      	add	ip, r8
 802064e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020652:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020656:	fa1f fc84 	uxth.w	ip, r4
 802065a:	fa1f f48e 	uxth.w	r4, lr
 802065e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020662:	fb04 fe0c 	mul.w	lr, r4, ip
 8020666:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802066a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 802066e:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8020672:	ebac 070e 	sub.w	r7, ip, lr
 8020676:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802067a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802067e:	b2a4      	uxth	r4, r4
 8020680:	b2bf      	uxth	r7, r7
 8020682:	1b1b      	subs	r3, r3, r4
 8020684:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020688:	fb07 fc0a 	mul.w	ip, r7, sl
 802068c:	b29b      	uxth	r3, r3
 802068e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020692:	9300      	str	r3, [sp, #0]
 8020694:	fb04 cc09 	mla	ip, r4, r9, ip
 8020698:	fb0e cc08 	mla	ip, lr, r8, ip
 802069c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80206a0:	9301      	str	r3, [sp, #4]
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	f000 80af 	beq.w	8020806 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80206a8:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80206ac:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80206b0:	fb0b fc0c 	mul.w	ip, fp, ip
 80206b4:	fb0b f606 	mul.w	r6, fp, r6
 80206b8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80206bc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80206c0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80206c4:	44dc      	add	ip, fp
 80206c6:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80206ca:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80206ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206d2:	fb0a fb0b 	mul.w	fp, sl, fp
 80206d6:	fb0a fa00 	mul.w	sl, sl, r0
 80206da:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80206de:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80206e2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80206e6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80206ea:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80206ee:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80206f2:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80206f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80206fa:	0a36      	lsrs	r6, r6, #8
 80206fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020700:	44dc      	add	ip, fp
 8020702:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020706:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802070a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802070e:	fb09 fb0b 	mul.w	fp, r9, fp
 8020712:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020716:	fb09 f905 	mul.w	r9, r9, r5
 802071a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 802071e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020722:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8020726:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802072a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802072e:	fb0c fc07 	mul.w	ip, ip, r7
 8020732:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020736:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 802073a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802073e:	4458      	add	r0, fp
 8020740:	fb08 f505 	mul.w	r5, r8, r5
 8020744:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020748:	fb08 f802 	mul.w	r8, r8, r2
 802074c:	0a00      	lsrs	r0, r0, #8
 802074e:	0a2a      	lsrs	r2, r5, #8
 8020750:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8020754:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020758:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802075c:	4415      	add	r5, r2
 802075e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8020762:	0a2d      	lsrs	r5, r5, #8
 8020764:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020768:	9a00      	ldr	r2, [sp, #0]
 802076a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802076e:	fb03 cc02 	mla	ip, r3, r2, ip
 8020772:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020776:	9b01      	ldr	r3, [sp, #4]
 8020778:	fb05 c50e 	mla	r5, r5, lr, ip
 802077c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8020780:	fb00 5004 	mla	r0, r0, r4, r5
 8020784:	0a00      	lsrs	r0, r0, #8
 8020786:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802078a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802078e:	4378      	muls	r0, r7
 8020790:	fb02 0006 	mla	r0, r2, r6, r0
 8020794:	fb0e 0e08 	mla	lr, lr, r8, r0
 8020798:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 802079c:	fb04 e000 	mla	r0, r4, r0, lr
 80207a0:	0a00      	lsrs	r0, r0, #8
 80207a2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80207a6:	4328      	orrs	r0, r5
 80207a8:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80207ac:	b2ad      	uxth	r5, r5
 80207ae:	b2c4      	uxtb	r4, r0
 80207b0:	436b      	muls	r3, r5
 80207b2:	fb14 f405 	smulbb	r4, r4, r5
 80207b6:	1c5a      	adds	r2, r3, #1
 80207b8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80207bc:	780b      	ldrb	r3, [r1, #0]
 80207be:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80207c2:	b2d2      	uxtb	r2, r2
 80207c4:	fb03 4302 	mla	r3, r3, r2, r4
 80207c8:	b29b      	uxth	r3, r3
 80207ca:	1c5c      	adds	r4, r3, #1
 80207cc:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80207d0:	784c      	ldrb	r4, [r1, #1]
 80207d2:	fb14 f402 	smulbb	r4, r4, r2
 80207d6:	121b      	asrs	r3, r3, #8
 80207d8:	700b      	strb	r3, [r1, #0]
 80207da:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80207de:	fb03 4305 	mla	r3, r3, r5, r4
 80207e2:	b29b      	uxth	r3, r3
 80207e4:	1c5c      	adds	r4, r3, #1
 80207e6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80207ea:	0c04      	lsrs	r4, r0, #16
 80207ec:	7888      	ldrb	r0, [r1, #2]
 80207ee:	121b      	asrs	r3, r3, #8
 80207f0:	fb10 f002 	smulbb	r0, r0, r2
 80207f4:	704b      	strb	r3, [r1, #1]
 80207f6:	fb04 0005 	mla	r0, r4, r5, r0
 80207fa:	b280      	uxth	r0, r0
 80207fc:	1c43      	adds	r3, r0, #1
 80207fe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020802:	1200      	asrs	r0, r0, #8
 8020804:	7088      	strb	r0, [r1, #2]
 8020806:	b003      	add	sp, #12
 8020808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802080c:	2600      	movs	r6, #0
 802080e:	e6f3      	b.n	80205f8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8020810:	2000      	movs	r0, #0
 8020812:	4606      	mov	r6, r0
 8020814:	e6fd      	b.n	8020612 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020816:	2000      	movs	r0, #0
 8020818:	e6fb      	b.n	8020612 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802081a:	4620      	mov	r0, r4
 802081c:	e6f9      	b.n	8020612 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802081e:	2500      	movs	r5, #0
 8020820:	e70b      	b.n	802063a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8020822:	2200      	movs	r2, #0
 8020824:	4615      	mov	r5, r2
 8020826:	e716      	b.n	8020656 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020828:	4672      	mov	r2, lr
 802082a:	4675      	mov	r5, lr
 802082c:	e713      	b.n	8020656 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802082e:	2200      	movs	r2, #0
 8020830:	e711      	b.n	8020656 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020832:	4622      	mov	r2, r4
 8020834:	e70f      	b.n	8020656 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08020836 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083a:	b09f      	sub	sp, #124	@ 0x7c
 802083c:	921b      	str	r2, [sp, #108]	@ 0x6c
 802083e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020840:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8020842:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8020846:	901d      	str	r0, [sp, #116]	@ 0x74
 8020848:	931c      	str	r3, [sp, #112]	@ 0x70
 802084a:	6850      	ldr	r0, [r2, #4]
 802084c:	9119      	str	r1, [sp, #100]	@ 0x64
 802084e:	6812      	ldr	r2, [r2, #0]
 8020850:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8020852:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8020856:	fb00 1303 	mla	r3, r0, r3, r1
 802085a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802085e:	18d3      	adds	r3, r2, r3
 8020860:	930c      	str	r3, [sp, #48]	@ 0x30
 8020862:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020864:	681b      	ldr	r3, [r3, #0]
 8020866:	9312      	str	r3, [sp, #72]	@ 0x48
 8020868:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802086a:	685e      	ldr	r6, [r3, #4]
 802086c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8020870:	3604      	adds	r6, #4
 8020872:	930d      	str	r3, [sp, #52]	@ 0x34
 8020874:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020876:	2b00      	cmp	r3, #0
 8020878:	dc03      	bgt.n	8020882 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802087a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802087c:	2b00      	cmp	r3, #0
 802087e:	f340 8378 	ble.w	8020f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8020882:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020884:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020888:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802088c:	1e48      	subs	r0, r1, #1
 802088e:	1e57      	subs	r7, r2, #1
 8020890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020892:	2b00      	cmp	r3, #0
 8020894:	f340 818c 	ble.w	8020bb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8020898:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802089a:	142b      	asrs	r3, r5, #16
 802089c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80208a0:	d406      	bmi.n	80208b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80208a2:	4584      	cmp	ip, r0
 80208a4:	da04      	bge.n	80208b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	db02      	blt.n	80208b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80208aa:	42bb      	cmp	r3, r7
 80208ac:	f2c0 8181 	blt.w	8020bb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80208b0:	f11c 0c01 	adds.w	ip, ip, #1
 80208b4:	f100 816f 	bmi.w	8020b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80208b8:	4561      	cmp	r1, ip
 80208ba:	f2c0 816c 	blt.w	8020b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80208be:	3301      	adds	r3, #1
 80208c0:	f100 8169 	bmi.w	8020b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80208c4:	429a      	cmp	r2, r3
 80208c6:	f2c0 8166 	blt.w	8020b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80208ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208cc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80208ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80208d0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	f340 818c 	ble.w	8020bf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80208d8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80208da:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80208de:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80208e2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80208e6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80208e8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80208ec:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80208ee:	141b      	asrs	r3, r3, #16
 80208f0:	f100 81d0 	bmi.w	8020c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80208f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80208f8:	4543      	cmp	r3, r8
 80208fa:	f280 81cb 	bge.w	8020c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80208fe:	f1bc 0f00 	cmp.w	ip, #0
 8020902:	f2c0 81c7 	blt.w	8020c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020906:	f10e 38ff 	add.w	r8, lr, #4294967295
 802090a:	45c4      	cmp	ip, r8
 802090c:	f280 81c2 	bge.w	8020c94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020910:	b200      	sxth	r0, r0
 8020912:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020914:	fb0c 3300 	mla	r3, ip, r0, r3
 8020918:	eb04 0803 	add.w	r8, r4, r3
 802091c:	5ce3      	ldrb	r3, [r4, r3]
 802091e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020922:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020926:	2a00      	cmp	r2, #0
 8020928:	f000 81a9 	beq.w	8020c7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 802092c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020930:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020934:	940e      	str	r4, [sp, #56]	@ 0x38
 8020936:	0e24      	lsrs	r4, r4, #24
 8020938:	9415      	str	r4, [sp, #84]	@ 0x54
 802093a:	b179      	cbz	r1, 802095c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802093c:	eb08 0c00 	add.w	ip, r8, r0
 8020940:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020944:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020948:	900a      	str	r0, [sp, #40]	@ 0x28
 802094a:	0e00      	lsrs	r0, r0, #24
 802094c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802094e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020952:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020956:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020958:	0e00      	lsrs	r0, r0, #24
 802095a:	9016      	str	r0, [sp, #88]	@ 0x58
 802095c:	b292      	uxth	r2, r2
 802095e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020960:	b289      	uxth	r1, r1
 8020962:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020964:	fb02 f901 	mul.w	r9, r2, r1
 8020968:	0112      	lsls	r2, r2, #4
 802096a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802096e:	eba2 0809 	sub.w	r8, r2, r9
 8020972:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8020976:	b289      	uxth	r1, r1
 8020978:	fa1f f888 	uxth.w	r8, r8
 802097c:	1a52      	subs	r2, r2, r1
 802097e:	fb08 f000 	mul.w	r0, r8, r0
 8020982:	b292      	uxth	r2, r2
 8020984:	fb02 000e 	mla	r0, r2, lr, r0
 8020988:	fb01 0004 	mla	r0, r1, r4, r0
 802098c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802098e:	fb09 0004 	mla	r0, r9, r4, r0
 8020992:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020996:	2800      	cmp	r0, #0
 8020998:	f000 80f2 	beq.w	8020b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802099c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80209a0:	d01b      	beq.n	80209da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80209a2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80209a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80209aa:	fb0e fa0a 	mul.w	sl, lr, sl
 80209ae:	fb0e fe03 	mul.w	lr, lr, r3
 80209b2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80209b6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80209ba:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80209be:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80209c2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80209c6:	4453      	add	r3, sl
 80209c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209cc:	0a1b      	lsrs	r3, r3, #8
 80209ce:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80209d2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80209d6:	ea43 030c 	orr.w	r3, r3, ip
 80209da:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80209dc:	2cff      	cmp	r4, #255	@ 0xff
 80209de:	d021      	beq.n	8020a24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80209e0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80209e2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80209e6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80209e8:	fb04 fb0b 	mul.w	fp, r4, fp
 80209ec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80209ee:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80209f2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80209f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80209f8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80209fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a00:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a04:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020a08:	44de      	add	lr, fp
 8020a0a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a16:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a1a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a1e:	ea4e 040a 	orr.w	r4, lr, sl
 8020a22:	940e      	str	r4, [sp, #56]	@ 0x38
 8020a24:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020a26:	2cff      	cmp	r4, #255	@ 0xff
 8020a28:	d021      	beq.n	8020a6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020a2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020a2c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020a30:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020a32:	fb04 fb0b 	mul.w	fp, r4, fp
 8020a36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020a38:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020a3c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020a3e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a42:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020a46:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a4a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a4e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020a52:	44de      	add	lr, fp
 8020a54:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a60:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a64:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a68:	ea4e 040a 	orr.w	r4, lr, sl
 8020a6c:	940a      	str	r4, [sp, #40]	@ 0x28
 8020a6e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020a70:	2cff      	cmp	r4, #255	@ 0xff
 8020a72:	d021      	beq.n	8020ab8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020a74:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020a76:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020a7a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020a7c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020a80:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020a82:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020a86:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020a88:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020a8c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020a90:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020a98:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020a9c:	44de      	add	lr, fp
 8020a9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020aa2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020aa6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020aaa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020aae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020ab2:	ea4e 040a 	orr.w	r4, lr, sl
 8020ab6:	940f      	str	r4, [sp, #60]	@ 0x3c
 8020ab8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020aba:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8020abe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020ac2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020ac6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020ac8:	fb08 fc0c 	mul.w	ip, r8, ip
 8020acc:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020ad0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020ad4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020ad6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020ada:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020ade:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020ae0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020ae4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020ae8:	fb08 f80e 	mul.w	r8, r8, lr
 8020aec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020af0:	fb02 8303 	mla	r3, r2, r3, r8
 8020af4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020af6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020afa:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020afe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020b00:	fb01 330a 	mla	r3, r1, sl, r3
 8020b04:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8020b08:	fb09 3901 	mla	r9, r9, r1, r3
 8020b0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020b0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020b10:	4343      	muls	r3, r0
 8020b12:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020b16:	1c58      	adds	r0, r3, #1
 8020b18:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8020b1c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020b20:	ea4c 0c09 	orr.w	ip, ip, r9
 8020b24:	783b      	ldrb	r3, [r7, #0]
 8020b26:	fa5f f28c 	uxtb.w	r2, ip
 8020b2a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020b2e:	fb12 f201 	smulbb	r2, r2, r1
 8020b32:	b2c0      	uxtb	r0, r0
 8020b34:	fb03 2300 	mla	r3, r3, r0, r2
 8020b38:	b29b      	uxth	r3, r3
 8020b3a:	1c5a      	adds	r2, r3, #1
 8020b3c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b40:	787a      	ldrb	r2, [r7, #1]
 8020b42:	fb12 f200 	smulbb	r2, r2, r0
 8020b46:	121b      	asrs	r3, r3, #8
 8020b48:	703b      	strb	r3, [r7, #0]
 8020b4a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020b4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020b52:	fb03 2301 	mla	r3, r3, r1, r2
 8020b56:	b29b      	uxth	r3, r3
 8020b58:	1c5a      	adds	r2, r3, #1
 8020b5a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b5e:	121b      	asrs	r3, r3, #8
 8020b60:	707b      	strb	r3, [r7, #1]
 8020b62:	78bb      	ldrb	r3, [r7, #2]
 8020b64:	fb13 f000 	smulbb	r0, r3, r0
 8020b68:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020b6c:	fa1f fc8c 	uxth.w	ip, ip
 8020b70:	f10c 0301 	add.w	r3, ip, #1
 8020b74:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020b78:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020b7c:	f887 c002 	strb.w	ip, [r7, #2]
 8020b80:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020b82:	3703      	adds	r7, #3
 8020b84:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020b86:	441a      	add	r2, r3
 8020b88:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020b8a:	441d      	add	r5, r3
 8020b8c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020b8e:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020b90:	3b01      	subs	r3, #1
 8020b92:	931a      	str	r3, [sp, #104]	@ 0x68
 8020b94:	e69c      	b.n	80208d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020b96:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020b98:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8020b9a:	441c      	add	r4, r3
 8020b9c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020b9e:	441d      	add	r5, r3
 8020ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ba2:	9429      	str	r4, [sp, #164]	@ 0xa4
 8020ba4:	3b01      	subs	r3, #1
 8020ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020baa:	3303      	adds	r3, #3
 8020bac:	930c      	str	r3, [sp, #48]	@ 0x30
 8020bae:	e66f      	b.n	8020890 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020bb0:	d026      	beq.n	8020c00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8020bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bb4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8020bb6:	3b01      	subs	r3, #1
 8020bb8:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8020bba:	fb00 4003 	mla	r0, r0, r3, r4
 8020bbe:	1400      	asrs	r0, r0, #16
 8020bc0:	f53f ae83 	bmi.w	80208ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020bc4:	3901      	subs	r1, #1
 8020bc6:	4288      	cmp	r0, r1
 8020bc8:	f6bf ae7f 	bge.w	80208ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020bcc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8020bce:	fb01 5303 	mla	r3, r1, r3, r5
 8020bd2:	141b      	asrs	r3, r3, #16
 8020bd4:	f53f ae79 	bmi.w	80208ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020bd8:	3a01      	subs	r2, #1
 8020bda:	4293      	cmp	r3, r2
 8020bdc:	f6bf ae75 	bge.w	80208ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020be0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020be2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8020be6:	f103 0e03 	add.w	lr, r3, #3
 8020bea:	f1bb 0f00 	cmp.w	fp, #0
 8020bee:	dc71      	bgt.n	8020cd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bf2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020bf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020bf8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020bfc:	4423      	add	r3, r4
 8020bfe:	930c      	str	r3, [sp, #48]	@ 0x30
 8020c00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	f340 81b5 	ble.w	8020f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8020c08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020c0c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020c0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c16:	eef0 6a62 	vmov.f32	s13, s5
 8020c1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020c1e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c26:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8020c2a:	eef0 6a43 	vmov.f32	s13, s6
 8020c2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c32:	ee16 5a90 	vmov	r5, s13
 8020c36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c3e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c42:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c46:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c4a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c4e:	ee12 2a90 	vmov	r2, s5
 8020c52:	eef0 2a47 	vmov.f32	s5, s14
 8020c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c5a:	ee13 2a10 	vmov	r2, s6
 8020c5e:	932b      	str	r3, [sp, #172]	@ 0xac
 8020c60:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020c62:	eeb0 3a67 	vmov.f32	s6, s15
 8020c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c6a:	932c      	str	r3, [sp, #176]	@ 0xb0
 8020c6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020c6e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020c70:	3b01      	subs	r3, #1
 8020c72:	9319      	str	r3, [sp, #100]	@ 0x64
 8020c74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020c76:	bf08      	it	eq
 8020c78:	4613      	moveq	r3, r2
 8020c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c7c:	e5fa      	b.n	8020874 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020c7e:	2900      	cmp	r1, #0
 8020c80:	f43f ae6c 	beq.w	802095c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020c84:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020c88:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020c8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c8e:	0e00      	lsrs	r0, r0, #24
 8020c90:	9013      	str	r0, [sp, #76]	@ 0x4c
 8020c92:	e663      	b.n	802095c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020c94:	f113 0801 	adds.w	r8, r3, #1
 8020c98:	f53f af72 	bmi.w	8020b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020c9c:	4540      	cmp	r0, r8
 8020c9e:	f6ff af6f 	blt.w	8020b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020ca2:	f11c 0801 	adds.w	r8, ip, #1
 8020ca6:	f53f af6b 	bmi.w	8020b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020caa:	45c6      	cmp	lr, r8
 8020cac:	f6ff af68 	blt.w	8020b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020cb0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8020cb2:	b200      	sxth	r0, r0
 8020cb4:	9302      	str	r3, [sp, #8]
 8020cb6:	fa0f f38e 	sxth.w	r3, lr
 8020cba:	9000      	str	r0, [sp, #0]
 8020cbc:	9301      	str	r3, [sp, #4]
 8020cbe:	4633      	mov	r3, r6
 8020cc0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020cc2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020cc6:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020cca:	4639      	mov	r1, r7
 8020ccc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020cce:	f7ff fc74 	bl	80205ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020cd2:	e755      	b.n	8020b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020cd4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020cd6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020cda:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8020cdc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020ce0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020ce2:	1427      	asrs	r7, r4, #16
 8020ce4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020ce6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020cea:	142b      	asrs	r3, r5, #16
 8020cec:	fb01 7303 	mla	r3, r1, r3, r7
 8020cf0:	18e7      	adds	r7, r4, r3
 8020cf2:	5ce3      	ldrb	r3, [r4, r3]
 8020cf4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020cf8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020cfc:	2a00      	cmp	r2, #0
 8020cfe:	f000 812e 	beq.w	8020f5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8020d02:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020d06:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020d0a:	9410      	str	r4, [sp, #64]	@ 0x40
 8020d0c:	0e24      	lsrs	r4, r4, #24
 8020d0e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020d10:	b170      	cbz	r0, 8020d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020d12:	eb07 0801 	add.w	r8, r7, r1
 8020d16:	5c79      	ldrb	r1, [r7, r1]
 8020d18:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020d1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020d1e:	0e09      	lsrs	r1, r1, #24
 8020d20:	9114      	str	r1, [sp, #80]	@ 0x50
 8020d22:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020d26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020d2a:	9111      	str	r1, [sp, #68]	@ 0x44
 8020d2c:	0e09      	lsrs	r1, r1, #24
 8020d2e:	9118      	str	r1, [sp, #96]	@ 0x60
 8020d30:	b292      	uxth	r2, r2
 8020d32:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020d34:	b280      	uxth	r0, r0
 8020d36:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020d38:	fb02 f900 	mul.w	r9, r2, r0
 8020d3c:	0112      	lsls	r2, r2, #4
 8020d3e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020d42:	eba2 0809 	sub.w	r8, r2, r9
 8020d46:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8020d4a:	b280      	uxth	r0, r0
 8020d4c:	fa1f f888 	uxth.w	r8, r8
 8020d50:	1a12      	subs	r2, r2, r0
 8020d52:	fb08 f101 	mul.w	r1, r8, r1
 8020d56:	b292      	uxth	r2, r2
 8020d58:	fb02 110c 	mla	r1, r2, ip, r1
 8020d5c:	fb00 1104 	mla	r1, r0, r4, r1
 8020d60:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020d62:	fb09 1104 	mla	r1, r9, r4, r1
 8020d66:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020d6a:	2900      	cmp	r1, #0
 8020d6c:	f000 80ec 	beq.w	8020f48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8020d70:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020d74:	d019      	beq.n	8020daa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8020d76:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020d7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020d7e:	fb0c fa0a 	mul.w	sl, ip, sl
 8020d82:	fb0c fc03 	mul.w	ip, ip, r3
 8020d86:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020d8a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020d8e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8020d92:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020d96:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020d9a:	4453      	add	r3, sl
 8020d9c:	0a3f      	lsrs	r7, r7, #8
 8020d9e:	0a1b      	lsrs	r3, r3, #8
 8020da0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8020da4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020da8:	433b      	orrs	r3, r7
 8020daa:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020dac:	2cff      	cmp	r4, #255	@ 0xff
 8020dae:	d020      	beq.n	8020df2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8020db0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020db2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020db6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020db8:	4367      	muls	r7, r4
 8020dba:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020dbc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020dc0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020dc4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8020dc6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020dca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020dce:	fb04 fa0a 	mul.w	sl, r4, sl
 8020dd2:	44bc      	add	ip, r7
 8020dd4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020dd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ddc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020de0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020de8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020dec:	ea4c 040a 	orr.w	r4, ip, sl
 8020df0:	9410      	str	r4, [sp, #64]	@ 0x40
 8020df2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020df4:	2cff      	cmp	r4, #255	@ 0xff
 8020df6:	d020      	beq.n	8020e3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8020df8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020dfa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020dfe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020e00:	4367      	muls	r7, r4
 8020e02:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020e04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e08:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020e0c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020e0e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020e12:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e16:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e1a:	44bc      	add	ip, r7
 8020e1c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020e20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e28:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e30:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020e34:	ea4c 040a 	orr.w	r4, ip, sl
 8020e38:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020e3a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020e3c:	2cff      	cmp	r4, #255	@ 0xff
 8020e3e:	d020      	beq.n	8020e82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8020e40:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020e42:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020e46:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020e48:	4367      	muls	r7, r4
 8020e4a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020e4c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020e50:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020e54:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020e56:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020e5a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e5e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e62:	44bc      	add	ip, r7
 8020e64:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020e68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020e70:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020e74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e78:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020e7c:	ea4c 040a 	orr.w	r4, ip, sl
 8020e80:	9411      	str	r4, [sp, #68]	@ 0x44
 8020e82:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020e84:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020e88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020e8c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020e90:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020e92:	fb08 f707 	mul.w	r7, r8, r7
 8020e96:	fb02 770c 	mla	r7, r2, ip, r7
 8020e9a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020e9e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020ea0:	fb00 770c 	mla	r7, r0, ip, r7
 8020ea4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020ea8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020eaa:	fb09 770c 	mla	r7, r9, ip, r7
 8020eae:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8020eb2:	fb08 f80c 	mul.w	r8, r8, ip
 8020eb6:	0a3f      	lsrs	r7, r7, #8
 8020eb8:	fb02 8303 	mla	r3, r2, r3, r8
 8020ebc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020ebe:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8020ec2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020ec6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020ec8:	fb00 330a 	mla	r3, r0, sl, r3
 8020ecc:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8020ed0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020ed2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ed8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020edc:	434b      	muls	r3, r1
 8020ede:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020ee2:	1c59      	adds	r1, r3, #1
 8020ee4:	ea47 070c 	orr.w	r7, r7, ip
 8020ee8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020eec:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020ef0:	b2fa      	uxtb	r2, r7
 8020ef2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020ef6:	fb12 f200 	smulbb	r2, r2, r0
 8020efa:	b2c9      	uxtb	r1, r1
 8020efc:	fb03 2301 	mla	r3, r3, r1, r2
 8020f00:	b29b      	uxth	r3, r3
 8020f02:	1c5a      	adds	r2, r3, #1
 8020f04:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f08:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020f0c:	fb12 f201 	smulbb	r2, r2, r1
 8020f10:	121b      	asrs	r3, r3, #8
 8020f12:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020f16:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020f1a:	0c3f      	lsrs	r7, r7, #16
 8020f1c:	fb03 2300 	mla	r3, r3, r0, r2
 8020f20:	b29b      	uxth	r3, r3
 8020f22:	1c5a      	adds	r2, r3, #1
 8020f24:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f28:	121b      	asrs	r3, r3, #8
 8020f2a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020f2e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020f32:	fb13 f101 	smulbb	r1, r3, r1
 8020f36:	fb07 1700 	mla	r7, r7, r0, r1
 8020f3a:	b2bf      	uxth	r7, r7
 8020f3c:	1c7b      	adds	r3, r7, #1
 8020f3e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020f42:	123f      	asrs	r7, r7, #8
 8020f44:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020f48:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020f4a:	f10e 0e03 	add.w	lr, lr, #3
 8020f4e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020f50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f54:	441a      	add	r2, r3
 8020f56:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020f58:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020f5a:	441d      	add	r5, r3
 8020f5c:	e645      	b.n	8020bea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8020f5e:	2800      	cmp	r0, #0
 8020f60:	f43f aee6 	beq.w	8020d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020f64:	5c79      	ldrb	r1, [r7, r1]
 8020f66:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020f6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020f6c:	0e09      	lsrs	r1, r1, #24
 8020f6e:	9114      	str	r1, [sp, #80]	@ 0x50
 8020f70:	e6de      	b.n	8020d30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020f72:	b01f      	add	sp, #124	@ 0x7c
 8020f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020f78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f7c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8020f80:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8020f84:	2d00      	cmp	r5, #0
 8020f86:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020f8a:	fb05 700e 	mla	r0, r5, lr, r7
 8020f8e:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8020f92:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8020f96:	eb02 0800 	add.w	r8, r2, r0
 8020f9a:	f2c0 8105 	blt.w	80211a8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8020f9e:	45a9      	cmp	r9, r5
 8020fa0:	f340 8102 	ble.w	80211a8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8020fa4:	2f00      	cmp	r7, #0
 8020fa6:	f2c0 80fd 	blt.w	80211a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8020faa:	45be      	cmp	lr, r7
 8020fac:	f340 80fa 	ble.w	80211a4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8020fb0:	5c12      	ldrb	r2, [r2, r0]
 8020fb2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020fb6:	1c7a      	adds	r2, r7, #1
 8020fb8:	f100 80f9 	bmi.w	80211ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8020fbc:	4596      	cmp	lr, r2
 8020fbe:	f340 80f6 	ble.w	80211ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8020fc2:	2c00      	cmp	r4, #0
 8020fc4:	f000 80f5 	beq.w	80211b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8020fc8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020fcc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020fd0:	3501      	adds	r5, #1
 8020fd2:	f100 80f2 	bmi.w	80211ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8020fd6:	45a9      	cmp	r9, r5
 8020fd8:	f340 80ef 	ble.w	80211ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8020fdc:	f1bc 0f00 	cmp.w	ip, #0
 8020fe0:	f000 80ee 	beq.w	80211c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8020fe4:	2f00      	cmp	r7, #0
 8020fe6:	f2c0 80e6 	blt.w	80211b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8020fea:	45be      	cmp	lr, r7
 8020fec:	f340 80e3 	ble.w	80211b6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8020ff0:	f818 200e 	ldrb.w	r2, [r8, lr]
 8020ff4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020ff8:	3701      	adds	r7, #1
 8020ffa:	f100 80e4 	bmi.w	80211c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8020ffe:	45be      	cmp	lr, r7
 8021000:	f340 80e1 	ble.w	80211c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8021004:	2c00      	cmp	r4, #0
 8021006:	f000 80e0 	beq.w	80211ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 802100a:	44c6      	add	lr, r8
 802100c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021010:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021014:	b2a3      	uxth	r3, r4
 8021016:	fa1f fc8c 	uxth.w	ip, ip
 802101a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802101e:	fb0c fe03 	mul.w	lr, ip, r3
 8021022:	011b      	lsls	r3, r3, #4
 8021024:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021028:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 802102c:	eba3 070e 	sub.w	r7, r3, lr
 8021030:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8021034:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8021038:	fa1f f48c 	uxth.w	r4, ip
 802103c:	b2bf      	uxth	r7, r7
 802103e:	1b1b      	subs	r3, r3, r4
 8021040:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021044:	fb07 fc0a 	mul.w	ip, r7, sl
 8021048:	b29b      	uxth	r3, r3
 802104a:	fb03 cc0b 	mla	ip, r3, fp, ip
 802104e:	9300      	str	r3, [sp, #0]
 8021050:	fb04 cc09 	mla	ip, r4, r9, ip
 8021054:	fb0e cc08 	mla	ip, lr, r8, ip
 8021058:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802105c:	9301      	str	r3, [sp, #4]
 802105e:	2b00      	cmp	r3, #0
 8021060:	f000 809d 	beq.w	802119e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8021064:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8021068:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802106c:	fb0b fc0c 	mul.w	ip, fp, ip
 8021070:	fb0b f606 	mul.w	r6, fp, r6
 8021074:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021078:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802107c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8021080:	44dc      	add	ip, fp
 8021082:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8021086:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802108a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802108e:	fb0a fb0b 	mul.w	fp, sl, fp
 8021092:	fb0a fa00 	mul.w	sl, sl, r0
 8021096:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802109a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802109e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80210a2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80210a6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80210aa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80210ae:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80210b2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80210b6:	0a36      	lsrs	r6, r6, #8
 80210b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80210bc:	44dc      	add	ip, fp
 80210be:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80210c2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80210c6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80210ca:	fb09 fb0b 	mul.w	fp, r9, fp
 80210ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210d2:	fb09 f905 	mul.w	r9, r9, r5
 80210d6:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80210da:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80210de:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 80210e2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80210e6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80210ea:	fb0c fc07 	mul.w	ip, ip, r7
 80210ee:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80210f2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80210f6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80210fa:	4458      	add	r0, fp
 80210fc:	fb08 f505 	mul.w	r5, r8, r5
 8021100:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021104:	fb08 f802 	mul.w	r8, r8, r2
 8021108:	0a00      	lsrs	r0, r0, #8
 802110a:	0a2a      	lsrs	r2, r5, #8
 802110c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8021110:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021114:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021118:	4415      	add	r5, r2
 802111a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802111e:	0a2d      	lsrs	r5, r5, #8
 8021120:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021124:	9a00      	ldr	r2, [sp, #0]
 8021126:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802112a:	fb03 cc02 	mla	ip, r3, r2, ip
 802112e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021132:	9b01      	ldr	r3, [sp, #4]
 8021134:	fb05 c50e 	mla	r5, r5, lr, ip
 8021138:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802113c:	43db      	mvns	r3, r3
 802113e:	fb00 5004 	mla	r0, r0, r4, r5
 8021142:	b2db      	uxtb	r3, r3
 8021144:	0a00      	lsrs	r0, r0, #8
 8021146:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802114a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802114e:	4378      	muls	r0, r7
 8021150:	fb02 0006 	mla	r0, r2, r6, r0
 8021154:	780a      	ldrb	r2, [r1, #0]
 8021156:	fb0e 0e08 	mla	lr, lr, r8, r0
 802115a:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 802115e:	fb04 e000 	mla	r0, r4, r0, lr
 8021162:	fb02 f403 	mul.w	r4, r2, r3
 8021166:	0a00      	lsrs	r0, r0, #8
 8021168:	1c62      	adds	r2, r4, #1
 802116a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802116e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021172:	4328      	orrs	r0, r5
 8021174:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021178:	700a      	strb	r2, [r1, #0]
 802117a:	784a      	ldrb	r2, [r1, #1]
 802117c:	435a      	muls	r2, r3
 802117e:	1c54      	adds	r4, r2, #1
 8021180:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8021184:	0a02      	lsrs	r2, r0, #8
 8021186:	0c00      	lsrs	r0, r0, #16
 8021188:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802118c:	704a      	strb	r2, [r1, #1]
 802118e:	788a      	ldrb	r2, [r1, #2]
 8021190:	4353      	muls	r3, r2
 8021192:	1c5a      	adds	r2, r3, #1
 8021194:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021198:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802119c:	7088      	strb	r0, [r1, #2]
 802119e:	b003      	add	sp, #12
 80211a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211a4:	2600      	movs	r6, #0
 80211a6:	e706      	b.n	8020fb6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80211a8:	2000      	movs	r0, #0
 80211aa:	4606      	mov	r6, r0
 80211ac:	e710      	b.n	8020fd0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80211ae:	2000      	movs	r0, #0
 80211b0:	e70e      	b.n	8020fd0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80211b2:	4620      	mov	r0, r4
 80211b4:	e70c      	b.n	8020fd0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80211b6:	2500      	movs	r5, #0
 80211b8:	e71e      	b.n	8020ff8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80211ba:	2200      	movs	r2, #0
 80211bc:	4615      	mov	r5, r2
 80211be:	e729      	b.n	8021014 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80211c0:	4662      	mov	r2, ip
 80211c2:	4665      	mov	r5, ip
 80211c4:	e726      	b.n	8021014 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80211c6:	2200      	movs	r2, #0
 80211c8:	e724      	b.n	8021014 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80211ca:	4622      	mov	r2, r4
 80211cc:	e722      	b.n	8021014 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080211ce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211d2:	b09b      	sub	sp, #108	@ 0x6c
 80211d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80211d8:	9218      	str	r2, [sp, #96]	@ 0x60
 80211da:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80211dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80211de:	9116      	str	r1, [sp, #88]	@ 0x58
 80211e0:	6850      	ldr	r0, [r2, #4]
 80211e2:	9307      	str	r3, [sp, #28]
 80211e4:	6812      	ldr	r2, [r2, #0]
 80211e6:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80211e8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80211ec:	fb00 1303 	mla	r3, r0, r3, r1
 80211f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80211f4:	18d3      	adds	r3, r2, r3
 80211f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80211f8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80211fe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021200:	685e      	ldr	r6, [r3, #4]
 8021202:	3604      	adds	r6, #4
 8021204:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021206:	2b00      	cmp	r3, #0
 8021208:	dc03      	bgt.n	8021212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802120a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802120c:	2b00      	cmp	r3, #0
 802120e:	f340 834f 	ble.w	80218b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8021212:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021214:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021218:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802121c:	1e48      	subs	r0, r1, #1
 802121e:	1e57      	subs	r7, r2, #1
 8021220:	9b07      	ldr	r3, [sp, #28]
 8021222:	2b00      	cmp	r3, #0
 8021224:	f340 8178 	ble.w	8021518 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021228:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802122a:	142b      	asrs	r3, r5, #16
 802122c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021230:	d406      	bmi.n	8021240 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021232:	4584      	cmp	ip, r0
 8021234:	da04      	bge.n	8021240 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021236:	2b00      	cmp	r3, #0
 8021238:	db02      	blt.n	8021240 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802123a:	42bb      	cmp	r3, r7
 802123c:	f2c0 816d 	blt.w	802151a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8021240:	f11c 0c01 	adds.w	ip, ip, #1
 8021244:	f100 815b 	bmi.w	80214fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021248:	4561      	cmp	r1, ip
 802124a:	f2c0 8158 	blt.w	80214fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802124e:	3301      	adds	r3, #1
 8021250:	f100 8155 	bmi.w	80214fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021254:	429a      	cmp	r2, r3
 8021256:	f2c0 8152 	blt.w	80214fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802125a:	9b07      	ldr	r3, [sp, #28]
 802125c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802125e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021260:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021262:	2b00      	cmp	r3, #0
 8021264:	f340 8178 	ble.w	8021558 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021268:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802126a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802126e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021272:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021276:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021278:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802127c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802127e:	141b      	asrs	r3, r3, #16
 8021280:	f100 81ba 	bmi.w	80215f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021284:	f101 38ff 	add.w	r8, r1, #4294967295
 8021288:	4543      	cmp	r3, r8
 802128a:	f280 81b5 	bge.w	80215f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802128e:	f1bc 0f00 	cmp.w	ip, #0
 8021292:	f2c0 81b1 	blt.w	80215f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021296:	f10e 38ff 	add.w	r8, lr, #4294967295
 802129a:	45c4      	cmp	ip, r8
 802129c:	f280 81ac 	bge.w	80215f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80212a0:	b209      	sxth	r1, r1
 80212a2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80212a4:	fb0c 3301 	mla	r3, ip, r1, r3
 80212a8:	eb04 0803 	add.w	r8, r4, r3
 80212ac:	5ce3      	ldrb	r3, [r4, r3]
 80212ae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80212b2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80212b6:	2a00      	cmp	r2, #0
 80212b8:	f000 8193 	beq.w	80215e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80212bc:	f898 c001 	ldrb.w	ip, [r8, #1]
 80212c0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80212c4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80212c6:	0e24      	lsrs	r4, r4, #24
 80212c8:	9412      	str	r4, [sp, #72]	@ 0x48
 80212ca:	b178      	cbz	r0, 80212ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80212cc:	eb08 0c01 	add.w	ip, r8, r1
 80212d0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80212d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212d8:	9108      	str	r1, [sp, #32]
 80212da:	0e09      	lsrs	r1, r1, #24
 80212dc:	9110      	str	r1, [sp, #64]	@ 0x40
 80212de:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80212e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212e6:	910c      	str	r1, [sp, #48]	@ 0x30
 80212e8:	0e09      	lsrs	r1, r1, #24
 80212ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 80212ec:	b292      	uxth	r2, r2
 80212ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80212f0:	b280      	uxth	r0, r0
 80212f2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80212f4:	fb02 f900 	mul.w	r9, r2, r0
 80212f8:	0112      	lsls	r2, r2, #4
 80212fa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80212fe:	eba2 0809 	sub.w	r8, r2, r9
 8021302:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8021306:	b280      	uxth	r0, r0
 8021308:	fa1f f888 	uxth.w	r8, r8
 802130c:	1a12      	subs	r2, r2, r0
 802130e:	fb08 f101 	mul.w	r1, r8, r1
 8021312:	b292      	uxth	r2, r2
 8021314:	fb02 110e 	mla	r1, r2, lr, r1
 8021318:	fb00 1104 	mla	r1, r0, r4, r1
 802131c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802131e:	fb09 1104 	mla	r1, r9, r4, r1
 8021322:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021326:	2900      	cmp	r1, #0
 8021328:	f000 80de 	beq.w	80214e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802132c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021330:	d01b      	beq.n	802136a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8021332:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021336:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802133a:	fb0e fa0a 	mul.w	sl, lr, sl
 802133e:	fb0e fe03 	mul.w	lr, lr, r3
 8021342:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021346:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802134a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802134e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021352:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021356:	4453      	add	r3, sl
 8021358:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802135c:	0a1b      	lsrs	r3, r3, #8
 802135e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021362:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021366:	ea43 030c 	orr.w	r3, r3, ip
 802136a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802136c:	2cff      	cmp	r4, #255	@ 0xff
 802136e:	d021      	beq.n	80213b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021370:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021372:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021376:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021378:	fb04 fb0b 	mul.w	fp, r4, fp
 802137c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802137e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021382:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021384:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021388:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802138c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021390:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021394:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021398:	44de      	add	lr, fp
 802139a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802139e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213a6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80213aa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80213ae:	ea4e 040a 	orr.w	r4, lr, sl
 80213b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80213b4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80213b6:	2cff      	cmp	r4, #255	@ 0xff
 80213b8:	d021      	beq.n	80213fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80213ba:	9c08      	ldr	r4, [sp, #32]
 80213bc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80213c0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80213c2:	fb04 fb0b 	mul.w	fp, r4, fp
 80213c6:	9c08      	ldr	r4, [sp, #32]
 80213c8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80213cc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80213ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80213d2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80213d6:	fb04 fa0a 	mul.w	sl, r4, sl
 80213da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80213de:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80213e2:	44de      	add	lr, fp
 80213e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80213e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213f0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80213f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80213f8:	ea4e 040a 	orr.w	r4, lr, sl
 80213fc:	9408      	str	r4, [sp, #32]
 80213fe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021400:	2cff      	cmp	r4, #255	@ 0xff
 8021402:	d021      	beq.n	8021448 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021404:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021406:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802140a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802140c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021410:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021412:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021416:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021418:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802141c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021420:	fb04 fa0a 	mul.w	sl, r4, sl
 8021424:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021428:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802142c:	44de      	add	lr, fp
 802142e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021432:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021436:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802143a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802143e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021442:	ea4e 040a 	orr.w	r4, lr, sl
 8021446:	940c      	str	r4, [sp, #48]	@ 0x30
 8021448:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802144a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802144e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021452:	43c9      	mvns	r1, r1
 8021454:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021458:	9c08      	ldr	r4, [sp, #32]
 802145a:	b2c9      	uxtb	r1, r1
 802145c:	fb08 fc0c 	mul.w	ip, r8, ip
 8021460:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021464:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021468:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802146a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802146e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021472:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021474:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021478:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802147c:	fb08 f80e 	mul.w	r8, r8, lr
 8021480:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021484:	fb02 8303 	mla	r3, r2, r3, r8
 8021488:	9a08      	ldr	r2, [sp, #32]
 802148a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802148e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8021492:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021494:	fb00 330a 	mla	r3, r0, sl, r3
 8021498:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 802149c:	fb09 3900 	mla	r9, r9, r0, r3
 80214a0:	783b      	ldrb	r3, [r7, #0]
 80214a2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80214a6:	fb03 f201 	mul.w	r2, r3, r1
 80214aa:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80214ae:	1c53      	adds	r3, r2, #1
 80214b0:	ea4c 0c09 	orr.w	ip, ip, r9
 80214b4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80214b8:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80214bc:	703b      	strb	r3, [r7, #0]
 80214be:	787b      	ldrb	r3, [r7, #1]
 80214c0:	434b      	muls	r3, r1
 80214c2:	1c5a      	adds	r2, r3, #1
 80214c4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80214c8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80214cc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80214d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80214d4:	707b      	strb	r3, [r7, #1]
 80214d6:	78bb      	ldrb	r3, [r7, #2]
 80214d8:	4359      	muls	r1, r3
 80214da:	1c4b      	adds	r3, r1, #1
 80214dc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80214e0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80214e4:	f887 c002 	strb.w	ip, [r7, #2]
 80214e8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80214ea:	3703      	adds	r7, #3
 80214ec:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80214ee:	441a      	add	r2, r3
 80214f0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80214f2:	441d      	add	r5, r3
 80214f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80214f6:	9225      	str	r2, [sp, #148]	@ 0x94
 80214f8:	3b01      	subs	r3, #1
 80214fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 80214fc:	e6b0      	b.n	8021260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80214fe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021500:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021502:	441c      	add	r4, r3
 8021504:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021506:	441d      	add	r5, r3
 8021508:	9b07      	ldr	r3, [sp, #28]
 802150a:	9425      	str	r4, [sp, #148]	@ 0x94
 802150c:	3b01      	subs	r3, #1
 802150e:	9307      	str	r3, [sp, #28]
 8021510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021512:	3303      	adds	r3, #3
 8021514:	930a      	str	r3, [sp, #40]	@ 0x28
 8021516:	e683      	b.n	8021220 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021518:	d026      	beq.n	8021568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802151a:	9b07      	ldr	r3, [sp, #28]
 802151c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802151e:	3b01      	subs	r3, #1
 8021520:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021522:	fb00 4003 	mla	r0, r0, r3, r4
 8021526:	1400      	asrs	r0, r0, #16
 8021528:	f53f ae97 	bmi.w	802125a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802152c:	3901      	subs	r1, #1
 802152e:	4288      	cmp	r0, r1
 8021530:	f6bf ae93 	bge.w	802125a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021534:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021536:	fb01 5303 	mla	r3, r1, r3, r5
 802153a:	141b      	asrs	r3, r3, #16
 802153c:	f53f ae8d 	bmi.w	802125a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021540:	3a01      	subs	r2, #1
 8021542:	4293      	cmp	r3, r2
 8021544:	f6bf ae89 	bge.w	802125a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802154a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802154e:	f103 0e03 	add.w	lr, r3, #3
 8021552:	f1bb 0f00 	cmp.w	fp, #0
 8021556:	dc6d      	bgt.n	8021634 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8021558:	9b07      	ldr	r3, [sp, #28]
 802155a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802155e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021560:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021564:	4423      	add	r3, r4
 8021566:	930a      	str	r3, [sp, #40]	@ 0x28
 8021568:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802156a:	2b00      	cmp	r3, #0
 802156c:	f340 81a0 	ble.w	80218b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8021570:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021574:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021576:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802157a:	eeb0 6a62 	vmov.f32	s12, s5
 802157e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021582:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021586:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802158a:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 802158e:	eeb0 6a43 	vmov.f32	s12, s6
 8021592:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021596:	ee16 5a10 	vmov	r5, s12
 802159a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802159e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80215a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80215a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80215b2:	ee12 2a90 	vmov	r2, s5
 80215b6:	eef0 2a47 	vmov.f32	s5, s14
 80215ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80215be:	ee13 2a10 	vmov	r2, s6
 80215c2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80215c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215c6:	eeb0 3a67 	vmov.f32	s6, s15
 80215ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80215ce:	9328      	str	r3, [sp, #160]	@ 0xa0
 80215d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80215d2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80215d4:	3b01      	subs	r3, #1
 80215d6:	9316      	str	r3, [sp, #88]	@ 0x58
 80215d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80215da:	bf08      	it	eq
 80215dc:	4613      	moveq	r3, r2
 80215de:	9307      	str	r3, [sp, #28]
 80215e0:	e610      	b.n	8021204 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80215e2:	2800      	cmp	r0, #0
 80215e4:	f43f ae82 	beq.w	80212ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80215e8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80215ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80215f0:	9108      	str	r1, [sp, #32]
 80215f2:	0e09      	lsrs	r1, r1, #24
 80215f4:	9110      	str	r1, [sp, #64]	@ 0x40
 80215f6:	e679      	b.n	80212ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80215f8:	f113 0801 	adds.w	r8, r3, #1
 80215fc:	f53f af74 	bmi.w	80214e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021600:	4541      	cmp	r1, r8
 8021602:	f6ff af71 	blt.w	80214e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021606:	f11c 0801 	adds.w	r8, ip, #1
 802160a:	f53f af6d 	bmi.w	80214e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802160e:	45c6      	cmp	lr, r8
 8021610:	f6ff af6a 	blt.w	80214e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021614:	b209      	sxth	r1, r1
 8021616:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802161a:	fa0f f38e 	sxth.w	r3, lr
 802161e:	9100      	str	r1, [sp, #0]
 8021620:	4639      	mov	r1, r7
 8021622:	9301      	str	r3, [sp, #4]
 8021624:	4633      	mov	r3, r6
 8021626:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802162a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802162c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802162e:	f7ff fca3 	bl	8020f78 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021632:	e759      	b.n	80214e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021634:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021636:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802163a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802163c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021640:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021642:	1427      	asrs	r7, r4, #16
 8021644:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021646:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802164a:	142b      	asrs	r3, r5, #16
 802164c:	fb01 7303 	mla	r3, r1, r3, r7
 8021650:	18e7      	adds	r7, r4, r3
 8021652:	5ce3      	ldrb	r3, [r4, r3]
 8021654:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021658:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802165c:	2a00      	cmp	r2, #0
 802165e:	f000 811d 	beq.w	802189c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8021662:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021666:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802166a:	940d      	str	r4, [sp, #52]	@ 0x34
 802166c:	0e24      	lsrs	r4, r4, #24
 802166e:	9414      	str	r4, [sp, #80]	@ 0x50
 8021670:	b170      	cbz	r0, 8021690 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021672:	eb07 0801 	add.w	r8, r7, r1
 8021676:	5c79      	ldrb	r1, [r7, r1]
 8021678:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802167c:	9109      	str	r1, [sp, #36]	@ 0x24
 802167e:	0e09      	lsrs	r1, r1, #24
 8021680:	9111      	str	r1, [sp, #68]	@ 0x44
 8021682:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021686:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802168a:	910e      	str	r1, [sp, #56]	@ 0x38
 802168c:	0e09      	lsrs	r1, r1, #24
 802168e:	9115      	str	r1, [sp, #84]	@ 0x54
 8021690:	b292      	uxth	r2, r2
 8021692:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021694:	b280      	uxth	r0, r0
 8021696:	fb02 f900 	mul.w	r9, r2, r0
 802169a:	0112      	lsls	r2, r2, #4
 802169c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80216a0:	eba2 0809 	sub.w	r8, r2, r9
 80216a4:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80216a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80216aa:	b280      	uxth	r0, r0
 80216ac:	fa1f f888 	uxth.w	r8, r8
 80216b0:	1a09      	subs	r1, r1, r0
 80216b2:	fb08 f202 	mul.w	r2, r8, r2
 80216b6:	b289      	uxth	r1, r1
 80216b8:	fb01 220c 	mla	r2, r1, ip, r2
 80216bc:	fb00 2204 	mla	r2, r0, r4, r2
 80216c0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80216c2:	fb09 2204 	mla	r2, r9, r4, r2
 80216c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80216ca:	2a00      	cmp	r2, #0
 80216cc:	f000 80db 	beq.w	8021886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80216d0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80216d4:	d019      	beq.n	802170a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80216d6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80216da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80216de:	fb0c fa0a 	mul.w	sl, ip, sl
 80216e2:	fb0c fc03 	mul.w	ip, ip, r3
 80216e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80216ea:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80216ee:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80216f2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80216f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80216fa:	4453      	add	r3, sl
 80216fc:	0a3f      	lsrs	r7, r7, #8
 80216fe:	0a1b      	lsrs	r3, r3, #8
 8021700:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021704:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021708:	433b      	orrs	r3, r7
 802170a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802170c:	2cff      	cmp	r4, #255	@ 0xff
 802170e:	d020      	beq.n	8021752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8021710:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021712:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021716:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021718:	4367      	muls	r7, r4
 802171a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802171c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021720:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021724:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021726:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802172a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802172e:	fb04 fa0a 	mul.w	sl, r4, sl
 8021732:	44bc      	add	ip, r7
 8021734:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021738:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802173c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021740:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021744:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021748:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802174c:	ea4c 040a 	orr.w	r4, ip, sl
 8021750:	940d      	str	r4, [sp, #52]	@ 0x34
 8021752:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021754:	2cff      	cmp	r4, #255	@ 0xff
 8021756:	d020      	beq.n	802179a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8021758:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802175a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802175e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021760:	4367      	muls	r7, r4
 8021762:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021764:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021768:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802176c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802176e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021772:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021776:	fb04 fa0a 	mul.w	sl, r4, sl
 802177a:	44bc      	add	ip, r7
 802177c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021780:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021784:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021788:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802178c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021790:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021794:	ea4c 040a 	orr.w	r4, ip, sl
 8021798:	9409      	str	r4, [sp, #36]	@ 0x24
 802179a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802179c:	2cff      	cmp	r4, #255	@ 0xff
 802179e:	d020      	beq.n	80217e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80217a0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80217a2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80217a6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80217a8:	4367      	muls	r7, r4
 80217aa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80217ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80217b0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80217b4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80217b6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80217ba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80217be:	fb04 fa0a 	mul.w	sl, r4, sl
 80217c2:	44bc      	add	ip, r7
 80217c4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80217c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80217cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80217d0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80217d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80217dc:	ea4c 040a 	orr.w	r4, ip, sl
 80217e0:	940e      	str	r4, [sp, #56]	@ 0x38
 80217e2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80217e4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80217e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80217ec:	43d2      	mvns	r2, r2
 80217ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80217f2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80217f4:	b2d2      	uxtb	r2, r2
 80217f6:	fb08 f707 	mul.w	r7, r8, r7
 80217fa:	fb01 770c 	mla	r7, r1, ip, r7
 80217fe:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021802:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021804:	fb00 770c 	mla	r7, r0, ip, r7
 8021808:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802180c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802180e:	fb09 770c 	mla	r7, r9, ip, r7
 8021812:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8021816:	fb08 f80c 	mul.w	r8, r8, ip
 802181a:	0a3f      	lsrs	r7, r7, #8
 802181c:	fb01 8303 	mla	r3, r1, r3, r8
 8021820:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021822:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8021826:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802182a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802182c:	fb00 330a 	mla	r3, r0, sl, r3
 8021830:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8021834:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021838:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802183c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021840:	fb03 f102 	mul.w	r1, r3, r2
 8021844:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021848:	1c4b      	adds	r3, r1, #1
 802184a:	ea47 070c 	orr.w	r7, r7, ip
 802184e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021852:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8021856:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802185a:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 802185e:	4353      	muls	r3, r2
 8021860:	1c59      	adds	r1, r3, #1
 8021862:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021866:	0a3b      	lsrs	r3, r7, #8
 8021868:	0c3f      	lsrs	r7, r7, #16
 802186a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802186e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021872:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021876:	435a      	muls	r2, r3
 8021878:	1c53      	adds	r3, r2, #1
 802187a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802187e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021882:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021886:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021888:	f10e 0e03 	add.w	lr, lr, #3
 802188c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802188e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021892:	441a      	add	r2, r3
 8021894:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021896:	9225      	str	r2, [sp, #148]	@ 0x94
 8021898:	441d      	add	r5, r3
 802189a:	e65a      	b.n	8021552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802189c:	2800      	cmp	r0, #0
 802189e:	f43f aef7 	beq.w	8021690 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80218a2:	5c79      	ldrb	r1, [r7, r1]
 80218a4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80218a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80218aa:	0e09      	lsrs	r1, r1, #24
 80218ac:	9111      	str	r1, [sp, #68]	@ 0x44
 80218ae:	e6ef      	b.n	8021690 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80218b0:	b01b      	add	sp, #108	@ 0x6c
 80218b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080218b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80218b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218ba:	b08d      	sub	sp, #52	@ 0x34
 80218bc:	468b      	mov	fp, r1
 80218be:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 80218c2:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 80218c6:	fb0c 5703 	mla	r7, ip, r3, r5
 80218ca:	f1bc 0f00 	cmp.w	ip, #0
 80218ce:	910b      	str	r1, [sp, #44]	@ 0x2c
 80218d0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80218d4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 80218d8:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 80218dc:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 80218e0:	eb02 0607 	add.w	r6, r2, r7
 80218e4:	f89b 4000 	ldrb.w	r4, [fp]
 80218e8:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80218ec:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80218f0:	f2c0 80c1 	blt.w	8021a76 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80218f4:	45e6      	cmp	lr, ip
 80218f6:	f340 80be 	ble.w	8021a76 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80218fa:	2d00      	cmp	r5, #0
 80218fc:	f2c0 80b7 	blt.w	8021a6e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8021900:	42ab      	cmp	r3, r5
 8021902:	f340 80b4 	ble.w	8021a6e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8021906:	5dd2      	ldrb	r2, [r2, r7]
 8021908:	9205      	str	r2, [sp, #20]
 802190a:	7872      	ldrb	r2, [r6, #1]
 802190c:	9206      	str	r2, [sp, #24]
 802190e:	78b2      	ldrb	r2, [r6, #2]
 8021910:	9207      	str	r2, [sp, #28]
 8021912:	1c6a      	adds	r2, r5, #1
 8021914:	f100 80b6 	bmi.w	8021a84 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021918:	4293      	cmp	r3, r2
 802191a:	f340 80b3 	ble.w	8021a84 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802191e:	f1b8 0f00 	cmp.w	r8, #0
 8021922:	f000 80af 	beq.w	8021a84 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021926:	78f2      	ldrb	r2, [r6, #3]
 8021928:	9201      	str	r2, [sp, #4]
 802192a:	7932      	ldrb	r2, [r6, #4]
 802192c:	9202      	str	r2, [sp, #8]
 802192e:	7972      	ldrb	r2, [r6, #5]
 8021930:	9203      	str	r2, [sp, #12]
 8021932:	f11c 0c01 	adds.w	ip, ip, #1
 8021936:	f100 80ad 	bmi.w	8021a94 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802193a:	45e6      	cmp	lr, ip
 802193c:	f340 80aa 	ble.w	8021a94 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021940:	f1ba 0f00 	cmp.w	sl, #0
 8021944:	f000 80a6 	beq.w	8021a94 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021948:	2d00      	cmp	r5, #0
 802194a:	f2c0 809f 	blt.w	8021a8c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802194e:	42ab      	cmp	r3, r5
 8021950:	f340 809c 	ble.w	8021a8c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8021954:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021958:	f816 9002 	ldrb.w	r9, [r6, r2]
 802195c:	2203      	movs	r2, #3
 802195e:	fb03 6c02 	mla	ip, r3, r2, r6
 8021962:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8021966:	f89c e002 	ldrb.w	lr, [ip, #2]
 802196a:	9704      	str	r7, [sp, #16]
 802196c:	3501      	adds	r5, #1
 802196e:	f100 8098 	bmi.w	8021aa2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021972:	42ab      	cmp	r3, r5
 8021974:	f340 8095 	ble.w	8021aa2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021978:	f1b8 0f00 	cmp.w	r8, #0
 802197c:	f000 8091 	beq.w	8021aa2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021980:	f04f 0c03 	mov.w	ip, #3
 8021984:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8021988:	5cb5      	ldrb	r5, [r6, r2]
 802198a:	fb03 620c 	mla	r2, r3, ip, r6
 802198e:	fb03 630c 	mla	r3, r3, ip, r6
 8021992:	7912      	ldrb	r2, [r2, #4]
 8021994:	795e      	ldrb	r6, [r3, #5]
 8021996:	fa1f f388 	uxth.w	r3, r8
 802199a:	fa1f fc8a 	uxth.w	ip, sl
 802199e:	fb03 f70c 	mul.w	r7, r3, ip
 80219a2:	011b      	lsls	r3, r3, #4
 80219a4:	9708      	str	r7, [sp, #32]
 80219a6:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80219aa:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 80219ae:	1bdb      	subs	r3, r3, r7
 80219b0:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 80219b4:	fa1f fc8c 	uxth.w	ip, ip
 80219b8:	b29b      	uxth	r3, r3
 80219ba:	9709      	str	r7, [sp, #36]	@ 0x24
 80219bc:	ebaa 0a0c 	sub.w	sl, sl, ip
 80219c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80219c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80219c4:	fa1f fa8a 	uxth.w	sl, sl
 80219c8:	ea6f 0807 	mvn.w	r8, r7
 80219cc:	9f01      	ldr	r7, [sp, #4]
 80219ce:	435f      	muls	r7, r3
 80219d0:	9b05      	ldr	r3, [sp, #20]
 80219d2:	fa5f f888 	uxtb.w	r8, r8
 80219d6:	fb0a 7703 	mla	r7, sl, r3, r7
 80219da:	9b08      	ldr	r3, [sp, #32]
 80219dc:	fb14 f408 	smulbb	r4, r4, r8
 80219e0:	fb0c 7709 	mla	r7, ip, r9, r7
 80219e4:	fb10 f008 	smulbb	r0, r0, r8
 80219e8:	fb11 f108 	smulbb	r1, r1, r8
 80219ec:	fb03 7705 	mla	r7, r3, r5, r7
 80219f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219f2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80219f6:	fb07 4703 	mla	r7, r7, r3, r4
 80219fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80219fc:	b2bf      	uxth	r7, r7
 80219fe:	1c7c      	adds	r4, r7, #1
 8021a00:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8021a04:	1224      	asrs	r4, r4, #8
 8021a06:	f88b 4000 	strb.w	r4, [fp]
 8021a0a:	9c02      	ldr	r4, [sp, #8]
 8021a0c:	435c      	muls	r4, r3
 8021a0e:	9b06      	ldr	r3, [sp, #24]
 8021a10:	fb0a 4403 	mla	r4, sl, r3, r4
 8021a14:	9b04      	ldr	r3, [sp, #16]
 8021a16:	fb0c 4403 	mla	r4, ip, r3, r4
 8021a1a:	9b08      	ldr	r3, [sp, #32]
 8021a1c:	fb03 4402 	mla	r4, r3, r2, r4
 8021a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021a24:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021a28:	fb04 0403 	mla	r4, r4, r3, r0
 8021a2c:	9b03      	ldr	r3, [sp, #12]
 8021a2e:	435a      	muls	r2, r3
 8021a30:	b2a4      	uxth	r4, r4
 8021a32:	4613      	mov	r3, r2
 8021a34:	9a07      	ldr	r2, [sp, #28]
 8021a36:	1c60      	adds	r0, r4, #1
 8021a38:	fb0a 3a02 	mla	sl, sl, r2, r3
 8021a3c:	9b08      	ldr	r3, [sp, #32]
 8021a3e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8021a42:	fb0c ac0e 	mla	ip, ip, lr, sl
 8021a46:	1224      	asrs	r4, r4, #8
 8021a48:	fb03 c606 	mla	r6, r3, r6, ip
 8021a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a4e:	f88b 4001 	strb.w	r4, [fp, #1]
 8021a52:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021a56:	fb06 1103 	mla	r1, r6, r3, r1
 8021a5a:	b289      	uxth	r1, r1
 8021a5c:	1c4e      	adds	r6, r1, #1
 8021a5e:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8021a62:	1209      	asrs	r1, r1, #8
 8021a64:	f88b 1002 	strb.w	r1, [fp, #2]
 8021a68:	b00d      	add	sp, #52	@ 0x34
 8021a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021a72:	9405      	str	r4, [sp, #20]
 8021a74:	e74d      	b.n	8021912 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8021a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021a7a:	9401      	str	r4, [sp, #4]
 8021a7c:	9405      	str	r4, [sp, #20]
 8021a7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021a82:	e756      	b.n	8021932 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021a88:	9401      	str	r4, [sp, #4]
 8021a8a:	e752      	b.n	8021932 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021a8c:	468e      	mov	lr, r1
 8021a8e:	9004      	str	r0, [sp, #16]
 8021a90:	46a1      	mov	r9, r4
 8021a92:	e76b      	b.n	802196c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8021a94:	460e      	mov	r6, r1
 8021a96:	4602      	mov	r2, r0
 8021a98:	4625      	mov	r5, r4
 8021a9a:	468e      	mov	lr, r1
 8021a9c:	9004      	str	r0, [sp, #16]
 8021a9e:	46a1      	mov	r9, r4
 8021aa0:	e779      	b.n	8021996 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8021aa2:	460e      	mov	r6, r1
 8021aa4:	4602      	mov	r2, r0
 8021aa6:	4625      	mov	r5, r4
 8021aa8:	e775      	b.n	8021996 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08021aaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021aaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021aae:	b09f      	sub	sp, #124	@ 0x7c
 8021ab0:	920e      	str	r2, [sp, #56]	@ 0x38
 8021ab2:	9307      	str	r3, [sp, #28]
 8021ab4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8021ab6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8021aba:	901d      	str	r0, [sp, #116]	@ 0x74
 8021abc:	930c      	str	r3, [sp, #48]	@ 0x30
 8021abe:	6850      	ldr	r0, [r2, #4]
 8021ac0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021ac2:	6812      	ldr	r2, [r2, #0]
 8021ac4:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8021ac8:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8021acc:	fb00 1303 	mla	r3, r0, r3, r1
 8021ad0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ad4:	18d3      	adds	r3, r2, r3
 8021ad6:	9308      	str	r3, [sp, #32]
 8021ad8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8021ade:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ae0:	43db      	mvns	r3, r3
 8021ae2:	b2db      	uxtb	r3, r3
 8021ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	dc03      	bgt.n	8021af4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	f340 81f5 	ble.w	8021ede <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8021af4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021af6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021afa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021afe:	1e48      	subs	r0, r1, #1
 8021b00:	1e54      	subs	r4, r2, #1
 8021b02:	9b07      	ldr	r3, [sp, #28]
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	f340 80d5 	ble.w	8021cb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021b0a:	ea5f 452a 	movs.w	r5, sl, asr #16
 8021b0e:	ea4f 4328 	mov.w	r3, r8, asr #16
 8021b12:	d406      	bmi.n	8021b22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021b14:	4285      	cmp	r5, r0
 8021b16:	da04      	bge.n	8021b22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	db02      	blt.n	8021b22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021b1c:	42a3      	cmp	r3, r4
 8021b1e:	f2c0 80ca 	blt.w	8021cb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021b22:	3501      	adds	r5, #1
 8021b24:	f100 80bb 	bmi.w	8021c9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021b28:	42a9      	cmp	r1, r5
 8021b2a:	f2c0 80b8 	blt.w	8021c9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021b2e:	3301      	adds	r3, #1
 8021b30:	f100 80b5 	bmi.w	8021c9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021b34:	429a      	cmp	r2, r3
 8021b36:	f2c0 80b2 	blt.w	8021c9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021b3a:	9b07      	ldr	r3, [sp, #28]
 8021b3c:	9d08      	ldr	r5, [sp, #32]
 8021b3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021b40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	f340 80d6 	ble.w	8021cf4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8021b48:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8021b4a:	ea4f 4428 	mov.w	r4, r8, asr #16
 8021b4e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021b50:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021b54:	68c6      	ldr	r6, [r0, #12]
 8021b56:	ea5f 402a 	movs.w	r0, sl, asr #16
 8021b5a:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8021b5e:	689b      	ldr	r3, [r3, #8]
 8021b60:	f100 810f 	bmi.w	8021d82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021b64:	1e5f      	subs	r7, r3, #1
 8021b66:	42b8      	cmp	r0, r7
 8021b68:	f280 810b 	bge.w	8021d82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021b6c:	2c00      	cmp	r4, #0
 8021b6e:	f2c0 8108 	blt.w	8021d82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021b72:	1e77      	subs	r7, r6, #1
 8021b74:	42bc      	cmp	r4, r7
 8021b76:	f280 8104 	bge.w	8021d82 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021b7a:	b21b      	sxth	r3, r3
 8021b7c:	fb04 0003 	mla	r0, r4, r3, r0
 8021b80:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021b82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021b86:	1826      	adds	r6, r4, r0
 8021b88:	5c24      	ldrb	r4, [r4, r0]
 8021b8a:	78b7      	ldrb	r7, [r6, #2]
 8021b8c:	7870      	ldrb	r0, [r6, #1]
 8021b8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8021b90:	7977      	ldrb	r7, [r6, #5]
 8021b92:	f896 e003 	ldrb.w	lr, [r6, #3]
 8021b96:	f896 c004 	ldrb.w	ip, [r6, #4]
 8021b9a:	9710      	str	r7, [sp, #64]	@ 0x40
 8021b9c:	b1c9      	cbz	r1, 8021bd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021b9e:	f04f 0b03 	mov.w	fp, #3
 8021ba2:	f06f 0904 	mvn.w	r9, #4
 8021ba6:	3605      	adds	r6, #5
 8021ba8:	fb13 930b 	smlabb	r3, r3, fp, r9
 8021bac:	eb06 0b03 	add.w	fp, r6, r3
 8021bb0:	5cf3      	ldrb	r3, [r6, r3]
 8021bb2:	9311      	str	r3, [sp, #68]	@ 0x44
 8021bb4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8021bb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021bba:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021bbe:	9315      	str	r3, [sp, #84]	@ 0x54
 8021bc0:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8021bc4:	9312      	str	r3, [sp, #72]	@ 0x48
 8021bc6:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8021bca:	9314      	str	r3, [sp, #80]	@ 0x50
 8021bcc:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8021bd0:	9316      	str	r3, [sp, #88]	@ 0x58
 8021bd2:	b292      	uxth	r2, r2
 8021bd4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8021bd6:	b289      	uxth	r1, r1
 8021bd8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8021bdc:	fb02 f601 	mul.w	r6, r2, r1
 8021be0:	0112      	lsls	r2, r2, #4
 8021be2:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8021be6:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8021bea:	1b92      	subs	r2, r2, r6
 8021bec:	b289      	uxth	r1, r1
 8021bee:	b292      	uxth	r2, r2
 8021bf0:	eba9 0901 	sub.w	r9, r9, r1
 8021bf4:	fb02 fe0e 	mul.w	lr, r2, lr
 8021bf8:	fa1f f989 	uxth.w	r9, r9
 8021bfc:	fb02 fc0c 	mul.w	ip, r2, ip
 8021c00:	fb09 e404 	mla	r4, r9, r4, lr
 8021c04:	f895 e000 	ldrb.w	lr, [r5]
 8021c08:	fb09 c000 	mla	r0, r9, r0, ip
 8021c0c:	fb01 4407 	mla	r4, r1, r7, r4
 8021c10:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8021c12:	fb06 4407 	mla	r4, r6, r7, r4
 8021c16:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021c18:	fb1e fe07 	smulbb	lr, lr, r7
 8021c1c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021c20:	fb04 e403 	mla	r4, r4, r3, lr
 8021c24:	b2a4      	uxth	r4, r4
 8021c26:	f104 0e01 	add.w	lr, r4, #1
 8021c2a:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8021c2e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021c30:	fb01 0004 	mla	r0, r1, r4, r0
 8021c34:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021c36:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021c3a:	fb06 0004 	mla	r0, r6, r4, r0
 8021c3e:	786c      	ldrb	r4, [r5, #1]
 8021c40:	f885 e000 	strb.w	lr, [r5]
 8021c44:	fb14 f407 	smulbb	r4, r4, r7
 8021c48:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021c4c:	fb00 4003 	mla	r0, r0, r3, r4
 8021c50:	b280      	uxth	r0, r0
 8021c52:	1c44      	adds	r4, r0, #1
 8021c54:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021c58:	1200      	asrs	r0, r0, #8
 8021c5a:	7068      	strb	r0, [r5, #1]
 8021c5c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021c5e:	4342      	muls	r2, r0
 8021c60:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021c62:	fb09 2200 	mla	r2, r9, r0, r2
 8021c66:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021c68:	fb01 2100 	mla	r1, r1, r0, r2
 8021c6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021c6e:	fb06 1602 	mla	r6, r6, r2, r1
 8021c72:	78a9      	ldrb	r1, [r5, #2]
 8021c74:	fb11 f107 	smulbb	r1, r1, r7
 8021c78:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021c7c:	fb06 1303 	mla	r3, r6, r3, r1
 8021c80:	b29b      	uxth	r3, r3
 8021c82:	1c5e      	adds	r6, r3, #1
 8021c84:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8021c88:	121b      	asrs	r3, r3, #8
 8021c8a:	70ab      	strb	r3, [r5, #2]
 8021c8c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021c8e:	3503      	adds	r5, #3
 8021c90:	449a      	add	sl, r3
 8021c92:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021c94:	4498      	add	r8, r3
 8021c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c98:	3b01      	subs	r3, #1
 8021c9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8021c9c:	e750      	b.n	8021b40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c9e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021ca0:	449a      	add	sl, r3
 8021ca2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021ca4:	4498      	add	r8, r3
 8021ca6:	9b07      	ldr	r3, [sp, #28]
 8021ca8:	3b01      	subs	r3, #1
 8021caa:	9307      	str	r3, [sp, #28]
 8021cac:	9b08      	ldr	r3, [sp, #32]
 8021cae:	3303      	adds	r3, #3
 8021cb0:	9308      	str	r3, [sp, #32]
 8021cb2:	e726      	b.n	8021b02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021cb4:	d026      	beq.n	8021d04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8021cb6:	9b07      	ldr	r3, [sp, #28]
 8021cb8:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8021cba:	3b01      	subs	r3, #1
 8021cbc:	fb00 a003 	mla	r0, r0, r3, sl
 8021cc0:	1400      	asrs	r0, r0, #16
 8021cc2:	f53f af3a 	bmi.w	8021b3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021cc6:	3901      	subs	r1, #1
 8021cc8:	4288      	cmp	r0, r1
 8021cca:	f6bf af36 	bge.w	8021b3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021cce:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8021cd0:	fb01 8303 	mla	r3, r1, r3, r8
 8021cd4:	141b      	asrs	r3, r3, #16
 8021cd6:	f53f af30 	bmi.w	8021b3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021cda:	3a01      	subs	r2, #1
 8021cdc:	4293      	cmp	r3, r2
 8021cde:	f6bf af2c 	bge.w	8021b3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021ce2:	9b08      	ldr	r3, [sp, #32]
 8021ce4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021ce8:	1cdd      	adds	r5, r3, #3
 8021cea:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 8021cee:	f1bc 0f00 	cmp.w	ip, #0
 8021cf2:	dc5f      	bgt.n	8021db4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8021cf4:	9b07      	ldr	r3, [sp, #28]
 8021cf6:	9a08      	ldr	r2, [sp, #32]
 8021cf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021cfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d00:	441a      	add	r2, r3
 8021d02:	9208      	str	r2, [sp, #32]
 8021d04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	f340 80e9 	ble.w	8021ede <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8021d0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021d10:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021d12:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d1a:	eef0 6a62 	vmov.f32	s13, s5
 8021d1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021d22:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d2a:	ee16 aa90 	vmov	sl, s13
 8021d2e:	eef0 6a43 	vmov.f32	s13, s6
 8021d32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d36:	ee16 8a90 	vmov	r8, s13
 8021d3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021d3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021d42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021d46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021d4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021d4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021d52:	ee12 2a90 	vmov	r2, s5
 8021d56:	eef0 2a47 	vmov.f32	s5, s14
 8021d5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d5e:	ee13 2a10 	vmov	r2, s6
 8021d62:	932b      	str	r3, [sp, #172]	@ 0xac
 8021d64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021d66:	eeb0 3a67 	vmov.f32	s6, s15
 8021d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d6e:	932c      	str	r3, [sp, #176]	@ 0xb0
 8021d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021d72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021d74:	3b01      	subs	r3, #1
 8021d76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021d78:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021d7a:	bf08      	it	eq
 8021d7c:	4613      	moveq	r3, r2
 8021d7e:	9307      	str	r3, [sp, #28]
 8021d80:	e6b1      	b.n	8021ae6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021d82:	1c47      	adds	r7, r0, #1
 8021d84:	d482      	bmi.n	8021c8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021d86:	42bb      	cmp	r3, r7
 8021d88:	db80      	blt.n	8021c8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021d8a:	1c67      	adds	r7, r4, #1
 8021d8c:	f53f af7e 	bmi.w	8021c8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021d90:	42be      	cmp	r6, r7
 8021d92:	f6ff af7b 	blt.w	8021c8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021d96:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021d98:	b236      	sxth	r6, r6
 8021d9a:	9001      	str	r0, [sp, #4]
 8021d9c:	b21b      	sxth	r3, r3
 8021d9e:	9600      	str	r6, [sp, #0]
 8021da0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8021da2:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8021da6:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8021daa:	4629      	mov	r1, r5
 8021dac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021dae:	f7ff fd82 	bl	80218b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8021db2:	e76b      	b.n	8021c8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021db4:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8021db6:	ea4f 402a 	mov.w	r0, sl, asr #16
 8021dba:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8021dbe:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8021dc2:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8021dc6:	ea4f 4128 	mov.w	r1, r8, asr #16
 8021dca:	fb07 0101 	mla	r1, r7, r1, r0
 8021dce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021dd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021dd4:	1844      	adds	r4, r0, r1
 8021dd6:	5c40      	ldrb	r0, [r0, r1]
 8021dd8:	78a6      	ldrb	r6, [r4, #2]
 8021dda:	7861      	ldrb	r1, [r4, #1]
 8021ddc:	960f      	str	r6, [sp, #60]	@ 0x3c
 8021dde:	78e6      	ldrb	r6, [r4, #3]
 8021de0:	910d      	str	r1, [sp, #52]	@ 0x34
 8021de2:	9610      	str	r6, [sp, #64]	@ 0x40
 8021de4:	f894 9004 	ldrb.w	r9, [r4, #4]
 8021de8:	f894 b005 	ldrb.w	fp, [r4, #5]
 8021dec:	b192      	cbz	r2, 8021e14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8021dee:	f06f 0604 	mvn.w	r6, #4
 8021df2:	2103      	movs	r1, #3
 8021df4:	3405      	adds	r4, #5
 8021df6:	fb17 6701 	smlabb	r7, r7, r1, r6
 8021dfa:	19e6      	adds	r6, r4, r7
 8021dfc:	5de4      	ldrb	r4, [r4, r7]
 8021dfe:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021e00:	7874      	ldrb	r4, [r6, #1]
 8021e02:	9419      	str	r4, [sp, #100]	@ 0x64
 8021e04:	78b4      	ldrb	r4, [r6, #2]
 8021e06:	941b      	str	r4, [sp, #108]	@ 0x6c
 8021e08:	78f4      	ldrb	r4, [r6, #3]
 8021e0a:	9418      	str	r4, [sp, #96]	@ 0x60
 8021e0c:	7934      	ldrb	r4, [r6, #4]
 8021e0e:	941a      	str	r4, [sp, #104]	@ 0x68
 8021e10:	7974      	ldrb	r4, [r6, #5]
 8021e12:	941c      	str	r4, [sp, #112]	@ 0x70
 8021e14:	b29b      	uxth	r3, r3
 8021e16:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021e18:	b292      	uxth	r2, r2
 8021e1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021e1c:	3503      	adds	r5, #3
 8021e1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021e22:	fb03 f402 	mul.w	r4, r3, r2
 8021e26:	011b      	lsls	r3, r3, #4
 8021e28:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8021e2c:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8021e30:	1b1b      	subs	r3, r3, r4
 8021e32:	b292      	uxth	r2, r2
 8021e34:	b29b      	uxth	r3, r3
 8021e36:	1ab6      	subs	r6, r6, r2
 8021e38:	435f      	muls	r7, r3
 8021e3a:	b2b6      	uxth	r6, r6
 8021e3c:	fb03 f909 	mul.w	r9, r3, r9
 8021e40:	fb03 fb0b 	mul.w	fp, r3, fp
 8021e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e46:	fb06 7000 	mla	r0, r6, r0, r7
 8021e4a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021e4c:	fb06 bb03 	mla	fp, r6, r3, fp
 8021e50:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021e52:	fb02 0007 	mla	r0, r2, r7, r0
 8021e56:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021e58:	fb02 bb03 	mla	fp, r2, r3, fp
 8021e5c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021e5e:	fb04 0007 	mla	r0, r4, r7, r0
 8021e62:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8021e66:	fb17 f701 	smulbb	r7, r7, r1
 8021e6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021e6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021e70:	fb00 700e 	mla	r0, r0, lr, r7
 8021e74:	fb06 9101 	mla	r1, r6, r1, r9
 8021e78:	b280      	uxth	r0, r0
 8021e7a:	1c47      	adds	r7, r0, #1
 8021e7c:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021e80:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021e82:	1200      	asrs	r0, r0, #8
 8021e84:	f805 0c06 	strb.w	r0, [r5, #-6]
 8021e88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021e8a:	fb02 1100 	mla	r1, r2, r0, r1
 8021e8e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8021e90:	fb04 1100 	mla	r1, r4, r0, r1
 8021e94:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8021e98:	fb04 b403 	mla	r4, r4, r3, fp
 8021e9c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8021ea0:	fb10 f007 	smulbb	r0, r0, r7
 8021ea4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021ea8:	fb13 f307 	smulbb	r3, r3, r7
 8021eac:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021eb0:	fb01 010e 	mla	r1, r1, lr, r0
 8021eb4:	fb04 340e 	mla	r4, r4, lr, r3
 8021eb8:	b289      	uxth	r1, r1
 8021eba:	b2a4      	uxth	r4, r4
 8021ebc:	1c48      	adds	r0, r1, #1
 8021ebe:	1c63      	adds	r3, r4, #1
 8021ec0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021ec4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021ec8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021eca:	1209      	asrs	r1, r1, #8
 8021ecc:	1224      	asrs	r4, r4, #8
 8021ece:	449a      	add	sl, r3
 8021ed0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021ed2:	f805 1c05 	strb.w	r1, [r5, #-5]
 8021ed6:	f805 4c04 	strb.w	r4, [r5, #-4]
 8021eda:	4498      	add	r8, r3
 8021edc:	e707      	b.n	8021cee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8021ede:	b01f      	add	sp, #124	@ 0x7c
 8021ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021ee4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ee8:	b087      	sub	sp, #28
 8021eea:	780d      	ldrb	r5, [r1, #0]
 8021eec:	784c      	ldrb	r4, [r1, #1]
 8021eee:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8021ef2:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8021ef6:	9004      	str	r0, [sp, #16]
 8021ef8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8021efc:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8021f00:	9005      	str	r0, [sp, #20]
 8021f02:	fb06 bc03 	mla	ip, r6, r3, fp
 8021f06:	2e00      	cmp	r6, #0
 8021f08:	7888      	ldrb	r0, [r1, #2]
 8021f0a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021f0e:	eb02 090c 	add.w	r9, r2, ip
 8021f12:	f2c0 8084 	blt.w	802201e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8021f16:	42b7      	cmp	r7, r6
 8021f18:	f340 8081 	ble.w	802201e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8021f1c:	f1bb 0f00 	cmp.w	fp, #0
 8021f20:	db79      	blt.n	8022016 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021f22:	455b      	cmp	r3, fp
 8021f24:	dd77      	ble.n	8022016 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021f26:	f812 200c 	ldrb.w	r2, [r2, ip]
 8021f2a:	9201      	str	r2, [sp, #4]
 8021f2c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021f30:	9202      	str	r2, [sp, #8]
 8021f32:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021f36:	9203      	str	r2, [sp, #12]
 8021f38:	f11b 0201 	adds.w	r2, fp, #1
 8021f3c:	d476      	bmi.n	802202c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021f3e:	4293      	cmp	r3, r2
 8021f40:	dd74      	ble.n	802202c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021f42:	9a04      	ldr	r2, [sp, #16]
 8021f44:	2a00      	cmp	r2, #0
 8021f46:	d071      	beq.n	802202c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021f48:	f899 8003 	ldrb.w	r8, [r9, #3]
 8021f4c:	f899 c004 	ldrb.w	ip, [r9, #4]
 8021f50:	f899 a005 	ldrb.w	sl, [r9, #5]
 8021f54:	3601      	adds	r6, #1
 8021f56:	d471      	bmi.n	802203c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021f58:	42b7      	cmp	r7, r6
 8021f5a:	dd6f      	ble.n	802203c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021f5c:	9a05      	ldr	r2, [sp, #20]
 8021f5e:	2a00      	cmp	r2, #0
 8021f60:	d06c      	beq.n	802203c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021f62:	f1bb 0f00 	cmp.w	fp, #0
 8021f66:	db65      	blt.n	8022034 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021f68:	455b      	cmp	r3, fp
 8021f6a:	dd63      	ble.n	8022034 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021f6c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021f70:	f819 e002 	ldrb.w	lr, [r9, r2]
 8021f74:	2203      	movs	r2, #3
 8021f76:	fb03 9602 	mla	r6, r3, r2, r9
 8021f7a:	7877      	ldrb	r7, [r6, #1]
 8021f7c:	78b6      	ldrb	r6, [r6, #2]
 8021f7e:	f11b 0b01 	adds.w	fp, fp, #1
 8021f82:	d40c      	bmi.n	8021f9e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021f84:	455b      	cmp	r3, fp
 8021f86:	dd0a      	ble.n	8021f9e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021f88:	9a04      	ldr	r2, [sp, #16]
 8021f8a:	b142      	cbz	r2, 8021f9e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021f8c:	2203      	movs	r2, #3
 8021f8e:	fb13 2002 	smlabb	r0, r3, r2, r2
 8021f92:	f819 5000 	ldrb.w	r5, [r9, r0]
 8021f96:	fb03 9002 	mla	r0, r3, r2, r9
 8021f9a:	7904      	ldrb	r4, [r0, #4]
 8021f9c:	7940      	ldrb	r0, [r0, #5]
 8021f9e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8021fa2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8021fa6:	fb03 fb02 	mul.w	fp, r3, r2
 8021faa:	011b      	lsls	r3, r3, #4
 8021fac:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8021fb0:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8021fb4:	eba3 030b 	sub.w	r3, r3, fp
 8021fb8:	b292      	uxth	r2, r2
 8021fba:	b29b      	uxth	r3, r3
 8021fbc:	eba9 0902 	sub.w	r9, r9, r2
 8021fc0:	9304      	str	r3, [sp, #16]
 8021fc2:	fa1f f989 	uxth.w	r9, r9
 8021fc6:	fb03 f808 	mul.w	r8, r3, r8
 8021fca:	9b01      	ldr	r3, [sp, #4]
 8021fcc:	fb09 8803 	mla	r8, r9, r3, r8
 8021fd0:	9b04      	ldr	r3, [sp, #16]
 8021fd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8021fd6:	9b02      	ldr	r3, [sp, #8]
 8021fd8:	fb02 880e 	mla	r8, r2, lr, r8
 8021fdc:	fb09 cc03 	mla	ip, r9, r3, ip
 8021fe0:	9b04      	ldr	r3, [sp, #16]
 8021fe2:	fb0b 8805 	mla	r8, fp, r5, r8
 8021fe6:	fb02 c707 	mla	r7, r2, r7, ip
 8021fea:	fb03 f30a 	mul.w	r3, r3, sl
 8021fee:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021ff2:	fb0b 7404 	mla	r4, fp, r4, r7
 8021ff6:	f881 8000 	strb.w	r8, [r1]
 8021ffa:	1224      	asrs	r4, r4, #8
 8021ffc:	704c      	strb	r4, [r1, #1]
 8021ffe:	9c03      	ldr	r4, [sp, #12]
 8022000:	fb09 3904 	mla	r9, r9, r4, r3
 8022004:	fb02 9206 	mla	r2, r2, r6, r9
 8022008:	fb0b 2000 	mla	r0, fp, r0, r2
 802200c:	1200      	asrs	r0, r0, #8
 802200e:	7088      	strb	r0, [r1, #2]
 8022010:	b007      	add	sp, #28
 8022012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022016:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802201a:	9501      	str	r5, [sp, #4]
 802201c:	e78c      	b.n	8021f38 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 802201e:	4682      	mov	sl, r0
 8022020:	46a4      	mov	ip, r4
 8022022:	46a8      	mov	r8, r5
 8022024:	9501      	str	r5, [sp, #4]
 8022026:	e9cd 4002 	strd	r4, r0, [sp, #8]
 802202a:	e793      	b.n	8021f54 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802202c:	4682      	mov	sl, r0
 802202e:	46a4      	mov	ip, r4
 8022030:	46a8      	mov	r8, r5
 8022032:	e78f      	b.n	8021f54 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8022034:	4606      	mov	r6, r0
 8022036:	4627      	mov	r7, r4
 8022038:	46ae      	mov	lr, r5
 802203a:	e7a0      	b.n	8021f7e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802203c:	4606      	mov	r6, r0
 802203e:	4627      	mov	r7, r4
 8022040:	46ae      	mov	lr, r5
 8022042:	e7ac      	b.n	8021f9e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08022044 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022048:	b09b      	sub	sp, #108	@ 0x6c
 802204a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802204c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802204e:	9019      	str	r0, [sp, #100]	@ 0x64
 8022050:	9109      	str	r1, [sp, #36]	@ 0x24
 8022052:	6850      	ldr	r0, [r2, #4]
 8022054:	9306      	str	r3, [sp, #24]
 8022056:	6812      	ldr	r2, [r2, #0]
 8022058:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802205c:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8022060:	fb00 1303 	mla	r3, r0, r3, r1
 8022064:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022068:	18d3      	adds	r3, r2, r3
 802206a:	9307      	str	r3, [sp, #28]
 802206c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802206e:	681b      	ldr	r3, [r3, #0]
 8022070:	9308      	str	r3, [sp, #32]
 8022072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022074:	2b00      	cmp	r3, #0
 8022076:	dc03      	bgt.n	8022080 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022078:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802207a:	2b00      	cmp	r3, #0
 802207c:	f340 81ab 	ble.w	80223d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022080:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022082:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022086:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802208a:	1e48      	subs	r0, r1, #1
 802208c:	1e55      	subs	r5, r2, #1
 802208e:	9b06      	ldr	r3, [sp, #24]
 8022090:	2b00      	cmp	r3, #0
 8022092:	f340 80b1 	ble.w	80221f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022096:	ea5f 462b 	movs.w	r6, fp, asr #16
 802209a:	ea4f 4324 	mov.w	r3, r4, asr #16
 802209e:	d406      	bmi.n	80220ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80220a0:	4286      	cmp	r6, r0
 80220a2:	da04      	bge.n	80220ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	db02      	blt.n	80220ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80220a8:	42ab      	cmp	r3, r5
 80220aa:	f2c0 80a6 	blt.w	80221fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80220ae:	3601      	adds	r6, #1
 80220b0:	f100 8097 	bmi.w	80221e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80220b4:	42b1      	cmp	r1, r6
 80220b6:	f2c0 8094 	blt.w	80221e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80220ba:	3301      	adds	r3, #1
 80220bc:	f100 8091 	bmi.w	80221e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80220c0:	429a      	cmp	r2, r3
 80220c2:	f2c0 808e 	blt.w	80221e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80220c6:	9b06      	ldr	r3, [sp, #24]
 80220c8:	9e07      	ldr	r6, [sp, #28]
 80220ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80220cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	f340 80b0 	ble.w	8022234 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80220d4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80220d6:	1425      	asrs	r5, r4, #16
 80220d8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80220da:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80220de:	68c7      	ldr	r7, [r0, #12]
 80220e0:	ea5f 402b 	movs.w	r0, fp, asr #16
 80220e4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80220e8:	689b      	ldr	r3, [r3, #8]
 80220ea:	f100 80ea 	bmi.w	80222c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80220ee:	f103 3cff 	add.w	ip, r3, #4294967295
 80220f2:	4560      	cmp	r0, ip
 80220f4:	f280 80e5 	bge.w	80222c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80220f8:	2d00      	cmp	r5, #0
 80220fa:	f2c0 80e2 	blt.w	80222c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80220fe:	f107 3cff 	add.w	ip, r7, #4294967295
 8022102:	4565      	cmp	r5, ip
 8022104:	f280 80dd 	bge.w	80222c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022108:	b21b      	sxth	r3, r3
 802210a:	fb05 0003 	mla	r0, r5, r3, r0
 802210e:	9d08      	ldr	r5, [sp, #32]
 8022110:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022114:	182f      	adds	r7, r5, r0
 8022116:	5c2d      	ldrb	r5, [r5, r0]
 8022118:	7878      	ldrb	r0, [r7, #1]
 802211a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802211e:	900c      	str	r0, [sp, #48]	@ 0x30
 8022120:	f897 9003 	ldrb.w	r9, [r7, #3]
 8022124:	f897 8004 	ldrb.w	r8, [r7, #4]
 8022128:	f897 a005 	ldrb.w	sl, [r7, #5]
 802212c:	b1c9      	cbz	r1, 8022162 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802212e:	f04f 0c03 	mov.w	ip, #3
 8022132:	f06f 0004 	mvn.w	r0, #4
 8022136:	3705      	adds	r7, #5
 8022138:	fb13 030c 	smlabb	r3, r3, ip, r0
 802213c:	eb07 0c03 	add.w	ip, r7, r3
 8022140:	5cfb      	ldrb	r3, [r7, r3]
 8022142:	930d      	str	r3, [sp, #52]	@ 0x34
 8022144:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022148:	930f      	str	r3, [sp, #60]	@ 0x3c
 802214a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802214e:	9311      	str	r3, [sp, #68]	@ 0x44
 8022150:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8022154:	930e      	str	r3, [sp, #56]	@ 0x38
 8022156:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802215a:	9310      	str	r3, [sp, #64]	@ 0x40
 802215c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8022160:	9312      	str	r3, [sp, #72]	@ 0x48
 8022162:	b292      	uxth	r2, r2
 8022164:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022166:	b289      	uxth	r1, r1
 8022168:	fb02 f301 	mul.w	r3, r2, r1
 802216c:	0112      	lsls	r2, r2, #4
 802216e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022172:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8022176:	1ad2      	subs	r2, r2, r3
 8022178:	b289      	uxth	r1, r1
 802217a:	b292      	uxth	r2, r2
 802217c:	1a7f      	subs	r7, r7, r1
 802217e:	fb02 f909 	mul.w	r9, r2, r9
 8022182:	b2bf      	uxth	r7, r7
 8022184:	fb02 f808 	mul.w	r8, r2, r8
 8022188:	fb02 fa0a 	mul.w	sl, r2, sl
 802218c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802218e:	fb07 9905 	mla	r9, r7, r5, r9
 8022192:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022194:	fb07 8800 	mla	r8, r7, r0, r8
 8022198:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802219a:	fb07 aa0e 	mla	sl, r7, lr, sl
 802219e:	fb01 9905 	mla	r9, r1, r5, r9
 80221a2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80221a4:	fb01 8800 	mla	r8, r1, r0, r8
 80221a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80221aa:	fb01 a102 	mla	r1, r1, r2, sl
 80221ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80221b0:	fb03 9905 	mla	r9, r3, r5, r9
 80221b4:	fb03 8800 	mla	r8, r3, r0, r8
 80221b8:	fb03 1302 	mla	r3, r3, r2, r1
 80221bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80221c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80221c4:	121b      	asrs	r3, r3, #8
 80221c6:	f886 9000 	strb.w	r9, [r6]
 80221ca:	f886 8001 	strb.w	r8, [r6, #1]
 80221ce:	70b3      	strb	r3, [r6, #2]
 80221d0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80221d2:	3603      	adds	r6, #3
 80221d4:	449b      	add	fp, r3
 80221d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80221d8:	441c      	add	r4, r3
 80221da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80221dc:	3b01      	subs	r3, #1
 80221de:	930a      	str	r3, [sp, #40]	@ 0x28
 80221e0:	e774      	b.n	80220cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80221e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80221e4:	449b      	add	fp, r3
 80221e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80221e8:	441c      	add	r4, r3
 80221ea:	9b06      	ldr	r3, [sp, #24]
 80221ec:	3b01      	subs	r3, #1
 80221ee:	9306      	str	r3, [sp, #24]
 80221f0:	9b07      	ldr	r3, [sp, #28]
 80221f2:	3303      	adds	r3, #3
 80221f4:	9307      	str	r3, [sp, #28]
 80221f6:	e74a      	b.n	802208e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80221f8:	d024      	beq.n	8022244 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80221fa:	9b06      	ldr	r3, [sp, #24]
 80221fc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80221fe:	3b01      	subs	r3, #1
 8022200:	fb00 b003 	mla	r0, r0, r3, fp
 8022204:	1400      	asrs	r0, r0, #16
 8022206:	f53f af5e 	bmi.w	80220c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802220a:	3901      	subs	r1, #1
 802220c:	4288      	cmp	r0, r1
 802220e:	f6bf af5a 	bge.w	80220c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022212:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022214:	fb01 4303 	mla	r3, r1, r3, r4
 8022218:	141b      	asrs	r3, r3, #16
 802221a:	f53f af54 	bmi.w	80220c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802221e:	3a01      	subs	r2, #1
 8022220:	4293      	cmp	r3, r2
 8022222:	f6bf af50 	bge.w	80220c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022226:	9b07      	ldr	r3, [sp, #28]
 8022228:	f8dd e018 	ldr.w	lr, [sp, #24]
 802222c:	1cde      	adds	r6, r3, #3
 802222e:	f1be 0f00 	cmp.w	lr, #0
 8022232:	dc5f      	bgt.n	80222f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022234:	9b06      	ldr	r3, [sp, #24]
 8022236:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802223a:	9b07      	ldr	r3, [sp, #28]
 802223c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022240:	4423      	add	r3, r4
 8022242:	9307      	str	r3, [sp, #28]
 8022244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022246:	2b00      	cmp	r3, #0
 8022248:	f340 80c5 	ble.w	80223d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802224c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022250:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022252:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022256:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802225a:	eef0 6a62 	vmov.f32	s13, s5
 802225e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022262:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022266:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802226a:	ee16 ba90 	vmov	fp, s13
 802226e:	eef0 6a43 	vmov.f32	s13, s6
 8022272:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022276:	ee16 4a90 	vmov	r4, s13
 802227a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802227e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022282:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022286:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802228a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802228e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022292:	ee12 2a90 	vmov	r2, s5
 8022296:	eef0 2a47 	vmov.f32	s5, s14
 802229a:	fb92 f3f3 	sdiv	r3, r2, r3
 802229e:	ee13 2a10 	vmov	r2, s6
 80222a2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80222a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80222a6:	eeb0 3a67 	vmov.f32	s6, s15
 80222aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80222ae:	9328      	str	r3, [sp, #160]	@ 0xa0
 80222b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80222b4:	3b01      	subs	r3, #1
 80222b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80222b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80222ba:	bf08      	it	eq
 80222bc:	4613      	moveq	r3, r2
 80222be:	9306      	str	r3, [sp, #24]
 80222c0:	e6d7      	b.n	8022072 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80222c2:	f110 0c01 	adds.w	ip, r0, #1
 80222c6:	d483      	bmi.n	80221d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80222c8:	4563      	cmp	r3, ip
 80222ca:	db81      	blt.n	80221d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80222cc:	f115 0c01 	adds.w	ip, r5, #1
 80222d0:	f53f af7e 	bmi.w	80221d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80222d4:	4567      	cmp	r7, ip
 80222d6:	f6ff af7b 	blt.w	80221d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80222da:	b23f      	sxth	r7, r7
 80222dc:	b21b      	sxth	r3, r3
 80222de:	9700      	str	r7, [sp, #0]
 80222e0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80222e4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80222e8:	9a08      	ldr	r2, [sp, #32]
 80222ea:	4631      	mov	r1, r6
 80222ec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80222ee:	f7ff fdf9 	bl	8021ee4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80222f2:	e76d      	b.n	80221d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80222f4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80222f6:	ea4f 402b 	mov.w	r0, fp, asr #16
 80222fa:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80222fe:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8022302:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8022306:	1421      	asrs	r1, r4, #16
 8022308:	930a      	str	r3, [sp, #40]	@ 0x28
 802230a:	fb0c 0101 	mla	r1, ip, r1, r0
 802230e:	9808      	ldr	r0, [sp, #32]
 8022310:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022314:	1845      	adds	r5, r0, r1
 8022316:	5c40      	ldrb	r0, [r0, r1]
 8022318:	796f      	ldrb	r7, [r5, #5]
 802231a:	7869      	ldrb	r1, [r5, #1]
 802231c:	f895 8002 	ldrb.w	r8, [r5, #2]
 8022320:	f895 a003 	ldrb.w	sl, [r5, #3]
 8022324:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022328:	970c      	str	r7, [sp, #48]	@ 0x30
 802232a:	b1a2      	cbz	r2, 8022356 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802232c:	2703      	movs	r7, #3
 802232e:	f06f 0304 	mvn.w	r3, #4
 8022332:	3505      	adds	r5, #5
 8022334:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022338:	eb05 070c 	add.w	r7, r5, ip
 802233c:	f815 500c 	ldrb.w	r5, [r5, ip]
 8022340:	9513      	str	r5, [sp, #76]	@ 0x4c
 8022342:	787d      	ldrb	r5, [r7, #1]
 8022344:	9515      	str	r5, [sp, #84]	@ 0x54
 8022346:	78bd      	ldrb	r5, [r7, #2]
 8022348:	9517      	str	r5, [sp, #92]	@ 0x5c
 802234a:	78fd      	ldrb	r5, [r7, #3]
 802234c:	9514      	str	r5, [sp, #80]	@ 0x50
 802234e:	793d      	ldrb	r5, [r7, #4]
 8022350:	9516      	str	r5, [sp, #88]	@ 0x58
 8022352:	797d      	ldrb	r5, [r7, #5]
 8022354:	9518      	str	r5, [sp, #96]	@ 0x60
 8022356:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802235a:	b292      	uxth	r2, r2
 802235c:	3603      	adds	r6, #3
 802235e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022362:	fb03 f502 	mul.w	r5, r3, r2
 8022366:	011b      	lsls	r3, r3, #4
 8022368:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802236c:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8022370:	1b5b      	subs	r3, r3, r5
 8022372:	b292      	uxth	r2, r2
 8022374:	b29b      	uxth	r3, r3
 8022376:	1abf      	subs	r7, r7, r2
 8022378:	fb03 f909 	mul.w	r9, r3, r9
 802237c:	b2bf      	uxth	r7, r7
 802237e:	fb03 fa0a 	mul.w	sl, r3, sl
 8022382:	fb07 9901 	mla	r9, r7, r1, r9
 8022386:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8022388:	fb07 aa00 	mla	sl, r7, r0, sl
 802238c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802238e:	fb02 9901 	mla	r9, r2, r1, r9
 8022392:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8022394:	fb02 aa00 	mla	sl, r2, r0, sl
 8022398:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802239a:	fb05 9901 	mla	r9, r5, r1, r9
 802239e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80223a0:	fb05 aa00 	mla	sl, r5, r0, sl
 80223a4:	434b      	muls	r3, r1
 80223a6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80223a8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80223ac:	fb07 3308 	mla	r3, r7, r8, r3
 80223b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80223b4:	f806 ac06 	strb.w	sl, [r6, #-6]
 80223b8:	fb02 3201 	mla	r2, r2, r1, r3
 80223bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80223be:	f806 9c05 	strb.w	r9, [r6, #-5]
 80223c2:	fb05 2503 	mla	r5, r5, r3, r2
 80223c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80223c8:	122d      	asrs	r5, r5, #8
 80223ca:	449b      	add	fp, r3
 80223cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80223ce:	f806 5c04 	strb.w	r5, [r6, #-4]
 80223d2:	441c      	add	r4, r3
 80223d4:	e72b      	b.n	802222e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80223d6:	b01b      	add	sp, #108	@ 0x6c
 80223d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080223dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80223dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223e0:	b087      	sub	sp, #28
 80223e2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80223e6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80223ea:	fb05 7003 	mla	r0, r5, r3, r7
 80223ee:	2d00      	cmp	r5, #0
 80223f0:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80223f4:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80223f8:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80223fc:	f2c0 811f 	blt.w	802263e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8022400:	45a8      	cmp	r8, r5
 8022402:	f340 811c 	ble.w	802263e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8022406:	2f00      	cmp	r7, #0
 8022408:	f2c0 8117 	blt.w	802263a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802240c:	42bb      	cmp	r3, r7
 802240e:	f340 8114 	ble.w	802263a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8022412:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8022416:	1c7a      	adds	r2, r7, #1
 8022418:	f100 8114 	bmi.w	8022644 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802241c:	4293      	cmp	r3, r2
 802241e:	f340 8111 	ble.w	8022644 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8022422:	2c00      	cmp	r4, #0
 8022424:	f000 8110 	beq.w	8022648 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8022428:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802242c:	3501      	adds	r5, #1
 802242e:	f100 810f 	bmi.w	8022650 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8022432:	45a8      	cmp	r8, r5
 8022434:	f340 810c 	ble.w	8022650 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8022438:	f1be 0f00 	cmp.w	lr, #0
 802243c:	f000 810b 	beq.w	8022656 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8022440:	2f00      	cmp	r7, #0
 8022442:	f2c0 8103 	blt.w	802264c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8022446:	42bb      	cmp	r3, r7
 8022448:	f340 8100 	ble.w	802264c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802244c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8022450:	3701      	adds	r7, #1
 8022452:	f100 8103 	bmi.w	802265c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8022456:	42bb      	cmp	r3, r7
 8022458:	f340 8100 	ble.w	802265c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802245c:	2c00      	cmp	r4, #0
 802245e:	f000 80ff 	beq.w	8022660 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8022462:	3301      	adds	r3, #1
 8022464:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022468:	fa1f fc84 	uxth.w	ip, r4
 802246c:	fa1f fe8e 	uxth.w	lr, lr
 8022470:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022474:	fb0c f90e 	mul.w	r9, ip, lr
 8022478:	0e13      	lsrs	r3, r2, #24
 802247a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802247e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8022482:	9302      	str	r3, [sp, #8]
 8022484:	ebac 0709 	sub.w	r7, ip, r9
 8022488:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802248c:	fa1f f48e 	uxth.w	r4, lr
 8022490:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8022494:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8022498:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 802249c:	fb0a fe0e 	mul.w	lr, sl, lr
 80224a0:	1b1b      	subs	r3, r3, r4
 80224a2:	fb0a f606 	mul.w	r6, sl, r6
 80224a6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80224aa:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80224ae:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80224b2:	b29b      	uxth	r3, r3
 80224b4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80224b8:	b2bf      	uxth	r7, r7
 80224ba:	9301      	str	r3, [sp, #4]
 80224bc:	44e6      	add	lr, ip
 80224be:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80224c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224c6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80224ca:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80224ce:	9303      	str	r3, [sp, #12]
 80224d0:	0a33      	lsrs	r3, r6, #8
 80224d2:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80224d6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80224da:	9304      	str	r3, [sp, #16]
 80224dc:	fb0b f606 	mul.w	r6, fp, r6
 80224e0:	fb0b f000 	mul.w	r0, fp, r0
 80224e4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80224e8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80224ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80224f0:	44b6      	add	lr, r6
 80224f2:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80224f6:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80224fa:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80224fe:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022502:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022506:	fb08 f606 	mul.w	r6, r8, r6
 802250a:	0a03      	lsrs	r3, r0, #8
 802250c:	fb08 f505 	mul.w	r5, r8, r5
 8022510:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022514:	0a30      	lsrs	r0, r6, #8
 8022516:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802251a:	9305      	str	r3, [sp, #20]
 802251c:	0e13      	lsrs	r3, r2, #24
 802251e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022522:	fb0e fe07 	mul.w	lr, lr, r7
 8022526:	4430      	add	r0, r6
 8022528:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802252c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022530:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8022534:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022538:	0a00      	lsrs	r0, r0, #8
 802253a:	435e      	muls	r6, r3
 802253c:	0a2d      	lsrs	r5, r5, #8
 802253e:	435a      	muls	r2, r3
 8022540:	9b03      	ldr	r3, [sp, #12]
 8022542:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8022546:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802254a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802254e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022552:	44b4      	add	ip, r6
 8022554:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8022558:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802255c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8022560:	9e01      	ldr	r6, [sp, #4]
 8022562:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022566:	fb03 ee06 	mla	lr, r3, r6, lr
 802256a:	9b04      	ldr	r3, [sp, #16]
 802256c:	0a12      	lsrs	r2, r2, #8
 802256e:	fb0c ee09 	mla	lr, ip, r9, lr
 8022572:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8022576:	9b05      	ldr	r3, [sp, #20]
 8022578:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802257c:	fb00 ee04 	mla	lr, r0, r4, lr
 8022580:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022584:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8022588:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 802258c:	9b01      	ldr	r3, [sp, #4]
 802258e:	fb07 fe0e 	mul.w	lr, r7, lr
 8022592:	fb07 f70b 	mul.w	r7, r7, fp
 8022596:	fb03 ee06 	mla	lr, r3, r6, lr
 802259a:	fb03 730a 	mla	r3, r3, sl, r7
 802259e:	fb09 e202 	mla	r2, r9, r2, lr
 80225a2:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80225a6:	fb04 2e0e 	mla	lr, r4, lr, r2
 80225aa:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80225ae:	fb04 3408 	mla	r4, r4, r8, r3
 80225b2:	9b02      	ldr	r3, [sp, #8]
 80225b4:	b292      	uxth	r2, r2
 80225b6:	fb09 4903 	mla	r9, r9, r3, r4
 80225ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80225be:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80225c2:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80225c6:	fb09 f902 	mul.w	r9, r9, r2
 80225ca:	ea40 0e0e 	orr.w	lr, r0, lr
 80225ce:	f109 0301 	add.w	r3, r9, #1
 80225d2:	fa5f f08e 	uxtb.w	r0, lr
 80225d6:	fb10 f002 	smulbb	r0, r0, r2
 80225da:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80225de:	780b      	ldrb	r3, [r1, #0]
 80225e0:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 80225e4:	fa5f f989 	uxtb.w	r9, r9
 80225e8:	fb03 0309 	mla	r3, r3, r9, r0
 80225ec:	b29b      	uxth	r3, r3
 80225ee:	1c58      	adds	r0, r3, #1
 80225f0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80225f4:	7848      	ldrb	r0, [r1, #1]
 80225f6:	fb10 f009 	smulbb	r0, r0, r9
 80225fa:	121b      	asrs	r3, r3, #8
 80225fc:	700b      	strb	r3, [r1, #0]
 80225fe:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022602:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022606:	fb03 0302 	mla	r3, r3, r2, r0
 802260a:	b29b      	uxth	r3, r3
 802260c:	1c58      	adds	r0, r3, #1
 802260e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022612:	121b      	asrs	r3, r3, #8
 8022614:	704b      	strb	r3, [r1, #1]
 8022616:	788b      	ldrb	r3, [r1, #2]
 8022618:	fb13 f909 	smulbb	r9, r3, r9
 802261c:	fb0e 9e02 	mla	lr, lr, r2, r9
 8022620:	fa1f fe8e 	uxth.w	lr, lr
 8022624:	f10e 0301 	add.w	r3, lr, #1
 8022628:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802262c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022630:	f881 e002 	strb.w	lr, [r1, #2]
 8022634:	b007      	add	sp, #28
 8022636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802263a:	2600      	movs	r6, #0
 802263c:	e6eb      	b.n	8022416 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 802263e:	2000      	movs	r0, #0
 8022640:	4606      	mov	r6, r0
 8022642:	e6f3      	b.n	802242c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022644:	2000      	movs	r0, #0
 8022646:	e6f1      	b.n	802242c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022648:	4620      	mov	r0, r4
 802264a:	e6ef      	b.n	802242c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802264c:	2500      	movs	r5, #0
 802264e:	e6ff      	b.n	8022450 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8022650:	2200      	movs	r2, #0
 8022652:	4615      	mov	r5, r2
 8022654:	e708      	b.n	8022468 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022656:	4672      	mov	r2, lr
 8022658:	4675      	mov	r5, lr
 802265a:	e705      	b.n	8022468 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802265c:	2200      	movs	r2, #0
 802265e:	e703      	b.n	8022468 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022660:	4622      	mov	r2, r4
 8022662:	e701      	b.n	8022468 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08022664 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022668:	b09d      	sub	sp, #116	@ 0x74
 802266a:	9219      	str	r2, [sp, #100]	@ 0x64
 802266c:	9307      	str	r3, [sp, #28]
 802266e:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8022670:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8022674:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022676:	931a      	str	r3, [sp, #104]	@ 0x68
 8022678:	6850      	ldr	r0, [r2, #4]
 802267a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802267c:	6812      	ldr	r2, [r2, #0]
 802267e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8022682:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8022686:	fb00 1303 	mla	r3, r0, r3, r1
 802268a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802268e:	18d3      	adds	r3, r2, r3
 8022690:	930a      	str	r3, [sp, #40]	@ 0x28
 8022692:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022694:	681b      	ldr	r3, [r3, #0]
 8022696:	9310      	str	r3, [sp, #64]	@ 0x40
 8022698:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802269c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802269e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80226a0:	2b00      	cmp	r3, #0
 80226a2:	dc03      	bgt.n	80226ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80226a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	f340 8368 	ble.w	8022d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80226ac:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80226ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80226b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80226b6:	1e48      	subs	r0, r1, #1
 80226b8:	1e57      	subs	r7, r2, #1
 80226ba:	9b07      	ldr	r3, [sp, #28]
 80226bc:	2b00      	cmp	r3, #0
 80226be:	f340 8187 	ble.w	80229d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80226c2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80226c6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80226ca:	d406      	bmi.n	80226da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80226cc:	4584      	cmp	ip, r0
 80226ce:	da04      	bge.n	80226da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	db02      	blt.n	80226da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80226d4:	42bb      	cmp	r3, r7
 80226d6:	f2c0 817c 	blt.w	80229d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80226da:	f11c 0c01 	adds.w	ip, ip, #1
 80226de:	f100 816c 	bmi.w	80229ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80226e2:	4561      	cmp	r1, ip
 80226e4:	f2c0 8169 	blt.w	80229ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80226e8:	3301      	adds	r3, #1
 80226ea:	f100 8166 	bmi.w	80229ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80226ee:	429a      	cmp	r2, r3
 80226f0:	f2c0 8163 	blt.w	80229ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80226f4:	9b07      	ldr	r3, [sp, #28]
 80226f6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80226f8:	9318      	str	r3, [sp, #96]	@ 0x60
 80226fa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	f340 8186 	ble.w	8022a0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022702:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022704:	142a      	asrs	r2, r5, #16
 8022706:	ea4f 4026 	mov.w	r0, r6, asr #16
 802270a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802270e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022712:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022716:	f100 81cb 	bmi.w	8022ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802271a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802271e:	4542      	cmp	r2, r8
 8022720:	f280 81c6 	bge.w	8022ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022724:	2800      	cmp	r0, #0
 8022726:	f2c0 81c3 	blt.w	8022ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802272a:	f103 38ff 	add.w	r8, r3, #4294967295
 802272e:	4540      	cmp	r0, r8
 8022730:	f280 81be 	bge.w	8022ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022734:	fa0f f38e 	sxth.w	r3, lr
 8022738:	fb00 2203 	mla	r2, r0, r3, r2
 802273c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802273e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022742:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022746:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802274a:	2900      	cmp	r1, #0
 802274c:	f000 81a6 	beq.w	8022a9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8022750:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022754:	900c      	str	r0, [sp, #48]	@ 0x30
 8022756:	0e00      	lsrs	r0, r0, #24
 8022758:	9013      	str	r0, [sp, #76]	@ 0x4c
 802275a:	f1bc 0f00 	cmp.w	ip, #0
 802275e:	d00f      	beq.n	8022780 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8022764:	3b01      	subs	r3, #1
 8022766:	009b      	lsls	r3, r3, #2
 8022768:	3304      	adds	r3, #4
 802276a:	eb08 0003 	add.w	r0, r8, r3
 802276e:	f858 3003 	ldr.w	r3, [r8, r3]
 8022772:	9308      	str	r3, [sp, #32]
 8022774:	0e1b      	lsrs	r3, r3, #24
 8022776:	9311      	str	r3, [sp, #68]	@ 0x44
 8022778:	6843      	ldr	r3, [r0, #4]
 802277a:	930d      	str	r3, [sp, #52]	@ 0x34
 802277c:	0e1b      	lsrs	r3, r3, #24
 802277e:	9314      	str	r3, [sp, #80]	@ 0x50
 8022780:	b289      	uxth	r1, r1
 8022782:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022784:	fa1f fc8c 	uxth.w	ip, ip
 8022788:	0108      	lsls	r0, r1, #4
 802278a:	fb01 f90c 	mul.w	r9, r1, ip
 802278e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8022792:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8022796:	eba0 0809 	sub.w	r8, r0, r9
 802279a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802279c:	fa1f f18c 	uxth.w	r1, ip
 80227a0:	fa1f f888 	uxth.w	r8, r8
 80227a4:	1a5b      	subs	r3, r3, r1
 80227a6:	fb08 f000 	mul.w	r0, r8, r0
 80227aa:	b29b      	uxth	r3, r3
 80227ac:	fb03 000e 	mla	r0, r3, lr, r0
 80227b0:	fb01 0004 	mla	r0, r1, r4, r0
 80227b4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80227b6:	fb09 0004 	mla	r0, r9, r4, r0
 80227ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80227be:	2800      	cmp	r0, #0
 80227c0:	f000 80f2 	beq.w	80229a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80227c4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80227c8:	d01b      	beq.n	8022802 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80227ca:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80227ce:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80227d2:	fb0e fa0a 	mul.w	sl, lr, sl
 80227d6:	fb0e fe02 	mul.w	lr, lr, r2
 80227da:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80227de:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80227e2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80227e6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80227ea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80227ee:	4452      	add	r2, sl
 80227f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227f4:	0a12      	lsrs	r2, r2, #8
 80227f6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80227fa:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80227fe:	ea42 020c 	orr.w	r2, r2, ip
 8022802:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022804:	2cff      	cmp	r4, #255	@ 0xff
 8022806:	d021      	beq.n	802284c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022808:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802280a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802280e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022810:	fb04 fb0b 	mul.w	fp, r4, fp
 8022814:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022816:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802281a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802281c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022820:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022824:	fb04 fa0a 	mul.w	sl, r4, sl
 8022828:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802282c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022830:	44de      	add	lr, fp
 8022832:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022836:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802283a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802283e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022842:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022846:	ea4e 040a 	orr.w	r4, lr, sl
 802284a:	940c      	str	r4, [sp, #48]	@ 0x30
 802284c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802284e:	2cff      	cmp	r4, #255	@ 0xff
 8022850:	d021      	beq.n	8022896 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8022852:	9c08      	ldr	r4, [sp, #32]
 8022854:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8022858:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802285a:	fb04 fb0b 	mul.w	fp, r4, fp
 802285e:	9c08      	ldr	r4, [sp, #32]
 8022860:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022864:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022866:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802286a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802286e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022872:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022876:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802287a:	44de      	add	lr, fp
 802287c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022880:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022884:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022888:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802288c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022890:	ea4e 040a 	orr.w	r4, lr, sl
 8022894:	9408      	str	r4, [sp, #32]
 8022896:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022898:	2cff      	cmp	r4, #255	@ 0xff
 802289a:	d021      	beq.n	80228e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802289c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802289e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80228a2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80228a4:	fb04 fb0b 	mul.w	fp, r4, fp
 80228a8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80228aa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80228ae:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80228b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80228b4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80228b8:	fb04 fa0a 	mul.w	sl, r4, sl
 80228bc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80228c0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80228c4:	44de      	add	lr, fp
 80228c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80228ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80228ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80228d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80228d6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80228da:	ea4e 040a 	orr.w	r4, lr, sl
 80228de:	940d      	str	r4, [sp, #52]	@ 0x34
 80228e0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80228e2:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80228e6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80228ea:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80228ee:	9c08      	ldr	r4, [sp, #32]
 80228f0:	fb08 fc0c 	mul.w	ip, r8, ip
 80228f4:	fb03 cc0e 	mla	ip, r3, lr, ip
 80228f8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80228fc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80228fe:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022902:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022906:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022908:	fb09 cc0e 	mla	ip, r9, lr, ip
 802290c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022910:	fb08 f80e 	mul.w	r8, r8, lr
 8022914:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022918:	fb03 8202 	mla	r2, r3, r2, r8
 802291c:	9b08      	ldr	r3, [sp, #32]
 802291e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022922:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8022926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022928:	fb01 220a 	mla	r2, r1, sl, r2
 802292c:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8022930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022932:	fb09 2901 	mla	r9, r9, r1, r2
 8022936:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022938:	4343      	muls	r3, r0
 802293a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802293e:	1c58      	adds	r0, r3, #1
 8022940:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8022944:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022948:	783b      	ldrb	r3, [r7, #0]
 802294a:	ea4c 0c09 	orr.w	ip, ip, r9
 802294e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022952:	fa5f f28c 	uxtb.w	r2, ip
 8022956:	b2c0      	uxtb	r0, r0
 8022958:	fb12 f201 	smulbb	r2, r2, r1
 802295c:	fb03 2300 	mla	r3, r3, r0, r2
 8022960:	b29b      	uxth	r3, r3
 8022962:	1c5a      	adds	r2, r3, #1
 8022964:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022968:	787a      	ldrb	r2, [r7, #1]
 802296a:	fb12 f200 	smulbb	r2, r2, r0
 802296e:	121b      	asrs	r3, r3, #8
 8022970:	703b      	strb	r3, [r7, #0]
 8022972:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022976:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802297a:	fb03 2301 	mla	r3, r3, r1, r2
 802297e:	b29b      	uxth	r3, r3
 8022980:	1c5a      	adds	r2, r3, #1
 8022982:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022986:	121b      	asrs	r3, r3, #8
 8022988:	707b      	strb	r3, [r7, #1]
 802298a:	78bb      	ldrb	r3, [r7, #2]
 802298c:	fb13 f000 	smulbb	r0, r3, r0
 8022990:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022994:	fa1f fc8c 	uxth.w	ip, ip
 8022998:	f10c 0301 	add.w	r3, ip, #1
 802299c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80229a0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80229a4:	f887 c002 	strb.w	ip, [r7, #2]
 80229a8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80229aa:	3703      	adds	r7, #3
 80229ac:	441d      	add	r5, r3
 80229ae:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80229b0:	441e      	add	r6, r3
 80229b2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80229b4:	3b01      	subs	r3, #1
 80229b6:	9318      	str	r3, [sp, #96]	@ 0x60
 80229b8:	e69f      	b.n	80226fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80229ba:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80229bc:	441d      	add	r5, r3
 80229be:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80229c0:	441e      	add	r6, r3
 80229c2:	9b07      	ldr	r3, [sp, #28]
 80229c4:	3b01      	subs	r3, #1
 80229c6:	9307      	str	r3, [sp, #28]
 80229c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80229ca:	3303      	adds	r3, #3
 80229cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80229ce:	e674      	b.n	80226ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80229d0:	d025      	beq.n	8022a1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80229d2:	9b07      	ldr	r3, [sp, #28]
 80229d4:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80229d6:	3b01      	subs	r3, #1
 80229d8:	fb00 5003 	mla	r0, r0, r3, r5
 80229dc:	1400      	asrs	r0, r0, #16
 80229de:	f53f ae89 	bmi.w	80226f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80229e2:	3901      	subs	r1, #1
 80229e4:	4288      	cmp	r0, r1
 80229e6:	f6bf ae85 	bge.w	80226f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80229ea:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80229ec:	fb01 6303 	mla	r3, r1, r3, r6
 80229f0:	141b      	asrs	r3, r3, #16
 80229f2:	f53f ae7f 	bmi.w	80226f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80229f6:	3a01      	subs	r2, #1
 80229f8:	4293      	cmp	r3, r2
 80229fa:	f6bf ae7b 	bge.w	80226f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80229fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022a00:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022a04:	f103 0e03 	add.w	lr, r3, #3
 8022a08:	f1bb 0f00 	cmp.w	fp, #0
 8022a0c:	dc6e      	bgt.n	8022aec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8022a0e:	9b07      	ldr	r3, [sp, #28]
 8022a10:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022a16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022a1a:	4423      	add	r3, r4
 8022a1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a1e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	f340 81ab 	ble.w	8022d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022a2a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022a2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a34:	eef0 6a62 	vmov.f32	s13, s5
 8022a38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a44:	ee16 5a90 	vmov	r5, s13
 8022a48:	eef0 6a43 	vmov.f32	s13, s6
 8022a4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a50:	ee16 6a90 	vmov	r6, s13
 8022a54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a58:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022a64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022a6c:	ee12 2a90 	vmov	r2, s5
 8022a70:	eef0 2a47 	vmov.f32	s5, s14
 8022a74:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a78:	ee13 2a10 	vmov	r2, s6
 8022a7c:	9329      	str	r3, [sp, #164]	@ 0xa4
 8022a7e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022a80:	eeb0 3a67 	vmov.f32	s6, s15
 8022a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a88:	932a      	str	r3, [sp, #168]	@ 0xa8
 8022a8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022a8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022a8e:	3b01      	subs	r3, #1
 8022a90:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022a92:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022a94:	bf08      	it	eq
 8022a96:	4613      	moveq	r3, r2
 8022a98:	9307      	str	r3, [sp, #28]
 8022a9a:	e600      	b.n	802269e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022a9c:	f1bc 0f00 	cmp.w	ip, #0
 8022aa0:	f43f ae6e 	beq.w	8022780 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022aa4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022aa8:	9308      	str	r3, [sp, #32]
 8022aaa:	0e1b      	lsrs	r3, r3, #24
 8022aac:	9311      	str	r3, [sp, #68]	@ 0x44
 8022aae:	e667      	b.n	8022780 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022ab0:	f112 0801 	adds.w	r8, r2, #1
 8022ab4:	f53f af78 	bmi.w	80229a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022ab8:	45c6      	cmp	lr, r8
 8022aba:	f6ff af75 	blt.w	80229a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022abe:	f110 0801 	adds.w	r8, r0, #1
 8022ac2:	f53f af71 	bmi.w	80229a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022ac6:	4543      	cmp	r3, r8
 8022ac8:	f6ff af6e 	blt.w	80229a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022acc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8022ace:	b21b      	sxth	r3, r3
 8022ad0:	9201      	str	r2, [sp, #4]
 8022ad2:	9300      	str	r3, [sp, #0]
 8022ad4:	fa0f f38e 	sxth.w	r3, lr
 8022ad8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022ade:	e9cd c404 	strd	ip, r4, [sp, #16]
 8022ae2:	4639      	mov	r1, r7
 8022ae4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8022ae6:	f7ff fc79 	bl	80223dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022aea:	e75d      	b.n	80229a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022aec:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022aee:	142f      	asrs	r7, r5, #16
 8022af0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022af2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022af6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8022afa:	1433      	asrs	r3, r6, #16
 8022afc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022b00:	fb02 7303 	mla	r3, r2, r3, r7
 8022b04:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8022b08:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022b0c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022b10:	2900      	cmp	r1, #0
 8022b12:	f000 812a 	beq.w	8022d6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022b16:	687c      	ldr	r4, [r7, #4]
 8022b18:	940e      	str	r4, [sp, #56]	@ 0x38
 8022b1a:	0e24      	lsrs	r4, r4, #24
 8022b1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8022b1e:	b178      	cbz	r0, 8022b40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022b20:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8022b24:	3a01      	subs	r2, #1
 8022b26:	0092      	lsls	r2, r2, #2
 8022b28:	3204      	adds	r2, #4
 8022b2a:	eb07 0802 	add.w	r8, r7, r2
 8022b2e:	58ba      	ldr	r2, [r7, r2]
 8022b30:	9209      	str	r2, [sp, #36]	@ 0x24
 8022b32:	0e12      	lsrs	r2, r2, #24
 8022b34:	9212      	str	r2, [sp, #72]	@ 0x48
 8022b36:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8022b3a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8022b3c:	0e12      	lsrs	r2, r2, #24
 8022b3e:	9216      	str	r2, [sp, #88]	@ 0x58
 8022b40:	b289      	uxth	r1, r1
 8022b42:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022b44:	b280      	uxth	r0, r0
 8022b46:	fb01 f900 	mul.w	r9, r1, r0
 8022b4a:	0109      	lsls	r1, r1, #4
 8022b4c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022b50:	eba1 0809 	sub.w	r8, r1, r9
 8022b54:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8022b58:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8022b5a:	b280      	uxth	r0, r0
 8022b5c:	fa1f f888 	uxth.w	r8, r8
 8022b60:	1a12      	subs	r2, r2, r0
 8022b62:	fb08 f101 	mul.w	r1, r8, r1
 8022b66:	b292      	uxth	r2, r2
 8022b68:	fb02 110c 	mla	r1, r2, ip, r1
 8022b6c:	fb00 1104 	mla	r1, r0, r4, r1
 8022b70:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022b72:	fb09 1104 	mla	r1, r9, r4, r1
 8022b76:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022b7a:	2900      	cmp	r1, #0
 8022b7c:	f000 80ec 	beq.w	8022d58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8022b80:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8022b84:	d019      	beq.n	8022bba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8022b86:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8022b8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022b8e:	fb0c fa0a 	mul.w	sl, ip, sl
 8022b92:	fb0c fc03 	mul.w	ip, ip, r3
 8022b96:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022b9a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8022b9e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8022ba2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022ba6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022baa:	4453      	add	r3, sl
 8022bac:	0a3f      	lsrs	r7, r7, #8
 8022bae:	0a1b      	lsrs	r3, r3, #8
 8022bb0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8022bb4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022bb8:	433b      	orrs	r3, r7
 8022bba:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022bbc:	2cff      	cmp	r4, #255	@ 0xff
 8022bbe:	d020      	beq.n	8022c02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8022bc0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022bc2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022bc6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022bc8:	4367      	muls	r7, r4
 8022bca:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022bcc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022bd0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022bd4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8022bd6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022bda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022bde:	fb04 fa0a 	mul.w	sl, r4, sl
 8022be2:	44bc      	add	ip, r7
 8022be4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022be8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022bec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022bf0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022bf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022bf8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022bfc:	ea4c 040a 	orr.w	r4, ip, sl
 8022c00:	940e      	str	r4, [sp, #56]	@ 0x38
 8022c02:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022c04:	2cff      	cmp	r4, #255	@ 0xff
 8022c06:	d020      	beq.n	8022c4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8022c08:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022c0a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022c0e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022c10:	4367      	muls	r7, r4
 8022c12:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022c14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022c18:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022c1c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022c1e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022c22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022c26:	fb04 fa0a 	mul.w	sl, r4, sl
 8022c2a:	44bc      	add	ip, r7
 8022c2c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022c30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022c38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022c3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c40:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022c44:	ea4c 040a 	orr.w	r4, ip, sl
 8022c48:	9409      	str	r4, [sp, #36]	@ 0x24
 8022c4a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022c4c:	2cff      	cmp	r4, #255	@ 0xff
 8022c4e:	d020      	beq.n	8022c92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8022c50:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022c52:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022c56:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022c58:	4367      	muls	r7, r4
 8022c5a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022c5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022c60:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022c64:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022c66:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022c6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022c6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8022c72:	44bc      	add	ip, r7
 8022c74:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022c78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022c80:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022c84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c88:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022c8c:	ea4c 040a 	orr.w	r4, ip, sl
 8022c90:	940f      	str	r4, [sp, #60]	@ 0x3c
 8022c92:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022c94:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8022c98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022c9c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022ca0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022ca2:	fb08 f707 	mul.w	r7, r8, r7
 8022ca6:	fb02 770c 	mla	r7, r2, ip, r7
 8022caa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022cae:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022cb0:	fb00 770c 	mla	r7, r0, ip, r7
 8022cb4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022cb8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022cba:	fb09 770c 	mla	r7, r9, ip, r7
 8022cbe:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8022cc2:	fb08 f80c 	mul.w	r8, r8, ip
 8022cc6:	0a3f      	lsrs	r7, r7, #8
 8022cc8:	fb02 8303 	mla	r3, r2, r3, r8
 8022ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022cce:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8022cd2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8022cd6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8022cd8:	fb00 330a 	mla	r3, r0, sl, r3
 8022cdc:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8022ce0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8022ce2:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022ce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022ce8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022cec:	434b      	muls	r3, r1
 8022cee:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022cf2:	1c59      	adds	r1, r3, #1
 8022cf4:	ea47 070c 	orr.w	r7, r7, ip
 8022cf8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022cfc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022d00:	b2fa      	uxtb	r2, r7
 8022d02:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022d06:	fb12 f200 	smulbb	r2, r2, r0
 8022d0a:	b2c9      	uxtb	r1, r1
 8022d0c:	fb03 2301 	mla	r3, r3, r1, r2
 8022d10:	b29b      	uxth	r3, r3
 8022d12:	1c5a      	adds	r2, r3, #1
 8022d14:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022d18:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022d1c:	fb12 f201 	smulbb	r2, r2, r1
 8022d20:	121b      	asrs	r3, r3, #8
 8022d22:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022d26:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8022d2a:	0c3f      	lsrs	r7, r7, #16
 8022d2c:	fb03 2300 	mla	r3, r3, r0, r2
 8022d30:	b29b      	uxth	r3, r3
 8022d32:	1c5a      	adds	r2, r3, #1
 8022d34:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022d38:	121b      	asrs	r3, r3, #8
 8022d3a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022d3e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022d42:	fb13 f101 	smulbb	r1, r3, r1
 8022d46:	fb07 1700 	mla	r7, r7, r0, r1
 8022d4a:	b2bf      	uxth	r7, r7
 8022d4c:	1c79      	adds	r1, r7, #1
 8022d4e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022d52:	123f      	asrs	r7, r7, #8
 8022d54:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022d58:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8022d5a:	f10e 0e03 	add.w	lr, lr, #3
 8022d5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022d62:	441d      	add	r5, r3
 8022d64:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022d66:	441e      	add	r6, r3
 8022d68:	e64e      	b.n	8022a08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8022d6a:	2800      	cmp	r0, #0
 8022d6c:	f43f aee8 	beq.w	8022b40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022d70:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022d74:	9209      	str	r2, [sp, #36]	@ 0x24
 8022d76:	0e12      	lsrs	r2, r2, #24
 8022d78:	9212      	str	r2, [sp, #72]	@ 0x48
 8022d7a:	e6e1      	b.n	8022b40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022d7c:	b01d      	add	sp, #116	@ 0x74
 8022d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022d82 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8022d82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d86:	b087      	sub	sp, #28
 8022d88:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8022d8c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8022d90:	fb05 7003 	mla	r0, r5, r3, r7
 8022d94:	2d00      	cmp	r5, #0
 8022d96:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8022d9a:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8022d9e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8022da2:	f2c0 810a 	blt.w	8022fba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8022da6:	45a8      	cmp	r8, r5
 8022da8:	f340 8107 	ble.w	8022fba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8022dac:	2f00      	cmp	r7, #0
 8022dae:	f2c0 8102 	blt.w	8022fb6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8022db2:	42bb      	cmp	r3, r7
 8022db4:	f340 80ff 	ble.w	8022fb6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8022db8:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8022dbc:	1c7a      	adds	r2, r7, #1
 8022dbe:	f100 80ff 	bmi.w	8022fc0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8022dc2:	4293      	cmp	r3, r2
 8022dc4:	f340 80fc 	ble.w	8022fc0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8022dc8:	2c00      	cmp	r4, #0
 8022dca:	f000 80fb 	beq.w	8022fc4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8022dce:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8022dd2:	3501      	adds	r5, #1
 8022dd4:	f100 80fa 	bmi.w	8022fcc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8022dd8:	45a8      	cmp	r8, r5
 8022dda:	f340 80f7 	ble.w	8022fcc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8022dde:	f1be 0f00 	cmp.w	lr, #0
 8022de2:	f000 80f6 	beq.w	8022fd2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8022de6:	2f00      	cmp	r7, #0
 8022de8:	f2c0 80ee 	blt.w	8022fc8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8022dec:	42bb      	cmp	r3, r7
 8022dee:	f340 80eb 	ble.w	8022fc8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8022df2:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8022df6:	3701      	adds	r7, #1
 8022df8:	f100 80ee 	bmi.w	8022fd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8022dfc:	42bb      	cmp	r3, r7
 8022dfe:	f340 80eb 	ble.w	8022fd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8022e02:	2c00      	cmp	r4, #0
 8022e04:	f000 80ea 	beq.w	8022fdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8022e08:	3301      	adds	r3, #1
 8022e0a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022e0e:	fa1f fc84 	uxth.w	ip, r4
 8022e12:	fa1f fe8e 	uxth.w	lr, lr
 8022e16:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022e1a:	fb0c f90e 	mul.w	r9, ip, lr
 8022e1e:	0e13      	lsrs	r3, r2, #24
 8022e20:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022e24:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8022e28:	9302      	str	r3, [sp, #8]
 8022e2a:	ebac 0709 	sub.w	r7, ip, r9
 8022e2e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8022e32:	fa1f f48e 	uxth.w	r4, lr
 8022e36:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8022e3a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8022e3e:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8022e42:	fb0a fe0e 	mul.w	lr, sl, lr
 8022e46:	1b1b      	subs	r3, r3, r4
 8022e48:	fb0a f606 	mul.w	r6, sl, r6
 8022e4c:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8022e50:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022e54:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8022e58:	b29b      	uxth	r3, r3
 8022e5a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022e5e:	b2bf      	uxth	r7, r7
 8022e60:	9301      	str	r3, [sp, #4]
 8022e62:	44e6      	add	lr, ip
 8022e64:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8022e68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e6c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022e70:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8022e74:	9303      	str	r3, [sp, #12]
 8022e76:	0a33      	lsrs	r3, r6, #8
 8022e78:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8022e7c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8022e80:	9304      	str	r3, [sp, #16]
 8022e82:	fb0b f606 	mul.w	r6, fp, r6
 8022e86:	fb0b f000 	mul.w	r0, fp, r0
 8022e8a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8022e8e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022e92:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022e96:	44b6      	add	lr, r6
 8022e98:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8022e9c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8022ea0:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8022ea4:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022ea8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022eac:	fb08 f606 	mul.w	r6, r8, r6
 8022eb0:	0a03      	lsrs	r3, r0, #8
 8022eb2:	fb08 f505 	mul.w	r5, r8, r5
 8022eb6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022eba:	0a30      	lsrs	r0, r6, #8
 8022ebc:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022ec0:	9305      	str	r3, [sp, #20]
 8022ec2:	0e13      	lsrs	r3, r2, #24
 8022ec4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022ec8:	fb0e fe07 	mul.w	lr, lr, r7
 8022ecc:	4430      	add	r0, r6
 8022ece:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8022ed2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022ed6:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8022eda:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022ede:	0a00      	lsrs	r0, r0, #8
 8022ee0:	435e      	muls	r6, r3
 8022ee2:	0a2d      	lsrs	r5, r5, #8
 8022ee4:	435a      	muls	r2, r3
 8022ee6:	9b03      	ldr	r3, [sp, #12]
 8022ee8:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8022eec:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022ef0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022ef4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022ef8:	44b4      	add	ip, r6
 8022efa:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8022efe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f02:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8022f06:	9e01      	ldr	r6, [sp, #4]
 8022f08:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022f0c:	fb03 ee06 	mla	lr, r3, r6, lr
 8022f10:	9b04      	ldr	r3, [sp, #16]
 8022f12:	0a12      	lsrs	r2, r2, #8
 8022f14:	fb0c ee09 	mla	lr, ip, r9, lr
 8022f18:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8022f1c:	9b05      	ldr	r3, [sp, #20]
 8022f1e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022f22:	fb00 ee04 	mla	lr, r0, r4, lr
 8022f26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f2a:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8022f2e:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8022f32:	9b01      	ldr	r3, [sp, #4]
 8022f34:	fb07 fe0e 	mul.w	lr, r7, lr
 8022f38:	fb07 f70b 	mul.w	r7, r7, fp
 8022f3c:	fb03 ee06 	mla	lr, r3, r6, lr
 8022f40:	fb03 730a 	mla	r3, r3, sl, r7
 8022f44:	fb09 e202 	mla	r2, r9, r2, lr
 8022f48:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8022f4c:	fb04 2e0e 	mla	lr, r4, lr, r2
 8022f50:	fb04 3408 	mla	r4, r4, r8, r3
 8022f54:	9b02      	ldr	r3, [sp, #8]
 8022f56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f5a:	fb09 4903 	mla	r9, r9, r3, r4
 8022f5e:	780b      	ldrb	r3, [r1, #0]
 8022f60:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022f64:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8022f68:	ea40 0e0e 	orr.w	lr, r0, lr
 8022f6c:	fa5f f989 	uxtb.w	r9, r9
 8022f70:	fb03 f209 	mul.w	r2, r3, r9
 8022f74:	1c53      	adds	r3, r2, #1
 8022f76:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f7a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022f7e:	700b      	strb	r3, [r1, #0]
 8022f80:	784b      	ldrb	r3, [r1, #1]
 8022f82:	fb03 f309 	mul.w	r3, r3, r9
 8022f86:	1c5a      	adds	r2, r3, #1
 8022f88:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022f8c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022f90:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022f94:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f98:	704b      	strb	r3, [r1, #1]
 8022f9a:	788b      	ldrb	r3, [r1, #2]
 8022f9c:	fb03 f909 	mul.w	r9, r3, r9
 8022fa0:	f109 0301 	add.w	r3, r9, #1
 8022fa4:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022fa8:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8022fac:	f881 e002 	strb.w	lr, [r1, #2]
 8022fb0:	b007      	add	sp, #28
 8022fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fb6:	2600      	movs	r6, #0
 8022fb8:	e700      	b.n	8022dbc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8022fba:	2000      	movs	r0, #0
 8022fbc:	4606      	mov	r6, r0
 8022fbe:	e708      	b.n	8022dd2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022fc0:	2000      	movs	r0, #0
 8022fc2:	e706      	b.n	8022dd2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022fc4:	4620      	mov	r0, r4
 8022fc6:	e704      	b.n	8022dd2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022fc8:	2500      	movs	r5, #0
 8022fca:	e714      	b.n	8022df6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8022fcc:	2200      	movs	r2, #0
 8022fce:	4615      	mov	r5, r2
 8022fd0:	e71d      	b.n	8022e0e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022fd2:	4672      	mov	r2, lr
 8022fd4:	4675      	mov	r5, lr
 8022fd6:	e71a      	b.n	8022e0e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022fd8:	2200      	movs	r2, #0
 8022fda:	e718      	b.n	8022e0e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022fdc:	4622      	mov	r2, r4
 8022fde:	e716      	b.n	8022e0e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08022fe0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fe4:	b099      	sub	sp, #100	@ 0x64
 8022fe6:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8022fea:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8022fec:	9017      	str	r0, [sp, #92]	@ 0x5c
 8022fee:	9306      	str	r3, [sp, #24]
 8022ff0:	6850      	ldr	r0, [r2, #4]
 8022ff2:	6812      	ldr	r2, [r2, #0]
 8022ff4:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8022ff8:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8022ffc:	fb00 1303 	mla	r3, r0, r3, r1
 8023000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023004:	18d3      	adds	r3, r2, r3
 8023006:	9309      	str	r3, [sp, #36]	@ 0x24
 8023008:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802300a:	681b      	ldr	r3, [r3, #0]
 802300c:	930e      	str	r3, [sp, #56]	@ 0x38
 802300e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023010:	2b00      	cmp	r3, #0
 8023012:	dc03      	bgt.n	802301c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023014:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023016:	2b00      	cmp	r3, #0
 8023018:	f340 8360 	ble.w	80236dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802301c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802301e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023022:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023026:	1e48      	subs	r0, r1, #1
 8023028:	1e57      	subs	r7, r2, #1
 802302a:	9b06      	ldr	r3, [sp, #24]
 802302c:	2b00      	cmp	r3, #0
 802302e:	f340 817b 	ble.w	8023328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8023032:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023036:	ea4f 4326 	mov.w	r3, r6, asr #16
 802303a:	d406      	bmi.n	802304a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802303c:	4584      	cmp	ip, r0
 802303e:	da04      	bge.n	802304a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023040:	2b00      	cmp	r3, #0
 8023042:	db02      	blt.n	802304a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023044:	42bb      	cmp	r3, r7
 8023046:	f2c0 8170 	blt.w	802332a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 802304a:	f11c 0c01 	adds.w	ip, ip, #1
 802304e:	f100 8160 	bmi.w	8023312 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8023052:	4561      	cmp	r1, ip
 8023054:	f2c0 815d 	blt.w	8023312 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8023058:	3301      	adds	r3, #1
 802305a:	f100 815a 	bmi.w	8023312 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802305e:	429a      	cmp	r2, r3
 8023060:	f2c0 8157 	blt.w	8023312 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8023064:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023068:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802306a:	f1b8 0f00 	cmp.w	r8, #0
 802306e:	f340 8179 	ble.w	8023364 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8023072:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8023074:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023078:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802307a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802307e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023082:	142a      	asrs	r2, r5, #16
 8023084:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023088:	689b      	ldr	r3, [r3, #8]
 802308a:	f100 81be 	bmi.w	802340a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802308e:	f103 39ff 	add.w	r9, r3, #4294967295
 8023092:	454a      	cmp	r2, r9
 8023094:	f280 81b9 	bge.w	802340a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8023098:	f1bc 0f00 	cmp.w	ip, #0
 802309c:	f2c0 81b5 	blt.w	802340a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80230a0:	f10e 39ff 	add.w	r9, lr, #4294967295
 80230a4:	45cc      	cmp	ip, r9
 80230a6:	f280 81b0 	bge.w	802340a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80230aa:	b21b      	sxth	r3, r3
 80230ac:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80230ae:	fb0c 2203 	mla	r2, ip, r3, r2
 80230b2:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80230b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80230ba:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80230be:	2900      	cmp	r1, #0
 80230c0:	f000 8197 	beq.w	80233f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80230c4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80230c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80230ca:	0e24      	lsrs	r4, r4, #24
 80230cc:	9411      	str	r4, [sp, #68]	@ 0x44
 80230ce:	b180      	cbz	r0, 80230f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80230d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80230d4:	3b01      	subs	r3, #1
 80230d6:	009b      	lsls	r3, r3, #2
 80230d8:	3304      	adds	r3, #4
 80230da:	eb09 0c03 	add.w	ip, r9, r3
 80230de:	f859 3003 	ldr.w	r3, [r9, r3]
 80230e2:	9307      	str	r3, [sp, #28]
 80230e4:	0e1b      	lsrs	r3, r3, #24
 80230e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80230e8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80230ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80230ee:	0e1b      	lsrs	r3, r3, #24
 80230f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80230f2:	b289      	uxth	r1, r1
 80230f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80230f6:	b280      	uxth	r0, r0
 80230f8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80230fa:	fb01 fa00 	mul.w	sl, r1, r0
 80230fe:	0109      	lsls	r1, r1, #4
 8023100:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023104:	eba1 090a 	sub.w	r9, r1, sl
 8023108:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802310c:	b280      	uxth	r0, r0
 802310e:	fa1f f989 	uxth.w	r9, r9
 8023112:	1a09      	subs	r1, r1, r0
 8023114:	fb09 f303 	mul.w	r3, r9, r3
 8023118:	b289      	uxth	r1, r1
 802311a:	fb01 330e 	mla	r3, r1, lr, r3
 802311e:	fb00 3304 	mla	r3, r0, r4, r3
 8023122:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023124:	fb0a 3304 	mla	r3, sl, r4, r3
 8023128:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802312c:	2b00      	cmp	r3, #0
 802312e:	f000 80e8 	beq.w	8023302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023132:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023136:	d01b      	beq.n	8023170 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8023138:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 802313c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023140:	fb0e fb0b 	mul.w	fp, lr, fp
 8023144:	fb0e fe02 	mul.w	lr, lr, r2
 8023148:	ea4f 221b 	mov.w	r2, fp, lsr #8
 802314c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8023150:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023154:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8023158:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802315c:	445a      	add	r2, fp
 802315e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023162:	0a12      	lsrs	r2, r2, #8
 8023164:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023168:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802316c:	ea42 020c 	orr.w	r2, r2, ip
 8023170:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023172:	2cff      	cmp	r4, #255	@ 0xff
 8023174:	d021      	beq.n	80231ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8023176:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023178:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802317c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802317e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023184:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023188:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802318c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802318e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023192:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023196:	fb04 fb0b 	mul.w	fp, r4, fp
 802319a:	44e6      	add	lr, ip
 802319c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80231a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80231a4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80231a8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80231ac:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80231b0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80231b4:	ea4e 040b 	orr.w	r4, lr, fp
 80231b8:	940a      	str	r4, [sp, #40]	@ 0x28
 80231ba:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80231bc:	2cff      	cmp	r4, #255	@ 0xff
 80231be:	d021      	beq.n	8023204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80231c0:	9c07      	ldr	r4, [sp, #28]
 80231c2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80231c6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80231c8:	fb04 fc0c 	mul.w	ip, r4, ip
 80231cc:	9c07      	ldr	r4, [sp, #28]
 80231ce:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80231d2:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80231d6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80231d8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80231dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80231e0:	fb04 fb0b 	mul.w	fp, r4, fp
 80231e4:	44e6      	add	lr, ip
 80231e6:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80231ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80231ee:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80231f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80231f6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80231fa:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80231fe:	ea4e 040b 	orr.w	r4, lr, fp
 8023202:	9407      	str	r4, [sp, #28]
 8023204:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023206:	2cff      	cmp	r4, #255	@ 0xff
 8023208:	d021      	beq.n	802324e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802320a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802320c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023210:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023212:	fb04 fc0c 	mul.w	ip, r4, ip
 8023216:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023218:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802321c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8023220:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023222:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023226:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802322a:	fb04 fb0b 	mul.w	fp, r4, fp
 802322e:	44e6      	add	lr, ip
 8023230:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8023234:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023238:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802323c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023240:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023244:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8023248:	ea4e 040b 	orr.w	r4, lr, fp
 802324c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802324e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023250:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8023254:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8023258:	2bff      	cmp	r3, #255	@ 0xff
 802325a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802325e:	9c07      	ldr	r4, [sp, #28]
 8023260:	fb09 fc0c 	mul.w	ip, r9, ip
 8023264:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023268:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802326c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802326e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023272:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023276:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023278:	fb0a cc0e 	mla	ip, sl, lr, ip
 802327c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023280:	fb09 f90e 	mul.w	r9, r9, lr
 8023284:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023288:	fb01 9202 	mla	r2, r1, r2, r9
 802328c:	9907      	ldr	r1, [sp, #28]
 802328e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023292:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8023296:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023298:	fb00 220b 	mla	r2, r0, fp, r2
 802329c:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80232a0:	fb0a 2a00 	mla	sl, sl, r0, r2
 80232a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80232a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80232ac:	ea4c 0c0a 	orr.w	ip, ip, sl
 80232b0:	fa5f f08c 	uxtb.w	r0, ip
 80232b4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80232b8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80232bc:	f000 80a2 	beq.w	8023404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80232c0:	43db      	mvns	r3, r3
 80232c2:	783a      	ldrb	r2, [r7, #0]
 80232c4:	f897 a002 	ldrb.w	sl, [r7, #2]
 80232c8:	b2db      	uxtb	r3, r3
 80232ca:	fb02 fe03 	mul.w	lr, r2, r3
 80232ce:	fb0a fa03 	mul.w	sl, sl, r3
 80232d2:	f10e 0201 	add.w	r2, lr, #1
 80232d6:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80232da:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80232de:	703a      	strb	r2, [r7, #0]
 80232e0:	787a      	ldrb	r2, [r7, #1]
 80232e2:	fb02 f003 	mul.w	r0, r2, r3
 80232e6:	f10a 0301 	add.w	r3, sl, #1
 80232ea:	1c42      	adds	r2, r0, #1
 80232ec:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80232f0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80232f4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80232f8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80232fc:	707a      	strb	r2, [r7, #1]
 80232fe:	f887 c002 	strb.w	ip, [r7, #2]
 8023302:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023304:	3703      	adds	r7, #3
 8023306:	f108 38ff 	add.w	r8, r8, #4294967295
 802330a:	441d      	add	r5, r3
 802330c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802330e:	441e      	add	r6, r3
 8023310:	e6ab      	b.n	802306a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8023312:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023314:	441d      	add	r5, r3
 8023316:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023318:	441e      	add	r6, r3
 802331a:	9b06      	ldr	r3, [sp, #24]
 802331c:	3b01      	subs	r3, #1
 802331e:	9306      	str	r3, [sp, #24]
 8023320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023322:	3303      	adds	r3, #3
 8023324:	9309      	str	r3, [sp, #36]	@ 0x24
 8023326:	e680      	b.n	802302a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023328:	d024      	beq.n	8023374 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802332a:	9b06      	ldr	r3, [sp, #24]
 802332c:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802332e:	3b01      	subs	r3, #1
 8023330:	fb00 5003 	mla	r0, r0, r3, r5
 8023334:	1400      	asrs	r0, r0, #16
 8023336:	f53f ae95 	bmi.w	8023064 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802333a:	3901      	subs	r1, #1
 802333c:	4288      	cmp	r0, r1
 802333e:	f6bf ae91 	bge.w	8023064 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023342:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8023344:	fb01 6303 	mla	r3, r1, r3, r6
 8023348:	141b      	asrs	r3, r3, #16
 802334a:	f53f ae8b 	bmi.w	8023064 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802334e:	3a01      	subs	r2, #1
 8023350:	4293      	cmp	r3, r2
 8023352:	f6bf ae87 	bge.w	8023064 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023358:	f8dd b018 	ldr.w	fp, [sp, #24]
 802335c:	1cdf      	adds	r7, r3, #3
 802335e:	f1bb 0f00 	cmp.w	fp, #0
 8023362:	dc6e      	bgt.n	8023442 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8023364:	9b06      	ldr	r3, [sp, #24]
 8023366:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802336a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802336c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023370:	4423      	add	r3, r4
 8023372:	9309      	str	r3, [sp, #36]	@ 0x24
 8023374:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023376:	2b00      	cmp	r3, #0
 8023378:	f340 81b0 	ble.w	80236dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802337c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023380:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023382:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023386:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802338a:	eef0 6a62 	vmov.f32	s13, s5
 802338e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023392:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023396:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802339a:	ee16 5a90 	vmov	r5, s13
 802339e:	eef0 6a43 	vmov.f32	s13, s6
 80233a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80233a6:	ee16 6a90 	vmov	r6, s13
 80233aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80233ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80233b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80233b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80233ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80233be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80233c2:	ee12 2a90 	vmov	r2, s5
 80233c6:	eef0 2a47 	vmov.f32	s5, s14
 80233ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80233ce:	ee13 2a10 	vmov	r2, s6
 80233d2:	9325      	str	r3, [sp, #148]	@ 0x94
 80233d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80233d6:	eeb0 3a67 	vmov.f32	s6, s15
 80233da:	fb92 f3f3 	sdiv	r3, r2, r3
 80233de:	9326      	str	r3, [sp, #152]	@ 0x98
 80233e0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80233e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80233e4:	3b01      	subs	r3, #1
 80233e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80233e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80233ea:	bf08      	it	eq
 80233ec:	4613      	moveq	r3, r2
 80233ee:	9306      	str	r3, [sp, #24]
 80233f0:	e60d      	b.n	802300e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80233f2:	2800      	cmp	r0, #0
 80233f4:	f43f ae7d 	beq.w	80230f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80233f8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80233fc:	9307      	str	r3, [sp, #28]
 80233fe:	0e1b      	lsrs	r3, r3, #24
 8023400:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023402:	e676      	b.n	80230f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023404:	7038      	strb	r0, [r7, #0]
 8023406:	7079      	strb	r1, [r7, #1]
 8023408:	e779      	b.n	80232fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802340a:	f112 0901 	adds.w	r9, r2, #1
 802340e:	f53f af78 	bmi.w	8023302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023412:	454b      	cmp	r3, r9
 8023414:	f6ff af75 	blt.w	8023302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023418:	f11c 0901 	adds.w	r9, ip, #1
 802341c:	f53f af71 	bmi.w	8023302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023420:	45ce      	cmp	lr, r9
 8023422:	f6ff af6e 	blt.w	8023302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023426:	b21b      	sxth	r3, r3
 8023428:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802342c:	fa0f f28e 	sxth.w	r2, lr
 8023430:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023434:	9200      	str	r2, [sp, #0]
 8023436:	4639      	mov	r1, r7
 8023438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802343a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802343c:	f7ff fca1 	bl	8022d82 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023440:	e75f      	b.n	8023302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023442:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023444:	1429      	asrs	r1, r5, #16
 8023446:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023448:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802344c:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023450:	1433      	asrs	r3, r6, #16
 8023452:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023456:	fb0c 1303 	mla	r3, ip, r3, r1
 802345a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802345c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023460:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023464:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023468:	2a00      	cmp	r2, #0
 802346a:	f000 8129 	beq.w	80236c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802346e:	684c      	ldr	r4, [r1, #4]
 8023470:	940c      	str	r4, [sp, #48]	@ 0x30
 8023472:	0e24      	lsrs	r4, r4, #24
 8023474:	9413      	str	r4, [sp, #76]	@ 0x4c
 8023476:	b198      	cbz	r0, 80234a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023478:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 802347c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023480:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023484:	f10c 0c04 	add.w	ip, ip, #4
 8023488:	eb01 080c 	add.w	r8, r1, ip
 802348c:	f851 100c 	ldr.w	r1, [r1, ip]
 8023490:	9108      	str	r1, [sp, #32]
 8023492:	0e09      	lsrs	r1, r1, #24
 8023494:	9110      	str	r1, [sp, #64]	@ 0x40
 8023496:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802349a:	910d      	str	r1, [sp, #52]	@ 0x34
 802349c:	0e09      	lsrs	r1, r1, #24
 802349e:	9114      	str	r1, [sp, #80]	@ 0x50
 80234a0:	b292      	uxth	r2, r2
 80234a2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80234a4:	b280      	uxth	r0, r0
 80234a6:	fb02 f900 	mul.w	r9, r2, r0
 80234aa:	0112      	lsls	r2, r2, #4
 80234ac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80234b0:	eba2 0809 	sub.w	r8, r2, r9
 80234b4:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80234b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80234ba:	b280      	uxth	r0, r0
 80234bc:	fa1f f888 	uxth.w	r8, r8
 80234c0:	1a09      	subs	r1, r1, r0
 80234c2:	fb08 f202 	mul.w	r2, r8, r2
 80234c6:	b289      	uxth	r1, r1
 80234c8:	fb01 220e 	mla	r2, r1, lr, r2
 80234cc:	fb00 2204 	mla	r2, r0, r4, r2
 80234d0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80234d2:	fb09 2204 	mla	r2, r9, r4, r2
 80234d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80234da:	2a00      	cmp	r2, #0
 80234dc:	f000 80e8 	beq.w	80236b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80234e0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80234e4:	d01b      	beq.n	802351e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80234e6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80234ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80234ee:	fb0e fa0a 	mul.w	sl, lr, sl
 80234f2:	fb0e fe03 	mul.w	lr, lr, r3
 80234f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80234fa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80234fe:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023502:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023506:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802350a:	4453      	add	r3, sl
 802350c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023510:	0a1b      	lsrs	r3, r3, #8
 8023512:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023516:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802351a:	ea43 030c 	orr.w	r3, r3, ip
 802351e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023520:	2cff      	cmp	r4, #255	@ 0xff
 8023522:	d021      	beq.n	8023568 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8023524:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023526:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802352a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802352c:	fb04 fc0c 	mul.w	ip, r4, ip
 8023530:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023532:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023536:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802353a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802353c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023540:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023544:	fb04 fa0a 	mul.w	sl, r4, sl
 8023548:	44e6      	add	lr, ip
 802354a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802354e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023552:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023556:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802355a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802355e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023562:	ea4e 040a 	orr.w	r4, lr, sl
 8023566:	940c      	str	r4, [sp, #48]	@ 0x30
 8023568:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802356a:	2cff      	cmp	r4, #255	@ 0xff
 802356c:	d021      	beq.n	80235b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 802356e:	9c08      	ldr	r4, [sp, #32]
 8023570:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023574:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023576:	fb04 fc0c 	mul.w	ip, r4, ip
 802357a:	9c08      	ldr	r4, [sp, #32]
 802357c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023580:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023582:	fb04 fa0e 	mul.w	sl, r4, lr
 8023586:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802358a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802358e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023592:	44e6      	add	lr, ip
 8023594:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023598:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802359c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80235a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80235ac:	ea4e 040a 	orr.w	r4, lr, sl
 80235b0:	9408      	str	r4, [sp, #32]
 80235b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80235b4:	2cff      	cmp	r4, #255	@ 0xff
 80235b6:	d021      	beq.n	80235fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80235b8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80235ba:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80235be:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80235c0:	fb04 fc0c 	mul.w	ip, r4, ip
 80235c4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80235c6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80235ca:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80235ce:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80235d0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80235d4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80235d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80235dc:	44e6      	add	lr, ip
 80235de:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80235e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80235ea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80235ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235f2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80235f6:	ea4e 040a 	orr.w	r4, lr, sl
 80235fa:	940d      	str	r4, [sp, #52]	@ 0x34
 80235fc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80235fe:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8023602:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023606:	2aff      	cmp	r2, #255	@ 0xff
 8023608:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802360c:	9c08      	ldr	r4, [sp, #32]
 802360e:	fb08 fc0c 	mul.w	ip, r8, ip
 8023612:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023616:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802361a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802361c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023620:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023624:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023626:	fb09 cc0e 	mla	ip, r9, lr, ip
 802362a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802362e:	fb08 f80e 	mul.w	r8, r8, lr
 8023632:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023636:	fb01 8303 	mla	r3, r1, r3, r8
 802363a:	9908      	ldr	r1, [sp, #32]
 802363c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023640:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8023644:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023646:	fb00 330a 	mla	r3, r0, sl, r3
 802364a:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 802364e:	fb09 3e0e 	mla	lr, r9, lr, r3
 8023652:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023656:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802365a:	ea4c 0c0e 	orr.w	ip, ip, lr
 802365e:	fa5f f08c 	uxtb.w	r0, ip
 8023662:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023666:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802366a:	d032      	beq.n	80236d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802366c:	43d2      	mvns	r2, r2
 802366e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8023672:	b2d2      	uxtb	r2, r2
 8023674:	fb0e fe02 	mul.w	lr, lr, r2
 8023678:	f10e 0301 	add.w	r3, lr, #1
 802367c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023680:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023684:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023688:	4350      	muls	r0, r2
 802368a:	f807 3c03 	strb.w	r3, [r7, #-3]
 802368e:	1c43      	adds	r3, r0, #1
 8023690:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023694:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023698:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 802369c:	4353      	muls	r3, r2
 802369e:	f807 1c02 	strb.w	r1, [r7, #-2]
 80236a2:	1c5a      	adds	r2, r3, #1
 80236a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80236a8:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80236ac:	f807 cc01 	strb.w	ip, [r7, #-1]
 80236b0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80236b2:	3703      	adds	r7, #3
 80236b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80236b8:	441d      	add	r5, r3
 80236ba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80236bc:	441e      	add	r6, r3
 80236be:	e64e      	b.n	802335e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80236c0:	2800      	cmp	r0, #0
 80236c2:	f43f aeed 	beq.w	80234a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80236c6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80236ca:	9108      	str	r1, [sp, #32]
 80236cc:	0e09      	lsrs	r1, r1, #24
 80236ce:	9110      	str	r1, [sp, #64]	@ 0x40
 80236d0:	e6e6      	b.n	80234a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80236d2:	f807 0c03 	strb.w	r0, [r7, #-3]
 80236d6:	f807 1c02 	strb.w	r1, [r7, #-2]
 80236da:	e7e7      	b.n	80236ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80236dc:	b019      	add	sp, #100	@ 0x64
 80236de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080236e4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80236e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236e8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 80236ec:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80236f0:	2c00      	cmp	r4, #0
 80236f2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80236f6:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 80236fa:	fb00 4e03 	mla	lr, r0, r3, r4
 80236fe:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8023702:	f2c0 80b8 	blt.w	8023876 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023706:	45a1      	cmp	r9, r4
 8023708:	f340 80b5 	ble.w	8023876 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802370c:	2800      	cmp	r0, #0
 802370e:	f2c0 80b2 	blt.w	8023876 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023712:	4580      	cmp	r8, r0
 8023714:	f340 80af 	ble.w	8023876 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023718:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802371c:	f01e 0f01 	tst.w	lr, #1
 8023720:	5d56      	ldrb	r6, [r2, r5]
 8023722:	bf0c      	ite	eq
 8023724:	f006 060f 	andeq.w	r6, r6, #15
 8023728:	1136      	asrne	r6, r6, #4
 802372a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802372e:	b2f6      	uxtb	r6, r6
 8023730:	f114 0a01 	adds.w	sl, r4, #1
 8023734:	f100 80a1 	bmi.w	802387a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023738:	45d1      	cmp	r9, sl
 802373a:	f340 809e 	ble.w	802387a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802373e:	2800      	cmp	r0, #0
 8023740:	f2c0 809b 	blt.w	802387a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023744:	4580      	cmp	r8, r0
 8023746:	f340 8098 	ble.w	802387a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802374a:	2f00      	cmp	r7, #0
 802374c:	f000 8097 	beq.w	802387e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8023750:	f10e 0b01 	add.w	fp, lr, #1
 8023754:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8023758:	f01b 0f01 	tst.w	fp, #1
 802375c:	5d55      	ldrb	r5, [r2, r5]
 802375e:	bf0c      	ite	eq
 8023760:	f005 050f 	andeq.w	r5, r5, #15
 8023764:	112d      	asrne	r5, r5, #4
 8023766:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802376a:	b2ed      	uxtb	r5, r5
 802376c:	f1bc 0f00 	cmp.w	ip, #0
 8023770:	f000 8089 	beq.w	8023886 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8023774:	2c00      	cmp	r4, #0
 8023776:	f100 0001 	add.w	r0, r0, #1
 802377a:	f2c0 8082 	blt.w	8023882 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802377e:	45a1      	cmp	r9, r4
 8023780:	dd7f      	ble.n	8023882 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023782:	2800      	cmp	r0, #0
 8023784:	db7d      	blt.n	8023882 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023786:	4580      	cmp	r8, r0
 8023788:	dd7b      	ble.n	8023882 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802378a:	eb03 0b0e 	add.w	fp, r3, lr
 802378e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023792:	f01b 0f01 	tst.w	fp, #1
 8023796:	5d14      	ldrb	r4, [r2, r4]
 8023798:	bf0c      	ite	eq
 802379a:	f004 040f 	andeq.w	r4, r4, #15
 802379e:	1124      	asrne	r4, r4, #4
 80237a0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80237a4:	b2e4      	uxtb	r4, r4
 80237a6:	f1ba 0f00 	cmp.w	sl, #0
 80237aa:	db6f      	blt.n	802388c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80237ac:	45d1      	cmp	r9, sl
 80237ae:	dd6d      	ble.n	802388c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80237b0:	2800      	cmp	r0, #0
 80237b2:	db6b      	blt.n	802388c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80237b4:	4580      	cmp	r8, r0
 80237b6:	dd69      	ble.n	802388c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80237b8:	2f00      	cmp	r7, #0
 80237ba:	d069      	beq.n	8023890 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80237bc:	3301      	adds	r3, #1
 80237be:	449e      	add	lr, r3
 80237c0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80237c4:	f01e 0f01 	tst.w	lr, #1
 80237c8:	5cd0      	ldrb	r0, [r2, r3]
 80237ca:	bf0c      	ite	eq
 80237cc:	f000 000f 	andeq.w	r0, r0, #15
 80237d0:	1100      	asrne	r0, r0, #4
 80237d2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80237d6:	b2c3      	uxtb	r3, r0
 80237d8:	b2ba      	uxth	r2, r7
 80237da:	fa1f fc8c 	uxth.w	ip, ip
 80237de:	fb02 f00c 	mul.w	r0, r2, ip
 80237e2:	0112      	lsls	r2, r2, #4
 80237e4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80237e8:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80237ec:	1a12      	subs	r2, r2, r0
 80237ee:	fa1f fc8c 	uxth.w	ip, ip
 80237f2:	b292      	uxth	r2, r2
 80237f4:	eba7 070c 	sub.w	r7, r7, ip
 80237f8:	436a      	muls	r2, r5
 80237fa:	b2bf      	uxth	r7, r7
 80237fc:	fb06 2207 	mla	r2, r6, r7, r2
 8023800:	fb0c 2404 	mla	r4, ip, r4, r2
 8023804:	fb00 4303 	mla	r3, r0, r3, r4
 8023808:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802380c:	b38b      	cbz	r3, 8023872 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802380e:	4a21      	ldr	r2, [pc, #132]	@ (8023894 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8023810:	6814      	ldr	r4, [r2, #0]
 8023812:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8023816:	b2e5      	uxtb	r5, r4
 8023818:	4353      	muls	r3, r2
 802381a:	1c5a      	adds	r2, r3, #1
 802381c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023820:	1212      	asrs	r2, r2, #8
 8023822:	b290      	uxth	r0, r2
 8023824:	43d2      	mvns	r2, r2
 8023826:	fb15 f500 	smulbb	r5, r5, r0
 802382a:	b2d3      	uxtb	r3, r2
 802382c:	780a      	ldrb	r2, [r1, #0]
 802382e:	fb02 5203 	mla	r2, r2, r3, r5
 8023832:	b292      	uxth	r2, r2
 8023834:	1c55      	adds	r5, r2, #1
 8023836:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802383a:	784d      	ldrb	r5, [r1, #1]
 802383c:	fb15 f503 	smulbb	r5, r5, r3
 8023840:	1212      	asrs	r2, r2, #8
 8023842:	700a      	strb	r2, [r1, #0]
 8023844:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023848:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802384c:	fb02 5200 	mla	r2, r2, r0, r5
 8023850:	b292      	uxth	r2, r2
 8023852:	1c55      	adds	r5, r2, #1
 8023854:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023858:	1212      	asrs	r2, r2, #8
 802385a:	704a      	strb	r2, [r1, #1]
 802385c:	788a      	ldrb	r2, [r1, #2]
 802385e:	fb12 f303 	smulbb	r3, r2, r3
 8023862:	fb04 3300 	mla	r3, r4, r0, r3
 8023866:	b29b      	uxth	r3, r3
 8023868:	1c5a      	adds	r2, r3, #1
 802386a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802386e:	121b      	asrs	r3, r3, #8
 8023870:	708b      	strb	r3, [r1, #2]
 8023872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023876:	2600      	movs	r6, #0
 8023878:	e75a      	b.n	8023730 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 802387a:	2500      	movs	r5, #0
 802387c:	e776      	b.n	802376c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802387e:	463d      	mov	r5, r7
 8023880:	e774      	b.n	802376c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8023882:	2400      	movs	r4, #0
 8023884:	e78f      	b.n	80237a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8023886:	4663      	mov	r3, ip
 8023888:	4664      	mov	r4, ip
 802388a:	e7a5      	b.n	80237d8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802388c:	2300      	movs	r3, #0
 802388e:	e7a3      	b.n	80237d8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8023890:	463b      	mov	r3, r7
 8023892:	e7a1      	b.n	80237d8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8023894:	24026428 	.word	0x24026428

08023898 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802389c:	b097      	sub	sp, #92	@ 0x5c
 802389e:	9214      	str	r2, [sp, #80]	@ 0x50
 80238a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80238a2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80238a4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80238a8:	9015      	str	r0, [sp, #84]	@ 0x54
 80238aa:	910c      	str	r1, [sp, #48]	@ 0x30
 80238ac:	6850      	ldr	r0, [r2, #4]
 80238ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80238b0:	6812      	ldr	r2, [r2, #0]
 80238b2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80238b6:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 80238ba:	fb00 1303 	mla	r3, r0, r3, r1
 80238be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238c2:	eb02 0a03 	add.w	sl, r2, r3
 80238c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80238c8:	689b      	ldr	r3, [r3, #8]
 80238ca:	3301      	adds	r3, #1
 80238cc:	f023 0301 	bic.w	r3, r3, #1
 80238d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80238d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80238d4:	681f      	ldr	r7, [r3, #0]
 80238d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80238d8:	2b00      	cmp	r3, #0
 80238da:	dc03      	bgt.n	80238e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80238dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80238de:	2b00      	cmp	r3, #0
 80238e0:	f340 8247 	ble.w	8023d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80238e4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80238e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80238ee:	1e48      	subs	r0, r1, #1
 80238f0:	f102 3cff 	add.w	ip, r2, #4294967295
 80238f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238f6:	2b00      	cmp	r3, #0
 80238f8:	f340 80e5 	ble.w	8023ac6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80238fc:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8023900:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023904:	d406      	bmi.n	8023914 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023906:	4586      	cmp	lr, r0
 8023908:	da04      	bge.n	8023914 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802390a:	2b00      	cmp	r3, #0
 802390c:	db02      	blt.n	8023914 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802390e:	4563      	cmp	r3, ip
 8023910:	f2c0 80da 	blt.w	8023ac8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023914:	f11e 0e01 	adds.w	lr, lr, #1
 8023918:	f100 80cb 	bmi.w	8023ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802391c:	4571      	cmp	r1, lr
 802391e:	f2c0 80c8 	blt.w	8023ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023922:	3301      	adds	r3, #1
 8023924:	f100 80c5 	bmi.w	8023ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023928:	429a      	cmp	r2, r3
 802392a:	f2c0 80c2 	blt.w	8023ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802392e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023930:	46d0      	mov	r8, sl
 8023932:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8023936:	930d      	str	r3, [sp, #52]	@ 0x34
 8023938:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802393a:	2b00      	cmp	r3, #0
 802393c:	f340 80e3 	ble.w	8023b06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8023940:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023942:	1430      	asrs	r0, r6, #16
 8023944:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023948:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802394c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023950:	142b      	asrs	r3, r5, #16
 8023952:	f100 812e 	bmi.w	8023bb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023956:	f10c 3bff 	add.w	fp, ip, #4294967295
 802395a:	455b      	cmp	r3, fp
 802395c:	f280 8129 	bge.w	8023bb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023960:	2800      	cmp	r0, #0
 8023962:	f2c0 8126 	blt.w	8023bb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023966:	f10e 3bff 	add.w	fp, lr, #4294967295
 802396a:	4558      	cmp	r0, fp
 802396c:	f280 8121 	bge.w	8023bb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023970:	fb00 3309 	mla	r3, r0, r9, r3
 8023974:	0858      	lsrs	r0, r3, #1
 8023976:	07dc      	lsls	r4, r3, #31
 8023978:	f817 c000 	ldrb.w	ip, [r7, r0]
 802397c:	bf54      	ite	pl
 802397e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023982:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023986:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802398a:	fa5f fc8c 	uxtb.w	ip, ip
 802398e:	2a00      	cmp	r2, #0
 8023990:	f000 80fe 	beq.w	8023b90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023994:	1c58      	adds	r0, r3, #1
 8023996:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802399a:	07c0      	lsls	r0, r0, #31
 802399c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80239a0:	bf54      	ite	pl
 80239a2:	f00e 0e0f 	andpl.w	lr, lr, #15
 80239a6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80239aa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80239ae:	fa5f f08e 	uxtb.w	r0, lr
 80239b2:	9010      	str	r0, [sp, #64]	@ 0x40
 80239b4:	b1d9      	cbz	r1, 80239ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80239b6:	444b      	add	r3, r9
 80239b8:	0858      	lsrs	r0, r3, #1
 80239ba:	07dc      	lsls	r4, r3, #31
 80239bc:	f103 0301 	add.w	r3, r3, #1
 80239c0:	5c38      	ldrb	r0, [r7, r0]
 80239c2:	bf54      	ite	pl
 80239c4:	f000 000f 	andpl.w	r0, r0, #15
 80239c8:	1100      	asrmi	r0, r0, #4
 80239ca:	07dc      	lsls	r4, r3, #31
 80239cc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80239d0:	b2c0      	uxtb	r0, r0
 80239d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80239d4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80239d8:	f817 e000 	ldrb.w	lr, [r7, r0]
 80239dc:	bf54      	ite	pl
 80239de:	f00e 030f 	andpl.w	r3, lr, #15
 80239e2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80239e6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80239ea:	b2db      	uxtb	r3, r3
 80239ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80239ee:	b292      	uxth	r2, r2
 80239f0:	b289      	uxth	r1, r1
 80239f2:	0113      	lsls	r3, r2, #4
 80239f4:	fb02 f001 	mul.w	r0, r2, r1
 80239f8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80239fa:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80239fe:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8023a02:	1a1b      	subs	r3, r3, r0
 8023a04:	b289      	uxth	r1, r1
 8023a06:	b29b      	uxth	r3, r3
 8023a08:	ebae 0e01 	sub.w	lr, lr, r1
 8023a0c:	4353      	muls	r3, r2
 8023a0e:	fa1f fe8e 	uxth.w	lr, lr
 8023a12:	fb0c 320e 	mla	r2, ip, lr, r3
 8023a16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023a18:	fb01 2203 	mla	r2, r1, r3, r2
 8023a1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023a1e:	fb00 2203 	mla	r2, r0, r3, r2
 8023a22:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023a26:	2a00      	cmp	r2, #0
 8023a28:	d039      	beq.n	8023a9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023a2a:	4bc7      	ldr	r3, [pc, #796]	@ (8023d48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023a2c:	6819      	ldr	r1, [r3, #0]
 8023a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023a30:	fa5f fc81 	uxtb.w	ip, r1
 8023a34:	435a      	muls	r2, r3
 8023a36:	1c53      	adds	r3, r2, #1
 8023a38:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023a3c:	1212      	asrs	r2, r2, #8
 8023a3e:	b290      	uxth	r0, r2
 8023a40:	43d2      	mvns	r2, r2
 8023a42:	fb1c fc00 	smulbb	ip, ip, r0
 8023a46:	b2d3      	uxtb	r3, r2
 8023a48:	f898 2000 	ldrb.w	r2, [r8]
 8023a4c:	fb02 c203 	mla	r2, r2, r3, ip
 8023a50:	b292      	uxth	r2, r2
 8023a52:	f102 0c01 	add.w	ip, r2, #1
 8023a56:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023a5a:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023a5e:	fb1c fc03 	smulbb	ip, ip, r3
 8023a62:	1212      	asrs	r2, r2, #8
 8023a64:	f888 2000 	strb.w	r2, [r8]
 8023a68:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023a6c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023a70:	fb02 c200 	mla	r2, r2, r0, ip
 8023a74:	b292      	uxth	r2, r2
 8023a76:	f102 0c01 	add.w	ip, r2, #1
 8023a7a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023a7e:	1212      	asrs	r2, r2, #8
 8023a80:	f888 2001 	strb.w	r2, [r8, #1]
 8023a84:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023a88:	fb12 f303 	smulbb	r3, r2, r3
 8023a8c:	fb01 3300 	mla	r3, r1, r0, r3
 8023a90:	b29b      	uxth	r3, r3
 8023a92:	1c5a      	adds	r2, r3, #1
 8023a94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023a98:	121b      	asrs	r3, r3, #8
 8023a9a:	f888 3002 	strb.w	r3, [r8, #2]
 8023a9e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023aa0:	f108 0803 	add.w	r8, r8, #3
 8023aa4:	441d      	add	r5, r3
 8023aa6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023aa8:	441e      	add	r6, r3
 8023aaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023aac:	3b01      	subs	r3, #1
 8023aae:	930d      	str	r3, [sp, #52]	@ 0x34
 8023ab0:	e742      	b.n	8023938 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023ab2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023ab4:	f10a 0a03 	add.w	sl, sl, #3
 8023ab8:	441d      	add	r5, r3
 8023aba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023abc:	441e      	add	r6, r3
 8023abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ac0:	3b01      	subs	r3, #1
 8023ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ac4:	e716      	b.n	80238f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023ac6:	d024      	beq.n	8023b12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023aca:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8023acc:	3b01      	subs	r3, #1
 8023ace:	fb00 5003 	mla	r0, r0, r3, r5
 8023ad2:	1400      	asrs	r0, r0, #16
 8023ad4:	f53f af2b 	bmi.w	802392e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023ad8:	3901      	subs	r1, #1
 8023ada:	4288      	cmp	r0, r1
 8023adc:	f6bf af27 	bge.w	802392e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023ae0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8023ae2:	fb01 6303 	mla	r3, r1, r3, r6
 8023ae6:	141b      	asrs	r3, r3, #16
 8023ae8:	f53f af21 	bmi.w	802392e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023aec:	3a01      	subs	r2, #1
 8023aee:	4293      	cmp	r3, r2
 8023af0:	f6bf af1d 	bge.w	802392e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023af4:	f10a 0e03 	add.w	lr, sl, #3
 8023af8:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8023afc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8023b00:	f1b8 0f00 	cmp.w	r8, #0
 8023b04:	dc76      	bgt.n	8023bf4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8023b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023b08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023b0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023b10:	44a2      	add	sl, r4
 8023b12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	f340 812c 	ble.w	8023d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8023b1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023b1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023b20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023b24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023b28:	eef0 6a62 	vmov.f32	s13, s5
 8023b2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023b30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023b34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b38:	ee16 5a90 	vmov	r5, s13
 8023b3c:	eef0 6a43 	vmov.f32	s13, s6
 8023b40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b44:	ee16 6a90 	vmov	r6, s13
 8023b48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023b4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023b50:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023b54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023b58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b60:	ee12 2a90 	vmov	r2, s5
 8023b64:	eef0 2a47 	vmov.f32	s5, s14
 8023b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b6c:	ee13 2a10 	vmov	r2, s6
 8023b70:	9323      	str	r3, [sp, #140]	@ 0x8c
 8023b72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023b74:	eeb0 3a67 	vmov.f32	s6, s15
 8023b78:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b7c:	9324      	str	r3, [sp, #144]	@ 0x90
 8023b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023b80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023b82:	3b01      	subs	r3, #1
 8023b84:	930c      	str	r3, [sp, #48]	@ 0x30
 8023b86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023b88:	bf08      	it	eq
 8023b8a:	4613      	moveq	r3, r2
 8023b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b8e:	e6a2      	b.n	80238d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023b90:	2900      	cmp	r1, #0
 8023b92:	f43f af2c 	beq.w	80239ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8023b96:	eb09 0003 	add.w	r0, r9, r3
 8023b9a:	0843      	lsrs	r3, r0, #1
 8023b9c:	07c0      	lsls	r0, r0, #31
 8023b9e:	5cfb      	ldrb	r3, [r7, r3]
 8023ba0:	bf54      	ite	pl
 8023ba2:	f003 030f 	andpl.w	r3, r3, #15
 8023ba6:	111b      	asrmi	r3, r3, #4
 8023ba8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023bac:	b2db      	uxtb	r3, r3
 8023bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8023bb0:	e71d      	b.n	80239ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8023bb2:	f113 0b01 	adds.w	fp, r3, #1
 8023bb6:	f53f af72 	bmi.w	8023a9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023bba:	45dc      	cmp	ip, fp
 8023bbc:	f6ff af6f 	blt.w	8023a9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023bc0:	f110 0b01 	adds.w	fp, r0, #1
 8023bc4:	f53f af6b 	bmi.w	8023a9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023bc8:	45de      	cmp	lr, fp
 8023bca:	f6ff af68 	blt.w	8023a9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023bce:	9302      	str	r3, [sp, #8]
 8023bd0:	fa0f f38e 	sxth.w	r3, lr
 8023bd4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023bd6:	9301      	str	r3, [sp, #4]
 8023bd8:	fa0f f38c 	sxth.w	r3, ip
 8023bdc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023be0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023be4:	9300      	str	r3, [sp, #0]
 8023be6:	463a      	mov	r2, r7
 8023be8:	464b      	mov	r3, r9
 8023bea:	4641      	mov	r1, r8
 8023bec:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8023bee:	f7ff fd79 	bl	80236e4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8023bf2:	e754      	b.n	8023a9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023bf4:	142a      	asrs	r2, r5, #16
 8023bf6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023bfa:	1433      	asrs	r3, r6, #16
 8023bfc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023c00:	fb09 2303 	mla	r3, r9, r3, r2
 8023c04:	085a      	lsrs	r2, r3, #1
 8023c06:	07dc      	lsls	r4, r3, #31
 8023c08:	5cba      	ldrb	r2, [r7, r2]
 8023c0a:	bf54      	ite	pl
 8023c0c:	f002 020f 	andpl.w	r2, r2, #15
 8023c10:	1112      	asrmi	r2, r2, #4
 8023c12:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023c16:	b2d2      	uxtb	r2, r2
 8023c18:	2900      	cmp	r1, #0
 8023c1a:	f000 8097 	beq.w	8023d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023c1e:	f103 0b01 	add.w	fp, r3, #1
 8023c22:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8023c26:	f01b 0f01 	tst.w	fp, #1
 8023c2a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023c2e:	bf0c      	ite	eq
 8023c30:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023c34:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023c38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023c3c:	fa5f f48c 	uxtb.w	r4, ip
 8023c40:	9412      	str	r4, [sp, #72]	@ 0x48
 8023c42:	b300      	cbz	r0, 8023c86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023c44:	444b      	add	r3, r9
 8023c46:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023c4a:	07dc      	lsls	r4, r3, #31
 8023c4c:	f103 0301 	add.w	r3, r3, #1
 8023c50:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023c54:	bf54      	ite	pl
 8023c56:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023c5a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023c5e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023c62:	fa5f f48c 	uxtb.w	r4, ip
 8023c66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023c6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023c6c:	07dc      	lsls	r4, r3, #31
 8023c6e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023c72:	bf54      	ite	pl
 8023c74:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023c78:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023c7c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023c80:	fa5f f38c 	uxtb.w	r3, ip
 8023c84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023c86:	b289      	uxth	r1, r1
 8023c88:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023c8a:	b280      	uxth	r0, r0
 8023c8c:	fb01 f300 	mul.w	r3, r1, r0
 8023c90:	0109      	lsls	r1, r1, #4
 8023c92:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8023c96:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8023c9a:	1ac9      	subs	r1, r1, r3
 8023c9c:	b280      	uxth	r0, r0
 8023c9e:	b289      	uxth	r1, r1
 8023ca0:	ebac 0c00 	sub.w	ip, ip, r0
 8023ca4:	4361      	muls	r1, r4
 8023ca6:	fa1f fc8c 	uxth.w	ip, ip
 8023caa:	fb02 120c 	mla	r2, r2, ip, r1
 8023cae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023cb0:	fb00 2001 	mla	r0, r0, r1, r2
 8023cb4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023cb6:	fb03 0302 	mla	r3, r3, r2, r0
 8023cba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023cbe:	2b00      	cmp	r3, #0
 8023cc0:	d039      	beq.n	8023d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023cc2:	4a21      	ldr	r2, [pc, #132]	@ (8023d48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023cc4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023cc8:	6810      	ldr	r0, [r2, #0]
 8023cca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023ccc:	fa5f fc80 	uxtb.w	ip, r0
 8023cd0:	4353      	muls	r3, r2
 8023cd2:	1c5a      	adds	r2, r3, #1
 8023cd4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023cd8:	121b      	asrs	r3, r3, #8
 8023cda:	b29a      	uxth	r2, r3
 8023cdc:	43db      	mvns	r3, r3
 8023cde:	fb1c fc02 	smulbb	ip, ip, r2
 8023ce2:	b2db      	uxtb	r3, r3
 8023ce4:	fb01 c103 	mla	r1, r1, r3, ip
 8023ce8:	b289      	uxth	r1, r1
 8023cea:	f101 0c01 	add.w	ip, r1, #1
 8023cee:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023cf2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8023cf6:	fb1c fc03 	smulbb	ip, ip, r3
 8023cfa:	1209      	asrs	r1, r1, #8
 8023cfc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023d00:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8023d04:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023d08:	fb01 c102 	mla	r1, r1, r2, ip
 8023d0c:	b289      	uxth	r1, r1
 8023d0e:	f101 0c01 	add.w	ip, r1, #1
 8023d12:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023d16:	1209      	asrs	r1, r1, #8
 8023d18:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023d1c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023d20:	fb11 f303 	smulbb	r3, r1, r3
 8023d24:	fb00 3002 	mla	r0, r0, r2, r3
 8023d28:	b280      	uxth	r0, r0
 8023d2a:	1c42      	adds	r2, r0, #1
 8023d2c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023d30:	1200      	asrs	r0, r0, #8
 8023d32:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8023d36:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023d38:	f10e 0e03 	add.w	lr, lr, #3
 8023d3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8023d40:	441d      	add	r5, r3
 8023d42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023d44:	441e      	add	r6, r3
 8023d46:	e6db      	b.n	8023b00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8023d48:	24026428 	.word	0x24026428
 8023d4c:	2800      	cmp	r0, #0
 8023d4e:	d09a      	beq.n	8023c86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023d50:	444b      	add	r3, r9
 8023d52:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023d56:	07db      	lsls	r3, r3, #31
 8023d58:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023d5c:	bf54      	ite	pl
 8023d5e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023d62:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023d66:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023d6a:	fa5f f38c 	uxtb.w	r3, ip
 8023d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023d70:	e789      	b.n	8023c86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023d72:	b017      	add	sp, #92	@ 0x5c
 8023d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023d78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d7c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8023d80:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023d84:	2d00      	cmp	r5, #0
 8023d86:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8023d8a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8023d8e:	fb04 5e03 	mla	lr, r4, r3, r5
 8023d92:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8023d96:	f2c0 80b1 	blt.w	8023efc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023d9a:	45a9      	cmp	r9, r5
 8023d9c:	f340 80ae 	ble.w	8023efc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023da0:	2c00      	cmp	r4, #0
 8023da2:	f2c0 80ab 	blt.w	8023efc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023da6:	45a0      	cmp	r8, r4
 8023da8:	f340 80a8 	ble.w	8023efc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8023dac:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8023db0:	f01e 0f01 	tst.w	lr, #1
 8023db4:	5d97      	ldrb	r7, [r2, r6]
 8023db6:	bf0c      	ite	eq
 8023db8:	f007 070f 	andeq.w	r7, r7, #15
 8023dbc:	113f      	asrne	r7, r7, #4
 8023dbe:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8023dc2:	b2ff      	uxtb	r7, r7
 8023dc4:	f115 0a01 	adds.w	sl, r5, #1
 8023dc8:	f100 809a 	bmi.w	8023f00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8023dcc:	45d1      	cmp	r9, sl
 8023dce:	f340 8097 	ble.w	8023f00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8023dd2:	2c00      	cmp	r4, #0
 8023dd4:	f2c0 8094 	blt.w	8023f00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8023dd8:	45a0      	cmp	r8, r4
 8023dda:	f340 8091 	ble.w	8023f00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8023dde:	2800      	cmp	r0, #0
 8023de0:	f000 8090 	beq.w	8023f04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8023de4:	f10e 0b01 	add.w	fp, lr, #1
 8023de8:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8023dec:	f01b 0f01 	tst.w	fp, #1
 8023df0:	5d96      	ldrb	r6, [r2, r6]
 8023df2:	bf0c      	ite	eq
 8023df4:	f006 060f 	andeq.w	r6, r6, #15
 8023df8:	1136      	asrne	r6, r6, #4
 8023dfa:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023dfe:	b2f6      	uxtb	r6, r6
 8023e00:	f1bc 0f00 	cmp.w	ip, #0
 8023e04:	f000 8082 	beq.w	8023f0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8023e08:	2d00      	cmp	r5, #0
 8023e0a:	f104 0401 	add.w	r4, r4, #1
 8023e0e:	db7b      	blt.n	8023f08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023e10:	45a9      	cmp	r9, r5
 8023e12:	dd79      	ble.n	8023f08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023e14:	2c00      	cmp	r4, #0
 8023e16:	db77      	blt.n	8023f08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023e18:	45a0      	cmp	r8, r4
 8023e1a:	dd75      	ble.n	8023f08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023e1c:	eb03 0b0e 	add.w	fp, r3, lr
 8023e20:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8023e24:	f01b 0f01 	tst.w	fp, #1
 8023e28:	5d55      	ldrb	r5, [r2, r5]
 8023e2a:	bf0c      	ite	eq
 8023e2c:	f005 050f 	andeq.w	r5, r5, #15
 8023e30:	112d      	asrne	r5, r5, #4
 8023e32:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023e36:	b2ed      	uxtb	r5, r5
 8023e38:	f1ba 0f00 	cmp.w	sl, #0
 8023e3c:	db69      	blt.n	8023f12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023e3e:	45d1      	cmp	r9, sl
 8023e40:	dd67      	ble.n	8023f12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023e42:	2c00      	cmp	r4, #0
 8023e44:	db65      	blt.n	8023f12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023e46:	45a0      	cmp	r8, r4
 8023e48:	dd63      	ble.n	8023f12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023e4a:	2800      	cmp	r0, #0
 8023e4c:	d063      	beq.n	8023f16 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8023e4e:	3301      	adds	r3, #1
 8023e50:	449e      	add	lr, r3
 8023e52:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023e56:	f01e 0f01 	tst.w	lr, #1
 8023e5a:	5cd4      	ldrb	r4, [r2, r3]
 8023e5c:	bf0c      	ite	eq
 8023e5e:	f004 040f 	andeq.w	r4, r4, #15
 8023e62:	1124      	asrne	r4, r4, #4
 8023e64:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023e68:	b2e3      	uxtb	r3, r4
 8023e6a:	b282      	uxth	r2, r0
 8023e6c:	fa1f fc8c 	uxth.w	ip, ip
 8023e70:	fb02 f40c 	mul.w	r4, r2, ip
 8023e74:	0112      	lsls	r2, r2, #4
 8023e76:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8023e7a:	fa1f f08c 	uxth.w	r0, ip
 8023e7e:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8023e82:	1b12      	subs	r2, r2, r4
 8023e84:	ebac 0c00 	sub.w	ip, ip, r0
 8023e88:	b292      	uxth	r2, r2
 8023e8a:	fa1f fc8c 	uxth.w	ip, ip
 8023e8e:	4372      	muls	r2, r6
 8023e90:	fb07 220c 	mla	r2, r7, ip, r2
 8023e94:	fb00 2005 	mla	r0, r0, r5, r2
 8023e98:	fb04 0303 	mla	r3, r4, r3, r0
 8023e9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023ea0:	b353      	cbz	r3, 8023ef8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8023ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8023f1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8023ea4:	7808      	ldrb	r0, [r1, #0]
 8023ea6:	6814      	ldr	r4, [r2, #0]
 8023ea8:	b29a      	uxth	r2, r3
 8023eaa:	43db      	mvns	r3, r3
 8023eac:	b2e5      	uxtb	r5, r4
 8023eae:	b2db      	uxtb	r3, r3
 8023eb0:	fb15 f502 	smulbb	r5, r5, r2
 8023eb4:	fb00 5003 	mla	r0, r0, r3, r5
 8023eb8:	b280      	uxth	r0, r0
 8023eba:	1c45      	adds	r5, r0, #1
 8023ebc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023ec0:	784d      	ldrb	r5, [r1, #1]
 8023ec2:	fb15 f503 	smulbb	r5, r5, r3
 8023ec6:	1200      	asrs	r0, r0, #8
 8023ec8:	7008      	strb	r0, [r1, #0]
 8023eca:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023ece:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023ed2:	fb00 5002 	mla	r0, r0, r2, r5
 8023ed6:	b280      	uxth	r0, r0
 8023ed8:	1c45      	adds	r5, r0, #1
 8023eda:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023ede:	1200      	asrs	r0, r0, #8
 8023ee0:	7048      	strb	r0, [r1, #1]
 8023ee2:	7888      	ldrb	r0, [r1, #2]
 8023ee4:	fb10 f303 	smulbb	r3, r0, r3
 8023ee8:	fb04 3202 	mla	r2, r4, r2, r3
 8023eec:	b292      	uxth	r2, r2
 8023eee:	1c53      	adds	r3, r2, #1
 8023ef0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023ef4:	1212      	asrs	r2, r2, #8
 8023ef6:	708a      	strb	r2, [r1, #2]
 8023ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023efc:	2700      	movs	r7, #0
 8023efe:	e761      	b.n	8023dc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8023f00:	2600      	movs	r6, #0
 8023f02:	e77d      	b.n	8023e00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8023f04:	4606      	mov	r6, r0
 8023f06:	e77b      	b.n	8023e00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8023f08:	2500      	movs	r5, #0
 8023f0a:	e795      	b.n	8023e38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8023f0c:	4663      	mov	r3, ip
 8023f0e:	4665      	mov	r5, ip
 8023f10:	e7ab      	b.n	8023e6a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023f12:	2300      	movs	r3, #0
 8023f14:	e7a9      	b.n	8023e6a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023f16:	4603      	mov	r3, r0
 8023f18:	e7a7      	b.n	8023e6a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023f1a:	bf00      	nop
 8023f1c:	24026428 	.word	0x24026428

08023f20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f24:	b093      	sub	sp, #76	@ 0x4c
 8023f26:	461c      	mov	r4, r3
 8023f28:	920c      	str	r2, [sp, #48]	@ 0x30
 8023f2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023f2c:	9011      	str	r0, [sp, #68]	@ 0x44
 8023f2e:	9107      	str	r1, [sp, #28]
 8023f30:	6850      	ldr	r0, [r2, #4]
 8023f32:	6812      	ldr	r2, [r2, #0]
 8023f34:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023f38:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8023f3c:	fb00 1303 	mla	r3, r0, r3, r1
 8023f40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023f44:	eb02 0b03 	add.w	fp, r2, r3
 8023f48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023f4a:	689b      	ldr	r3, [r3, #8]
 8023f4c:	3301      	adds	r3, #1
 8023f4e:	f023 0301 	bic.w	r3, r3, #1
 8023f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023f56:	f8d3 8000 	ldr.w	r8, [r3]
 8023f5a:	9b07      	ldr	r3, [sp, #28]
 8023f5c:	2b00      	cmp	r3, #0
 8023f5e:	dc03      	bgt.n	8023f68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	f340 822b 	ble.w	80243be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023f68:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023f6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023f72:	1e48      	subs	r0, r1, #1
 8023f74:	1e57      	subs	r7, r2, #1
 8023f76:	2c00      	cmp	r4, #0
 8023f78:	f340 80d7 	ble.w	802412a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023f7c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023f80:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023f84:	d406      	bmi.n	8023f94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023f86:	4584      	cmp	ip, r0
 8023f88:	da04      	bge.n	8023f94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023f8a:	2b00      	cmp	r3, #0
 8023f8c:	db02      	blt.n	8023f94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023f8e:	42bb      	cmp	r3, r7
 8023f90:	f2c0 80cc 	blt.w	802412c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023f94:	f11c 0c01 	adds.w	ip, ip, #1
 8023f98:	f100 80bf 	bmi.w	802411a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023f9c:	4561      	cmp	r1, ip
 8023f9e:	f2c0 80bc 	blt.w	802411a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023fa2:	3301      	adds	r3, #1
 8023fa4:	f100 80b9 	bmi.w	802411a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023fa8:	429a      	cmp	r2, r3
 8023faa:	f2c0 80b6 	blt.w	802411a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023fae:	46a2      	mov	sl, r4
 8023fb0:	465f      	mov	r7, fp
 8023fb2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023fb6:	f1ba 0f00 	cmp.w	sl, #0
 8023fba:	f340 80d4 	ble.w	8024166 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8023fbe:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8023fc2:	1430      	asrs	r0, r6, #16
 8023fc4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023fc8:	9308      	str	r3, [sp, #32]
 8023fca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023fcc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023fd0:	142b      	asrs	r3, r5, #16
 8023fd2:	f100 8124 	bmi.w	802421e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023fd6:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023fda:	4293      	cmp	r3, r2
 8023fdc:	f280 811f 	bge.w	802421e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023fe0:	2800      	cmp	r0, #0
 8023fe2:	f2c0 811c 	blt.w	802421e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023fe6:	f10e 32ff 	add.w	r2, lr, #4294967295
 8023fea:	4290      	cmp	r0, r2
 8023fec:	f280 8117 	bge.w	802421e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023ff0:	fb00 3309 	mla	r3, r0, r9, r3
 8023ff4:	0858      	lsrs	r0, r3, #1
 8023ff6:	07da      	lsls	r2, r3, #31
 8023ff8:	9a08      	ldr	r2, [sp, #32]
 8023ffa:	f818 c000 	ldrb.w	ip, [r8, r0]
 8023ffe:	bf54      	ite	pl
 8024000:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024004:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024008:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802400c:	fa5f fc8c 	uxtb.w	ip, ip
 8024010:	2a00      	cmp	r2, #0
 8024012:	f000 80ed 	beq.w	80241f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8024016:	1c58      	adds	r0, r3, #1
 8024018:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802401c:	07c0      	lsls	r0, r0, #31
 802401e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8024022:	bf54      	ite	pl
 8024024:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024028:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802402c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8024030:	fa5f fe8e 	uxtb.w	lr, lr
 8024034:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8024038:	b1c9      	cbz	r1, 802406e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802403a:	444b      	add	r3, r9
 802403c:	0858      	lsrs	r0, r3, #1
 802403e:	07da      	lsls	r2, r3, #31
 8024040:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024044:	bf54      	ite	pl
 8024046:	f000 000f 	andpl.w	r0, r0, #15
 802404a:	1100      	asrmi	r0, r0, #4
 802404c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024050:	b2c0      	uxtb	r0, r0
 8024052:	900a      	str	r0, [sp, #40]	@ 0x28
 8024054:	1c58      	adds	r0, r3, #1
 8024056:	0843      	lsrs	r3, r0, #1
 8024058:	07c2      	lsls	r2, r0, #31
 802405a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802405e:	bf54      	ite	pl
 8024060:	f003 030f 	andpl.w	r3, r3, #15
 8024064:	111b      	asrmi	r3, r3, #4
 8024066:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802406a:	b2db      	uxtb	r3, r3
 802406c:	930e      	str	r3, [sp, #56]	@ 0x38
 802406e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024072:	b289      	uxth	r1, r1
 8024074:	fb02 f301 	mul.w	r3, r2, r1
 8024078:	0112      	lsls	r2, r2, #4
 802407a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802407e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8024082:	1ad2      	subs	r2, r2, r3
 8024084:	b289      	uxth	r1, r1
 8024086:	b292      	uxth	r2, r2
 8024088:	1a40      	subs	r0, r0, r1
 802408a:	fa1f fe80 	uxth.w	lr, r0
 802408e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024090:	4342      	muls	r2, r0
 8024092:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8024096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024098:	fb01 c102 	mla	r1, r1, r2, ip
 802409c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802409e:	fb03 1302 	mla	r3, r3, r2, r1
 80240a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80240a6:	b383      	cbz	r3, 802410a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80240a8:	4ac6      	ldr	r2, [pc, #792]	@ (80243c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80240aa:	2bff      	cmp	r3, #255	@ 0xff
 80240ac:	6812      	ldr	r2, [r2, #0]
 80240ae:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80240b2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80240b6:	b2d2      	uxtb	r2, r2
 80240b8:	f000 80ac 	beq.w	8024214 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80240bc:	b299      	uxth	r1, r3
 80240be:	43db      	mvns	r3, r3
 80240c0:	f897 c000 	ldrb.w	ip, [r7]
 80240c4:	fb12 f201 	smulbb	r2, r2, r1
 80240c8:	b2db      	uxtb	r3, r3
 80240ca:	fb10 f001 	smulbb	r0, r0, r1
 80240ce:	fb0c 2203 	mla	r2, ip, r3, r2
 80240d2:	fb1e f101 	smulbb	r1, lr, r1
 80240d6:	b292      	uxth	r2, r2
 80240d8:	f102 0c01 	add.w	ip, r2, #1
 80240dc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80240e0:	1212      	asrs	r2, r2, #8
 80240e2:	703a      	strb	r2, [r7, #0]
 80240e4:	787a      	ldrb	r2, [r7, #1]
 80240e6:	fb02 0003 	mla	r0, r2, r3, r0
 80240ea:	b280      	uxth	r0, r0
 80240ec:	1c42      	adds	r2, r0, #1
 80240ee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80240f2:	78ba      	ldrb	r2, [r7, #2]
 80240f4:	fb02 1303 	mla	r3, r2, r3, r1
 80240f8:	1200      	asrs	r0, r0, #8
 80240fa:	b29b      	uxth	r3, r3
 80240fc:	7078      	strb	r0, [r7, #1]
 80240fe:	f103 0e01 	add.w	lr, r3, #1
 8024102:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024106:	121b      	asrs	r3, r3, #8
 8024108:	70bb      	strb	r3, [r7, #2]
 802410a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802410c:	3703      	adds	r7, #3
 802410e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024112:	441d      	add	r5, r3
 8024114:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024116:	441e      	add	r6, r3
 8024118:	e74d      	b.n	8023fb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802411a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802411c:	3c01      	subs	r4, #1
 802411e:	f10b 0b03 	add.w	fp, fp, #3
 8024122:	441d      	add	r5, r3
 8024124:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024126:	441e      	add	r6, r3
 8024128:	e725      	b.n	8023f76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802412a:	d021      	beq.n	8024170 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802412c:	1e63      	subs	r3, r4, #1
 802412e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8024130:	fb00 5003 	mla	r0, r0, r3, r5
 8024134:	1400      	asrs	r0, r0, #16
 8024136:	f53f af3a 	bmi.w	8023fae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802413a:	3901      	subs	r1, #1
 802413c:	4288      	cmp	r0, r1
 802413e:	f6bf af36 	bge.w	8023fae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024142:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8024144:	fb01 6303 	mla	r3, r1, r3, r6
 8024148:	141b      	asrs	r3, r3, #16
 802414a:	f53f af30 	bmi.w	8023fae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802414e:	3a01      	subs	r2, #1
 8024150:	4293      	cmp	r3, r2
 8024152:	f6bf af2c 	bge.w	8023fae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024156:	f10b 0c03 	add.w	ip, fp, #3
 802415a:	46a6      	mov	lr, r4
 802415c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8024160:	f1be 0f00 	cmp.w	lr, #0
 8024164:	dc79      	bgt.n	802425a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024166:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802416a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802416e:	44a3      	add	fp, r4
 8024170:	9b07      	ldr	r3, [sp, #28]
 8024172:	2b00      	cmp	r3, #0
 8024174:	f340 8123 	ble.w	80243be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8024178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802417c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802417e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024182:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024186:	eef0 6a62 	vmov.f32	s13, s5
 802418a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802418e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024192:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024196:	ee16 5a90 	vmov	r5, s13
 802419a:	eef0 6a43 	vmov.f32	s13, s6
 802419e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80241a2:	ee16 6a90 	vmov	r6, s13
 80241a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80241aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80241ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80241b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80241b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80241ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80241be:	ee12 2a90 	vmov	r2, s5
 80241c2:	eef0 2a47 	vmov.f32	s5, s14
 80241c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80241ca:	ee13 2a10 	vmov	r2, s6
 80241ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 80241d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80241d2:	eeb0 3a67 	vmov.f32	s6, s15
 80241d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80241da:	9320      	str	r3, [sp, #128]	@ 0x80
 80241dc:	9b07      	ldr	r3, [sp, #28]
 80241de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80241e0:	3b01      	subs	r3, #1
 80241e2:	9307      	str	r3, [sp, #28]
 80241e4:	bf08      	it	eq
 80241e6:	4614      	moveq	r4, r2
 80241e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80241ea:	bf18      	it	ne
 80241ec:	461c      	movne	r4, r3
 80241ee:	e6b4      	b.n	8023f5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80241f0:	2900      	cmp	r1, #0
 80241f2:	f43f af3c 	beq.w	802406e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80241f6:	eb09 0003 	add.w	r0, r9, r3
 80241fa:	0843      	lsrs	r3, r0, #1
 80241fc:	07c0      	lsls	r0, r0, #31
 80241fe:	f818 3003 	ldrb.w	r3, [r8, r3]
 8024202:	bf54      	ite	pl
 8024204:	f003 030f 	andpl.w	r3, r3, #15
 8024208:	111b      	asrmi	r3, r3, #4
 802420a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802420e:	b2db      	uxtb	r3, r3
 8024210:	930a      	str	r3, [sp, #40]	@ 0x28
 8024212:	e72c      	b.n	802406e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024214:	703a      	strb	r2, [r7, #0]
 8024216:	7078      	strb	r0, [r7, #1]
 8024218:	f887 e002 	strb.w	lr, [r7, #2]
 802421c:	e775      	b.n	802410a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802421e:	1c5a      	adds	r2, r3, #1
 8024220:	f53f af73 	bmi.w	802410a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024224:	4594      	cmp	ip, r2
 8024226:	f6ff af70 	blt.w	802410a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802422a:	1c42      	adds	r2, r0, #1
 802422c:	f53f af6d 	bmi.w	802410a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024230:	4596      	cmp	lr, r2
 8024232:	f6ff af6a 	blt.w	802410a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024236:	9302      	str	r3, [sp, #8]
 8024238:	fa0f f38e 	sxth.w	r3, lr
 802423c:	9a08      	ldr	r2, [sp, #32]
 802423e:	9301      	str	r3, [sp, #4]
 8024240:	fa0f f38c 	sxth.w	r3, ip
 8024244:	9105      	str	r1, [sp, #20]
 8024246:	4639      	mov	r1, r7
 8024248:	9300      	str	r3, [sp, #0]
 802424a:	464b      	mov	r3, r9
 802424c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8024250:	4642      	mov	r2, r8
 8024252:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8024254:	f7ff fd90 	bl	8023d78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024258:	e757      	b.n	802410a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802425a:	142a      	asrs	r2, r5, #16
 802425c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024260:	1433      	asrs	r3, r6, #16
 8024262:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8024266:	fb09 2303 	mla	r3, r9, r3, r2
 802426a:	085a      	lsrs	r2, r3, #1
 802426c:	07d9      	lsls	r1, r3, #31
 802426e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8024272:	bf54      	ite	pl
 8024274:	f002 020f 	andpl.w	r2, r2, #15
 8024278:	1112      	asrmi	r2, r2, #4
 802427a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802427e:	b2d2      	uxtb	r2, r2
 8024280:	2800      	cmp	r0, #0
 8024282:	f000 8085 	beq.w	8024390 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8024286:	f103 0a01 	add.w	sl, r3, #1
 802428a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802428e:	f01a 0f01 	tst.w	sl, #1
 8024292:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024296:	bf0c      	ite	eq
 8024298:	f001 010f 	andeq.w	r1, r1, #15
 802429c:	1109      	asrne	r1, r1, #4
 802429e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80242a2:	b2c9      	uxtb	r1, r1
 80242a4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80242a6:	b1df      	cbz	r7, 80242e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80242a8:	444b      	add	r3, r9
 80242aa:	0859      	lsrs	r1, r3, #1
 80242ac:	f013 0f01 	tst.w	r3, #1
 80242b0:	f103 0301 	add.w	r3, r3, #1
 80242b4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80242b8:	bf0c      	ite	eq
 80242ba:	f001 010f 	andeq.w	r1, r1, #15
 80242be:	1109      	asrne	r1, r1, #4
 80242c0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80242c4:	b2c9      	uxtb	r1, r1
 80242c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80242c8:	0859      	lsrs	r1, r3, #1
 80242ca:	07db      	lsls	r3, r3, #31
 80242cc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80242d0:	bf54      	ite	pl
 80242d2:	f001 010f 	andpl.w	r1, r1, #15
 80242d6:	1109      	asrmi	r1, r1, #4
 80242d8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80242dc:	b2c9      	uxtb	r1, r1
 80242de:	9110      	str	r1, [sp, #64]	@ 0x40
 80242e0:	b280      	uxth	r0, r0
 80242e2:	b2bf      	uxth	r7, r7
 80242e4:	fb00 f307 	mul.w	r3, r0, r7
 80242e8:	0100      	lsls	r0, r0, #4
 80242ea:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80242ee:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80242f2:	1ac0      	subs	r0, r0, r3
 80242f4:	b2bf      	uxth	r7, r7
 80242f6:	b280      	uxth	r0, r0
 80242f8:	1bc9      	subs	r1, r1, r7
 80242fa:	fa1f fa81 	uxth.w	sl, r1
 80242fe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024300:	4348      	muls	r0, r1
 8024302:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024304:	fb02 020a 	mla	r2, r2, sl, r0
 8024308:	fb07 2701 	mla	r7, r7, r1, r2
 802430c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802430e:	fb03 7302 	mla	r3, r3, r2, r7
 8024312:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024316:	b393      	cbz	r3, 802437e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024318:	4a2a      	ldr	r2, [pc, #168]	@ (80243c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802431a:	2bff      	cmp	r3, #255	@ 0xff
 802431c:	6811      	ldr	r1, [r2, #0]
 802431e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024322:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024326:	b2c9      	uxtb	r1, r1
 8024328:	d042      	beq.n	80243b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802432a:	b298      	uxth	r0, r3
 802432c:	43db      	mvns	r3, r3
 802432e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024332:	fb11 f100 	smulbb	r1, r1, r0
 8024336:	b2db      	uxtb	r3, r3
 8024338:	fb17 f700 	smulbb	r7, r7, r0
 802433c:	fb02 1103 	mla	r1, r2, r3, r1
 8024340:	fb1a f000 	smulbb	r0, sl, r0
 8024344:	b289      	uxth	r1, r1
 8024346:	1c4a      	adds	r2, r1, #1
 8024348:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802434c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024350:	fb02 7703 	mla	r7, r2, r3, r7
 8024354:	1209      	asrs	r1, r1, #8
 8024356:	b2bf      	uxth	r7, r7
 8024358:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802435c:	1c7a      	adds	r2, r7, #1
 802435e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024362:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8024366:	fb02 0303 	mla	r3, r2, r3, r0
 802436a:	123f      	asrs	r7, r7, #8
 802436c:	b29b      	uxth	r3, r3
 802436e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024372:	1c5a      	adds	r2, r3, #1
 8024374:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024378:	121b      	asrs	r3, r3, #8
 802437a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802437e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024380:	f10c 0c03 	add.w	ip, ip, #3
 8024384:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024388:	441d      	add	r5, r3
 802438a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802438c:	441e      	add	r6, r3
 802438e:	e6e7      	b.n	8024160 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8024390:	2f00      	cmp	r7, #0
 8024392:	d0a5      	beq.n	80242e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024394:	444b      	add	r3, r9
 8024396:	0859      	lsrs	r1, r3, #1
 8024398:	07db      	lsls	r3, r3, #31
 802439a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802439e:	bf54      	ite	pl
 80243a0:	f001 010f 	andpl.w	r1, r1, #15
 80243a4:	1109      	asrmi	r1, r1, #4
 80243a6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80243aa:	b2c9      	uxtb	r1, r1
 80243ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80243ae:	e797      	b.n	80242e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80243b0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80243b4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80243b8:	f80c ac01 	strb.w	sl, [ip, #-1]
 80243bc:	e7df      	b.n	802437e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80243be:	b013      	add	sp, #76	@ 0x4c
 80243c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243c4:	24026428 	.word	0x24026428

080243c8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 80243c8:	b530      	push	{r4, r5, lr}
 80243ca:	b29d      	uxth	r5, r3
 80243cc:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80243d0:	780c      	ldrb	r4, [r1, #0]
 80243d2:	b298      	uxth	r0, r3
 80243d4:	7813      	ldrb	r3, [r2, #0]
 80243d6:	fb14 f405 	smulbb	r4, r4, r5
 80243da:	fb13 f300 	smulbb	r3, r3, r0
 80243de:	441c      	add	r4, r3
 80243e0:	b2a4      	uxth	r4, r4
 80243e2:	1c63      	adds	r3, r4, #1
 80243e4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80243e8:	7853      	ldrb	r3, [r2, #1]
 80243ea:	fb13 f300 	smulbb	r3, r3, r0
 80243ee:	1224      	asrs	r4, r4, #8
 80243f0:	7014      	strb	r4, [r2, #0]
 80243f2:	784c      	ldrb	r4, [r1, #1]
 80243f4:	fb14 f405 	smulbb	r4, r4, r5
 80243f8:	441c      	add	r4, r3
 80243fa:	b2a4      	uxth	r4, r4
 80243fc:	1c63      	adds	r3, r4, #1
 80243fe:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024402:	1224      	asrs	r4, r4, #8
 8024404:	7054      	strb	r4, [r2, #1]
 8024406:	788b      	ldrb	r3, [r1, #2]
 8024408:	7891      	ldrb	r1, [r2, #2]
 802440a:	fb13 f305 	smulbb	r3, r3, r5
 802440e:	fb11 f000 	smulbb	r0, r1, r0
 8024412:	4403      	add	r3, r0
 8024414:	b29b      	uxth	r3, r3
 8024416:	1c59      	adds	r1, r3, #1
 8024418:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802441c:	121b      	asrs	r3, r3, #8
 802441e:	7093      	strb	r3, [r2, #2]
 8024420:	bd30      	pop	{r4, r5, pc}
	...

08024424 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8024424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024428:	461c      	mov	r4, r3
 802442a:	b08b      	sub	sp, #44	@ 0x2c
 802442c:	460e      	mov	r6, r1
 802442e:	4615      	mov	r5, r2
 8024430:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024432:	4682      	mov	sl, r0
 8024434:	6861      	ldr	r1, [r4, #4]
 8024436:	aa06      	add	r2, sp, #24
 8024438:	6820      	ldr	r0, [r4, #0]
 802443a:	2702      	movs	r7, #2
 802443c:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8024440:	3504      	adds	r5, #4
 8024442:	c203      	stmia	r2!, {r0, r1}
 8024444:	6818      	ldr	r0, [r3, #0]
 8024446:	aa08      	add	r2, sp, #32
 8024448:	6859      	ldr	r1, [r3, #4]
 802444a:	c203      	stmia	r2!, {r0, r1}
 802444c:	a806      	add	r0, sp, #24
 802444e:	f7f2 fb79 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024452:	4621      	mov	r1, r4
 8024454:	a808      	add	r0, sp, #32
 8024456:	f7f2 fb9d 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802445a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802445e:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8024462:	f002 0301 	and.w	r3, r2, #1
 8024466:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802446a:	9302      	str	r3, [sp, #8]
 802446c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8024470:	f003 0101 	and.w	r1, r3, #1
 8024474:	9101      	str	r1, [sp, #4]
 8024476:	9801      	ldr	r0, [sp, #4]
 8024478:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 802447c:	4403      	add	r3, r0
 802447e:	fb01 2303 	mla	r3, r1, r3, r2
 8024482:	fb93 f3f7 	sdiv	r3, r3, r7
 8024486:	441e      	add	r6, r3
 8024488:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802448c:	441a      	add	r2, r3
 802448e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8024492:	4419      	add	r1, r3
 8024494:	4b70      	ldr	r3, [pc, #448]	@ (8024658 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8024496:	f8ad 2020 	strh.w	r2, [sp, #32]
 802449a:	6818      	ldr	r0, [r3, #0]
 802449c:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 80244a0:	6803      	ldr	r3, [r0, #0]
 80244a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80244a4:	4798      	blx	r3
 80244a6:	4a6d      	ldr	r2, [pc, #436]	@ (802465c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80244a8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80244ac:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80244b0:	8813      	ldrh	r3, [r2, #0]
 80244b2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80244b6:	fb03 1404 	mla	r4, r3, r4, r1
 80244ba:	4611      	mov	r1, r2
 80244bc:	fb0b f303 	mul.w	r3, fp, r3
 80244c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80244c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80244c8:	4404      	add	r4, r0
 80244ca:	4423      	add	r3, r4
 80244cc:	d073      	beq.n	80245b6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80244ce:	9705      	str	r7, [sp, #20]
 80244d0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80244d4:	9b03      	ldr	r3, [sp, #12]
 80244d6:	429c      	cmp	r4, r3
 80244d8:	f080 80b5 	bcs.w	8024646 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80244dc:	9b02      	ldr	r3, [sp, #8]
 80244de:	b35b      	cbz	r3, 8024538 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 80244e0:	7831      	ldrb	r1, [r6, #0]
 80244e2:	4622      	mov	r2, r4
 80244e4:	1c77      	adds	r7, r6, #1
 80244e6:	3403      	adds	r4, #3
 80244e8:	f001 010f 	and.w	r1, r1, #15
 80244ec:	f108 3bff 	add.w	fp, r8, #4294967295
 80244f0:	464b      	mov	r3, r9
 80244f2:	4650      	mov	r0, sl
 80244f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80244f8:	4429      	add	r1, r5
 80244fa:	f7ff ff65 	bl	80243c8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80244fe:	f1bb 0f01 	cmp.w	fp, #1
 8024502:	dd1c      	ble.n	802453e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8024504:	7839      	ldrb	r1, [r7, #0]
 8024506:	4622      	mov	r2, r4
 8024508:	464b      	mov	r3, r9
 802450a:	4650      	mov	r0, sl
 802450c:	0909      	lsrs	r1, r1, #4
 802450e:	f1ab 0b02 	sub.w	fp, fp, #2
 8024512:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024516:	4429      	add	r1, r5
 8024518:	f7ff ff56 	bl	80243c8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802451c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8024520:	1ce2      	adds	r2, r4, #3
 8024522:	464b      	mov	r3, r9
 8024524:	f001 010f 	and.w	r1, r1, #15
 8024528:	4650      	mov	r0, sl
 802452a:	3406      	adds	r4, #6
 802452c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024530:	4429      	add	r1, r5
 8024532:	f7ff ff49 	bl	80243c8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024536:	e7e2      	b.n	80244fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8024538:	4637      	mov	r7, r6
 802453a:	46c3      	mov	fp, r8
 802453c:	e7df      	b.n	80244fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802453e:	d10a      	bne.n	8024556 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8024540:	7839      	ldrb	r1, [r7, #0]
 8024542:	4622      	mov	r2, r4
 8024544:	3403      	adds	r4, #3
 8024546:	464b      	mov	r3, r9
 8024548:	0909      	lsrs	r1, r1, #4
 802454a:	4650      	mov	r0, sl
 802454c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024550:	4429      	add	r1, r5
 8024552:	f7ff ff39 	bl	80243c8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024556:	9b04      	ldr	r3, [sp, #16]
 8024558:	9a01      	ldr	r2, [sp, #4]
 802455a:	881b      	ldrh	r3, [r3, #0]
 802455c:	eba3 0308 	sub.w	r3, r3, r8
 8024560:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024564:	441c      	add	r4, r3
 8024566:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802456a:	4413      	add	r3, r2
 802456c:	9a05      	ldr	r2, [sp, #20]
 802456e:	fb93 f3f2 	sdiv	r3, r3, r2
 8024572:	441e      	add	r6, r3
 8024574:	e7ae      	b.n	80244d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8024576:	4632      	mov	r2, r6
 8024578:	46c4      	mov	ip, r8
 802457a:	e037      	b.n	80245ec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802457c:	d10e      	bne.n	802459c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 802457e:	7812      	ldrb	r2, [r2, #0]
 8024580:	3003      	adds	r0, #3
 8024582:	0912      	lsrs	r2, r2, #4
 8024584:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024588:	18ac      	adds	r4, r5, r2
 802458a:	5caa      	ldrb	r2, [r5, r2]
 802458c:	f800 2c03 	strb.w	r2, [r0, #-3]
 8024590:	7862      	ldrb	r2, [r4, #1]
 8024592:	f800 2c02 	strb.w	r2, [r0, #-2]
 8024596:	78a2      	ldrb	r2, [r4, #2]
 8024598:	f800 2c01 	strb.w	r2, [r0, #-1]
 802459c:	880c      	ldrh	r4, [r1, #0]
 802459e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80245a2:	eba4 0408 	sub.w	r4, r4, r8
 80245a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80245aa:	4404      	add	r4, r0
 80245ac:	9801      	ldr	r0, [sp, #4]
 80245ae:	4402      	add	r2, r0
 80245b0:	fb92 f2f7 	sdiv	r2, r2, r7
 80245b4:	4416      	add	r6, r2
 80245b6:	429c      	cmp	r4, r3
 80245b8:	d245      	bcs.n	8024646 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80245ba:	9a02      	ldr	r2, [sp, #8]
 80245bc:	2a00      	cmp	r2, #0
 80245be:	d0da      	beq.n	8024576 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80245c0:	7830      	ldrb	r0, [r6, #0]
 80245c2:	1c72      	adds	r2, r6, #1
 80245c4:	3403      	adds	r4, #3
 80245c6:	f000 000f 	and.w	r0, r0, #15
 80245ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80245ce:	eb05 0c00 	add.w	ip, r5, r0
 80245d2:	5c28      	ldrb	r0, [r5, r0]
 80245d4:	f804 0c03 	strb.w	r0, [r4, #-3]
 80245d8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80245dc:	f804 0c02 	strb.w	r0, [r4, #-2]
 80245e0:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80245e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80245e8:	f804 0c01 	strb.w	r0, [r4, #-1]
 80245ec:	f1bc 0f01 	cmp.w	ip, #1
 80245f0:	4620      	mov	r0, r4
 80245f2:	f104 0406 	add.w	r4, r4, #6
 80245f6:	ddc1      	ble.n	802457c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80245f8:	7810      	ldrb	r0, [r2, #0]
 80245fa:	f1ac 0c02 	sub.w	ip, ip, #2
 80245fe:	0900      	lsrs	r0, r0, #4
 8024600:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024604:	eb05 0e00 	add.w	lr, r5, r0
 8024608:	5c28      	ldrb	r0, [r5, r0]
 802460a:	f804 0c06 	strb.w	r0, [r4, #-6]
 802460e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024612:	f804 0c05 	strb.w	r0, [r4, #-5]
 8024616:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802461a:	f804 0c04 	strb.w	r0, [r4, #-4]
 802461e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8024622:	f000 000f 	and.w	r0, r0, #15
 8024626:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802462a:	eb05 0e00 	add.w	lr, r5, r0
 802462e:	5c28      	ldrb	r0, [r5, r0]
 8024630:	f804 0c03 	strb.w	r0, [r4, #-3]
 8024634:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024638:	f804 0c02 	strb.w	r0, [r4, #-2]
 802463c:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024640:	f804 0c01 	strb.w	r0, [r4, #-1]
 8024644:	e7d2      	b.n	80245ec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8024646:	4b04      	ldr	r3, [pc, #16]	@ (8024658 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8024648:	6818      	ldr	r0, [r3, #0]
 802464a:	6803      	ldr	r3, [r0, #0]
 802464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802464e:	4798      	blx	r3
 8024650:	b00b      	add	sp, #44	@ 0x2c
 8024652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024656:	bf00      	nop
 8024658:	24026418 	.word	0x24026418
 802465c:	24026412 	.word	0x24026412

08024660 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8024660:	b530      	push	{r4, r5, lr}
 8024662:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8024666:	780d      	ldrb	r5, [r1, #0]
 8024668:	28ff      	cmp	r0, #255	@ 0xff
 802466a:	d107      	bne.n	802467c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802466c:	2bff      	cmp	r3, #255	@ 0xff
 802466e:	d105      	bne.n	802467c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024670:	7015      	strb	r5, [r2, #0]
 8024672:	784b      	ldrb	r3, [r1, #1]
 8024674:	7053      	strb	r3, [r2, #1]
 8024676:	788b      	ldrb	r3, [r1, #2]
 8024678:	7093      	strb	r3, [r2, #2]
 802467a:	bd30      	pop	{r4, r5, pc}
 802467c:	fb10 f003 	smulbb	r0, r0, r3
 8024680:	b283      	uxth	r3, r0
 8024682:	1c58      	adds	r0, r3, #1
 8024684:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024688:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802468c:	b284      	uxth	r4, r0
 802468e:	43c0      	mvns	r0, r0
 8024690:	fb15 f504 	smulbb	r5, r5, r4
 8024694:	b2c3      	uxtb	r3, r0
 8024696:	7810      	ldrb	r0, [r2, #0]
 8024698:	fb00 5003 	mla	r0, r0, r3, r5
 802469c:	b280      	uxth	r0, r0
 802469e:	1c45      	adds	r5, r0, #1
 80246a0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80246a4:	7855      	ldrb	r5, [r2, #1]
 80246a6:	fb15 f503 	smulbb	r5, r5, r3
 80246aa:	1200      	asrs	r0, r0, #8
 80246ac:	7010      	strb	r0, [r2, #0]
 80246ae:	7848      	ldrb	r0, [r1, #1]
 80246b0:	fb00 5004 	mla	r0, r0, r4, r5
 80246b4:	b280      	uxth	r0, r0
 80246b6:	1c45      	adds	r5, r0, #1
 80246b8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80246bc:	1200      	asrs	r0, r0, #8
 80246be:	7050      	strb	r0, [r2, #1]
 80246c0:	7888      	ldrb	r0, [r1, #2]
 80246c2:	7891      	ldrb	r1, [r2, #2]
 80246c4:	fb11 f303 	smulbb	r3, r1, r3
 80246c8:	fb00 3304 	mla	r3, r0, r4, r3
 80246cc:	b29b      	uxth	r3, r3
 80246ce:	1c59      	adds	r1, r3, #1
 80246d0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80246d4:	121b      	asrs	r3, r3, #8
 80246d6:	e7cf      	b.n	8024678 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080246d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80246d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246dc:	461d      	mov	r5, r3
 80246de:	b08f      	sub	sp, #60	@ 0x3c
 80246e0:	460c      	mov	r4, r1
 80246e2:	4616      	mov	r6, r2
 80246e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80246e6:	4680      	mov	r8, r0
 80246e8:	6869      	ldr	r1, [r5, #4]
 80246ea:	aa0a      	add	r2, sp, #40	@ 0x28
 80246ec:	6828      	ldr	r0, [r5, #0]
 80246ee:	3604      	adds	r6, #4
 80246f0:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 80246f4:	4f57      	ldr	r7, [pc, #348]	@ (8024854 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 80246f6:	c203      	stmia	r2!, {r0, r1}
 80246f8:	6818      	ldr	r0, [r3, #0]
 80246fa:	aa0c      	add	r2, sp, #48	@ 0x30
 80246fc:	6859      	ldr	r1, [r3, #4]
 80246fe:	c203      	stmia	r2!, {r0, r1}
 8024700:	a80a      	add	r0, sp, #40	@ 0x28
 8024702:	f7f2 fa1f 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024706:	4629      	mov	r1, r5
 8024708:	a80c      	add	r0, sp, #48	@ 0x30
 802470a:	2502      	movs	r5, #2
 802470c:	f7f2 fa42 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024710:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8024714:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8024718:	f002 0301 	and.w	r3, r2, #1
 802471c:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8024720:	9304      	str	r3, [sp, #16]
 8024722:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024726:	f003 0101 	and.w	r1, r3, #1
 802472a:	9103      	str	r1, [sp, #12]
 802472c:	9803      	ldr	r0, [sp, #12]
 802472e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8024732:	4403      	add	r3, r0
 8024734:	6838      	ldr	r0, [r7, #0]
 8024736:	fb01 2303 	mla	r3, r1, r3, r2
 802473a:	fb93 f3f5 	sdiv	r3, r3, r5
 802473e:	18e5      	adds	r5, r4, r3
 8024740:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024744:	441a      	add	r2, r3
 8024746:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802474a:	4419      	add	r1, r3
 802474c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8024750:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8024754:	6803      	ldr	r3, [r0, #0]
 8024756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024758:	4798      	blx	r3
 802475a:	4a3f      	ldr	r2, [pc, #252]	@ (8024858 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 802475c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8024760:	8813      	ldrh	r3, [r2, #0]
 8024762:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8024766:	9207      	str	r2, [sp, #28]
 8024768:	fb03 1404 	mla	r4, r3, r4, r1
 802476c:	fb0a f303 	mul.w	r3, sl, r3
 8024770:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024778:	4404      	add	r4, r0
 802477a:	18e3      	adds	r3, r4, r3
 802477c:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8024780:	9b05      	ldr	r3, [sp, #20]
 8024782:	429c      	cmp	r4, r3
 8024784:	d25d      	bcs.n	8024842 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8024786:	9b04      	ldr	r3, [sp, #16]
 8024788:	2b00      	cmp	r3, #0
 802478a:	d037      	beq.n	80247fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 802478c:	782b      	ldrb	r3, [r5, #0]
 802478e:	1c6f      	adds	r7, r5, #1
 8024790:	f003 030f 	and.w	r3, r3, #15
 8024794:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024798:	9309      	str	r3, [sp, #36]	@ 0x24
 802479a:	0e1b      	lsrs	r3, r3, #24
 802479c:	d006      	beq.n	80247ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 802479e:	9300      	str	r3, [sp, #0]
 80247a0:	4622      	mov	r2, r4
 80247a2:	464b      	mov	r3, r9
 80247a4:	a909      	add	r1, sp, #36	@ 0x24
 80247a6:	4640      	mov	r0, r8
 80247a8:	f7ff ff5a 	bl	8024660 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80247ac:	3403      	adds	r4, #3
 80247ae:	f10b 3aff 	add.w	sl, fp, #4294967295
 80247b2:	f1ba 0f01 	cmp.w	sl, #1
 80247b6:	dd24      	ble.n	8024802 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 80247b8:	783b      	ldrb	r3, [r7, #0]
 80247ba:	091b      	lsrs	r3, r3, #4
 80247bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80247c0:	9308      	str	r3, [sp, #32]
 80247c2:	0e1b      	lsrs	r3, r3, #24
 80247c4:	d006      	beq.n	80247d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80247c6:	9300      	str	r3, [sp, #0]
 80247c8:	4622      	mov	r2, r4
 80247ca:	464b      	mov	r3, r9
 80247cc:	a908      	add	r1, sp, #32
 80247ce:	4640      	mov	r0, r8
 80247d0:	f7ff ff46 	bl	8024660 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80247d4:	f817 3b01 	ldrb.w	r3, [r7], #1
 80247d8:	f003 030f 	and.w	r3, r3, #15
 80247dc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80247e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80247e2:	0e1b      	lsrs	r3, r3, #24
 80247e4:	d006      	beq.n	80247f4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80247e6:	9300      	str	r3, [sp, #0]
 80247e8:	1ce2      	adds	r2, r4, #3
 80247ea:	464b      	mov	r3, r9
 80247ec:	a909      	add	r1, sp, #36	@ 0x24
 80247ee:	4640      	mov	r0, r8
 80247f0:	f7ff ff36 	bl	8024660 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80247f4:	3406      	adds	r4, #6
 80247f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80247fa:	e7da      	b.n	80247b2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80247fc:	462f      	mov	r7, r5
 80247fe:	46da      	mov	sl, fp
 8024800:	e7d7      	b.n	80247b2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8024802:	d10e      	bne.n	8024822 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8024804:	783b      	ldrb	r3, [r7, #0]
 8024806:	091b      	lsrs	r3, r3, #4
 8024808:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802480c:	9309      	str	r3, [sp, #36]	@ 0x24
 802480e:	0e1b      	lsrs	r3, r3, #24
 8024810:	d006      	beq.n	8024820 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8024812:	9300      	str	r3, [sp, #0]
 8024814:	4622      	mov	r2, r4
 8024816:	464b      	mov	r3, r9
 8024818:	a909      	add	r1, sp, #36	@ 0x24
 802481a:	4640      	mov	r0, r8
 802481c:	f7ff ff20 	bl	8024660 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024820:	3403      	adds	r4, #3
 8024822:	9b07      	ldr	r3, [sp, #28]
 8024824:	9a03      	ldr	r2, [sp, #12]
 8024826:	881b      	ldrh	r3, [r3, #0]
 8024828:	eba3 030b 	sub.w	r3, r3, fp
 802482c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024830:	441c      	add	r4, r3
 8024832:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024836:	4413      	add	r3, r2
 8024838:	2202      	movs	r2, #2
 802483a:	fb93 f3f2 	sdiv	r3, r3, r2
 802483e:	441d      	add	r5, r3
 8024840:	e79e      	b.n	8024780 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8024842:	9b06      	ldr	r3, [sp, #24]
 8024844:	6818      	ldr	r0, [r3, #0]
 8024846:	6803      	ldr	r3, [r0, #0]
 8024848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802484a:	4798      	blx	r3
 802484c:	b00f      	add	sp, #60	@ 0x3c
 802484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024852:	bf00      	nop
 8024854:	24026418 	.word	0x24026418
 8024858:	24026412 	.word	0x24026412

0802485c <CRC_Lock>:
 802485c:	4a2d      	ldr	r2, [pc, #180]	@ (8024914 <CRC_Lock+0xb8>)
 802485e:	b530      	push	{r4, r5, lr}
 8024860:	6813      	ldr	r3, [r2, #0]
 8024862:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8024866:	f023 0301 	bic.w	r3, r3, #1
 802486a:	6013      	str	r3, [r2, #0]
 802486c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8024870:	4b29      	ldr	r3, [pc, #164]	@ (8024918 <CRC_Lock+0xbc>)
 8024872:	681c      	ldr	r4, [r3, #0]
 8024874:	4014      	ands	r4, r2
 8024876:	42ac      	cmp	r4, r5
 8024878:	d005      	beq.n	8024886 <CRC_Lock+0x2a>
 802487a:	681c      	ldr	r4, [r3, #0]
 802487c:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8024880:	4014      	ands	r4, r2
 8024882:	42ac      	cmp	r4, r5
 8024884:	d125      	bne.n	80248d2 <CRC_Lock+0x76>
 8024886:	4b25      	ldr	r3, [pc, #148]	@ (802491c <CRC_Lock+0xc0>)
 8024888:	681b      	ldr	r3, [r3, #0]
 802488a:	2b00      	cmp	r3, #0
 802488c:	d139      	bne.n	8024902 <CRC_Lock+0xa6>
 802488e:	4b24      	ldr	r3, [pc, #144]	@ (8024920 <CRC_Lock+0xc4>)
 8024890:	681a      	ldr	r2, [r3, #0]
 8024892:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024896:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802489a:	d00d      	beq.n	80248b8 <CRC_Lock+0x5c>
 802489c:	681a      	ldr	r2, [r3, #0]
 802489e:	f240 4483 	movw	r4, #1155	@ 0x483
 80248a2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80248a6:	42a2      	cmp	r2, r4
 80248a8:	d006      	beq.n	80248b8 <CRC_Lock+0x5c>
 80248aa:	681b      	ldr	r3, [r3, #0]
 80248ac:	f240 4285 	movw	r2, #1157	@ 0x485
 80248b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80248b4:	4293      	cmp	r3, r2
 80248b6:	d124      	bne.n	8024902 <CRC_Lock+0xa6>
 80248b8:	4b1a      	ldr	r3, [pc, #104]	@ (8024924 <CRC_Lock+0xc8>)
 80248ba:	2201      	movs	r2, #1
 80248bc:	601a      	str	r2, [r3, #0]
 80248be:	681a      	ldr	r2, [r3, #0]
 80248c0:	2a00      	cmp	r2, #0
 80248c2:	d1fc      	bne.n	80248be <CRC_Lock+0x62>
 80248c4:	4b18      	ldr	r3, [pc, #96]	@ (8024928 <CRC_Lock+0xcc>)
 80248c6:	6018      	str	r0, [r3, #0]
 80248c8:	6818      	ldr	r0, [r3, #0]
 80248ca:	1a43      	subs	r3, r0, r1
 80248cc:	4258      	negs	r0, r3
 80248ce:	4158      	adcs	r0, r3
 80248d0:	e00e      	b.n	80248f0 <CRC_Lock+0x94>
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	4013      	ands	r3, r2
 80248d6:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80248da:	4293      	cmp	r3, r2
 80248dc:	d111      	bne.n	8024902 <CRC_Lock+0xa6>
 80248de:	4b13      	ldr	r3, [pc, #76]	@ (802492c <CRC_Lock+0xd0>)
 80248e0:	f240 4286 	movw	r2, #1158	@ 0x486
 80248e4:	681b      	ldr	r3, [r3, #0]
 80248e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80248ea:	4293      	cmp	r3, r2
 80248ec:	d001      	beq.n	80248f2 <CRC_Lock+0x96>
 80248ee:	2000      	movs	r0, #0
 80248f0:	bd30      	pop	{r4, r5, pc}
 80248f2:	4b0f      	ldr	r3, [pc, #60]	@ (8024930 <CRC_Lock+0xd4>)
 80248f4:	2201      	movs	r2, #1
 80248f6:	601a      	str	r2, [r3, #0]
 80248f8:	681a      	ldr	r2, [r3, #0]
 80248fa:	2a00      	cmp	r2, #0
 80248fc:	d1fc      	bne.n	80248f8 <CRC_Lock+0x9c>
 80248fe:	4b0d      	ldr	r3, [pc, #52]	@ (8024934 <CRC_Lock+0xd8>)
 8024900:	e7e1      	b.n	80248c6 <CRC_Lock+0x6a>
 8024902:	4b0d      	ldr	r3, [pc, #52]	@ (8024938 <CRC_Lock+0xdc>)
 8024904:	2201      	movs	r2, #1
 8024906:	601a      	str	r2, [r3, #0]
 8024908:	681a      	ldr	r2, [r3, #0]
 802490a:	2a00      	cmp	r2, #0
 802490c:	d1fc      	bne.n	8024908 <CRC_Lock+0xac>
 802490e:	4b0b      	ldr	r3, [pc, #44]	@ (802493c <CRC_Lock+0xe0>)
 8024910:	e7d9      	b.n	80248c6 <CRC_Lock+0x6a>
 8024912:	bf00      	nop
 8024914:	e0002000 	.word	0xe0002000
 8024918:	e000ed00 	.word	0xe000ed00
 802491c:	e0042000 	.word	0xe0042000
 8024920:	5c001000 	.word	0x5c001000
 8024924:	58024c08 	.word	0x58024c08
 8024928:	58024c00 	.word	0x58024c00
 802492c:	46008ff0 	.word	0x46008ff0
 8024930:	46024c08 	.word	0x46024c08
 8024934:	46024c00 	.word	0x46024c00
 8024938:	40023008 	.word	0x40023008
 802493c:	40023000 	.word	0x40023000

08024940 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024940:	6101      	str	r1, [r0, #16]
 8024942:	4770      	bx	lr

08024944 <_ZN8touchgfx8Gestures4tickEv>:
 8024944:	7b83      	ldrb	r3, [r0, #14]
 8024946:	b14b      	cbz	r3, 802495c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024948:	8903      	ldrh	r3, [r0, #8]
 802494a:	3301      	adds	r3, #1
 802494c:	b29b      	uxth	r3, r3
 802494e:	2b07      	cmp	r3, #7
 8024950:	8103      	strh	r3, [r0, #8]
 8024952:	bf81      	itttt	hi
 8024954:	2300      	movhi	r3, #0
 8024956:	8143      	strhhi	r3, [r0, #10]
 8024958:	8183      	strhhi	r3, [r0, #12]
 802495a:	7383      	strbhi	r3, [r0, #14]
 802495c:	4770      	bx	lr
	...

08024960 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024960:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024964:	4698      	mov	r8, r3
 8024966:	8883      	ldrh	r3, [r0, #4]
 8024968:	4604      	mov	r4, r0
 802496a:	4617      	mov	r7, r2
 802496c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024970:	eba8 0303 	sub.w	r3, r8, r3
 8024974:	4a19      	ldr	r2, [pc, #100]	@ (80249dc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8024976:	460e      	mov	r6, r1
 8024978:	b21b      	sxth	r3, r3
 802497a:	88c1      	ldrh	r1, [r0, #6]
 802497c:	9200      	str	r2, [sp, #0]
 802497e:	2000      	movs	r0, #0
 8024980:	2b00      	cmp	r3, #0
 8024982:	8aa2      	ldrh	r2, [r4, #20]
 8024984:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8024988:	bfb8      	it	lt
 802498a:	425b      	neglt	r3, r3
 802498c:	f88d 0004 	strb.w	r0, [sp, #4]
 8024990:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024994:	b21b      	sxth	r3, r3
 8024996:	f8ad 800a 	strh.w	r8, [sp, #10]
 802499a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802499e:	4293      	cmp	r3, r2
 80249a0:	dc07      	bgt.n	80249b2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80249a2:	1a69      	subs	r1, r5, r1
 80249a4:	b209      	sxth	r1, r1
 80249a6:	2900      	cmp	r1, #0
 80249a8:	bfb8      	it	lt
 80249aa:	4249      	neglt	r1, r1
 80249ac:	b209      	sxth	r1, r1
 80249ae:	428a      	cmp	r2, r1
 80249b0:	da10      	bge.n	80249d4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80249b2:	6920      	ldr	r0, [r4, #16]
 80249b4:	4669      	mov	r1, sp
 80249b6:	eba8 0606 	sub.w	r6, r8, r6
 80249ba:	1bef      	subs	r7, r5, r7
 80249bc:	6803      	ldr	r3, [r0, #0]
 80249be:	685b      	ldr	r3, [r3, #4]
 80249c0:	4798      	blx	r3
 80249c2:	2300      	movs	r3, #0
 80249c4:	2001      	movs	r0, #1
 80249c6:	8166      	strh	r6, [r4, #10]
 80249c8:	8123      	strh	r3, [r4, #8]
 80249ca:	81a7      	strh	r7, [r4, #12]
 80249cc:	f8a4 8004 	strh.w	r8, [r4, #4]
 80249d0:	80e5      	strh	r5, [r4, #6]
 80249d2:	73a0      	strb	r0, [r4, #14]
 80249d4:	b004      	add	sp, #16
 80249d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80249da:	bf00      	nop
 80249dc:	0802a530 	.word	0x0802a530

080249e0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80249e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80249e2:	461e      	mov	r6, r3
 80249e4:	1e4b      	subs	r3, r1, #1
 80249e6:	b085      	sub	sp, #20
 80249e8:	4604      	mov	r4, r0
 80249ea:	2b01      	cmp	r3, #1
 80249ec:	460d      	mov	r5, r1
 80249ee:	4617      	mov	r7, r2
 80249f0:	d84b      	bhi.n	8024a8a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80249f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80249f6:	1cd3      	adds	r3, r2, #3
 80249f8:	b29b      	uxth	r3, r3
 80249fa:	2b06      	cmp	r3, #6
 80249fc:	d916      	bls.n	8024a2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80249fe:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8024aa0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024a02:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024a06:	f8cd c004 	str.w	ip, [sp, #4]
 8024a0a:	f04f 0c00 	mov.w	ip, #0
 8024a0e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024a12:	6900      	ldr	r0, [r0, #16]
 8024a14:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024a18:	a901      	add	r1, sp, #4
 8024a1a:	f88d c008 	strb.w	ip, [sp, #8]
 8024a1e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024a22:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024a26:	6803      	ldr	r3, [r0, #0]
 8024a28:	689b      	ldr	r3, [r3, #8]
 8024a2a:	4798      	blx	r3
 8024a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024a30:	1cd3      	adds	r3, r2, #3
 8024a32:	b29b      	uxth	r3, r3
 8024a34:	2b06      	cmp	r3, #6
 8024a36:	d916      	bls.n	8024a66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024a38:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8024aa0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024a3c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024a40:	f8cd c004 	str.w	ip, [sp, #4]
 8024a44:	f04f 0c01 	mov.w	ip, #1
 8024a48:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024a4c:	6920      	ldr	r0, [r4, #16]
 8024a4e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024a52:	a901      	add	r1, sp, #4
 8024a54:	f88d c008 	strb.w	ip, [sp, #8]
 8024a58:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024a5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024a60:	6803      	ldr	r3, [r0, #0]
 8024a62:	689b      	ldr	r3, [r3, #8]
 8024a64:	4798      	blx	r3
 8024a66:	4b0d      	ldr	r3, [pc, #52]	@ (8024a9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024a68:	a901      	add	r1, sp, #4
 8024a6a:	6920      	ldr	r0, [r4, #16]
 8024a6c:	9301      	str	r3, [sp, #4]
 8024a6e:	2300      	movs	r3, #0
 8024a70:	f88d 5008 	strb.w	r5, [sp, #8]
 8024a74:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024a78:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024a7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024a80:	6803      	ldr	r3, [r0, #0]
 8024a82:	681b      	ldr	r3, [r3, #0]
 8024a84:	4798      	blx	r3
 8024a86:	b005      	add	sp, #20
 8024a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a8a:	2900      	cmp	r1, #0
 8024a8c:	d1eb      	bne.n	8024a66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024a8e:	80a2      	strh	r2, [r4, #4]
 8024a90:	80c6      	strh	r6, [r0, #6]
 8024a92:	60a1      	str	r1, [r4, #8]
 8024a94:	81a1      	strh	r1, [r4, #12]
 8024a96:	73a1      	strb	r1, [r4, #14]
 8024a98:	e7e5      	b.n	8024a66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024a9a:	bf00      	nop
 8024a9c:	0802a51c 	.word	0x0802a51c
 8024aa0:	0802a544 	.word	0x0802a544

08024aa4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8024aa4:	10c9      	asrs	r1, r1, #3
 8024aa6:	2900      	cmp	r1, #0
 8024aa8:	bfb8      	it	lt
 8024aaa:	4249      	neglt	r1, r1
 8024aac:	2801      	cmp	r0, #1
 8024aae:	d108      	bne.n	8024ac2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8024ab0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024ab4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8024ab8:	4601      	mov	r1, r0
 8024aba:	dd02      	ble.n	8024ac2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8024abc:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8024ac0:	4770      	bx	lr
 8024ac2:	29ff      	cmp	r1, #255	@ 0xff
 8024ac4:	bfa8      	it	ge
 8024ac6:	21ff      	movge	r1, #255	@ 0xff
 8024ac8:	4608      	mov	r0, r1
 8024aca:	4770      	bx	lr

08024acc <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024acc:	b410      	push	{r4}
 8024ace:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8024ad2:	429c      	cmp	r4, r3
 8024ad4:	d803      	bhi.n	8024ade <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8024ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ada:	f7f0 bb3d 	b.w	8015158 <_ZN8touchgfx7Outline6lineToEii>
 8024ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ae2:	4770      	bx	lr

08024ae4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8024ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ae8:	b08b      	sub	sp, #44	@ 0x2c
 8024aea:	4606      	mov	r6, r0
 8024aec:	468a      	mov	sl, r1
 8024aee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024af2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8024af6:	9308      	str	r3, [sp, #32]
 8024af8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8024afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8024afe:	f7f0 fc96 	bl	801542e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8024b02:	68b5      	ldr	r5, [r6, #8]
 8024b04:	4604      	mov	r4, r0
 8024b06:	2d00      	cmp	r5, #0
 8024b08:	d044      	beq.n	8024b94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8024b0a:	6873      	ldr	r3, [r6, #4]
 8024b0c:	42ab      	cmp	r3, r5
 8024b0e:	d33d      	bcc.n	8024b8c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8024b10:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8024b14:	f04f 0800 	mov.w	r8, #0
 8024b18:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8024b1c:	eb02 0b03 	add.w	fp, r2, r3
 8024b20:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024b24:	fb02 1203 	mla	r2, r2, r3, r1
 8024b28:	9205      	str	r2, [sp, #20]
 8024b2a:	1e6a      	subs	r2, r5, #1
 8024b2c:	9204      	str	r2, [sp, #16]
 8024b2e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8024b32:	f9b4 7000 	ldrsh.w	r7, [r4]
 8024b36:	454b      	cmp	r3, r9
 8024b38:	463a      	mov	r2, r7
 8024b3a:	d008      	beq.n	8024b4e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8024b3c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8024b40:	eb03 0b09 	add.w	fp, r3, r9
 8024b44:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8024b48:	fb03 1309 	mla	r3, r3, r9, r1
 8024b4c:	9305      	str	r3, [sp, #20]
 8024b4e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8024b52:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8024b56:	4498      	add	r8, r3
 8024b58:	9b04      	ldr	r3, [sp, #16]
 8024b5a:	3b01      	subs	r3, #1
 8024b5c:	9304      	str	r3, [sp, #16]
 8024b5e:	9b04      	ldr	r3, [sp, #16]
 8024b60:	3301      	adds	r3, #1
 8024b62:	d015      	beq.n	8024b90 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8024b64:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8024b68:	42bb      	cmp	r3, r7
 8024b6a:	d117      	bne.n	8024b9c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8024b6c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8024b70:	9b04      	ldr	r3, [sp, #16]
 8024b72:	4548      	cmp	r0, r9
 8024b74:	f103 33ff 	add.w	r3, r3, #4294967295
 8024b78:	d17d      	bne.n	8024c76 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8024b7a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8024b7e:	4401      	add	r1, r0
 8024b80:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8024b84:	4480      	add	r8, r0
 8024b86:	e7e9      	b.n	8024b5c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8024b88:	461f      	mov	r7, r3
 8024b8a:	e042      	b.n	8024c12 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8024b8c:	2000      	movs	r0, #0
 8024b8e:	e002      	b.n	8024b96 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8024b90:	2900      	cmp	r1, #0
 8024b92:	d16d      	bne.n	8024c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8024b94:	2001      	movs	r0, #1
 8024b96:	b00b      	add	sp, #44	@ 0x2c
 8024b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b9c:	b379      	cbz	r1, 8024bfe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8024b9e:	2f00      	cmp	r7, #0
 8024ba0:	db29      	blt.n	8024bf6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8024ba2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8024ba6:	42bb      	cmp	r3, r7
 8024ba8:	dd25      	ble.n	8024bf6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8024baa:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8024bae:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8024bb2:	f7ff ff77 	bl	8024aa4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8024bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024bb8:	fb10 f003 	smulbb	r0, r0, r3
 8024bbc:	b280      	uxth	r0, r0
 8024bbe:	1c41      	adds	r1, r0, #1
 8024bc0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024bc4:	1209      	asrs	r1, r1, #8
 8024bc6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8024bca:	d014      	beq.n	8024bf6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8024bcc:	b2c9      	uxtb	r1, r1
 8024bce:	9808      	ldr	r0, [sp, #32]
 8024bd0:	b2ba      	uxth	r2, r7
 8024bd2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8024bd4:	9102      	str	r1, [sp, #8]
 8024bd6:	2101      	movs	r1, #1
 8024bd8:	4413      	add	r3, r2
 8024bda:	4402      	add	r2, r0
 8024bdc:	9101      	str	r1, [sp, #4]
 8024bde:	fa0f f18b 	sxth.w	r1, fp
 8024be2:	f8da 0000 	ldr.w	r0, [sl]
 8024be6:	b21b      	sxth	r3, r3
 8024be8:	9100      	str	r1, [sp, #0]
 8024bea:	b212      	sxth	r2, r2
 8024bec:	6941      	ldr	r1, [r0, #20]
 8024bee:	4650      	mov	r0, sl
 8024bf0:	460d      	mov	r5, r1
 8024bf2:	9905      	ldr	r1, [sp, #20]
 8024bf4:	47a8      	blx	r5
 8024bf6:	9b04      	ldr	r3, [sp, #16]
 8024bf8:	1c7a      	adds	r2, r7, #1
 8024bfa:	3301      	adds	r3, #1
 8024bfc:	d0ca      	beq.n	8024b94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8024bfe:	f9b4 7000 	ldrsh.w	r7, [r4]
 8024c02:	1abb      	subs	r3, r7, r2
 8024c04:	2b00      	cmp	r3, #0
 8024c06:	dd31      	ble.n	8024c6c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024c08:	2a00      	cmp	r2, #0
 8024c0a:	dabd      	bge.n	8024b88 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8024c0c:	2f00      	cmp	r7, #0
 8024c0e:	dd2d      	ble.n	8024c6c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024c10:	2200      	movs	r2, #0
 8024c12:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8024c16:	19d1      	adds	r1, r2, r7
 8024c18:	4299      	cmp	r1, r3
 8024c1a:	db02      	blt.n	8024c22 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8024c1c:	1a9f      	subs	r7, r3, r2
 8024c1e:	2f00      	cmp	r7, #0
 8024c20:	dd24      	ble.n	8024c6c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024c22:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8024c26:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8024c2a:	f7ff ff3b 	bl	8024aa4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8024c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c30:	fb10 f003 	smulbb	r0, r0, r3
 8024c34:	b280      	uxth	r0, r0
 8024c36:	1c41      	adds	r1, r0, #1
 8024c38:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024c3c:	1209      	asrs	r1, r1, #8
 8024c3e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8024c42:	d013      	beq.n	8024c6c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024c44:	b292      	uxth	r2, r2
 8024c46:	9808      	ldr	r0, [sp, #32]
 8024c48:	b2c9      	uxtb	r1, r1
 8024c4a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8024c4c:	b23f      	sxth	r7, r7
 8024c4e:	4413      	add	r3, r2
 8024c50:	9102      	str	r1, [sp, #8]
 8024c52:	4402      	add	r2, r0
 8024c54:	fa0f f18b 	sxth.w	r1, fp
 8024c58:	f8da 0000 	ldr.w	r0, [sl]
 8024c5c:	b21b      	sxth	r3, r3
 8024c5e:	9100      	str	r1, [sp, #0]
 8024c60:	b212      	sxth	r2, r2
 8024c62:	9701      	str	r7, [sp, #4]
 8024c64:	9905      	ldr	r1, [sp, #20]
 8024c66:	6947      	ldr	r7, [r0, #20]
 8024c68:	4650      	mov	r0, sl
 8024c6a:	47b8      	blx	r7
 8024c6c:	464b      	mov	r3, r9
 8024c6e:	e75e      	b.n	8024b2e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8024c70:	2f00      	cmp	r7, #0
 8024c72:	da96      	bge.n	8024ba2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8024c74:	e78e      	b.n	8024b94 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8024c76:	2900      	cmp	r1, #0
 8024c78:	d0f8      	beq.n	8024c6c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024c7a:	e790      	b.n	8024b9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08024c7c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8024c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024c80:	461e      	mov	r6, r3
 8024c82:	4b36      	ldr	r3, [pc, #216]	@ (8024d5c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8024c84:	2500      	movs	r5, #0
 8024c86:	f100 0814 	add.w	r8, r0, #20
 8024c8a:	4604      	mov	r4, r0
 8024c8c:	4617      	mov	r7, r2
 8024c8e:	e9c0 3100 	strd	r3, r1, [r0]
 8024c92:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8024c96:	8185      	strh	r5, [r0, #12]
 8024c98:	8103      	strh	r3, [r0, #8]
 8024c9a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8024c9e:	81c5      	strh	r5, [r0, #14]
 8024ca0:	7283      	strb	r3, [r0, #10]
 8024ca2:	8205      	strh	r5, [r0, #16]
 8024ca4:	8245      	strh	r5, [r0, #18]
 8024ca6:	4640      	mov	r0, r8
 8024ca8:	f7ef fd9c 	bl	80147e4 <_ZN8touchgfx7OutlineC1Ev>
 8024cac:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8024cb0:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8024cb4:	466b      	mov	r3, sp
 8024cb6:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8024cba:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8024cbe:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8024cc2:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8024cc6:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8024cca:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8024cce:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8024cd2:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8024cd6:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8024cda:	6830      	ldr	r0, [r6, #0]
 8024cdc:	6871      	ldr	r1, [r6, #4]
 8024cde:	8872      	ldrh	r2, [r6, #2]
 8024ce0:	8835      	ldrh	r5, [r6, #0]
 8024ce2:	c303      	stmia	r3!, {r0, r1}
 8024ce4:	887b      	ldrh	r3, [r7, #2]
 8024ce6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8024cea:	4413      	add	r3, r2
 8024cec:	883a      	ldrh	r2, [r7, #0]
 8024cee:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8024cf2:	442a      	add	r2, r5
 8024cf4:	81e3      	strh	r3, [r4, #14]
 8024cf6:	8220      	strh	r0, [r4, #16]
 8024cf8:	4668      	mov	r0, sp
 8024cfa:	81a2      	strh	r2, [r4, #12]
 8024cfc:	8261      	strh	r1, [r4, #18]
 8024cfe:	4639      	mov	r1, r7
 8024d00:	f7f1 ff48 	bl	8016b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024d04:	f104 000c 	add.w	r0, r4, #12
 8024d08:	f7f1 ff1c 	bl	8016b44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024d0c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8024d10:	f8bd 2000 	ldrh.w	r2, [sp]
 8024d14:	4640      	mov	r0, r8
 8024d16:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8024d1a:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8024d1e:	f7ef fd46 	bl	80147ae <_ZN8touchgfx7Outline5resetEv>
 8024d22:	f9bd 3000 	ldrsh.w	r3, [sp]
 8024d26:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8024d2a:	4620      	mov	r0, r4
 8024d2c:	015b      	lsls	r3, r3, #5
 8024d2e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8024d30:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8024d34:	015b      	lsls	r3, r3, #5
 8024d36:	6523      	str	r3, [r4, #80]	@ 0x50
 8024d38:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8024d3c:	015b      	lsls	r3, r3, #5
 8024d3e:	6563      	str	r3, [r4, #84]	@ 0x54
 8024d40:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8024d44:	015b      	lsls	r3, r3, #5
 8024d46:	65a3      	str	r3, [r4, #88]	@ 0x58
 8024d48:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8024d4c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8024d50:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8024d54:	b002      	add	sp, #8
 8024d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d5a:	bf00      	nop
 8024d5c:	0802a7d4 	.word	0x0802a7d4

08024d60 <_ZN8touchgfx6Canvas5closeEv>:
 8024d60:	b538      	push	{r3, r4, r5, lr}
 8024d62:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8024d66:	4604      	mov	r4, r0
 8024d68:	b193      	cbz	r3, 8024d90 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024d6a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8024d6e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8024d72:	4213      	tst	r3, r2
 8024d74:	d10c      	bne.n	8024d90 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024d76:	f100 0514 	add.w	r5, r0, #20
 8024d7a:	b123      	cbz	r3, 8024d86 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8024d7c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8024d80:	4628      	mov	r0, r5
 8024d82:	f7ff fea3 	bl	8024acc <_ZN8touchgfx10Rasterizer6lineToEii>
 8024d86:	4628      	mov	r0, r5
 8024d88:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8024d8c:	f7ff fe9e 	bl	8024acc <_ZN8touchgfx10Rasterizer6lineToEii>
 8024d90:	2300      	movs	r3, #0
 8024d92:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024d96:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8024d9a:	4298      	cmp	r0, r3
 8024d9c:	bf34      	ite	cc
 8024d9e:	2000      	movcc	r0, #0
 8024da0:	2001      	movcs	r0, #1
 8024da2:	bd38      	pop	{r3, r4, r5, pc}

08024da4 <_ZN8touchgfx6Canvas6renderEh>:
 8024da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024da8:	7a85      	ldrb	r5, [r0, #10]
 8024daa:	4604      	mov	r4, r0
 8024dac:	4369      	muls	r1, r5
 8024dae:	1c4d      	adds	r5, r1, #1
 8024db0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8024db4:	122d      	asrs	r5, r5, #8
 8024db6:	f000 8098 	beq.w	8024eea <_ZN8touchgfx6Canvas6renderEh+0x146>
 8024dba:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	f000 8093 	beq.w	8024eea <_ZN8touchgfx6Canvas6renderEh+0x146>
 8024dc4:	f7ff ffcc 	bl	8024d60 <_ZN8touchgfx6Canvas5closeEv>
 8024dc8:	4607      	mov	r7, r0
 8024dca:	2800      	cmp	r0, #0
 8024dcc:	d045      	beq.n	8024e5a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8024dce:	6860      	ldr	r0, [r4, #4]
 8024dd0:	4e47      	ldr	r6, [pc, #284]	@ (8024ef0 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8024dd2:	6803      	ldr	r3, [r0, #0]
 8024dd4:	6837      	ldr	r7, [r6, #0]
 8024dd6:	689b      	ldr	r3, [r3, #8]
 8024dd8:	4798      	blx	r3
 8024dda:	4601      	mov	r1, r0
 8024ddc:	4638      	mov	r0, r7
 8024dde:	f7ed f80d 	bl	8011dfc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8024de2:	4607      	mov	r7, r0
 8024de4:	f7df faaa 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8024de8:	6803      	ldr	r3, [r0, #0]
 8024dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8024dec:	4798      	blx	r3
 8024dee:	4680      	mov	r8, r0
 8024df0:	f7df faa4 	bl	800433c <_ZN8touchgfx3HAL3lcdEv>
 8024df4:	6803      	ldr	r3, [r0, #0]
 8024df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024df8:	4798      	blx	r3
 8024dfa:	280b      	cmp	r0, #11
 8024dfc:	d85a      	bhi.n	8024eb4 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8024dfe:	e8df f000 	tbb	[pc, r0]
 8024e02:	5b50      	.short	0x5b50
 8024e04:	3059066b 	.word	0x3059066b
 8024e08:	64646440 	.word	0x64646440
 8024e0c:	6464      	.short	0x6464
 8024e0e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8024e12:	2208      	movs	r2, #8
 8024e14:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024e18:	fb91 f2f2 	sdiv	r2, r1, r2
 8024e1c:	fb08 2303 	mla	r3, r8, r3, r2
 8024e20:	441f      	add	r7, r3
 8024e22:	424b      	negs	r3, r1
 8024e24:	f001 0107 	and.w	r1, r1, #7
 8024e28:	f003 0307 	and.w	r3, r3, #7
 8024e2c:	bf58      	it	pl
 8024e2e:	4259      	negpl	r1, r3
 8024e30:	b2c9      	uxtb	r1, r1
 8024e32:	b2ed      	uxtb	r5, r5
 8024e34:	463a      	mov	r2, r7
 8024e36:	fa0f f388 	sxth.w	r3, r8
 8024e3a:	f104 0014 	add.w	r0, r4, #20
 8024e3e:	e9cd 1500 	strd	r1, r5, [sp]
 8024e42:	6861      	ldr	r1, [r4, #4]
 8024e44:	f7ff fe4e 	bl	8024ae4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8024e48:	4607      	mov	r7, r0
 8024e4a:	6860      	ldr	r0, [r4, #4]
 8024e4c:	6803      	ldr	r3, [r0, #0]
 8024e4e:	691b      	ldr	r3, [r3, #16]
 8024e50:	4798      	blx	r3
 8024e52:	6830      	ldr	r0, [r6, #0]
 8024e54:	6803      	ldr	r3, [r0, #0]
 8024e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024e58:	4798      	blx	r3
 8024e5a:	4638      	mov	r0, r7
 8024e5c:	b002      	add	sp, #8
 8024e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e62:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8024e66:	2204      	movs	r2, #4
 8024e68:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024e6c:	fb91 f2f2 	sdiv	r2, r1, r2
 8024e70:	fb08 2303 	mla	r3, r8, r3, r2
 8024e74:	441f      	add	r7, r3
 8024e76:	424b      	negs	r3, r1
 8024e78:	f001 0103 	and.w	r1, r1, #3
 8024e7c:	f003 0303 	and.w	r3, r3, #3
 8024e80:	e7d4      	b.n	8024e2c <_ZN8touchgfx6Canvas6renderEh+0x88>
 8024e82:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8024e86:	2202      	movs	r2, #2
 8024e88:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024e8c:	2900      	cmp	r1, #0
 8024e8e:	fb91 f2f2 	sdiv	r2, r1, r2
 8024e92:	f001 0101 	and.w	r1, r1, #1
 8024e96:	fb08 2303 	mla	r3, r8, r3, r2
 8024e9a:	bfb8      	it	lt
 8024e9c:	4249      	neglt	r1, r1
 8024e9e:	441f      	add	r7, r3
 8024ea0:	e7c6      	b.n	8024e30 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8024ea2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024ea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024eaa:	fb08 f303 	mul.w	r3, r8, r3
 8024eae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024eb2:	441f      	add	r7, r3
 8024eb4:	2100      	movs	r1, #0
 8024eb6:	e7bc      	b.n	8024e32 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8024eb8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024ebc:	2103      	movs	r1, #3
 8024ebe:	fb08 f203 	mul.w	r2, r8, r3
 8024ec2:	89a3      	ldrh	r3, [r4, #12]
 8024ec4:	fb13 2301 	smlabb	r3, r3, r1, r2
 8024ec8:	e7f3      	b.n	8024eb2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8024eca:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024ece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024ed2:	fb08 2303 	mla	r3, r8, r3, r2
 8024ed6:	e7ec      	b.n	8024eb2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8024ed8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8024edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024ee0:	fb08 f303 	mul.w	r3, r8, r3
 8024ee4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024ee8:	e7e3      	b.n	8024eb2 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8024eea:	2701      	movs	r7, #1
 8024eec:	e7b5      	b.n	8024e5a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8024eee:	bf00      	nop
 8024ef0:	24026418 	.word	0x24026418

08024ef4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8024ef4:	4b06      	ldr	r3, [pc, #24]	@ (8024f10 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8024ef6:	b510      	push	{r4, lr}
 8024ef8:	781b      	ldrb	r3, [r3, #0]
 8024efa:	2b01      	cmp	r3, #1
 8024efc:	d107      	bne.n	8024f0e <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8024efe:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8024f02:	680b      	ldr	r3, [r1, #0]
 8024f04:	6814      	ldr	r4, [r2, #0]
 8024f06:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024f0a:	6013      	str	r3, [r2, #0]
 8024f0c:	600c      	str	r4, [r1, #0]
 8024f0e:	bd10      	pop	{r4, pc}
 8024f10:	24026410 	.word	0x24026410

08024f14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024f14:	b513      	push	{r0, r1, r4, lr}
 8024f16:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8024f1a:	4604      	mov	r4, r0
 8024f1c:	e9cd 2100 	strd	r2, r1, [sp]
 8024f20:	b9a3      	cbnz	r3, 8024f4c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8024f22:	466a      	mov	r2, sp
 8024f24:	a901      	add	r1, sp, #4
 8024f26:	4620      	mov	r0, r4
 8024f28:	f7ff ffe4 	bl	8024ef4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024f2c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8024f2e:	9901      	ldr	r1, [sp, #4]
 8024f30:	9a00      	ldr	r2, [sp, #0]
 8024f32:	1ac9      	subs	r1, r1, r3
 8024f34:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024f36:	1ad2      	subs	r2, r2, r3
 8024f38:	9101      	str	r1, [sp, #4]
 8024f3a:	2a00      	cmp	r2, #0
 8024f3c:	9200      	str	r2, [sp, #0]
 8024f3e:	da0b      	bge.n	8024f58 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8024f40:	2301      	movs	r3, #1
 8024f42:	2900      	cmp	r1, #0
 8024f44:	da0e      	bge.n	8024f64 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8024f46:	f043 0304 	orr.w	r3, r3, #4
 8024f4a:	e013      	b.n	8024f74 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8024f4c:	f7ff ff08 	bl	8024d60 <_ZN8touchgfx6Canvas5closeEv>
 8024f50:	2800      	cmp	r0, #0
 8024f52:	d1e6      	bne.n	8024f22 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8024f54:	b002      	add	sp, #8
 8024f56:	bd10      	pop	{r4, pc}
 8024f58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024f5a:	429a      	cmp	r2, r3
 8024f5c:	bfac      	ite	ge
 8024f5e:	2302      	movge	r3, #2
 8024f60:	2300      	movlt	r3, #0
 8024f62:	e7ee      	b.n	8024f42 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8024f64:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8024f66:	4281      	cmp	r1, r0
 8024f68:	bfac      	ite	ge
 8024f6a:	2008      	movge	r0, #8
 8024f6c:	2000      	movlt	r0, #0
 8024f6e:	4318      	orrs	r0, r3
 8024f70:	b2c3      	uxtb	r3, r0
 8024f72:	b158      	cbz	r0, 8024f8c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8024f74:	2200      	movs	r2, #0
 8024f76:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8024f7a:	9901      	ldr	r1, [sp, #4]
 8024f7c:	9a00      	ldr	r2, [sp, #0]
 8024f7e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8024f80:	6722      	str	r2, [r4, #112]	@ 0x70
 8024f82:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8024f86:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8024f8a:	e7e3      	b.n	8024f54 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8024f8c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8024f90:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8024f94:	4298      	cmp	r0, r3
 8024f96:	d803      	bhi.n	8024fa0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8024f98:	f104 0014 	add.w	r0, r4, #20
 8024f9c:	f7f0 f8f6 	bl	801518c <_ZN8touchgfx7Outline6moveToEii>
 8024fa0:	2301      	movs	r3, #1
 8024fa2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024fa6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8024faa:	2300      	movs	r3, #0
 8024fac:	e7e5      	b.n	8024f7a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08024fae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024fb0:	ab02      	add	r3, sp, #8
 8024fb2:	4604      	mov	r4, r0
 8024fb4:	9101      	str	r1, [sp, #4]
 8024fb6:	a901      	add	r1, sp, #4
 8024fb8:	f843 2d08 	str.w	r2, [r3, #-8]!
 8024fbc:	461a      	mov	r2, r3
 8024fbe:	f7ff ff99 	bl	8024ef4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024fc2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8024fc4:	9901      	ldr	r1, [sp, #4]
 8024fc6:	9a00      	ldr	r2, [sp, #0]
 8024fc8:	1ac9      	subs	r1, r1, r3
 8024fca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024fcc:	1ad2      	subs	r2, r2, r3
 8024fce:	9101      	str	r1, [sp, #4]
 8024fd0:	2a00      	cmp	r2, #0
 8024fd2:	9200      	str	r2, [sp, #0]
 8024fd4:	db1c      	blt.n	8025010 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8024fd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024fd8:	429a      	cmp	r2, r3
 8024fda:	bfac      	ite	ge
 8024fdc:	2002      	movge	r0, #2
 8024fde:	2000      	movlt	r0, #0
 8024fe0:	2900      	cmp	r1, #0
 8024fe2:	db17      	blt.n	8025014 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8024fe4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8024fe6:	4299      	cmp	r1, r3
 8024fe8:	bfac      	ite	ge
 8024fea:	2308      	movge	r3, #8
 8024fec:	2300      	movlt	r3, #0
 8024fee:	4303      	orrs	r3, r0
 8024ff0:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8024ff4:	b2dd      	uxtb	r5, r3
 8024ff6:	b978      	cbnz	r0, 8025018 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8024ff8:	f104 0014 	add.w	r0, r4, #20
 8024ffc:	f7ff fd66 	bl	8024acc <_ZN8touchgfx10Rasterizer6lineToEii>
 8025000:	9b01      	ldr	r3, [sp, #4]
 8025002:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8025006:	6623      	str	r3, [r4, #96]	@ 0x60
 8025008:	9b00      	ldr	r3, [sp, #0]
 802500a:	6663      	str	r3, [r4, #100]	@ 0x64
 802500c:	b002      	add	sp, #8
 802500e:	bd70      	pop	{r4, r5, r6, pc}
 8025010:	2001      	movs	r0, #1
 8025012:	e7e5      	b.n	8024fe0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8025014:	2304      	movs	r3, #4
 8025016:	e7ea      	b.n	8024fee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8025018:	b113      	cbz	r3, 8025020 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802501a:	ea10 0305 	ands.w	r3, r0, r5
 802501e:	d11c      	bne.n	802505a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8025020:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8025024:	f104 0614 	add.w	r6, r4, #20
 8025028:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802502c:	b98b      	cbnz	r3, 8025052 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802502e:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8025032:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8025036:	4298      	cmp	r0, r3
 8025038:	d802      	bhi.n	8025040 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802503a:	4630      	mov	r0, r6
 802503c:	f7f0 f8a6 	bl	801518c <_ZN8touchgfx7Outline6moveToEii>
 8025040:	2301      	movs	r3, #1
 8025042:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8025046:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802504a:	4630      	mov	r0, r6
 802504c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8025050:	e7d4      	b.n	8024ffc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8025052:	4630      	mov	r0, r6
 8025054:	f7ff fd3a 	bl	8024acc <_ZN8touchgfx10Rasterizer6lineToEii>
 8025058:	e7f7      	b.n	802504a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802505a:	461d      	mov	r5, r3
 802505c:	e7d0      	b.n	8025000 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08025060 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8025060:	b538      	push	{r3, r4, r5, lr}
 8025062:	ed2d 8b10 	vpush	{d8-d15}
 8025066:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 802506a:	4605      	mov	r5, r0
 802506c:	eeb0 ca40 	vmov.f32	s24, s0
 8025070:	460c      	mov	r4, r1
 8025072:	eef0 ca60 	vmov.f32	s25, s1
 8025076:	ed9f ba57 	vldr	s22, [pc, #348]	@ 80251d4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 802507a:	eeb0 da41 	vmov.f32	s26, s2
 802507e:	eef0 da61 	vmov.f32	s27, s3
 8025082:	eeb0 ea42 	vmov.f32	s28, s4
 8025086:	eef0 ea62 	vmov.f32	s29, s5
 802508a:	eef0 aa6b 	vmov.f32	s21, s23
 802508e:	2c08      	cmp	r4, #8
 8025090:	d86e      	bhi.n	8025170 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8025092:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8025096:	ee7d 7aee 	vsub.f32	s15, s27, s29
 802509a:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802509e:	ee3e 7aec 	vsub.f32	s14, s29, s25
 80250a2:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 80250a6:	ee3c fa0d 	vadd.f32	s30, s24, s26
 80250aa:	ee7c faad 	vadd.f32	s31, s25, s27
 80250ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 80250b2:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 80250b6:	ee3d aaae 	vadd.f32	s20, s27, s29
 80250ba:	ee2f fa2b 	vmul.f32	s30, s30, s23
 80250be:	ee6f faab 	vmul.f32	s31, s31, s23
 80250c2:	ee69 9aab 	vmul.f32	s19, s19, s23
 80250c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80250ca:	ee2a aa2b 	vmul.f32	s20, s20, s23
 80250ce:	ee7f 8a29 	vadd.f32	s17, s30, s19
 80250d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250d6:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 80250da:	ee68 8aab 	vmul.f32	s17, s17, s23
 80250de:	bf48      	it	mi
 80250e0:	eef1 7a67 	vnegmi.f32	s15, s15
 80250e4:	ee29 9a2b 	vmul.f32	s18, s18, s23
 80250e8:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80250ec:	eef4 7acb 	vcmpe.f32	s15, s22
 80250f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250f4:	dd3f      	ble.n	8025176 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80250f6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80250fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80250fe:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8025102:	ee27 7a06 	vmul.f32	s14, s14, s12
 8025106:	eef4 7ac7 	vcmpe.f32	s15, s14
 802510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802510e:	d847      	bhi.n	80251a0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8025110:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8025114:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8025118:	f000 fa39 	bl	802558e <atan2f>
 802511c:	eeb0 8a40 	vmov.f32	s16, s0
 8025120:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8025124:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8025128:	f000 fa31 	bl	802558e <atan2f>
 802512c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8025130:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80251d8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8025134:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802513c:	bf48      	it	mi
 802513e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8025142:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802514a:	bfa4      	itt	ge
 802514c:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 80251dc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8025150:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8025154:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80251e0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8025158:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025160:	d51e      	bpl.n	80251a0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8025162:	eef0 0a49 	vmov.f32	s1, s18
 8025166:	4628      	mov	r0, r5
 8025168:	eeb0 0a68 	vmov.f32	s0, s17
 802516c:	f7ed fcc6 	bl	8012afc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8025170:	ecbd 8b10 	vpop	{d8-d15}
 8025174:	bd38      	pop	{r3, r4, r5, pc}
 8025176:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 802517a:	eeb0 7a68 	vmov.f32	s14, s17
 802517e:	eef0 6a49 	vmov.f32	s13, s18
 8025182:	eea7 7aea 	vfms.f32	s14, s15, s21
 8025186:	ee7c 7aae 	vadd.f32	s15, s25, s29
 802518a:	eee7 6aea 	vfms.f32	s13, s15, s21
 802518e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8025192:	eee7 7a07 	vfma.f32	s15, s14, s14
 8025196:	eef4 7ac6 	vcmpe.f32	s15, s12
 802519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802519e:	d9e0      	bls.n	8025162 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 80251a0:	3401      	adds	r4, #1
 80251a2:	eef0 0a6c 	vmov.f32	s1, s25
 80251a6:	eeb0 0a4c 	vmov.f32	s0, s24
 80251aa:	4628      	mov	r0, r5
 80251ac:	4621      	mov	r1, r4
 80251ae:	eef0 2a49 	vmov.f32	s5, s18
 80251b2:	eeb0 2a68 	vmov.f32	s4, s17
 80251b6:	eef0 1a6f 	vmov.f32	s3, s31
 80251ba:	eeb0 1a4f 	vmov.f32	s2, s30
 80251be:	f7ff ff4f 	bl	8025060 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80251c2:	eef0 da4a 	vmov.f32	s27, s20
 80251c6:	eeb0 da69 	vmov.f32	s26, s19
 80251ca:	eef0 ca49 	vmov.f32	s25, s18
 80251ce:	eeb0 ca68 	vmov.f32	s24, s17
 80251d2:	e75c      	b.n	802508e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 80251d4:	2edbe6ff 	.word	0x2edbe6ff
 80251d8:	40490fdb 	.word	0x40490fdb
 80251dc:	40c90fdb 	.word	0x40c90fdb
 80251e0:	3dcccccd 	.word	0x3dcccccd

080251e4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 80251e4:	b530      	push	{r4, r5, lr}
 80251e6:	ed2d 8b10 	vpush	{d8-d15}
 80251ea:	eef0 8a40 	vmov.f32	s17, s0
 80251ee:	b085      	sub	sp, #20
 80251f0:	eef0 9a60 	vmov.f32	s19, s1
 80251f4:	4604      	mov	r4, r0
 80251f6:	eef0 fa41 	vmov.f32	s31, s2
 80251fa:	460d      	mov	r5, r1
 80251fc:	eeb0 fa61 	vmov.f32	s30, s3
 8025200:	eef0 ba42 	vmov.f32	s23, s4
 8025204:	eeb0 ca62 	vmov.f32	s24, s5
 8025208:	eef0 aa43 	vmov.f32	s21, s6
 802520c:	eeb0 ba63 	vmov.f32	s22, s7
 8025210:	2d08      	cmp	r5, #8
 8025212:	f200 8113 	bhi.w	802543c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8025216:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802521a:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 802521e:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8025222:	ee38 daaf 	vadd.f32	s26, s17, s31
 8025226:	ee26 6a27 	vmul.f32	s12, s12, s15
 802522a:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802522e:	ee2d da27 	vmul.f32	s26, s26, s15
 8025232:	ed8d 6a01 	vstr	s12, [sp, #4]
 8025236:	eea6 6aa7 	vfma.f32	s12, s13, s15
 802523a:	ee6c caa7 	vmul.f32	s25, s25, s15
 802523e:	eeb0 ea4d 	vmov.f32	s28, s26
 8025242:	ee79 da8f 	vadd.f32	s27, s19, s30
 8025246:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 802524a:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802524e:	ee66 6a27 	vmul.f32	s13, s12, s15
 8025252:	ee6d daa7 	vmul.f32	s27, s27, s15
 8025256:	edcd 6a03 	vstr	s13, [sp, #12]
 802525a:	eef0 6a6c 	vmov.f32	s13, s25
 802525e:	eef0 ea6d 	vmov.f32	s29, s27
 8025262:	ee2e ea27 	vmul.f32	s28, s28, s15
 8025266:	eee7 6a27 	vfma.f32	s13, s14, s15
 802526a:	eee7 ea27 	vfma.f32	s29, s14, s15
 802526e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8025272:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8025276:	eef0 6a67 	vmov.f32	s13, s15
 802527a:	ed8d 7a02 	vstr	s14, [sp, #8]
 802527e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8025282:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8025286:	ed9d 7a02 	vldr	s14, [sp, #8]
 802528a:	ee3e aa87 	vadd.f32	s20, s29, s14
 802528e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8025292:	ee2a aa27 	vmul.f32	s20, s20, s15
 8025296:	2d00      	cmp	r5, #0
 8025298:	f000 810b 	beq.w	80254b2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802529c:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 80252a0:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80254f8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 80252a4:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 80252a8:	ee7b 7a69 	vsub.f32	s15, s22, s19
 80252ac:	ee3f 6aea 	vsub.f32	s12, s31, s21
 80252b0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80252b4:	ee3b 5aea 	vsub.f32	s10, s23, s21
 80252b8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80252bc:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 80252c0:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 80252c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80252c8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80252cc:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 80252d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252d4:	bf48      	it	mi
 80252d6:	eeb1 7a47 	vnegmi.f32	s14, s14
 80252da:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80252de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252e2:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80252e6:	bf48      	it	mi
 80252e8:	eeb1 6a46 	vnegmi.f32	s12, s12
 80252ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252f0:	f340 80a8 	ble.w	8025444 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80252f4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80252f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80252fc:	dd5a      	ble.n	80253b4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80252fe:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8025302:	ee37 7a06 	vadd.f32	s14, s14, s12
 8025306:	eee7 5aa7 	vfma.f32	s11, s15, s15
 802530a:	ee27 7a07 	vmul.f32	s14, s14, s14
 802530e:	ee65 7a85 	vmul.f32	s15, s11, s10
 8025312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8025316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802531a:	f200 80ca 	bhi.w	80254b2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802531e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8025322:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8025326:	f000 f932 	bl	802558e <atan2f>
 802532a:	eeb0 8a40 	vmov.f32	s16, s0
 802532e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8025332:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8025336:	f000 f92a 	bl	802558e <atan2f>
 802533a:	ee38 fa40 	vsub.f32	s30, s16, s0
 802533e:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8025342:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8025346:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802534e:	bf48      	it	mi
 8025350:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8025354:	f000 f91b 	bl	802558e <atan2f>
 8025358:	ee30 0a48 	vsub.f32	s0, s0, s16
 802535c:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80254fc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8025360:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025368:	eeb4 fae7 	vcmpe.f32	s30, s15
 802536c:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80254fc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8025370:	bf48      	it	mi
 8025372:	eeb1 0a40 	vnegmi.f32	s0, s0
 8025376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802537a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802537e:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8025500 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8025382:	bfa4      	itt	ge
 8025384:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8025504 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8025388:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025390:	bfa4      	itt	ge
 8025392:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8025504 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8025396:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802539a:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802539e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80253a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253a6:	f140 8084 	bpl.w	80254b2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80253aa:	eef0 0a4a 	vmov.f32	s1, s20
 80253ae:	eeb0 0a49 	vmov.f32	s0, s18
 80253b2:	e040      	b.n	8025436 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 80253b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80253b8:	ee27 7a07 	vmul.f32	s14, s14, s14
 80253bc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80253c0:	ee67 7a85 	vmul.f32	s15, s15, s10
 80253c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80253c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253cc:	d871      	bhi.n	80254b2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80253ce:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80253d2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80253d6:	f000 f8da 	bl	802558e <atan2f>
 80253da:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80253de:	eeb0 8a40 	vmov.f32	s16, s0
 80253e2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80253e6:	f000 f8d2 	bl	802558e <atan2f>
 80253ea:	ee38 0a40 	vsub.f32	s0, s16, s0
 80253ee:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80254fc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80253f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80253f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253fa:	bf48      	it	mi
 80253fc:	eeb1 0a40 	vnegmi.f32	s0, s0
 8025400:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025408:	bfa4      	itt	ge
 802540a:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8025504 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802540e:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8025412:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8025500 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8025416:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802541e:	d548      	bpl.n	80254b2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025420:	eef0 0a4f 	vmov.f32	s1, s30
 8025424:	4620      	mov	r0, r4
 8025426:	eeb0 0a6f 	vmov.f32	s0, s31
 802542a:	f7ed fb67 	bl	8012afc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802542e:	eef0 0a4c 	vmov.f32	s1, s24
 8025432:	eeb0 0a6b 	vmov.f32	s0, s23
 8025436:	4620      	mov	r0, r4
 8025438:	f7ed fb60 	bl	8012afc <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802543c:	b005      	add	sp, #20
 802543e:	ecbd 8b10 	vpop	{d8-d15}
 8025442:	bd30      	pop	{r4, r5, pc}
 8025444:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80254f8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8025448:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025450:	dd19      	ble.n	8025486 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8025452:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8025456:	ee26 7a06 	vmul.f32	s14, s12, s12
 802545a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802545e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8025462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8025466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802546a:	d822      	bhi.n	80254b2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802546c:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8025470:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8025474:	f000 f88b 	bl	802558e <atan2f>
 8025478:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802547c:	eeb0 8a40 	vmov.f32	s16, s0
 8025480:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8025484:	e7af      	b.n	80253e6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8025486:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802548a:	eeb0 7a49 	vmov.f32	s14, s18
 802548e:	eeb0 6a4a 	vmov.f32	s12, s20
 8025492:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8025496:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802549a:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802549e:	ee66 7a06 	vmul.f32	s15, s12, s12
 80254a2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80254a6:	eef4 7ac5 	vcmpe.f32	s15, s10
 80254aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254ae:	f67f af7c 	bls.w	80253aa <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 80254b2:	3501      	adds	r5, #1
 80254b4:	eef0 0a69 	vmov.f32	s1, s19
 80254b8:	eeb0 0a68 	vmov.f32	s0, s17
 80254bc:	4620      	mov	r0, r4
 80254be:	4629      	mov	r1, r5
 80254c0:	eef0 3a4a 	vmov.f32	s7, s20
 80254c4:	eeb0 3a49 	vmov.f32	s6, s18
 80254c8:	eef0 2a6e 	vmov.f32	s5, s29
 80254cc:	eeb0 2a4e 	vmov.f32	s4, s28
 80254d0:	eef0 1a6d 	vmov.f32	s3, s27
 80254d4:	eeb0 1a4d 	vmov.f32	s2, s26
 80254d8:	f7ff fe84 	bl	80251e4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80254dc:	eeb0 ca6c 	vmov.f32	s24, s25
 80254e0:	eddd ba01 	vldr	s23, [sp, #4]
 80254e4:	eef0 9a4a 	vmov.f32	s19, s20
 80254e8:	ed9d fa02 	vldr	s30, [sp, #8]
 80254ec:	eef0 8a49 	vmov.f32	s17, s18
 80254f0:	eddd fa03 	vldr	s31, [sp, #12]
 80254f4:	e68c      	b.n	8025210 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80254f6:	bf00      	nop
 80254f8:	2edbe6ff 	.word	0x2edbe6ff
 80254fc:	40490fdb 	.word	0x40490fdb
 8025500:	3dcccccd 	.word	0x3dcccccd
 8025504:	40c90fdb 	.word	0x40c90fdb

08025508 <_ZN8touchgfx6CanvasD1Ev>:
 8025508:	4b04      	ldr	r3, [pc, #16]	@ (802551c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802550a:	b510      	push	{r4, lr}
 802550c:	4604      	mov	r4, r0
 802550e:	f840 3b14 	str.w	r3, [r0], #20
 8025512:	f7ef f944 	bl	801479e <_ZN8touchgfx7OutlineD1Ev>
 8025516:	4620      	mov	r0, r4
 8025518:	bd10      	pop	{r4, pc}
 802551a:	bf00      	nop
 802551c:	0802a7d4 	.word	0x0802a7d4

08025520 <_ZN8touchgfx6CanvasD0Ev>:
 8025520:	b510      	push	{r4, lr}
 8025522:	4604      	mov	r4, r0
 8025524:	f7ff fff0 	bl	8025508 <_ZN8touchgfx6CanvasD1Ev>
 8025528:	2174      	movs	r1, #116	@ 0x74
 802552a:	4620      	mov	r0, r4
 802552c:	f000 f807 	bl	802553e <_ZdlPvj>
 8025530:	4620      	mov	r0, r4
 8025532:	bd10      	pop	{r4, pc}

08025534 <__aeabi_atexit>:
 8025534:	460b      	mov	r3, r1
 8025536:	4601      	mov	r1, r0
 8025538:	4618      	mov	r0, r3
 802553a:	f000 bc5b 	b.w	8025df4 <__cxa_atexit>

0802553e <_ZdlPvj>:
 802553e:	f000 b812 	b.w	8025566 <_ZdlPv>

08025542 <__cxa_guard_acquire>:
 8025542:	6802      	ldr	r2, [r0, #0]
 8025544:	07d2      	lsls	r2, r2, #31
 8025546:	4603      	mov	r3, r0
 8025548:	d405      	bmi.n	8025556 <__cxa_guard_acquire+0x14>
 802554a:	7842      	ldrb	r2, [r0, #1]
 802554c:	b102      	cbz	r2, 8025550 <__cxa_guard_acquire+0xe>
 802554e:	deff      	udf	#255	@ 0xff
 8025550:	2001      	movs	r0, #1
 8025552:	7058      	strb	r0, [r3, #1]
 8025554:	4770      	bx	lr
 8025556:	2000      	movs	r0, #0
 8025558:	4770      	bx	lr

0802555a <__cxa_guard_release>:
 802555a:	2301      	movs	r3, #1
 802555c:	6003      	str	r3, [r0, #0]
 802555e:	4770      	bx	lr

08025560 <__cxa_pure_virtual>:
 8025560:	b508      	push	{r3, lr}
 8025562:	f000 f80f 	bl	8025584 <_ZSt9terminatev>

08025566 <_ZdlPv>:
 8025566:	f000 bb8f 	b.w	8025c88 <free>

0802556a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802556a:	b508      	push	{r3, lr}
 802556c:	4780      	blx	r0
 802556e:	f000 fb58 	bl	8025c22 <abort>
	...

08025574 <_ZSt13get_terminatev>:
 8025574:	4b02      	ldr	r3, [pc, #8]	@ (8025580 <_ZSt13get_terminatev+0xc>)
 8025576:	6818      	ldr	r0, [r3, #0]
 8025578:	f3bf 8f5b 	dmb	ish
 802557c:	4770      	bx	lr
 802557e:	bf00      	nop
 8025580:	240000dc 	.word	0x240000dc

08025584 <_ZSt9terminatev>:
 8025584:	b508      	push	{r3, lr}
 8025586:	f7ff fff5 	bl	8025574 <_ZSt13get_terminatev>
 802558a:	f7ff ffee 	bl	802556a <_ZN10__cxxabiv111__terminateEPFvvE>

0802558e <atan2f>:
 802558e:	f000 b9cf 	b.w	8025930 <__ieee754_atan2f>
	...

08025594 <sqrtf>:
 8025594:	b508      	push	{r3, lr}
 8025596:	ed2d 8b02 	vpush	{d8}
 802559a:	eeb0 8a40 	vmov.f32	s16, s0
 802559e:	f000 f9c4 	bl	802592a <__ieee754_sqrtf>
 80255a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80255a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255aa:	d60c      	bvs.n	80255c6 <sqrtf+0x32>
 80255ac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80255cc <sqrtf+0x38>
 80255b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80255b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80255b8:	d505      	bpl.n	80255c6 <sqrtf+0x32>
 80255ba:	f000 fe89 	bl	80262d0 <__errno>
 80255be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80255c2:	2321      	movs	r3, #33	@ 0x21
 80255c4:	6003      	str	r3, [r0, #0]
 80255c6:	ecbd 8b02 	vpop	{d8}
 80255ca:	bd08      	pop	{r3, pc}
 80255cc:	00000000 	.word	0x00000000

080255d0 <sinf_poly>:
 80255d0:	07cb      	lsls	r3, r1, #31
 80255d2:	d412      	bmi.n	80255fa <sinf_poly+0x2a>
 80255d4:	ee21 5b00 	vmul.f64	d5, d1, d0
 80255d8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80255dc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80255e0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80255e4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80255e8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80255ec:	eea6 0b05 	vfma.f64	d0, d6, d5
 80255f0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80255f4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80255f8:	4770      	bx	lr
 80255fa:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80255fe:	ee21 5b01 	vmul.f64	d5, d1, d1
 8025602:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8025606:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802560a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802560e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8025612:	eea1 0b06 	vfma.f64	d0, d1, d6
 8025616:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802561a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802561e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8025622:	e7e5      	b.n	80255f0 <sinf_poly+0x20>
 8025624:	0000      	movs	r0, r0
	...

08025628 <sinf>:
 8025628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802562a:	ee10 4a10 	vmov	r4, s0
 802562e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8025632:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8025636:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802563a:	eef0 7a40 	vmov.f32	s15, s0
 802563e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8025642:	d218      	bcs.n	8025676 <sinf+0x4e>
 8025644:	ee26 1b06 	vmul.f64	d1, d6, d6
 8025648:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802564c:	d20a      	bcs.n	8025664 <sinf+0x3c>
 802564e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8025652:	d103      	bne.n	802565c <sinf+0x34>
 8025654:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8025658:	ed8d 1a01 	vstr	s2, [sp, #4]
 802565c:	eeb0 0a67 	vmov.f32	s0, s15
 8025660:	b003      	add	sp, #12
 8025662:	bd30      	pop	{r4, r5, pc}
 8025664:	483a      	ldr	r0, [pc, #232]	@ (8025750 <sinf+0x128>)
 8025666:	eeb0 0b46 	vmov.f64	d0, d6
 802566a:	2100      	movs	r1, #0
 802566c:	b003      	add	sp, #12
 802566e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025672:	f7ff bfad 	b.w	80255d0 <sinf_poly>
 8025676:	f240 422e 	movw	r2, #1070	@ 0x42e
 802567a:	4293      	cmp	r3, r2
 802567c:	d824      	bhi.n	80256c8 <sinf+0xa0>
 802567e:	4b34      	ldr	r3, [pc, #208]	@ (8025750 <sinf+0x128>)
 8025680:	ed93 7b08 	vldr	d7, [r3, #32]
 8025684:	ee26 7b07 	vmul.f64	d7, d6, d7
 8025688:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802568c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8025690:	ee17 1a90 	vmov	r1, s15
 8025694:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8025698:	1609      	asrs	r1, r1, #24
 802569a:	ee07 1a90 	vmov	s15, r1
 802569e:	f001 0203 	and.w	r2, r1, #3
 80256a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80256a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80256aa:	ed92 0b00 	vldr	d0, [r2]
 80256ae:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80256b2:	f011 0f02 	tst.w	r1, #2
 80256b6:	eea5 6b47 	vfms.f64	d6, d5, d7
 80256ba:	bf08      	it	eq
 80256bc:	4618      	moveq	r0, r3
 80256be:	ee26 1b06 	vmul.f64	d1, d6, d6
 80256c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80256c6:	e7d1      	b.n	802566c <sinf+0x44>
 80256c8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80256cc:	d237      	bcs.n	802573e <sinf+0x116>
 80256ce:	4921      	ldr	r1, [pc, #132]	@ (8025754 <sinf+0x12c>)
 80256d0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80256d4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80256d8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80256dc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80256e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80256e4:	6a10      	ldr	r0, [r2, #32]
 80256e6:	6912      	ldr	r2, [r2, #16]
 80256e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80256ec:	40ab      	lsls	r3, r5
 80256ee:	fba0 5003 	umull	r5, r0, r0, r3
 80256f2:	4359      	muls	r1, r3
 80256f4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80256f8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80256fc:	0f9d      	lsrs	r5, r3, #30
 80256fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8025702:	1ac9      	subs	r1, r1, r3
 8025704:	f7da ffca 	bl	800069c <__aeabi_l2d>
 8025708:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802570c:	4b10      	ldr	r3, [pc, #64]	@ (8025750 <sinf+0x128>)
 802570e:	f004 0203 	and.w	r2, r4, #3
 8025712:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8025716:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8025748 <sinf+0x120>
 802571a:	ed92 0b00 	vldr	d0, [r2]
 802571e:	ec41 0b17 	vmov	d7, r0, r1
 8025722:	f014 0f02 	tst.w	r4, #2
 8025726:	ee27 7b06 	vmul.f64	d7, d7, d6
 802572a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802572e:	4629      	mov	r1, r5
 8025730:	bf08      	it	eq
 8025732:	4618      	moveq	r0, r3
 8025734:	ee27 1b07 	vmul.f64	d1, d7, d7
 8025738:	ee20 0b07 	vmul.f64	d0, d0, d7
 802573c:	e796      	b.n	802566c <sinf+0x44>
 802573e:	b003      	add	sp, #12
 8025740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025744:	f000 b8e2 	b.w	802590c <__math_invalidf>
 8025748:	54442d18 	.word	0x54442d18
 802574c:	3c1921fb 	.word	0x3c1921fb
 8025750:	0802a840 	.word	0x0802a840
 8025754:	0802a7e0 	.word	0x0802a7e0

08025758 <sinf_poly>:
 8025758:	07cb      	lsls	r3, r1, #31
 802575a:	d412      	bmi.n	8025782 <sinf_poly+0x2a>
 802575c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8025760:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8025764:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8025768:	eea6 7b01 	vfma.f64	d7, d6, d1
 802576c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8025770:	ee21 1b05 	vmul.f64	d1, d1, d5
 8025774:	eea6 0b05 	vfma.f64	d0, d6, d5
 8025778:	eea7 0b01 	vfma.f64	d0, d7, d1
 802577c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025780:	4770      	bx	lr
 8025782:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8025786:	ee21 5b01 	vmul.f64	d5, d1, d1
 802578a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802578e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8025792:	eea1 7b06 	vfma.f64	d7, d1, d6
 8025796:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802579a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802579e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80257a2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80257a6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80257aa:	e7e5      	b.n	8025778 <sinf_poly+0x20>
 80257ac:	0000      	movs	r0, r0
	...

080257b0 <cosf>:
 80257b0:	b538      	push	{r3, r4, r5, lr}
 80257b2:	ee10 4a10 	vmov	r4, s0
 80257b6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80257ba:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80257be:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80257c2:	d21f      	bcs.n	8025804 <cosf+0x54>
 80257c4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80257c8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80257cc:	f0c0 8082 	bcc.w	80258d4 <cosf+0x124>
 80257d0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80257d4:	4b44      	ldr	r3, [pc, #272]	@ (80258e8 <cosf+0x138>)
 80257d6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80257da:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80257de:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80257e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80257e6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80257ea:	eea7 0b05 	vfma.f64	d0, d7, d5
 80257ee:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80257f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80257f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80257fa:	eea6 0b07 	vfma.f64	d0, d6, d7
 80257fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025802:	bd38      	pop	{r3, r4, r5, pc}
 8025804:	f240 422e 	movw	r2, #1070	@ 0x42e
 8025808:	4293      	cmp	r3, r2
 802580a:	d829      	bhi.n	8025860 <cosf+0xb0>
 802580c:	4b36      	ldr	r3, [pc, #216]	@ (80258e8 <cosf+0x138>)
 802580e:	ed93 6b08 	vldr	d6, [r3, #32]
 8025812:	ee27 6b06 	vmul.f64	d6, d7, d6
 8025816:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802581a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802581e:	ee16 1a90 	vmov	r1, s13
 8025822:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8025826:	1609      	asrs	r1, r1, #24
 8025828:	ee06 1a90 	vmov	s13, r1
 802582c:	f001 0203 	and.w	r2, r1, #3
 8025830:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8025834:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8025838:	ed92 0b00 	vldr	d0, [r2]
 802583c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8025840:	f011 0f02 	tst.w	r1, #2
 8025844:	f081 0101 	eor.w	r1, r1, #1
 8025848:	eea5 7b46 	vfms.f64	d7, d5, d6
 802584c:	bf08      	it	eq
 802584e:	4618      	moveq	r0, r3
 8025850:	ee27 1b07 	vmul.f64	d1, d7, d7
 8025854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025858:	ee20 0b07 	vmul.f64	d0, d0, d7
 802585c:	f7ff bf7c 	b.w	8025758 <sinf_poly>
 8025860:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8025864:	d232      	bcs.n	80258cc <cosf+0x11c>
 8025866:	4921      	ldr	r1, [pc, #132]	@ (80258ec <cosf+0x13c>)
 8025868:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802586c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8025870:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8025874:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8025878:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802587c:	6a10      	ldr	r0, [r2, #32]
 802587e:	6912      	ldr	r2, [r2, #16]
 8025880:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8025884:	40ab      	lsls	r3, r5
 8025886:	fba0 5003 	umull	r5, r0, r0, r3
 802588a:	4359      	muls	r1, r3
 802588c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8025890:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8025894:	0f9d      	lsrs	r5, r3, #30
 8025896:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802589a:	1ac9      	subs	r1, r1, r3
 802589c:	f7da fefe 	bl	800069c <__aeabi_l2d>
 80258a0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80258a4:	4b10      	ldr	r3, [pc, #64]	@ (80258e8 <cosf+0x138>)
 80258a6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80258e0 <cosf+0x130>
 80258aa:	ec41 0b17 	vmov	d7, r0, r1
 80258ae:	f004 0203 	and.w	r2, r4, #3
 80258b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80258b6:	ed92 0b00 	vldr	d0, [r2]
 80258ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80258be:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80258c2:	f014 0f02 	tst.w	r4, #2
 80258c6:	f085 0101 	eor.w	r1, r5, #1
 80258ca:	e7bf      	b.n	802584c <cosf+0x9c>
 80258cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80258d0:	f000 b81c 	b.w	802590c <__math_invalidf>
 80258d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80258d8:	e793      	b.n	8025802 <cosf+0x52>
 80258da:	bf00      	nop
 80258dc:	f3af 8000 	nop.w
 80258e0:	54442d18 	.word	0x54442d18
 80258e4:	3c1921fb 	.word	0x3c1921fb
 80258e8:	0802a840 	.word	0x0802a840
 80258ec:	0802a7e0 	.word	0x0802a7e0

080258f0 <with_errnof>:
 80258f0:	b510      	push	{r4, lr}
 80258f2:	ed2d 8b02 	vpush	{d8}
 80258f6:	eeb0 8a40 	vmov.f32	s16, s0
 80258fa:	4604      	mov	r4, r0
 80258fc:	f000 fce8 	bl	80262d0 <__errno>
 8025900:	eeb0 0a48 	vmov.f32	s0, s16
 8025904:	ecbd 8b02 	vpop	{d8}
 8025908:	6004      	str	r4, [r0, #0]
 802590a:	bd10      	pop	{r4, pc}

0802590c <__math_invalidf>:
 802590c:	eef0 7a40 	vmov.f32	s15, s0
 8025910:	ee30 7a40 	vsub.f32	s14, s0, s0
 8025914:	eef4 7a67 	vcmp.f32	s15, s15
 8025918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802591c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8025920:	d602      	bvs.n	8025928 <__math_invalidf+0x1c>
 8025922:	2021      	movs	r0, #33	@ 0x21
 8025924:	f7ff bfe4 	b.w	80258f0 <with_errnof>
 8025928:	4770      	bx	lr

0802592a <__ieee754_sqrtf>:
 802592a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802592e:	4770      	bx	lr

08025930 <__ieee754_atan2f>:
 8025930:	ee10 2a90 	vmov	r2, s1
 8025934:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8025938:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802593c:	b510      	push	{r4, lr}
 802593e:	eef0 7a40 	vmov.f32	s15, s0
 8025942:	d806      	bhi.n	8025952 <__ieee754_atan2f+0x22>
 8025944:	ee10 0a10 	vmov	r0, s0
 8025948:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802594c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8025950:	d904      	bls.n	802595c <__ieee754_atan2f+0x2c>
 8025952:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8025956:	eeb0 0a67 	vmov.f32	s0, s15
 802595a:	bd10      	pop	{r4, pc}
 802595c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8025960:	d103      	bne.n	802596a <__ieee754_atan2f+0x3a>
 8025962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025966:	f000 b881 	b.w	8025a6c <atanf>
 802596a:	1794      	asrs	r4, r2, #30
 802596c:	f004 0402 	and.w	r4, r4, #2
 8025970:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8025974:	b93b      	cbnz	r3, 8025986 <__ieee754_atan2f+0x56>
 8025976:	2c02      	cmp	r4, #2
 8025978:	d05c      	beq.n	8025a34 <__ieee754_atan2f+0x104>
 802597a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8025a48 <__ieee754_atan2f+0x118>
 802597e:	2c03      	cmp	r4, #3
 8025980:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8025984:	e7e7      	b.n	8025956 <__ieee754_atan2f+0x26>
 8025986:	b939      	cbnz	r1, 8025998 <__ieee754_atan2f+0x68>
 8025988:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8025a4c <__ieee754_atan2f+0x11c>
 802598c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8025a50 <__ieee754_atan2f+0x120>
 8025990:	2800      	cmp	r0, #0
 8025992:	fe67 7a87 	vselge.f32	s15, s15, s14
 8025996:	e7de      	b.n	8025956 <__ieee754_atan2f+0x26>
 8025998:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802599c:	d110      	bne.n	80259c0 <__ieee754_atan2f+0x90>
 802599e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80259a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80259a6:	d107      	bne.n	80259b8 <__ieee754_atan2f+0x88>
 80259a8:	2c02      	cmp	r4, #2
 80259aa:	d846      	bhi.n	8025a3a <__ieee754_atan2f+0x10a>
 80259ac:	4b29      	ldr	r3, [pc, #164]	@ (8025a54 <__ieee754_atan2f+0x124>)
 80259ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80259b2:	edd3 7a00 	vldr	s15, [r3]
 80259b6:	e7ce      	b.n	8025956 <__ieee754_atan2f+0x26>
 80259b8:	2c02      	cmp	r4, #2
 80259ba:	d841      	bhi.n	8025a40 <__ieee754_atan2f+0x110>
 80259bc:	4b26      	ldr	r3, [pc, #152]	@ (8025a58 <__ieee754_atan2f+0x128>)
 80259be:	e7f6      	b.n	80259ae <__ieee754_atan2f+0x7e>
 80259c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80259c4:	d0e0      	beq.n	8025988 <__ieee754_atan2f+0x58>
 80259c6:	1a5b      	subs	r3, r3, r1
 80259c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80259cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80259d0:	da1a      	bge.n	8025a08 <__ieee754_atan2f+0xd8>
 80259d2:	2a00      	cmp	r2, #0
 80259d4:	da01      	bge.n	80259da <__ieee754_atan2f+0xaa>
 80259d6:	313c      	adds	r1, #60	@ 0x3c
 80259d8:	db19      	blt.n	8025a0e <__ieee754_atan2f+0xde>
 80259da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80259de:	f000 f919 	bl	8025c14 <fabsf>
 80259e2:	f000 f843 	bl	8025a6c <atanf>
 80259e6:	eef0 7a40 	vmov.f32	s15, s0
 80259ea:	2c01      	cmp	r4, #1
 80259ec:	d012      	beq.n	8025a14 <__ieee754_atan2f+0xe4>
 80259ee:	2c02      	cmp	r4, #2
 80259f0:	d017      	beq.n	8025a22 <__ieee754_atan2f+0xf2>
 80259f2:	2c00      	cmp	r4, #0
 80259f4:	d0af      	beq.n	8025956 <__ieee754_atan2f+0x26>
 80259f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8025a5c <__ieee754_atan2f+0x12c>
 80259fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80259fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8025a60 <__ieee754_atan2f+0x130>
 8025a02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025a06:	e7a6      	b.n	8025956 <__ieee754_atan2f+0x26>
 8025a08:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8025a4c <__ieee754_atan2f+0x11c>
 8025a0c:	e7ed      	b.n	80259ea <__ieee754_atan2f+0xba>
 8025a0e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8025a64 <__ieee754_atan2f+0x134>
 8025a12:	e7ea      	b.n	80259ea <__ieee754_atan2f+0xba>
 8025a14:	ee17 3a90 	vmov	r3, s15
 8025a18:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8025a1c:	ee07 3a90 	vmov	s15, r3
 8025a20:	e799      	b.n	8025956 <__ieee754_atan2f+0x26>
 8025a22:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8025a5c <__ieee754_atan2f+0x12c>
 8025a26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025a2a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8025a60 <__ieee754_atan2f+0x130>
 8025a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025a32:	e790      	b.n	8025956 <__ieee754_atan2f+0x26>
 8025a34:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8025a60 <__ieee754_atan2f+0x130>
 8025a38:	e78d      	b.n	8025956 <__ieee754_atan2f+0x26>
 8025a3a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8025a68 <__ieee754_atan2f+0x138>
 8025a3e:	e78a      	b.n	8025956 <__ieee754_atan2f+0x26>
 8025a40:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8025a64 <__ieee754_atan2f+0x134>
 8025a44:	e787      	b.n	8025956 <__ieee754_atan2f+0x26>
 8025a46:	bf00      	nop
 8025a48:	c0490fdb 	.word	0xc0490fdb
 8025a4c:	3fc90fdb 	.word	0x3fc90fdb
 8025a50:	bfc90fdb 	.word	0xbfc90fdb
 8025a54:	0802a92c 	.word	0x0802a92c
 8025a58:	0802a920 	.word	0x0802a920
 8025a5c:	33bbbd2e 	.word	0x33bbbd2e
 8025a60:	40490fdb 	.word	0x40490fdb
 8025a64:	00000000 	.word	0x00000000
 8025a68:	3f490fdb 	.word	0x3f490fdb

08025a6c <atanf>:
 8025a6c:	b538      	push	{r3, r4, r5, lr}
 8025a6e:	ee10 5a10 	vmov	r5, s0
 8025a72:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8025a76:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8025a7a:	eef0 7a40 	vmov.f32	s15, s0
 8025a7e:	d30f      	bcc.n	8025aa0 <atanf+0x34>
 8025a80:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8025a84:	d904      	bls.n	8025a90 <atanf+0x24>
 8025a86:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8025a8e:	bd38      	pop	{r3, r4, r5, pc}
 8025a90:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8025bc8 <atanf+0x15c>
 8025a94:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8025bcc <atanf+0x160>
 8025a98:	2d00      	cmp	r5, #0
 8025a9a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8025a9e:	e7f4      	b.n	8025a8a <atanf+0x1e>
 8025aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8025bd0 <atanf+0x164>)
 8025aa2:	429c      	cmp	r4, r3
 8025aa4:	d810      	bhi.n	8025ac8 <atanf+0x5c>
 8025aa6:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8025aaa:	d20a      	bcs.n	8025ac2 <atanf+0x56>
 8025aac:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8025bd4 <atanf+0x168>
 8025ab0:	ee30 7a07 	vadd.f32	s14, s0, s14
 8025ab4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025ab8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8025abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ac0:	dce3      	bgt.n	8025a8a <atanf+0x1e>
 8025ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8025ac6:	e013      	b.n	8025af0 <atanf+0x84>
 8025ac8:	f000 f8a4 	bl	8025c14 <fabsf>
 8025acc:	4b42      	ldr	r3, [pc, #264]	@ (8025bd8 <atanf+0x16c>)
 8025ace:	429c      	cmp	r4, r3
 8025ad0:	d84f      	bhi.n	8025b72 <atanf+0x106>
 8025ad2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8025ad6:	429c      	cmp	r4, r3
 8025ad8:	d841      	bhi.n	8025b5e <atanf+0xf2>
 8025ada:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8025ade:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8025ae2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025ae6:	2300      	movs	r3, #0
 8025ae8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025aec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025af0:	1c5a      	adds	r2, r3, #1
 8025af2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8025af6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8025bdc <atanf+0x170>
 8025afa:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8025be0 <atanf+0x174>
 8025afe:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8025be4 <atanf+0x178>
 8025b02:	ee66 6a06 	vmul.f32	s13, s12, s12
 8025b06:	eee6 5a87 	vfma.f32	s11, s13, s14
 8025b0a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8025be8 <atanf+0x17c>
 8025b0e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025b12:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8025bec <atanf+0x180>
 8025b16:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025b1a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8025bf0 <atanf+0x184>
 8025b1e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025b22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8025bf4 <atanf+0x188>
 8025b26:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025b2a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8025bf8 <atanf+0x18c>
 8025b2e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8025b32:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8025bfc <atanf+0x190>
 8025b36:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025b3a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8025c00 <atanf+0x194>
 8025b3e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8025b42:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8025c04 <atanf+0x198>
 8025b46:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025b4a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8025b4e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8025b56:	d121      	bne.n	8025b9c <atanf+0x130>
 8025b58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025b5c:	e795      	b.n	8025a8a <atanf+0x1e>
 8025b5e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8025b62:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025b66:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025b6a:	2301      	movs	r3, #1
 8025b6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b70:	e7be      	b.n	8025af0 <atanf+0x84>
 8025b72:	4b25      	ldr	r3, [pc, #148]	@ (8025c08 <atanf+0x19c>)
 8025b74:	429c      	cmp	r4, r3
 8025b76:	d80b      	bhi.n	8025b90 <atanf+0x124>
 8025b78:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8025b7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025b80:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025b84:	2302      	movs	r3, #2
 8025b86:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025b8e:	e7af      	b.n	8025af0 <atanf+0x84>
 8025b90:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8025b94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025b98:	2303      	movs	r3, #3
 8025b9a:	e7a9      	b.n	8025af0 <atanf+0x84>
 8025b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8025c0c <atanf+0x1a0>)
 8025b9e:	491c      	ldr	r1, [pc, #112]	@ (8025c10 <atanf+0x1a4>)
 8025ba0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8025ba4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025ba8:	edd3 6a00 	vldr	s13, [r3]
 8025bac:	ee37 7a66 	vsub.f32	s14, s14, s13
 8025bb0:	2d00      	cmp	r5, #0
 8025bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8025bb6:	edd2 7a00 	vldr	s15, [r2]
 8025bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025bbe:	bfb8      	it	lt
 8025bc0:	eef1 7a67 	vneglt.f32	s15, s15
 8025bc4:	e761      	b.n	8025a8a <atanf+0x1e>
 8025bc6:	bf00      	nop
 8025bc8:	bfc90fdb 	.word	0xbfc90fdb
 8025bcc:	3fc90fdb 	.word	0x3fc90fdb
 8025bd0:	3edfffff 	.word	0x3edfffff
 8025bd4:	7149f2ca 	.word	0x7149f2ca
 8025bd8:	3f97ffff 	.word	0x3f97ffff
 8025bdc:	3c8569d7 	.word	0x3c8569d7
 8025be0:	3d4bda59 	.word	0x3d4bda59
 8025be4:	bd6ef16b 	.word	0xbd6ef16b
 8025be8:	3d886b35 	.word	0x3d886b35
 8025bec:	3dba2e6e 	.word	0x3dba2e6e
 8025bf0:	3e124925 	.word	0x3e124925
 8025bf4:	3eaaaaab 	.word	0x3eaaaaab
 8025bf8:	bd15a221 	.word	0xbd15a221
 8025bfc:	bd9d8795 	.word	0xbd9d8795
 8025c00:	bde38e38 	.word	0xbde38e38
 8025c04:	be4ccccd 	.word	0xbe4ccccd
 8025c08:	401bffff 	.word	0x401bffff
 8025c0c:	0802a948 	.word	0x0802a948
 8025c10:	0802a938 	.word	0x0802a938

08025c14 <fabsf>:
 8025c14:	ee10 3a10 	vmov	r3, s0
 8025c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8025c1c:	ee00 3a10 	vmov	s0, r3
 8025c20:	4770      	bx	lr

08025c22 <abort>:
 8025c22:	b508      	push	{r3, lr}
 8025c24:	2006      	movs	r0, #6
 8025c26:	f000 fae1 	bl	80261ec <raise>
 8025c2a:	2001      	movs	r0, #1
 8025c2c:	f7db feea 	bl	8001a04 <_exit>

08025c30 <__assert_func>:
 8025c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025c32:	4614      	mov	r4, r2
 8025c34:	461a      	mov	r2, r3
 8025c36:	4b09      	ldr	r3, [pc, #36]	@ (8025c5c <__assert_func+0x2c>)
 8025c38:	681b      	ldr	r3, [r3, #0]
 8025c3a:	4605      	mov	r5, r0
 8025c3c:	68d8      	ldr	r0, [r3, #12]
 8025c3e:	b954      	cbnz	r4, 8025c56 <__assert_func+0x26>
 8025c40:	4b07      	ldr	r3, [pc, #28]	@ (8025c60 <__assert_func+0x30>)
 8025c42:	461c      	mov	r4, r3
 8025c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025c48:	9100      	str	r1, [sp, #0]
 8025c4a:	462b      	mov	r3, r5
 8025c4c:	4905      	ldr	r1, [pc, #20]	@ (8025c64 <__assert_func+0x34>)
 8025c4e:	f000 f983 	bl	8025f58 <fiprintf>
 8025c52:	f7ff ffe6 	bl	8025c22 <abort>
 8025c56:	4b04      	ldr	r3, [pc, #16]	@ (8025c68 <__assert_func+0x38>)
 8025c58:	e7f4      	b.n	8025c44 <__assert_func+0x14>
 8025c5a:	bf00      	nop
 8025c5c:	240000ec 	.word	0x240000ec
 8025c60:	0802a993 	.word	0x0802a993
 8025c64:	0802a965 	.word	0x0802a965
 8025c68:	0802a958 	.word	0x0802a958

08025c6c <atexit>:
 8025c6c:	2300      	movs	r3, #0
 8025c6e:	4601      	mov	r1, r0
 8025c70:	461a      	mov	r2, r3
 8025c72:	4618      	mov	r0, r3
 8025c74:	f000 bb68 	b.w	8026348 <__register_exitproc>

08025c78 <malloc>:
 8025c78:	4b02      	ldr	r3, [pc, #8]	@ (8025c84 <malloc+0xc>)
 8025c7a:	4601      	mov	r1, r0
 8025c7c:	6818      	ldr	r0, [r3, #0]
 8025c7e:	f000 b82d 	b.w	8025cdc <_malloc_r>
 8025c82:	bf00      	nop
 8025c84:	240000ec 	.word	0x240000ec

08025c88 <free>:
 8025c88:	4b02      	ldr	r3, [pc, #8]	@ (8025c94 <free+0xc>)
 8025c8a:	4601      	mov	r1, r0
 8025c8c:	6818      	ldr	r0, [r3, #0]
 8025c8e:	f000 bbb7 	b.w	8026400 <_free_r>
 8025c92:	bf00      	nop
 8025c94:	240000ec 	.word	0x240000ec

08025c98 <sbrk_aligned>:
 8025c98:	b570      	push	{r4, r5, r6, lr}
 8025c9a:	4e0f      	ldr	r6, [pc, #60]	@ (8025cd8 <sbrk_aligned+0x40>)
 8025c9c:	460c      	mov	r4, r1
 8025c9e:	6831      	ldr	r1, [r6, #0]
 8025ca0:	4605      	mov	r5, r0
 8025ca2:	b911      	cbnz	r1, 8025caa <sbrk_aligned+0x12>
 8025ca4:	f000 faf2 	bl	802628c <_sbrk_r>
 8025ca8:	6030      	str	r0, [r6, #0]
 8025caa:	4621      	mov	r1, r4
 8025cac:	4628      	mov	r0, r5
 8025cae:	f000 faed 	bl	802628c <_sbrk_r>
 8025cb2:	1c43      	adds	r3, r0, #1
 8025cb4:	d103      	bne.n	8025cbe <sbrk_aligned+0x26>
 8025cb6:	f04f 34ff 	mov.w	r4, #4294967295
 8025cba:	4620      	mov	r0, r4
 8025cbc:	bd70      	pop	{r4, r5, r6, pc}
 8025cbe:	1cc4      	adds	r4, r0, #3
 8025cc0:	f024 0403 	bic.w	r4, r4, #3
 8025cc4:	42a0      	cmp	r0, r4
 8025cc6:	d0f8      	beq.n	8025cba <sbrk_aligned+0x22>
 8025cc8:	1a21      	subs	r1, r4, r0
 8025cca:	4628      	mov	r0, r5
 8025ccc:	f000 fade 	bl	802628c <_sbrk_r>
 8025cd0:	3001      	adds	r0, #1
 8025cd2:	d1f2      	bne.n	8025cba <sbrk_aligned+0x22>
 8025cd4:	e7ef      	b.n	8025cb6 <sbrk_aligned+0x1e>
 8025cd6:	bf00      	nop
 8025cd8:	24026e54 	.word	0x24026e54

08025cdc <_malloc_r>:
 8025cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ce0:	1ccd      	adds	r5, r1, #3
 8025ce2:	f025 0503 	bic.w	r5, r5, #3
 8025ce6:	3508      	adds	r5, #8
 8025ce8:	2d0c      	cmp	r5, #12
 8025cea:	bf38      	it	cc
 8025cec:	250c      	movcc	r5, #12
 8025cee:	2d00      	cmp	r5, #0
 8025cf0:	4606      	mov	r6, r0
 8025cf2:	db01      	blt.n	8025cf8 <_malloc_r+0x1c>
 8025cf4:	42a9      	cmp	r1, r5
 8025cf6:	d904      	bls.n	8025d02 <_malloc_r+0x26>
 8025cf8:	230c      	movs	r3, #12
 8025cfa:	6033      	str	r3, [r6, #0]
 8025cfc:	2000      	movs	r0, #0
 8025cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025dd8 <_malloc_r+0xfc>
 8025d06:	f000 f869 	bl	8025ddc <__malloc_lock>
 8025d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8025d0e:	461c      	mov	r4, r3
 8025d10:	bb44      	cbnz	r4, 8025d64 <_malloc_r+0x88>
 8025d12:	4629      	mov	r1, r5
 8025d14:	4630      	mov	r0, r6
 8025d16:	f7ff ffbf 	bl	8025c98 <sbrk_aligned>
 8025d1a:	1c43      	adds	r3, r0, #1
 8025d1c:	4604      	mov	r4, r0
 8025d1e:	d158      	bne.n	8025dd2 <_malloc_r+0xf6>
 8025d20:	f8d8 4000 	ldr.w	r4, [r8]
 8025d24:	4627      	mov	r7, r4
 8025d26:	2f00      	cmp	r7, #0
 8025d28:	d143      	bne.n	8025db2 <_malloc_r+0xd6>
 8025d2a:	2c00      	cmp	r4, #0
 8025d2c:	d04b      	beq.n	8025dc6 <_malloc_r+0xea>
 8025d2e:	6823      	ldr	r3, [r4, #0]
 8025d30:	4639      	mov	r1, r7
 8025d32:	4630      	mov	r0, r6
 8025d34:	eb04 0903 	add.w	r9, r4, r3
 8025d38:	f000 faa8 	bl	802628c <_sbrk_r>
 8025d3c:	4581      	cmp	r9, r0
 8025d3e:	d142      	bne.n	8025dc6 <_malloc_r+0xea>
 8025d40:	6821      	ldr	r1, [r4, #0]
 8025d42:	1a6d      	subs	r5, r5, r1
 8025d44:	4629      	mov	r1, r5
 8025d46:	4630      	mov	r0, r6
 8025d48:	f7ff ffa6 	bl	8025c98 <sbrk_aligned>
 8025d4c:	3001      	adds	r0, #1
 8025d4e:	d03a      	beq.n	8025dc6 <_malloc_r+0xea>
 8025d50:	6823      	ldr	r3, [r4, #0]
 8025d52:	442b      	add	r3, r5
 8025d54:	6023      	str	r3, [r4, #0]
 8025d56:	f8d8 3000 	ldr.w	r3, [r8]
 8025d5a:	685a      	ldr	r2, [r3, #4]
 8025d5c:	bb62      	cbnz	r2, 8025db8 <_malloc_r+0xdc>
 8025d5e:	f8c8 7000 	str.w	r7, [r8]
 8025d62:	e00f      	b.n	8025d84 <_malloc_r+0xa8>
 8025d64:	6822      	ldr	r2, [r4, #0]
 8025d66:	1b52      	subs	r2, r2, r5
 8025d68:	d420      	bmi.n	8025dac <_malloc_r+0xd0>
 8025d6a:	2a0b      	cmp	r2, #11
 8025d6c:	d917      	bls.n	8025d9e <_malloc_r+0xc2>
 8025d6e:	1961      	adds	r1, r4, r5
 8025d70:	42a3      	cmp	r3, r4
 8025d72:	6025      	str	r5, [r4, #0]
 8025d74:	bf18      	it	ne
 8025d76:	6059      	strne	r1, [r3, #4]
 8025d78:	6863      	ldr	r3, [r4, #4]
 8025d7a:	bf08      	it	eq
 8025d7c:	f8c8 1000 	streq.w	r1, [r8]
 8025d80:	5162      	str	r2, [r4, r5]
 8025d82:	604b      	str	r3, [r1, #4]
 8025d84:	4630      	mov	r0, r6
 8025d86:	f000 f82f 	bl	8025de8 <__malloc_unlock>
 8025d8a:	f104 000b 	add.w	r0, r4, #11
 8025d8e:	1d23      	adds	r3, r4, #4
 8025d90:	f020 0007 	bic.w	r0, r0, #7
 8025d94:	1ac2      	subs	r2, r0, r3
 8025d96:	bf1c      	itt	ne
 8025d98:	1a1b      	subne	r3, r3, r0
 8025d9a:	50a3      	strne	r3, [r4, r2]
 8025d9c:	e7af      	b.n	8025cfe <_malloc_r+0x22>
 8025d9e:	6862      	ldr	r2, [r4, #4]
 8025da0:	42a3      	cmp	r3, r4
 8025da2:	bf0c      	ite	eq
 8025da4:	f8c8 2000 	streq.w	r2, [r8]
 8025da8:	605a      	strne	r2, [r3, #4]
 8025daa:	e7eb      	b.n	8025d84 <_malloc_r+0xa8>
 8025dac:	4623      	mov	r3, r4
 8025dae:	6864      	ldr	r4, [r4, #4]
 8025db0:	e7ae      	b.n	8025d10 <_malloc_r+0x34>
 8025db2:	463c      	mov	r4, r7
 8025db4:	687f      	ldr	r7, [r7, #4]
 8025db6:	e7b6      	b.n	8025d26 <_malloc_r+0x4a>
 8025db8:	461a      	mov	r2, r3
 8025dba:	685b      	ldr	r3, [r3, #4]
 8025dbc:	42a3      	cmp	r3, r4
 8025dbe:	d1fb      	bne.n	8025db8 <_malloc_r+0xdc>
 8025dc0:	2300      	movs	r3, #0
 8025dc2:	6053      	str	r3, [r2, #4]
 8025dc4:	e7de      	b.n	8025d84 <_malloc_r+0xa8>
 8025dc6:	230c      	movs	r3, #12
 8025dc8:	6033      	str	r3, [r6, #0]
 8025dca:	4630      	mov	r0, r6
 8025dcc:	f000 f80c 	bl	8025de8 <__malloc_unlock>
 8025dd0:	e794      	b.n	8025cfc <_malloc_r+0x20>
 8025dd2:	6005      	str	r5, [r0, #0]
 8025dd4:	e7d6      	b.n	8025d84 <_malloc_r+0xa8>
 8025dd6:	bf00      	nop
 8025dd8:	24026e58 	.word	0x24026e58

08025ddc <__malloc_lock>:
 8025ddc:	4801      	ldr	r0, [pc, #4]	@ (8025de4 <__malloc_lock+0x8>)
 8025dde:	f000 baa2 	b.w	8026326 <__retarget_lock_acquire_recursive>
 8025de2:	bf00      	nop
 8025de4:	24026f9c 	.word	0x24026f9c

08025de8 <__malloc_unlock>:
 8025de8:	4801      	ldr	r0, [pc, #4]	@ (8025df0 <__malloc_unlock+0x8>)
 8025dea:	f000 ba9d 	b.w	8026328 <__retarget_lock_release_recursive>
 8025dee:	bf00      	nop
 8025df0:	24026f9c 	.word	0x24026f9c

08025df4 <__cxa_atexit>:
 8025df4:	b510      	push	{r4, lr}
 8025df6:	4604      	mov	r4, r0
 8025df8:	4804      	ldr	r0, [pc, #16]	@ (8025e0c <__cxa_atexit+0x18>)
 8025dfa:	4613      	mov	r3, r2
 8025dfc:	b120      	cbz	r0, 8025e08 <__cxa_atexit+0x14>
 8025dfe:	460a      	mov	r2, r1
 8025e00:	2002      	movs	r0, #2
 8025e02:	4621      	mov	r1, r4
 8025e04:	f000 faa0 	bl	8026348 <__register_exitproc>
 8025e08:	bd10      	pop	{r4, pc}
 8025e0a:	bf00      	nop
 8025e0c:	08026349 	.word	0x08026349

08025e10 <std>:
 8025e10:	2300      	movs	r3, #0
 8025e12:	b510      	push	{r4, lr}
 8025e14:	4604      	mov	r4, r0
 8025e16:	e9c0 3300 	strd	r3, r3, [r0]
 8025e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025e1e:	6083      	str	r3, [r0, #8]
 8025e20:	8181      	strh	r1, [r0, #12]
 8025e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8025e24:	81c2      	strh	r2, [r0, #14]
 8025e26:	6183      	str	r3, [r0, #24]
 8025e28:	4619      	mov	r1, r3
 8025e2a:	2208      	movs	r2, #8
 8025e2c:	305c      	adds	r0, #92	@ 0x5c
 8025e2e:	f000 f99b 	bl	8026168 <memset>
 8025e32:	4b0d      	ldr	r3, [pc, #52]	@ (8025e68 <std+0x58>)
 8025e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8025e36:	4b0d      	ldr	r3, [pc, #52]	@ (8025e6c <std+0x5c>)
 8025e38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8025e70 <std+0x60>)
 8025e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8025e74 <std+0x64>)
 8025e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8025e42:	4b0d      	ldr	r3, [pc, #52]	@ (8025e78 <std+0x68>)
 8025e44:	6224      	str	r4, [r4, #32]
 8025e46:	429c      	cmp	r4, r3
 8025e48:	d006      	beq.n	8025e58 <std+0x48>
 8025e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8025e4e:	4294      	cmp	r4, r2
 8025e50:	d002      	beq.n	8025e58 <std+0x48>
 8025e52:	33d0      	adds	r3, #208	@ 0xd0
 8025e54:	429c      	cmp	r4, r3
 8025e56:	d105      	bne.n	8025e64 <std+0x54>
 8025e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e60:	f000 ba60 	b.w	8026324 <__retarget_lock_init_recursive>
 8025e64:	bd10      	pop	{r4, pc}
 8025e66:	bf00      	nop
 8025e68:	08025fb9 	.word	0x08025fb9
 8025e6c:	08025fdb 	.word	0x08025fdb
 8025e70:	08026013 	.word	0x08026013
 8025e74:	08026037 	.word	0x08026037
 8025e78:	24026e5c 	.word	0x24026e5c

08025e7c <stdio_exit_handler>:
 8025e7c:	4a02      	ldr	r2, [pc, #8]	@ (8025e88 <stdio_exit_handler+0xc>)
 8025e7e:	4903      	ldr	r1, [pc, #12]	@ (8025e8c <stdio_exit_handler+0x10>)
 8025e80:	4803      	ldr	r0, [pc, #12]	@ (8025e90 <stdio_exit_handler+0x14>)
 8025e82:	f000 b87b 	b.w	8025f7c <_fwalk_sglue>
 8025e86:	bf00      	nop
 8025e88:	240000e0 	.word	0x240000e0
 8025e8c:	08026b3d 	.word	0x08026b3d
 8025e90:	240000f0 	.word	0x240000f0

08025e94 <cleanup_stdio>:
 8025e94:	6841      	ldr	r1, [r0, #4]
 8025e96:	4b0c      	ldr	r3, [pc, #48]	@ (8025ec8 <cleanup_stdio+0x34>)
 8025e98:	4299      	cmp	r1, r3
 8025e9a:	b510      	push	{r4, lr}
 8025e9c:	4604      	mov	r4, r0
 8025e9e:	d001      	beq.n	8025ea4 <cleanup_stdio+0x10>
 8025ea0:	f000 fe4c 	bl	8026b3c <_fflush_r>
 8025ea4:	68a1      	ldr	r1, [r4, #8]
 8025ea6:	4b09      	ldr	r3, [pc, #36]	@ (8025ecc <cleanup_stdio+0x38>)
 8025ea8:	4299      	cmp	r1, r3
 8025eaa:	d002      	beq.n	8025eb2 <cleanup_stdio+0x1e>
 8025eac:	4620      	mov	r0, r4
 8025eae:	f000 fe45 	bl	8026b3c <_fflush_r>
 8025eb2:	68e1      	ldr	r1, [r4, #12]
 8025eb4:	4b06      	ldr	r3, [pc, #24]	@ (8025ed0 <cleanup_stdio+0x3c>)
 8025eb6:	4299      	cmp	r1, r3
 8025eb8:	d004      	beq.n	8025ec4 <cleanup_stdio+0x30>
 8025eba:	4620      	mov	r0, r4
 8025ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ec0:	f000 be3c 	b.w	8026b3c <_fflush_r>
 8025ec4:	bd10      	pop	{r4, pc}
 8025ec6:	bf00      	nop
 8025ec8:	24026e5c 	.word	0x24026e5c
 8025ecc:	24026ec4 	.word	0x24026ec4
 8025ed0:	24026f2c 	.word	0x24026f2c

08025ed4 <global_stdio_init.part.0>:
 8025ed4:	b510      	push	{r4, lr}
 8025ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8025f04 <global_stdio_init.part.0+0x30>)
 8025ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8025f08 <global_stdio_init.part.0+0x34>)
 8025eda:	4a0c      	ldr	r2, [pc, #48]	@ (8025f0c <global_stdio_init.part.0+0x38>)
 8025edc:	601a      	str	r2, [r3, #0]
 8025ede:	4620      	mov	r0, r4
 8025ee0:	2200      	movs	r2, #0
 8025ee2:	2104      	movs	r1, #4
 8025ee4:	f7ff ff94 	bl	8025e10 <std>
 8025ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025eec:	2201      	movs	r2, #1
 8025eee:	2109      	movs	r1, #9
 8025ef0:	f7ff ff8e 	bl	8025e10 <std>
 8025ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025ef8:	2202      	movs	r2, #2
 8025efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025efe:	2112      	movs	r1, #18
 8025f00:	f7ff bf86 	b.w	8025e10 <std>
 8025f04:	24026f94 	.word	0x24026f94
 8025f08:	24026e5c 	.word	0x24026e5c
 8025f0c:	08025e7d 	.word	0x08025e7d

08025f10 <__sfp_lock_acquire>:
 8025f10:	4801      	ldr	r0, [pc, #4]	@ (8025f18 <__sfp_lock_acquire+0x8>)
 8025f12:	f000 ba08 	b.w	8026326 <__retarget_lock_acquire_recursive>
 8025f16:	bf00      	nop
 8025f18:	24026f9e 	.word	0x24026f9e

08025f1c <__sfp_lock_release>:
 8025f1c:	4801      	ldr	r0, [pc, #4]	@ (8025f24 <__sfp_lock_release+0x8>)
 8025f1e:	f000 ba03 	b.w	8026328 <__retarget_lock_release_recursive>
 8025f22:	bf00      	nop
 8025f24:	24026f9e 	.word	0x24026f9e

08025f28 <__sinit>:
 8025f28:	b510      	push	{r4, lr}
 8025f2a:	4604      	mov	r4, r0
 8025f2c:	f7ff fff0 	bl	8025f10 <__sfp_lock_acquire>
 8025f30:	6a23      	ldr	r3, [r4, #32]
 8025f32:	b11b      	cbz	r3, 8025f3c <__sinit+0x14>
 8025f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f38:	f7ff bff0 	b.w	8025f1c <__sfp_lock_release>
 8025f3c:	4b04      	ldr	r3, [pc, #16]	@ (8025f50 <__sinit+0x28>)
 8025f3e:	6223      	str	r3, [r4, #32]
 8025f40:	4b04      	ldr	r3, [pc, #16]	@ (8025f54 <__sinit+0x2c>)
 8025f42:	681b      	ldr	r3, [r3, #0]
 8025f44:	2b00      	cmp	r3, #0
 8025f46:	d1f5      	bne.n	8025f34 <__sinit+0xc>
 8025f48:	f7ff ffc4 	bl	8025ed4 <global_stdio_init.part.0>
 8025f4c:	e7f2      	b.n	8025f34 <__sinit+0xc>
 8025f4e:	bf00      	nop
 8025f50:	08025e95 	.word	0x08025e95
 8025f54:	24026f94 	.word	0x24026f94

08025f58 <fiprintf>:
 8025f58:	b40e      	push	{r1, r2, r3}
 8025f5a:	b503      	push	{r0, r1, lr}
 8025f5c:	4601      	mov	r1, r0
 8025f5e:	ab03      	add	r3, sp, #12
 8025f60:	4805      	ldr	r0, [pc, #20]	@ (8025f78 <fiprintf+0x20>)
 8025f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8025f66:	6800      	ldr	r0, [r0, #0]
 8025f68:	9301      	str	r3, [sp, #4]
 8025f6a:	f000 fabd 	bl	80264e8 <_vfiprintf_r>
 8025f6e:	b002      	add	sp, #8
 8025f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8025f74:	b003      	add	sp, #12
 8025f76:	4770      	bx	lr
 8025f78:	240000ec 	.word	0x240000ec

08025f7c <_fwalk_sglue>:
 8025f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025f80:	4607      	mov	r7, r0
 8025f82:	4688      	mov	r8, r1
 8025f84:	4614      	mov	r4, r2
 8025f86:	2600      	movs	r6, #0
 8025f88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025f8c:	f1b9 0901 	subs.w	r9, r9, #1
 8025f90:	d505      	bpl.n	8025f9e <_fwalk_sglue+0x22>
 8025f92:	6824      	ldr	r4, [r4, #0]
 8025f94:	2c00      	cmp	r4, #0
 8025f96:	d1f7      	bne.n	8025f88 <_fwalk_sglue+0xc>
 8025f98:	4630      	mov	r0, r6
 8025f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025f9e:	89ab      	ldrh	r3, [r5, #12]
 8025fa0:	2b01      	cmp	r3, #1
 8025fa2:	d907      	bls.n	8025fb4 <_fwalk_sglue+0x38>
 8025fa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025fa8:	3301      	adds	r3, #1
 8025faa:	d003      	beq.n	8025fb4 <_fwalk_sglue+0x38>
 8025fac:	4629      	mov	r1, r5
 8025fae:	4638      	mov	r0, r7
 8025fb0:	47c0      	blx	r8
 8025fb2:	4306      	orrs	r6, r0
 8025fb4:	3568      	adds	r5, #104	@ 0x68
 8025fb6:	e7e9      	b.n	8025f8c <_fwalk_sglue+0x10>

08025fb8 <__sread>:
 8025fb8:	b510      	push	{r4, lr}
 8025fba:	460c      	mov	r4, r1
 8025fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025fc0:	f000 f93e 	bl	8026240 <_read_r>
 8025fc4:	2800      	cmp	r0, #0
 8025fc6:	bfab      	itete	ge
 8025fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8025fca:	89a3      	ldrhlt	r3, [r4, #12]
 8025fcc:	181b      	addge	r3, r3, r0
 8025fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8025fd2:	bfac      	ite	ge
 8025fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8025fd6:	81a3      	strhlt	r3, [r4, #12]
 8025fd8:	bd10      	pop	{r4, pc}

08025fda <__swrite>:
 8025fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025fde:	461f      	mov	r7, r3
 8025fe0:	898b      	ldrh	r3, [r1, #12]
 8025fe2:	05db      	lsls	r3, r3, #23
 8025fe4:	4605      	mov	r5, r0
 8025fe6:	460c      	mov	r4, r1
 8025fe8:	4616      	mov	r6, r2
 8025fea:	d505      	bpl.n	8025ff8 <__swrite+0x1e>
 8025fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025ff0:	2302      	movs	r3, #2
 8025ff2:	2200      	movs	r2, #0
 8025ff4:	f000 f912 	bl	802621c <_lseek_r>
 8025ff8:	89a3      	ldrh	r3, [r4, #12]
 8025ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8026002:	81a3      	strh	r3, [r4, #12]
 8026004:	4632      	mov	r2, r6
 8026006:	463b      	mov	r3, r7
 8026008:	4628      	mov	r0, r5
 802600a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802600e:	f000 b94d 	b.w	80262ac <_write_r>

08026012 <__sseek>:
 8026012:	b510      	push	{r4, lr}
 8026014:	460c      	mov	r4, r1
 8026016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802601a:	f000 f8ff 	bl	802621c <_lseek_r>
 802601e:	1c43      	adds	r3, r0, #1
 8026020:	89a3      	ldrh	r3, [r4, #12]
 8026022:	bf15      	itete	ne
 8026024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8026026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802602a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802602e:	81a3      	strheq	r3, [r4, #12]
 8026030:	bf18      	it	ne
 8026032:	81a3      	strhne	r3, [r4, #12]
 8026034:	bd10      	pop	{r4, pc}

08026036 <__sclose>:
 8026036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802603a:	f000 b8df 	b.w	80261fc <_close_r>

0802603e <__swbuf_r>:
 802603e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026040:	460e      	mov	r6, r1
 8026042:	4614      	mov	r4, r2
 8026044:	4605      	mov	r5, r0
 8026046:	b118      	cbz	r0, 8026050 <__swbuf_r+0x12>
 8026048:	6a03      	ldr	r3, [r0, #32]
 802604a:	b90b      	cbnz	r3, 8026050 <__swbuf_r+0x12>
 802604c:	f7ff ff6c 	bl	8025f28 <__sinit>
 8026050:	69a3      	ldr	r3, [r4, #24]
 8026052:	60a3      	str	r3, [r4, #8]
 8026054:	89a3      	ldrh	r3, [r4, #12]
 8026056:	071a      	lsls	r2, r3, #28
 8026058:	d501      	bpl.n	802605e <__swbuf_r+0x20>
 802605a:	6923      	ldr	r3, [r4, #16]
 802605c:	b943      	cbnz	r3, 8026070 <__swbuf_r+0x32>
 802605e:	4621      	mov	r1, r4
 8026060:	4628      	mov	r0, r5
 8026062:	f000 f82b 	bl	80260bc <__swsetup_r>
 8026066:	b118      	cbz	r0, 8026070 <__swbuf_r+0x32>
 8026068:	f04f 37ff 	mov.w	r7, #4294967295
 802606c:	4638      	mov	r0, r7
 802606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026070:	6823      	ldr	r3, [r4, #0]
 8026072:	6922      	ldr	r2, [r4, #16]
 8026074:	1a98      	subs	r0, r3, r2
 8026076:	6963      	ldr	r3, [r4, #20]
 8026078:	b2f6      	uxtb	r6, r6
 802607a:	4283      	cmp	r3, r0
 802607c:	4637      	mov	r7, r6
 802607e:	dc05      	bgt.n	802608c <__swbuf_r+0x4e>
 8026080:	4621      	mov	r1, r4
 8026082:	4628      	mov	r0, r5
 8026084:	f000 fd5a 	bl	8026b3c <_fflush_r>
 8026088:	2800      	cmp	r0, #0
 802608a:	d1ed      	bne.n	8026068 <__swbuf_r+0x2a>
 802608c:	68a3      	ldr	r3, [r4, #8]
 802608e:	3b01      	subs	r3, #1
 8026090:	60a3      	str	r3, [r4, #8]
 8026092:	6823      	ldr	r3, [r4, #0]
 8026094:	1c5a      	adds	r2, r3, #1
 8026096:	6022      	str	r2, [r4, #0]
 8026098:	701e      	strb	r6, [r3, #0]
 802609a:	6962      	ldr	r2, [r4, #20]
 802609c:	1c43      	adds	r3, r0, #1
 802609e:	429a      	cmp	r2, r3
 80260a0:	d004      	beq.n	80260ac <__swbuf_r+0x6e>
 80260a2:	89a3      	ldrh	r3, [r4, #12]
 80260a4:	07db      	lsls	r3, r3, #31
 80260a6:	d5e1      	bpl.n	802606c <__swbuf_r+0x2e>
 80260a8:	2e0a      	cmp	r6, #10
 80260aa:	d1df      	bne.n	802606c <__swbuf_r+0x2e>
 80260ac:	4621      	mov	r1, r4
 80260ae:	4628      	mov	r0, r5
 80260b0:	f000 fd44 	bl	8026b3c <_fflush_r>
 80260b4:	2800      	cmp	r0, #0
 80260b6:	d0d9      	beq.n	802606c <__swbuf_r+0x2e>
 80260b8:	e7d6      	b.n	8026068 <__swbuf_r+0x2a>
	...

080260bc <__swsetup_r>:
 80260bc:	b538      	push	{r3, r4, r5, lr}
 80260be:	4b29      	ldr	r3, [pc, #164]	@ (8026164 <__swsetup_r+0xa8>)
 80260c0:	4605      	mov	r5, r0
 80260c2:	6818      	ldr	r0, [r3, #0]
 80260c4:	460c      	mov	r4, r1
 80260c6:	b118      	cbz	r0, 80260d0 <__swsetup_r+0x14>
 80260c8:	6a03      	ldr	r3, [r0, #32]
 80260ca:	b90b      	cbnz	r3, 80260d0 <__swsetup_r+0x14>
 80260cc:	f7ff ff2c 	bl	8025f28 <__sinit>
 80260d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80260d4:	0719      	lsls	r1, r3, #28
 80260d6:	d422      	bmi.n	802611e <__swsetup_r+0x62>
 80260d8:	06da      	lsls	r2, r3, #27
 80260da:	d407      	bmi.n	80260ec <__swsetup_r+0x30>
 80260dc:	2209      	movs	r2, #9
 80260de:	602a      	str	r2, [r5, #0]
 80260e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80260e4:	81a3      	strh	r3, [r4, #12]
 80260e6:	f04f 30ff 	mov.w	r0, #4294967295
 80260ea:	e033      	b.n	8026154 <__swsetup_r+0x98>
 80260ec:	0758      	lsls	r0, r3, #29
 80260ee:	d512      	bpl.n	8026116 <__swsetup_r+0x5a>
 80260f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80260f2:	b141      	cbz	r1, 8026106 <__swsetup_r+0x4a>
 80260f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80260f8:	4299      	cmp	r1, r3
 80260fa:	d002      	beq.n	8026102 <__swsetup_r+0x46>
 80260fc:	4628      	mov	r0, r5
 80260fe:	f000 f97f 	bl	8026400 <_free_r>
 8026102:	2300      	movs	r3, #0
 8026104:	6363      	str	r3, [r4, #52]	@ 0x34
 8026106:	89a3      	ldrh	r3, [r4, #12]
 8026108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802610c:	81a3      	strh	r3, [r4, #12]
 802610e:	2300      	movs	r3, #0
 8026110:	6063      	str	r3, [r4, #4]
 8026112:	6923      	ldr	r3, [r4, #16]
 8026114:	6023      	str	r3, [r4, #0]
 8026116:	89a3      	ldrh	r3, [r4, #12]
 8026118:	f043 0308 	orr.w	r3, r3, #8
 802611c:	81a3      	strh	r3, [r4, #12]
 802611e:	6923      	ldr	r3, [r4, #16]
 8026120:	b94b      	cbnz	r3, 8026136 <__swsetup_r+0x7a>
 8026122:	89a3      	ldrh	r3, [r4, #12]
 8026124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802612c:	d003      	beq.n	8026136 <__swsetup_r+0x7a>
 802612e:	4621      	mov	r1, r4
 8026130:	4628      	mov	r0, r5
 8026132:	f000 fd51 	bl	8026bd8 <__smakebuf_r>
 8026136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802613a:	f013 0201 	ands.w	r2, r3, #1
 802613e:	d00a      	beq.n	8026156 <__swsetup_r+0x9a>
 8026140:	2200      	movs	r2, #0
 8026142:	60a2      	str	r2, [r4, #8]
 8026144:	6962      	ldr	r2, [r4, #20]
 8026146:	4252      	negs	r2, r2
 8026148:	61a2      	str	r2, [r4, #24]
 802614a:	6922      	ldr	r2, [r4, #16]
 802614c:	b942      	cbnz	r2, 8026160 <__swsetup_r+0xa4>
 802614e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8026152:	d1c5      	bne.n	80260e0 <__swsetup_r+0x24>
 8026154:	bd38      	pop	{r3, r4, r5, pc}
 8026156:	0799      	lsls	r1, r3, #30
 8026158:	bf58      	it	pl
 802615a:	6962      	ldrpl	r2, [r4, #20]
 802615c:	60a2      	str	r2, [r4, #8]
 802615e:	e7f4      	b.n	802614a <__swsetup_r+0x8e>
 8026160:	2000      	movs	r0, #0
 8026162:	e7f7      	b.n	8026154 <__swsetup_r+0x98>
 8026164:	240000ec 	.word	0x240000ec

08026168 <memset>:
 8026168:	4402      	add	r2, r0
 802616a:	4603      	mov	r3, r0
 802616c:	4293      	cmp	r3, r2
 802616e:	d100      	bne.n	8026172 <memset+0xa>
 8026170:	4770      	bx	lr
 8026172:	f803 1b01 	strb.w	r1, [r3], #1
 8026176:	e7f9      	b.n	802616c <memset+0x4>

08026178 <strncmp>:
 8026178:	b510      	push	{r4, lr}
 802617a:	b16a      	cbz	r2, 8026198 <strncmp+0x20>
 802617c:	3901      	subs	r1, #1
 802617e:	1884      	adds	r4, r0, r2
 8026180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026184:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8026188:	429a      	cmp	r2, r3
 802618a:	d103      	bne.n	8026194 <strncmp+0x1c>
 802618c:	42a0      	cmp	r0, r4
 802618e:	d001      	beq.n	8026194 <strncmp+0x1c>
 8026190:	2a00      	cmp	r2, #0
 8026192:	d1f5      	bne.n	8026180 <strncmp+0x8>
 8026194:	1ad0      	subs	r0, r2, r3
 8026196:	bd10      	pop	{r4, pc}
 8026198:	4610      	mov	r0, r2
 802619a:	e7fc      	b.n	8026196 <strncmp+0x1e>

0802619c <_raise_r>:
 802619c:	291f      	cmp	r1, #31
 802619e:	b538      	push	{r3, r4, r5, lr}
 80261a0:	4605      	mov	r5, r0
 80261a2:	460c      	mov	r4, r1
 80261a4:	d904      	bls.n	80261b0 <_raise_r+0x14>
 80261a6:	2316      	movs	r3, #22
 80261a8:	6003      	str	r3, [r0, #0]
 80261aa:	f04f 30ff 	mov.w	r0, #4294967295
 80261ae:	bd38      	pop	{r3, r4, r5, pc}
 80261b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80261b2:	b112      	cbz	r2, 80261ba <_raise_r+0x1e>
 80261b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80261b8:	b94b      	cbnz	r3, 80261ce <_raise_r+0x32>
 80261ba:	4628      	mov	r0, r5
 80261bc:	f000 f864 	bl	8026288 <_getpid_r>
 80261c0:	4622      	mov	r2, r4
 80261c2:	4601      	mov	r1, r0
 80261c4:	4628      	mov	r0, r5
 80261c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80261ca:	f000 b84b 	b.w	8026264 <_kill_r>
 80261ce:	2b01      	cmp	r3, #1
 80261d0:	d00a      	beq.n	80261e8 <_raise_r+0x4c>
 80261d2:	1c59      	adds	r1, r3, #1
 80261d4:	d103      	bne.n	80261de <_raise_r+0x42>
 80261d6:	2316      	movs	r3, #22
 80261d8:	6003      	str	r3, [r0, #0]
 80261da:	2001      	movs	r0, #1
 80261dc:	e7e7      	b.n	80261ae <_raise_r+0x12>
 80261de:	2100      	movs	r1, #0
 80261e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80261e4:	4620      	mov	r0, r4
 80261e6:	4798      	blx	r3
 80261e8:	2000      	movs	r0, #0
 80261ea:	e7e0      	b.n	80261ae <_raise_r+0x12>

080261ec <raise>:
 80261ec:	4b02      	ldr	r3, [pc, #8]	@ (80261f8 <raise+0xc>)
 80261ee:	4601      	mov	r1, r0
 80261f0:	6818      	ldr	r0, [r3, #0]
 80261f2:	f7ff bfd3 	b.w	802619c <_raise_r>
 80261f6:	bf00      	nop
 80261f8:	240000ec 	.word	0x240000ec

080261fc <_close_r>:
 80261fc:	b538      	push	{r3, r4, r5, lr}
 80261fe:	4d06      	ldr	r5, [pc, #24]	@ (8026218 <_close_r+0x1c>)
 8026200:	2300      	movs	r3, #0
 8026202:	4604      	mov	r4, r0
 8026204:	4608      	mov	r0, r1
 8026206:	602b      	str	r3, [r5, #0]
 8026208:	f7db fc1e 	bl	8001a48 <_close>
 802620c:	1c43      	adds	r3, r0, #1
 802620e:	d102      	bne.n	8026216 <_close_r+0x1a>
 8026210:	682b      	ldr	r3, [r5, #0]
 8026212:	b103      	cbz	r3, 8026216 <_close_r+0x1a>
 8026214:	6023      	str	r3, [r4, #0]
 8026216:	bd38      	pop	{r3, r4, r5, pc}
 8026218:	24026f98 	.word	0x24026f98

0802621c <_lseek_r>:
 802621c:	b538      	push	{r3, r4, r5, lr}
 802621e:	4d07      	ldr	r5, [pc, #28]	@ (802623c <_lseek_r+0x20>)
 8026220:	4604      	mov	r4, r0
 8026222:	4608      	mov	r0, r1
 8026224:	4611      	mov	r1, r2
 8026226:	2200      	movs	r2, #0
 8026228:	602a      	str	r2, [r5, #0]
 802622a:	461a      	mov	r2, r3
 802622c:	f7db fc16 	bl	8001a5c <_lseek>
 8026230:	1c43      	adds	r3, r0, #1
 8026232:	d102      	bne.n	802623a <_lseek_r+0x1e>
 8026234:	682b      	ldr	r3, [r5, #0]
 8026236:	b103      	cbz	r3, 802623a <_lseek_r+0x1e>
 8026238:	6023      	str	r3, [r4, #0]
 802623a:	bd38      	pop	{r3, r4, r5, pc}
 802623c:	24026f98 	.word	0x24026f98

08026240 <_read_r>:
 8026240:	b538      	push	{r3, r4, r5, lr}
 8026242:	4d07      	ldr	r5, [pc, #28]	@ (8026260 <_read_r+0x20>)
 8026244:	4604      	mov	r4, r0
 8026246:	4608      	mov	r0, r1
 8026248:	4611      	mov	r1, r2
 802624a:	2200      	movs	r2, #0
 802624c:	602a      	str	r2, [r5, #0]
 802624e:	461a      	mov	r2, r3
 8026250:	f7db fbde 	bl	8001a10 <_read>
 8026254:	1c43      	adds	r3, r0, #1
 8026256:	d102      	bne.n	802625e <_read_r+0x1e>
 8026258:	682b      	ldr	r3, [r5, #0]
 802625a:	b103      	cbz	r3, 802625e <_read_r+0x1e>
 802625c:	6023      	str	r3, [r4, #0]
 802625e:	bd38      	pop	{r3, r4, r5, pc}
 8026260:	24026f98 	.word	0x24026f98

08026264 <_kill_r>:
 8026264:	b538      	push	{r3, r4, r5, lr}
 8026266:	4d07      	ldr	r5, [pc, #28]	@ (8026284 <_kill_r+0x20>)
 8026268:	2300      	movs	r3, #0
 802626a:	4604      	mov	r4, r0
 802626c:	4608      	mov	r0, r1
 802626e:	4611      	mov	r1, r2
 8026270:	602b      	str	r3, [r5, #0]
 8026272:	f7db fbbf 	bl	80019f4 <_kill>
 8026276:	1c43      	adds	r3, r0, #1
 8026278:	d102      	bne.n	8026280 <_kill_r+0x1c>
 802627a:	682b      	ldr	r3, [r5, #0]
 802627c:	b103      	cbz	r3, 8026280 <_kill_r+0x1c>
 802627e:	6023      	str	r3, [r4, #0]
 8026280:	bd38      	pop	{r3, r4, r5, pc}
 8026282:	bf00      	nop
 8026284:	24026f98 	.word	0x24026f98

08026288 <_getpid_r>:
 8026288:	f7db bbb2 	b.w	80019f0 <_getpid>

0802628c <_sbrk_r>:
 802628c:	b538      	push	{r3, r4, r5, lr}
 802628e:	4d06      	ldr	r5, [pc, #24]	@ (80262a8 <_sbrk_r+0x1c>)
 8026290:	2300      	movs	r3, #0
 8026292:	4604      	mov	r4, r0
 8026294:	4608      	mov	r0, r1
 8026296:	602b      	str	r3, [r5, #0]
 8026298:	f7db fbe2 	bl	8001a60 <_sbrk>
 802629c:	1c43      	adds	r3, r0, #1
 802629e:	d102      	bne.n	80262a6 <_sbrk_r+0x1a>
 80262a0:	682b      	ldr	r3, [r5, #0]
 80262a2:	b103      	cbz	r3, 80262a6 <_sbrk_r+0x1a>
 80262a4:	6023      	str	r3, [r4, #0]
 80262a6:	bd38      	pop	{r3, r4, r5, pc}
 80262a8:	24026f98 	.word	0x24026f98

080262ac <_write_r>:
 80262ac:	b538      	push	{r3, r4, r5, lr}
 80262ae:	4d07      	ldr	r5, [pc, #28]	@ (80262cc <_write_r+0x20>)
 80262b0:	4604      	mov	r4, r0
 80262b2:	4608      	mov	r0, r1
 80262b4:	4611      	mov	r1, r2
 80262b6:	2200      	movs	r2, #0
 80262b8:	602a      	str	r2, [r5, #0]
 80262ba:	461a      	mov	r2, r3
 80262bc:	f7db fbb6 	bl	8001a2c <_write>
 80262c0:	1c43      	adds	r3, r0, #1
 80262c2:	d102      	bne.n	80262ca <_write_r+0x1e>
 80262c4:	682b      	ldr	r3, [r5, #0]
 80262c6:	b103      	cbz	r3, 80262ca <_write_r+0x1e>
 80262c8:	6023      	str	r3, [r4, #0]
 80262ca:	bd38      	pop	{r3, r4, r5, pc}
 80262cc:	24026f98 	.word	0x24026f98

080262d0 <__errno>:
 80262d0:	4b01      	ldr	r3, [pc, #4]	@ (80262d8 <__errno+0x8>)
 80262d2:	6818      	ldr	r0, [r3, #0]
 80262d4:	4770      	bx	lr
 80262d6:	bf00      	nop
 80262d8:	240000ec 	.word	0x240000ec

080262dc <__libc_init_array>:
 80262dc:	b570      	push	{r4, r5, r6, lr}
 80262de:	4d0d      	ldr	r5, [pc, #52]	@ (8026314 <__libc_init_array+0x38>)
 80262e0:	4c0d      	ldr	r4, [pc, #52]	@ (8026318 <__libc_init_array+0x3c>)
 80262e2:	1b64      	subs	r4, r4, r5
 80262e4:	10a4      	asrs	r4, r4, #2
 80262e6:	2600      	movs	r6, #0
 80262e8:	42a6      	cmp	r6, r4
 80262ea:	d109      	bne.n	8026300 <__libc_init_array+0x24>
 80262ec:	4d0b      	ldr	r5, [pc, #44]	@ (802631c <__libc_init_array+0x40>)
 80262ee:	4c0c      	ldr	r4, [pc, #48]	@ (8026320 <__libc_init_array+0x44>)
 80262f0:	f000 fcd0 	bl	8026c94 <_init>
 80262f4:	1b64      	subs	r4, r4, r5
 80262f6:	10a4      	asrs	r4, r4, #2
 80262f8:	2600      	movs	r6, #0
 80262fa:	42a6      	cmp	r6, r4
 80262fc:	d105      	bne.n	802630a <__libc_init_array+0x2e>
 80262fe:	bd70      	pop	{r4, r5, r6, pc}
 8026300:	f855 3b04 	ldr.w	r3, [r5], #4
 8026304:	4798      	blx	r3
 8026306:	3601      	adds	r6, #1
 8026308:	e7ee      	b.n	80262e8 <__libc_init_array+0xc>
 802630a:	f855 3b04 	ldr.w	r3, [r5], #4
 802630e:	4798      	blx	r3
 8026310:	3601      	adds	r6, #1
 8026312:	e7f2      	b.n	80262fa <__libc_init_array+0x1e>
 8026314:	0802b588 	.word	0x0802b588
 8026318:	0802b588 	.word	0x0802b588
 802631c:	0802b588 	.word	0x0802b588
 8026320:	0802b5a4 	.word	0x0802b5a4

08026324 <__retarget_lock_init_recursive>:
 8026324:	4770      	bx	lr

08026326 <__retarget_lock_acquire_recursive>:
 8026326:	4770      	bx	lr

08026328 <__retarget_lock_release_recursive>:
 8026328:	4770      	bx	lr

0802632a <memcpy>:
 802632a:	440a      	add	r2, r1
 802632c:	4291      	cmp	r1, r2
 802632e:	f100 33ff 	add.w	r3, r0, #4294967295
 8026332:	d100      	bne.n	8026336 <memcpy+0xc>
 8026334:	4770      	bx	lr
 8026336:	b510      	push	{r4, lr}
 8026338:	f811 4b01 	ldrb.w	r4, [r1], #1
 802633c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026340:	4291      	cmp	r1, r2
 8026342:	d1f9      	bne.n	8026338 <memcpy+0xe>
 8026344:	bd10      	pop	{r4, pc}
	...

08026348 <__register_exitproc>:
 8026348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802634c:	4d27      	ldr	r5, [pc, #156]	@ (80263ec <__register_exitproc+0xa4>)
 802634e:	4607      	mov	r7, r0
 8026350:	6828      	ldr	r0, [r5, #0]
 8026352:	4691      	mov	r9, r2
 8026354:	460e      	mov	r6, r1
 8026356:	4698      	mov	r8, r3
 8026358:	f7ff ffe5 	bl	8026326 <__retarget_lock_acquire_recursive>
 802635c:	4a24      	ldr	r2, [pc, #144]	@ (80263f0 <__register_exitproc+0xa8>)
 802635e:	6814      	ldr	r4, [r2, #0]
 8026360:	b93c      	cbnz	r4, 8026372 <__register_exitproc+0x2a>
 8026362:	4b24      	ldr	r3, [pc, #144]	@ (80263f4 <__register_exitproc+0xac>)
 8026364:	6013      	str	r3, [r2, #0]
 8026366:	4a24      	ldr	r2, [pc, #144]	@ (80263f8 <__register_exitproc+0xb0>)
 8026368:	b112      	cbz	r2, 8026370 <__register_exitproc+0x28>
 802636a:	6812      	ldr	r2, [r2, #0]
 802636c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8026370:	4c20      	ldr	r4, [pc, #128]	@ (80263f4 <__register_exitproc+0xac>)
 8026372:	6863      	ldr	r3, [r4, #4]
 8026374:	2b1f      	cmp	r3, #31
 8026376:	dd06      	ble.n	8026386 <__register_exitproc+0x3e>
 8026378:	6828      	ldr	r0, [r5, #0]
 802637a:	f7ff ffd5 	bl	8026328 <__retarget_lock_release_recursive>
 802637e:	f04f 30ff 	mov.w	r0, #4294967295
 8026382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026386:	b32f      	cbz	r7, 80263d4 <__register_exitproc+0x8c>
 8026388:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802638c:	b968      	cbnz	r0, 80263aa <__register_exitproc+0x62>
 802638e:	4b1b      	ldr	r3, [pc, #108]	@ (80263fc <__register_exitproc+0xb4>)
 8026390:	2b00      	cmp	r3, #0
 8026392:	d0f1      	beq.n	8026378 <__register_exitproc+0x30>
 8026394:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8026398:	f7ff fc6e 	bl	8025c78 <malloc>
 802639c:	2800      	cmp	r0, #0
 802639e:	d0eb      	beq.n	8026378 <__register_exitproc+0x30>
 80263a0:	2300      	movs	r3, #0
 80263a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80263a6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80263aa:	6863      	ldr	r3, [r4, #4]
 80263ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80263b0:	2201      	movs	r2, #1
 80263b2:	409a      	lsls	r2, r3
 80263b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80263b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80263bc:	4313      	orrs	r3, r2
 80263be:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80263c2:	2f02      	cmp	r7, #2
 80263c4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80263c8:	bf02      	ittt	eq
 80263ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80263ce:	4313      	orreq	r3, r2
 80263d0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80263d4:	6863      	ldr	r3, [r4, #4]
 80263d6:	6828      	ldr	r0, [r5, #0]
 80263d8:	1c5a      	adds	r2, r3, #1
 80263da:	3302      	adds	r3, #2
 80263dc:	6062      	str	r2, [r4, #4]
 80263de:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80263e2:	f7ff ffa1 	bl	8026328 <__retarget_lock_release_recursive>
 80263e6:	2000      	movs	r0, #0
 80263e8:	e7cb      	b.n	8026382 <__register_exitproc+0x3a>
 80263ea:	bf00      	nop
 80263ec:	2400013c 	.word	0x2400013c
 80263f0:	2402702c 	.word	0x2402702c
 80263f4:	24026fa0 	.word	0x24026fa0
 80263f8:	0802a994 	.word	0x0802a994
 80263fc:	08025c79 	.word	0x08025c79

08026400 <_free_r>:
 8026400:	b538      	push	{r3, r4, r5, lr}
 8026402:	4605      	mov	r5, r0
 8026404:	2900      	cmp	r1, #0
 8026406:	d041      	beq.n	802648c <_free_r+0x8c>
 8026408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802640c:	1f0c      	subs	r4, r1, #4
 802640e:	2b00      	cmp	r3, #0
 8026410:	bfb8      	it	lt
 8026412:	18e4      	addlt	r4, r4, r3
 8026414:	f7ff fce2 	bl	8025ddc <__malloc_lock>
 8026418:	4a1d      	ldr	r2, [pc, #116]	@ (8026490 <_free_r+0x90>)
 802641a:	6813      	ldr	r3, [r2, #0]
 802641c:	b933      	cbnz	r3, 802642c <_free_r+0x2c>
 802641e:	6063      	str	r3, [r4, #4]
 8026420:	6014      	str	r4, [r2, #0]
 8026422:	4628      	mov	r0, r5
 8026424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026428:	f7ff bcde 	b.w	8025de8 <__malloc_unlock>
 802642c:	42a3      	cmp	r3, r4
 802642e:	d908      	bls.n	8026442 <_free_r+0x42>
 8026430:	6820      	ldr	r0, [r4, #0]
 8026432:	1821      	adds	r1, r4, r0
 8026434:	428b      	cmp	r3, r1
 8026436:	bf01      	itttt	eq
 8026438:	6819      	ldreq	r1, [r3, #0]
 802643a:	685b      	ldreq	r3, [r3, #4]
 802643c:	1809      	addeq	r1, r1, r0
 802643e:	6021      	streq	r1, [r4, #0]
 8026440:	e7ed      	b.n	802641e <_free_r+0x1e>
 8026442:	461a      	mov	r2, r3
 8026444:	685b      	ldr	r3, [r3, #4]
 8026446:	b10b      	cbz	r3, 802644c <_free_r+0x4c>
 8026448:	42a3      	cmp	r3, r4
 802644a:	d9fa      	bls.n	8026442 <_free_r+0x42>
 802644c:	6811      	ldr	r1, [r2, #0]
 802644e:	1850      	adds	r0, r2, r1
 8026450:	42a0      	cmp	r0, r4
 8026452:	d10b      	bne.n	802646c <_free_r+0x6c>
 8026454:	6820      	ldr	r0, [r4, #0]
 8026456:	4401      	add	r1, r0
 8026458:	1850      	adds	r0, r2, r1
 802645a:	4283      	cmp	r3, r0
 802645c:	6011      	str	r1, [r2, #0]
 802645e:	d1e0      	bne.n	8026422 <_free_r+0x22>
 8026460:	6818      	ldr	r0, [r3, #0]
 8026462:	685b      	ldr	r3, [r3, #4]
 8026464:	6053      	str	r3, [r2, #4]
 8026466:	4408      	add	r0, r1
 8026468:	6010      	str	r0, [r2, #0]
 802646a:	e7da      	b.n	8026422 <_free_r+0x22>
 802646c:	d902      	bls.n	8026474 <_free_r+0x74>
 802646e:	230c      	movs	r3, #12
 8026470:	602b      	str	r3, [r5, #0]
 8026472:	e7d6      	b.n	8026422 <_free_r+0x22>
 8026474:	6820      	ldr	r0, [r4, #0]
 8026476:	1821      	adds	r1, r4, r0
 8026478:	428b      	cmp	r3, r1
 802647a:	bf04      	itt	eq
 802647c:	6819      	ldreq	r1, [r3, #0]
 802647e:	685b      	ldreq	r3, [r3, #4]
 8026480:	6063      	str	r3, [r4, #4]
 8026482:	bf04      	itt	eq
 8026484:	1809      	addeq	r1, r1, r0
 8026486:	6021      	streq	r1, [r4, #0]
 8026488:	6054      	str	r4, [r2, #4]
 802648a:	e7ca      	b.n	8026422 <_free_r+0x22>
 802648c:	bd38      	pop	{r3, r4, r5, pc}
 802648e:	bf00      	nop
 8026490:	24026e58 	.word	0x24026e58

08026494 <__sfputc_r>:
 8026494:	6893      	ldr	r3, [r2, #8]
 8026496:	3b01      	subs	r3, #1
 8026498:	2b00      	cmp	r3, #0
 802649a:	b410      	push	{r4}
 802649c:	6093      	str	r3, [r2, #8]
 802649e:	da08      	bge.n	80264b2 <__sfputc_r+0x1e>
 80264a0:	6994      	ldr	r4, [r2, #24]
 80264a2:	42a3      	cmp	r3, r4
 80264a4:	db01      	blt.n	80264aa <__sfputc_r+0x16>
 80264a6:	290a      	cmp	r1, #10
 80264a8:	d103      	bne.n	80264b2 <__sfputc_r+0x1e>
 80264aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80264ae:	f7ff bdc6 	b.w	802603e <__swbuf_r>
 80264b2:	6813      	ldr	r3, [r2, #0]
 80264b4:	1c58      	adds	r0, r3, #1
 80264b6:	6010      	str	r0, [r2, #0]
 80264b8:	7019      	strb	r1, [r3, #0]
 80264ba:	4608      	mov	r0, r1
 80264bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80264c0:	4770      	bx	lr

080264c2 <__sfputs_r>:
 80264c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264c4:	4606      	mov	r6, r0
 80264c6:	460f      	mov	r7, r1
 80264c8:	4614      	mov	r4, r2
 80264ca:	18d5      	adds	r5, r2, r3
 80264cc:	42ac      	cmp	r4, r5
 80264ce:	d101      	bne.n	80264d4 <__sfputs_r+0x12>
 80264d0:	2000      	movs	r0, #0
 80264d2:	e007      	b.n	80264e4 <__sfputs_r+0x22>
 80264d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80264d8:	463a      	mov	r2, r7
 80264da:	4630      	mov	r0, r6
 80264dc:	f7ff ffda 	bl	8026494 <__sfputc_r>
 80264e0:	1c43      	adds	r3, r0, #1
 80264e2:	d1f3      	bne.n	80264cc <__sfputs_r+0xa>
 80264e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080264e8 <_vfiprintf_r>:
 80264e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264ec:	460d      	mov	r5, r1
 80264ee:	b09d      	sub	sp, #116	@ 0x74
 80264f0:	4614      	mov	r4, r2
 80264f2:	4698      	mov	r8, r3
 80264f4:	4606      	mov	r6, r0
 80264f6:	b118      	cbz	r0, 8026500 <_vfiprintf_r+0x18>
 80264f8:	6a03      	ldr	r3, [r0, #32]
 80264fa:	b90b      	cbnz	r3, 8026500 <_vfiprintf_r+0x18>
 80264fc:	f7ff fd14 	bl	8025f28 <__sinit>
 8026500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026502:	07d9      	lsls	r1, r3, #31
 8026504:	d405      	bmi.n	8026512 <_vfiprintf_r+0x2a>
 8026506:	89ab      	ldrh	r3, [r5, #12]
 8026508:	059a      	lsls	r2, r3, #22
 802650a:	d402      	bmi.n	8026512 <_vfiprintf_r+0x2a>
 802650c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802650e:	f7ff ff0a 	bl	8026326 <__retarget_lock_acquire_recursive>
 8026512:	89ab      	ldrh	r3, [r5, #12]
 8026514:	071b      	lsls	r3, r3, #28
 8026516:	d501      	bpl.n	802651c <_vfiprintf_r+0x34>
 8026518:	692b      	ldr	r3, [r5, #16]
 802651a:	b99b      	cbnz	r3, 8026544 <_vfiprintf_r+0x5c>
 802651c:	4629      	mov	r1, r5
 802651e:	4630      	mov	r0, r6
 8026520:	f7ff fdcc 	bl	80260bc <__swsetup_r>
 8026524:	b170      	cbz	r0, 8026544 <_vfiprintf_r+0x5c>
 8026526:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026528:	07dc      	lsls	r4, r3, #31
 802652a:	d504      	bpl.n	8026536 <_vfiprintf_r+0x4e>
 802652c:	f04f 30ff 	mov.w	r0, #4294967295
 8026530:	b01d      	add	sp, #116	@ 0x74
 8026532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026536:	89ab      	ldrh	r3, [r5, #12]
 8026538:	0598      	lsls	r0, r3, #22
 802653a:	d4f7      	bmi.n	802652c <_vfiprintf_r+0x44>
 802653c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802653e:	f7ff fef3 	bl	8026328 <__retarget_lock_release_recursive>
 8026542:	e7f3      	b.n	802652c <_vfiprintf_r+0x44>
 8026544:	2300      	movs	r3, #0
 8026546:	9309      	str	r3, [sp, #36]	@ 0x24
 8026548:	2320      	movs	r3, #32
 802654a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802654e:	f8cd 800c 	str.w	r8, [sp, #12]
 8026552:	2330      	movs	r3, #48	@ 0x30
 8026554:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8026704 <_vfiprintf_r+0x21c>
 8026558:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802655c:	f04f 0901 	mov.w	r9, #1
 8026560:	4623      	mov	r3, r4
 8026562:	469a      	mov	sl, r3
 8026564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026568:	b10a      	cbz	r2, 802656e <_vfiprintf_r+0x86>
 802656a:	2a25      	cmp	r2, #37	@ 0x25
 802656c:	d1f9      	bne.n	8026562 <_vfiprintf_r+0x7a>
 802656e:	ebba 0b04 	subs.w	fp, sl, r4
 8026572:	d00b      	beq.n	802658c <_vfiprintf_r+0xa4>
 8026574:	465b      	mov	r3, fp
 8026576:	4622      	mov	r2, r4
 8026578:	4629      	mov	r1, r5
 802657a:	4630      	mov	r0, r6
 802657c:	f7ff ffa1 	bl	80264c2 <__sfputs_r>
 8026580:	3001      	adds	r0, #1
 8026582:	f000 80a7 	beq.w	80266d4 <_vfiprintf_r+0x1ec>
 8026586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026588:	445a      	add	r2, fp
 802658a:	9209      	str	r2, [sp, #36]	@ 0x24
 802658c:	f89a 3000 	ldrb.w	r3, [sl]
 8026590:	2b00      	cmp	r3, #0
 8026592:	f000 809f 	beq.w	80266d4 <_vfiprintf_r+0x1ec>
 8026596:	2300      	movs	r3, #0
 8026598:	f04f 32ff 	mov.w	r2, #4294967295
 802659c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80265a0:	f10a 0a01 	add.w	sl, sl, #1
 80265a4:	9304      	str	r3, [sp, #16]
 80265a6:	9307      	str	r3, [sp, #28]
 80265a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80265ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80265ae:	4654      	mov	r4, sl
 80265b0:	2205      	movs	r2, #5
 80265b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265b6:	4853      	ldr	r0, [pc, #332]	@ (8026704 <_vfiprintf_r+0x21c>)
 80265b8:	f7d9 fe92 	bl	80002e0 <memchr>
 80265bc:	9a04      	ldr	r2, [sp, #16]
 80265be:	b9d8      	cbnz	r0, 80265f8 <_vfiprintf_r+0x110>
 80265c0:	06d1      	lsls	r1, r2, #27
 80265c2:	bf44      	itt	mi
 80265c4:	2320      	movmi	r3, #32
 80265c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80265ca:	0713      	lsls	r3, r2, #28
 80265cc:	bf44      	itt	mi
 80265ce:	232b      	movmi	r3, #43	@ 0x2b
 80265d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80265d4:	f89a 3000 	ldrb.w	r3, [sl]
 80265d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80265da:	d015      	beq.n	8026608 <_vfiprintf_r+0x120>
 80265dc:	9a07      	ldr	r2, [sp, #28]
 80265de:	4654      	mov	r4, sl
 80265e0:	2000      	movs	r0, #0
 80265e2:	f04f 0c0a 	mov.w	ip, #10
 80265e6:	4621      	mov	r1, r4
 80265e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80265ec:	3b30      	subs	r3, #48	@ 0x30
 80265ee:	2b09      	cmp	r3, #9
 80265f0:	d94b      	bls.n	802668a <_vfiprintf_r+0x1a2>
 80265f2:	b1b0      	cbz	r0, 8026622 <_vfiprintf_r+0x13a>
 80265f4:	9207      	str	r2, [sp, #28]
 80265f6:	e014      	b.n	8026622 <_vfiprintf_r+0x13a>
 80265f8:	eba0 0308 	sub.w	r3, r0, r8
 80265fc:	fa09 f303 	lsl.w	r3, r9, r3
 8026600:	4313      	orrs	r3, r2
 8026602:	9304      	str	r3, [sp, #16]
 8026604:	46a2      	mov	sl, r4
 8026606:	e7d2      	b.n	80265ae <_vfiprintf_r+0xc6>
 8026608:	9b03      	ldr	r3, [sp, #12]
 802660a:	1d19      	adds	r1, r3, #4
 802660c:	681b      	ldr	r3, [r3, #0]
 802660e:	9103      	str	r1, [sp, #12]
 8026610:	2b00      	cmp	r3, #0
 8026612:	bfbb      	ittet	lt
 8026614:	425b      	neglt	r3, r3
 8026616:	f042 0202 	orrlt.w	r2, r2, #2
 802661a:	9307      	strge	r3, [sp, #28]
 802661c:	9307      	strlt	r3, [sp, #28]
 802661e:	bfb8      	it	lt
 8026620:	9204      	strlt	r2, [sp, #16]
 8026622:	7823      	ldrb	r3, [r4, #0]
 8026624:	2b2e      	cmp	r3, #46	@ 0x2e
 8026626:	d10a      	bne.n	802663e <_vfiprintf_r+0x156>
 8026628:	7863      	ldrb	r3, [r4, #1]
 802662a:	2b2a      	cmp	r3, #42	@ 0x2a
 802662c:	d132      	bne.n	8026694 <_vfiprintf_r+0x1ac>
 802662e:	9b03      	ldr	r3, [sp, #12]
 8026630:	1d1a      	adds	r2, r3, #4
 8026632:	681b      	ldr	r3, [r3, #0]
 8026634:	9203      	str	r2, [sp, #12]
 8026636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802663a:	3402      	adds	r4, #2
 802663c:	9305      	str	r3, [sp, #20]
 802663e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8026714 <_vfiprintf_r+0x22c>
 8026642:	7821      	ldrb	r1, [r4, #0]
 8026644:	2203      	movs	r2, #3
 8026646:	4650      	mov	r0, sl
 8026648:	f7d9 fe4a 	bl	80002e0 <memchr>
 802664c:	b138      	cbz	r0, 802665e <_vfiprintf_r+0x176>
 802664e:	9b04      	ldr	r3, [sp, #16]
 8026650:	eba0 000a 	sub.w	r0, r0, sl
 8026654:	2240      	movs	r2, #64	@ 0x40
 8026656:	4082      	lsls	r2, r0
 8026658:	4313      	orrs	r3, r2
 802665a:	3401      	adds	r4, #1
 802665c:	9304      	str	r3, [sp, #16]
 802665e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026662:	4829      	ldr	r0, [pc, #164]	@ (8026708 <_vfiprintf_r+0x220>)
 8026664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8026668:	2206      	movs	r2, #6
 802666a:	f7d9 fe39 	bl	80002e0 <memchr>
 802666e:	2800      	cmp	r0, #0
 8026670:	d03f      	beq.n	80266f2 <_vfiprintf_r+0x20a>
 8026672:	4b26      	ldr	r3, [pc, #152]	@ (802670c <_vfiprintf_r+0x224>)
 8026674:	bb1b      	cbnz	r3, 80266be <_vfiprintf_r+0x1d6>
 8026676:	9b03      	ldr	r3, [sp, #12]
 8026678:	3307      	adds	r3, #7
 802667a:	f023 0307 	bic.w	r3, r3, #7
 802667e:	3308      	adds	r3, #8
 8026680:	9303      	str	r3, [sp, #12]
 8026682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026684:	443b      	add	r3, r7
 8026686:	9309      	str	r3, [sp, #36]	@ 0x24
 8026688:	e76a      	b.n	8026560 <_vfiprintf_r+0x78>
 802668a:	fb0c 3202 	mla	r2, ip, r2, r3
 802668e:	460c      	mov	r4, r1
 8026690:	2001      	movs	r0, #1
 8026692:	e7a8      	b.n	80265e6 <_vfiprintf_r+0xfe>
 8026694:	2300      	movs	r3, #0
 8026696:	3401      	adds	r4, #1
 8026698:	9305      	str	r3, [sp, #20]
 802669a:	4619      	mov	r1, r3
 802669c:	f04f 0c0a 	mov.w	ip, #10
 80266a0:	4620      	mov	r0, r4
 80266a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80266a6:	3a30      	subs	r2, #48	@ 0x30
 80266a8:	2a09      	cmp	r2, #9
 80266aa:	d903      	bls.n	80266b4 <_vfiprintf_r+0x1cc>
 80266ac:	2b00      	cmp	r3, #0
 80266ae:	d0c6      	beq.n	802663e <_vfiprintf_r+0x156>
 80266b0:	9105      	str	r1, [sp, #20]
 80266b2:	e7c4      	b.n	802663e <_vfiprintf_r+0x156>
 80266b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80266b8:	4604      	mov	r4, r0
 80266ba:	2301      	movs	r3, #1
 80266bc:	e7f0      	b.n	80266a0 <_vfiprintf_r+0x1b8>
 80266be:	ab03      	add	r3, sp, #12
 80266c0:	9300      	str	r3, [sp, #0]
 80266c2:	462a      	mov	r2, r5
 80266c4:	4b12      	ldr	r3, [pc, #72]	@ (8026710 <_vfiprintf_r+0x228>)
 80266c6:	a904      	add	r1, sp, #16
 80266c8:	4630      	mov	r0, r6
 80266ca:	f3af 8000 	nop.w
 80266ce:	4607      	mov	r7, r0
 80266d0:	1c78      	adds	r0, r7, #1
 80266d2:	d1d6      	bne.n	8026682 <_vfiprintf_r+0x19a>
 80266d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80266d6:	07d9      	lsls	r1, r3, #31
 80266d8:	d405      	bmi.n	80266e6 <_vfiprintf_r+0x1fe>
 80266da:	89ab      	ldrh	r3, [r5, #12]
 80266dc:	059a      	lsls	r2, r3, #22
 80266de:	d402      	bmi.n	80266e6 <_vfiprintf_r+0x1fe>
 80266e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80266e2:	f7ff fe21 	bl	8026328 <__retarget_lock_release_recursive>
 80266e6:	89ab      	ldrh	r3, [r5, #12]
 80266e8:	065b      	lsls	r3, r3, #25
 80266ea:	f53f af1f 	bmi.w	802652c <_vfiprintf_r+0x44>
 80266ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80266f0:	e71e      	b.n	8026530 <_vfiprintf_r+0x48>
 80266f2:	ab03      	add	r3, sp, #12
 80266f4:	9300      	str	r3, [sp, #0]
 80266f6:	462a      	mov	r2, r5
 80266f8:	4b05      	ldr	r3, [pc, #20]	@ (8026710 <_vfiprintf_r+0x228>)
 80266fa:	a904      	add	r1, sp, #16
 80266fc:	4630      	mov	r0, r6
 80266fe:	f000 f879 	bl	80267f4 <_printf_i>
 8026702:	e7e4      	b.n	80266ce <_vfiprintf_r+0x1e6>
 8026704:	0802a998 	.word	0x0802a998
 8026708:	0802a9a2 	.word	0x0802a9a2
 802670c:	00000000 	.word	0x00000000
 8026710:	080264c3 	.word	0x080264c3
 8026714:	0802a99e 	.word	0x0802a99e

08026718 <_printf_common>:
 8026718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802671c:	4616      	mov	r6, r2
 802671e:	4698      	mov	r8, r3
 8026720:	688a      	ldr	r2, [r1, #8]
 8026722:	690b      	ldr	r3, [r1, #16]
 8026724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8026728:	4293      	cmp	r3, r2
 802672a:	bfb8      	it	lt
 802672c:	4613      	movlt	r3, r2
 802672e:	6033      	str	r3, [r6, #0]
 8026730:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8026734:	4607      	mov	r7, r0
 8026736:	460c      	mov	r4, r1
 8026738:	b10a      	cbz	r2, 802673e <_printf_common+0x26>
 802673a:	3301      	adds	r3, #1
 802673c:	6033      	str	r3, [r6, #0]
 802673e:	6823      	ldr	r3, [r4, #0]
 8026740:	0699      	lsls	r1, r3, #26
 8026742:	bf42      	ittt	mi
 8026744:	6833      	ldrmi	r3, [r6, #0]
 8026746:	3302      	addmi	r3, #2
 8026748:	6033      	strmi	r3, [r6, #0]
 802674a:	6825      	ldr	r5, [r4, #0]
 802674c:	f015 0506 	ands.w	r5, r5, #6
 8026750:	d106      	bne.n	8026760 <_printf_common+0x48>
 8026752:	f104 0a19 	add.w	sl, r4, #25
 8026756:	68e3      	ldr	r3, [r4, #12]
 8026758:	6832      	ldr	r2, [r6, #0]
 802675a:	1a9b      	subs	r3, r3, r2
 802675c:	42ab      	cmp	r3, r5
 802675e:	dc26      	bgt.n	80267ae <_printf_common+0x96>
 8026760:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8026764:	6822      	ldr	r2, [r4, #0]
 8026766:	3b00      	subs	r3, #0
 8026768:	bf18      	it	ne
 802676a:	2301      	movne	r3, #1
 802676c:	0692      	lsls	r2, r2, #26
 802676e:	d42b      	bmi.n	80267c8 <_printf_common+0xb0>
 8026770:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8026774:	4641      	mov	r1, r8
 8026776:	4638      	mov	r0, r7
 8026778:	47c8      	blx	r9
 802677a:	3001      	adds	r0, #1
 802677c:	d01e      	beq.n	80267bc <_printf_common+0xa4>
 802677e:	6823      	ldr	r3, [r4, #0]
 8026780:	6922      	ldr	r2, [r4, #16]
 8026782:	f003 0306 	and.w	r3, r3, #6
 8026786:	2b04      	cmp	r3, #4
 8026788:	bf02      	ittt	eq
 802678a:	68e5      	ldreq	r5, [r4, #12]
 802678c:	6833      	ldreq	r3, [r6, #0]
 802678e:	1aed      	subeq	r5, r5, r3
 8026790:	68a3      	ldr	r3, [r4, #8]
 8026792:	bf0c      	ite	eq
 8026794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026798:	2500      	movne	r5, #0
 802679a:	4293      	cmp	r3, r2
 802679c:	bfc4      	itt	gt
 802679e:	1a9b      	subgt	r3, r3, r2
 80267a0:	18ed      	addgt	r5, r5, r3
 80267a2:	2600      	movs	r6, #0
 80267a4:	341a      	adds	r4, #26
 80267a6:	42b5      	cmp	r5, r6
 80267a8:	d11a      	bne.n	80267e0 <_printf_common+0xc8>
 80267aa:	2000      	movs	r0, #0
 80267ac:	e008      	b.n	80267c0 <_printf_common+0xa8>
 80267ae:	2301      	movs	r3, #1
 80267b0:	4652      	mov	r2, sl
 80267b2:	4641      	mov	r1, r8
 80267b4:	4638      	mov	r0, r7
 80267b6:	47c8      	blx	r9
 80267b8:	3001      	adds	r0, #1
 80267ba:	d103      	bne.n	80267c4 <_printf_common+0xac>
 80267bc:	f04f 30ff 	mov.w	r0, #4294967295
 80267c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80267c4:	3501      	adds	r5, #1
 80267c6:	e7c6      	b.n	8026756 <_printf_common+0x3e>
 80267c8:	18e1      	adds	r1, r4, r3
 80267ca:	1c5a      	adds	r2, r3, #1
 80267cc:	2030      	movs	r0, #48	@ 0x30
 80267ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80267d2:	4422      	add	r2, r4
 80267d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80267d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80267dc:	3302      	adds	r3, #2
 80267de:	e7c7      	b.n	8026770 <_printf_common+0x58>
 80267e0:	2301      	movs	r3, #1
 80267e2:	4622      	mov	r2, r4
 80267e4:	4641      	mov	r1, r8
 80267e6:	4638      	mov	r0, r7
 80267e8:	47c8      	blx	r9
 80267ea:	3001      	adds	r0, #1
 80267ec:	d0e6      	beq.n	80267bc <_printf_common+0xa4>
 80267ee:	3601      	adds	r6, #1
 80267f0:	e7d9      	b.n	80267a6 <_printf_common+0x8e>
	...

080267f4 <_printf_i>:
 80267f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80267f8:	7e0f      	ldrb	r7, [r1, #24]
 80267fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80267fc:	2f78      	cmp	r7, #120	@ 0x78
 80267fe:	4691      	mov	r9, r2
 8026800:	4680      	mov	r8, r0
 8026802:	460c      	mov	r4, r1
 8026804:	469a      	mov	sl, r3
 8026806:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802680a:	d807      	bhi.n	802681c <_printf_i+0x28>
 802680c:	2f62      	cmp	r7, #98	@ 0x62
 802680e:	d80a      	bhi.n	8026826 <_printf_i+0x32>
 8026810:	2f00      	cmp	r7, #0
 8026812:	f000 80d2 	beq.w	80269ba <_printf_i+0x1c6>
 8026816:	2f58      	cmp	r7, #88	@ 0x58
 8026818:	f000 80b9 	beq.w	802698e <_printf_i+0x19a>
 802681c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026820:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8026824:	e03a      	b.n	802689c <_printf_i+0xa8>
 8026826:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802682a:	2b15      	cmp	r3, #21
 802682c:	d8f6      	bhi.n	802681c <_printf_i+0x28>
 802682e:	a101      	add	r1, pc, #4	@ (adr r1, 8026834 <_printf_i+0x40>)
 8026830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026834:	0802688d 	.word	0x0802688d
 8026838:	080268a1 	.word	0x080268a1
 802683c:	0802681d 	.word	0x0802681d
 8026840:	0802681d 	.word	0x0802681d
 8026844:	0802681d 	.word	0x0802681d
 8026848:	0802681d 	.word	0x0802681d
 802684c:	080268a1 	.word	0x080268a1
 8026850:	0802681d 	.word	0x0802681d
 8026854:	0802681d 	.word	0x0802681d
 8026858:	0802681d 	.word	0x0802681d
 802685c:	0802681d 	.word	0x0802681d
 8026860:	080269a1 	.word	0x080269a1
 8026864:	080268cb 	.word	0x080268cb
 8026868:	0802695b 	.word	0x0802695b
 802686c:	0802681d 	.word	0x0802681d
 8026870:	0802681d 	.word	0x0802681d
 8026874:	080269c3 	.word	0x080269c3
 8026878:	0802681d 	.word	0x0802681d
 802687c:	080268cb 	.word	0x080268cb
 8026880:	0802681d 	.word	0x0802681d
 8026884:	0802681d 	.word	0x0802681d
 8026888:	08026963 	.word	0x08026963
 802688c:	6833      	ldr	r3, [r6, #0]
 802688e:	1d1a      	adds	r2, r3, #4
 8026890:	681b      	ldr	r3, [r3, #0]
 8026892:	6032      	str	r2, [r6, #0]
 8026894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026898:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802689c:	2301      	movs	r3, #1
 802689e:	e09d      	b.n	80269dc <_printf_i+0x1e8>
 80268a0:	6833      	ldr	r3, [r6, #0]
 80268a2:	6820      	ldr	r0, [r4, #0]
 80268a4:	1d19      	adds	r1, r3, #4
 80268a6:	6031      	str	r1, [r6, #0]
 80268a8:	0606      	lsls	r6, r0, #24
 80268aa:	d501      	bpl.n	80268b0 <_printf_i+0xbc>
 80268ac:	681d      	ldr	r5, [r3, #0]
 80268ae:	e003      	b.n	80268b8 <_printf_i+0xc4>
 80268b0:	0645      	lsls	r5, r0, #25
 80268b2:	d5fb      	bpl.n	80268ac <_printf_i+0xb8>
 80268b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80268b8:	2d00      	cmp	r5, #0
 80268ba:	da03      	bge.n	80268c4 <_printf_i+0xd0>
 80268bc:	232d      	movs	r3, #45	@ 0x2d
 80268be:	426d      	negs	r5, r5
 80268c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80268c4:	4859      	ldr	r0, [pc, #356]	@ (8026a2c <_printf_i+0x238>)
 80268c6:	230a      	movs	r3, #10
 80268c8:	e011      	b.n	80268ee <_printf_i+0xfa>
 80268ca:	6821      	ldr	r1, [r4, #0]
 80268cc:	6833      	ldr	r3, [r6, #0]
 80268ce:	0608      	lsls	r0, r1, #24
 80268d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80268d4:	d402      	bmi.n	80268dc <_printf_i+0xe8>
 80268d6:	0649      	lsls	r1, r1, #25
 80268d8:	bf48      	it	mi
 80268da:	b2ad      	uxthmi	r5, r5
 80268dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80268de:	4853      	ldr	r0, [pc, #332]	@ (8026a2c <_printf_i+0x238>)
 80268e0:	6033      	str	r3, [r6, #0]
 80268e2:	bf14      	ite	ne
 80268e4:	230a      	movne	r3, #10
 80268e6:	2308      	moveq	r3, #8
 80268e8:	2100      	movs	r1, #0
 80268ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80268ee:	6866      	ldr	r6, [r4, #4]
 80268f0:	60a6      	str	r6, [r4, #8]
 80268f2:	2e00      	cmp	r6, #0
 80268f4:	bfa2      	ittt	ge
 80268f6:	6821      	ldrge	r1, [r4, #0]
 80268f8:	f021 0104 	bicge.w	r1, r1, #4
 80268fc:	6021      	strge	r1, [r4, #0]
 80268fe:	b90d      	cbnz	r5, 8026904 <_printf_i+0x110>
 8026900:	2e00      	cmp	r6, #0
 8026902:	d04b      	beq.n	802699c <_printf_i+0x1a8>
 8026904:	4616      	mov	r6, r2
 8026906:	fbb5 f1f3 	udiv	r1, r5, r3
 802690a:	fb03 5711 	mls	r7, r3, r1, r5
 802690e:	5dc7      	ldrb	r7, [r0, r7]
 8026910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8026914:	462f      	mov	r7, r5
 8026916:	42bb      	cmp	r3, r7
 8026918:	460d      	mov	r5, r1
 802691a:	d9f4      	bls.n	8026906 <_printf_i+0x112>
 802691c:	2b08      	cmp	r3, #8
 802691e:	d10b      	bne.n	8026938 <_printf_i+0x144>
 8026920:	6823      	ldr	r3, [r4, #0]
 8026922:	07df      	lsls	r7, r3, #31
 8026924:	d508      	bpl.n	8026938 <_printf_i+0x144>
 8026926:	6923      	ldr	r3, [r4, #16]
 8026928:	6861      	ldr	r1, [r4, #4]
 802692a:	4299      	cmp	r1, r3
 802692c:	bfde      	ittt	le
 802692e:	2330      	movle	r3, #48	@ 0x30
 8026930:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026934:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026938:	1b92      	subs	r2, r2, r6
 802693a:	6122      	str	r2, [r4, #16]
 802693c:	f8cd a000 	str.w	sl, [sp]
 8026940:	464b      	mov	r3, r9
 8026942:	aa03      	add	r2, sp, #12
 8026944:	4621      	mov	r1, r4
 8026946:	4640      	mov	r0, r8
 8026948:	f7ff fee6 	bl	8026718 <_printf_common>
 802694c:	3001      	adds	r0, #1
 802694e:	d14a      	bne.n	80269e6 <_printf_i+0x1f2>
 8026950:	f04f 30ff 	mov.w	r0, #4294967295
 8026954:	b004      	add	sp, #16
 8026956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802695a:	6823      	ldr	r3, [r4, #0]
 802695c:	f043 0320 	orr.w	r3, r3, #32
 8026960:	6023      	str	r3, [r4, #0]
 8026962:	4833      	ldr	r0, [pc, #204]	@ (8026a30 <_printf_i+0x23c>)
 8026964:	2778      	movs	r7, #120	@ 0x78
 8026966:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802696a:	6823      	ldr	r3, [r4, #0]
 802696c:	6831      	ldr	r1, [r6, #0]
 802696e:	061f      	lsls	r7, r3, #24
 8026970:	f851 5b04 	ldr.w	r5, [r1], #4
 8026974:	d402      	bmi.n	802697c <_printf_i+0x188>
 8026976:	065f      	lsls	r7, r3, #25
 8026978:	bf48      	it	mi
 802697a:	b2ad      	uxthmi	r5, r5
 802697c:	6031      	str	r1, [r6, #0]
 802697e:	07d9      	lsls	r1, r3, #31
 8026980:	bf44      	itt	mi
 8026982:	f043 0320 	orrmi.w	r3, r3, #32
 8026986:	6023      	strmi	r3, [r4, #0]
 8026988:	b11d      	cbz	r5, 8026992 <_printf_i+0x19e>
 802698a:	2310      	movs	r3, #16
 802698c:	e7ac      	b.n	80268e8 <_printf_i+0xf4>
 802698e:	4827      	ldr	r0, [pc, #156]	@ (8026a2c <_printf_i+0x238>)
 8026990:	e7e9      	b.n	8026966 <_printf_i+0x172>
 8026992:	6823      	ldr	r3, [r4, #0]
 8026994:	f023 0320 	bic.w	r3, r3, #32
 8026998:	6023      	str	r3, [r4, #0]
 802699a:	e7f6      	b.n	802698a <_printf_i+0x196>
 802699c:	4616      	mov	r6, r2
 802699e:	e7bd      	b.n	802691c <_printf_i+0x128>
 80269a0:	6833      	ldr	r3, [r6, #0]
 80269a2:	6825      	ldr	r5, [r4, #0]
 80269a4:	6961      	ldr	r1, [r4, #20]
 80269a6:	1d18      	adds	r0, r3, #4
 80269a8:	6030      	str	r0, [r6, #0]
 80269aa:	062e      	lsls	r6, r5, #24
 80269ac:	681b      	ldr	r3, [r3, #0]
 80269ae:	d501      	bpl.n	80269b4 <_printf_i+0x1c0>
 80269b0:	6019      	str	r1, [r3, #0]
 80269b2:	e002      	b.n	80269ba <_printf_i+0x1c6>
 80269b4:	0668      	lsls	r0, r5, #25
 80269b6:	d5fb      	bpl.n	80269b0 <_printf_i+0x1bc>
 80269b8:	8019      	strh	r1, [r3, #0]
 80269ba:	2300      	movs	r3, #0
 80269bc:	6123      	str	r3, [r4, #16]
 80269be:	4616      	mov	r6, r2
 80269c0:	e7bc      	b.n	802693c <_printf_i+0x148>
 80269c2:	6833      	ldr	r3, [r6, #0]
 80269c4:	1d1a      	adds	r2, r3, #4
 80269c6:	6032      	str	r2, [r6, #0]
 80269c8:	681e      	ldr	r6, [r3, #0]
 80269ca:	6862      	ldr	r2, [r4, #4]
 80269cc:	2100      	movs	r1, #0
 80269ce:	4630      	mov	r0, r6
 80269d0:	f7d9 fc86 	bl	80002e0 <memchr>
 80269d4:	b108      	cbz	r0, 80269da <_printf_i+0x1e6>
 80269d6:	1b80      	subs	r0, r0, r6
 80269d8:	6060      	str	r0, [r4, #4]
 80269da:	6863      	ldr	r3, [r4, #4]
 80269dc:	6123      	str	r3, [r4, #16]
 80269de:	2300      	movs	r3, #0
 80269e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80269e4:	e7aa      	b.n	802693c <_printf_i+0x148>
 80269e6:	6923      	ldr	r3, [r4, #16]
 80269e8:	4632      	mov	r2, r6
 80269ea:	4649      	mov	r1, r9
 80269ec:	4640      	mov	r0, r8
 80269ee:	47d0      	blx	sl
 80269f0:	3001      	adds	r0, #1
 80269f2:	d0ad      	beq.n	8026950 <_printf_i+0x15c>
 80269f4:	6823      	ldr	r3, [r4, #0]
 80269f6:	079b      	lsls	r3, r3, #30
 80269f8:	d413      	bmi.n	8026a22 <_printf_i+0x22e>
 80269fa:	68e0      	ldr	r0, [r4, #12]
 80269fc:	9b03      	ldr	r3, [sp, #12]
 80269fe:	4298      	cmp	r0, r3
 8026a00:	bfb8      	it	lt
 8026a02:	4618      	movlt	r0, r3
 8026a04:	e7a6      	b.n	8026954 <_printf_i+0x160>
 8026a06:	2301      	movs	r3, #1
 8026a08:	4632      	mov	r2, r6
 8026a0a:	4649      	mov	r1, r9
 8026a0c:	4640      	mov	r0, r8
 8026a0e:	47d0      	blx	sl
 8026a10:	3001      	adds	r0, #1
 8026a12:	d09d      	beq.n	8026950 <_printf_i+0x15c>
 8026a14:	3501      	adds	r5, #1
 8026a16:	68e3      	ldr	r3, [r4, #12]
 8026a18:	9903      	ldr	r1, [sp, #12]
 8026a1a:	1a5b      	subs	r3, r3, r1
 8026a1c:	42ab      	cmp	r3, r5
 8026a1e:	dcf2      	bgt.n	8026a06 <_printf_i+0x212>
 8026a20:	e7eb      	b.n	80269fa <_printf_i+0x206>
 8026a22:	2500      	movs	r5, #0
 8026a24:	f104 0619 	add.w	r6, r4, #25
 8026a28:	e7f5      	b.n	8026a16 <_printf_i+0x222>
 8026a2a:	bf00      	nop
 8026a2c:	0802a9a9 	.word	0x0802a9a9
 8026a30:	0802a9ba 	.word	0x0802a9ba

08026a34 <__sflush_r>:
 8026a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a3c:	0716      	lsls	r6, r2, #28
 8026a3e:	4605      	mov	r5, r0
 8026a40:	460c      	mov	r4, r1
 8026a42:	d454      	bmi.n	8026aee <__sflush_r+0xba>
 8026a44:	684b      	ldr	r3, [r1, #4]
 8026a46:	2b00      	cmp	r3, #0
 8026a48:	dc02      	bgt.n	8026a50 <__sflush_r+0x1c>
 8026a4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8026a4c:	2b00      	cmp	r3, #0
 8026a4e:	dd48      	ble.n	8026ae2 <__sflush_r+0xae>
 8026a50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026a52:	2e00      	cmp	r6, #0
 8026a54:	d045      	beq.n	8026ae2 <__sflush_r+0xae>
 8026a56:	2300      	movs	r3, #0
 8026a58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8026a5c:	682f      	ldr	r7, [r5, #0]
 8026a5e:	6a21      	ldr	r1, [r4, #32]
 8026a60:	602b      	str	r3, [r5, #0]
 8026a62:	d030      	beq.n	8026ac6 <__sflush_r+0x92>
 8026a64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026a66:	89a3      	ldrh	r3, [r4, #12]
 8026a68:	0759      	lsls	r1, r3, #29
 8026a6a:	d505      	bpl.n	8026a78 <__sflush_r+0x44>
 8026a6c:	6863      	ldr	r3, [r4, #4]
 8026a6e:	1ad2      	subs	r2, r2, r3
 8026a70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026a72:	b10b      	cbz	r3, 8026a78 <__sflush_r+0x44>
 8026a74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026a76:	1ad2      	subs	r2, r2, r3
 8026a78:	2300      	movs	r3, #0
 8026a7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026a7c:	6a21      	ldr	r1, [r4, #32]
 8026a7e:	4628      	mov	r0, r5
 8026a80:	47b0      	blx	r6
 8026a82:	1c43      	adds	r3, r0, #1
 8026a84:	89a3      	ldrh	r3, [r4, #12]
 8026a86:	d106      	bne.n	8026a96 <__sflush_r+0x62>
 8026a88:	6829      	ldr	r1, [r5, #0]
 8026a8a:	291d      	cmp	r1, #29
 8026a8c:	d82b      	bhi.n	8026ae6 <__sflush_r+0xb2>
 8026a8e:	4a2a      	ldr	r2, [pc, #168]	@ (8026b38 <__sflush_r+0x104>)
 8026a90:	410a      	asrs	r2, r1
 8026a92:	07d6      	lsls	r6, r2, #31
 8026a94:	d427      	bmi.n	8026ae6 <__sflush_r+0xb2>
 8026a96:	2200      	movs	r2, #0
 8026a98:	6062      	str	r2, [r4, #4]
 8026a9a:	04d9      	lsls	r1, r3, #19
 8026a9c:	6922      	ldr	r2, [r4, #16]
 8026a9e:	6022      	str	r2, [r4, #0]
 8026aa0:	d504      	bpl.n	8026aac <__sflush_r+0x78>
 8026aa2:	1c42      	adds	r2, r0, #1
 8026aa4:	d101      	bne.n	8026aaa <__sflush_r+0x76>
 8026aa6:	682b      	ldr	r3, [r5, #0]
 8026aa8:	b903      	cbnz	r3, 8026aac <__sflush_r+0x78>
 8026aaa:	6560      	str	r0, [r4, #84]	@ 0x54
 8026aac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026aae:	602f      	str	r7, [r5, #0]
 8026ab0:	b1b9      	cbz	r1, 8026ae2 <__sflush_r+0xae>
 8026ab2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026ab6:	4299      	cmp	r1, r3
 8026ab8:	d002      	beq.n	8026ac0 <__sflush_r+0x8c>
 8026aba:	4628      	mov	r0, r5
 8026abc:	f7ff fca0 	bl	8026400 <_free_r>
 8026ac0:	2300      	movs	r3, #0
 8026ac2:	6363      	str	r3, [r4, #52]	@ 0x34
 8026ac4:	e00d      	b.n	8026ae2 <__sflush_r+0xae>
 8026ac6:	2301      	movs	r3, #1
 8026ac8:	4628      	mov	r0, r5
 8026aca:	47b0      	blx	r6
 8026acc:	4602      	mov	r2, r0
 8026ace:	1c50      	adds	r0, r2, #1
 8026ad0:	d1c9      	bne.n	8026a66 <__sflush_r+0x32>
 8026ad2:	682b      	ldr	r3, [r5, #0]
 8026ad4:	2b00      	cmp	r3, #0
 8026ad6:	d0c6      	beq.n	8026a66 <__sflush_r+0x32>
 8026ad8:	2b1d      	cmp	r3, #29
 8026ada:	d001      	beq.n	8026ae0 <__sflush_r+0xac>
 8026adc:	2b16      	cmp	r3, #22
 8026ade:	d11e      	bne.n	8026b1e <__sflush_r+0xea>
 8026ae0:	602f      	str	r7, [r5, #0]
 8026ae2:	2000      	movs	r0, #0
 8026ae4:	e022      	b.n	8026b2c <__sflush_r+0xf8>
 8026ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026aea:	b21b      	sxth	r3, r3
 8026aec:	e01b      	b.n	8026b26 <__sflush_r+0xf2>
 8026aee:	690f      	ldr	r7, [r1, #16]
 8026af0:	2f00      	cmp	r7, #0
 8026af2:	d0f6      	beq.n	8026ae2 <__sflush_r+0xae>
 8026af4:	0793      	lsls	r3, r2, #30
 8026af6:	680e      	ldr	r6, [r1, #0]
 8026af8:	bf08      	it	eq
 8026afa:	694b      	ldreq	r3, [r1, #20]
 8026afc:	600f      	str	r7, [r1, #0]
 8026afe:	bf18      	it	ne
 8026b00:	2300      	movne	r3, #0
 8026b02:	eba6 0807 	sub.w	r8, r6, r7
 8026b06:	608b      	str	r3, [r1, #8]
 8026b08:	f1b8 0f00 	cmp.w	r8, #0
 8026b0c:	dde9      	ble.n	8026ae2 <__sflush_r+0xae>
 8026b0e:	6a21      	ldr	r1, [r4, #32]
 8026b10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026b12:	4643      	mov	r3, r8
 8026b14:	463a      	mov	r2, r7
 8026b16:	4628      	mov	r0, r5
 8026b18:	47b0      	blx	r6
 8026b1a:	2800      	cmp	r0, #0
 8026b1c:	dc08      	bgt.n	8026b30 <__sflush_r+0xfc>
 8026b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026b26:	81a3      	strh	r3, [r4, #12]
 8026b28:	f04f 30ff 	mov.w	r0, #4294967295
 8026b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b30:	4407      	add	r7, r0
 8026b32:	eba8 0800 	sub.w	r8, r8, r0
 8026b36:	e7e7      	b.n	8026b08 <__sflush_r+0xd4>
 8026b38:	dfbffffe 	.word	0xdfbffffe

08026b3c <_fflush_r>:
 8026b3c:	b538      	push	{r3, r4, r5, lr}
 8026b3e:	690b      	ldr	r3, [r1, #16]
 8026b40:	4605      	mov	r5, r0
 8026b42:	460c      	mov	r4, r1
 8026b44:	b913      	cbnz	r3, 8026b4c <_fflush_r+0x10>
 8026b46:	2500      	movs	r5, #0
 8026b48:	4628      	mov	r0, r5
 8026b4a:	bd38      	pop	{r3, r4, r5, pc}
 8026b4c:	b118      	cbz	r0, 8026b56 <_fflush_r+0x1a>
 8026b4e:	6a03      	ldr	r3, [r0, #32]
 8026b50:	b90b      	cbnz	r3, 8026b56 <_fflush_r+0x1a>
 8026b52:	f7ff f9e9 	bl	8025f28 <__sinit>
 8026b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b5a:	2b00      	cmp	r3, #0
 8026b5c:	d0f3      	beq.n	8026b46 <_fflush_r+0xa>
 8026b5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026b60:	07d0      	lsls	r0, r2, #31
 8026b62:	d404      	bmi.n	8026b6e <_fflush_r+0x32>
 8026b64:	0599      	lsls	r1, r3, #22
 8026b66:	d402      	bmi.n	8026b6e <_fflush_r+0x32>
 8026b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026b6a:	f7ff fbdc 	bl	8026326 <__retarget_lock_acquire_recursive>
 8026b6e:	4628      	mov	r0, r5
 8026b70:	4621      	mov	r1, r4
 8026b72:	f7ff ff5f 	bl	8026a34 <__sflush_r>
 8026b76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026b78:	07da      	lsls	r2, r3, #31
 8026b7a:	4605      	mov	r5, r0
 8026b7c:	d4e4      	bmi.n	8026b48 <_fflush_r+0xc>
 8026b7e:	89a3      	ldrh	r3, [r4, #12]
 8026b80:	059b      	lsls	r3, r3, #22
 8026b82:	d4e1      	bmi.n	8026b48 <_fflush_r+0xc>
 8026b84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026b86:	f7ff fbcf 	bl	8026328 <__retarget_lock_release_recursive>
 8026b8a:	e7dd      	b.n	8026b48 <_fflush_r+0xc>

08026b8c <__swhatbuf_r>:
 8026b8c:	b570      	push	{r4, r5, r6, lr}
 8026b8e:	460c      	mov	r4, r1
 8026b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b94:	2900      	cmp	r1, #0
 8026b96:	b096      	sub	sp, #88	@ 0x58
 8026b98:	4615      	mov	r5, r2
 8026b9a:	461e      	mov	r6, r3
 8026b9c:	da0d      	bge.n	8026bba <__swhatbuf_r+0x2e>
 8026b9e:	89a3      	ldrh	r3, [r4, #12]
 8026ba0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026ba4:	f04f 0100 	mov.w	r1, #0
 8026ba8:	bf14      	ite	ne
 8026baa:	2340      	movne	r3, #64	@ 0x40
 8026bac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026bb0:	2000      	movs	r0, #0
 8026bb2:	6031      	str	r1, [r6, #0]
 8026bb4:	602b      	str	r3, [r5, #0]
 8026bb6:	b016      	add	sp, #88	@ 0x58
 8026bb8:	bd70      	pop	{r4, r5, r6, pc}
 8026bba:	466a      	mov	r2, sp
 8026bbc:	f000 f848 	bl	8026c50 <_fstat_r>
 8026bc0:	2800      	cmp	r0, #0
 8026bc2:	dbec      	blt.n	8026b9e <__swhatbuf_r+0x12>
 8026bc4:	9901      	ldr	r1, [sp, #4]
 8026bc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026bca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026bce:	4259      	negs	r1, r3
 8026bd0:	4159      	adcs	r1, r3
 8026bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026bd6:	e7eb      	b.n	8026bb0 <__swhatbuf_r+0x24>

08026bd8 <__smakebuf_r>:
 8026bd8:	898b      	ldrh	r3, [r1, #12]
 8026bda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026bdc:	079d      	lsls	r5, r3, #30
 8026bde:	4606      	mov	r6, r0
 8026be0:	460c      	mov	r4, r1
 8026be2:	d507      	bpl.n	8026bf4 <__smakebuf_r+0x1c>
 8026be4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026be8:	6023      	str	r3, [r4, #0]
 8026bea:	6123      	str	r3, [r4, #16]
 8026bec:	2301      	movs	r3, #1
 8026bee:	6163      	str	r3, [r4, #20]
 8026bf0:	b003      	add	sp, #12
 8026bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026bf4:	ab01      	add	r3, sp, #4
 8026bf6:	466a      	mov	r2, sp
 8026bf8:	f7ff ffc8 	bl	8026b8c <__swhatbuf_r>
 8026bfc:	9f00      	ldr	r7, [sp, #0]
 8026bfe:	4605      	mov	r5, r0
 8026c00:	4639      	mov	r1, r7
 8026c02:	4630      	mov	r0, r6
 8026c04:	f7ff f86a 	bl	8025cdc <_malloc_r>
 8026c08:	b948      	cbnz	r0, 8026c1e <__smakebuf_r+0x46>
 8026c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c0e:	059a      	lsls	r2, r3, #22
 8026c10:	d4ee      	bmi.n	8026bf0 <__smakebuf_r+0x18>
 8026c12:	f023 0303 	bic.w	r3, r3, #3
 8026c16:	f043 0302 	orr.w	r3, r3, #2
 8026c1a:	81a3      	strh	r3, [r4, #12]
 8026c1c:	e7e2      	b.n	8026be4 <__smakebuf_r+0xc>
 8026c1e:	89a3      	ldrh	r3, [r4, #12]
 8026c20:	6020      	str	r0, [r4, #0]
 8026c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026c26:	81a3      	strh	r3, [r4, #12]
 8026c28:	9b01      	ldr	r3, [sp, #4]
 8026c2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8026c2e:	b15b      	cbz	r3, 8026c48 <__smakebuf_r+0x70>
 8026c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026c34:	4630      	mov	r0, r6
 8026c36:	f000 f81d 	bl	8026c74 <_isatty_r>
 8026c3a:	b128      	cbz	r0, 8026c48 <__smakebuf_r+0x70>
 8026c3c:	89a3      	ldrh	r3, [r4, #12]
 8026c3e:	f023 0303 	bic.w	r3, r3, #3
 8026c42:	f043 0301 	orr.w	r3, r3, #1
 8026c46:	81a3      	strh	r3, [r4, #12]
 8026c48:	89a3      	ldrh	r3, [r4, #12]
 8026c4a:	431d      	orrs	r5, r3
 8026c4c:	81a5      	strh	r5, [r4, #12]
 8026c4e:	e7cf      	b.n	8026bf0 <__smakebuf_r+0x18>

08026c50 <_fstat_r>:
 8026c50:	b538      	push	{r3, r4, r5, lr}
 8026c52:	4d07      	ldr	r5, [pc, #28]	@ (8026c70 <_fstat_r+0x20>)
 8026c54:	2300      	movs	r3, #0
 8026c56:	4604      	mov	r4, r0
 8026c58:	4608      	mov	r0, r1
 8026c5a:	4611      	mov	r1, r2
 8026c5c:	602b      	str	r3, [r5, #0]
 8026c5e:	f7da fef6 	bl	8001a4e <_fstat>
 8026c62:	1c43      	adds	r3, r0, #1
 8026c64:	d102      	bne.n	8026c6c <_fstat_r+0x1c>
 8026c66:	682b      	ldr	r3, [r5, #0]
 8026c68:	b103      	cbz	r3, 8026c6c <_fstat_r+0x1c>
 8026c6a:	6023      	str	r3, [r4, #0]
 8026c6c:	bd38      	pop	{r3, r4, r5, pc}
 8026c6e:	bf00      	nop
 8026c70:	24026f98 	.word	0x24026f98

08026c74 <_isatty_r>:
 8026c74:	b538      	push	{r3, r4, r5, lr}
 8026c76:	4d06      	ldr	r5, [pc, #24]	@ (8026c90 <_isatty_r+0x1c>)
 8026c78:	2300      	movs	r3, #0
 8026c7a:	4604      	mov	r4, r0
 8026c7c:	4608      	mov	r0, r1
 8026c7e:	602b      	str	r3, [r5, #0]
 8026c80:	f7da feea 	bl	8001a58 <_isatty>
 8026c84:	1c43      	adds	r3, r0, #1
 8026c86:	d102      	bne.n	8026c8e <_isatty_r+0x1a>
 8026c88:	682b      	ldr	r3, [r5, #0]
 8026c8a:	b103      	cbz	r3, 8026c8e <_isatty_r+0x1a>
 8026c8c:	6023      	str	r3, [r4, #0]
 8026c8e:	bd38      	pop	{r3, r4, r5, pc}
 8026c90:	24026f98 	.word	0x24026f98

08026c94 <_init>:
 8026c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c96:	bf00      	nop
 8026c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c9a:	bc08      	pop	{r3}
 8026c9c:	469e      	mov	lr, r3
 8026c9e:	4770      	bx	lr

08026ca0 <_fini>:
 8026ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026ca2:	bf00      	nop
 8026ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026ca6:	bc08      	pop	{r3}
 8026ca8:	469e      	mov	lr, r3
 8026caa:	4770      	bx	lr
