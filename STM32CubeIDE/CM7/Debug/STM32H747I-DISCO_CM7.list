
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025ae4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bec  08025d88  08025d88  00026d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000446  08029974  08029974  0002a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08029dbc  08029dbc  0002adbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0021b790  90000000  90000000  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000030  9021b790  9021b790  00247790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08029dd4  08029dd4  002477c0  2**0
                  CONTENTS
  8 .ARM          00000008  08029dd4  08029dd4  0002add4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08029ddc  08029ddc  002477c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08029ddc  08029ddc  0002addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08029df8  08029df8  0002adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08029e00  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  08029f3c  0002b140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  0802a03c  0002b240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00026dfc  24000340  0802a13c  0002b340  2**2
                  ALLOC
 16 ._user_heap_stack 00002004  2402713c  0802a13c  0002c13c  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  002477c0  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00248000  2**2
                  ALLOC
 19 .debug_info   001099e8  00000000  00000000  002477ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001afe9  00000000  00000000  003511d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004078  00000000  00000000  0036c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00004fdc  00000000  00000000  00370238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  000560d9  00000000  00000000  00375214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00079ab4  00000000  00000000  003cb2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001e8c18  00000000  00000000  00444da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0062d9b9  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b35c  00000000  00000000  0062da7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 00027de0  00000000  00000000  00638dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000006f  00000000  00000000  00660bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08025d6c 	.word	0x08025d6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	08025d6c 	.word	0x08025d6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00e bf58 	b.w	800f5b0 <vTaskSetApplicationTaskTag>
 8000700:	0800233d 	.word	0x0800233d

08000704 <MAX7219_CS_Enable>:
void MAX7219_ClearAll(void);
void MAX7219_ResetAll(void);
void MAX7219_LightSingleLed(uint8_t matrix_index, uint8_t row, uint8_t bit_position);

void MAX7219_CS_Enable(void) {
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070a:	4801      	ldr	r0, [pc, #4]	@ (8000710 <MAX7219_CS_Enable+0xc>)
 800070c:	f009 b85a 	b.w	80097c4 <HAL_GPIO_WritePin>
 8000710:	58022400 	.word	0x58022400

08000714 <MAX7219_CS_Disable>:
}

void MAX7219_CS_Disable(void) {
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800071a:	4801      	ldr	r0, [pc, #4]	@ (8000720 <MAX7219_CS_Disable+0xc>)
 800071c:	f009 b852 	b.w	80097c4 <HAL_GPIO_WritePin>
 8000720:	58022400 	.word	0x58022400

08000724 <MatrizLedSelect>:

void MatrizLedSelect(uint8_t num_mx, uint8_t row, uint8_t column){
	// arreglo para darle valores a las matrices


	if(num_mx >= NUM_MATRICES || row >= NUM_FILAS || column >= 8){
 8000724:	2803      	cmp	r0, #3
void MatrizLedSelect(uint8_t num_mx, uint8_t row, uint8_t column){
 8000726:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(num_mx >= NUM_MATRICES || row >= NUM_FILAS || column >= 8){
 8000728:	d802      	bhi.n	8000730 <MatrizLedSelect+0xc>
 800072a:	4311      	orrs	r1, r2
 800072c:	2907      	cmp	r1, #7
 800072e:	d901      	bls.n	8000734 <MatrizLedSelect+0x10>
		MAX7219_CS_Enable();
		HAL_SPI_Transmit(&hspi5, spi_packet, sizeof(spi_packet), 100);
		MAX7219_CS_Disable();
	}

}
 8000730:	b002      	add	sp, #8
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	4c1b      	ldr	r4, [pc, #108]	@ (80007a4 <MatrizLedSelect+0x80>)
	if(num_mx >= NUM_MATRICES || row >= NUM_FILAS || column >= 8){
 8000736:	2204      	movs	r2, #4
				matrix_pattern[matriz][fila] = 0x00;
 8000738:	2000      	movs	r0, #0
				matrix_pattern[matriz][fila] = 0xFF;
 800073a:	25ff      	movs	r5, #255	@ 0xff
	if(num_mx >= NUM_MATRICES || row >= NUM_FILAS || column >= 8){
 800073c:	4621      	mov	r1, r4
		for(uint8_t fila = 0; fila < NUM_FILAS ; fila++){
 800073e:	2300      	movs	r3, #0
			if(fila == 0){
 8000740:	b90b      	cbnz	r3, 8000746 <MatrizLedSelect+0x22>
		for(uint8_t fila = 0; fila < NUM_FILAS ; fila++){
 8000742:	2301      	movs	r3, #1
				matrix_pattern[matriz][fila] = 0xFF;
 8000744:	700d      	strb	r5, [r1, #0]
				matrix_pattern[matriz][fila] = 0x00;
 8000746:	54c8      	strb	r0, [r1, r3]
		for(uint8_t fila = 0; fila < NUM_FILAS ; fila++){
 8000748:	3301      	adds	r3, #1
 800074a:	2b08      	cmp	r3, #8
 800074c:	d1f8      	bne.n	8000740 <MatrizLedSelect+0x1c>
	for (uint8_t matriz = 0 ; matriz < NUM_MATRICES; matriz++){
 800074e:	3a01      	subs	r2, #1
 8000750:	3108      	adds	r1, #8
 8000752:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 8000756:	d1f2      	bne.n	800073e <MatrizLedSelect+0x1a>
 8000758:	2501      	movs	r5, #1
		HAL_SPI_Transmit(&hspi5, spi_packet, sizeof(spi_packet), 100);
 800075a:	4e13      	ldr	r6, [pc, #76]	@ (80007a8 <MatrizLedSelect+0x84>)
        	spi_packet[matriz*2 + 1] = matrix_pattern[matriz][fila-1];
 800075c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000760:	b2eb      	uxtb	r3, r5
	for(uint8_t fila = 1; fila <= NUM_FILAS ; fila++){
 8000762:	3501      	adds	r5, #1
        	spi_packet[matriz*2 + 1] = matrix_pattern[matriz][fila-1];
 8000764:	f88d 2001 	strb.w	r2, [sp, #1]
 8000768:	79e2      	ldrb	r2, [r4, #7]
        	spi_packet[matriz * 2] = fila;
 800076a:	f88d 3000 	strb.w	r3, [sp]
 800076e:	f88d 3002 	strb.w	r3, [sp, #2]
        	spi_packet[matriz*2 + 1] = matrix_pattern[matriz][fila-1];
 8000772:	f88d 2003 	strb.w	r2, [sp, #3]
        	spi_packet[matriz * 2] = fila;
 8000776:	f88d 3004 	strb.w	r3, [sp, #4]
        	spi_packet[matriz*2 + 1] = matrix_pattern[matriz][fila-1];
 800077a:	7be2      	ldrb	r2, [r4, #15]
        	spi_packet[matriz * 2] = fila;
 800077c:	f88d 3006 	strb.w	r3, [sp, #6]
        	spi_packet[matriz*2 + 1] = matrix_pattern[matriz][fila-1];
 8000780:	7de3      	ldrb	r3, [r4, #23]
 8000782:	f88d 2005 	strb.w	r2, [sp, #5]
 8000786:	f88d 3007 	strb.w	r3, [sp, #7]
		MAX7219_CS_Enable();
 800078a:	f7ff ffbb 	bl	8000704 <MAX7219_CS_Enable>
		HAL_SPI_Transmit(&hspi5, spi_packet, sizeof(spi_packet), 100);
 800078e:	2364      	movs	r3, #100	@ 0x64
 8000790:	2208      	movs	r2, #8
 8000792:	4669      	mov	r1, sp
 8000794:	4630      	mov	r0, r6
 8000796:	f00c fe31 	bl	800d3fc <HAL_SPI_Transmit>
		MAX7219_CS_Disable();
 800079a:	f7ff ffbb 	bl	8000714 <MAX7219_CS_Disable>
	for(uint8_t fila = 1; fila <= NUM_FILAS ; fila++){
 800079e:	2d09      	cmp	r5, #9
 80007a0:	d1dc      	bne.n	800075c <MatrizLedSelect+0x38>
 80007a2:	e7c5      	b.n	8000730 <MatrizLedSelect+0xc>
 80007a4:	2400035c 	.word	0x2400035c
 80007a8:	240003ec 	.word	0x240003ec

080007ac <MAX7219_ClearAll>:




void MAX7219_ClearAll(void) {
 80007ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for (uint8_t fila = 1; fila <= 8; fila++) {
 80007ae:	2401      	movs	r4, #1
        // y el último par es para la matriz más cercana al micro.
        for (int i = 0; i < NUM_MATRICES; i++) {
            //int index = (NUM_MATRICES - 1) - i;  // índice invertido

            tx[i * 2]     = fila;   // Dirección fila (1 a 8)
            tx[i * 2 + 1] = 0x00;   // Apagar todos los LEDs en esa fila
 80007b0:	2500      	movs	r5, #0
        }

        MAX7219_CS_Enable();
        HAL_SPI_Transmit(&hspi5, tx, sizeof(tx), 500);
 80007b2:	4e11      	ldr	r6, [pc, #68]	@ (80007f8 <MAX7219_ClearAll+0x4c>)
            tx[i * 2]     = fila;   // Dirección fila (1 a 8)
 80007b4:	f88d 4000 	strb.w	r4, [sp]
 80007b8:	f88d 4002 	strb.w	r4, [sp, #2]
 80007bc:	f88d 4004 	strb.w	r4, [sp, #4]
 80007c0:	f88d 4006 	strb.w	r4, [sp, #6]
    for (uint8_t fila = 1; fila <= 8; fila++) {
 80007c4:	3401      	adds	r4, #1
            tx[i * 2 + 1] = 0x00;   // Apagar todos los LEDs en esa fila
 80007c6:	f88d 5001 	strb.w	r5, [sp, #1]
    for (uint8_t fila = 1; fila <= 8; fila++) {
 80007ca:	b2e4      	uxtb	r4, r4
            tx[i * 2 + 1] = 0x00;   // Apagar todos los LEDs en esa fila
 80007cc:	f88d 5003 	strb.w	r5, [sp, #3]
 80007d0:	f88d 5005 	strb.w	r5, [sp, #5]
 80007d4:	f88d 5007 	strb.w	r5, [sp, #7]
        MAX7219_CS_Enable();
 80007d8:	f7ff ff94 	bl	8000704 <MAX7219_CS_Enable>
        HAL_SPI_Transmit(&hspi5, tx, sizeof(tx), 500);
 80007dc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007e0:	2208      	movs	r2, #8
 80007e2:	4669      	mov	r1, sp
 80007e4:	4630      	mov	r0, r6
 80007e6:	f00c fe09 	bl	800d3fc <HAL_SPI_Transmit>
        MAX7219_CS_Disable();
 80007ea:	f7ff ff93 	bl	8000714 <MAX7219_CS_Disable>
    for (uint8_t fila = 1; fila <= 8; fila++) {
 80007ee:	2c09      	cmp	r4, #9
 80007f0:	d1e0      	bne.n	80007b4 <MAX7219_ClearAll+0x8>
    }
}
 80007f2:	b002      	add	sp, #8
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	bf00      	nop
 80007f8:	240003ec 	.word	0x240003ec

080007fc <MAX7219_SendToAll>:
HAL_StatusTypeDef MAX7219_SendToAll(uint8_t address, uint8_t data, uint8_t pos) {
 80007fc:	b513      	push	{r0, r1, r4, lr}
    uint8_t tx[NUM_MATRICES * 2];

    for (int i = 0; i < NUM_MATRICES; i++) {
        if (i == pos) {
 80007fe:	2a00      	cmp	r2, #0
 8000800:	d037      	beq.n	8000872 <MAX7219_SendToAll+0x76>
 8000802:	2300      	movs	r3, #0
 8000804:	461c      	mov	r4, r3
 8000806:	2a01      	cmp	r2, #1
            tx[i * 2]     = address;
 8000808:	f88d 3000 	strb.w	r3, [sp]
            tx[i * 2 + 1] = data;
 800080c:	f88d 4001 	strb.w	r4, [sp, #1]
        if (i == pos) {
 8000810:	bf13      	iteet	ne
 8000812:	2300      	movne	r3, #0
 8000814:	4603      	moveq	r3, r0
 8000816:	460c      	moveq	r4, r1
 8000818:	461c      	movne	r4, r3
 800081a:	2a02      	cmp	r2, #2
            tx[i * 2]     = address;
 800081c:	f88d 3002 	strb.w	r3, [sp, #2]
        if (i == pos) {
 8000820:	bf14      	ite	ne
 8000822:	2300      	movne	r3, #0
 8000824:	4603      	moveq	r3, r0
            tx[i * 2 + 1] = data;
 8000826:	f88d 4003 	strb.w	r4, [sp, #3]
        if (i == pos) {
 800082a:	bf0c      	ite	eq
 800082c:	460c      	moveq	r4, r1
 800082e:	461c      	movne	r4, r3
 8000830:	2a03      	cmp	r2, #3
            tx[i * 2]     = address;
 8000832:	f88d 3004 	strb.w	r3, [sp, #4]
        if (i == pos) {
 8000836:	bf18      	it	ne
 8000838:	2000      	movne	r0, #0
            tx[i * 2 + 1] = data;
 800083a:	f88d 4005 	strb.w	r4, [sp, #5]
        if (i == pos) {
 800083e:	bf18      	it	ne
 8000840:	4601      	movne	r1, r0
            tx[i * 2]     = address;
 8000842:	f88d 0006 	strb.w	r0, [sp, #6]
            tx[i * 2 + 1] = data;
 8000846:	f88d 1007 	strb.w	r1, [sp, #7]
            tx[i * 2]     = 0x00;  // No-op (no hace nada)
            tx[i * 2 + 1] = 0x00;
        }
    }

    MAX7219_CS_Enable();
 800084a:	f7ff ff5b 	bl	8000704 <MAX7219_CS_Enable>
    HAL_Delay(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f007 ffae 	bl	80087b0 <HAL_Delay>
    HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi5, tx, NUM_MATRICES * 2, 100);
 8000854:	2364      	movs	r3, #100	@ 0x64
 8000856:	2208      	movs	r2, #8
 8000858:	4669      	mov	r1, sp
 800085a:	4807      	ldr	r0, [pc, #28]	@ (8000878 <MAX7219_SendToAll+0x7c>)
 800085c:	f00c fdce 	bl	800d3fc <HAL_SPI_Transmit>
 8000860:	4604      	mov	r4, r0
    HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f007 ffa4 	bl	80087b0 <HAL_Delay>
    MAX7219_CS_Disable();
 8000868:	f7ff ff54 	bl	8000714 <MAX7219_CS_Disable>

    return ret;
}
 800086c:	4620      	mov	r0, r4
 800086e:	b002      	add	sp, #8
 8000870:	bd10      	pop	{r4, pc}
        if (i == pos) {
 8000872:	4603      	mov	r3, r0
 8000874:	460c      	mov	r4, r1
 8000876:	e7c6      	b.n	8000806 <MAX7219_SendToAll+0xa>
 8000878:	240003ec 	.word	0x240003ec

0800087c <MAX7219_ResetAll>:
void MAX7219_ResetAll(void) {
 800087c:	b538      	push	{r3, r4, r5, lr}
 800087e:	2500      	movs	r5, #0
 8000880:	b2ec      	uxtb	r4, r5
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
        MAX7219_SendToAll(0x0F, 0x00, i);  // Display test off
 8000882:	2100      	movs	r1, #0
 8000884:	200f      	movs	r0, #15
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
 8000886:	3501      	adds	r5, #1
        MAX7219_SendToAll(0x0F, 0x00, i);  // Display test off
 8000888:	4622      	mov	r2, r4
 800088a:	f7ff ffb7 	bl	80007fc <MAX7219_SendToAll>
        MAX7219_SendToAll(0x09, 0x00, i);  // Decode mode off
 800088e:	4622      	mov	r2, r4
 8000890:	2100      	movs	r1, #0
 8000892:	2009      	movs	r0, #9
 8000894:	f7ff ffb2 	bl	80007fc <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0B, 0x07, i);  // Scan limit = 8
 8000898:	4622      	mov	r2, r4
 800089a:	2107      	movs	r1, #7
 800089c:	200b      	movs	r0, #11
 800089e:	f7ff ffad 	bl	80007fc <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0C, 0x01, i);  // Normal operation
 80008a2:	4622      	mov	r2, r4
 80008a4:	2101      	movs	r1, #1
 80008a6:	200c      	movs	r0, #12
 80008a8:	f7ff ffa8 	bl	80007fc <MAX7219_SendToAll>
        MAX7219_SendToAll(0x0A, 0x08, i);  // Medium intensity
 80008ac:	4622      	mov	r2, r4
 80008ae:	2108      	movs	r1, #8
 80008b0:	200a      	movs	r0, #10
 80008b2:	f7ff ffa3 	bl	80007fc <MAX7219_SendToAll>
    for (uint8_t i = 0; i < NUM_MATRICES; i++) {
 80008b6:	2d04      	cmp	r5, #4
 80008b8:	d1e2      	bne.n	8000880 <MAX7219_ResetAll+0x4>
    }
}
 80008ba:	bd38      	pop	{r3, r4, r5, pc}

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c0:	224c      	movs	r2, #76	@ 0x4c
 80008c2:	2100      	movs	r1, #0
 80008c4:	a809      	add	r0, sp, #36	@ 0x24
 80008c6:	f024 fcbb 	bl	8025240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ca:	2220      	movs	r2, #32
 80008cc:	2100      	movs	r1, #0
 80008ce:	a801      	add	r0, sp, #4
 80008d0:	f024 fcb6 	bl	8025240 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008d4:	2004      	movs	r0, #4
 80008d6:	f00a fdf9 	bl	800b4cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008da:	2300      	movs	r3, #0
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <SystemClock_Config+0xbc>)
 80008e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008e2:	f022 0201 	bic.w	r2, r2, #1
 80008e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4b22      	ldr	r3, [pc, #136]	@ (800097c <SystemClock_Config+0xc0>)
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80008f8:	619a      	str	r2, [r3, #24]
 80008fa:	699a      	ldr	r2, [r3, #24]
 80008fc:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000900:	9200      	str	r2, [sp, #0]
 8000902:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	0491      	lsls	r1, r2, #18
 8000908:	d5fc      	bpl.n	8000904 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800090e:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000910:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000912:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000914:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000916:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091a:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091c:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2301      	movs	r3, #1
 8000922:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000926:	23a0      	movs	r3, #160	@ 0xa0
 8000928:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000932:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000936:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093a:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f00b f8c6 	bl	800bacc <HAL_RCC_OscConfig>
 8000940:	b108      	cbz	r0, 8000946 <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000942:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000948:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000952:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000956:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000958:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800095c:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000960:	f00b fc50 	bl	800c204 <HAL_RCC_ClockConfig>
 8000964:	4601      	mov	r1, r0
 8000966:	b108      	cbz	r0, 800096c <SystemClock_Config+0xb0>
 8000968:	b672      	cpsid	i
  while (1)
 800096a:	e7fe      	b.n	800096a <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800096c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000970:	f00b fb58 	bl	800c024 <HAL_RCC_MCOConfig>
}
 8000974:	b01d      	add	sp, #116	@ 0x74
 8000976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000978:	58000400 	.word	0x58000400
 800097c:	58024800 	.word	0x58024800

08000980 <main>:
{
 8000980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000984:	b0bd      	sub	sp, #244	@ 0xf4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000986:	2210      	movs	r2, #16
 8000988:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800098a:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800098c:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800098e:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000990:	f024 fc56 	bl	8025240 <memset>
  HAL_MPU_Disable();
 8000994:	f007 ff88 	bl	80088a8 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000998:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 800099c:	4bbe      	ldr	r3, [pc, #760]	@ (8000c98 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800099e:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009a0:	f8ad 40bc 	strh.w	r4, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009a4:	9432      	str	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80009a6:	e9cd 1330 	strd	r1, r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009aa:	f007 ff9b 	bl	80088e4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80009ae:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009b0:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80009b2:	f88d 40bd 	strb.w	r4, [sp, #189]	@ 0xbd
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80009b6:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009ba:	f007 ff93 	bl	80088e4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80009be:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009c0:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80009c2:	f88d 40ca 	strb.w	r4, [sp, #202]	@ 0xca
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80009c6:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80009ca:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80009ce:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80009d0:	2318      	movs	r3, #24
 80009d2:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009d6:	f007 ff85 	bl	80088e4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80009da:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009dc:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80009de:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x24000000;
 80009e2:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80009e6:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80009e8:	2312      	movs	r3, #18
 80009ea:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f88d 30c8 	strb.w	r3, [sp, #200]	@ 0xc8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009f4:	f007 ff76 	bl	80088e4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 80009f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009fc:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80009fe:	f88d 50bd 	strb.w	r5, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000a02:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000a04:	2311      	movs	r3, #17
 8000a06:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a0a:	f007 ff6b 	bl	80088e4 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000a0e:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a10:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a12:	f88d 40c8 	strb.w	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000a16:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000a1a:	4ba0      	ldr	r3, [pc, #640]	@ (8000c9c <main+0x31c>)
 8000a1c:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000a1e:	230e      	movs	r3, #14
 8000a20:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a24:	f007 ff5e 	bl	80088e4 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f007 ff4b 	bl	80088c4 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a2e:	4b9c      	ldr	r3, [pc, #624]	@ (8000ca0 <main+0x320>)
 8000a30:	695a      	ldr	r2, [r3, #20]
 8000a32:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000a36:	d111      	bne.n	8000a5c <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a3c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a40:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a48:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000a52:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a58:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a5c:	4a90      	ldr	r2, [pc, #576]	@ (8000ca0 <main+0x320>)
 8000a5e:	6953      	ldr	r3, [r2, #20]
 8000a60:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000a64:	d123      	bne.n	8000aae <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a66:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a6e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a72:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a76:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a7a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000a7e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a80:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a84:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a86:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a8a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a8c:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000a90:	d2f9      	bcs.n	8000a86 <main+0x106>
    } while(sets-- != 0U);
 8000a92:	3b20      	subs	r3, #32
 8000a94:	f113 0f20 	cmn.w	r3, #32
 8000a98:	d1f2      	bne.n	8000a80 <main+0x100>
 8000a9a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a9e:	6953      	ldr	r3, [r2, #20]
 8000aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000aaa:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000aae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ab2:	4d7c      	ldr	r5, [pc, #496]	@ (8000ca4 <main+0x324>)
 8000ab4:	682c      	ldr	r4, [r5, #0]
 8000ab6:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000aba:	f000 8338 	beq.w	800112e <main+0x7ae>
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	d2f8      	bcs.n	8000ab4 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac2:	b672      	cpsid	i
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <main+0x144>
 8000ac6:	b672      	cpsid	i
 8000ac8:	e7fe      	b.n	8000ac8 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000aca:	4877      	ldr	r0, [pc, #476]	@ (8000ca8 <main+0x328>)
 8000acc:	4a77      	ldr	r2, [pc, #476]	@ (8000cac <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ace:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000ad0:	f8c0 9020 	str.w	r9, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000ad4:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ad8:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000adc:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ae0:	f00a fe14 	bl	800b70c <HAL_QSPI_Init>
 8000ae4:	b108      	cbz	r0, 8000aea <main+0x16a>
 8000ae6:	b672      	cpsid	i
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x168>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000aea:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000aee:	a92f      	add	r1, sp, #188	@ 0xbc
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000af0:	f88d 90be 	strb.w	r9, [sp, #190]	@ 0xbe
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000af4:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000af8:	f007 f9b6 	bl	8007e68 <BSP_QSPI_Init>
 8000afc:	b108      	cbz	r0, 8000b02 <main+0x182>
 8000afe:	b672      	cpsid	i
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <main+0x180>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000b02:	f007 f95d 	bl	8007dc0 <BSP_QSPI_EnableMemoryMappedMode>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b108      	cbz	r0, 8000b0e <main+0x18e>
 8000b0a:	b672      	cpsid	i
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <main+0x18c>
  hdma2d.Instance = DMA2D;
 8000b0e:	4868      	ldr	r0, [pc, #416]	@ (8000cb0 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b10:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b14:	4f67      	ldr	r7, [pc, #412]	@ (8000cb4 <main+0x334>)
  hdma2d.Init.OutputOffset = 0;
 8000b16:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000b1a:	e9c0 7200 	strd	r7, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b1e:	f007 ff6e 	bl	80089fe <HAL_DMA2D_Init>
 8000b22:	4607      	mov	r7, r0
 8000b24:	b108      	cbz	r0, 8000b2a <main+0x1aa>
 8000b26:	b672      	cpsid	i
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	4641      	mov	r1, r8
 8000b2e:	4862      	ldr	r0, [pc, #392]	@ (8000cb8 <main+0x338>)
 8000b30:	f008 fe48 	bl	80097c4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000b34:	2014      	movs	r0, #20
 8000b36:	f007 fe3b 	bl	80087b0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000b3a:	4641      	mov	r1, r8
 8000b3c:	462a      	mov	r2, r5
 8000b3e:	485e      	ldr	r0, [pc, #376]	@ (8000cb8 <main+0x338>)
 8000b40:	f008 fe40 	bl	80097c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000b44:	200a      	movs	r0, #10
 8000b46:	f007 fe33 	bl	80087b0 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b4a:	2224      	movs	r2, #36	@ 0x24
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	a819      	add	r0, sp, #100	@ 0x64
 8000b50:	f024 fb76 	bl	8025240 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b54:	2218      	movs	r2, #24
 8000b56:	4639      	mov	r1, r7
 8000b58:	a813      	add	r0, sp, #76	@ 0x4c
 8000b5a:	f024 fb71 	bl	8025240 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000b5e:	2234      	movs	r2, #52	@ 0x34
 8000b60:	4639      	mov	r1, r7
 8000b62:	a82f      	add	r0, sp, #188	@ 0xbc
 8000b64:	f024 fb6c 	bl	8025240 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000b68:	4639      	mov	r1, r7
 8000b6a:	222c      	movs	r2, #44	@ 0x2c
 8000b6c:	a822      	add	r0, sp, #136	@ 0x88
 8000b6e:	f024 fb67 	bl	8025240 <memset>
  hdsi.Instance = DSI;
 8000b72:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 8000cbc <main+0x33c>
 8000b76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b7a:	a910      	add	r1, sp, #64	@ 0x40
 8000b7c:	4640      	mov	r0, r8
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000b7e:	9512      	str	r5, [sp, #72]	@ 0x48
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b80:	e9c8 3700 	strd	r3, r7, [r8]
  PLLInit.PLLNDIV = 119;
 8000b84:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000b86:	e9c8 4502 	strd	r4, r5, [r8, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000b8a:	e9cd 3610 	strd	r3, r6, [sp, #64]	@ 0x40
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b8e:	f008 f883 	bl	8008c98 <HAL_DSI_Init>
 8000b92:	b108      	cbz	r0, 8000b98 <main+0x218>
 8000b94:	b672      	cpsid	i
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <main+0x216>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b98:	e9cd 5019 	strd	r5, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000b9c:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ba0:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ba4:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  HostTimeouts.BTATimeout = 0;
 8000ba8:	9021      	str	r0, [sp, #132]	@ 0x84
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000baa:	a919      	add	r1, sp, #100	@ 0x64
 8000bac:	4640      	mov	r0, r8
 8000bae:	f008 fadf 	bl	8009170 <HAL_DSI_ConfigHostTimeouts>
 8000bb2:	b108      	cbz	r0, 8000bb8 <main+0x238>
 8000bb4:	b672      	cpsid	i
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <main+0x236>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000bb8:	2321      	movs	r3, #33	@ 0x21
 8000bba:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000bbc:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000bbe:	a913      	add	r1, sp, #76	@ 0x4c
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000bc0:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 8000bc4:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000bc6:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000bca:	4640      	mov	r0, r8
  PhyTimings.DataLaneLP2HSTime = 25;
 8000bcc:	e9cd 6315 	strd	r6, r3, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000bd0:	f008 fa91 	bl	80090f6 <HAL_DSI_ConfigPhyTimer>
 8000bd4:	b108      	cbz	r0, 8000bda <main+0x25a>
 8000bd6:	b672      	cpsid	i
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <main+0x258>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4837      	ldr	r0, [pc, #220]	@ (8000cbc <main+0x33c>)
 8000bde:	f008 fa79 	bl	80090d4 <HAL_DSI_ConfigFlowControl>
 8000be2:	b108      	cbz	r0, 8000be8 <main+0x268>
 8000be4:	b672      	cpsid	i
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <main+0x266>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000be8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000bec:	4833      	ldr	r0, [pc, #204]	@ (8000cbc <main+0x33c>)
 8000bee:	f008 fc48 	bl	8009482 <HAL_DSI_SetLowPowerRXFilter>
 8000bf2:	4601      	mov	r1, r0
 8000bf4:	b108      	cbz	r0, 8000bfa <main+0x27a>
 8000bf6:	b672      	cpsid	i
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <main+0x278>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000bfa:	4830      	ldr	r0, [pc, #192]	@ (8000cbc <main+0x33c>)
 8000bfc:	f007 ffe9 	bl	8008bd2 <HAL_DSI_ConfigErrorMonitor>
 8000c00:	b108      	cbz	r0, 8000c06 <main+0x286>
 8000c02:	b672      	cpsid	i
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <main+0x284>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000c06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c0a:	f44f 7a80 	mov.w	sl, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c0e:	f44f 6b80 	mov.w	fp, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000c12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000c16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c1a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c1e:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000c22:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000c26:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000c2e:	f8cd 80ec 	str.w	r8, [sp, #236]	@ 0xec
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000c32:	e9cd b331 	strd	fp, r3, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000c36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c3a:	e9cd 2333 	strd	r2, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000c3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c42:	e9cd 1335 	strd	r1, r3, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c46:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c4a:	a92f      	add	r1, sp, #188	@ 0xbc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000c4c:	e9cd 0337 	strd	r0, r3, [sp, #220]	@ 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c54:	4819      	ldr	r0, [pc, #100]	@ (8000cbc <main+0x33c>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000c56:	e9cd 4339 	strd	r4, r3, [sp, #228]	@ 0xe4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c5a:	f008 fa07 	bl	800906c <HAL_DSI_ConfigCommand>
 8000c5e:	b108      	cbz	r0, 8000c64 <main+0x2e4>
 8000c60:	b672      	cpsid	i
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <main+0x2e2>
  CmdCfg.CommandSize = 400;
 8000c64:	2305      	movs	r3, #5
 8000c66:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000c6a:	2601      	movs	r6, #1
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c6c:	a922      	add	r1, sp, #136	@ 0x88
  CmdCfg.VirtualChannelID = 0;
 8000c6e:	9022      	str	r0, [sp, #136]	@ 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c70:	9029      	str	r0, [sp, #164]	@ 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000c72:	962c      	str	r6, [sp, #176]	@ 0xb0
  CmdCfg.CommandSize = 400;
 8000c74:	e9cd 3723 	strd	r3, r7, [sp, #140]	@ 0x8c
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000c78:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000c7a:	e9cd 3025 	strd	r3, r0, [sp, #148]	@ 0x94
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000c7e:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000c80:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000c84:	e9cd 302a 	strd	r3, r0, [sp, #168]	@ 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <main+0x33c>)
 8000c8a:	f008 f97d 	bl	8008f88 <HAL_DSI_ConfigAdaptedCommandMode>
 8000c8e:	4601      	mov	r1, r0
 8000c90:	b1b0      	cbz	r0, 8000cc0 <main+0x340>
 8000c92:	b672      	cpsid	i
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <main+0x314>
 8000c96:	bf00      	nop
 8000c98:	0300001b 	.word	0x0300001b
 8000c9c:	10040000 	.word	0x10040000
 8000ca0:	e000ed00 	.word	0xe000ed00
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	24000474 	.word	0x24000474
 8000cac:	52005000 	.word	0x52005000
 8000cb0:	240006b4 	.word	0x240006b4
 8000cb4:	52001000 	.word	0x52001000
 8000cb8:	58021800 	.word	0x58021800
 8000cbc:	24000698 	.word	0x24000698
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000cc0:	487a      	ldr	r0, [pc, #488]	@ (8000eac <main+0x52c>)
 8000cc2:	f008 f950 	bl	8008f66 <HAL_DSI_SetGenericVCID>
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	b108      	cbz	r0, 8000cce <main+0x34e>
 8000cca:	b672      	cpsid	i
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cce:	2234      	movs	r2, #52	@ 0x34
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	a822      	add	r0, sp, #136	@ 0x88
  hltdc.Instance = LTDC;
 8000cd4:	4d76      	ldr	r5, [pc, #472]	@ (8000eb0 <main+0x530>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cd6:	f024 fab3 	bl	8025240 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000cda:	f8df e220 	ldr.w	lr, [pc, #544]	@ 8000efc <main+0x57c>
 8000cde:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedVBP = 2;
 8000ce2:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.TotalHeigh = 483;
 8000ce6:	f240 1993 	movw	r9, #403	@ 0x193
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cea:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000cec:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000cee:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000cf2:	e9c5 e300 	strd	lr, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000cf6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.AccumulatedHBP = 2;
 8000cfa:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cfe:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000d02:	f44f 78c9 	mov.w	r8, #402	@ 0x192
 8000d06:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8000d0a:	e9c5 8309 	strd	r8, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000d0e:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000d12:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000d16:	e9c5 930b 	strd	r9, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d1a:	f00a f8bf 	bl	800ae9c <HAL_LTDC_Init>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	b108      	cbz	r0, 8000d26 <main+0x3a6>
 8000d22:	b672      	cpsid	i
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000d26:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d28:	f44f 6cc0 	mov.w	ip, #1536	@ 0x600
  pLayerCfg.WindowY1 = 480;
 8000d2c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000d30:	9024      	str	r0, [sp, #144]	@ 0x90
  pLayerCfg.Backcolor.Blue = 0;
 8000d32:	f8ad 00b8 	strh.w	r0, [sp, #184]	@ 0xb8
  pLayerCfg.Backcolor.Red = 0;
 8000d36:	f88d 00ba 	strb.w	r0, [sp, #186]	@ 0xba
  pLayerCfg.ImageHeight = 480;
 8000d3a:	932d      	str	r3, [sp, #180]	@ 0xb4
  pLayerCfg.Alpha0 = 0;
 8000d3c:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d40:	2107      	movs	r1, #7
 8000d42:	e9cd c129 	strd	ip, r1, [sp, #164]	@ 0xa4
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000d46:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000d4a:	e9cd 0722 	strd	r0, r7, [sp, #136]	@ 0x88
  pLayerCfg.ImageWidth = 400;
 8000d4e:	e9cd 172b 	strd	r1, r7, [sp, #172]	@ 0xac
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d52:	4628      	mov	r0, r5
 8000d54:	a922      	add	r1, sp, #136	@ 0x88
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000d56:	e9cd 3625 	strd	r3, r6, [sp, #148]	@ 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d5a:	f00a f954 	bl	800b006 <HAL_LTDC_ConfigLayer>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	b108      	cbz	r0, 8000d66 <main+0x3e6>
 8000d62:	b672      	cpsid	i
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000d66:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000d68:	4850      	ldr	r0, [pc, #320]	@ (8000eac <main+0x52c>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000d6a:	6993      	ldr	r3, [r2, #24]
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000d72:	f008 fa63 	bl	800923c <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000d76:	494f      	ldr	r1, [pc, #316]	@ (8000eb4 <main+0x534>)
  IOCtx.GetTick     = BSP_GetTick;
 8000d78:	4b4f      	ldr	r3, [pc, #316]	@ (8000eb8 <main+0x538>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000d7a:	4850      	ldr	r0, [pc, #320]	@ (8000ebc <main+0x53c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000d7c:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000d7e:	4b50      	ldr	r3, [pc, #320]	@ (8000ec0 <main+0x540>)
  IOCtx.Address     = 0;
 8000d80:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000d82:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000d84:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec4 <main+0x544>)
 8000d86:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000d88:	f006 fe12 	bl	80079b0 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000d8c:	4632      	mov	r2, r6
 8000d8e:	4621      	mov	r1, r4
 8000d90:	484a      	ldr	r0, [pc, #296]	@ (8000ebc <main+0x53c>)
 8000d92:	f006 fa7d 	bl	8007290 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000d96:	2328      	movs	r3, #40	@ 0x28
 8000d98:	2215      	movs	r2, #21
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	4843      	ldr	r0, [pc, #268]	@ (8000eac <main+0x52c>)
 8000d9e:	9400      	str	r4, [sp, #0]
 8000da0:	f008 fa7f 	bl	80092a2 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000da4:	a92f      	add	r1, sp, #188	@ 0xbc
 8000da6:	4841      	ldr	r0, [pc, #260]	@ (8000eac <main+0x52c>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000da8:	9439      	str	r4, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000daa:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000dae:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000db2:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000db6:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000dba:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000dbe:	f008 f955 	bl	800906c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000dc2:	4622      	mov	r2, r4
 8000dc4:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000dc8:	4628      	mov	r0, r5
 8000dca:	f00a f949 	bl	800b060 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000dce:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000dd0:	483d      	ldr	r0, [pc, #244]	@ (8000ec8 <main+0x548>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000dd2:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000dd4:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ecc <main+0x54c>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000dde:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000de0:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000de2:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000de6:	f007 fda9 	bl	800893c <HAL_CRC_Init>
 8000dea:	b108      	cbz	r0, 8000df0 <main+0x470>
 8000dec:	b672      	cpsid	i
  while (1)
 8000dee:	e7fe      	b.n	8000dee <main+0x46e>
  hjpeg.Instance = JPEG;
 8000df0:	4837      	ldr	r0, [pc, #220]	@ (8000ed0 <main+0x550>)
 8000df2:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <main+0x554>)
 8000df4:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000df6:	f009 fa3f 	bl	800a278 <HAL_JPEG_Init>
 8000dfa:	b108      	cbz	r0, 8000e00 <main+0x480>
 8000dfc:	b672      	cpsid	i
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <main+0x47e>
  hspi5.Instance = SPI5;
 8000e00:	4835      	ldr	r0, [pc, #212]	@ (8000ed8 <main+0x558>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e06:	4a35      	ldr	r2, [pc, #212]	@ (8000edc <main+0x55c>)
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e08:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e0c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e10:	e9c0 2300 	strd	r2, r3, [r0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e14:	2307      	movs	r3, #7
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e16:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e1a:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e1e:	e9c0 4206 	strd	r4, r2, [r0, #24]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e22:	2300      	movs	r3, #0
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e28:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi5.Init.CRCPolynomial = 0x0;
 8000e30:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e34:	e9c0 230d 	strd	r2, r3, [r0, #52]	@ 0x34
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e38:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e3c:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e40:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e44:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e48:	f00c fa34 	bl	800d2b4 <HAL_SPI_Init>
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	b108      	cbz	r0, 8000e54 <main+0x4d4>
 8000e50:	b672      	cpsid	i
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <main+0x4d2>
  MX_TouchGFX_Init();
 8000e54:	f000 fe1e 	bl	8001a94 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000e58:	f000 fe1b 	bl	8001a92 <MX_TouchGFX_PreOSInit>
  HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);  // CS desactivado por defecto
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e62:	481f      	ldr	r0, [pc, #124]	@ (8000ee0 <main+0x560>)
 8000e64:	f008 fcae 	bl	80097c4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000e68:	2064      	movs	r0, #100	@ 0x64
 8000e6a:	f007 fca1 	bl	80087b0 <HAL_Delay>
  MAX7219_ResetAll();  // Inicializa todas las matrices
 8000e6e:	f7ff fd05 	bl	800087c <MAX7219_ResetAll>
  HAL_Delay(50);
 8000e72:	2032      	movs	r0, #50	@ 0x32
 8000e74:	f007 fc9c 	bl	80087b0 <HAL_Delay>
  HAL_Delay(2000);
 8000e78:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e7c:	f007 fc98 	bl	80087b0 <HAL_Delay>
  MAX7219_ClearAll();
 8000e80:	f7ff fc94 	bl	80007ac <MAX7219_ClearAll>
  osKernelInitialize();
 8000e84:	f00c fe36 	bl	800daf4 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000e88:	4a16      	ldr	r2, [pc, #88]	@ (8000ee4 <main+0x564>)
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	4816      	ldr	r0, [pc, #88]	@ (8000ee8 <main+0x568>)
 8000e8e:	f00c fe5d 	bl	800db4c <osThreadNew>
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <main+0x56c>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000e94:	4a16      	ldr	r2, [pc, #88]	@ (8000ef0 <main+0x570>)
 8000e96:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000e98:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000e9a:	4816      	ldr	r0, [pc, #88]	@ (8000ef4 <main+0x574>)
 8000e9c:	f00c fe56 	bl	800db4c <osThreadNew>
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <main+0x578>)
 8000ea2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000ea4:	f00c fe38 	bl	800db18 <osKernelStart>
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <main+0x528>
 8000eaa:	bf00      	nop
 8000eac:	24000698 	.word	0x24000698
 8000eb0:	240004c0 	.word	0x240004c0
 8000eb4:	24000380 	.word	0x24000380
 8000eb8:	08007d91 	.word	0x08007d91
 8000ebc:	24000390 	.word	0x24000390
 8000ec0:	0800203d 	.word	0x0800203d
 8000ec4:	08002075 	.word	0x08002075
 8000ec8:	2400071c 	.word	0x2400071c
 8000ecc:	58024c00 	.word	0x58024c00
 8000ed0:	24000640 	.word	0x24000640
 8000ed4:	52003000 	.word	0x52003000
 8000ed8:	240003ec 	.word	0x240003ec
 8000edc:	40015000 	.word	0x40015000
 8000ee0:	58022400 	.word	0x58022400
 8000ee4:	08025e04 	.word	0x08025e04
 8000ee8:	08001aa3 	.word	0x08001aa3
 8000eec:	240003b4 	.word	0x240003b4
 8000ef0:	08025de0 	.word	0x08025de0
 8000ef4:	08003bdd 	.word	0x08003bdd
 8000ef8:	240003b0 	.word	0x240003b0
 8000efc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	2214      	movs	r2, #20
 8000f02:	2100      	movs	r1, #0
 8000f04:	a82f      	add	r0, sp, #188	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f024 f99a 	bl	8025240 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f0c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8000f10:	2200      	movs	r2, #0
 8000f12:	f641 3108 	movw	r1, #6920	@ 0x1b08
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8000f1a:	4896      	ldr	r0, [pc, #600]	@ (8001174 <main+0x7f4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	f04f 0b00 	mov.w	fp, #0
 8000f20:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f22:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2702      	movs	r7, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f28:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	f44f 7980 	mov.w	r9, #256	@ 0x100
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000f30:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f34:	f44f 6a00 	mov.w	sl, #2048	@ 0x800
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3c:	9305      	str	r3, [sp, #20]
 8000f3e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f4c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	9306      	str	r3, [sp, #24]
 8000f56:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f58:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f60:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f64:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f6c:	9307      	str	r3, [sp, #28]
 8000f6e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f7c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	9308      	str	r3, [sp, #32]
 8000f86:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f88:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f90:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000f94:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8000fb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fb8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fc4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000fdc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	930c      	str	r3, [sp, #48]	@ 0x30
 8000fe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000ff4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	930d      	str	r3, [sp, #52]	@ 0x34
 8000ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001000:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001004:	f043 0320 	orr.w	r3, r3, #32
 8001008:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800100c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	930e      	str	r3, [sp, #56]	@ 0x38
 8001016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001018:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800101c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001020:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001024:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800102c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800102e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|GPIO_PIN_11|FRAME_RATE_Pin|RENDER_TIME_Pin
 8001030:	f008 fbc8 	bl	80097c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2108      	movs	r1, #8
 8001038:	484f      	ldr	r0, [pc, #316]	@ (8001178 <main+0x7f8>)
 800103a:	f008 fbc3 	bl	80097c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001044:	484d      	ldr	r0, [pc, #308]	@ (800117c <main+0x7fc>)
 8001046:	f008 fbbd 	bl	80097c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800104e:	a92f      	add	r1, sp, #188	@ 0xbc
 8001050:	4848      	ldr	r0, [pc, #288]	@ (8001174 <main+0x7f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	e9cd 352f 	strd	r3, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	e9cd b631 	strd	fp, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800105a:	f008 fa29 	bl	80094b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	a92f      	add	r1, sp, #188	@ 0xbc
 8001060:	4847      	ldr	r0, [pc, #284]	@ (8001180 <main+0x800>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001062:	f8cd b0cc 	str.w	fp, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	e9cd 972f 	strd	r9, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd bb31 	strd	fp, fp, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f008 fa1f 	bl	80094b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001072:	a92f      	add	r1, sp, #188	@ 0xbc
 8001074:	4840      	ldr	r0, [pc, #256]	@ (8001178 <main+0x7f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	e9cd 852f 	strd	r8, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	e9cd 5631 	strd	r5, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800107e:	f008 fa17 	bl	80094b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001082:	a92f      	add	r1, sp, #188	@ 0xbc
 8001084:	483d      	ldr	r0, [pc, #244]	@ (800117c <main+0x7fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	e9cd 952f 	strd	r9, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	e9cd b631 	strd	fp, r6, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800108e:	f008 fa0f 	bl	80094b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001092:	a92f      	add	r1, sp, #188	@ 0xbc
 8001094:	4837      	ldr	r0, [pc, #220]	@ (8001174 <main+0x7f4>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001096:	f04f 0940 	mov.w	r9, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	e9cd a52f 	strd	sl, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	e9cd bb31 	strd	fp, fp, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010a2:	f008 fa05 	bl	80094b0 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010a6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80010aa:	465a      	mov	r2, fp
 80010ac:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010ae:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80010b0:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010b2:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80010b6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010ba:	2404      	movs	r4, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 80010bc:	402b      	ands	r3, r5
 80010be:	9304      	str	r3, [sp, #16]
 80010c0:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80010c2:	f007 fb9f 	bl	8008804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80010c6:	207a      	movs	r0, #122	@ 0x7a
 80010c8:	f007 fbce 	bl	8008868 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80010cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001184 <main+0x804>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010ce:	482e      	ldr	r0, [pc, #184]	@ (8001188 <main+0x808>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010d0:	a92f      	add	r1, sp, #188	@ 0xbc
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	6013      	str	r3, [r2, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010da:	4b2c      	ldr	r3, [pc, #176]	@ (800118c <main+0x80c>)
  SdramTiming.LoadToActiveDelay = 2;
 80010dc:	972f      	str	r7, [sp, #188]	@ 0xbc
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80010de:	6085      	str	r5, [r0, #8]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80010e0:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010e4:	2320      	movs	r3, #32
 80010e6:	e9c0 4303 	strd	r4, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010ea:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80010ee:	e9c0 9305 	strd	r9, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010f6:	e9c0 3b09 	strd	r3, fp, [r0, #36]	@ 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010fa:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 80010fc:	e9cd 7734 	strd	r7, r7, [sp, #208]	@ 0xd0
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001100:	e9c0 ba07 	strd	fp, sl, [r0, #28]
  SdramTiming.SelfRefreshTime = 4;
 8001104:	e9cd 3430 	strd	r3, r4, [sp, #192]	@ 0xc0
  SdramTiming.WriteRecoveryTime = 3;
 8001108:	e9cd 3632 	strd	r3, r6, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800110c:	f00c f80e 	bl	800d12c <HAL_SDRAM_Init>
 8001110:	4607      	mov	r7, r0
 8001112:	2800      	cmp	r0, #0
 8001114:	f47f acd7 	bne.w	8000ac6 <main+0x146>
  BSP_SDRAM_DeInit(0);
 8001118:	f007 f860 	bl	80081dc <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800111c:	4638      	mov	r0, r7
 800111e:	f007 f8ab 	bl	8008278 <BSP_SDRAM_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2800      	cmp	r0, #0
 8001126:	f43f acd0 	beq.w	8000aca <main+0x14a>
 800112a:	b672      	cpsid	i
  while (1)
 800112c:	e7fe      	b.n	800112c <main+0x7ac>
  HAL_Init();
 800112e:	f007 faff 	bl	8008730 <HAL_Init>
  SystemClock_Config();
 8001132:	f7ff fbc3 	bl	80008bc <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8001136:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 800113a:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 800113c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001140:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001144:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800114c:	9303      	str	r3, [sp, #12]
 800114e:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001150:	f008 fb46 	bl	80097e0 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8001154:	4621      	mov	r1, r4
 8001156:	4620      	mov	r0, r4
 8001158:	f008 fb50 	bl	80097fc <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800115c:	4c0c      	ldr	r4, [pc, #48]	@ (8001190 <main+0x810>)
timeout = 0xFFFF;
 800115e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	0412      	lsls	r2, r2, #16
 8001166:	f53f aecb 	bmi.w	8000f00 <main+0x580>
 800116a:	3b01      	subs	r3, #1
 800116c:	d2f9      	bcs.n	8001162 <main+0x7e2>
 800116e:	b672      	cpsid	i
  while (1)
 8001170:	e7fe      	b.n	8001170 <main+0x7f0>
 8001172:	bf00      	nop
 8001174:	58022400 	.word	0x58022400
 8001178:	58021800 	.word	0x58021800
 800117c:	58021400 	.word	0x58021400
 8001180:	58020000 	.word	0x58020000
 8001184:	52004000 	.word	0x52004000
 8001188:	240003b8 	.word	0x240003b8
 800118c:	52004140 	.word	0x52004140
 8001190:	58024400 	.word	0x58024400

08001194 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001194:	6802      	ldr	r2, [r0, #0]
 8001196:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001198:	429a      	cmp	r2, r3
 800119a:	d101      	bne.n	80011a0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800119c:	f007 baf6 	b.w	800878c <HAL_IncTick>
}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40001000 	.word	0x40001000

080011a8 <Error_Handler>:
 80011a8:	b672      	cpsid	i
  while (1)
 80011aa:	e7fe      	b.n	80011aa <Error_Handler+0x2>

080011ac <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_MspInit+0x2c>)
{
 80011ae:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011b0:	210f      	movs	r1, #15
 80011b2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80011ba:	f042 0202 	orr.w	r2, r2, #2
 80011be:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011c2:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d0:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d2:	f007 bb17 	b.w	8008804 <HAL_NVIC_SetPriority>
 80011d6:	bf00      	nop
 80011d8:	58024400 	.word	0x58024400

080011dc <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80011dc:	6802      	ldr	r2, [r0, #0]
{
 80011de:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <HAL_CRC_MspInit+0x2c>)
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d10d      	bne.n	8001202 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011e6:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80011ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80011ee:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80011f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001202:	b002      	add	sp, #8
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	58024c00 	.word	0x58024c00

0800120c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_DMA2D_MspInit+0x40>)
{
 800120e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001210:	6802      	ldr	r2, [r0, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d117      	bne.n	8001246 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001218:	2107      	movs	r1, #7
 800121a:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800121c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001220:	f042 0210 	orr.w	r2, r2, #16
 8001224:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001228:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800122a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001236:	f007 fae5 	bl	8008804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800123a:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800123c:	b003      	add	sp, #12
 800123e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001242:	f007 bb11 	b.w	8008868 <HAL_NVIC_EnableIRQ>
}
 8001246:	b003      	add	sp, #12
 8001248:	f85d fb04 	ldr.w	pc, [sp], #4
 800124c:	52001000 	.word	0x52001000
 8001250:	58024400 	.word	0x58024400

08001254 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001254:	b510      	push	{r4, lr}
 8001256:	b0ba      	sub	sp, #232	@ 0xe8
 8001258:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	2214      	movs	r2, #20
 800125c:	2100      	movs	r1, #0
 800125e:	a803      	add	r0, sp, #12
 8001260:	f023 ffee 	bl	8025240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	22c8      	movs	r2, #200	@ 0xc8
 8001266:	2100      	movs	r1, #0
 8001268:	a808      	add	r0, sp, #32
 800126a:	f023 ffe9 	bl	8025240 <memset>
  if(hdsi->Instance==DSI)
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001274:	d138      	bne.n	80012e8 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001276:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800127a:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800127e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001282:	f00b fa45 	bl	800c710 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	b108      	cbz	r0, 800128c <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001288:	f7ff ff8e 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001290:	a903      	add	r1, sp, #12
 8001292:	4817      	ldr	r0, [pc, #92]	@ (80012f0 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001294:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001298:	f042 0210 	orr.w	r2, r2, #16
 800129c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80012a0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80012a4:	f002 0210 	and.w	r2, r2, #16
 80012a8:	9201      	str	r2, [sp, #4]
 80012aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80012cc:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80012d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012d4:	f008 f8ec 	bl	80094b0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 80012d8:	207b      	movs	r0, #123	@ 0x7b
 80012da:	4622      	mov	r2, r4
 80012dc:	2107      	movs	r1, #7
 80012de:	f007 fa91 	bl	8008804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80012e2:	207b      	movs	r0, #123	@ 0x7b
 80012e4:	f007 fac0 	bl	8008868 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 80012e8:	b03a      	add	sp, #232	@ 0xe8
 80012ea:	bd10      	pop	{r4, pc}
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58022400 	.word	0x58022400

080012f4 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80012f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80012f6:	4b3c      	ldr	r3, [pc, #240]	@ (80013e8 <HAL_JPEG_MspInit+0xf4>)
{
 80012f8:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80012fa:	6802      	ldr	r2, [r0, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d170      	bne.n	80013e2 <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001300:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001302:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001304:	4c3a      	ldr	r4, [pc, #232]	@ (80013f0 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001306:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 800130a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800130e:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80013fc <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001312:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001314:	f042 0220 	orr.w	r2, r2, #32
 8001318:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800131c:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800131e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800132a:	2311      	movs	r3, #17
 800132c:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001330:	2300      	movs	r3, #0
 8001332:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001336:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800133a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800133c:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800133e:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001342:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001346:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800134a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800134e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001352:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001356:	f009 feee 	bl	800b136 <HAL_MDMA_Init>
 800135a:	b108      	cbz	r0, 8001360 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 800135c:	f7ff ff24 	bl	80011a8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001360:	2200      	movs	r2, #0
 8001362:	4823      	ldr	r0, [pc, #140]	@ (80013f0 <HAL_JPEG_MspInit+0xfc>)
 8001364:	4611      	mov	r1, r2
 8001366:	f009 ff74 	bl	800b252 <HAL_MDMA_ConfigPostRequestMask>
 800136a:	b108      	cbz	r0, 8001370 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 800136c:	f7ff ff1c 	bl	80011a8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001370:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001372:	2313      	movs	r3, #19
 8001374:	4a1f      	ldr	r2, [pc, #124]	@ (80013f4 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001376:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001378:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 800137a:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800137e:	4c1e      	ldr	r4, [pc, #120]	@ (80013f8 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 8001380:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001384:	2300      	movs	r3, #0
 8001386:	22c0      	movs	r2, #192	@ 0xc0
 8001388:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800138c:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800138e:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001390:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001394:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001398:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 800139c:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80013a0:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80013a4:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80013a6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80013aa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80013ae:	f009 fec2 	bl	800b136 <HAL_MDMA_Init>
 80013b2:	b108      	cbz	r0, 80013b8 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 80013b4:	f7ff fef8 	bl	80011a8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80013b8:	2200      	movs	r2, #0
 80013ba:	480f      	ldr	r0, [pc, #60]	@ (80013f8 <HAL_JPEG_MspInit+0x104>)
 80013bc:	4611      	mov	r1, r2
 80013be:	f009 ff48 	bl	800b252 <HAL_MDMA_ConfigPostRequestMask>
 80013c2:	b108      	cbz	r0, 80013c8 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 80013c4:	f7ff fef0 	bl	80011a8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80013c8:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2105      	movs	r1, #5
 80013ce:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80013d0:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80013d2:	f007 fa17 	bl	8008804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80013d6:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 80013d8:	b003      	add	sp, #12
 80013da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80013de:	f007 ba43 	b.w	8008868 <HAL_NVIC_EnableIRQ>
}
 80013e2:	b003      	add	sp, #12
 80013e4:	bd30      	pop	{r4, r5, pc}
 80013e6:	bf00      	nop
 80013e8:	52003000 	.word	0x52003000
 80013ec:	58024400 	.word	0x58024400
 80013f0:	240005d4 	.word	0x240005d4
 80013f4:	520001c0 	.word	0x520001c0
 80013f8:	24000568 	.word	0x24000568
 80013fc:	52000200 	.word	0x52000200

08001400 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001400:	b510      	push	{r4, lr}
 8001402:	b0b4      	sub	sp, #208	@ 0xd0
 8001404:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001406:	22c8      	movs	r2, #200	@ 0xc8
 8001408:	2100      	movs	r1, #0
 800140a:	a802      	add	r0, sp, #8
 800140c:	f023 ff18 	bl	8025240 <memset>
  if(hltdc->Instance==LTDC)
 8001410:	6822      	ldr	r2, [r4, #0]
 8001412:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_LTDC_MspInit+0x74>)
 8001414:	429a      	cmp	r2, r3
 8001416:	d12b      	bne.n	8001470 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001418:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800141c:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800141e:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001420:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001422:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001426:	23a1      	movs	r3, #161	@ 0xa1
 8001428:	2205      	movs	r2, #5
 800142a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800142e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001430:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001434:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001438:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143c:	f00b f968 	bl	800c710 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	b108      	cbz	r0, 8001446 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001442:	f7ff feb1 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001448:	2058      	movs	r0, #88	@ 0x58
 800144a:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 800144c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001450:	f042 0208 	orr.w	r2, r2, #8
 8001454:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001458:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 800145a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001466:	f007 f9cd 	bl	8008804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800146a:	2058      	movs	r0, #88	@ 0x58
 800146c:	f007 f9fc 	bl	8008868 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001470:	b034      	add	sp, #208	@ 0xd0
 8001472:	bd10      	pop	{r4, pc}
 8001474:	50001000 	.word	0x50001000
 8001478:	58024400 	.word	0x58024400

0800147c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	b0bf      	sub	sp, #252	@ 0xfc
 8001480:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	2214      	movs	r2, #20
 8001484:	2100      	movs	r1, #0
 8001486:	a807      	add	r0, sp, #28
 8001488:	f023 feda 	bl	8025240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	22c8      	movs	r2, #200	@ 0xc8
 800148e:	2100      	movs	r1, #0
 8001490:	a80c      	add	r0, sp, #48	@ 0x30
 8001492:	f023 fed5 	bl	8025240 <memset>
  if(hqspi->Instance==QUADSPI)
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <HAL_QSPI_MspInit+0x16c>)
 800149a:	429a      	cmp	r2, r3
 800149c:	f040 80a1 	bne.w	80015e2 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014a4:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ac:	f00b f930 	bl	800c710 <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	b108      	cbz	r0, 80014b6 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80014b2:	f7ff fe79 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014b6:	4b4d      	ldr	r3, [pc, #308]	@ (80015ec <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014bc:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014be:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c2:	a907      	add	r1, sp, #28
 80014c4:	484a      	ldr	r0, [pc, #296]	@ (80015f0 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014c6:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 80014c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014cc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80014d0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80014d4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014e4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80014e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014ec:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80014f0:	9202      	str	r2, [sp, #8]
 80014f2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014f8:	f042 0220 	orr.w	r2, r2, #32
 80014fc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001500:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001504:	f002 0220 	and.w	r2, r2, #32
 8001508:	9203      	str	r2, [sp, #12]
 800150a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800150c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001510:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001514:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001518:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800151c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001520:	9204      	str	r2, [sp, #16]
 8001522:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001528:	f042 0202 	orr.w	r2, r2, #2
 800152c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001530:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001534:	f002 0202 	and.w	r2, r2, #2
 8001538:	9205      	str	r2, [sp, #20]
 800153a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001540:	f042 0208 	orr.w	r2, r2, #8
 8001544:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	9306      	str	r3, [sp, #24]
 8001552:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001558:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001560:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001562:	f007 ffa5 	bl	80094b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001566:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001568:	a907      	add	r1, sp, #28
 800156a:	4821      	ldr	r0, [pc, #132]	@ (80015f0 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800156c:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001576:	f007 ff9b 	bl	80094b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800157c:	a907      	add	r1, sp, #28
 800157e:	481d      	ldr	r0, [pc, #116]	@ (80015f4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001580:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158a:	f007 ff91 	bl	80094b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800158e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001592:	a907      	add	r1, sp, #28
 8001594:	4817      	ldr	r0, [pc, #92]	@ (80015f4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001596:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a0:	f007 ff86 	bl	80094b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a4:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a6:	a907      	add	r1, sp, #28
 80015a8:	4813      	ldr	r0, [pc, #76]	@ (80015f8 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015aa:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015b4:	f007 ff7c 	bl	80094b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015b8:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	a907      	add	r1, sp, #28
 80015bc:	480f      	ldr	r0, [pc, #60]	@ (80015fc <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015be:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f007 ff72 	bl	80094b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d0:	a907      	add	r1, sp, #28
 80015d2:	480b      	ldr	r0, [pc, #44]	@ (8001600 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015d4:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015de:	f007 ff67 	bl	80094b0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80015e2:	b03f      	add	sp, #252	@ 0xfc
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	52005000 	.word	0x52005000
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58021800 	.word	0x58021800
 80015f4:	58021400 	.word	0x58021400
 80015f8:	58021c00 	.word	0x58021c00
 80015fc:	58020400 	.word	0x58020400
 8001600:	58020c00 	.word	0x58020c00

08001604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	b0ba      	sub	sp, #232	@ 0xe8
 8001608:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	2214      	movs	r2, #20
 800160c:	2100      	movs	r1, #0
 800160e:	a803      	add	r0, sp, #12
 8001610:	f023 fe16 	bl	8025240 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001614:	22c8      	movs	r2, #200	@ 0xc8
 8001616:	2100      	movs	r1, #0
 8001618:	a808      	add	r0, sp, #32
 800161a:	f023 fe11 	bl	8025240 <memset>
  if(hspi->Instance==SPI5)
 800161e:	6822      	ldr	r2, [r4, #0]
 8001620:	4b26      	ldr	r3, [pc, #152]	@ (80016bc <HAL_SPI_MspInit+0xb8>)
 8001622:	429a      	cmp	r2, r3
 8001624:	d147      	bne.n	80016b6 <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8001626:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162a:	2300      	movs	r3, #0
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800162e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001632:	f00b f86d 	bl	800c710 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	b108      	cbz	r0, 800163c <HAL_SPI_MspInit+0x38>
    {
      Error_Handler();
 8001638:	f7ff fdb6 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800163c:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_SPI_MspInit+0xbc>)
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001642:	2505      	movs	r5, #5
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001644:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001648:	a903      	add	r1, sp, #12
 800164a:	481e      	ldr	r0, [pc, #120]	@ (80016c4 <HAL_SPI_MspInit+0xc0>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 800164c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001650:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001654:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001658:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001660:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001664:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001668:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800166c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001670:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001674:	9201      	str	r2, [sp, #4]
 8001676:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001678:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800167c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001680:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001688:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800168a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800169c:	f007 ff08 	bl	80094b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016a4:	a903      	add	r1, sp, #12
 80016a6:	4808      	ldr	r0, [pc, #32]	@ (80016c8 <HAL_SPI_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016a8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016b2:	f007 fefd 	bl	80094b0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80016b6:	b03a      	add	sp, #232	@ 0xe8
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
 80016ba:	bf00      	nop
 80016bc:	40015000 	.word	0x40015000
 80016c0:	58024400 	.word	0x58024400
 80016c4:	58022800 	.word	0x58022800
 80016c8:	58022400 	.word	0x58022400

080016cc <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016d0:	2100      	movs	r1, #0
 80016d2:	2214      	movs	r2, #20
 80016d4:	a801      	add	r0, sp, #4
 80016d6:	f023 fdb3 	bl	8025240 <memset>
  if (FMC_Initialized) {
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <HAL_SDRAM_MspInit+0x10c>)
 80016dc:	6819      	ldr	r1, [r3, #0]
 80016de:	2900      	cmp	r1, #0
 80016e0:	d177      	bne.n	80017d2 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80016e2:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80016e6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	22c0      	movs	r2, #192	@ 0xc0
 80016ea:	f023 fda9 	bl	8025240 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80016ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016f2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f4:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80016f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fa:	f00b f809 	bl	800c710 <HAL_RCCEx_PeriphCLKConfig>
 80016fe:	b108      	cbz	r0, 8001704 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001700:	f7ff fd52 	bl	80011a8 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001704:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2600      	movs	r6, #0
 800170a:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800170c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001710:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001712:	a901      	add	r1, sp, #4
 8001714:	4832      	ldr	r0, [pc, #200]	@ (80017e0 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001716:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800171a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800171e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001722:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001738:	f007 feba 	bl	80094b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800173c:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	a901      	add	r1, sp, #4
 8001740:	4828      	ldr	r0, [pc, #160]	@ (80017e4 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001742:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f007 feb0 	bl	80094b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001750:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001754:	a901      	add	r1, sp, #4
 8001756:	4824      	ldr	r0, [pc, #144]	@ (80017e8 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001758:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001762:	f007 fea5 	bl	80094b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001766:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800176a:	a901      	add	r1, sp, #4
 800176c:	481f      	ldr	r0, [pc, #124]	@ (80017ec <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800176e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001778:	f007 fe9a 	bl	80094b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800177c:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001780:	a901      	add	r1, sp, #4
 8001782:	481b      	ldr	r0, [pc, #108]	@ (80017f0 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001784:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178e:	f007 fe8f 	bl	80094b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001792:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001796:	a901      	add	r1, sp, #4
 8001798:	4816      	ldr	r0, [pc, #88]	@ (80017f4 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a4:	f007 fe84 	bl	80094b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80017a8:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ac:	a901      	add	r1, sp, #4
 80017ae:	4812      	ldr	r0, [pc, #72]	@ (80017f8 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ba:	f007 fe79 	bl	80094b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017be:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	a901      	add	r1, sp, #4
 80017c2:	480e      	ldr	r0, [pc, #56]	@ (80017fc <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ce:	f007 fe6f 	bl	80094b0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80017d2:	b039      	add	sp, #228	@ 0xe4
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d6:	bf00      	nop
 80017d8:	24000744 	.word	0x24000744
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58022000 	.word	0x58022000
 80017e4:	58020400 	.word	0x58020400
 80017e8:	58021000 	.word	0x58021000
 80017ec:	58021c00 	.word	0x58021c00
 80017f0:	58021800 	.word	0x58021800
 80017f4:	58020c00 	.word	0x58020c00
 80017f8:	58021400 	.word	0x58021400
 80017fc:	58020800 	.word	0x58020800

08001800 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001800:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <HAL_SDRAM_MspDeInit+0x6c>)
 8001802:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001804:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 8001806:	bb82      	cbnz	r2, 800186a <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001808:	4a19      	ldr	r2, [pc, #100]	@ (8001870 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 800180a:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 800180c:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001810:	4818      	ldr	r0, [pc, #96]	@ (8001874 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 8001812:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001814:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800181c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001820:	f007 ff2e 	bl	8009680 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001824:	2160      	movs	r1, #96	@ 0x60
 8001826:	4814      	ldr	r0, [pc, #80]	@ (8001878 <HAL_SDRAM_MspDeInit+0x78>)
 8001828:	f007 ff2a 	bl	8009680 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800182c:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001830:	4812      	ldr	r0, [pc, #72]	@ (800187c <HAL_SDRAM_MspDeInit+0x7c>)
 8001832:	f007 ff25 	bl	8009680 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001836:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800183a:	4811      	ldr	r0, [pc, #68]	@ (8001880 <HAL_SDRAM_MspDeInit+0x80>)
 800183c:	f007 ff20 	bl	8009680 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001840:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001844:	480f      	ldr	r0, [pc, #60]	@ (8001884 <HAL_SDRAM_MspDeInit+0x84>)
 8001846:	f007 ff1b 	bl	8009680 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800184a:	f24c 7103 	movw	r1, #50947	@ 0xc703
 800184e:	480e      	ldr	r0, [pc, #56]	@ (8001888 <HAL_SDRAM_MspDeInit+0x88>)
 8001850:	f007 ff16 	bl	8009680 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001854:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <HAL_SDRAM_MspDeInit+0x8c>)
 800185a:	f007 ff11 	bl	8009680 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800185e:	4621      	mov	r1, r4
 8001860:	480b      	ldr	r0, [pc, #44]	@ (8001890 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001866:	f007 bf0b 	b.w	8009680 <HAL_GPIO_DeInit>
}
 800186a:	bd10      	pop	{r4, pc}
 800186c:	24000740 	.word	0x24000740
 8001870:	58024400 	.word	0x58024400
 8001874:	58022000 	.word	0x58022000
 8001878:	58020400 	.word	0x58020400
 800187c:	58021000 	.word	0x58021000
 8001880:	58021c00 	.word	0x58021c00
 8001884:	58021800 	.word	0x58021800
 8001888:	58020c00 	.word	0x58020c00
 800188c:	58021400 	.word	0x58021400
 8001890:	58020800 	.word	0x58020800

08001894 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001894:	280f      	cmp	r0, #15
{
 8001896:	b510      	push	{r4, lr}
 8001898:	4604      	mov	r4, r0
 800189a:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189c:	d902      	bls.n	80018a4 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800189e:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80018a0:	b00a      	add	sp, #40	@ 0x28
 80018a2:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018a4:	4601      	mov	r1, r0
 80018a6:	2200      	movs	r2, #0
 80018a8:	2036      	movs	r0, #54	@ 0x36
 80018aa:	f006 ffab 	bl	8008804 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ae:	2036      	movs	r0, #54	@ 0x36
 80018b0:	f006 ffda 	bl	8008868 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018b6:	4669      	mov	r1, sp
 80018b8:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80018ba:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <HAL_InitTick+0x88>)
 80018be:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80018c2:	f042 0210 	orr.w	r2, r2, #16
 80018c6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80018ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d6:	f00a fe01 	bl	800c4dc <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018da:	9b07      	ldr	r3, [sp, #28]
 80018dc:	b9c3      	cbnz	r3, 8001910 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018de:	f00a fdd9 	bl	800c494 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80018e2:	4c0f      	ldr	r4, [pc, #60]	@ (8001920 <HAL_InitTick+0x8c>)
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <HAL_InitTick+0x90>)
 80018e6:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018e8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80018ec:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_InitTick+0x94>)
 80018f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80018f4:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80018f6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80018f8:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018fa:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80018fc:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001900:	f00c f81e 	bl	800d940 <HAL_TIM_Base_Init>
 8001904:	2800      	cmp	r0, #0
 8001906:	d1ca      	bne.n	800189e <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001908:	4620      	mov	r0, r4
 800190a:	f00b fecd 	bl	800d6a8 <HAL_TIM_Base_Start_IT>
 800190e:	e7c7      	b.n	80018a0 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001910:	f00a fdc0 	bl	800c494 <HAL_RCC_GetPCLK1Freq>
 8001914:	0040      	lsls	r0, r0, #1
 8001916:	e7e4      	b.n	80018e2 <HAL_InitTick+0x4e>
 8001918:	24000074 	.word	0x24000074
 800191c:	58024400 	.word	0x58024400
 8001920:	24000748 	.word	0x24000748
 8001924:	40001000 	.word	0x40001000
 8001928:	000f4240 	.word	0x000f4240

0800192c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler>

0800192e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler>

08001930 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler>

08001932 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler>

08001934 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler>

08001936 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	4770      	bx	lr

08001938 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001938:	4801      	ldr	r0, [pc, #4]	@ (8001940 <TIM6_DAC_IRQHandler+0x8>)
 800193a:	f00b bef7 	b.w	800d72c <HAL_TIM_IRQHandler>
 800193e:	bf00      	nop
 8001940:	24000748 	.word	0x24000748

08001944 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001944:	4801      	ldr	r0, [pc, #4]	@ (800194c <LTDC_IRQHandler+0x8>)
 8001946:	f009 bb01 	b.w	800af4c <HAL_LTDC_IRQHandler>
 800194a:	bf00      	nop
 800194c:	240004c0 	.word	0x240004c0

08001950 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001950:	4801      	ldr	r0, [pc, #4]	@ (8001958 <DMA2D_IRQHandler+0x8>)
 8001952:	f007 b893 	b.w	8008a7c <HAL_DMA2D_IRQHandler>
 8001956:	bf00      	nop
 8001958:	240006b4 	.word	0x240006b4

0800195c <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800195c:	4801      	ldr	r0, [pc, #4]	@ (8001964 <JPEG_IRQHandler+0x8>)
 800195e:	f009 b9c3 	b.w	800ace8 <HAL_JPEG_IRQHandler>
 8001962:	bf00      	nop
 8001964:	24000640 	.word	0x24000640

08001968 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MDMA_IRQHandler+0x14>)
{
 800196a:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800196c:	f009 fcf6 	bl	800b35c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001970:	4803      	ldr	r0, [pc, #12]	@ (8001980 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001976:	f009 bcf1 	b.w	800b35c <HAL_MDMA_IRQHandler>
 800197a:	bf00      	nop
 800197c:	24000568 	.word	0x24000568
 8001980:	240005d4 	.word	0x240005d4

08001984 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001984:	4801      	ldr	r0, [pc, #4]	@ (800198c <DSI_IRQHandler+0x8>)
 8001986:	f007 ba7c 	b.w	8008e82 <HAL_DSI_IRQHandler>
 800198a:	bf00      	nop
 800198c:	24000698 	.word	0x24000698

08001990 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001990:	2001      	movs	r0, #1
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001996:	f023 fd07 	bl	80253a8 <__errno>
 800199a:	2316      	movs	r3, #22
 800199c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800199e:	f04f 30ff 	mov.w	r0, #4294967295
 80019a2:	bd08      	pop	{r3, pc}

080019a4 <_exit>:

void _exit (int status)
{
 80019a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019a6:	f023 fcff 	bl	80253a8 <__errno>
 80019aa:	2316      	movs	r3, #22
 80019ac:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80019ae:	e7fe      	b.n	80019ae <_exit+0xa>

080019b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	460d      	mov	r5, r1
 80019b4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	460e      	mov	r6, r1
 80019b8:	1b73      	subs	r3, r6, r5
 80019ba:	429c      	cmp	r4, r3
 80019bc:	dc01      	bgt.n	80019c2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80019be:	4620      	mov	r0, r4
 80019c0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80019c2:	f3af 8000 	nop.w
 80019c6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	e7f5      	b.n	80019b8 <_read+0x8>

080019cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	460d      	mov	r5, r1
 80019d0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	460e      	mov	r6, r1
 80019d4:	1b73      	subs	r3, r6, r5
 80019d6:	429c      	cmp	r4, r3
 80019d8:	dc01      	bgt.n	80019de <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80019da:	4620      	mov	r0, r4
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80019de:	f816 0b01 	ldrb.w	r0, [r6], #1
 80019e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	e7f5      	b.n	80019d4 <_write+0x8>

080019e8 <_close>:

int _close(int file)
{
	return -1;
}
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	4770      	bx	lr

080019ee <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80019ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80019f2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80019f4:	604b      	str	r3, [r1, #4]
}
 80019f6:	4770      	bx	lr

080019f8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019f8:	2001      	movs	r0, #1
 80019fa:	4770      	bx	lr

080019fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019fc:	2000      	movs	r0, #0
 80019fe:	4770      	bx	lr

08001a00 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <_sbrk+0x30>)
{
 8001a02:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001a04:	6811      	ldr	r1, [r2, #0]
{
 8001a06:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001a08:	b909      	cbnz	r1, 8001a0e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001a0a:	490a      	ldr	r1, [pc, #40]	@ (8001a34 <_sbrk+0x34>)
 8001a0c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	6810      	ldr	r0, [r2, #0]
 8001a10:	4909      	ldr	r1, [pc, #36]	@ (8001a38 <_sbrk+0x38>)
 8001a12:	4c0a      	ldr	r4, [pc, #40]	@ (8001a3c <_sbrk+0x3c>)
 8001a14:	4403      	add	r3, r0
 8001a16:	1b09      	subs	r1, r1, r4
 8001a18:	428b      	cmp	r3, r1
 8001a1a:	d906      	bls.n	8001a2a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001a1c:	f023 fcc4 	bl	80253a8 <__errno>
 8001a20:	230c      	movs	r3, #12
 8001a22:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001a28:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001a2a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001a2c:	e7fc      	b.n	8001a28 <_sbrk+0x28>
 8001a2e:	bf00      	nop
 8001a30:	24000794 	.word	0x24000794
 8001a34:	24027140 	.word	0x24027140
 8001a38:	24080000 	.word	0x24080000
 8001a3c:	00001000 	.word	0x00001000

08001a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a44:	f006 fe04 	bl	8008650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a48:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a4a:	490d      	ldr	r1, [pc, #52]	@ (8001a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a60:	4c0a      	ldr	r4, [pc, #40]	@ (8001a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6e:	f023 fca1 	bl	80253b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a72:	f7fe ff85 	bl	8000980 <main>
  bx  lr
 8001a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a80:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001a84:	08029e00 	.word	0x08029e00
  ldr r2, =_sbss
 8001a88:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001a8c:	2402713c 	.word	0x2402713c

08001a90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a90:	e7fe      	b.n	8001a90 <ADC3_IRQHandler>

08001a92 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001a92:	4770      	bx	lr

08001a94 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001a94:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001a96:	f001 fd17 	bl	80034c8 <touchgfx_components_init>
    touchgfx_init();
}
 8001a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001a9e:	f001 bc99 	b.w	80033d4 <touchgfx_init>

08001aa2 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001aa2:	f001 bd13 	b.w	80034cc <touchgfx_taskEntry>

08001aa6 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001aa6:	6840      	ldr	r0, [r0, #4]
    }
 8001aa8:	4770      	bx	lr

08001aaa <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001aaa:	6041      	str	r1, [r0, #4]
    }
 8001aac:	4770      	bx	lr

08001aae <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001aae:	1a52      	subs	r2, r2, r1
 8001ab0:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001ab4:	fbb2 f0f3 	udiv	r0, r2, r3
 8001ab8:	4770      	bx	lr
	...

08001abc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001abc:	4b02      	ldr	r3, [pc, #8]	@ (8001ac8 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001abe:	68c0      	ldr	r0, [r0, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001ac4:	4358      	muls	r0, r3
 8001ac6:	4770      	bx	lr
 8001ac8:	24000798 	.word	0x24000798

08001acc <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001acc:	4770      	bx	lr
	...

08001ad0 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001ad4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001ad8:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001ada:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ade:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aea:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001af8:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001afc:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001b02:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001b04:	2101      	movs	r1, #1
 8001b06:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001b08:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b10:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	b983      	cbnz	r3, 8001b42 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001b20:	f00a fc96 	bl	800c450 <HAL_RCC_GetHCLKFreq>
 8001b24:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001b26:	f00a facb 	bl	800c0c0 <HAL_RCC_GetSysClockFreq>
 8001b2a:	fbb0 f0f4 	udiv	r0, r0, r4
 8001b2e:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001b30:	4807      	ldr	r0, [pc, #28]	@ (8001b50 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001b32:	f00b ff05 	bl	800d940 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001b36:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001b38:	b003      	add	sp, #12
 8001b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001b3e:	f00b bd79 	b.w	800d634 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001b42:	f00a fca7 	bl	800c494 <HAL_RCC_GetPCLK1Freq>
 8001b46:	0044      	lsls	r4, r0, #1
 8001b48:	e7ed      	b.n	8001b26 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001b4a:	bf00      	nop
 8001b4c:	58024400 	.word	0x58024400
 8001b50:	24000798 	.word	0x24000798
 8001b54:	08028898 	.word	0x08028898

08001b58 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	f022 fd5c 	bl	802461a <_ZdlPvj>
 8001b62:	4620      	mov	r0, r4
 8001b64:	bd10      	pop	{r4, pc}

08001b66 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001b66:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001b68:	6803      	ldr	r3, [r0, #0]
{
 8001b6a:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001b6c:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001b6e:	b131      	cbz	r1, 8001b7e <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001b70:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001b72:	4798      	blx	r3
 8001b74:	6863      	ldr	r3, [r4, #4]
 8001b76:	1b5b      	subs	r3, r3, r5
 8001b78:	4403      	add	r3, r0
 8001b7a:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001b7c:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001b7e:	4798      	blx	r3
 8001b80:	60a0      	str	r0, [r4, #8]
}
 8001b82:	e7fb      	b.n	8001b7c <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001b84 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001b84:	4770      	bx	lr
	...

08001b88 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001b8c:	460f      	mov	r7, r1
 8001b8e:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001b90:	781d      	ldrb	r5, [r3, #0]
 8001b92:	b915      	cbnz	r5, 8001b9a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001b94:	2500      	movs	r5, #0
}
 8001b96:	4628      	mov	r0, r5
 8001b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001b9a:	4c07      	ldr	r4, [pc, #28]	@ (8001bb8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	f006 fcfa 	bl	8008598 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f4      	beq.n	8001b94 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001bae:	68a3      	ldr	r3, [r4, #8]
 8001bb0:	6033      	str	r3, [r6, #0]
            return true;
 8001bb2:	e7f0      	b.n	8001b96 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001bb4:	240007f4 	.word	0x240007f4
 8001bb8:	240007e4 	.word	0x240007e4

08001bbc <_ZN20STM32TouchControllerD0Ev>:
 8001bbc:	b510      	push	{r4, lr}
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	f022 fd2a 	bl	802461a <_ZdlPvj>
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	bd10      	pop	{r4, pc}
	...

08001bcc <_ZN20STM32TouchController4initEv>:
{
 8001bcc:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001bd0:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001bd4:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001bd6:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001bd8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001bdc:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001be0:	230c      	movs	r3, #12
 8001be2:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001be6:	f006 fc47 	bl	8008478 <BSP_TS_Init>
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <_ZN20STM32TouchController4initEv+0x40>)
 8001bec:	b910      	cbnz	r0, 8001bf4 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
}
 8001bf2:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1fb      	bne.n	8001bf2 <_ZN20STM32TouchController4initEv+0x26>
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <_ZN20STM32TouchController4initEv+0x44>)
 8001bfc:	212e      	movs	r1, #46	@ 0x2e
 8001bfe:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <_ZN20STM32TouchController4initEv+0x48>)
 8001c00:	4805      	ldr	r0, [pc, #20]	@ (8001c18 <_ZN20STM32TouchController4initEv+0x4c>)
 8001c02:	f023 f881 	bl	8024d08 <__assert_func>
 8001c06:	bf00      	nop
 8001c08:	240007f0 	.word	0x240007f0
 8001c0c:	240007f4 	.word	0x240007f4
 8001c10:	08025e50 	.word	0x08025e50
 8001c14:	08025e63 	.word	0x08025e63
 8001c18:	08025e8d 	.word	0x08025e8d

08001c1c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001c1c:	2803      	cmp	r0, #3
 8001c1e:	d825      	bhi.n	8001c6c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001c20:	e8df f000 	tbb	[pc, r0]
 8001c24:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	fab2 f282 	clz	r2, r2
 8001c32:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001c34:	480f      	ldr	r0, [pc, #60]	@ (8001c74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001c36:	f007 bdc5 	b.w	80097c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	0952      	lsrs	r2, r2, #5
 8001c48:	e7f4      	b.n	8001c34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	fab2 f282 	clz	r2, r2
 8001c56:	0952      	lsrs	r2, r2, #5
 8001c58:	e7ec      	b.n	8001c34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001c5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c60:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	fab2 f282 	clz	r2, r2
 8001c68:	0952      	lsrs	r2, r2, #5
 8001c6a:	e7e4      	b.n	8001c36 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	240007f8 	.word	0x240007f8
 8001c74:	58022400 	.word	0x58022400
 8001c78:	58021400 	.word	0x58021400

08001c7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001c7c:	2803      	cmp	r0, #3
 8001c7e:	d825      	bhi.n	8001ccc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001c80:	e8df f000 	tbb	[pc, r0]
 8001c84:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001c8a:	2108      	movs	r1, #8
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	3a00      	subs	r2, #0
 8001c90:	bf18      	it	ne
 8001c92:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001c94:	480f      	ldr	r0, [pc, #60]	@ (8001cd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001c96:	f007 bd95 	b.w	80097c4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	3a00      	subs	r2, #0
 8001ca4:	bf18      	it	ne
 8001ca6:	2201      	movne	r2, #1
 8001ca8:	e7f4      	b.n	8001c94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001cac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	3a00      	subs	r2, #0
 8001cb4:	bf18      	it	ne
 8001cb6:	2201      	movne	r2, #1
 8001cb8:	e7ec      	b.n	8001c94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc0:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	3a00      	subs	r2, #0
 8001cc6:	bf18      	it	ne
 8001cc8:	2201      	movne	r2, #1
 8001cca:	e7e4      	b.n	8001c96 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	240007f8 	.word	0x240007f8
 8001cd4:	58022400 	.word	0x58022400
 8001cd8:	58021400 	.word	0x58021400

08001cdc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001cdc:	2803      	cmp	r0, #3
 8001cde:	d811      	bhi.n	8001d04 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001ce0:	e8df f000 	tbb	[pc, r0]
 8001ce4:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001ce8:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001cea:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001cec:	f007 bd6f 	b.w	80097ce <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001cf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf4:	e7f9      	b.n	8001cea <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001cf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cfa:	e7f6      	b.n	8001cea <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001cfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001d02:	e7f3      	b.n	8001cec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	58022400 	.word	0x58022400
 8001d0c:	58021400 	.word	0x58021400

08001d10 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001d10:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001d12:	2803      	cmp	r0, #3
 8001d14:	d815      	bhi.n	8001d42 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001d16:	e8df f000 	tbb	[pc, r0]
 8001d1a:	0a02      	.short	0x0a02
 8001d1c:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001d1e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001d20:	4809      	ldr	r0, [pc, #36]	@ (8001d48 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d22:	f007 fd49 	bl	80097b8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001d26:	1e43      	subs	r3, r0, #1
 8001d28:	4258      	negs	r0, r3
 8001d2a:	4158      	adcs	r0, r3
 8001d2c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001d2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d32:	e7f5      	b.n	8001d20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001d34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d38:	e7f2      	b.n	8001d20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001d3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d3e:	4803      	ldr	r0, [pc, #12]	@ (8001d4c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001d40:	e7ef      	b.n	8001d22 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001d42:	2000      	movs	r0, #0
 8001d44:	e7ef      	b.n	8001d26 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001d46:	bf00      	nop
 8001d48:	58022400 	.word	0x58022400
 8001d4c:	58021400 	.word	0x58021400

08001d50 <_ZN8touchgfx4GPIO4initEv>:
{
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	4d08      	ldr	r5, [pc, #32]	@ (8001d74 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001d54:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001d56:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001d58:	b2e0      	uxtb	r0, r4
 8001d5a:	f7ff ffd9 	bl	8001d10 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001d5e:	b118      	cbz	r0, 8001d68 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001d64:	bf18      	it	ne
 8001d66:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001d68:	3401      	adds	r4, #1
 8001d6a:	3504      	adds	r5, #4
 8001d6c:	2c05      	cmp	r4, #5
 8001d6e:	d1f3      	bne.n	8001d58 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
 8001d72:	bf00      	nop
 8001d74:	240007f8 	.word	0x240007f8

08001d78 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001d78:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001d7a:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001d7e:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001d82:	4770      	bx	lr

08001d84 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001d84:	2000      	movs	r0, #0
 8001d86:	4770      	bx	lr

08001d88 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001d88:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001d8a:	3900      	subs	r1, #0
 8001d8c:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001d8e:	bf18      	it	ne
 8001d90:	2101      	movne	r1, #1
 8001d92:	7019      	strb	r1, [r3, #0]
    }
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2402641b 	.word	0x2402641b

08001d9c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	4770      	bx	lr

08001da0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001da0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001da2:	b10b      	cbz	r3, 8001da8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001da4:	4608      	mov	r0, r1
 8001da6:	4718      	bx	r3
        }
    }
 8001da8:	4770      	bx	lr

08001daa <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001daa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001dae:	4770      	bx	lr

08001db0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001db0:	6840      	ldr	r0, [r0, #4]
 8001db2:	6803      	ldr	r3, [r0, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	4718      	bx	r3

08001db8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001db8:	4b01      	ldr	r3, [pc, #4]	@ (8001dc0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	2400081c 	.word	0x2400081c

08001dc4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001dc4:	4770      	bx	lr

08001dc6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001dc6:	f001 bc7e 	b.w	80036c6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001dca <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001dca:	f001 bc0d 	b.w	80035e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001dce <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001dce:	f001 bddf 	b.w	8003990 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001dd2 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001dd2:	f001 bdd1 	b.w	8003978 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001dd8 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ddc:	f001 fd94 	bl	8003908 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001de0:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001de4:	b113      	cbz	r3, 8001dec <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001de6:	4b02      	ldr	r3, [pc, #8]	@ (8001df0 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
    }
}
 8001dec:	bd10      	pop	{r4, pc}
 8001dee:	bf00      	nop
 8001df0:	2400000d 	.word	0x2400000d

08001df4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001df4:	f001 bc00 	b.w	80035f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001df8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001dfc:	f00f fb96 	bl	801152c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	4620      	mov	r0, r4
 8001e04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001e0c:	4718      	bx	r3

08001e0e <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001e0e:	b510      	push	{r4, lr}
 8001e10:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001e12:	f00e ff21 	bl	8010c58 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001e16:	6860      	ldr	r0, [r4, #4]
 8001e18:	6803      	ldr	r3, [r0, #0]
    }
 8001e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4718      	bx	r3

08001e22 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001e22:	f00e bdef 	b.w	8010a04 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001e26 <_ZN11TouchGFXHALD0Ev>:
 8001e26:	b510      	push	{r4, lr}
 8001e28:	4604      	mov	r4, r0
 8001e2a:	217c      	movs	r1, #124	@ 0x7c
 8001e2c:	f022 fbf5 	bl	802461a <_ZdlPvj>
 8001e30:	4620      	mov	r0, r4
 8001e32:	bd10      	pop	{r4, pc}

08001e34 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001e34:	4b02      	ldr	r3, [pc, #8]	@ (8001e40 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001e3a:	f00e be1f 	b.w	8010a7c <_ZN8touchgfx3HAL10beginFrameEv>
 8001e3e:	bf00      	nop
 8001e40:	2400000d 	.word	0x2400000d

08001e44 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4604      	mov	r4, r0
    mcuInstr.init();
 8001e48:	4d06      	ldr	r5, [pc, #24]	@ (8001e64 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001e4a:	f001 fbfd 	bl	8003648 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001e4e:	2300      	movs	r3, #0
    mcuInstr.init();
 8001e50:	4628      	mov	r0, r5
 8001e52:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001e56:	f7ff fe3b 	bl	8001ad0 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001e5a:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001e5c:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001e5e:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	2400080c 	.word	0x2400080c

08001e68 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001e68:	6803      	ldr	r3, [r0, #0]
{
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e72:	4798      	blx	r3
    enableInterrupts();
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	4620      	mov	r0, r4
 8001e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001e7a:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001e7c:	f000 ff5c 	bl	8002d38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	4620      	mov	r0, r4
 8001e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e86:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2329      	movs	r3, #41	@ 0x29
 8001e8c:	2215      	movs	r2, #21
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001e90:	9100      	str	r1, [sp, #0]
 8001e92:	f007 fa06 	bl	80092a2 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001e96:	f000 ff4f 	bl	8002d38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea0:	4798      	blx	r3
    for (;;)
 8001ea2:	e7f8      	b.n	8001e96 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001ea4:	24000698 	.word	0x24000698

08001ea8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001ea8:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001eac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001eae:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001eb0:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001eb4:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001eb6:	428c      	cmp	r4, r1
 8001eb8:	d009      	beq.n	8001ece <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001eba:	b93a      	cbnz	r2, 8001ecc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ebc:	490a      	ldr	r1, [pc, #40]	@ (8001ee8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8001eec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ec0:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ec2:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001ec4:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001ec6:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ec8:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001eca:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ecc:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	d0fc      	beq.n	8001ecc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ed2:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ed4:	4904      	ldr	r1, [pc, #16]	@ (8001ee8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ed6:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ed8:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001eda:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001edc:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001ede:	2200      	movs	r2, #0
 8001ee0:	e7f3      	b.n	8001eca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001ee2:	bf00      	nop
 8001ee4:	24026414 	.word	0x24026414
 8001ee8:	24026412 	.word	0x24026412
 8001eec:	24026410 	.word	0x24026410

08001ef0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001ef0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	428b      	cmp	r3, r1
 8001ef8:	d803      	bhi.n	8001f02 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d905      	bls.n	8001f0e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001f04:	219e      	movs	r1, #158	@ 0x9e
 8001f06:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001f08:	4807      	ldr	r0, [pc, #28]	@ (8001f28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001f0a:	f022 fefd 	bl	8024d08 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001f10:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001f14:	801a      	strh	r2, [r3, #0]
    }
 8001f16:	bd08      	pop	{r3, pc}
 8001f18:	24026410 	.word	0x24026410
 8001f1c:	24026412 	.word	0x24026412
 8001f20:	08025ef8 	.word	0x08025ef8
 8001f24:	08025f5b 	.word	0x08025f5b
 8001f28:	08025f9e 	.word	0x08025f9e
 8001f2c:	24026416 	.word	0x24026416
 8001f30:	24026418 	.word	0x24026418

08001f34 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001f34:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001f36:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001f3a:	b118      	cbz	r0, 8001f44 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001f3c:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4718      	bx	r3
    }
 8001f44:	4770      	bx	lr
	...

08001f48 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	460d      	mov	r5, r1
 8001f4c:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001f50:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001f52:	b935      	cbnz	r5, 8001f62 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001f54:	4b0a      	ldr	r3, [pc, #40]	@ (8001f80 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001f56:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001f5c:	480a      	ldr	r0, [pc, #40]	@ (8001f88 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001f5e:	f022 fed3 	bl	8024d08 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001f62:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001f66:	3a00      	subs	r2, #0
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001f6a:	bf18      	it	ne
 8001f6c:	2201      	movne	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001f70:	6803      	ldr	r3, [r0, #0]
}
 8001f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f7a:	4718      	bx	r3
 8001f7c:	2400081c 	.word	0x2400081c
 8001f80:	08025ff1 	.word	0x08025ff1
 8001f84:	08026029 	.word	0x08026029
 8001f88:	08025f9e 	.word	0x08025f9e
 8001f8c:	2402641a 	.word	0x2402641a

08001f90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001f90:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001f94:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001f96:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001f9a:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001f9c:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8002018 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001fa2:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001fa4:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001fa8:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001faa:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001fac:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001fb0:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001fb2:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001fb6:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001fb8:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001fba:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001fbe:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001fc2:	4a16      	ldr	r2, [pc, #88]	@ (800201c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001fc4:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001fc8:	3520      	adds	r5, #32
          buttonController(0),
 8001fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001fce:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001fd2:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001fd6:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001fda:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001fde:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001fe2:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001fe6:	6782      	str	r2, [r0, #120]	@ 0x78
 8001fe8:	b2ad      	uxth	r5, r5
        instance = this;
 8001fea:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001fec:	42b5      	cmp	r5, r6
        instance = this;
 8001fee:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8002024 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001ff2:	8015      	strh	r5, [r2, #0]
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8002028 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001ff6:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ff8:	bf28      	it	cs
 8001ffa:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ffe:	bf38      	it	cc
 8002000:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002002:	8016      	strh	r6, [r2, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002006:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800200a:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800200c:	4a09      	ldr	r2, [pc, #36]	@ (8002034 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 800200e:	7013      	strb	r3, [r2, #0]
 8002010:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8002012:	6003      	str	r3, [r0, #0]
}
 8002014:	bd70      	pop	{r4, r5, r6, pc}
 8002016:	bf00      	nop
 8002018:	01000001 	.word	0x01000001
 800201c:	01010000 	.word	0x01010000
 8002020:	2402641c 	.word	0x2402641c
 8002024:	24026410 	.word	0x24026410
 8002028:	24026416 	.word	0x24026416
 800202c:	24026412 	.word	0x24026412
 8002030:	24026418 	.word	0x24026418
 8002034:	24026414 	.word	0x24026414
 8002038:	08026080 	.word	0x08026080

0800203c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 800203c:	2b01      	cmp	r3, #1
    {
 800203e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002040:	d80e      	bhi.n	8002060 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	2215      	movs	r2, #21
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	460b      	mov	r3, r1
 800204a:	4601      	mov	r1, r0
 800204c:	4808      	ldr	r0, [pc, #32]	@ (8002070 <DSI_IO_Write+0x34>)
 800204e:	f007 f928 	bl	80092a2 <HAL_DSI_ShortWrite>
 8002052:	b118      	cbz	r0, 800205c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002054:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8002058:	b002      	add	sp, #8
 800205a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 800205c:	2000      	movs	r0, #0
 800205e:	e7fb      	b.n	8002058 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002060:	e9cd 1200 	strd	r1, r2, [sp]
 8002064:	4601      	mov	r1, r0
 8002066:	2239      	movs	r2, #57	@ 0x39
 8002068:	4801      	ldr	r0, [pc, #4]	@ (8002070 <DSI_IO_Write+0x34>)
 800206a:	f007 f92b 	bl	80092c4 <HAL_DSI_LongWrite>
 800206e:	e7f0      	b.n	8002052 <DSI_IO_Write+0x16>
 8002070:	24000698 	.word	0x24000698

08002074 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8002074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8002076:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800207a:	2106      	movs	r1, #6
 800207c:	9100      	str	r1, [sp, #0]
 800207e:	4601      	mov	r1, r0
 8002080:	4805      	ldr	r0, [pc, #20]	@ (8002098 <DSI_IO_Read+0x24>)
 8002082:	f007 f97f 	bl	8009384 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8002086:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8002088:	bf14      	ite	ne
 800208a:	f06f 0007 	mvnne.w	r0, #7
 800208e:	2000      	moveq	r0, #0
 8002090:	b005      	add	sp, #20
 8002092:	f85d fb04 	ldr.w	pc, [sp], #4
 8002096:	bf00      	nop
 8002098:	24000698 	.word	0x24000698

0800209c <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 800209c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 800209e:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80020a2:	4c0b      	ldr	r4, [pc, #44]	@ (80020d0 <LCD_ReqTear+0x34>)
 80020a4:	2239      	movs	r2, #57	@ 0x39
 80020a6:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80020a8:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80020ac:	ab03      	add	r3, sp, #12
 80020ae:	4620      	mov	r0, r4
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2344      	movs	r3, #68	@ 0x44
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2302      	movs	r3, #2
 80020b8:	f007 f904 	bl	80092c4 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80020bc:	2100      	movs	r1, #0
 80020be:	2335      	movs	r3, #53	@ 0x35
 80020c0:	2215      	movs	r2, #21
 80020c2:	4620      	mov	r0, r4
 80020c4:	9100      	str	r1, [sp, #0]
 80020c6:	f007 f8ec 	bl	80092a2 <HAL_DSI_ShortWrite>
    }
 80020ca:	b004      	add	sp, #16
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	bf00      	nop
 80020d0:	24000698 	.word	0x24000698

080020d4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80020d4:	b508      	push	{r3, lr}
    LCD_ReqTear();
 80020d6:	f7ff ffe1 	bl	800209c <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80020da:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 80020dc:	2202      	movs	r2, #2
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80020ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80020f6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80020fa:	f042 0202 	orr.w	r2, r2, #2
 80020fe:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8002102:	2203      	movs	r2, #3
 8002104:	4b02      	ldr	r3, [pc, #8]	@ (8002110 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8002106:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002108:	bd08      	pop	{r3, pc}
 800210a:	bf00      	nop
 800210c:	24000698 	.word	0x24000698
 8002110:	50001000 	.word	0x50001000

08002114 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002114:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <LCD_ReqEnable+0x20>)
    {
 8002116:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8002118:	7819      	ldrb	r1, [r3, #0]
 800211a:	b939      	cbnz	r1, 800212c <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 800211c:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 800211e:	4806      	ldr	r0, [pc, #24]	@ (8002138 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002120:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8002122:	2329      	movs	r3, #41	@ 0x29
 8002124:	2215      	movs	r2, #21
 8002126:	9100      	str	r1, [sp, #0]
 8002128:	f007 f8bb 	bl	80092a2 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 800212c:	b003      	add	sp, #12
 800212e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002132:	bf00      	nop
 8002134:	24000808 	.word	0x24000808
 8002138:	24000698 	.word	0x24000698

0800213c <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 800213e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	232a      	movs	r3, #42	@ 0x2a
 8002144:	2239      	movs	r2, #57	@ 0x39
 8002146:	2100      	movs	r1, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2304      	movs	r3, #4
 800214c:	4803      	ldr	r0, [pc, #12]	@ (800215c <LCD_SetUpdateRegionLeft+0x20>)
 800214e:	f007 f8b9 	bl	80092c4 <HAL_DSI_LongWrite>
    }
 8002152:	b003      	add	sp, #12
 8002154:	f85d fb04 	ldr.w	pc, [sp], #4
 8002158:	24000009 	.word	0x24000009
 800215c:	24000698 	.word	0x24000698

08002160 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <LCD_SetUpdateRegionRight+0x1c>)
    {
 8002162:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	232a      	movs	r3, #42	@ 0x2a
 8002168:	2239      	movs	r2, #57	@ 0x39
 800216a:	2100      	movs	r1, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2304      	movs	r3, #4
 8002170:	4803      	ldr	r0, [pc, #12]	@ (8002180 <LCD_SetUpdateRegionRight+0x20>)
 8002172:	f007 f8a7 	bl	80092c4 <HAL_DSI_LongWrite>
    }
 8002176:	b003      	add	sp, #12
 8002178:	f85d fb04 	ldr.w	pc, [sp], #4
 800217c:	24000005 	.word	0x24000005
 8002180:	24000698 	.word	0x24000698

08002184 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8002184:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8002186:	4d14      	ldr	r5, [pc, #80]	@ (80021d8 <HAL_DSI_TearingEffectCallback+0x54>)
 8002188:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800218a:	2000      	movs	r0, #0
 800218c:	f7ff fd46 	bl	8001c1c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8002190:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8002192:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002196:	3301      	adds	r3, #1
 8002198:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 800219c:	f000 fdc0 	bl	8002d20 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 80021a2:	682a      	ldr	r2, [r5, #0]
 80021a4:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80021ac:	b173      	cbz	r3, 80021cc <HAL_DSI_TearingEffectCallback+0x48>
 80021ae:	4d0c      	ldr	r5, [pc, #48]	@ (80021e0 <HAL_DSI_TearingEffectCallback+0x5c>)
 80021b0:	782b      	ldrb	r3, [r5, #0]
 80021b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80021b6:	b94b      	cbnz	r3, 80021cc <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_DSI_TearingEffectCallback+0x60>)
 80021ba:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80021bc:	f7ff ffbe 	bl	800213c <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f007 f85e 	bl	8009282 <HAL_DSI_Refresh>
            displayRefreshing = true;
 80021c6:	2301      	movs	r3, #1
 80021c8:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80021ca:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80021cc:	2000      	movs	r0, #0
    }
 80021ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80021d2:	f7ff bd53 	b.w	8001c7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80021d6:	bf00      	nop
 80021d8:	2402641c 	.word	0x2402641c
 80021dc:	2400000d 	.word	0x2400000d
 80021e0:	24000824 	.word	0x24000824
 80021e4:	24000820 	.word	0x24000820

080021e8 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 80021e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 80021ec:	4e48      	ldr	r6, [pc, #288]	@ (8002310 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 80021ee:	b085      	sub	sp, #20
 80021f0:	4604      	mov	r4, r0
        if (displayRefreshing)
 80021f2:	7833      	ldrb	r3, [r6, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8088 	beq.w	800230a <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 80021fa:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002334 <HAL_DSI_EndOfRefreshCallback+0x14c>
 80021fe:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8002338 <HAL_DSI_EndOfRefreshCallback+0x150>
 8002202:	f8d9 5000 	ldr.w	r5, [r9]
 8002206:	4f43      	ldr	r7, [pc, #268]	@ (8002314 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8002208:	2d00      	cmp	r5, #0
 800220a:	d13e      	bne.n	800228a <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 800220c:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800220e:	4e42      	ldr	r6, [pc, #264]	@ (8002318 <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8002210:	f006 face 	bl	80087b0 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	9500      	str	r5, [sp, #0]
 8002218:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800221c:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800221e:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002222:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002226:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800222a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800222e:	f002 0208 	and.w	r2, r2, #8
 8002232:	9200      	str	r2, [sp, #0]
 8002234:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002236:	f8d8 2000 	ldr.w	r2, [r8]
 800223a:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 800223e:	4837      	ldr	r0, [pc, #220]	@ (800231c <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002240:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8002242:	4e37      	ldr	r6, [pc, #220]	@ (8002320 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002244:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8002246:	4837      	ldr	r0, [pc, #220]	@ (8002324 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002248:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 800224c:	4836      	ldr	r0, [pc, #216]	@ (8002328 <HAL_DSI_EndOfRefreshCallback+0x140>)
 800224e:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002252:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002254:	f041 0101 	orr.w	r1, r1, #1
 8002258:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800225a:	9501      	str	r5, [sp, #4]
 800225c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002260:	f042 0208 	orr.w	r2, r2, #8
 8002264:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002268:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8002274:	f7ff ff74 	bl	8002160 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8002278:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 800227a:	4620      	mov	r0, r4
                updateRegion = 1;
 800227c:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8002280:	b005      	add	sp, #20
 8002282:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8002286:	f006 bffc 	b.w	8009282 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800228a:	6803      	ldr	r3, [r0, #0]
 800228c:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 800228e:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002290:	9502      	str	r5, [sp, #8]
 8002292:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8002296:	4c25      	ldr	r4, [pc, #148]	@ (800232c <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80022a0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80022a4:	f002 0208 	and.w	r2, r2, #8
 80022a8:	9202      	str	r2, [sp, #8]
 80022aa:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80022ac:	f8d8 2000 	ldr.w	r2, [r8]
 80022b0:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80022b4:	4819      	ldr	r0, [pc, #100]	@ (800231c <HAL_DSI_EndOfRefreshCallback+0x134>)
 80022b6:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80022b8:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80022bc:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80022be:	4819      	ldr	r0, [pc, #100]	@ (8002324 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80022c0:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80022c4:	4818      	ldr	r0, [pc, #96]	@ (8002328 <HAL_DSI_EndOfRefreshCallback+0x140>)
 80022c6:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 80022ca:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80022cc:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80022ce:	f041 0101 	orr.w	r1, r1, #1
 80022d2:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80022d4:	9503      	str	r5, [sp, #12]
 80022d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80022da:	f042 0208 	orr.w	r2, r2, #8
 80022de:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80022e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	9303      	str	r3, [sp, #12]
 80022ec:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 80022ee:	f7ff fcc5 	bl	8001c7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 80022f2:	f7ff ff0f 	bl	8002114 <LCD_ReqEnable>
        return instance;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 80022f8:	7035      	strb	r5, [r6, #0]
 80022fa:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 80022fc:	b128      	cbz	r0, 800230a <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 80022fe:	6803      	ldr	r3, [r0, #0]
 8002300:	6a1b      	ldr	r3, [r3, #32]
    }
 8002302:	b005      	add	sp, #20
 8002304:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002308:	4718      	bx	r3
 800230a:	b005      	add	sp, #20
 800230c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002310:	24000824 	.word	0x24000824
 8002314:	2400081c 	.word	0x2400081c
 8002318:	01b201e2 	.word	0x01b201e2
 800231c:	50001000 	.word	0x50001000
 8002320:	019201e3 	.word	0x019201e3
 8002324:	01920003 	.word	0x01920003
 8002328:	09c004b3 	.word	0x09c004b3
 800232c:	019201e2 	.word	0x019201e2
 8002330:	2402641c 	.word	0x2402641c
 8002334:	24000820 	.word	0x24000820
 8002338:	240004c0 	.word	0x240004c0

0800233c <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 800233c:	4601      	mov	r1, r0
 800233e:	b508      	push	{r3, lr}
        return instance;
 8002340:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <IdleTaskHook+0x14>)
 8002342:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002344:	b101      	cbz	r1, 8002348 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8002346:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002348:	f00f f90a 	bl	8011560 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 800234c:	2001      	movs	r0, #1
 800234e:	bd08      	pop	{r3, pc}
 8002350:	2402641c 	.word	0x2402641c

08002354 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8002356:	2200      	movs	r2, #0
 8002358:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	4a02      	ldr	r2, [pc, #8]	@ (8002368 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 800235e:	601a      	str	r2, [r3, #0]

}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2400080c 	.word	0x2400080c
 8002368:	08025e30 	.word	0x08025e30

0800236c <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 800236c:	6940      	ldr	r0, [r0, #20]
 800236e:	4770      	bx	lr

08002370 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002370:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002374:	4770      	bx	lr

08002376 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8002376:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002378:	b923      	cbnz	r3, 8002384 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800237a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800237c:	3800      	subs	r0, #0
 800237e:	bf18      	it	ne
 8002380:	2001      	movne	r0, #1
 8002382:	4770      	bx	lr
 8002384:	2001      	movs	r0, #1
}
 8002386:	4770      	bx	lr

08002388 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002388:	6880      	ldr	r0, [r0, #8]
 800238a:	4770      	bx	lr

0800238c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 800238c:	4770      	bx	lr

0800238e <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800238e:	3004      	adds	r0, #4
{
 8002390:	b510      	push	{r4, lr}
 8002392:	460c      	mov	r4, r1
    *data = videoInfo;
 8002394:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002396:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800239a:	bd10      	pop	{r4, pc}

0800239c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800239c:	4770      	bx	lr
	...

080023a0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80023a0:	b508      	push	{r3, lr}
    assert(0);
 80023a2:	4a03      	ldr	r2, [pc, #12]	@ (80023b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80023a4:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80023a8:	4b02      	ldr	r3, [pc, #8]	@ (80023b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80023aa:	4803      	ldr	r0, [pc, #12]	@ (80023b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80023ac:	f022 fcac 	bl	8024d08 <__assert_func>
 80023b0:	08026150 	.word	0x08026150
 80023b4:	0802839f 	.word	0x0802839f
 80023b8:	080261ab 	.word	0x080261ab

080023bc <_ZN20HardwareMJPEGDecoderD0Ev>:
 80023bc:	b510      	push	{r4, lr}
 80023be:	4604      	mov	r4, r0
 80023c0:	2148      	movs	r1, #72	@ 0x48
 80023c2:	f022 f92a 	bl	802461a <_ZdlPvj>
 80023c6:	4620      	mov	r0, r4
 80023c8:	bd10      	pop	{r4, pc}
	...

080023cc <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80023cc:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80023d0:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80023d2:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80023d4:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023d6:	6003      	str	r3, [r0, #0]
 80023d8:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80023da:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80023de:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80023e2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80023e6:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023ea:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80023ee:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80023f2:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80023f6:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80023fa:	2001      	movs	r0, #1
 80023fc:	f00b fc64 	bl	800dcc8 <osSemaphoreNew>
 8002400:	4b02      	ldr	r3, [pc, #8]	@ (800240c <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 8002402:	6018      	str	r0, [r3, #0]
}
 8002404:	4620      	mov	r0, r4
 8002406:	bd10      	pop	{r4, pc}
 8002408:	080263e0 	.word	0x080263e0
 800240c:	24000844 	.word	0x24000844

08002410 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002410:	b410      	push	{r4}
 8002412:	460c      	mov	r4, r1
 8002414:	4611      	mov	r1, r2
 8002416:	461a      	mov	r2, r3
    if (reader != 0)
 8002418:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800241a:	b13b      	cbz	r3, 800242c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800241c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800241e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002420:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002422:	4420      	add	r0, r4
}
 8002424:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002428:	f022 bf12 	b.w	8025250 <strncmp>
        src = (const char*)movieData + offset;
 800242c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800242e:	e7f8      	b.n	8002422 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002430 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002430:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002432:	b510      	push	{r4, lr}
    if (reader != 0)
 8002434:	b173      	cbz	r3, 8002454 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002436:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002438:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800243a:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800243c:	1853      	adds	r3, r2, r1
 800243e:	5c52      	ldrb	r2, [r2, r1]
 8002440:	7898      	ldrb	r0, [r3, #2]
 8002442:	785c      	ldrb	r4, [r3, #1]
 8002444:	0400      	lsls	r0, r0, #16
 8002446:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800244a:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 800244c:	78db      	ldrb	r3, [r3, #3]
 800244e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002452:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002454:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8002456:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002458:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800245a:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 800245c:	7898      	ldrb	r0, [r3, #2]
 800245e:	0400      	lsls	r0, r0, #16
 8002460:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002464:	e7f1      	b.n	800244a <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

08002466 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002466:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002468:	b143      	cbz	r3, 800247c <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800246a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800246c:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800246e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002470:	185a      	adds	r2, r3, r1
 8002472:	5c58      	ldrb	r0, [r3, r1]
 8002474:	7852      	ldrb	r2, [r2, #1]
 8002476:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800247a:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 800247c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800247e:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002480:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002482:	7853      	ldrb	r3, [r2, #1]
 8002484:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002488:	4770      	bx	lr
	...

0800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	4604      	mov	r4, r0
    if (reader != 0)
 8002490:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002492:	460d      	mov	r5, r1
 8002494:	4616      	mov	r6, r2
    if (reader != 0)
 8002496:	b1d8      	cbz	r0, 80024d0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002498:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800249a:	4293      	cmp	r3, r2
 800249c:	d208      	bcs.n	80024b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800249e:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80024a2:	219e      	movs	r1, #158	@ 0x9e
 80024a4:	480d      	ldr	r0, [pc, #52]	@ (80024dc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80024a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80024ac:	f022 fc2c 	bl	8024d08 <__assert_func>
        reader->seek(offset);
 80024b0:	6803      	ldr	r3, [r0, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80024b6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80024b8:	4632      	mov	r2, r6
 80024ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80024bc:	6803      	ldr	r3, [r0, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	4798      	blx	r3
 80024c2:	b910      	cbnz	r0, 80024ca <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80024c4:	230d      	movs	r3, #13
 80024c6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80024ca:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80024cc:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80024d0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80024d2:	4408      	add	r0, r1
 80024d4:	e7fb      	b.n	80024ce <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80024d6:	bf00      	nop
 80024d8:	08026219 	.word	0x08026219
 80024dc:	080261ab 	.word	0x080261ab
 80024e0:	08026206 	.word	0x08026206

080024e4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80024e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80024e8:	6943      	ldr	r3, [r0, #20]
{
 80024ea:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80024ec:	b92b      	cbnz	r3, 80024fa <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80024ee:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80024f0:	21e4      	movs	r1, #228	@ 0xe4
 80024f2:	4a22      	ldr	r2, [pc, #136]	@ (800257c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80024f4:	4822      	ldr	r0, [pc, #136]	@ (8002580 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80024f6:	f022 fc07 	bl	8024d08 <__assert_func>
    readData(currentMovieOffset, 8);
 80024fa:	2208      	movs	r2, #8
 80024fc:	6981      	ldr	r1, [r0, #24]
 80024fe:	f7ff ffc5 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002502:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002504:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002508:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800250c:	3104      	adds	r1, #4
 800250e:	4620      	mov	r0, r4
 8002510:	f7ff ff8e 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002514:	69a3      	ldr	r3, [r4, #24]
 8002516:	4418      	add	r0, r3
 8002518:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800251a:	f100 0208 	add.w	r2, r0, #8
 800251e:	429a      	cmp	r2, r3
 8002520:	d306      	bcc.n	8002530 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002522:	2301      	movs	r3, #1
    return false;
 8002524:	2000      	movs	r0, #0
    frameNumber = 1;
 8002526:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002528:	6a23      	ldr	r3, [r4, #32]
 800252a:	61a3      	str	r3, [r4, #24]
}
 800252c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002530:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002532:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 8002536:	2208      	movs	r2, #8
 8002538:	4620      	mov	r0, r4
        frameNumber++;
 800253a:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800253c:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002540:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002542:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002544:	f7ff ffa2 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002548:	f8d4 9018 	ldr.w	r9, [r4, #24]
 800254c:	4620      	mov	r0, r4
 800254e:	4649      	mov	r1, r9
 8002550:	f7ff ff89 	bl	8002466 <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002554:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002558:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff ff83 	bl	8002466 <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002560:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002564:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002566:	4620      	mov	r0, r4
 8002568:	f7ff ff62 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800256c:	45b0      	cmp	r8, r6
 800256e:	d1d1      	bne.n	8002514 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002570:	42bd      	cmp	r5, r7
 8002572:	d1cf      	bne.n	8002514 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002574:	2001      	movs	r0, #1
 8002576:	e7d9      	b.n	800252c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002578:	0802625b 	.word	0x0802625b
 800257c:	080262a4 	.word	0x080262a4
 8002580:	080261ab 	.word	0x080261ab

08002584 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002584:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002586:	6803      	ldr	r3, [r0, #0]
 8002588:	bf38      	it	cc
 800258a:	2101      	movcc	r1, #1
 800258c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 800258e:	b570      	push	{r4, r5, r6, lr}
 8002590:	460d      	mov	r5, r1
 8002592:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002594:	4798      	blx	r3
 8002596:	42a8      	cmp	r0, r5
 8002598:	d204      	bcs.n	80025a4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	4620      	mov	r0, r4
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	4798      	blx	r3
 80025a2:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80025a4:	1e6b      	subs	r3, r5, #1
 80025a6:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80025a8:	2210      	movs	r2, #16
 80025aa:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80025ac:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80025b0:	f106 0108 	add.w	r1, r6, #8
 80025b4:	f7ff ff6a 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80025b8:	f106 0110 	add.w	r1, r6, #16
 80025bc:	4620      	mov	r0, r4
 80025be:	f7ff ff37 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80025c2:	6a23      	ldr	r3, [r4, #32]
 80025c4:	3b04      	subs	r3, #4
 80025c6:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80025c8:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80025cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080025d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80025d0:	2100      	movs	r1, #0
    readData(0, 72);
 80025d2:	2248      	movs	r2, #72	@ 0x48
{
 80025d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d8:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80025da:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80025dc:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80025e0:	f7ff ff54 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80025e4:	69a6      	ldr	r6, [r4, #24]
 80025e6:	2304      	movs	r3, #4
 80025e8:	4a63      	ldr	r2, [pc, #396]	@ (8002778 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80025ea:	4631      	mov	r1, r6
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7ff ff0f 	bl	8002410 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80025f2:	b148      	cbz	r0, 8002608 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80025f4:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80025f6:	4a61      	ldr	r2, [pc, #388]	@ (800277c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80025f8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80025fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002600:	4b5f      	ldr	r3, [pc, #380]	@ (8002780 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002602:	4860      	ldr	r0, [pc, #384]	@ (8002784 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002604:	f022 fb80 	bl	8024d08 <__assert_func>
    currentMovieOffset += 8;
 8002608:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800260c:	2304      	movs	r3, #4
 800260e:	4a5e      	ldr	r2, [pc, #376]	@ (8002788 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002610:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002612:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002614:	f7ff fefc 	bl	8002410 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002618:	b138      	cbz	r0, 800262a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800261a:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800261c:	4a57      	ldr	r2, [pc, #348]	@ (800277c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800261e:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002622:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 8002626:	4b59      	ldr	r3, [pc, #356]	@ (800278c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002628:	e7eb      	b.n	8002602 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800262a:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800262e:	2304      	movs	r3, #4
 8002630:	4a57      	ldr	r2, [pc, #348]	@ (8002790 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002632:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002634:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002636:	f7ff feeb 	bl	8002410 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800263a:	4607      	mov	r7, r0
 800263c:	b138      	cbz	r0, 800264e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800263e:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002640:	4a4e      	ldr	r2, [pc, #312]	@ (800277c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002642:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002646:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800264a:	4b52      	ldr	r3, [pc, #328]	@ (8002794 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 800264c:	e7d9      	b.n	8002602 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800264e:	f106 0110 	add.w	r1, r6, #16
 8002652:	4620      	mov	r0, r4
 8002654:	f7ff feec 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002658:	4605      	mov	r5, r0
 800265a:	b920      	cbnz	r0, 8002666 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 800265c:	4b4e      	ldr	r3, [pc, #312]	@ (8002798 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 800265e:	f240 1141 	movw	r1, #321	@ 0x141
 8002662:	4a46      	ldr	r2, [pc, #280]	@ (800277c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002664:	e7cd      	b.n	8002602 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 8002666:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800266a:	2304      	movs	r3, #4
 800266c:	4a4b      	ldr	r2, [pc, #300]	@ (800279c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 800266e:	4620      	mov	r0, r4
 8002670:	4641      	mov	r1, r8
 8002672:	f7ff fecd 	bl	8002410 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002676:	2800      	cmp	r0, #0
 8002678:	d049      	beq.n	800270e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800267a:	2306      	movs	r3, #6
 800267c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002680:	2304      	movs	r3, #4
 8002682:	4a47      	ldr	r2, [pc, #284]	@ (80027a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002684:	f106 0118 	add.w	r1, r6, #24
 8002688:	4620      	mov	r0, r4
 800268a:	f7ff fec1 	bl	8002410 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800268e:	2800      	cmp	r0, #0
 8002690:	d03f      	beq.n	8002712 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002692:	2307      	movs	r3, #7
 8002694:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002698:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800269a:	4f42      	ldr	r7, [pc, #264]	@ (80027a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 800269c:	220c      	movs	r2, #12
 800269e:	4620      	mov	r0, r4
 80026a0:	4629      	mov	r1, r5
 80026a2:	f7ff fef3 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80026a6:	f105 0608 	add.w	r6, r5, #8
 80026aa:	2304      	movs	r3, #4
 80026ac:	463a      	mov	r2, r7
 80026ae:	4620      	mov	r0, r4
 80026b0:	4631      	mov	r1, r6
 80026b2:	f7ff fead 	bl	8002410 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026b6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d048      	beq.n	8002750 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d148      	bne.n	8002754 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80026c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80026c4:	42ab      	cmp	r3, r5
 80026c6:	d849      	bhi.n	800275c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80026c8:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80026cc:	3504      	adds	r5, #4
 80026ce:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80026d0:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80026d2:	4629      	mov	r1, r5
 80026d4:	f7ff feac 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80026d8:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80026da:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80026dc:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff fea6 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80026e4:	4406      	add	r6, r0
    readData(listOffset, 4);
 80026e6:	2204      	movs	r2, #4
 80026e8:	4620      	mov	r0, r4
 80026ea:	4631      	mov	r1, r6
 80026ec:	f7ff fece 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80026f0:	2304      	movs	r3, #4
 80026f2:	4a2d      	ldr	r2, [pc, #180]	@ (80027a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80026f4:	4631      	mov	r1, r6
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff fe8a 	bl	8002410 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d138      	bne.n	8002772 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002700:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002702:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002704:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002706:	69a3      	ldr	r3, [r4, #24]
 8002708:	6223      	str	r3, [r4, #32]
}
 800270a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800270e:	2701      	movs	r7, #1
 8002710:	e7b6      	b.n	8002680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8002712:	2f00      	cmp	r7, #0
 8002714:	d0c0      	beq.n	8002698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002716:	f106 0120 	add.w	r1, r6, #32
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff fe88 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002720:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002724:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002728:	fbb0 f0f3 	udiv	r0, r0, r3
 800272c:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff fe7e 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002734:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002738:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff fe78 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002740:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002744:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002746:	4620      	mov	r0, r4
 8002748:	f7ff fe72 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800274c:	6120      	str	r0, [r4, #16]
 800274e:	e7a3      	b.n	8002698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0b9      	beq.n	80026c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002754:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002756:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800275a:	e7d6      	b.n	800270a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 800275c:	1d29      	adds	r1, r5, #4
 800275e:	4620      	mov	r0, r4
 8002760:	f7ff fe66 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002764:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 8002766:	220c      	movs	r2, #12
 8002768:	4620      	mov	r0, r4
 800276a:	4629      	mov	r1, r5
 800276c:	f7ff fe8e 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002770:	e799      	b.n	80026a6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002772:	230b      	movs	r3, #11
 8002774:	e7ef      	b.n	8002756 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002776:	bf00      	nop
 8002778:	080262d7 	.word	0x080262d7
 800277c:	080262f5 	.word	0x080262f5
 8002780:	080262dc 	.word	0x080262dc
 8002784:	080261ab 	.word	0x080261ab
 8002788:	08026322 	.word	0x08026322
 800278c:	08026327 	.word	0x08026327
 8002790:	0802633f 	.word	0x0802633f
 8002794:	08026344 	.word	0x08026344
 8002798:	0802635a 	.word	0x0802635a
 800279c:	08026366 	.word	0x08026366
 80027a0:	0802636b 	.word	0x0802636b
 80027a4:	08026370 	.word	0x08026370
 80027a8:	08026375 	.word	0x08026375

080027ac <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80027ac:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80027b0:	2200      	movs	r2, #0
 80027b2:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80027b4:	f7ff bf0c 	b.w	80025d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080027b8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80027b8:	b510      	push	{r4, lr}
    movieData = 0;
 80027ba:	2300      	movs	r3, #0
{
 80027bc:	4604      	mov	r4, r0
 80027be:	4608      	mov	r0, r1
    movieData = 0;
 80027c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80027c2:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80027c4:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4798      	blx	r3
 80027ca:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80027cc:	4620      	mov	r0, r4
}
 80027ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80027d2:	f7ff befd 	b.w	80025d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080027d8 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80027d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80027da:	4c14      	ldr	r4, [pc, #80]	@ (800282c <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80027dc:	4d14      	ldr	r5, [pc, #80]	@ (8002830 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80027de:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80027e0:	2400      	movs	r4, #0
 80027e2:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <JPEG_Decode_DMA+0x5c>)
 80027e4:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <JPEG_Decode_DMA+0x60>)
 80027e8:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80027ea:	4b14      	ldr	r3, [pc, #80]	@ (800283c <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80027ec:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80027ee:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <JPEG_Decode_DMA+0x68>)
 80027f2:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <JPEG_Decode_DMA+0x6c>)
 80027f6:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <JPEG_Decode_DMA+0x70>)
 80027fa:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80027fe:	682a      	ldr	r2, [r5, #0]
 8002800:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002804:	701c      	strb	r4, [r3, #0]
 8002806:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002808:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800280c:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002810:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002814:	4a0e      	ldr	r2, [pc, #56]	@ (8002850 <JPEG_Decode_DMA+0x78>)
 8002816:	68d2      	ldr	r2, [r2, #12]
 8002818:	436a      	muls	r2, r5
 800281a:	9200      	str	r2, [sp, #0]
 800281c:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f007 fed7 	bl	800a5d4 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002826:	4620      	mov	r0, r4
 8002828:	b003      	add	sp, #12
 800282a:	bd30      	pop	{r4, r5, pc}
 800282c:	24009e70 	.word	0x24009e70
 8002830:	24009e4c 	.word	0x24009e4c
 8002834:	24009e5c 	.word	0x24009e5c
 8002838:	24000840 	.word	0x24000840
 800283c:	24009e6c 	.word	0x24009e6c
 8002840:	24009e64 	.word	0x24009e64
 8002844:	24009e68 	.word	0x24009e68
 8002848:	24000848 	.word	0x24000848
 800284c:	24000010 	.word	0x24000010
 8002850:	24000828 	.word	0x24000828

08002854 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002854:	684b      	ldr	r3, [r1, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d115      	bne.n	8002886 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800285a:	68cb      	ldr	r3, [r1, #12]
 800285c:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800285e:	bf1e      	ittt	ne
 8002860:	f023 030f 	bicne.w	r3, r3, #15
 8002864:	3310      	addne	r3, #16
 8002866:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002868:	688b      	ldr	r3, [r1, #8]
 800286a:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800286c:	bf1e      	ittt	ne
 800286e:	f023 030f 	bicne.w	r3, r3, #15
 8002872:	3310      	addne	r3, #16
 8002874:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002876:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002878:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800287a:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800287c:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 800287e:	4353      	muls	r3, r2
 8002880:	4a0e      	ldr	r2, [pc, #56]	@ (80028bc <HAL_JPEG_InfoReadyCallback+0x68>)
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002886:	2b02      	cmp	r3, #2
 8002888:	d10e      	bne.n	80028a8 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800288a:	68cb      	ldr	r3, [r1, #12]
 800288c:	071a      	lsls	r2, r3, #28
 800288e:	d003      	beq.n	8002898 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002890:	f023 030f 	bic.w	r3, r3, #15
 8002894:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002896:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002898:	688b      	ldr	r3, [r1, #8]
 800289a:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800289c:	bf1e      	ittt	ne
 800289e:	f023 0307 	bicne.w	r3, r3, #7
 80028a2:	3308      	addne	r3, #8
 80028a4:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80028a6:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1fc      	bne.n	80028a6 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80028ac:	68cb      	ldr	r3, [r1, #12]
 80028ae:	0758      	lsls	r0, r3, #29
 80028b0:	d0f2      	beq.n	8002898 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80028b2:	f023 0307 	bic.w	r3, r3, #7
 80028b6:	3308      	adds	r3, #8
 80028b8:	e7ed      	b.n	8002896 <HAL_JPEG_InfoReadyCallback+0x42>
 80028ba:	bf00      	nop
 80028bc:	24009e54 	.word	0x24009e54

080028c0 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80028c0:	4a0b      	ldr	r2, [pc, #44]	@ (80028f0 <HAL_JPEG_GetDataCallback+0x30>)
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	440b      	add	r3, r1
    {
 80028c6:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80028c8:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <HAL_JPEG_GetDataCallback+0x34>)
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d20c      	bcs.n	80028ec <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80028d2:	4c09      	ldr	r4, [pc, #36]	@ (80028f8 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80028d4:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80028d6:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80028d8:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80028dc:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80028de:	bf28      	it	cs
 80028e0:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80028e4:	6021      	str	r1, [r4, #0]
        }
    }
 80028e6:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80028e8:	f007 bed6 	b.w	800a698 <HAL_JPEG_ConfigInputBuffer>
    }
 80028ec:	bc30      	pop	{r4, r5}
 80028ee:	4770      	bx	lr
 80028f0:	24009e6c 	.word	0x24009e6c
 80028f4:	24009e68 	.word	0x24009e68
 80028f8:	24009e64 	.word	0x24009e64

080028fc <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80028fe:	4c20      	ldr	r4, [pc, #128]	@ (8002980 <HAL_JPEG_DataReadyCallback+0x84>)
 8002900:	2101      	movs	r1, #1
 8002902:	4d20      	ldr	r5, [pc, #128]	@ (8002984 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002904:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002906:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002908:	4f1f      	ldr	r7, [pc, #124]	@ (8002988 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002914:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002916:	4b1d      	ldr	r3, [pc, #116]	@ (800298c <HAL_JPEG_DataReadyCallback+0x90>)
 8002918:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 800291a:	6822      	ldr	r2, [r4, #0]
 800291c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002920:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68f9      	ldr	r1, [r7, #12]
 8002926:	440a      	add	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d901      	bls.n	800293a <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	5ceb      	ldrb	r3, [r5, r3]
 8002940:	b133      	cbz	r3, 8002950 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002942:	2102      	movs	r1, #2
 8002944:	4630      	mov	r0, r6
 8002946:	f007 fe79 	bl	800a63c <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800294a:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_JPEG_DataReadyCallback+0x94>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002950:	6822      	ldr	r2, [r4, #0]
 8002952:	4630      	mov	r0, r6
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800295a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800295e:	6869      	ldr	r1, [r5, #4]
 8002960:	435a      	muls	r2, r3
 8002962:	f007 fe9c 	bl	800a69e <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002966:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_JPEG_DataReadyCallback+0x98>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	7a1a      	ldrb	r2, [r3, #8]
 800296c:	b93a      	cbnz	r2, 800297e <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 800296e:	7a9b      	ldrb	r3, [r3, #10]
 8002970:	b92b      	cbnz	r3, 800297e <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002974:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800297a:	f00b ba1b 	b.w	800ddb4 <osSemaphoreRelease>
    }
 800297e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002980:	24009e4c 	.word	0x24009e4c
 8002984:	24000010 	.word	0x24000010
 8002988:	24000828 	.word	0x24000828
 800298c:	24000848 	.word	0x24000848
 8002990:	24009e5c 	.word	0x24009e5c
 8002994:	24009e50 	.word	0x24009e50
 8002998:	24000844 	.word	0x24000844

0800299c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 800299e:	e7fe      	b.n	800299e <HAL_JPEG_ErrorCallback+0x2>

080029a0 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 80029a0:	4b01      	ldr	r3, [pc, #4]	@ (80029a8 <HAL_JPEG_DecodeCpltCallback+0x8>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
    }
 80029a6:	4770      	bx	lr
 80029a8:	24009e60 	.word	0x24009e60

080029ac <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 80029ac:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80029ae:	4d16      	ldr	r5, [pc, #88]	@ (8002a08 <JPEG_OutputHandler+0x5c>)
{
 80029b0:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	b113      	cbz	r3, 80029bc <JPEG_OutputHandler+0x10>
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <JPEG_OutputHandler+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	bb1b      	cbnz	r3, 8002a04 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 80029bc:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <JPEG_OutputHandler+0x64>)
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	7a03      	ldrb	r3, [r0, #8]
 80029c2:	b963      	cbnz	r3, 80029de <JPEG_OutputHandler+0x32>
 80029c4:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <JPEG_OutputHandler+0x68>)
 80029c6:	4a14      	ldr	r2, [pc, #80]	@ (8002a18 <JPEG_OutputHandler+0x6c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	5cd3      	ldrb	r3, [r2, r3]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d105      	bne.n	80029de <JPEG_OutputHandler+0x32>
 80029d2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <JPEG_OutputHandler+0x60>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	b913      	cbnz	r3, 80029de <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80029d8:	6803      	ldr	r3, [r0, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80029de:	4a0f      	ldr	r2, [pc, #60]	@ (8002a1c <JPEG_OutputHandler+0x70>)
 80029e0:	6813      	ldr	r3, [r2, #0]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d10c      	bne.n	8002a00 <JPEG_OutputHandler+0x54>
 80029e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <JPEG_OutputHandler+0x74>)
 80029e8:	490b      	ldr	r1, [pc, #44]	@ (8002a18 <JPEG_OutputHandler+0x6c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	b933      	cbnz	r3, 8002a00 <JPEG_OutputHandler+0x54>
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	b923      	cbnz	r3, 8002a00 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80029f6:	2102      	movs	r1, #2
 80029f8:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80029fa:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80029fc:	f008 f87d 	bl	800aafa <HAL_JPEG_Resume>
        return 1;
 8002a00:	2002      	movs	r0, #2
    }

    return 2;
}
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002a04:	2001      	movs	r0, #1
 8002a06:	e7fc      	b.n	8002a02 <JPEG_OutputHandler+0x56>
 8002a08:	24009e60 	.word	0x24009e60
 8002a0c:	2400083c 	.word	0x2400083c
 8002a10:	24009e50 	.word	0x24009e50
 8002a14:	24000840 	.word	0x24000840
 8002a18:	24000010 	.word	0x24000010
 8002a1c:	24009e5c 	.word	0x24009e5c
 8002a20:	24009e4c 	.word	0x24009e4c

08002a24 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4605      	mov	r5, r0
    if (length == 0)
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d035      	beq.n	8002a98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d033      	beq.n	8002a98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002a30:	481a      	ldr	r0, [pc, #104]	@ (8002a9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002a32:	2403      	movs	r4, #3
 8002a34:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002a36:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002a38:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002a3a:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002a3e:	bf18      	it	ne
 8002a40:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002a44:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002a46:	bf18      	it	ne
 8002a48:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002a4a:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002a4c:	0924      	lsrs	r4, r4, #4
 8002a4e:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002a50:	692c      	ldr	r4, [r5, #16]
 8002a52:	f014 040f 	ands.w	r4, r4, #15
 8002a56:	bf18      	it	ne
 8002a58:	f1c4 0410 	rsbne	r4, r4, #16
 8002a5c:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002a5e:	4810      	ldr	r0, [pc, #64]	@ (8002aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002a60:	f7ff feba 	bl	80027d8 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002a64:	4c0f      	ldr	r4, [pc, #60]	@ (8002aa4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 8002a66:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002a68:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8002aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002a6c:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f7ff ff9c 	bl	80029ac <JPEG_OutputHandler>
 8002a74:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d105      	bne.n	8002a88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	f00b f96a 	bl	800dd5c <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d1ef      	bne.n	8002a6e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	4a07      	ldr	r2, [pc, #28]	@ (8002ab0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002a92:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002a94:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
 8002a9a:	bf00      	nop
 8002a9c:	24000828 	.word	0x24000828
 8002aa0:	24000640 	.word	0x24000640
 8002aa4:	24009e58 	.word	0x24009e58
 8002aa8:	24009e50 	.word	0x24009e50
 8002aac:	24000844 	.word	0x24000844
 8002ab0:	24009e60 	.word	0x24009e60
 8002ab4:	2400083c 	.word	0x2400083c

08002ab8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002abc:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002abe:	6943      	ldr	r3, [r0, #20]
{
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	460f      	mov	r7, r1
 8002ac6:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002ac8:	b92b      	cbnz	r3, 8002ad6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002aca:	4b29      	ldr	r3, [pc, #164]	@ (8002b70 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002acc:	21b0      	movs	r1, #176	@ 0xb0
 8002ace:	4a29      	ldr	r2, [pc, #164]	@ (8002b74 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002ad0:	4829      	ldr	r0, [pc, #164]	@ (8002b78 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002ad2:	f022 f919 	bl	8024d08 <__assert_func>
    readData(currentMovieOffset, 8);
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	6981      	ldr	r1, [r0, #24]
 8002ada:	f7ff fcd7 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002ade:	69a6      	ldr	r6, [r4, #24]
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	f7ff fcbf 	bl	8002466 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002ae8:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002aea:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff fcba 	bl	8002466 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002af2:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002af4:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7ff fc9a 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002afc:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002b00:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002b02:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002b04:	1842      	adds	r2, r0, r1
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d226      	bcs.n	8002b58 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002b0a:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002b0e:	459b      	cmp	fp, r3
 8002b10:	d117      	bne.n	8002b42 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002b12:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002b16:	459a      	cmp	sl, r3
 8002b18:	d113      	bne.n	8002b42 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002b1a:	b190      	cbz	r0, 8002b42 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b1c:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002b1e:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7ff fcb3 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002b28:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002b2a:	462a      	mov	r2, r5
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f8cd 8000 	str.w	r8, [sp]
 8002b32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002b36:	463b      	mov	r3, r7
 8002b38:	f7ff ff74 	bl	8002a24 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002b3c:	6963      	ldr	r3, [r4, #20]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002b42:	69a3      	ldr	r3, [r4, #24]
 8002b44:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002b46:	b905      	cbnz	r5, 8002b4a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002b48:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002b4a:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002b4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002b52:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002b54:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002b56:	d109      	bne.n	8002b6c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002b58:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002b5a:	2001      	movs	r0, #1
        frameNumber = 1;
 8002b5c:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002b5e:	6a23      	ldr	r3, [r4, #32]
 8002b60:	61a3      	str	r3, [r4, #24]
}
 8002b62:	f080 0001 	eor.w	r0, r0, #1
 8002b66:	b005      	add	sp, #20
 8002b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	e7f8      	b.n	8002b62 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002b70:	0802625b 	.word	0x0802625b
 8002b74:	0802637a 	.word	0x0802637a
 8002b78:	080261ab 	.word	0x080261ab

08002b7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002b80:	6981      	ldr	r1, [r0, #24]
{
 8002b82:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002b84:	2208      	movs	r2, #8
 8002b86:	f7ff fc81 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002b8a:	69a7      	ldr	r7, [r4, #24]
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	1d39      	adds	r1, r7, #4
 8002b90:	f7ff fc4e 	bl	8002430 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002b94:	f107 0108 	add.w	r1, r7, #8
 8002b98:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002b9a:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff fc75 	bl	800248c <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002ba2:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002ba4:	b16e      	cbz	r6, 8002bc2 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002ba6:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ba8:	4c07      	ldr	r4, [pc, #28]	@ (8002bc8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002baa:	4d08      	ldr	r5, [pc, #32]	@ (8002bcc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002bac:	4633      	mov	r3, r6
 8002bae:	4807      	ldr	r0, [pc, #28]	@ (8002bcc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002bb0:	f7ff fe12 	bl	80027d8 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f7ff fef9 	bl	80029ac <JPEG_OutputHandler>
 8002bba:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f8      	beq.n	8002bb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	24009e58 	.word	0x24009e58
 8002bcc:	24000640 	.word	0x24000640

08002bd0 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <DMA2D_CopyBuffer+0x70>)
 8002bd2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002bd8:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8002bdc:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002bde:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002be0:	4e18      	ldr	r6, [pc, #96]	@ (8002c44 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002be2:	4f19      	ldr	r7, [pc, #100]	@ (8002c48 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002be4:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002be8:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002bec:	434d      	muls	r5, r1
 8002bee:	6911      	ldr	r1, [r2, #16]
 8002bf0:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002bf4:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002bf6:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002bf8:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002bfa:	683f      	ldr	r7, [r7, #0]
 8002bfc:	68d3      	ldr	r3, [r2, #12]
 8002bfe:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c00:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002c02:	45bc      	cmp	ip, r7
 8002c04:	d317      	bcc.n	8002c36 <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c06:	6892      	ldr	r2, [r2, #8]
 8002c08:	f1c2 0210 	rsb	r2, r2, #16
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c10:	4a0e      	ldr	r2, [pc, #56]	@ (8002c4c <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c12:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c16:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c18:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <DMA2D_CopyBuffer+0x74>)
 8002c1c:	4421      	add	r1, r4
 8002c1e:	4429      	add	r1, r5
 8002c20:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002c22:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002c24:	2300      	movs	r3, #0
 8002c26:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002c28:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <DMA2D_CopyBuffer+0x80>)
 8002c2a:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002c2c:	6843      	ldr	r3, [r0, #4]
 8002c2e:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002c30:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <DMA2D_CopyBuffer+0x84>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002c36:	f041 0110 	orr.w	r1, r1, #16
 8002c3a:	6471      	str	r1, [r6, #68]	@ 0x44
 8002c3c:	e7e8      	b.n	8002c10 <DMA2D_CopyBuffer+0x40>
 8002c3e:	bf00      	nop
 8002c40:	24000828 	.word	0x24000828
 8002c44:	52001000 	.word	0x52001000
 8002c48:	24009e54 	.word	0x24009e54
 8002c4c:	24009e70 	.word	0x24009e70
 8002c50:	ff09000b 	.word	0xff09000b
 8002c54:	00012301 	.word	0x00012301

08002c58 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002c5e:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002c60:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002c62:	3101      	adds	r1, #1
 8002c64:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	2901      	cmp	r1, #1
 8002c6a:	d900      	bls.n	8002c6e <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002c6c:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <DMA2D_ExternalJobCompleted+0x38>)
 8002c70:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <DMA2D_ExternalJobCompleted+0x3c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	68c2      	ldr	r2, [r0, #12]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d302      	bcc.n	8002c84 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <DMA2D_ExternalJobCompleted+0x40>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <DMA2D_ExternalJobCompleted+0x44>)
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	f00b b894 	b.w	800ddb4 <osSemaphoreRelease>
 8002c8c:	24000840 	.word	0x24000840
 8002c90:	24009e54 	.word	0x24009e54
 8002c94:	24000828 	.word	0x24000828
 8002c98:	2400083c 	.word	0x2400083c
 8002c9c:	24000844 	.word	0x24000844

08002ca0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2200      	movs	r2, #0
{
 8002ca4:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002ca6:	4608      	mov	r0, r1
 8002ca8:	f00b f80e 	bl	800dcc8 <osSemaphoreNew>
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002cae:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002cb0:	b928      	cbnz	r0, 8002cbe <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002cb4:	2128      	movs	r1, #40	@ 0x28
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002cb8:	480a      	ldr	r0, [pc, #40]	@ (8002ce4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002cba:	f022 f825 	bl	8024d08 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2104      	movs	r1, #4
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f00b f89f 	bl	800de06 <osMessageQueueNew>
 8002cc8:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002cca:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002ccc:	b918      	cbnz	r0, 8002cd6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002cce:	4b07      	ldr	r3, [pc, #28]	@ (8002cec <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002cd0:	212c      	movs	r1, #44	@ 0x2c
 8002cd2:	4a03      	ldr	r2, [pc, #12]	@ (8002ce0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002cd4:	e7f0      	b.n	8002cb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002cd6:	bd08      	pop	{r3, pc}
 8002cd8:	24009e78 	.word	0x24009e78
 8002cdc:	0802641c 	.word	0x0802641c
 8002ce0:	08026465 	.word	0x08026465
 8002ce4:	08026494 	.word	0x08026494
 8002ce8:	24009e74 	.word	0x24009e74
 8002cec:	080264e5 	.word	0x080264e5

08002cf0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002cf0:	4b02      	ldr	r3, [pc, #8]	@ (8002cfc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	f00b b830 	b.w	800dd5c <osSemaphoreAcquire>
 8002cfc:	24009e78 	.word	0x24009e78

08002d00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002d00:	4b01      	ldr	r3, [pc, #4]	@ (8002d08 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	f00b b856 	b.w	800ddb4 <osSemaphoreRelease>
 8002d08:	24009e78 	.word	0x24009e78

08002d0c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002d0c:	4b02      	ldr	r3, [pc, #8]	@ (8002d18 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002d0e:	2100      	movs	r1, #0
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	f00b b823 	b.w	800dd5c <osSemaphoreAcquire>
 8002d16:	bf00      	nop
 8002d18:	24009e78 	.word	0x24009e78

08002d1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002d1c:	f7ff bff0 	b.w	8002d00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002d20 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002d20:	2300      	movs	r3, #0
 8002d22:	4803      	ldr	r0, [pc, #12]	@ (8002d30 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002d24:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002d26:	461a      	mov	r2, r3
 8002d28:	6800      	ldr	r0, [r0, #0]
 8002d2a:	f00b b8a7 	b.w	800de7c <osMessageQueuePut>
 8002d2e:	bf00      	nop
 8002d30:	24009e74 	.word	0x24009e74
 8002d34:	24000030 	.word	0x24000030

08002d38 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002d38:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	4c07      	ldr	r4, [pc, #28]	@ (8002d5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002d3e:	a901      	add	r1, sp, #4
 8002d40:	461a      	mov	r2, r3
 8002d42:	6820      	ldr	r0, [r4, #0]
 8002d44:	f00b f8cb 	bl	800dede <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	a901      	add	r1, sp, #4
 8002d50:	6820      	ldr	r0, [r4, #0]
 8002d52:	f00b f8c4 	bl	800dede <osMessageQueueGet>
}
 8002d56:	b002      	add	sp, #8
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	bf00      	nop
 8002d5c:	24009e74 	.word	0x24009e74

08002d60 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002d60:	6803      	ldr	r3, [r0, #0]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d64:	4718      	bx	r3

08002d66 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002d66:	2001      	movs	r0, #1
 8002d68:	4770      	bx	lr

08002d6a <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002d6a:	e7fe      	b.n	8002d6a <DMA2D_XferErrorCallback>

08002d6c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002d6c:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002d70:	4770      	bx	lr
	...

08002d74 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002d74:	b510      	push	{r4, lr}
 8002d76:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002d80:	f00a ff60 	bl	800dc44 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002d84:	6860      	ldr	r0, [r4, #4]
 8002d86:	6803      	ldr	r3, [r0, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4798      	blx	r3
 8002d8c:	b978      	cbnz	r0, 8002dae <_ZN8STM32DMA5startEv+0x3a>
 8002d8e:	7a63      	ldrb	r3, [r4, #9]
 8002d90:	b16b      	cbz	r3, 8002dae <_ZN8STM32DMA5startEv+0x3a>
 8002d92:	7a23      	ldrb	r3, [r4, #8]
 8002d94:	b95b      	cbnz	r3, 8002dae <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002d96:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002da2:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002daa:	f00a bf6e 	b.w	800dc8a <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002dae:	490b      	ldr	r1, [pc, #44]	@ (8002ddc <_ZN8STM32DMA5startEv+0x68>)
 8002db0:	4a0b      	ldr	r2, [pc, #44]	@ (8002de0 <_ZN8STM32DMA5startEv+0x6c>)
 8002db2:	680b      	ldr	r3, [r1, #0]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d1f2      	bne.n	8002da2 <_ZN8STM32DMA5startEv+0x2e>
 8002dbc:	7a20      	ldrb	r0, [r4, #8]
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d1ef      	bne.n	8002da2 <_ZN8STM32DMA5startEv+0x2e>
 8002dc2:	7aa0      	ldrb	r0, [r4, #10]
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d1ec      	bne.n	8002da2 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dc8:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002dca:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dce:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002dd2:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd4:	f7ff fefc 	bl	8002bd0 <DMA2D_CopyBuffer>
    }
 8002dd8:	e7e3      	b.n	8002da2 <_ZN8STM32DMA5startEv+0x2e>
 8002dda:	bf00      	nop
 8002ddc:	24000840 	.word	0x24000840
 8002de0:	24000010 	.word	0x24000010

08002de4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002dea:	6003      	str	r3, [r0, #0]
 8002dec:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <_ZN8STM32DMAD1Ev+0x1c>)
 8002dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002df2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002df6:	f3bf 8f6f 	isb	sy
}
 8002dfa:	4770      	bx	lr
 8002dfc:	08026688 	.word	0x08026688
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002e04:	b510      	push	{r4, lr}
 8002e06:	4604      	mov	r4, r0
}
 8002e08:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002e0c:	f7ff ffea 	bl	8002de4 <_ZN8STM32DMAD1Ev>
 8002e10:	4620      	mov	r0, r4
 8002e12:	f021 fc02 	bl	802461a <_ZdlPvj>
 8002e16:	4620      	mov	r0, r4
 8002e18:	bd10      	pop	{r4, pc}
	...

08002e1c <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e1c:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002e1e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e20:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002e24:	f042 0210 	orr.w	r2, r2, #16
 8002e28:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002e2c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002e30:	f002 0210 	and.w	r2, r2, #16
 8002e34:	9201      	str	r2, [sp, #4]
 8002e36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002e38:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002e3a:	f042 0210 	orr.w	r2, r2, #16
 8002e3e:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002e40:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002e42:	f022 0210 	bic.w	r2, r2, #16
 8002e46:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <_ZN8STM32DMA10initializeEv+0x48>)
 8002e4a:	4a07      	ldr	r2, [pc, #28]	@ (8002e68 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002e4c:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002e4e:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <_ZN8STM32DMA10initializeEv+0x50>)
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <_ZN8STM32DMA10initializeEv+0x54>)
 8002e54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e58:	609a      	str	r2, [r3, #8]
}
 8002e5a:	b002      	add	sp, #8
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	58024400 	.word	0x58024400
 8002e64:	240006b4 	.word	0x240006b4
 8002e68:	080030b9 	.word	0x080030b9
 8002e6c:	08002d6b 	.word	0x08002d6b
 8002e70:	e000e100 	.word	0xe000e100

08002e74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002e74:	b508      	push	{r3, lr}
    switch (format)
 8002e76:	280a      	cmp	r0, #10
 8002e78:	d809      	bhi.n	8002e8e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002e7a:	e8df f000 	tbb	[pc, r0]
 8002e7e:	1006      	.short	0x1006
 8002e80:	0808080e 	.word	0x0808080e
 8002e84:	10101008 	.word	0x10101008
 8002e88:	10          	.byte	0x10
 8002e89:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002e8a:	2002      	movs	r0, #2
}
 8002e8c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002e8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002e90:	2191      	movs	r1, #145	@ 0x91
 8002e92:	4a05      	ldr	r2, [pc, #20]	@ (8002ea8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002e94:	4805      	ldr	r0, [pc, #20]	@ (8002eac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002e96:	f021 ff37 	bl	8024d08 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	e7f6      	b.n	8002e8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002e9e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002ea0:	e7f4      	b.n	8002e8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002ea2:	bf00      	nop
 8002ea4:	08026527 	.word	0x08026527
 8002ea8:	08026542 	.word	0x08026542
 8002eac:	0802658d 	.word	0x0802658d

08002eb0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002eb4:	7f88      	ldrb	r0, [r1, #30]
 8002eb6:	f7ff ffdd 	bl	8002e74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002eba:	4b12      	ldr	r3, [pc, #72]	@ (8002f04 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ebc:	8aa5      	ldrh	r5, [r4, #20]
 8002ebe:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002ec0:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ec2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ec6:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002eca:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ecc:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ece:	1b52      	subs	r2, r2, r5
 8002ed0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002ed2:	6825      	ldr	r5, [r4, #0]
 8002ed4:	2d08      	cmp	r5, #8
 8002ed6:	d10e      	bne.n	8002ef6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ed8:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002eda:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002edc:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002ee0:	7f20      	ldrb	r0, [r4, #28]
 8002ee2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002ee6:	61da      	str	r2, [r3, #28]
        return color;
 8002ee8:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002eea:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002eec:	4a07      	ldr	r2, [pc, #28]	@ (8002f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002eee:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ef0:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002ef2:	601a      	str	r2, [r3, #0]
    }
}
 8002ef4:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002ef6:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ef8:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002efa:	611a      	str	r2, [r3, #16]
 8002efc:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002f00:	4a03      	ldr	r2, [pc, #12]	@ (8002f10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002f02:	e7f6      	b.n	8002ef2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002f04:	52001000 	.word	0x52001000
 8002f08:	00010009 	.word	0x00010009
 8002f0c:	00022301 	.word	0x00022301
 8002f10:	00032301 	.word	0x00032301

08002f14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002f14:	b508      	push	{r3, lr}
    switch (format)
 8002f16:	280b      	cmp	r0, #11
 8002f18:	d80b      	bhi.n	8002f32 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002f1a:	e8df f000 	tbb	[pc, r0]
 8002f1e:	1206      	.short	0x1206
 8002f20:	0a0a0a10 	.word	0x0a0a0a10
 8002f24:	0808080a 	.word	0x0808080a
 8002f28:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002f2a:	2002      	movs	r0, #2
}
 8002f2c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002f2e:	2005      	movs	r0, #5
        break;
 8002f30:	e7fc      	b.n	8002f2c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002f34:	2170      	movs	r1, #112	@ 0x70
 8002f36:	4a05      	ldr	r2, [pc, #20]	@ (8002f4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002f38:	4805      	ldr	r0, [pc, #20]	@ (8002f50 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002f3a:	f021 fee5 	bl	8024d08 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002f3e:	2000      	movs	r0, #0
 8002f40:	e7f4      	b.n	8002f2c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002f42:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002f44:	e7f2      	b.n	8002f2c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002f46:	bf00      	nop
 8002f48:	08026527 	.word	0x08026527
 8002f4c:	080265dc 	.word	0x080265dc
 8002f50:	0802658d 	.word	0x0802658d

08002f54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002f58:	7f4f      	ldrb	r7, [r1, #29]
{
 8002f5a:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	f7ff ffd9 	bl	8002f14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002f62:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002f66:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f7ff ffd3 	bl	8002f14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002f6e:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002f70:	4628      	mov	r0, r5
 8002f72:	f7ff ff7f 	bl	8002e74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f76:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002f7a:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002f7e:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f82:	4b45      	ldr	r3, [pc, #276]	@ (8003098 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002f84:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002f86:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f88:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002f8a:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002f8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002f8e:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002f92:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002f94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f98:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002f9e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fa2:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002fa4:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002fa6:	f8d9 4000 	ldr.w	r4, [r9]
 8002faa:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002fae:	2c80      	cmp	r4, #128	@ 0x80
 8002fb0:	d022      	beq.n	8002ff8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002fb2:	d80f      	bhi.n	8002fd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002fb4:	2c20      	cmp	r4, #32
 8002fb6:	d066      	beq.n	8003086 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002fb8:	2c40      	cmp	r4, #64	@ 0x40
 8002fba:	d064      	beq.n	8003086 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002fbc:	2c04      	cmp	r4, #4
 8002fbe:	d05c      	beq.n	800307a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fc0:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002fc4:	4b34      	ldr	r3, [pc, #208]	@ (8003098 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002fc6:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fc8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002fcc:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002fce:	d060      	beq.n	8003092 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002fd0:	4a32      	ldr	r2, [pc, #200]	@ (800309c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002fd2:	e03f      	b.n	8003054 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002fd4:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002fd8:	d004      	beq.n	8002fe4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002fda:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002fde:	d1ef      	bne.n	8002fc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fe0:	482f      	ldr	r0, [pc, #188]	@ (80030a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002fe2:	e000      	b.n	8002fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fe4:	482f      	ldr	r0, [pc, #188]	@ (80030a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fe6:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002fea:	61da      	str	r2, [r3, #28]
 8002fec:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002ff0:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ff2:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ff4:	6159      	str	r1, [r3, #20]
 8002ff6:	e02c      	b.n	8003052 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ff8:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002ffc:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003000:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003004:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003006:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003008:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800300a:	1d21      	adds	r1, r4, #4
 800300c:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800300e:	7821      	ldrb	r1, [r4, #0]
 8003010:	b141      	cbz	r1, 8003024 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003012:	2901      	cmp	r1, #1
 8003014:	d021      	beq.n	800305a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8003016:	4b24      	ldr	r3, [pc, #144]	@ (80030a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8003018:	f240 110b 	movw	r1, #267	@ 0x10b
 800301c:	4a23      	ldr	r2, [pc, #140]	@ (80030ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 800301e:	4824      	ldr	r0, [pc, #144]	@ (80030b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003020:	f021 fe72 	bl	8024d08 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	8861      	ldrh	r1, [r4, #2]
 8003028:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800302c:	3901      	subs	r1, #1
 800302e:	f022 0210 	bic.w	r2, r2, #16
 8003032:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003036:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8003038:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800303a:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800303c:	69d9      	ldr	r1, [r3, #28]
 800303e:	f041 0120 	orr.w	r1, r1, #32
 8003042:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003044:	69d9      	ldr	r1, [r3, #28]
 8003046:	0689      	lsls	r1, r1, #26
 8003048:	d4fc      	bmi.n	8003044 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800304a:	2110      	movs	r1, #16
 800304c:	6099      	str	r1, [r3, #8]
            if (blend)
 800304e:	2a00      	cmp	r2, #0
 8003050:	d0be      	beq.n	8002fd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003052:	4a18      	ldr	r2, [pc, #96]	@ (80030b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800305a:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 800305c:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800305e:	8860      	ldrh	r0, [r4, #2]
 8003060:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8003064:	bf18      	it	ne
 8003066:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003068:	3801      	subs	r0, #1
 800306a:	f021 0110 	bic.w	r1, r1, #16
 800306e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003072:	f041 0110 	orr.w	r1, r1, #16
 8003076:	61d9      	str	r1, [r3, #28]
                break;
 8003078:	e7df      	b.n	800303a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800307a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 800307e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003082:	61da      	str	r2, [r3, #28]
 8003084:	e7b5      	b.n	8002ff2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8003086:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 800308a:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800308c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003090:	e7f7      	b.n	8003082 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003092:	f242 3201 	movw	r2, #8961	@ 0x2301
 8003096:	e7dd      	b.n	8003054 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8003098:	52001000 	.word	0x52001000
 800309c:	00012301 	.word	0x00012301
 80030a0:	00020009 	.word	0x00020009
 80030a4:	0002000a 	.word	0x0002000a
 80030a8:	08026626 	.word	0x08026626
 80030ac:	08026640 	.word	0x08026640
 80030b0:	0802658d 	.word	0x0802658d
 80030b4:	00022301 	.word	0x00022301

080030b8 <DMA2D_XferCpltCallback>:
 80030b8:	4b02      	ldr	r3, [pc, #8]	@ (80030c4 <DMA2D_XferCpltCallback+0xc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80030be:	6803      	ldr	r3, [r0, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4718      	bx	r3
 80030c4:	2402641c 	.word	0x2402641c

080030c8 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 80030c8:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 80030cc:	b510      	push	{r4, lr}
 80030ce:	4604      	mov	r4, r0
        if (!started_by_external_job)
 80030d0:	b9d3      	cbnz	r3, 8003108 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 80030d2:	6803      	ldr	r3, [r0, #0]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 80030d8:	4919      	ldr	r1, [pc, #100]	@ (8003140 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 80030da:	4a1a      	ldr	r2, [pc, #104]	@ (8003144 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 80030dc:	680b      	ldr	r3, [r1, #0]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12a      	bne.n	800313c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80030e6:	4818      	ldr	r0, [pc, #96]	@ (8003148 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 80030e8:	6800      	ldr	r0, [r0, #0]
 80030ea:	bb38      	cbnz	r0, 800313c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80030ec:	7a20      	ldrb	r0, [r4, #8]
 80030ee:	bb28      	cbnz	r0, 800313c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80030f0:	7aa0      	ldrb	r0, [r4, #10]
 80030f2:	bb18      	cbnz	r0, 800313c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80030f4:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 80030f6:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 80030fa:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80030fc:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003104:	f7ff bd64 	b.w	8002bd0 <DMA2D_CopyBuffer>
        if (isRunning)
 8003108:	7a03      	ldrb	r3, [r0, #8]
 800310a:	b143      	cbz	r3, 800311e <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 800310c:	2300      	movs	r3, #0
 800310e:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003116:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800311a:	f7ff fd9d 	bl	8002c58 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 800311e:	6860      	ldr	r0, [r4, #4]
 8003120:	6803      	ldr	r3, [r0, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4798      	blx	r3
 8003126:	b948      	cbnz	r0, 800313c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003128:	7a63      	ldrb	r3, [r4, #9]
 800312a:	b13b      	cbz	r3, 800313c <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 800312c:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 800312e:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8003132:	4620      	mov	r0, r4
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8003136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 800313a:	4718      	bx	r3
    }
 800313c:	bd10      	pop	{r4, pc}
 800313e:	bf00      	nop
 8003140:	24000840 	.word	0x24000840
 8003144:	24000010 	.word	0x24000010
 8003148:	2400083c 	.word	0x2400083c

0800314c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003150:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <_ZN8STM32DMAC1Ev+0x40>)
 8003152:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003154:	2600      	movs	r6, #0
 8003156:	4625      	mov	r5, r4
 8003158:	2260      	movs	r2, #96	@ 0x60
 800315a:	6060      	str	r0, [r4, #4]
 800315c:	7226      	strb	r6, [r4, #8]
 800315e:	7266      	strb	r6, [r4, #9]
 8003160:	f845 3b20 	str.w	r3, [r5], #32
 8003164:	4629      	mov	r1, r5
 8003166:	f00e fb3f 	bl	80117e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800316a:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 800316e:	60ee      	str	r6, [r5, #12]
 8003170:	3524      	adds	r5, #36	@ 0x24
 8003172:	429d      	cmp	r5, r3
 8003174:	d1fb      	bne.n	800316e <_ZN8STM32DMAC1Ev+0x22>
 8003176:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 800317a:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 800317c:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8003180:	f00a fd2b 	bl	800dbda <osMutexNew>
 8003184:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8003188:	4620      	mov	r0, r4
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	08026688 	.word	0x08026688

08003190 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	07d2      	lsls	r2, r2, #31
 8003196:	d4fc      	bmi.n	8003192 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003198:	2223      	movs	r2, #35	@ 0x23
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	52001000 	.word	0x52001000

080031a4 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80031a4:	4a0b      	ldr	r2, [pc, #44]	@ (80031d4 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80031a6:	6953      	ldr	r3, [r2, #20]
 80031a8:	03db      	lsls	r3, r3, #15
 80031aa:	d511      	bpl.n	80031d0 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80031ac:	2900      	cmp	r1, #0
 80031ae:	dd0f      	ble.n	80031d0 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80031b0:	f000 031f 	and.w	r3, r0, #31
 80031b4:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80031b6:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80031ba:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80031bc:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80031c0:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80031c2:	1a0b      	subs	r3, r1, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	dcf9      	bgt.n	80031bc <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 80031c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80031cc:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 80031d8:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80031da:	4c10      	ldr	r4, [pc, #64]	@ (800321c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 80031dc:	6825      	ldr	r5, [r4, #0]
 80031de:	07ed      	lsls	r5, r5, #31
 80031e0:	d4fc      	bmi.n	80031dc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031e2:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80031e4:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 80031e6:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80031e8:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80031ea:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80031ee:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80031f2:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80031f4:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80031f6:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 80031f8:	d00c      	beq.n	8003214 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80031fa:	4909      	ldr	r1, [pc, #36]	@ (8003220 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80031fc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003200:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003202:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8003206:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800320a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 800320c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800320e:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003210:	6023      	str	r3, [r4, #0]
    }
}
 8003212:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003214:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003216:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003218:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800321a:	e7f9      	b.n	8003210 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 800321c:	52001000 	.word	0x52001000
 8003220:	00010009 	.word	0x00010009
 8003224:	00020001 	.word	0x00020001
 8003228:	00030001 	.word	0x00030001

0800322c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 800322c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800322e:	4c0e      	ldr	r4, [pc, #56]	@ (8003268 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003230:	6825      	ldr	r5, [r4, #0]
 8003232:	07ed      	lsls	r5, r5, #31
 8003234:	d4fc      	bmi.n	8003230 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003236:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003238:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 800323a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800323c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800323e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003242:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003246:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003248:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800324a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 800324c:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 800324e:	d007      	beq.n	8003260 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003250:	4a06      	ldr	r2, [pc, #24]	@ (800326c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8003252:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8003256:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003258:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800325a:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800325c:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 800325e:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8003262:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003264:	6025      	str	r5, [r4, #0]
}
 8003266:	e7fa      	b.n	800325e <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8003268:	52001000 	.word	0x52001000
 800326c:	00020001 	.word	0x00020001
 8003270:	ff020001 	.word	0xff020001

08003274 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003274:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003276:	4c0b      	ldr	r4, [pc, #44]	@ (80032a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8003278:	6825      	ldr	r5, [r4, #0]
 800327a:	07ed      	lsls	r5, r5, #31
 800327c:	d4fc      	bmi.n	8003278 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800327e:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003280:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003282:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003284:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003286:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800328c:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800328e:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003290:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003292:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003294:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003296:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800329a:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800329c:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800329e:	6023      	str	r3, [r4, #0]
}
 80032a0:	bd30      	pop	{r4, r5, pc}
 80032a2:	bf00      	nop
 80032a4:	52001000 	.word	0x52001000
 80032a8:	00020001 	.word	0x00020001

080032ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80032ac:	2001      	movs	r0, #1
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80032b0:	2040      	movs	r0, #64	@ 0x40
 80032b2:	4770      	bx	lr

080032b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80032b4:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
 80032b8:	3008      	adds	r0, #8
 80032ba:	4770      	bx	lr

080032bc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80032bc:	eb00 1081 	add.w	r0, r0, r1, lsl #6
    }
 80032c0:	3008      	adds	r0, #8
 80032c2:	4770      	bx	lr

080032c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80032c4:	2001      	movs	r0, #1
 80032c6:	4770      	bx	lr

080032c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80032c8:	f241 3004 	movw	r0, #4868	@ 0x1304
 80032cc:	4770      	bx	lr

080032ce <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80032ce:	f241 3304 	movw	r3, #4868	@ 0x1304
 80032d2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80032d6:	3008      	adds	r0, #8
 80032d8:	4770      	bx	lr

080032da <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80032da:	f241 3304 	movw	r3, #4868	@ 0x1304
 80032de:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80032e2:	3008      	adds	r0, #8
 80032e4:	4770      	bx	lr

080032e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80032e6:	2001      	movs	r0, #1
 80032e8:	4770      	bx	lr

080032ea <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80032ea:	2010      	movs	r0, #16
 80032ec:	4770      	bx	lr

080032ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80032ee:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80032f2:	3008      	adds	r0, #8
 80032f4:	4770      	bx	lr

080032f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80032f6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80032fa:	3008      	adds	r0, #8
 80032fc:	4770      	bx	lr

080032fe <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80032fe:	4608      	mov	r0, r1
 8003300:	f001 b82a 	b.w	8004358 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08003304 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8003306:	b510      	push	{r4, lr}
 8003308:	4604      	mov	r4, r0
 800330a:	6003      	str	r3, [r0, #0]
 800330c:	f00c fdbf 	bl	800fe8e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003310:	4620      	mov	r0, r4
 8003312:	bd10      	pop	{r4, pc}
 8003314:	08026740 	.word	0x08026740

08003318 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	f7ff fff2 	bl	8003304 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003320:	2148      	movs	r1, #72	@ 0x48
 8003322:	4620      	mov	r0, r4
 8003324:	f021 f979 	bl	802461a <_ZdlPvj>
 8003328:	4620      	mov	r0, r4
 800332a:	bd10      	pop	{r4, pc}

0800332c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800332e:	b510      	push	{r4, lr}
 8003330:	4604      	mov	r4, r0
 8003332:	6003      	str	r3, [r0, #0]
 8003334:	f00c fdab 	bl	800fe8e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003338:	4620      	mov	r0, r4
 800333a:	bd10      	pop	{r4, pc}
 800333c:	0802670c 	.word	0x0802670c

08003340 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003340:	b510      	push	{r4, lr}
 8003342:	4604      	mov	r4, r0
 8003344:	f7ff fff2 	bl	800332c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003348:	f241 310c 	movw	r1, #4876	@ 0x130c
 800334c:	4620      	mov	r0, r4
 800334e:	f021 f964 	bl	802461a <_ZdlPvj>
 8003352:	4620      	mov	r0, r4
 8003354:	bd10      	pop	{r4, pc}
	...

08003358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003358:	4b03      	ldr	r3, [pc, #12]	@ (8003368 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800335a:	b510      	push	{r4, lr}
 800335c:	4604      	mov	r4, r0
 800335e:	6003      	str	r3, [r0, #0]
 8003360:	f00c fd95 	bl	800fe8e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003364:	4620      	mov	r0, r4
 8003366:	bd10      	pop	{r4, pc}
 8003368:	080266d8 	.word	0x080266d8

0800336c <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800336c:	b510      	push	{r4, lr}
 800336e:	4604      	mov	r4, r0
 8003370:	f7ff fff2 	bl	8003358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003374:	2118      	movs	r1, #24
 8003376:	4620      	mov	r0, r4
 8003378:	f021 f94f 	bl	802461a <_ZdlPvj>
 800337c:	4620      	mov	r0, r4
 800337e:	bd10      	pop	{r4, pc}

08003380 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003380:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <_ZN12FrontendHeapD1Ev+0x28>)
 8003382:	b510      	push	{r4, lr}
 8003384:	4604      	mov	r4, r0
 8003386:	6003      	str	r3, [r0, #0]
 8003388:	f500 5099 	add.w	r0, r0, #4896	@ 0x1320
 800338c:	3018      	adds	r0, #24
 800338e:	f7ff ffb9 	bl	8003304 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003392:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003396:	f7ff ffc9 	bl	800332c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800339a:	f104 0014 	add.w	r0, r4, #20
 800339e:	f7ff ffdb 	bl	8003358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22WaitingScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033a2:	4620      	mov	r0, r4
 80033a4:	bd10      	pop	{r4, pc}
 80033a6:	bf00      	nop
 80033a8:	08026774 	.word	0x08026774

080033ac <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80033ac:	b508      	push	{r3, lr}
 80033ae:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <__tcf_0+0xc>)
 80033b0:	f7ff ffe6 	bl	8003380 <_ZN12FrontendHeapD1Ev>
 80033b4:	bd08      	pop	{r3, pc}
 80033b6:	bf00      	nop
 80033b8:	2400ad34 	.word	0x2400ad34

080033bc <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80033bc:	b510      	push	{r4, lr}
 80033be:	4604      	mov	r4, r0
 80033c0:	f7ff ffde 	bl	8003380 <_ZN12FrontendHeapD1Ev>
 80033c4:	f44f 51a7 	mov.w	r1, #5344	@ 0x14e0
 80033c8:	4620      	mov	r0, r4
 80033ca:	f021 f926 	bl	802461a <_ZdlPvj>
 80033ce:	4620      	mov	r0, r4
 80033d0:	bd10      	pop	{r4, pc}
	...

080033d4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80033d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80033d8:	f000 fc52 	bl	8003c80 <_ZN14BitmapDatabase11getInstanceEv>
 80033dc:	2400      	movs	r4, #0
 80033de:	4605      	mov	r5, r0
 80033e0:	f000 fc52 	bl	8003c88 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80033e4:	4623      	mov	r3, r4
 80033e6:	4601      	mov	r1, r0
 80033e8:	4622      	mov	r2, r4
 80033ea:	4628      	mov	r0, r5
 80033ec:	9400      	str	r4, [sp, #0]
 80033ee:	f016 fb3d 	bl	8019a6c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80033f2:	4b27      	ldr	r3, [pc, #156]	@ (8003490 <touchgfx_init+0xbc>)
 80033f4:	4a27      	ldr	r2, [pc, #156]	@ (8003494 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80033f6:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80033f8:	4d27      	ldr	r5, [pc, #156]	@ (8003498 <touchgfx_init+0xc4>)
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f003 f868 	bl	80064d0 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003400:	4b26      	ldr	r3, [pc, #152]	@ (800349c <touchgfx_init+0xc8>)
 8003402:	4a27      	ldr	r2, [pc, #156]	@ (80034a0 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003404:	4827      	ldr	r0, [pc, #156]	@ (80034a4 <touchgfx_init+0xd0>)
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	f016 f9dc 	bl	80197c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	f3bf 8f5b 	dmb	ish
 8003412:	07db      	lsls	r3, r3, #31
 8003414:	d436      	bmi.n	8003484 <touchgfx_init+0xb0>
 8003416:	4628      	mov	r0, r5
 8003418:	f021 f901 	bl	802461e <__cxa_guard_acquire>
 800341c:	b390      	cbz	r0, 8003484 <touchgfx_init+0xb0>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800341e:	4c22      	ldr	r4, [pc, #136]	@ (80034a8 <touchgfx_init+0xd4>)
          screenStorage(scr),
          transitionStorage(tra),
 8003420:	4f22      	ldr	r7, [pc, #136]	@ (80034ac <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003422:	4b23      	ldr	r3, [pc, #140]	@ (80034b0 <touchgfx_init+0xdc>)
        : presenterStorage(pres),
 8003424:	f104 0014 	add.w	r0, r4, #20
          frontendApplication(app)
 8003428:	f107 064c 	add.w	r6, r7, #76	@ 0x4c
          screenStorage(scr),
 800342c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8003430:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003432:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003434:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003438:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 800343a:	6126      	str	r6, [r4, #16]
 800343c:	f00c fd28 	bl	800fe90 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003440:	4b1c      	ldr	r3, [pc, #112]	@ (80034b4 <touchgfx_init+0xe0>)
 8003442:	4640      	mov	r0, r8
 8003444:	6163      	str	r3, [r4, #20]
 8003446:	f00c fd23 	bl	800fe90 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800344a:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <touchgfx_init+0xe4>)
 800344c:	4638      	mov	r0, r7
 800344e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003450:	f00c fd1e 	bl	800fe90 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003454:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8003458:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <touchgfx_init+0xe8>)
 800345a:	f504 509c 	add.w	r0, r4, #4992	@ 0x1380
 800345e:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
 8003462:	f003 fa37 	bl	80068d4 <_ZN5ModelC1Ev>
 8003466:	4622      	mov	r2, r4
 8003468:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800346c:	4630      	mov	r0, r6
 800346e:	f003 fa27 	bl	80068c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003472:	4630      	mov	r0, r6
 8003474:	f000 ff70 	bl	8004358 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8003478:	4811      	ldr	r0, [pc, #68]	@ (80034c0 <touchgfx_init+0xec>)
 800347a:	f021 fc63 	bl	8024d44 <atexit>
 800347e:	4628      	mov	r0, r5
 8003480:	f021 f8d9 	bl	8024636 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003484:	480f      	ldr	r0, [pc, #60]	@ (80034c4 <touchgfx_init+0xf0>)
}
 8003486:	b002      	add	sp, #8
 8003488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800348c:	f7fe bcda 	b.w	8001e44 <_ZN11TouchGFXHAL10initializeEv>
 8003490:	24026480 	.word	0x24026480
 8003494:	24009ef8 	.word	0x24009ef8
 8003498:	2400ad30 	.word	0x2400ad30
 800349c:	24009f18 	.word	0x24009f18
 80034a0:	24009efc 	.word	0x24009efc
 80034a4:	24000034 	.word	0x24000034
 80034a8:	2400ad34 	.word	0x2400ad34
 80034ac:	2400c06c 	.word	0x2400c06c
 80034b0:	08026774 	.word	0x08026774
 80034b4:	080266d8 	.word	0x080266d8
 80034b8:	0802670c 	.word	0x0802670c
 80034bc:	08026740 	.word	0x08026740
 80034c0:	080033ad 	.word	0x080033ad
 80034c4:	24009e7c 	.word	0x24009e7c

080034c8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80034c8:	4770      	bx	lr
	...

080034cc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80034cc:	4801      	ldr	r0, [pc, #4]	@ (80034d4 <touchgfx_taskEntry+0x8>)
 80034ce:	f7fe bccb 	b.w	8001e68 <_ZN11TouchGFXHAL9taskEntryEv>
 80034d2:	bf00      	nop
 80034d4:	24009e7c 	.word	0x24009e7c

080034d8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80034d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80034da:	4c0e      	ldr	r4, [pc, #56]	@ (8003514 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80034dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003518 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80034de:	4e0f      	ldr	r6, [pc, #60]	@ (800351c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80034e0:	4620      	mov	r0, r4
static LCD24bpp display;
 80034e2:	4d0f      	ldr	r5, [pc, #60]	@ (8003520 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80034e4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80034e6:	f7ff fe31 	bl	800314c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80034ea:	4628      	mov	r0, r5
 80034ec:	f01a f928 	bl	801d740 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80034f0:	480c      	ldr	r0, [pc, #48]	@ (8003524 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80034f2:	f014 fa1f 	bl	8017934 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80034f6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80034fa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80034fe:	4621      	mov	r1, r4
 8003500:	4809      	ldr	r0, [pc, #36]	@ (8003528 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003502:	e9cd 3200 	strd	r3, r2, [sp]
 8003506:	4633      	mov	r3, r6
 8003508:	462a      	mov	r2, r5
 800350a:	f7fe fd41 	bl	8001f90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800350e:	b002      	add	sp, #8
 8003510:	bd70      	pop	{r4, r5, r6, pc}
 8003512:	bf00      	nop
 8003514:	24009f84 	.word	0x24009f84
 8003518:	08025ee8 	.word	0x08025ee8
 800351c:	2400ad2c 	.word	0x2400ad2c
 8003520:	24009f18 	.word	0x24009f18
 8003524:	24009efc 	.word	0x24009efc
 8003528:	24009e7c 	.word	0x24009e7c

0800352c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800352c:	4801      	ldr	r0, [pc, #4]	@ (8003534 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800352e:	f7ff bc59 	b.w	8002de4 <_ZN8STM32DMAD1Ev>
 8003532:	bf00      	nop
 8003534:	24009f84 	.word	0x24009f84

08003538 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003538:	2000      	movs	r0, #0
 800353a:	4770      	bx	lr

0800353c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800353c:	8081      	strh	r1, [r0, #4]
    }
 800353e:	4770      	bx	lr

08003540 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003540:	80c1      	strh	r1, [r0, #6]
    }
 8003542:	4770      	bx	lr

08003544 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003544:	8101      	strh	r1, [r0, #8]
    }
 8003546:	4770      	bx	lr

08003548 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003548:	8141      	strh	r1, [r0, #10]
    }
 800354a:	4770      	bx	lr

0800354c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800354c:	4770      	bx	lr

0800354e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800354e:	4770      	bx	lr

08003550 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003550:	4770      	bx	lr

08003552 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003552:	4770      	bx	lr

08003554 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003554:	4770      	bx	lr

08003556 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003556:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003558:	88c4      	ldrh	r4, [r0, #6]
 800355a:	6803      	ldr	r3, [r0, #0]
 800355c:	1b12      	subs	r2, r2, r4
 800355e:	8884      	ldrh	r4, [r0, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	1b09      	subs	r1, r1, r4
 8003564:	b212      	sxth	r2, r2
    }
 8003566:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800356a:	b209      	sxth	r1, r1
 800356c:	4718      	bx	r3

0800356e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800356e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003572:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003574:	f04f 33ff 	mov.w	r3, #4294967295
 8003578:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800357a:	6813      	ldr	r3, [r2, #0]
 800357c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800357e:	6010      	str	r0, [r2, #0]
    }
 8003580:	4770      	bx	lr

08003582 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003582:	2000      	movs	r0, #0
 8003584:	4770      	bx	lr

08003586 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003586:	888b      	ldrh	r3, [r1, #4]
 8003588:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800358a:	2001      	movs	r0, #1
 800358c:	4770      	bx	lr

0800358e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800358e:	4770      	bx	lr

08003590 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003590:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003594:	4770      	bx	lr

08003596 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003596:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800359a:	4770      	bx	lr

0800359c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800359c:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800359e:	b510      	push	{r4, lr}
        return rect.width;
 80035a0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80035a4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80035a8:	8002      	strh	r2, [r0, #0]
 80035aa:	8042      	strh	r2, [r0, #2]
 80035ac:	8084      	strh	r4, [r0, #4]
 80035ae:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80035b0:	bd10      	pop	{r4, pc}

080035b2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80035b2:	2200      	movs	r2, #0
 80035b4:	8002      	strh	r2, [r0, #0]
 80035b6:	8042      	strh	r2, [r0, #2]
 80035b8:	8082      	strh	r2, [r0, #4]
 80035ba:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80035bc:	4770      	bx	lr

080035be <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80035be:	7701      	strb	r1, [r0, #28]
    }
 80035c0:	4770      	bx	lr

080035c2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80035c2:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80035c6:	4770      	bx	lr

080035c8 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80035c8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80035cc:	4770      	bx	lr

080035ce <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80035ce:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80035d2:	4770      	bx	lr

080035d4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80035d4:	2001      	movs	r0, #1
 80035d6:	4770      	bx	lr

080035d8 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80035d8:	3098      	adds	r0, #152	@ 0x98
 80035da:	4770      	bx	lr

080035dc <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80035dc:	308c      	adds	r0, #140	@ 0x8c
 80035de:	4770      	bx	lr

080035e0 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80035e0:	3084      	adds	r0, #132	@ 0x84
 80035e2:	4770      	bx	lr

080035e4 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80035e4:	4770      	bx	lr
	...

080035e8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	4b02      	ldr	r3, [pc, #8]	@ (80035f4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80035ea:	2290      	movs	r2, #144	@ 0x90
 80035ec:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80035f8:	4770      	bx	lr

080035fa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80035fa:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80035fc:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003600:	4770      	bx	lr

08003602 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003602:	4770      	bx	lr

08003604 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003604:	4770      	bx	lr

08003606 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003606:	4770      	bx	lr

08003608 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003608:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800360c:	4611      	mov	r1, r2
 800360e:	6840      	ldr	r0, [r0, #4]
 8003610:	6803      	ldr	r3, [r0, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4718      	bx	r3

08003616 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003616:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800361a:	4770      	bx	lr

0800361c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800361c:	b510      	push	{r4, lr}
 800361e:	4604      	mov	r4, r0
 8003620:	2148      	movs	r1, #72	@ 0x48
 8003622:	f020 fffa 	bl	802461a <_ZdlPvj>
 8003626:	4620      	mov	r0, r4
 8003628:	bd10      	pop	{r4, pc}

0800362a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800362a:	b510      	push	{r4, lr}
 800362c:	4604      	mov	r4, r0
 800362e:	212c      	movs	r1, #44	@ 0x2c
 8003630:	f020 fff3 	bl	802461a <_ZdlPvj>
 8003634:	4620      	mov	r0, r4
 8003636:	bd10      	pop	{r4, pc}

08003638 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003638:	b510      	push	{r4, lr}
 800363a:	4604      	mov	r4, r0
 800363c:	21bc      	movs	r1, #188	@ 0xbc
 800363e:	f020 ffec 	bl	802461a <_ZdlPvj>
 8003642:	4620      	mov	r0, r4
 8003644:	bd10      	pop	{r4, pc}
	...

08003648 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4604      	mov	r4, r0
    HAL::initialize();
 800364c:	f00d fa2f 	bl	8010aae <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003654:	f012 fff6 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 8003658:	4601      	mov	r1, r0
 800365a:	4620      	mov	r0, r4
 800365c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	4908      	ldr	r1, [pc, #32]	@ (8003684 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003662:	4620      	mov	r0, r4
 8003664:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003668:	2300      	movs	r3, #0
 800366a:	461a      	mov	r2, r3
 800366c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800366e:	6863      	ldr	r3, [r4, #4]
 8003670:	4a05      	ldr	r2, [pc, #20]	@ (8003688 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003672:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003674:	4b05      	ldr	r3, [pc, #20]	@ (800368c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003676:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003678:	4a05      	ldr	r2, [pc, #20]	@ (8003690 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 800367c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	d0119400 	.word	0xd0119400
 8003688:	2400c31c 	.word	0x2400c31c
 800368c:	2400c2d4 	.word	0x2400c2d4
 8003690:	d0000000 	.word	0xd0000000
 8003694:	00119400 	.word	0x00119400

08003698 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003698:	b538      	push	{r3, r4, r5, lr}
 800369a:	4604      	mov	r4, r0
 800369c:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800369e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295
 80036a4:	f00a face 	bl	800dc44 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80036a8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80036aa:	f00a faee 	bl	800dc8a <osMutexRelease>
        streams[handle].isActive = false;
 80036ae:	2324      	movs	r3, #36	@ 0x24
 80036b0:	fb03 4505 	mla	r5, r3, r5, r4
 80036b4:	2300      	movs	r3, #0
 80036b6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80036ba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80036be:	b90b      	cbnz	r3, 80036c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80036c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80036c2:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80036c4:	bd38      	pop	{r3, r4, r5, pc}

080036c6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80036c6:	f00d b9a3 	b.w	8010a10 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080036ca <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80036ca:	f00d bb04 	b.w	8010cd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080036ce <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80036ce:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80036d2:	b112      	cbz	r2, 80036da <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80036d4:	6803      	ldr	r3, [r0, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	4718      	bx	r3
    }
 80036da:	4770      	bx	lr

080036dc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80036dc:	4a12      	ldr	r2, [pc, #72]	@ (8003728 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80036de:	6953      	ldr	r3, [r2, #20]
 80036e0:	03db      	lsls	r3, r3, #15
{
 80036e2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80036e4:	d51e      	bpl.n	8003724 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80036ec:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80036f0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80036f4:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80036f8:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80036fc:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003700:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003702:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003706:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003708:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800370c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800370e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003712:	d2f9      	bcs.n	8003708 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003714:	3b20      	subs	r3, #32
 8003716:	f113 0f20 	cmn.w	r3, #32
 800371a:	d1f2      	bne.n	8003702 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800371c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003720:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	bf00      	nop
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800372c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800372e:	b131      	cbz	r1, 800373e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003730:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003732:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003736:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003738:	4804      	ldr	r0, [pc, #16]	@ (800374c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800373a:	f021 fae5 	bl	8024d08 <__assert_func>
    }
 800373e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003742:	bd08      	pop	{r3, pc}
 8003744:	08026780 	.word	0x08026780
 8003748:	08026794 	.word	0x08026794
 800374c:	0802691e 	.word	0x0802691e

08003750 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003750:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003752:	b131      	cbz	r1, 8003762 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003756:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800375a:	4a06      	ldr	r2, [pc, #24]	@ (8003774 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800375c:	4806      	ldr	r0, [pc, #24]	@ (8003778 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800375e:	f021 fad3 	bl	8024d08 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003762:	6840      	ldr	r0, [r0, #4]
 8003764:	4611      	mov	r1, r2
 8003766:	6803      	ldr	r3, [r0, #0]
    }
 8003768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	4718      	bx	r3
 8003770:	08026780 	.word	0x08026780
 8003774:	08026968 	.word	0x08026968
 8003778:	0802691e 	.word	0x0802691e

0800377c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800377c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800377e:	b129      	cbz	r1, 800378c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003780:	4b03      	ldr	r3, [pc, #12]	@ (8003790 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003782:	2179      	movs	r1, #121	@ 0x79
 8003784:	4a03      	ldr	r2, [pc, #12]	@ (8003794 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003786:	4804      	ldr	r0, [pc, #16]	@ (8003798 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003788:	f021 fabe 	bl	8024d08 <__assert_func>
    }
 800378c:	68c0      	ldr	r0, [r0, #12]
 800378e:	bd08      	pop	{r3, pc}
 8003790:	08026780 	.word	0x08026780
 8003794:	08026b16 	.word	0x08026b16
 8003798:	0802691e 	.word	0x0802691e

0800379c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 800379c:	b510      	push	{r4, lr}
 800379e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80037a0:	b129      	cbz	r1, 80037ae <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80037a2:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80037a4:	21a2      	movs	r1, #162	@ 0xa2
 80037a6:	4a19      	ldr	r2, [pc, #100]	@ (800380c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80037a8:	4819      	ldr	r0, [pc, #100]	@ (8003810 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80037aa:	f021 faad 	bl	8024d08 <__assert_func>
        switch (cmd)
 80037ae:	2a05      	cmp	r2, #5
 80037b0:	d815      	bhi.n	80037de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80037b2:	e8df f002 	tbb	[pc, r2]
 80037b6:	1103      	.short	0x1103
 80037b8:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80037bc:	6840      	ldr	r0, [r0, #4]
 80037be:	6803      	ldr	r3, [r0, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	4798      	blx	r3
 80037c4:	b158      	cbz	r0, 80037de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80037cc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80037d0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80037d2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80037d6:	e002      	b.n	80037de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80037d8:	2300      	movs	r3, #0
 80037da:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80037de:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80037e0:	6203      	str	r3, [r0, #32]
 80037e2:	e7f5      	b.n	80037d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80037e4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80037ec:	e7f0      	b.n	80037d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	6203      	str	r3, [r0, #32]
            break;
 80037f8:	e7f1      	b.n	80037de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80037fa:	3b00      	subs	r3, #0
 80037fc:	bf18      	it	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003804:	e7eb      	b.n	80037de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003806:	bf00      	nop
 8003808:	08026780 	.word	0x08026780
 800380c:	08026ccb 	.word	0x08026ccb
 8003810:	0802691e 	.word	0x0802691e

08003814 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003814:	b510      	push	{r4, lr}
 8003816:	460c      	mov	r4, r1
 8003818:	4611      	mov	r1, r2
 800381a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800381c:	b12c      	cbz	r4, 800382a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003820:	2190      	movs	r1, #144	@ 0x90
 8003822:	4a06      	ldr	r2, [pc, #24]	@ (800383c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003824:	4806      	ldr	r0, [pc, #24]	@ (8003840 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003826:	f021 fa6f 	bl	8024d08 <__assert_func>
        stream.frameNumber = 0;
 800382a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800382c:	6840      	ldr	r0, [r0, #4]
 800382e:	6803      	ldr	r3, [r0, #0]
    }
 8003830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4718      	bx	r3
 8003838:	08026780 	.word	0x08026780
 800383c:	08026e9f 	.word	0x08026e9f
 8003840:	0802691e 	.word	0x0802691e

08003844 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003844:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003846:	b129      	cbz	r1, 8003854 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800384a:	2182      	movs	r1, #130	@ 0x82
 800384c:	4a05      	ldr	r2, [pc, #20]	@ (8003864 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800384e:	4806      	ldr	r0, [pc, #24]	@ (8003868 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003850:	f021 fa5a 	bl	8024d08 <__assert_func>
        stream.tickCount = 0;
 8003854:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003858:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800385c:	bd08      	pop	{r3, pc}
 800385e:	bf00      	nop
 8003860:	08026780 	.word	0x08026780
 8003864:	0802707a 	.word	0x0802707a
 8003868:	0802691e 	.word	0x0802691e

0800386c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800386c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003870:	b510      	push	{r4, lr}
 8003872:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003874:	b153      	cbz	r3, 800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003876:	f04f 31ff 	mov.w	r1, #4294967295
 800387a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800387c:	f00a f9e2 	bl	800dc44 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003880:	2300      	movs	r3, #0
 8003882:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003886:	2301      	movs	r3, #1
 8003888:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 800388c:	bd10      	pop	{r4, pc}

0800388e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800388e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003892:	b11a      	cbz	r2, 800389c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003894:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003898:	b102      	cbz	r2, 800389c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800389a:	6018      	str	r0, [r3, #0]
        }
    }
 800389c:	4770      	bx	lr
	...

080038a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80038a0:	b510      	push	{r4, lr}
 80038a2:	4604      	mov	r4, r0
 80038a4:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80038a6:	b129      	cbz	r1, 80038b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80038a8:	4b13      	ldr	r3, [pc, #76]	@ (80038f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80038aa:	21d0      	movs	r1, #208	@ 0xd0
 80038ac:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80038ae:	4814      	ldr	r0, [pc, #80]	@ (8003900 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80038b0:	f021 fa2a 	bl	8024d08 <__assert_func>
        if (stream.isPlaying)
 80038b4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80038b8:	b133      	cbz	r3, 80038c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80038ba:	4b12      	ldr	r3, [pc, #72]	@ (8003904 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80038c2:	6963      	ldr	r3, [r4, #20]
 80038c4:	4413      	add	r3, r2
 80038c6:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80038c8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80038cc:	b90b      	cbnz	r3, 80038d2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80038ce:	2001      	movs	r0, #1
    }
 80038d0:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80038d2:	68a3      	ldr	r3, [r4, #8]
 80038d4:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80038d6:	6803      	ldr	r3, [r0, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80038dc:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80038de:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80038e2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d1f1      	bne.n	80038ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80038ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ee      	bne.n	80038d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 80038f2:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 80038f6:	e7eb      	b.n	80038d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 80038f8:	08026780 	.word	0x08026780
 80038fc:	08027236 	.word	0x08027236
 8003900:	0802691e 	.word	0x0802691e
 8003904:	2402641c 	.word	0x2402641c

08003908 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003908:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 800390a:	4c1a      	ldr	r4, [pc, #104]	@ (8003974 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 800390c:	4605      	mov	r5, r0
    HAL::endFrame();
 800390e:	f00d f8c1 	bl	8010a94 <_ZN8touchgfx3HAL8endFrameEv>
 8003912:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003916:	b913      	cbnz	r3, 800391e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003918:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800391c:	b1ab      	cbz	r3, 800394a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800391e:	69e1      	ldr	r1, [r4, #28]
 8003920:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003924:	4353      	muls	r3, r2
 8003926:	6922      	ldr	r2, [r4, #16]
 8003928:	434a      	muls	r2, r1
 800392a:	4293      	cmp	r3, r2
 800392c:	d30d      	bcc.n	800394a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800392e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003932:	b138      	cbz	r0, 8003944 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800393a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 800393c:	bf98      	it	ls
 800393e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003942:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003944:	2301      	movs	r3, #1
 8003946:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 800394a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 800394c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800394e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003952:	f00a fa2f 	bl	800ddb4 <osSemaphoreRelease>
        if (uiHasMutex)
 8003956:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800395a:	b12b      	cbz	r3, 8003968 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 800395c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800395e:	f00a f994 	bl	800dc8a <osMutexRelease>
            uiHasMutex = false;
 8003962:	2300      	movs	r3, #0
 8003964:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003968:	6868      	ldr	r0, [r5, #4]
 800396a:	6803      	ldr	r3, [r0, #0]
}
 800396c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4718      	bx	r3
 8003974:	2400c2d4 	.word	0x2400c2d4

08003978 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003978:	4b04      	ldr	r3, [pc, #16]	@ (800398c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800397a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800397e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003982:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003986:	f3bf 8f6f 	isb	sy
}
 800398a:	4770      	bx	lr
 800398c:	e000e100 	.word	0xe000e100

08003990 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003990:	4b02      	ldr	r3, [pc, #8]	@ (800399c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003992:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	e000e100 	.word	0xe000e100

080039a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80039a4:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 80039a8:	b9d8      	cbnz	r0, 80039e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80039aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80039ae:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80039b0:	2501      	movs	r5, #1
                streams[i] = Stream();
 80039b2:	60d8      	str	r0, [r3, #12]
 80039b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80039b6:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80039ba:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80039bc:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80039c0:	6158      	str	r0, [r3, #20]
 80039c2:	6198      	str	r0, [r3, #24]
 80039c4:	61d8      	str	r0, [r3, #28]
 80039c6:	6218      	str	r0, [r3, #32]
 80039c8:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80039ca:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80039cc:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80039d0:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80039d4:	443c      	add	r4, r7
 80039d6:	42a2      	cmp	r2, r4
 80039d8:	d90a      	bls.n	80039f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80039da:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80039dc:	2152      	movs	r1, #82	@ 0x52
 80039de:	4a0b      	ldr	r2, [pc, #44]	@ (8003a0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80039e0:	e003      	b.n	80039ea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80039e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80039e4:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80039e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80039ea:	480b      	ldr	r0, [pc, #44]	@ (8003a18 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80039ec:	f021 f98c 	bl	8024d08 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80039f0:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80039f2:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 80039f4:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 80039f8:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 80039fc:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 80039fe:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003a02:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003a04:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a08:	0802758e 	.word	0x0802758e
 8003a0c:	080275c9 	.word	0x080275c9
 8003a10:	080273d7 	.word	0x080273d7
 8003a14:	08027407 	.word	0x08027407
 8003a18:	0802691e 	.word	0x0802691e

08003a1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003a1c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003a1e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003a20:	4e12      	ldr	r6, [pc, #72]	@ (8003a6c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003a22:	4604      	mov	r4, r0
 8003a24:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003a26:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003a28:	6003      	str	r3, [r0, #0]
 8003a2a:	6833      	ldr	r3, [r6, #0]
 8003a2c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003a30:	b10a      	cbz	r2, 8003a36 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003a32:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003a34:	b900      	cbnz	r0, 8003a38 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003a36:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003a38:	6803      	ldr	r3, [r0, #0]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	4798      	blx	r3
 8003a3e:	1e43      	subs	r3, r0, #1
 8003a40:	425d      	negs	r5, r3
 8003a42:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003a48:	b130      	cbz	r0, 8003a58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003a4a:	6803      	ldr	r3, [r0, #0]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	4798      	blx	r3
 8003a50:	2801      	cmp	r0, #1
 8003a52:	bf08      	it	eq
 8003a54:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003a58:	b92d      	cbnz	r5, 8003a66 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003a5c:	2127      	movs	r1, #39	@ 0x27
 8003a5e:	4a06      	ldr	r2, [pc, #24]	@ (8003a78 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003a60:	4806      	ldr	r0, [pc, #24]	@ (8003a7c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003a62:	f021 f951 	bl	8024d08 <__assert_func>
    }
 8003a66:	4620      	mov	r0, r4
 8003a68:	bd70      	pop	{r4, r5, r6, pc}
 8003a6a:	bf00      	nop
 8003a6c:	2402641c 	.word	0x2402641c
 8003a70:	0802787c 	.word	0x0802787c
 8003a74:	0802776c 	.word	0x0802776c
 8003a78:	080277ca 	.word	0x080277ca
 8003a7c:	08027803 	.word	0x08027803

08003a80 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003a80:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003a82:	4e24      	ldr	r6, [pc, #144]	@ (8003b14 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003a84:	6835      	ldr	r5, [r6, #0]
 8003a86:	f3bf 8f5b 	dmb	ish
 8003a8a:	f015 0501 	ands.w	r5, r5, #1
 8003a8e:	d13f      	bne.n	8003b10 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003a90:	4630      	mov	r0, r6
 8003a92:	f020 fdc4 	bl	802461e <__cxa_guard_acquire>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d03a      	beq.n	8003b10 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003a9a:	4c1f      	ldr	r4, [pc, #124]	@ (8003b18 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003a9e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003aa2:	6125      	str	r5, [r4, #16]
 8003aa4:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003aa6:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003aa8:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003aaa:	e9c4 3500 	strd	r3, r5, [r4]
 8003aae:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003ab2:	f014 f99e 	bl	8017df2 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003ab6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003aba:	f00f fa1b 	bl	8012ef4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003abe:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003ac0:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003ac2:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003ac4:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003ac6:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003aca:	f7ff ffa7 	bl	8003a1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003ace:	4b16      	ldr	r3, [pc, #88]	@ (8003b28 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003ad0:	4816      	ldr	r0, [pc, #88]	@ (8003b2c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003ad2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003ad6:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003ad8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003adc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003ae0:	2364      	movs	r3, #100	@ 0x64
 8003ae2:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003ae6:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003aea:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003aee:	2300      	movs	r3, #0
 8003af0:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003af4:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003af8:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003afc:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003b00:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003b02:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003b06:	f021 f91d 	bl	8024d44 <atexit>
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f020 fd93 	bl	8024636 <__cxa_guard_release>
}
 8003b10:	4801      	ldr	r0, [pc, #4]	@ (8003b18 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	2400c214 	.word	0x2400c214
 8003b18:	2400c218 	.word	0x2400c218
 8003b1c:	08028ebc 	.word	0x08028ebc
 8003b20:	0802789c 	.word	0x0802789c
 8003b24:	08027914 	.word	0x08027914
 8003b28:	08028f08 	.word	0x08028f08
 8003b2c:	080035e5 	.word	0x080035e5
 8003b30:	08028f40 	.word	0x08028f40

08003b34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b38:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003b3a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003b3c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003b40:	f04f 31ff 	mov.w	r1, #4294967295
 8003b44:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003b46:	f00a f909 	bl	800dd5c <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003b50:	f00a f878 	bl	800dc44 <osMutexAcquire>
                if (stream.doDecode)
 8003b54:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003b58:	b343      	cbz	r3, 8003bac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003b5a:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003b5c:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003b60:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003b62:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003b66:	f1b8 0f00 	cmp.w	r8, #0
 8003b6a:	d023      	beq.n	8003bb4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	4641      	mov	r1, r8
 8003b70:	4628      	mov	r0, r5
 8003b72:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003b7e:	9700      	str	r7, [sp, #0]
 8003b80:	4628      	mov	r0, r5
 8003b82:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003b86:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003b8a:	68a1      	ldr	r1, [r4, #8]
 8003b8c:	47c0      	blx	r8
                    stream.frameCount++;
 8003b8e:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003b90:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003b94:	3301      	adds	r3, #1
 8003b96:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003b98:	b1f0      	cbz	r0, 8003bd8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003b9a:	682b      	ldr	r3, [r5, #0]
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	4798      	blx	r3
 8003ba2:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003ba4:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003ba6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003ba8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003bac:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003bae:	f00a f86c 	bl	800dc8a <osMutexRelease>
        while (1)
 8003bb2:	e7c5      	b.n	8003b40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003bb4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	d0de      	beq.n	8003b78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003bba:	4628      	mov	r0, r5
 8003bbc:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003bc0:	4798      	blx	r3
 8003bc2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003bc4:	4401      	add	r1, r0
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003bca:	6923      	ldr	r3, [r4, #16]
 8003bcc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003bce:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003bd2:	4413      	add	r3, r2
 8003bd4:	6123      	str	r3, [r4, #16]
 8003bd6:	e7cf      	b.n	8003b78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003bd8:	2001      	movs	r0, #1
 8003bda:	e7e3      	b.n	8003ba4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003bdc <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003bdc:	4801      	ldr	r0, [pc, #4]	@ (8003be4 <videoTaskFunc+0x8>)
{
 8003bde:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003be0:	f7ff ffa8 	bl	8003b34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003be4:	2400c2d4 	.word	0x2400c2d4

08003be8 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003be8:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003bea:	4814      	ldr	r0, [pc, #80]	@ (8003c3c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003bec:	2500      	movs	r5, #0
 8003bee:	f7fe fbed 	bl	80023cc <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003bf2:	4c13      	ldr	r4, [pc, #76]	@ (8003c40 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003bf4:	4b13      	ldr	r3, [pc, #76]	@ (8003c44 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003bf6:	462a      	mov	r2, r5
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003c02:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c04:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c06:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c08:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003c0c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003c10:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003c14:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003c18:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c1c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003c20:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003c24:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003c28:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003c2c:	f00a f84c 	bl	800dcc8 <osSemaphoreNew>
 8003c30:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003c32:	4628      	mov	r0, r5
 8003c34:	f009 ffd1 	bl	800dbda <osMutexNew>
 8003c38:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	2400c31c 	.word	0x2400c31c
 8003c40:	2400c2d4 	.word	0x2400c2d4
 8003c44:	08027960 	.word	0x08027960

08003c48 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003c48:	4770      	bx	lr

08003c4a <_ZN23ApplicationFontProviderD0Ev>:
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	2104      	movs	r1, #4
 8003c50:	f020 fce3 	bl	802461a <_ZdlPvj>
 8003c54:	4620      	mov	r0, r4
 8003c56:	bd10      	pop	{r4, pc}

08003c58 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003c58:	2901      	cmp	r1, #1
{
 8003c5a:	b508      	push	{r3, lr}
    switch (typography)
 8003c5c:	d006      	beq.n	8003c6c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003c5e:	2902      	cmp	r1, #2
 8003c60:	d008      	beq.n	8003c74 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003c62:	b959      	cbnz	r1, 8003c7c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003c64:	f002 fc80 	bl	8006568 <_ZN17TypedTextDatabase8getFontsEv>
 8003c68:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003c6a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003c6c:	f002 fc7c 	bl	8006568 <_ZN17TypedTextDatabase8getFontsEv>
 8003c70:	6840      	ldr	r0, [r0, #4]
 8003c72:	e7fa      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003c74:	f002 fc78 	bl	8006568 <_ZN17TypedTextDatabase8getFontsEv>
 8003c78:	6880      	ldr	r0, [r0, #8]
 8003c7a:	e7f6      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e7f4      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003c80 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003c80:	4800      	ldr	r0, [pc, #0]	@ (8003c84 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003c82:	4770      	bx	lr
 8003c84:	080279b0 	.word	0x080279b0

08003c88 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003c88:	200a      	movs	r0, #10
 8003c8a:	4770      	bx	lr

08003c8c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003c8c:	b513      	push	{r0, r1, r4, lr}
 8003c8e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003c90:	b151      	cbz	r1, 8003ca8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003c92:	6803      	ldr	r3, [r0, #0]
 8003c94:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003c96:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003c98:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003c9c:	689c      	ldr	r4, [r3, #8]
 8003c9e:	f10d 0303 	add.w	r3, sp, #3
 8003ca2:	47a0      	blx	r4
        return glyph;
    }
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd10      	pop	{r4, pc}
            return 0;
 8003ca8:	4608      	mov	r0, r1
 8003caa:	e7fb      	b.n	8003ca4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003cac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003cac:	89c0      	ldrh	r0, [r0, #14]
 8003cae:	4770      	bx	lr

08003cb0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003cb0:	8a00      	ldrh	r0, [r0, #16]
 8003cb2:	4770      	bx	lr

08003cb4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003cb4:	88c0      	ldrh	r0, [r0, #6]
 8003cb6:	4770      	bx	lr

08003cb8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003cb8:	8880      	ldrh	r0, [r0, #4]
 8003cba:	4770      	bx	lr

08003cbc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003cbc:	7a80      	ldrb	r0, [r0, #10]
    }
 8003cbe:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003cc2:	4770      	bx	lr

08003cc4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003cc4:	7a80      	ldrb	r0, [r0, #10]
    }
 8003cc6:	09c0      	lsrs	r0, r0, #7
 8003cc8:	4770      	bx	lr

08003cca <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003cca:	2000      	movs	r0, #0
 8003ccc:	4770      	bx	lr
	...

08003cd0 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003cd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003cd8 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	00000000 	.word	0x00000000

08003cdc <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003cdc:	4770      	bx	lr

08003cde <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003cde:	b510      	push	{r4, lr}
 8003ce0:	4604      	mov	r4, r0
    }
 8003ce2:	2108      	movs	r1, #8
 8003ce4:	f020 fc99 	bl	802461a <_ZdlPvj>
 8003ce8:	4620      	mov	r0, r4
 8003cea:	bd10      	pop	{r4, pc}

08003cec <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003cec:	4770      	bx	lr

08003cee <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003cee:	4770      	bx	lr

08003cf0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003cf0:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003cf4:	6808      	ldr	r0, [r1, #0]
 8003cf6:	6849      	ldr	r1, [r1, #4]
 8003cf8:	c303      	stmia	r3!, {r0, r1}
    }
 8003cfa:	4770      	bx	lr

08003cfc <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003cfc:	4770      	bx	lr

08003cfe <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003cfe:	4770      	bx	lr

08003d00 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003d00:	6041      	str	r1, [r0, #4]
    }
 8003d02:	4770      	bx	lr

08003d04 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003d04:	4770      	bx	lr
	...

08003d08 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003d0a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003d0e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003d18:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003d1c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	0800418d 	.word	0x0800418d

08003d28 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	7203      	strb	r3, [r0, #8]
    }
 8003d2c:	4770      	bx	lr

08003d2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
 * Screen transitioning to.
 *
 * @see Transition
 */
template <Direction templateDirection>
class SlideTransition : public Transition
 8003d2e:	4770      	bx	lr

08003d30 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003d30:	4770      	bx	lr

08003d32 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003d32:	4770      	bx	lr

08003d34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003d34:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003d36:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003d38:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003d3a:	68c2      	ldr	r2, [r0, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	1054      	asrs	r4, r2, #1
 8003d40:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003d44:	07d2      	lsls	r2, r2, #31
 8003d46:	bf48      	it	mi
 8003d48:	590a      	ldrmi	r2, [r1, r4]
    }
 8003d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003d4e:	bf48      	it	mi
 8003d50:	58d3      	ldrmi	r3, [r2, r3]
 8003d52:	4718      	bx	r3

08003d54 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003d54:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003d56:	6840      	ldr	r0, [r0, #4]
 8003d58:	b130      	cbz	r0, 8003d68 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	b91a      	cbnz	r2, 8003d66 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003d5e:	68d8      	ldr	r0, [r3, #12]
 8003d60:	f000 0001 	and.w	r0, r0, #1
 8003d64:	4770      	bx	lr
 8003d66:	2001      	movs	r0, #1
    }
 8003d68:	4770      	bx	lr

08003d6a <_ZN8touchgfx12NoTransitionD0Ev>:
 8003d6a:	b510      	push	{r4, lr}
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	210c      	movs	r1, #12
 8003d70:	f020 fc53 	bl	802461a <_ZdlPvj>
 8003d74:	4620      	mov	r0, r4
 8003d76:	bd10      	pop	{r4, pc}

08003d78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	2110      	movs	r1, #16
 8003d7e:	f020 fc4c 	bl	802461a <_ZdlPvj>
 8003d82:	4620      	mov	r0, r4
 8003d84:	bd10      	pop	{r4, pc}

08003d86 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003d86:	b510      	push	{r4, lr}
 8003d88:	4604      	mov	r4, r0
 8003d8a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003d8e:	f020 fc44 	bl	802461a <_ZdlPvj>
 8003d92:	4620      	mov	r0, r4
 8003d94:	bd10      	pop	{r4, pc}

08003d96 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8003d96:	b510      	push	{r4, lr}
 8003d98:	4604      	mov	r4, r0
 8003d9a:	2140      	movs	r1, #64	@ 0x40
 8003d9c:	f020 fc3d 	bl	802461a <_ZdlPvj>
 8003da0:	4620      	mov	r0, r4
 8003da2:	bd10      	pop	{r4, pc}

08003da4 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003da4:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003da6:	f012 fc4d 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 8003daa:	6803      	ldr	r3, [r0, #0]
    }
 8003dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	4718      	bx	r3

08003db4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
        screenContainer->invalidate();
    }

    virtual void tearDown()
    {
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x18>)
    virtual void tearDown()
 8003db6:	4601      	mov	r1, r0
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b12b      	cbz	r3, 8003dc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x14>
 8003dbc:	6840      	ldr	r0, [r0, #4]
 8003dbe:	b118      	cbz	r0, 8003dc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x14>
        {
            screenContainer->remove(snapshot);
 8003dc0:	6803      	ldr	r3, [r0, #0]
 8003dc2:	310c      	adds	r1, #12
 8003dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dc6:	4718      	bx	r3
        }
    }
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	2402641b 	.word	0x2402641b

08003dd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:

    virtual void init()
    {
        Transition::init();

        if (done)
 8003dd0:	7a03      	ldrb	r3, [r0, #8]
    virtual void init()
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	4605      	mov	r5, r0
        if (done)
 8003dd6:	b9bb      	cbnz	r3, 8003e08 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x38>
        {
            return;
        }

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 8003dd8:	6840      	ldr	r0, [r0, #4]
 8003dda:	6803      	ldr	r3, [r0, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4798      	blx	r3
 8003de0:	4604      	mov	r4, r0
        while (d)
 8003de2:	b93c      	cbnz	r4, 8003df4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x24>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(snapshot);
 8003de4:	6868      	ldr	r0, [r5, #4]
 8003de6:	f105 010c 	add.w	r1, r5, #12
 8003dea:	6803      	ldr	r3, [r0, #0]
    }
 8003dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(snapshot);
 8003df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df2:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 8003df4:	88a1      	ldrh	r1, [r4, #4]
 8003df6:	4620      	mov	r0, r4
 8003df8:	8f6b      	ldrh	r3, [r5, #58]	@ 0x3a
 8003dfa:	1ac9      	subs	r1, r1, r3
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	b209      	sxth	r1, r1
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	4798      	blx	r3
        return nextSibling;
 8003e04:	69a4      	ldr	r4, [r4, #24]
 8003e06:	e7ec      	b.n	8003de2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x12>
    }
 8003e08:	bd70      	pop	{r4, r5, r6, pc}

08003e0a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003e0e:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003e12:	b158      	cbz	r0, 8003e2c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003e14:	6803      	ldr	r3, [r0, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4798      	blx	r3
 8003e1a:	b138      	cbz	r0, 8003e2c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003e1c:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003e20:	6803      	ldr	r3, [r0, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003e2c:	bd10      	pop	{r4, pc}

08003e2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8003e2e:	b570      	push	{r4, r5, r6, lr}
 8003e30:	4604      	mov	r4, r0
        animationCounter++;
 8003e32:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8003e36:	3001      	adds	r0, #1
        if (animationCounter > animationSteps)
 8003e38:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
        animationCounter++;
 8003e3c:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8003e3e:	4298      	cmp	r0, r3
        animationCounter++;
 8003e40:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
        if (animationCounter > animationSteps)
 8003e44:	d905      	bls.n	8003e52 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x24>
            done = true;
 8003e46:	2301      	movs	r3, #1
 8003e48:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    }
 8003e50:	bd70      	pop	{r4, r5, r6, pc}
        int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8003e52:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 8003e56:	2100      	movs	r1, #0
 8003e58:	f014 fcc0 	bl	80187dc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8003e5c:	07c3      	lsls	r3, r0, #31
 8003e5e:	d506      	bpl.n	8003e6e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8003e60:	2800      	cmp	r0, #0
 8003e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e66:	bfc8      	it	gt
 8003e68:	2301      	movgt	r3, #1
 8003e6a:	4418      	add	r0, r3
 8003e6c:	b200      	sxth	r0, r0
            relativeValue = calculatedValue - snapshot.getX();
 8003e6e:	8a23      	ldrh	r3, [r4, #16]
 8003e70:	1ac0      	subs	r0, r0, r3
 8003e72:	87a0      	strh	r0, [r4, #60]	@ 0x3c
        Drawable* d = screenContainer->getFirstChild();
 8003e74:	6860      	ldr	r0, [r4, #4]
 8003e76:	6803      	ldr	r3, [r0, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4798      	blx	r3
 8003e7c:	4605      	mov	r5, r0
        while (d)
 8003e7e:	b92d      	cbnz	r5, 8003e8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5e>
 8003e80:	6860      	ldr	r0, [r4, #4]
        screenContainer->invalidate();
 8003e82:	6803      	ldr	r3, [r0, #0]
    }
 8003e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->invalidate();
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4718      	bx	r3
                d->setX(d->getX() + relativeValue);
 8003e8c:	88a9      	ldrh	r1, [r5, #4]
 8003e8e:	4628      	mov	r0, r5
 8003e90:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8003e92:	4419      	add	r1, r3
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b209      	sxth	r1, r1
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	4798      	blx	r3
 8003e9c:	69ad      	ldr	r5, [r5, #24]
 8003e9e:	e7ee      	b.n	8003e7e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x50>

08003ea0 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoWaitingScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoWaitingScreenScreenNoTransitionImpl()
{
 8003ea0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<WaitingScreenView, WaitingScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003ea4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ea8:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003eaa:	68b0      	ldr	r0, [r6, #8]
 8003eac:	6803      	ldr	r3, [r0, #0]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4798      	blx	r3
 8003eb2:	f5b0 7f18 	cmp.w	r0, #608	@ 0x260
 8003eb6:	d205      	bcs.n	8003ec4 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x24>
 8003eb8:	4b44      	ldr	r3, [pc, #272]	@ (8003fcc <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x12c>)
 8003eba:	21a3      	movs	r1, #163	@ 0xa3
 8003ebc:	4a44      	ldr	r2, [pc, #272]	@ (8003fd0 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003ebe:	4845      	ldr	r0, [pc, #276]	@ (8003fd4 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x134>)
 8003ec0:	f020 ff22 	bl	8024d08 <__assert_func>
 8003ec4:	6870      	ldr	r0, [r6, #4]
 8003ec6:	6803      	ldr	r3, [r0, #0]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4798      	blx	r3
 8003ecc:	280f      	cmp	r0, #15
 8003ece:	d803      	bhi.n	8003ed8 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x38>
 8003ed0:	4b41      	ldr	r3, [pc, #260]	@ (8003fd8 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x138>)
 8003ed2:	21a4      	movs	r1, #164	@ 0xa4
 8003ed4:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd0 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
 8003ed6:	e7f2      	b.n	8003ebe <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003ed8:	68f0      	ldr	r0, [r6, #12]
 8003eda:	6803      	ldr	r3, [r0, #0]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	4798      	blx	r3
 8003ee0:	280b      	cmp	r0, #11
 8003ee2:	d803      	bhi.n	8003eec <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x4c>
 8003ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8003fdc <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x13c>)
 8003ee6:	21a5      	movs	r1, #165	@ 0xa5
 8003ee8:	4a39      	ldr	r2, [pc, #228]	@ (8003fd0 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x130>)
 8003eea:	e7e8      	b.n	8003ebe <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003eec:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003fe4 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003ef0:	f012 fba8 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003ef4:	3004      	adds	r0, #4
 8003ef6:	f012 fbe3 	bl	80166c0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003efa:	f8d9 0000 	ldr.w	r0, [r9]
 8003efe:	b110      	cbz	r0, 8003f06 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003f00:	6803      	ldr	r3, [r0, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4798      	blx	r3
    if (*currentTrans)
 8003f06:	f8d9 0000 	ldr.w	r0, [r9]
 8003f0a:	b110      	cbz	r0, 8003f12 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003f0c:	6803      	ldr	r3, [r0, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4798      	blx	r3
    if (*currentScreen)
 8003f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fe8 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x148>
 8003f16:	f8d8 0000 	ldr.w	r0, [r8]
 8003f1a:	b110      	cbz	r0, 8003f22 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003f1c:	6803      	ldr	r3, [r0, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	4798      	blx	r3
    if (*currentPresenter)
 8003f22:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f26:	b110      	cbz	r0, 8003f2e <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003f28:	6803      	ldr	r3, [r0, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4798      	blx	r3
    if (*currentScreen)
 8003f2e:	f8d8 0000 	ldr.w	r0, [r8]
 8003f32:	b110      	cbz	r0, 8003f3a <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003f34:	6803      	ldr	r3, [r0, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4798      	blx	r3
    if (*currentPresenter)
 8003f3a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f3e:	b110      	cbz	r0, 8003f46 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003f40:	6803      	ldr	r3, [r0, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003f46:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003f48:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003f4a:	f04f 0b00 	mov.w	fp, #0
 8003f4e:	6803      	ldr	r3, [r0, #0]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	4798      	blx	r3
 8003f54:	4b22      	ldr	r3, [pc, #136]	@ (8003fe0 <_ZN23FrontendApplicationBase39gotoWaitingScreenScreenNoTransitionImplEv+0x140>)
 8003f56:	4604      	mov	r4, r0
 8003f58:	f8c0 b004 	str.w	fp, [r0, #4]
 8003f5c:	f880 b008 	strb.w	fp, [r0, #8]
 8003f60:	4659      	mov	r1, fp
 8003f62:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003f64:	68b0      	ldr	r0, [r6, #8]
 8003f66:	6803      	ldr	r3, [r0, #0]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	4798      	blx	r3
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	f002 fd89 	bl	8006a84 <_ZN17WaitingScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003f72:	6870      	ldr	r0, [r6, #4]
 8003f74:	4659      	mov	r1, fp
 8003f76:	6803      	ldr	r3, [r0, #0]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	4798      	blx	r3
 8003f7c:	4606      	mov	r6, r0
 8003f7e:	4629      	mov	r1, r5
 8003f80:	f002 fd5e 	bl	8006a40 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003f84:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003f86:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003f8a:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003f8c:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003f90:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003f94:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003f98:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003f9a:	f8c6 a008 	str.w	sl, [r6, #8]
 8003f9e:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003fa0:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003fa2:	4798      	blx	r3
    newPresenter->activate();
 8003fa4:	6833      	ldr	r3, [r6, #0]
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003fac:	4621      	mov	r1, r4
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f014 fc0e 	bl	80187d0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	4798      	blx	r3
    newTransition->invalidate();
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	695b      	ldr	r3, [r3, #20]
}
 8003fc2:	b001      	add	sp, #4
 8003fc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc8:	4718      	bx	r3
 8003fca:	bf00      	nop
 8003fcc:	08027a88 	.word	0x08027a88
 8003fd0:	08027b16 	.word	0x08027b16
 8003fd4:	08027bf4 	.word	0x08027bf4
 8003fd8:	08027c49 	.word	0x08027c49
 8003fdc:	08027cec 	.word	0x08027cec
 8003fe0:	08027fbc 	.word	0x08027fbc
 8003fe4:	24026464 	.word	0x24026464
 8003fe8:	24026460 	.word	0x24026460

08003fec <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:
{
 8003fec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003ff0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ff4:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003ff6:	68b0      	ldr	r0, [r6, #8]
 8003ff8:	6803      	ldr	r3, [r0, #0]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4798      	blx	r3
 8003ffe:	f241 3303 	movw	r3, #4867	@ 0x1303
 8004002:	4298      	cmp	r0, r3
 8004004:	d805      	bhi.n	8004012 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x26>
 8004006:	4b56      	ldr	r3, [pc, #344]	@ (8004160 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x174>)
 8004008:	21a3      	movs	r1, #163	@ 0xa3
 800400a:	4a56      	ldr	r2, [pc, #344]	@ (8004164 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800400c:	4856      	ldr	r0, [pc, #344]	@ (8004168 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x17c>)
 800400e:	f020 fe7b 	bl	8024d08 <__assert_func>
 8004012:	6870      	ldr	r0, [r6, #4]
 8004014:	6803      	ldr	r3, [r0, #0]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4798      	blx	r3
 800401a:	280f      	cmp	r0, #15
 800401c:	d803      	bhi.n	8004026 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x3a>
 800401e:	4b53      	ldr	r3, [pc, #332]	@ (800416c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x180>)
 8004020:	21a4      	movs	r1, #164	@ 0xa4
 8004022:	4a50      	ldr	r2, [pc, #320]	@ (8004164 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
 8004024:	e7f2      	b.n	800400c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004026:	68f0      	ldr	r0, [r6, #12]
 8004028:	6803      	ldr	r3, [r0, #0]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4798      	blx	r3
 800402e:	283f      	cmp	r0, #63	@ 0x3f
 8004030:	d803      	bhi.n	800403a <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x4e>
 8004032:	4b4f      	ldr	r3, [pc, #316]	@ (8004170 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x184>)
 8004034:	21a5      	movs	r1, #165	@ 0xa5
 8004036:	4a4b      	ldr	r2, [pc, #300]	@ (8004164 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x178>)
 8004038:	e7e8      	b.n	800400c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x20>
    if (*currentTrans)
 800403a:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8004184 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x198>
    Application::getInstance()->clearAllTimerWidgets();
 800403e:	f012 fb01 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 8004042:	3004      	adds	r0, #4
 8004044:	f012 fb3c 	bl	80166c0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8004048:	f8d9 0000 	ldr.w	r0, [r9]
 800404c:	b110      	cbz	r0, 8004054 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x68>
        (*currentTrans)->tearDown();
 800404e:	6803      	ldr	r3, [r0, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	4798      	blx	r3
    if (*currentTrans)
 8004054:	f8d9 0000 	ldr.w	r0, [r9]
 8004058:	b110      	cbz	r0, 8004060 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x74>
        (*currentTrans)->~Transition();
 800405a:	6803      	ldr	r3, [r0, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4798      	blx	r3
    if (*currentScreen)
 8004060:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8004188 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x19c>
 8004064:	f8d8 0000 	ldr.w	r0, [r8]
 8004068:	b110      	cbz	r0, 8004070 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 800406a:	6803      	ldr	r3, [r0, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4798      	blx	r3
    if (*currentPresenter)
 8004070:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004074:	b110      	cbz	r0, 800407c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x90>
        (*currentPresenter)->deactivate();
 8004076:	6803      	ldr	r3, [r0, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4798      	blx	r3
    if (*currentScreen)
 800407c:	f8d8 0000 	ldr.w	r0, [r8]
 8004080:	b110      	cbz	r0, 8004088 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x9c>
        (*currentScreen)->~Screen();
 8004082:	6803      	ldr	r3, [r0, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4798      	blx	r3
    if (*currentPresenter)
 8004088:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800408c:	b110      	cbz	r0, 8004094 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 800408e:	6803      	ldr	r3, [r0, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004094:	68f0      	ldr	r0, [r6, #12]
 8004096:	2100      	movs	r1, #0
 8004098:	6803      	ldr	r3, [r0, #0]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	4798      	blx	r3
 800409e:	2300      	movs	r3, #0
          relativeValue(0)
 80040a0:	4a34      	ldr	r2, [pc, #208]	@ (8004174 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x188>)
 80040a2:	4605      	mov	r5, r0
 80040a4:	6043      	str	r3, [r0, #4]
 80040a6:	4604      	mov	r4, r0
 80040a8:	7203      	strb	r3, [r0, #8]
 80040aa:	f845 2b0c 	str.w	r2, [r5], #12
          snapshot(),
 80040ae:	4628      	mov	r0, r5
 80040b0:	f00e fffa 	bl	80130a8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          animationSteps(transitionSteps),
 80040b4:	2214      	movs	r2, #20
          relativeValue(0)
 80040b6:	2300      	movs	r3, #0
          animationSteps(transitionSteps),
 80040b8:	8722      	strh	r2, [r4, #56]	@ 0x38
        if (!HAL::USE_ANIMATION_STORAGE)
 80040ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004178 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x18c>)
          relativeValue(0)
 80040bc:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        if (!HAL::USE_ANIMATION_STORAGE)
 80040be:	7812      	ldrb	r2, [r2, #0]
 80040c0:	2a00      	cmp	r2, #0
 80040c2:	d135      	bne.n	8004130 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x144>
            done = true;
 80040c4:	2301      	movs	r3, #1
 80040c6:	7223      	strb	r3, [r4, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80040c8:	68b0      	ldr	r0, [r6, #8]
 80040ca:	2100      	movs	r1, #0
 80040cc:	6803      	ldr	r3, [r0, #0]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	4798      	blx	r3
 80040d2:	4605      	mov	r5, r0
 80040d4:	f002 fc9a 	bl	8006a0c <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80040d8:	6870      	ldr	r0, [r6, #4]
 80040da:	2100      	movs	r1, #0
 80040dc:	6803      	ldr	r3, [r0, #0]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	4798      	blx	r3
 80040e2:	4606      	mov	r6, r0
 80040e4:	4629      	mov	r1, r5
 80040e6:	f002 fc43 	bl	8006970 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 80040ea:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80040ec:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80040f0:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80040f2:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80040f6:	f8c8 5000 	str.w	r5, [r8]
 80040fa:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80040fe:	682b      	ldr	r3, [r5, #0]
 8004100:	f8c6 a008 	str.w	sl, [r6, #8]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004108:	4798      	blx	r3
    newPresenter->activate();
 800410a:	6833      	ldr	r3, [r6, #0]
 800410c:	4630      	mov	r0, r6
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004112:	4621      	mov	r1, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f014 fb5b 	bl	80187d0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	4620      	mov	r0, r4
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	4798      	blx	r3
    newTransition->invalidate();
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	4620      	mov	r0, r4
 8004126:	695b      	ldr	r3, [r3, #20]
}
 8004128:	b001      	add	sp, #4
 800412a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412e:	4718      	bx	r3
        snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004130:	4912      	ldr	r1, [pc, #72]	@ (800417c <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x190>)
        setWidth(width);
 8004132:	4628      	mov	r0, r5
 8004134:	4a12      	ldr	r2, [pc, #72]	@ (8004180 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>)
 8004136:	f9b1 b000 	ldrsh.w	fp, [r1]
        setX(x);
 800413a:	68e1      	ldr	r1, [r4, #12]
        rect.x = x;
 800413c:	6123      	str	r3, [r4, #16]
        setWidth(width);
 800413e:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8004140:	f9b2 1000 	ldrsh.w	r1, [r2]
 8004144:	4798      	blx	r3
        setHeight(height);
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	4659      	mov	r1, fp
 800414a:	4628      	mov	r0, r5
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	4798      	blx	r3
        snapshot.makeSnapshot();
 8004150:	4628      	mov	r0, r5
 8004152:	f00e ff24 	bl	8012f9e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            targetValue = -HAL::DISPLAY_WIDTH;
 8004156:	4a0a      	ldr	r2, [pc, #40]	@ (8004180 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x194>)
 8004158:	8813      	ldrh	r3, [r2, #0]
 800415a:	425b      	negs	r3, r3
 800415c:	8763      	strh	r3, [r4, #58]	@ 0x3a
            break;
 800415e:	e7b3      	b.n	80040c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0xdc>
 8004160:	08027a88 	.word	0x08027a88
 8004164:	08027d8f 	.word	0x08027d8f
 8004168:	08027bf4 	.word	0x08027bf4
 800416c:	08027c49 	.word	0x08027c49
 8004170:	08027cec 	.word	0x08027cec
 8004174:	08027fe0 	.word	0x08027fe0
 8004178:	2402641b 	.word	0x2402641b
 800417c:	24026412 	.word	0x24026412
 8004180:	24026410 	.word	0x24026410
 8004184:	24026464 	.word	0x24026464
 8004188:	24026460 	.word	0x24026460

0800418c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 800418c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004190:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004194:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004196:	68b0      	ldr	r0, [r6, #8]
 8004198:	6803      	ldr	r3, [r0, #0]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	4798      	blx	r3
 800419e:	f5b0 7fbe 	cmp.w	r0, #380	@ 0x17c
 80041a2:	d205      	bcs.n	80041b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 80041a4:	4b44      	ldr	r3, [pc, #272]	@ (80042b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80041a6:	21a3      	movs	r1, #163	@ 0xa3
 80041a8:	4a44      	ldr	r2, [pc, #272]	@ (80042bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80041aa:	4845      	ldr	r0, [pc, #276]	@ (80042c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80041ac:	f020 fdac 	bl	8024d08 <__assert_func>
 80041b0:	6870      	ldr	r0, [r6, #4]
 80041b2:	6803      	ldr	r3, [r0, #0]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	4798      	blx	r3
 80041b8:	280f      	cmp	r0, #15
 80041ba:	d803      	bhi.n	80041c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 80041bc:	4b41      	ldr	r3, [pc, #260]	@ (80042c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80041be:	21a4      	movs	r1, #164	@ 0xa4
 80041c0:	4a3e      	ldr	r2, [pc, #248]	@ (80042bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80041c2:	e7f2      	b.n	80041aa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80041c4:	68f0      	ldr	r0, [r6, #12]
 80041c6:	6803      	ldr	r3, [r0, #0]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4798      	blx	r3
 80041cc:	280b      	cmp	r0, #11
 80041ce:	d803      	bhi.n	80041d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 80041d0:	4b3d      	ldr	r3, [pc, #244]	@ (80042c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80041d2:	21a5      	movs	r1, #165	@ 0xa5
 80041d4:	4a39      	ldr	r2, [pc, #228]	@ (80042bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80041d6:	e7e8      	b.n	80041aa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 80041d8:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 80042d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 80041dc:	f012 fa32 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 80041e0:	3004      	adds	r0, #4
 80041e2:	f012 fa6d 	bl	80166c0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80041e6:	f8d9 0000 	ldr.w	r0, [r9]
 80041ea:	b110      	cbz	r0, 80041f2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80041ec:	6803      	ldr	r3, [r0, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4798      	blx	r3
    if (*currentTrans)
 80041f2:	f8d9 0000 	ldr.w	r0, [r9]
 80041f6:	b110      	cbz	r0, 80041fe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80041f8:	6803      	ldr	r3, [r0, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4798      	blx	r3
    if (*currentScreen)
 80041fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8004202:	f8d8 0000 	ldr.w	r0, [r8]
 8004206:	b110      	cbz	r0, 800420e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8004208:	6803      	ldr	r3, [r0, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4798      	blx	r3
    if (*currentPresenter)
 800420e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004212:	b110      	cbz	r0, 800421a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004214:	6803      	ldr	r3, [r0, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4798      	blx	r3
    if (*currentScreen)
 800421a:	f8d8 0000 	ldr.w	r0, [r8]
 800421e:	b110      	cbz	r0, 8004226 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004220:	6803      	ldr	r3, [r0, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4798      	blx	r3
    if (*currentPresenter)
 8004226:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800422a:	b110      	cbz	r0, 8004232 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 800422c:	6803      	ldr	r3, [r0, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004232:	68f0      	ldr	r0, [r6, #12]
 8004234:	2100      	movs	r1, #0
 8004236:	f04f 0b00 	mov.w	fp, #0
 800423a:	6803      	ldr	r3, [r0, #0]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	4798      	blx	r3
 8004240:	4b22      	ldr	r3, [pc, #136]	@ (80042cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8004242:	4604      	mov	r4, r0
 8004244:	f8c0 b004 	str.w	fp, [r0, #4]
 8004248:	f880 b008 	strb.w	fp, [r0, #8]
 800424c:	4659      	mov	r1, fp
 800424e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004250:	68b0      	ldr	r0, [r6, #8]
 8004252:	6803      	ldr	r3, [r0, #0]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	4798      	blx	r3
 8004258:	4605      	mov	r5, r0
 800425a:	f002 fb6f 	bl	800693c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800425e:	6870      	ldr	r0, [r6, #4]
 8004260:	4659      	mov	r1, fp
 8004262:	6803      	ldr	r3, [r0, #0]
 8004264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004266:	4798      	blx	r3
 8004268:	4606      	mov	r6, r0
 800426a:	4629      	mov	r1, r5
 800426c:	f002 fb44 	bl	80068f8 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8004270:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004272:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004276:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004278:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800427c:	f8c8 5000 	str.w	r5, [r8]
 8004280:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	f8c6 a008 	str.w	sl, [r6, #8]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800428e:	4798      	blx	r3
    newPresenter->activate();
 8004290:	6833      	ldr	r3, [r6, #0]
 8004292:	4630      	mov	r0, r6
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004298:	4621      	mov	r1, r4
 800429a:	4628      	mov	r0, r5
 800429c:	f014 fa98 	bl	80187d0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	4620      	mov	r0, r4
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	4798      	blx	r3
    newTransition->invalidate();
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	4620      	mov	r0, r4
 80042ac:	695b      	ldr	r3, [r3, #20]
}
 80042ae:	b001      	add	sp, #4
 80042b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	4718      	bx	r3
 80042b6:	bf00      	nop
 80042b8:	08027a88 	.word	0x08027a88
 80042bc:	08027e74 	.word	0x08027e74
 80042c0:	08027bf4 	.word	0x08027bf4
 80042c4:	08027c49 	.word	0x08027c49
 80042c8:	08027cec 	.word	0x08027cec
 80042cc:	08027fbc 	.word	0x08027fbc
 80042d0:	24026464 	.word	0x24026464
 80042d4:	24026460 	.word	0x24026460

080042d8 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80042d8:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80042e0:	b10a      	cbz	r2, 80042e6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80042e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80042e4:	b900      	cbnz	r0, 80042e8 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80042e6:	6898      	ldr	r0, [r3, #8]
    }
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	2402641c 	.word	0x2402641c

080042f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	4617      	mov	r7, r2
 80042f4:	4604      	mov	r4, r0
 80042f6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80042f8:	f012 fab4 	bl	8016864 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 80042fe:	2500      	movs	r5, #0
        instance = this;
 8004300:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004302:	4629      	mov	r1, r5
      model(m)
 8004304:	4b11      	ldr	r3, [pc, #68]	@ (800434c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004306:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800430a:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 800430e:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004316:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004318:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 800431c:	689b      	ldr	r3, [r3, #8]
      model(m)
 800431e:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004322:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004324:	4628      	mov	r0, r5
 8004326:	f002 f8d3 	bl	80064d0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800432a:	f7ff ffd5 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 800432e:	f01a fb08 	bl	801e942 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004332:	f7ff ffd1 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8004336:	f01a fb7b 	bl	801ea30 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800433a:	f7ff ffcd 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 800433e:	f01a fb83 	bl	801ea48 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8004342:	4620      	mov	r0, r4
 8004344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004346:	bf00      	nop
 8004348:	24026470 	.word	0x24026470
 800434c:	08027f68 	.word	0x08027f68
 8004350:	08027f50 	.word	0x08027f50
 8004354:	2402641c 	.word	0x2402641c

08004358 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800435a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800435e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004362:	2300      	movs	r3, #0
 8004364:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004368:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800436c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	0800418d 	.word	0x0800418d

08004378 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x1c>)
 800437a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800437e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004382:	2300      	movs	r3, #0
 8004384:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004388:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800438c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	08003fed 	.word	0x08003fed

08004398 <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv>:
 8004398:	4b06      	ldr	r3, [pc, #24]	@ (80043b4 <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv+0x1c>)
 800439a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800439e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80043a8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80043ac:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	08003ea1 	.word	0x08003ea1

080043b8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80043b8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80043ba:	4770      	bx	lr

080043bc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80043bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80043be:	4770      	bx	lr

080043c0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80043c0:	4770      	bx	lr

080043c2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80043c2:	888b      	ldrh	r3, [r1, #4]
 80043c4:	69c0      	ldr	r0, [r0, #28]
 80043c6:	0adb      	lsrs	r3, r3, #11
 80043c8:	680a      	ldr	r2, [r1, #0]
 80043ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80043ce:	4410      	add	r0, r2
 80043d0:	4770      	bx	lr

080043d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80043d2:	b510      	push	{r4, lr}
 80043d4:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80043d6:	b1ba      	cbz	r2, 8004408 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80043d8:	7b10      	ldrb	r0, [r2, #12]
 80043da:	b168      	cbz	r0, 80043f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80043dc:	7b53      	ldrb	r3, [r2, #13]
 80043de:	7ad2      	ldrb	r2, [r2, #11]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80043e6:	431a      	orrs	r2, r3
 80043e8:	6a23      	ldr	r3, [r4, #32]
 80043ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	428a      	cmp	r2, r1
 80043f2:	d102      	bne.n	80043fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80043f4:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80043f8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80043fa:	d805      	bhi.n	8004408 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80043fc:	3801      	subs	r0, #1
 80043fe:	3304      	adds	r3, #4
 8004400:	b280      	uxth	r0, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	d1f3      	bne.n	80043ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004406:	e7f7      	b.n	80043f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004408:	2000      	movs	r0, #0
 800440a:	e7f5      	b.n	80043f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800440c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800440c:	b510      	push	{r4, lr}
 800440e:	4604      	mov	r4, r0
 8004410:	212c      	movs	r1, #44	@ 0x2c
 8004412:	f020 f902 	bl	802461a <_ZdlPvj>
 8004416:	4620      	mov	r0, r4
 8004418:	bd10      	pop	{r4, pc}
	...

0800441c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800441c:	b530      	push	{r4, r5, lr}
 800441e:	b08b      	sub	sp, #44	@ 0x2c
 8004420:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004422:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8004426:	9508      	str	r5, [sp, #32]
 8004428:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 800442c:	9507      	str	r5, [sp, #28]
 800442e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8004432:	9506      	str	r5, [sp, #24]
 8004434:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8004438:	9505      	str	r5, [sp, #20]
 800443a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800443e:	9504      	str	r5, [sp, #16]
 8004440:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8004444:	9503      	str	r5, [sp, #12]
 8004446:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800444a:	9502      	str	r5, [sp, #8]
 800444c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8004450:	9501      	str	r5, [sp, #4]
 8004452:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8004456:	9500      	str	r5, [sp, #0]
 8004458:	f013 fd88 	bl	8017f6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800445c:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800445e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004460:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8004462:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004464:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8004466:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004468:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800446a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800446c:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800446e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8004470:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004472:	b00b      	add	sp, #44	@ 0x2c
 8004474:	bd30      	pop	{r4, r5, pc}
 8004476:	bf00      	nop
 8004478:	08028004 	.word	0x08028004

0800447c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800447c:	4770      	bx	lr

0800447e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800447e:	4770      	bx	lr

08004480 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004480:	4770      	bx	lr

08004482 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004482:	4770      	bx	lr

08004484 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004484:	4770      	bx	lr

08004486 <_ZN15Screen1ViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 8004486:	4770      	bx	lr

08004488 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8004488:	4770      	bx	lr

0800448a <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800448a:	4770      	bx	lr

0800448c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800448c:	4770      	bx	lr

0800448e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800448e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004490:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004492:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004494:	68c2      	ldr	r2, [r0, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	1055      	asrs	r5, r2, #1
 800449a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800449e:	07d2      	lsls	r2, r2, #31
 80044a0:	bf48      	it	mi
 80044a2:	5962      	ldrmi	r2, [r4, r5]
    }
 80044a4:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80044a6:	bf48      	it	mi
 80044a8:	58d3      	ldrmi	r3, [r2, r3]
 80044aa:	4718      	bx	r3

080044ac <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80044ac:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80044ae:	6840      	ldr	r0, [r0, #4]
 80044b0:	b130      	cbz	r0, 80044c0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	b91a      	cbnz	r2, 80044be <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80044b6:	68d8      	ldr	r0, [r3, #12]
 80044b8:	f000 0001 	and.w	r0, r0, #1
 80044bc:	4770      	bx	lr
 80044be:	2001      	movs	r0, #1
    }
 80044c0:	4770      	bx	lr

080044c2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80044c2:	b510      	push	{r4, lr}
 80044c4:	4604      	mov	r4, r0
 80044c6:	2110      	movs	r1, #16
 80044c8:	f020 f8a7 	bl	802461a <_ZdlPvj>
 80044cc:	4620      	mov	r0, r4
 80044ce:	bd10      	pop	{r4, pc}

080044d0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80044d0:	b510      	push	{r4, lr}
 80044d2:	4604      	mov	r4, r0
}
 80044d4:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80044d8:	f020 f89f 	bl	802461a <_ZdlPvj>
 80044dc:	4620      	mov	r0, r4
 80044de:	bd10      	pop	{r4, pc}

080044e0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 80044e0:	30f0      	adds	r0, #240	@ 0xf0
 80044e2:	4288      	cmp	r0, r1
{
 80044e4:	b508      	push	{r3, lr}
    if (&src == &button1)
 80044e6:	d105      	bne.n	80044f4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80044e8:	f012 f8ac 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
 80044ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
 80044f0:	f7ff bf42 	b.w	8004378 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
}
 80044f4:	bd08      	pop	{r3, pc}

080044f6 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80044f6:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	4604      	mov	r4, r0
        setX(x);
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80044fe:	4615      	mov	r5, r2
        setX(x);
 8004500:	4798      	blx	r3
        setY(y);
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	4620      	mov	r0, r4
 8004506:	4629      	mov	r1, r5
 8004508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800450a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800450e:	4718      	bx	r3

08004510 <_ZN8touchgfx6WidgetC1Ev>:
 8004510:	2200      	movs	r2, #0
 8004512:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004516:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800451a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 800451e:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8004522:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004526:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8004528:	4a01      	ldr	r2, [pc, #4]	@ (8004530 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800452a:	6002      	str	r2, [r0, #0]
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	0802806c 	.word	0x0802806c

08004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4604      	mov	r4, r0
 8004538:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 800453a:	2226      	movs	r2, #38	@ 0x26
 800453c:	2100      	movs	r1, #0
 800453e:	f020 fe7f 	bl	8025240 <memset>
 8004542:	4620      	mov	r0, r4
 8004544:	f7ff ffe4 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
 8004548:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
    {
        Image::setBitmap(bmp);
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	882b      	ldrh	r3, [r5, #0]
 8004552:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8004554:	23ff      	movs	r3, #255	@ 0xff
 8004556:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 800455a:	f00f fab0 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800455e:	4620      	mov	r0, r4
 8004560:	bd38      	pop	{r3, r4, r5, pc}
 8004562:	bf00      	nop
 8004564:	08029224 	.word	0x08029224

08004568 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	4604      	mov	r4, r0
 800456e:	b08b      	sub	sp, #44	@ 0x2c
        : presenter(0)
 8004570:	f04f 0900 	mov.w	r9, #0
 8004574:	f013 ff80 	bl	8018478 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8004578:	4625      	mov	r5, r4
 800457a:	4a7e      	ldr	r2, [pc, #504]	@ (8004774 <_ZN15Screen1ViewBaseC1Ev+0x20c>)
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 800457c:	4649      	mov	r1, r9
 800457e:	f8c4 903c 	str.w	r9, [r4, #60]	@ 0x3c
 8004582:	f845 2b40 	str.w	r2, [r5], #64
 8004586:	2226      	movs	r2, #38	@ 0x26
 8004588:	4628      	mov	r0, r5
 800458a:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 800458e:	f020 fe57 	bl	8025240 <memset>
 8004592:	4628      	mov	r0, r5
 8004594:	f7ff ffbc 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
 8004598:	4977      	ldr	r1, [pc, #476]	@ (8004778 <_ZN15Screen1ViewBaseC1Ev+0x210>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800459a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800459e:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 80045a2:	6421      	str	r1, [r4, #64]	@ 0x40
 80045a4:	21ff      	movs	r1, #255	@ 0xff
 80045a6:	4658      	mov	r0, fp
        : color(col)
 80045a8:	f8c4 9068 	str.w	r9, [r4, #104]	@ 0x68
 80045ac:	f884 1066 	strb.w	r1, [r4, #102]	@ 0x66
 80045b0:	a908      	add	r1, sp, #32
 80045b2:	f8ad 6020 	strh.w	r6, [sp, #32]
 80045b6:	f7ff ffbd 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80045ba:	a908      	add	r1, sp, #32
 80045bc:	4650      	mov	r0, sl
 80045be:	f8ad 6020 	strh.w	r6, [sp, #32]
 80045c2:	f7ff ffb7 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80045c6:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 80045ca:	f104 08f0 	add.w	r8, r4, #240	@ 0xf0
 80045ce:	a908      	add	r1, sp, #32
 80045d0:	f8ad 6020 	strh.w	r6, [sp, #32]
 80045d4:	4618      	mov	r0, r3
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	f7ff ffac 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80045dc:	4649      	mov	r1, r9
 80045de:	2226      	movs	r2, #38	@ 0x26
 80045e0:	4640      	mov	r0, r8
 80045e2:	f020 fe2d 	bl	8025240 <memset>
 80045e6:	4640      	mov	r0, r8
 80045e8:	f7ff ff92 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
 80045ec:	f504 7792 	add.w	r7, r4, #292	@ 0x124
        touchable = touch;
 80045f0:	f04f 0301 	mov.w	r3, #1
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 80045f4:	4961      	ldr	r1, [pc, #388]	@ (800477c <_ZN15Screen1ViewBaseC1Ev+0x214>)
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80045f6:	2226      	movs	r2, #38	@ 0x26
 80045f8:	f8a4 611e 	strh.w	r6, [r4, #286]	@ 0x11e
 80045fc:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
 8004600:	4638      	mov	r0, r7
 8004602:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0
 8004606:	4649      	mov	r1, r9
 8004608:	f8a4 6120 	strh.w	r6, [r4, #288]	@ 0x120
 800460c:	f884 6122 	strb.w	r6, [r4, #290]	@ 0x122
 8004610:	f8c4 9118 	str.w	r9, [r4, #280]	@ 0x118
 8004614:	f884 911c 	strb.w	r9, [r4, #284]	@ 0x11c
 8004618:	f020 fe12 	bl	8025240 <memset>
 800461c:	4638      	mov	r0, r7
 800461e:	f7ff ff77 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
 8004622:	4a57      	ldr	r2, [pc, #348]	@ (8004780 <_ZN15Screen1ViewBaseC1Ev+0x218>)
        : typedTextId(id)
 8004624:	4b57      	ldr	r3, [pc, #348]	@ (8004784 <_ZN15Screen1ViewBaseC1Ev+0x21c>)
        setXY(x, y);
 8004626:	4649      	mov	r1, r9
 8004628:	f8c4 2124 	str.w	r2, [r4, #292]	@ 0x124
 800462c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8004630:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	f8c4 2158 	str.w	r2, [r4, #344]	@ 0x158
 800463c:	4628      	mov	r0, r5
        : pobject(pObject), pmemfun(pmemfun_1)
 800463e:	4a52      	ldr	r2, [pc, #328]	@ (8004788 <_ZN15Screen1ViewBaseC1Ev+0x220>)
 8004640:	f8a4 6150 	strh.w	r6, [r4, #336]	@ 0x150
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004644:	1d26      	adds	r6, r4, #4
        : color(col)
 8004646:	f8c4 9154 	str.w	r9, [r4, #340]	@ 0x154
 800464a:	f8a4 915c 	strh.w	r9, [r4, #348]	@ 0x15c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800464e:	f8c4 9160 	str.w	r9, [r4, #352]	@ 0x160
 8004652:	e9c4 245b 	strd	r2, r4, [r4, #364]	@ 0x16c
 8004656:	4a4d      	ldr	r2, [pc, #308]	@ (800478c <_ZN15Screen1ViewBaseC1Ev+0x224>)
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8004658:	e9c4 3959 	strd	r3, r9, [r4, #356]	@ 0x164
 800465c:	e9c4 295d 	strd	r2, r9, [r4, #372]	@ 0x174
 8004660:	464a      	mov	r2, r9
 8004662:	f7ff ff48 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004666:	4628      	mov	r0, r5
 8004668:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800466c:	f7fe ff6a 	bl	8003544 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8004670:	4628      	mov	r0, r5
 8004672:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004676:	f7fe ff67 	bl	8003548 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800467a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800467e:	4629      	mov	r1, r5
 8004680:	4630      	mov	r0, r6
 8004682:	66a2      	str	r2, [r4, #104]	@ 0x68
 8004684:	2508      	movs	r5, #8
 8004686:	f00b ff29 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-88, -35);
 800468a:	4658      	mov	r0, fp
 800468c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004690:	f06f 0157 	mvn.w	r1, #87	@ 0x57
 8004694:	f7ff ff2f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 8004698:	2207      	movs	r2, #7
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 800469a:	a908      	add	r1, sp, #32
 800469c:	4658      	mov	r0, fp
 800469e:	f8ad 2020 	strh.w	r2, [sp, #32]
 80046a2:	f00f fa0c 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80046a6:	4659      	mov	r1, fp
 80046a8:	4630      	mov	r0, r6
 80046aa:	f00b ff17 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 80046ae:	464a      	mov	r2, r9
 80046b0:	4649      	mov	r1, r9
 80046b2:	4650      	mov	r0, sl
 80046b4:	f7ff ff1f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80046b8:	a908      	add	r1, sp, #32
 80046ba:	4650      	mov	r0, sl
 80046bc:	f8ad 5020 	strh.w	r5, [sp, #32]
 80046c0:	f00f f9fd 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80046c4:	4651      	mov	r1, sl
 80046c6:	4630      	mov	r0, r6
 80046c8:	f00b ff08 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 80046cc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80046d0:	4649      	mov	r1, r9
 80046d2:	9801      	ldr	r0, [sp, #4]
 80046d4:	f7ff ff0f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80046d8:	a908      	add	r1, sp, #32
 80046da:	9801      	ldr	r0, [sp, #4]
 80046dc:	f8ad 5020 	strh.w	r5, [sp, #32]
 80046e0:	f00f f9ed 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80046e4:	9901      	ldr	r1, [sp, #4]
 80046e6:	4630      	mov	r0, r6
 80046e8:	f00b fef8 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(261, 400);
 80046ec:	4640      	mov	r0, r8
 80046ee:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80046f2:	f240 1105 	movw	r1, #261	@ 0x105
 80046f6:	f7ff fefe 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 80046fa:	2209      	movs	r2, #9
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 80046fc:	a907      	add	r1, sp, #28
 80046fe:	4640      	mov	r0, r8
 8004700:	f8ad 201c 	strh.w	r2, [sp, #28]
        boundingArea = calculateBoundingArea();
 8004704:	446d      	add	r5, sp
 8004706:	f8ad 2020 	strh.w	r2, [sp, #32]
 800470a:	aa08      	add	r2, sp, #32
 800470c:	f00f f91b 	bl	8013946 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8004710:	f504 72b6 	add.w	r2, r4, #364	@ 0x16c
 8004714:	4641      	mov	r1, r8
 8004716:	4630      	mov	r0, r6
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004718:	f8c4 2118 	str.w	r2, [r4, #280]	@ 0x118
 800471c:	f00b fede 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(377, 430);
 8004720:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8004724:	4638      	mov	r0, r7
 8004726:	f240 1179 	movw	r1, #377	@ 0x179
 800472a:	f7ff fee4 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8004732:	4639      	mov	r1, r7
 8004734:	4628      	mov	r0, r5
        color = newColor;
 8004736:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        linespace = space;
 800473a:	f8a4 9158 	strh.w	r9, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 800473e:	f00e fe0d 	bl	801335c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004742:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 8004746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800474a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <_ZN15Screen1ViewBaseC1Ev+0x21c>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6YQL));
 8004750:	a908      	add	r1, sp, #32
 8004752:	4638      	mov	r0, r7
 8004754:	9308      	str	r3, [sp, #32]
 8004756:	f04f 0301 	mov.w	r3, #1
 800475a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800475e:	f00f f897 	bl	8013890 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004762:	4630      	mov	r0, r6
 8004764:	4639      	mov	r1, r7
 8004766:	f00b feb9 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800476a:	4620      	mov	r0, r4
 800476c:	b00b      	add	sp, #44	@ 0x2c
 800476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	080280ec 	.word	0x080280ec
 8004778:	08029148 	.word	0x08029148
 800477c:	080291b0 	.word	0x080291b0
 8004780:	080290b8 	.word	0x080290b8
 8004784:	08027a80 	.word	0x08027a80
 8004788:	080280d4 	.word	0x080280d4
 800478c:	080044e1 	.word	0x080044e1

08004790 <_ZN15Screen2ViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 8004790:	4770      	bx	lr

08004792 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8004792:	4770      	bx	lr

08004794 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8004794:	4770      	bx	lr

08004796 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004796:	4770      	bx	lr

08004798 <_ZN8touchgfx16RadioButtonGroupILt64EED1Ev>:
    }

    /** Finalizes an instance of the RadioButtonGroup class. */
    virtual ~RadioButtonGroup()
    {
    }
 8004798:	4770      	bx	lr

0800479a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 800479a:	4770      	bx	lr

0800479c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800479c:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800479e:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80047a0:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80047a2:	68c2      	ldr	r2, [r0, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	1055      	asrs	r5, r2, #1
 80047a8:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80047ac:	07d2      	lsls	r2, r2, #31
 80047ae:	bf48      	it	mi
 80047b0:	5962      	ldrmi	r2, [r4, r5]
    }
 80047b2:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80047b4:	bf48      	it	mi
 80047b6:	58d3      	ldrmi	r3, [r2, r3]
 80047b8:	4718      	bx	r3

080047ba <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80047ba:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80047bc:	6840      	ldr	r0, [r0, #4]
 80047be:	b130      	cbz	r0, 80047ce <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	b91a      	cbnz	r2, 80047cc <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80047c4:	68d8      	ldr	r0, [r3, #12]
 80047c6:	f000 0001 	and.w	r0, r0, #1
 80047ca:	4770      	bx	lr
 80047cc:	2001      	movs	r0, #1
    }
 80047ce:	4770      	bx	lr

080047d0 <_ZNK8touchgfx16RadioButtonGroupILt64EE14getRadioButtonEt>:
     *
     * @return the RadioButton at the specified index. Returns 0 if the index is illegal.
     */
    virtual RadioButton* getRadioButton(uint16_t index) const
    {
        return (size > index) ? radioButtons[index] : 0;
 80047d0:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 80047d4:	428b      	cmp	r3, r1
 80047d6:	bf86      	itte	hi
 80047d8:	eb00 0081 	addhi.w	r0, r0, r1, lsl #2
 80047dc:	6840      	ldrhi	r0, [r0, #4]
 80047de:	2000      	movls	r0, #0
    }
 80047e0:	4770      	bx	lr

080047e2 <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv>:
     * Gets the index of the currently selected RadioButton.
     *
     * @return the index of the selected RadioButton. Returns -1 if no RadioButton is
     *         selected.
     */
    virtual int32_t getSelectedRadioButtonIndex() const
 80047e2:	4603      	mov	r3, r0
    {
        for (uint16_t i = 0; i < size; i++)
 80047e4:	f8b0 1104 	ldrh.w	r1, [r0, #260]	@ 0x104
 80047e8:	2000      	movs	r0, #0
    virtual int32_t getSelectedRadioButtonIndex() const
 80047ea:	b510      	push	{r4, lr}
        for (uint16_t i = 0; i < size; i++)
 80047ec:	b282      	uxth	r2, r0
 80047ee:	4291      	cmp	r1, r2
 80047f0:	d802      	bhi.n	80047f8 <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0x16>
            if (radioButtons[i]->getSelected())
            {
                return i;
            }
        }
        return -1;
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
    }
 80047f6:	bd10      	pop	{r4, pc}
     *
     * @return The current selected state.
     */
    bool getSelected() const
    {
        return selected;
 80047f8:	f853 4f04 	ldr.w	r4, [r3, #4]!
            if (radioButtons[i]->getSelected())
 80047fc:	1c42      	adds	r2, r0, #1
 80047fe:	f894 4037 	ldrb.w	r4, [r4, #55]	@ 0x37
 8004802:	2c00      	cmp	r4, #0
 8004804:	d1f7      	bne.n	80047f6 <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0x14>
 8004806:	4610      	mov	r0, r2
 8004808:	e7f0      	b.n	80047ec <_ZNK8touchgfx16RadioButtonGroupILt64EE27getSelectedRadioButtonIndexEv+0xa>

0800480a <_ZNK8touchgfx16RadioButtonGroupILt64EE22getSelectedRadioButtonEv>:
     * @return a pointer to the selected RadioButton. Returns 0 if no RadioButton is
     *         selected.
     */
    virtual RadioButton* getSelectedRadioButton() const
    {
        int32_t index = getSelectedRadioButtonIndex();
 800480a:	6803      	ldr	r3, [r0, #0]
    virtual RadioButton* getSelectedRadioButton() const
 800480c:	b510      	push	{r4, lr}
        int32_t index = getSelectedRadioButtonIndex();
 800480e:	691b      	ldr	r3, [r3, #16]
    virtual RadioButton* getSelectedRadioButton() const
 8004810:	4604      	mov	r4, r0
        int32_t index = getSelectedRadioButtonIndex();
 8004812:	4798      	blx	r3
        return (index < 0) ? 0 : getRadioButton(index);
 8004814:	1e01      	subs	r1, r0, #0
 8004816:	db06      	blt.n	8004826 <_ZNK8touchgfx16RadioButtonGroupILt64EE22getSelectedRadioButtonEv+0x1c>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	4620      	mov	r0, r4
 800481c:	b289      	uxth	r1, r1
 800481e:	68db      	ldr	r3, [r3, #12]
    }
 8004820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return (index < 0) ? 0 : getRadioButton(index);
 8004824:	4718      	bx	r3
    }
 8004826:	2000      	movs	r0, #0
 8004828:	bd10      	pop	{r4, pc}

0800482a <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb>:
     *
     * @param  deselectionEnabled true if it should be possible to deselect by click.
     *
     * @see getDeselectionEnabled
     */
    virtual void setDeselectionEnabled(bool deselectionEnabled)
 800482a:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 800482e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    {
        for (uint16_t i = 0; i < size; i++)
 8004832:	4298      	cmp	r0, r3
 8004834:	d100      	bne.n	8004838 <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb+0xe>
        {
            radioButtons[i]->setDeselectionEnabled(deselectionEnabled);
        }
    }
 8004836:	4770      	bx	lr
        deselectionEnabled = state;
 8004838:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800483c:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
        for (uint16_t i = 0; i < size; i++)
 8004840:	e7f7      	b.n	8004832 <_ZN8touchgfx16RadioButtonGroupILt64EE21setDeselectionEnabledEb+0x8>

08004842 <_ZNK8touchgfx16RadioButtonGroupILt64EE21getDeselectionEnabledEv>:
     *
     * @return The current deselectionEnabled state.
     *
     * @see setDeselectionEnabled
     */
    virtual bool getDeselectionEnabled() const
 8004842:	4603      	mov	r3, r0
    {
        return (size > 0) ? radioButtons[0]->getDeselectionEnabled() : false;
 8004844:	f8b0 0104 	ldrh.w	r0, [r0, #260]	@ 0x104
 8004848:	b110      	cbz	r0, 8004850 <_ZNK8touchgfx16RadioButtonGroupILt64EE21getDeselectionEnabledEv+0xe>
        return deselectionEnabled;
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
    }
 8004850:	4770      	bx	lr

08004852 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8004852:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004854:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004856:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004858:	68c2      	ldr	r2, [r0, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	1055      	asrs	r5, r2, #1
 800485e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004862:	07d2      	lsls	r2, r2, #31
 8004864:	bf48      	it	mi
 8004866:	5962      	ldrmi	r2, [r4, r5]
    }
 8004868:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800486a:	bf48      	it	mi
 800486c:	58d3      	ldrmi	r3, [r2, r3]
 800486e:	4718      	bx	r3

08004870 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004870:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004872:	6840      	ldr	r0, [r0, #4]
 8004874:	b130      	cbz	r0, 8004884 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	b91a      	cbnz	r2, 8004882 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800487a:	68d8      	ldr	r0, [r3, #12]
 800487c:	f000 0001 	and.w	r0, r0, #1
 8004880:	4770      	bx	lr
 8004882:	2001      	movs	r0, #1
    }
 8004884:	4770      	bx	lr

08004886 <_ZN8touchgfx16RadioButtonGroupILt64EE11setSelectedERNS_11RadioButtonE>:
    virtual void setSelected(RadioButton& radioButton)
 8004886:	b570      	push	{r4, r5, r6, lr}
 8004888:	460d      	mov	r5, r1
 800488a:	4604      	mov	r4, r0
        radioButton.setSelected(true);
 800488c:	2101      	movs	r1, #1
 800488e:	4628      	mov	r0, r5
 8004890:	f00f fb26 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
        radioButtonClickedHandler(radioButton);
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	4629      	mov	r1, r5
 8004898:	4620      	mov	r0, r4
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800489c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        radioButtonClickedHandler(radioButton);
 80048a0:	4718      	bx	r3

080048a2 <_ZN8touchgfx16RadioButtonGroupILt64EED0Ev>:
    virtual ~RadioButtonGroup()
 80048a2:	b510      	push	{r4, lr}
 80048a4:	4604      	mov	r4, r0
    }
 80048a6:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80048aa:	f01f feb6 	bl	802461a <_ZdlPvj>
 80048ae:	4620      	mov	r0, r4
 80048b0:	bd10      	pop	{r4, pc}

080048b2 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt64EEERKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80048b2:	b510      	push	{r4, lr}
 80048b4:	4604      	mov	r4, r0
 80048b6:	2110      	movs	r1, #16
 80048b8:	f01f feaf 	bl	802461a <_ZdlPvj>
 80048bc:	4620      	mov	r0, r4
 80048be:	bd10      	pop	{r4, pc}

080048c0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	2110      	movs	r1, #16
 80048c6:	f01f fea8 	bl	802461a <_ZdlPvj>
 80048ca:	4620      	mov	r0, r4
 80048cc:	bd10      	pop	{r4, pc}

080048ce <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 80048ce:	b510      	push	{r4, lr}
 80048d0:	4604      	mov	r4, r0
}
 80048d2:	f241 3104 	movw	r1, #4868	@ 0x1304
 80048d6:	f01f fea0 	bl	802461a <_ZdlPvj>
 80048da:	4620      	mov	r0, r4
 80048dc:	bd10      	pop	{r4, pc}
	...

080048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>:
    virtual void add(RadioButton& radioButton)
 80048e0:	b508      	push	{r3, lr}
        assert(size < CAPACITY && "RadioButtonGroup capacity exceeded!");
 80048e2:	f8b0 3104 	ldrh.w	r3, [r0, #260]	@ 0x104
 80048e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80048e8:	d905      	bls.n	80048f6 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x16>
 80048ea:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x30>)
 80048ec:	2141      	movs	r1, #65	@ 0x41
 80048ee:	4a09      	ldr	r2, [pc, #36]	@ (8004914 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x34>)
 80048f0:	4809      	ldr	r0, [pc, #36]	@ (8004918 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE+0x38>)
 80048f2:	f020 fa09 	bl	8024d08 <__assert_func>
        radioButton.setAction(radioButtonClicked);
 80048f6:	f500 7284 	add.w	r2, r0, #264	@ 0x108
 80048fa:	628a      	str	r2, [r1, #40]	@ 0x28
        radioButton.setDeselectedAction(radioButtonUnselected);
 80048fc:	f500 728c 	add.w	r2, r0, #280	@ 0x118
        deselectedAction = &callback;
 8004900:	63ca      	str	r2, [r1, #60]	@ 0x3c
        radioButtons[size++] = &radioButton;
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	f8a0 2104 	strh.w	r2, [r0, #260]	@ 0x104
 8004908:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800490c:	6041      	str	r1, [r0, #4]
    }
 800490e:	bd08      	pop	{r3, pc}
 8004910:	0802811c 	.word	0x0802811c
 8004914:	08028155 	.word	0x08028155
 8004918:	080281c4 	.word	0x080281c4

0800491c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800491c:	b538      	push	{r3, r4, r5, lr}
    if (&src == &Nex)
 800491e:	f500 5391 	add.w	r3, r0, #4640	@ 0x1220
{
 8004922:	4604      	mov	r4, r0
 8004924:	460d      	mov	r5, r1
    if (&src == &Nex)
 8004926:	4299      	cmp	r1, r3
 8004928:	d103      	bne.n	8004932 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800492a:	f011 fe8b 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When Nex clicked change screen to WaitingScreen
        //Go to WaitingScreen with no screen transition
        application().gotoWaitingScreenScreenNoTransition();
 800492e:	f7ff fd33 	bl	8004398 <_ZN23FrontendApplicationBase35gotoWaitingScreenScreenNoTransitionEv>
    }
    if (&src == &Back)
 8004932:	f504 5094 	add.w	r0, r4, #4736	@ 0x1280
 8004936:	301c      	adds	r0, #28
 8004938:	4285      	cmp	r5, r0
 800493a:	d105      	bne.n	8004948 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2c>
 800493c:	f011 fe82 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When Back clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
}
 8004940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        application().gotoScreen1ScreenNoTransition();
 8004944:	f7ff bd08 	b.w	8004358 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
}
 8004948:	bd38      	pop	{r3, r4, r5, pc}

0800494a <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE>:
     * Handles the event that a RadioButton has been selected. deselects all other
     * RadioButtons.
     *
     * @param  radioButton the RadioButton that has been selected.
     */
    virtual void radioButtonClickedHandler(const AbstractButton& radioButton)
 800494a:	b570      	push	{r4, r5, r6, lr}
 800494c:	4604      	mov	r4, r0
 800494e:	460d      	mov	r5, r1
    {
        // Deselect other radio buttons
        for (uint16_t i = 0; i < size; i++)
 8004950:	2600      	movs	r6, #0
 8004952:	f8b4 2104 	ldrh.w	r2, [r4, #260]	@ 0x104
 8004956:	b2b3      	uxth	r3, r6
 8004958:	429a      	cmp	r2, r3
 800495a:	d80e      	bhi.n	800497a <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x30>
                    radioButtons[i]->setSelected(false);
                }
            }
        }

        if (radioButtonSelectedCallback && radioButtonSelectedCallback->isValid())
 800495c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 8004960:	b1c8      	cbz	r0, 8004996 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x4c>
 8004962:	6803      	ldr	r3, [r0, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4798      	blx	r3
 8004968:	b1a8      	cbz	r0, 8004996 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x4c>
 800496a:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
        {
            radioButtonSelectedCallback->execute(radioButton);
 800496e:	4629      	mov	r1, r5
 8004970:	6803      	ldr	r3, [r0, #0]
        }
    }
 8004972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonSelectedCallback->execute(radioButton);
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4718      	bx	r3
            if (radioButtons[i] != &radioButton)
 800497a:	b2b3      	uxth	r3, r6
 800497c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004980:	6858      	ldr	r0, [r3, #4]
 8004982:	42a8      	cmp	r0, r5
 8004984:	d005      	beq.n	8004992 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x48>
                if (radioButtons[i]->getSelected())
 8004986:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 800498a:	b113      	cbz	r3, 8004992 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x48>
                    radioButtons[i]->setSelected(false);
 800498c:	2100      	movs	r1, #0
 800498e:	f00f faa7 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
        for (uint16_t i = 0; i < size; i++)
 8004992:	3601      	adds	r6, #1
 8004994:	e7dd      	b.n	8004952 <_ZN8touchgfx16RadioButtonGroupILt64EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x8>
    }
 8004996:	bd70      	pop	{r4, r5, r6, pc}

08004998 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &RadioButton_0_1)
 8004998:	f500 538c 	add.w	r3, r0, #4480	@ 0x1180
 800499c:	3308      	adds	r3, #8
 800499e:	4299      	cmp	r1, r3
{
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4604      	mov	r4, r0
 80049a4:	460d      	mov	r5, r1
    if (&src == &RadioButton_0_1)
 80049a6:	d105      	bne.n	80049b4 <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x1c>
    {
        //Interaction3
        //When RadioButton_0_1 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 8 , 1);
 80049a8:	2301      	movs	r3, #1
 80049aa:	2208      	movs	r2, #8
 80049ac:	2100      	movs	r1, #0
 80049ae:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80049b0:	f001 ffe8 	bl	8006984 <_ZN16Screen2Presenter15selectMatrizLedEiii>
    }
    if (&src == &RadioButton_0_2)
 80049b4:	f504 538a 	add.w	r3, r4, #4416	@ 0x1140
 80049b8:	3308      	adds	r3, #8
 80049ba:	429d      	cmp	r5, r3
 80049bc:	d107      	bne.n	80049ce <_ZN15Screen2ViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x36>
    {
        //Interaction4
        //When RadioButton_0_2 selected execute C++ code
        //Execute C++ code
        presenter->selectMatrizLed(0, 8 , 1);
 80049be:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80049c0:	2301      	movs	r3, #1
 80049c2:	2208      	movs	r2, #8
 80049c4:	2100      	movs	r1, #0
    }
}
 80049c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        presenter->selectMatrizLed(0, 8 , 1);
 80049ca:	f001 bfdb 	b.w	8006984 <_ZN16Screen2Presenter15selectMatrizLedEiii>
}
 80049ce:	bd70      	pop	{r4, r5, r6, pc}

080049d0 <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE>:
    /**
     * Handles the event that a RadioButton has been deselected.
     *
     * @param  radioButton the RadioButton that has been deselected.
     */
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4604      	mov	r4, r0
    {
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 80049d4:	f8d0 012c 	ldr.w	r0, [r0, #300]	@ 0x12c
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 80049d8:	460d      	mov	r5, r1
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 80049da:	b158      	cbz	r0, 80049f4 <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x24>
 80049dc:	6803      	ldr	r3, [r0, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4798      	blx	r3
 80049e2:	b138      	cbz	r0, 80049f4 <_ZN8touchgfx16RadioButtonGroupILt64EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x24>
 80049e4:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
        {
            radioButtonDeselectedCallback->execute(radioButton);
 80049e8:	4629      	mov	r1, r5
 80049ea:	6803      	ldr	r3, [r0, #0]
        }
    }
 80049ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            radioButtonDeselectedCallback->execute(radioButton);
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4718      	bx	r3
    }
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080049f8 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton()
 80049f8:	b510      	push	{r4, lr}
 80049fa:	4604      	mov	r4, r0
        : Widget(), action(), pressed(false)
 80049fc:	2226      	movs	r2, #38	@ 0x26
 80049fe:	2100      	movs	r1, #0
 8004a00:	f020 fc1e 	bl	8025240 <memset>
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7ff fd83 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
 8004a0a:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <_ZN8touchgfx14AbstractButtonC1Ev+0x28>)
    }
 8004a0c:	4620      	mov	r0, r4
        : Widget(), action(), pressed(false)
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	2300      	movs	r3, #0
 8004a12:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a14:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        touchable = touch;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    }
 8004a1e:	bd10      	pop	{r4, pc}
 8004a20:	08028fd8 	.word	0x08028fd8

08004a24 <_ZN8touchgfx11RadioButtonC1Ev>:
    RadioButton()
 8004a24:	b510      	push	{r4, lr}
 8004a26:	4604      	mov	r4, r0
        : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 8004a28:	f7ff ffe6 	bl	80049f8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8004a2c:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <_ZN8touchgfx11RadioButtonC1Ev+0x2c>)
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
    }
 8004a32:	4620      	mov	r0, r4
        : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a3a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8004a3c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8004a40:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8004a44:	2300      	movs	r3, #0
 8004a46:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8004a4a:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	bf00      	nop
 8004a50:	08029304 	.word	0x08029304

08004a54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 8004a56:	4b19      	ldr	r3, [pc, #100]	@ (8004abc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 8004a58:	4606      	mov	r6, r0
 8004a5a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	428b      	cmp	r3, r1
 8004a60:	d92a      	bls.n	8004ab8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004a62:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	b92b      	cbnz	r3, 8004a74 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8004a68:	4b16      	ldr	r3, [pc, #88]	@ (8004ac4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8004a6a:	216c      	movs	r1, #108	@ 0x6c
 8004a6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 8004a6e:	4817      	ldr	r0, [pc, #92]	@ (8004acc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8004a70:	f020 f94a 	bl	8024d08 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004a74:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8004a78:	4b15      	ldr	r3, [pc, #84]	@ (8004ad0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004a80:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	f001 fd60 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	4607      	mov	r7, r0
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	4798      	blx	r3
 8004a92:	682b      	ldr	r3, [r5, #0]
 8004a94:	4604      	mov	r4, r0
 8004a96:	4639      	mov	r1, r7
 8004a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	4798      	blx	r3
 8004a9e:	fb14 f400 	smulbb	r4, r4, r0
 8004aa2:	682b      	ldr	r3, [r5, #0]
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	b2a4      	uxth	r4, r4
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	4798      	blx	r3
 8004aae:	1823      	adds	r3, r4, r0
 8004ab0:	b21b      	sxth	r3, r3
 8004ab2:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8004ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e7fa      	b.n	8004ab2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8004abc:	24026478 	.word	0x24026478
 8004ac0:	24026474 	.word	0x24026474
 8004ac4:	08028228 	.word	0x08028228
 8004ac8:	0802826a 	.word	0x0802826a
 8004acc:	080282a5 	.word	0x080282a5
 8004ad0:	2402647c 	.word	0x2402647c
 8004ad4:	24026480 	.word	0x24026480

08004ad8 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8004ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004adc:	4604      	mov	r4, r0
 8004ade:	b0cd      	sub	sp, #308	@ 0x134
 8004ae0:	2500      	movs	r5, #0
 8004ae2:	f013 fcc9 	bl	8018478 <_ZN8touchgfx6ScreenC1Ev>
    radioButtonSelectedCallback(this, &Screen2ViewBase::radioButtonSelectedCallbackHandler)
 8004ae6:	4627      	mov	r7, r4
 8004ae8:	4bda      	ldr	r3, [pc, #872]	@ (8004e54 <_ZN15Screen2ViewBaseC1Ev+0x37c>)
        : Widget(), alpha(255), color(0)
 8004aea:	2226      	movs	r2, #38	@ 0x26
 8004aec:	4629      	mov	r1, r5
 8004aee:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8004af0:	f50d 7b96 	add.w	fp, sp, #300	@ 0x12c
 8004af4:	f847 3b40 	str.w	r3, [r7], #64
 8004af8:	4638      	mov	r0, r7
 8004afa:	f020 fba1 	bl	8025240 <memset>
 8004afe:	4638      	mov	r0, r7
 8004b00:	f7ff fd06 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
 8004b04:	4bd4      	ldr	r3, [pc, #848]	@ (8004e58 <_ZN15Screen2ViewBaseC1Ev+0x380>)
 8004b06:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 8004b0a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8004b0e:	6423      	str	r3, [r4, #64]	@ 0x40
 8004b10:	23ff      	movs	r3, #255	@ 0xff
 8004b12:	4659      	mov	r1, fp
        : color(col)
 8004b14:	66a5      	str	r5, [r4, #104]	@ 0x68
 8004b16:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8004b20:	f7ff fd08 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004b24:	f104 0398 	add.w	r3, r4, #152	@ 0x98
        : pobject(pObject), pmemfun(pmemfun_1)
 8004b28:	4acc      	ldr	r2, [pc, #816]	@ (8004e5c <_ZN15Screen2ViewBaseC1Ev+0x384>)
 8004b2a:	2124      	movs	r1, #36	@ 0x24
        : size(0),
 8004b2c:	f8a4 519c 	strh.w	r5, [r4, #412]	@ 0x19c
 8004b30:	9302      	str	r3, [sp, #8]
 8004b32:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
          radioButtonDeselectedCallback(0)
 8004b36:	4bca      	ldr	r3, [pc, #808]	@ (8004e60 <_ZN15Screen2ViewBaseC1Ev+0x388>)
 8004b38:	f04f 0a04 	mov.w	sl, #4
 8004b3c:	f8c4 21a0 	str.w	r2, [r4, #416]	@ 0x1a0
 8004b40:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8004b44:	f8c4 21b0 	str.w	r2, [r4, #432]	@ 0x1b0
 8004b48:	9b02      	ldr	r3, [sp, #8]
 8004b4a:	9a02      	ldr	r2, [sp, #8]
 8004b4c:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
 8004b50:	2301      	movs	r3, #1
 8004b52:	f8c4 21b4 	str.w	r2, [r4, #436]	@ 0x1b4
 8004b56:	2228      	movs	r2, #40	@ 0x28
 8004b58:	e9c4 136a 	strd	r1, r3, [r4, #424]	@ 0x1a8
 8004b5c:	e9c4 236e 	strd	r2, r3, [r4, #440]	@ 0x1b8
 8004b60:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 8004b64:	e9c4 5570 	strd	r5, r5, [r4, #448]	@ 0x1c0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	9303      	str	r3, [sp, #12]
 8004b6c:	f7ff ff5a 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004b70:	f504 7302 	add.w	r3, r4, #520	@ 0x208
 8004b74:	4618      	mov	r0, r3
 8004b76:	930c      	str	r3, [sp, #48]	@ 0x30
 8004b78:	f7ff ff54 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004b7c:	f504 7312 	add.w	r3, r4, #584	@ 0x248
 8004b80:	4618      	mov	r0, r3
 8004b82:	930d      	str	r3, [sp, #52]	@ 0x34
 8004b84:	f7ff ff4e 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004b88:	f504 7322 	add.w	r3, r4, #648	@ 0x288
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b90:	f7ff ff48 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004b94:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
 8004b98:	4618      	mov	r0, r3
 8004b9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b9c:	f7ff ff42 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004ba0:	f504 7342 	add.w	r3, r4, #776	@ 0x308
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ba8:	f7ff ff3c 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004bac:	f504 7352 	add.w	r3, r4, #840	@ 0x348
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	9311      	str	r3, [sp, #68]	@ 0x44
 8004bb4:	f7ff ff36 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004bb8:	f504 7362 	add.w	r3, r4, #904	@ 0x388
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	9312      	str	r3, [sp, #72]	@ 0x48
 8004bc0:	f7ff ff30 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004bc4:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 8004bc8:	4618      	mov	r0, r3
 8004bca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004bcc:	f7ff ff2a 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004bd0:	f504 6381 	add.w	r3, r4, #1032	@ 0x408
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	9314      	str	r3, [sp, #80]	@ 0x50
 8004bd8:	f7ff ff24 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004bdc:	f504 6389 	add.w	r3, r4, #1096	@ 0x448
 8004be0:	4618      	mov	r0, r3
 8004be2:	9315      	str	r3, [sp, #84]	@ 0x54
 8004be4:	f7ff ff1e 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004be8:	f504 6391 	add.w	r3, r4, #1160	@ 0x488
 8004bec:	4618      	mov	r0, r3
 8004bee:	9316      	str	r3, [sp, #88]	@ 0x58
 8004bf0:	f7ff ff18 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004bf4:	f504 6399 	add.w	r3, r4, #1224	@ 0x4c8
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004bfc:	f7ff ff12 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c00:	f504 63a1 	add.w	r3, r4, #1288	@ 0x508
 8004c04:	4618      	mov	r0, r3
 8004c06:	9318      	str	r3, [sp, #96]	@ 0x60
 8004c08:	f7ff ff0c 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c0c:	f504 63a9 	add.w	r3, r4, #1352	@ 0x548
 8004c10:	4618      	mov	r0, r3
 8004c12:	9319      	str	r3, [sp, #100]	@ 0x64
 8004c14:	f7ff ff06 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c18:	f504 63b1 	add.w	r3, r4, #1416	@ 0x588
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c20:	f7ff ff00 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c24:	f504 63b9 	add.w	r3, r4, #1480	@ 0x5c8
 8004c28:	4618      	mov	r0, r3
 8004c2a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004c2c:	f7ff fefa 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c30:	f504 63c1 	add.w	r3, r4, #1544	@ 0x608
 8004c34:	4618      	mov	r0, r3
 8004c36:	931c      	str	r3, [sp, #112]	@ 0x70
 8004c38:	f7ff fef4 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c3c:	f504 63c9 	add.w	r3, r4, #1608	@ 0x648
 8004c40:	4618      	mov	r0, r3
 8004c42:	931d      	str	r3, [sp, #116]	@ 0x74
 8004c44:	f7ff feee 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c48:	f504 63d1 	add.w	r3, r4, #1672	@ 0x688
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	931e      	str	r3, [sp, #120]	@ 0x78
 8004c50:	f7ff fee8 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c54:	f504 63d9 	add.w	r3, r4, #1736	@ 0x6c8
 8004c58:	4618      	mov	r0, r3
 8004c5a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8004c5c:	f7ff fee2 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c60:	f504 63e1 	add.w	r3, r4, #1800	@ 0x708
 8004c64:	4618      	mov	r0, r3
 8004c66:	9320      	str	r3, [sp, #128]	@ 0x80
 8004c68:	f7ff fedc 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c6c:	f504 63e9 	add.w	r3, r4, #1864	@ 0x748
 8004c70:	4618      	mov	r0, r3
 8004c72:	9321      	str	r3, [sp, #132]	@ 0x84
 8004c74:	f7ff fed6 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c78:	f504 63f1 	add.w	r3, r4, #1928	@ 0x788
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	9322      	str	r3, [sp, #136]	@ 0x88
 8004c80:	f7ff fed0 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c84:	f504 63f9 	add.w	r3, r4, #1992	@ 0x7c8
 8004c88:	4618      	mov	r0, r3
 8004c8a:	9323      	str	r3, [sp, #140]	@ 0x8c
 8004c8c:	f7ff feca 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c90:	f604 0308 	addw	r3, r4, #2056	@ 0x808
 8004c94:	4618      	mov	r0, r3
 8004c96:	9324      	str	r3, [sp, #144]	@ 0x90
 8004c98:	f7ff fec4 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004c9c:	f604 0348 	addw	r3, r4, #2120	@ 0x848
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	9325      	str	r3, [sp, #148]	@ 0x94
 8004ca4:	f7ff febe 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004ca8:	f604 0388 	addw	r3, r4, #2184	@ 0x888
 8004cac:	4618      	mov	r0, r3
 8004cae:	9326      	str	r3, [sp, #152]	@ 0x98
 8004cb0:	f7ff feb8 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004cb4:	f604 03c8 	addw	r3, r4, #2248	@ 0x8c8
 8004cb8:	4618      	mov	r0, r3
 8004cba:	9327      	str	r3, [sp, #156]	@ 0x9c
 8004cbc:	f7ff feb2 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004cc0:	f604 1308 	addw	r3, r4, #2312	@ 0x908
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8004cc8:	f7ff feac 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004ccc:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8004cd4:	f7ff fea6 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004cd8:	f604 1388 	addw	r3, r4, #2440	@ 0x988
 8004cdc:	4618      	mov	r0, r3
 8004cde:	932a      	str	r3, [sp, #168]	@ 0xa8
 8004ce0:	f7ff fea0 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004ce4:	f604 13c8 	addw	r3, r4, #2504	@ 0x9c8
 8004ce8:	4618      	mov	r0, r3
 8004cea:	932b      	str	r3, [sp, #172]	@ 0xac
 8004cec:	f7ff fe9a 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004cf0:	f604 2308 	addw	r3, r4, #2568	@ 0xa08
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	932c      	str	r3, [sp, #176]	@ 0xb0
 8004cf8:	f7ff fe94 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004cfc:	f604 2348 	addw	r3, r4, #2632	@ 0xa48
 8004d00:	4618      	mov	r0, r3
 8004d02:	932d      	str	r3, [sp, #180]	@ 0xb4
 8004d04:	f7ff fe8e 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d08:	f604 2388 	addw	r3, r4, #2696	@ 0xa88
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8004d10:	f7ff fe88 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d14:	f604 23c8 	addw	r3, r4, #2760	@ 0xac8
 8004d18:	4618      	mov	r0, r3
 8004d1a:	932f      	str	r3, [sp, #188]	@ 0xbc
 8004d1c:	f7ff fe82 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d20:	f604 3308 	addw	r3, r4, #2824	@ 0xb08
 8004d24:	4618      	mov	r0, r3
 8004d26:	9330      	str	r3, [sp, #192]	@ 0xc0
 8004d28:	f7ff fe7c 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d2c:	f604 3348 	addw	r3, r4, #2888	@ 0xb48
 8004d30:	4618      	mov	r0, r3
 8004d32:	9331      	str	r3, [sp, #196]	@ 0xc4
 8004d34:	f7ff fe76 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d38:	f604 3388 	addw	r3, r4, #2952	@ 0xb88
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	9332      	str	r3, [sp, #200]	@ 0xc8
 8004d40:	f7ff fe70 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d44:	f604 33c8 	addw	r3, r4, #3016	@ 0xbc8
 8004d48:	4618      	mov	r0, r3
 8004d4a:	9333      	str	r3, [sp, #204]	@ 0xcc
 8004d4c:	f7ff fe6a 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d50:	f604 4308 	addw	r3, r4, #3080	@ 0xc08
 8004d54:	4618      	mov	r0, r3
 8004d56:	9334      	str	r3, [sp, #208]	@ 0xd0
 8004d58:	f7ff fe64 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d5c:	f604 4348 	addw	r3, r4, #3144	@ 0xc48
 8004d60:	4618      	mov	r0, r3
 8004d62:	9335      	str	r3, [sp, #212]	@ 0xd4
 8004d64:	f7ff fe5e 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d68:	f604 4388 	addw	r3, r4, #3208	@ 0xc88
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	9336      	str	r3, [sp, #216]	@ 0xd8
 8004d70:	f7ff fe58 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d74:	f604 43c8 	addw	r3, r4, #3272	@ 0xcc8
 8004d78:	4618      	mov	r0, r3
 8004d7a:	9337      	str	r3, [sp, #220]	@ 0xdc
 8004d7c:	f7ff fe52 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d80:	f604 5308 	addw	r3, r4, #3336	@ 0xd08
 8004d84:	4618      	mov	r0, r3
 8004d86:	9338      	str	r3, [sp, #224]	@ 0xe0
 8004d88:	f7ff fe4c 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d8c:	f604 5348 	addw	r3, r4, #3400	@ 0xd48
 8004d90:	4618      	mov	r0, r3
 8004d92:	9339      	str	r3, [sp, #228]	@ 0xe4
 8004d94:	f7ff fe46 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004d98:	f604 5388 	addw	r3, r4, #3464	@ 0xd88
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	933a      	str	r3, [sp, #232]	@ 0xe8
 8004da0:	f7ff fe40 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004da4:	f604 53c8 	addw	r3, r4, #3528	@ 0xdc8
 8004da8:	4618      	mov	r0, r3
 8004daa:	933b      	str	r3, [sp, #236]	@ 0xec
 8004dac:	f7ff fe3a 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004db0:	f604 6308 	addw	r3, r4, #3592	@ 0xe08
 8004db4:	4618      	mov	r0, r3
 8004db6:	933c      	str	r3, [sp, #240]	@ 0xf0
 8004db8:	f7ff fe34 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004dbc:	f604 6348 	addw	r3, r4, #3656	@ 0xe48
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	933d      	str	r3, [sp, #244]	@ 0xf4
 8004dc4:	f7ff fe2e 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004dc8:	f604 6388 	addw	r3, r4, #3720	@ 0xe88
 8004dcc:	4618      	mov	r0, r3
 8004dce:	933e      	str	r3, [sp, #248]	@ 0xf8
 8004dd0:	f7ff fe28 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004dd4:	f604 63c8 	addw	r3, r4, #3784	@ 0xec8
 8004dd8:	4618      	mov	r0, r3
 8004dda:	933f      	str	r3, [sp, #252]	@ 0xfc
 8004ddc:	f7ff fe22 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004de0:	f604 7308 	addw	r3, r4, #3848	@ 0xf08
 8004de4:	4618      	mov	r0, r3
 8004de6:	9340      	str	r3, [sp, #256]	@ 0x100
 8004de8:	f7ff fe1c 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004dec:	f604 7348 	addw	r3, r4, #3912	@ 0xf48
 8004df0:	4618      	mov	r0, r3
 8004df2:	9341      	str	r3, [sp, #260]	@ 0x104
 8004df4:	f7ff fe16 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004df8:	f604 7388 	addw	r3, r4, #3976	@ 0xf88
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	9342      	str	r3, [sp, #264]	@ 0x108
 8004e00:	f7ff fe10 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e04:	f604 73c8 	addw	r3, r4, #4040	@ 0xfc8
 8004e08:	4618      	mov	r0, r3
 8004e0a:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004e0c:	f7ff fe0a 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e10:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8004e14:	3308      	adds	r3, #8
 8004e16:	4618      	mov	r0, r3
 8004e18:	9304      	str	r3, [sp, #16]
 8004e1a:	f7ff fe03 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e1e:	f504 5382 	add.w	r3, r4, #4160	@ 0x1040
 8004e22:	3308      	adds	r3, #8
 8004e24:	4618      	mov	r0, r3
 8004e26:	9305      	str	r3, [sp, #20]
 8004e28:	f7ff fdfc 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e2c:	f504 5384 	add.w	r3, r4, #4224	@ 0x1080
 8004e30:	3308      	adds	r3, #8
 8004e32:	4618      	mov	r0, r3
 8004e34:	9306      	str	r3, [sp, #24]
 8004e36:	f7ff fdf5 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e3a:	f504 5386 	add.w	r3, r4, #4288	@ 0x10c0
 8004e3e:	3308      	adds	r3, #8
 8004e40:	4618      	mov	r0, r3
 8004e42:	9307      	str	r3, [sp, #28]
 8004e44:	f7ff fdee 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e48:	f504 5388 	add.w	r3, r4, #4352	@ 0x1100
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	4618      	mov	r0, r3
 8004e50:	e008      	b.n	8004e64 <_ZN15Screen2ViewBaseC1Ev+0x38c>
 8004e52:	bf00      	nop
 8004e54:	08028368 	.word	0x08028368
 8004e58:	08029148 	.word	0x08029148
 8004e5c:	08028304 	.word	0x08028304
 8004e60:	0802831c 	.word	0x0802831c
 8004e64:	9308      	str	r3, [sp, #32]
 8004e66:	f7ff fddd 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e6a:	f504 538a 	add.w	r3, r4, #4416	@ 0x1140
 8004e6e:	3308      	adds	r3, #8
 8004e70:	4618      	mov	r0, r3
 8004e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e74:	f7ff fdd6 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e78:	f504 538c 	add.w	r3, r4, #4480	@ 0x1180
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	4618      	mov	r0, r3
 8004e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e82:	f7ff fdcf 	bl	8004a24 <_ZN8touchgfx11RadioButtonC1Ev>
 8004e86:	f504 538e 	add.w	r3, r4, #4544	@ 0x11c0
 8004e8a:	4659      	mov	r1, fp
 8004e8c:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8004e90:	3308      	adds	r3, #8
 8004e92:	4618      	mov	r0, r3
 8004e94:	9344      	str	r3, [sp, #272]	@ 0x110
 8004e96:	f7ff fb4d 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004e9a:	f504 538f 	add.w	r3, r4, #4576	@ 0x11e0
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	9345      	str	r3, [sp, #276]	@ 0x114
 8004eaa:	f7ff fb43 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8004eae:	f504 5391 	add.w	r3, r4, #4640	@ 0x1220
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004eb6:	f00e ff43 	bl	8013d40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004eba:	f504 5393 	add.w	r3, r4, #4704	@ 0x1260
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	9346      	str	r3, [sp, #280]	@ 0x118
 8004ec4:	f7ff fd98 	bl	80049f8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8004ec8:	4bd0      	ldr	r3, [pc, #832]	@ (800520c <_ZN15Screen2ViewBaseC1Ev+0x734>)
 8004eca:	f8a6 9296 	strh.w	r9, [r6, #662]	@ 0x296
 8004ece:	f8c6 3268 	str.w	r3, [r6, #616]	@ 0x268
 8004ed2:	f504 5394 	add.w	r3, r4, #4736	@ 0x1280
 8004ed6:	f8a6 9298 	strh.w	r9, [r6, #664]	@ 0x298
 8004eda:	331c      	adds	r3, #28
 8004edc:	f886 929a 	strb.w	r9, [r6, #666]	@ 0x29a
 8004ee0:	f04f 0905 	mov.w	r9, #5
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ee8:	f00e ff2a 	bl	8013d40 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004eec:	4bc8      	ldr	r3, [pc, #800]	@ (8005210 <_ZN15Screen2ViewBaseC1Ev+0x738>)
 8004eee:	4ac9      	ldr	r2, [pc, #804]	@ (8005214 <_ZN15Screen2ViewBaseC1Ev+0x73c>)
        setXY(x, y);
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	e9c6 34b9 	strd	r3, r4, [r6, #740]	@ 0x2e4
 8004ef8:	e9c6 34bd 	strd	r3, r4, [r6, #756]	@ 0x2f4
 8004efc:	4bc6      	ldr	r3, [pc, #792]	@ (8005218 <_ZN15Screen2ViewBaseC1Ev+0x740>)
 8004efe:	e9c6 25bb 	strd	r2, r5, [r6, #748]	@ 0x2ec
 8004f02:	e9c6 35bf 	strd	r3, r5, [r6, #764]	@ 0x2fc
 8004f06:	462a      	mov	r2, r5
 8004f08:	1d26      	adds	r6, r4, #4
 8004f0a:	f7ff faf4 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004f0e:	4638      	mov	r0, r7
 8004f10:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8004f14:	f7fe fb16 	bl	8003544 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004f1e:	f7fe fb13 	bl	8003548 <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 8004f22:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004f26:	4639      	mov	r1, r7
 8004f28:	4630      	mov	r0, r6
 8004f2a:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004f2c:	2703      	movs	r7, #3
 8004f2e:	f00b fad5 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-99, -42);
 8004f32:	f06f 0229 	mvn.w	r2, #41	@ 0x29
 8004f36:	4640      	mov	r0, r8
 8004f38:	f06f 0162 	mvn.w	r1, #98	@ 0x62
 8004f3c:	f7ff fadb 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 8004f40:	2307      	movs	r3, #7
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 8004f42:	4659      	mov	r1, fp
 8004f44:	4640      	mov	r0, r8
 8004f46:	f8ad 312c 	strh.w	r3, [sp, #300]	@ 0x12c
 8004f4a:	f00e fdb8 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004f4e:	4641      	mov	r1, r8
 8004f50:	4630      	mov	r0, r6
 8004f52:	f04f 0806 	mov.w	r8, #6
 8004f56:	f00b fac1 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_16.setXY(750, 308);
 8004f5a:	9803      	ldr	r0, [sp, #12]
 8004f5c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8004f60:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8004f64:	f7ff fac7 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8004f68:	ab4a      	add	r3, sp, #296	@ 0x128
 8004f6a:	aa49      	add	r2, sp, #292	@ 0x124
 8004f6c:	a948      	add	r1, sp, #288	@ 0x120
 8004f6e:	9803      	ldr	r0, [sp, #12]
 8004f70:	f8cd b000 	str.w	fp, [sp]
 8004f74:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8004f78:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8004f7c:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8004f80:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8004f84:	f00e ff0b 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_16.setSelected(false);
 8004f88:	4629      	mov	r1, r5
 8004f8a:	9803      	ldr	r0, [sp, #12]
 8004f8c:	f00e ffa8 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
        deselectionEnabled = state;
 8004f90:	f884 5200 	strb.w	r5, [r4, #512]	@ 0x200
    radioButtonGroup1.add(RadioButton_3_16);
 8004f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f98:	f7ff fca2 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8004f9c:	9903      	ldr	r1, [sp, #12]
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f00b fa9c 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_15.setXY(700, 308);
 8004fa4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004fa6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8004faa:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8004fae:	f7ff faa2 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8004fb2:	ab4a      	add	r3, sp, #296	@ 0x128
 8004fb4:	aa49      	add	r2, sp, #292	@ 0x124
 8004fb6:	a948      	add	r1, sp, #288	@ 0x120
 8004fb8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004fba:	f8cd b000 	str.w	fp, [sp]
 8004fbe:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8004fc2:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8004fc6:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8004fca:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8004fce:	f00e fee6 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_15.setSelected(false);
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004fd6:	f00e ff83 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_15);
 8004fda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004fdc:	9802      	ldr	r0, [sp, #8]
 8004fde:	f884 5240 	strb.w	r5, [r4, #576]	@ 0x240
 8004fe2:	f7ff fc7d 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8004fe6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f00b fa77 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_14.setXY(650, 308);
 8004fee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004ff0:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8004ff4:	f240 218a 	movw	r1, #650	@ 0x28a
 8004ff8:	f7ff fa7d 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8004ffc:	ab4a      	add	r3, sp, #296	@ 0x128
 8004ffe:	aa49      	add	r2, sp, #292	@ 0x124
 8005000:	a948      	add	r1, sp, #288	@ 0x120
 8005002:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005004:	f8cd b000 	str.w	fp, [sp]
 8005008:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 800500c:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005010:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005014:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005018:	f00e fec1 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_14.setSelected(false);
 800501c:	4629      	mov	r1, r5
 800501e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005020:	f00e ff5e 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_14);
 8005024:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005026:	9802      	ldr	r0, [sp, #8]
 8005028:	f884 5280 	strb.w	r5, [r4, #640]	@ 0x280
 800502c:	f7ff fc58 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005030:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005032:	4630      	mov	r0, r6
 8005034:	f00b fa52 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_13.setXY(600, 308);
 8005038:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800503a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800503e:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8005042:	f7ff fa58 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005046:	ab4a      	add	r3, sp, #296	@ 0x128
 8005048:	aa49      	add	r2, sp, #292	@ 0x124
 800504a:	a948      	add	r1, sp, #288	@ 0x120
 800504c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800504e:	f8cd b000 	str.w	fp, [sp]
 8005052:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005056:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 800505a:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800505e:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005062:	f00e fe9c 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_13.setSelected(false);
 8005066:	4629      	mov	r1, r5
 8005068:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800506a:	f00e ff39 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_13);
 800506e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005070:	9802      	ldr	r0, [sp, #8]
 8005072:	f884 52c0 	strb.w	r5, [r4, #704]	@ 0x2c0
 8005076:	f7ff fc33 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800507a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800507c:	4630      	mov	r0, r6
 800507e:	f00b fa2d 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_12.setXY(750, 258);
 8005082:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005084:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005088:	f240 21ee 	movw	r1, #750	@ 0x2ee
 800508c:	f7ff fa33 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005090:	ab4a      	add	r3, sp, #296	@ 0x128
 8005092:	aa49      	add	r2, sp, #292	@ 0x124
 8005094:	a948      	add	r1, sp, #288	@ 0x120
 8005096:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005098:	f8cd b000 	str.w	fp, [sp]
 800509c:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80050a0:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80050a4:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80050a8:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80050ac:	f00e fe77 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_12.setSelected(false);
 80050b0:	4629      	mov	r1, r5
 80050b2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80050b4:	f00e ff14 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_12);
 80050b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80050ba:	9802      	ldr	r0, [sp, #8]
 80050bc:	f884 5300 	strb.w	r5, [r4, #768]	@ 0x300
 80050c0:	f7ff fc0e 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80050c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80050c6:	4630      	mov	r0, r6
 80050c8:	f00b fa08 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_11.setXY(700, 258);
 80050cc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80050ce:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80050d2:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 80050d6:	f7ff fa0e 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80050da:	ab4a      	add	r3, sp, #296	@ 0x128
 80050dc:	aa49      	add	r2, sp, #292	@ 0x124
 80050de:	a948      	add	r1, sp, #288	@ 0x120
 80050e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80050e2:	f8cd b000 	str.w	fp, [sp]
 80050e6:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80050ea:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80050ee:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80050f2:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80050f6:	f00e fe52 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_11.setSelected(false);
 80050fa:	4629      	mov	r1, r5
 80050fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80050fe:	f00e feef 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_11);
 8005102:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005104:	9802      	ldr	r0, [sp, #8]
 8005106:	f884 5340 	strb.w	r5, [r4, #832]	@ 0x340
 800510a:	f7ff fbe9 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800510e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005110:	4630      	mov	r0, r6
 8005112:	f00b f9e3 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_10.setXY(650, 258);
 8005116:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8005118:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800511c:	f240 218a 	movw	r1, #650	@ 0x28a
 8005120:	f7ff f9e9 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005124:	ab4a      	add	r3, sp, #296	@ 0x128
 8005126:	aa49      	add	r2, sp, #292	@ 0x124
 8005128:	a948      	add	r1, sp, #288	@ 0x120
 800512a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800512c:	f8cd b000 	str.w	fp, [sp]
 8005130:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005134:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005138:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800513c:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005140:	f00e fe2d 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_10.setSelected(false);
 8005144:	4629      	mov	r1, r5
 8005146:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8005148:	f00e feca 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_10);
 800514c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800514e:	9802      	ldr	r0, [sp, #8]
 8005150:	f884 5380 	strb.w	r5, [r4, #896]	@ 0x380
 8005154:	f7ff fbc4 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005158:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800515a:	4630      	mov	r0, r6
 800515c:	f00b f9be 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_9.setXY(600, 258);
 8005160:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005162:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005166:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800516a:	f7ff f9c4 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800516e:	ab4a      	add	r3, sp, #296	@ 0x128
 8005170:	aa49      	add	r2, sp, #292	@ 0x124
 8005172:	a948      	add	r1, sp, #288	@ 0x120
 8005174:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005176:	f8cd b000 	str.w	fp, [sp]
 800517a:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 800517e:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005182:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005186:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800518a:	f00e fe08 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_9.setSelected(false);
 800518e:	4629      	mov	r1, r5
 8005190:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8005192:	f00e fea5 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_9);
 8005196:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8005198:	9802      	ldr	r0, [sp, #8]
 800519a:	f884 53c0 	strb.w	r5, [r4, #960]	@ 0x3c0
 800519e:	f7ff fb9f 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80051a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80051a4:	4630      	mov	r0, r6
 80051a6:	f00b f999 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_8.setXY(750, 208);
 80051aa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80051ac:	22d0      	movs	r2, #208	@ 0xd0
 80051ae:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80051b2:	f7ff f9a0 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80051b6:	ab4a      	add	r3, sp, #296	@ 0x128
 80051b8:	aa49      	add	r2, sp, #292	@ 0x124
 80051ba:	a948      	add	r1, sp, #288	@ 0x120
 80051bc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80051be:	f8cd b000 	str.w	fp, [sp]
 80051c2:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80051c6:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80051ca:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80051ce:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80051d2:	f00e fde4 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_8.setSelected(false);
 80051d6:	4629      	mov	r1, r5
 80051d8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80051da:	f00e fe81 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_8);
 80051de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80051e0:	9802      	ldr	r0, [sp, #8]
 80051e2:	f884 5400 	strb.w	r5, [r4, #1024]	@ 0x400
 80051e6:	f7ff fb7b 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80051ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80051ec:	4630      	mov	r0, r6
 80051ee:	f00b f975 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_7.setXY(700, 208);
 80051f2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80051f4:	22d0      	movs	r2, #208	@ 0xd0
 80051f6:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 80051fa:	f7ff f97c 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80051fe:	ab4a      	add	r3, sp, #296	@ 0x128
 8005200:	aa49      	add	r2, sp, #292	@ 0x124
 8005202:	a948      	add	r1, sp, #288	@ 0x120
 8005204:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005206:	f8cd b000 	str.w	fp, [sp]
 800520a:	e007      	b.n	800521c <_ZN15Screen2ViewBaseC1Ev+0x744>
 800520c:	080291b0 	.word	0x080291b0
 8005210:	08028350 	.word	0x08028350
 8005214:	0800491d 	.word	0x0800491d
 8005218:	08004999 	.word	0x08004999
 800521c:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005220:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005224:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005228:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800522c:	f00e fdb7 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_7.setSelected(false);
 8005230:	4629      	mov	r1, r5
 8005232:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8005234:	f00e fe54 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_7);
 8005238:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800523a:	9802      	ldr	r0, [sp, #8]
 800523c:	f884 5440 	strb.w	r5, [r4, #1088]	@ 0x440
 8005240:	f7ff fb4e 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005244:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8005246:	4630      	mov	r0, r6
 8005248:	f00b f948 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_6.setXY(650, 208);
 800524c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800524e:	22d0      	movs	r2, #208	@ 0xd0
 8005250:	f240 218a 	movw	r1, #650	@ 0x28a
 8005254:	f7ff f94f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005258:	ab4a      	add	r3, sp, #296	@ 0x128
 800525a:	aa49      	add	r2, sp, #292	@ 0x124
 800525c:	a948      	add	r1, sp, #288	@ 0x120
 800525e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8005260:	f8cd b000 	str.w	fp, [sp]
 8005264:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005268:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 800526c:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005270:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005274:	f00e fd93 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_6.setSelected(false);
 8005278:	4629      	mov	r1, r5
 800527a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800527c:	f00e fe30 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_6);
 8005280:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8005282:	9802      	ldr	r0, [sp, #8]
 8005284:	f884 5480 	strb.w	r5, [r4, #1152]	@ 0x480
 8005288:	f7ff fb2a 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800528c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800528e:	4630      	mov	r0, r6
 8005290:	f00b f924 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_5.setXY(600, 208);
 8005294:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005296:	22d0      	movs	r2, #208	@ 0xd0
 8005298:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800529c:	f7ff f92b 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80052a0:	ab4a      	add	r3, sp, #296	@ 0x128
 80052a2:	aa49      	add	r2, sp, #292	@ 0x124
 80052a4:	a948      	add	r1, sp, #288	@ 0x120
 80052a6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80052a8:	f8cd b000 	str.w	fp, [sp]
 80052ac:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80052b0:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80052b4:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80052b8:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80052bc:	f00e fd6f 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_5.setSelected(false);
 80052c0:	4629      	mov	r1, r5
 80052c2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80052c4:	f00e fe0c 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_5);
 80052c8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80052ca:	9802      	ldr	r0, [sp, #8]
 80052cc:	f884 54c0 	strb.w	r5, [r4, #1216]	@ 0x4c0
 80052d0:	f7ff fb06 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80052d4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80052d6:	4630      	mov	r0, r6
 80052d8:	f00b f900 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_4.setXY(750, 158);
 80052dc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80052de:	229e      	movs	r2, #158	@ 0x9e
 80052e0:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80052e4:	f7ff f907 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80052e8:	ab4a      	add	r3, sp, #296	@ 0x128
 80052ea:	aa49      	add	r2, sp, #292	@ 0x124
 80052ec:	a948      	add	r1, sp, #288	@ 0x120
 80052ee:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80052f0:	f8cd b000 	str.w	fp, [sp]
 80052f4:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80052f8:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80052fc:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005300:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005304:	f00e fd4b 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_4.setSelected(false);
 8005308:	4629      	mov	r1, r5
 800530a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800530c:	f00e fde8 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_4);
 8005310:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005312:	9802      	ldr	r0, [sp, #8]
 8005314:	f884 5500 	strb.w	r5, [r4, #1280]	@ 0x500
 8005318:	f7ff fae2 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800531c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800531e:	4630      	mov	r0, r6
 8005320:	f00b f8dc 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_3.setXY(700, 158);
 8005324:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005326:	229e      	movs	r2, #158	@ 0x9e
 8005328:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800532c:	f7ff f8e3 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005330:	ab4a      	add	r3, sp, #296	@ 0x128
 8005332:	aa49      	add	r2, sp, #292	@ 0x124
 8005334:	a948      	add	r1, sp, #288	@ 0x120
 8005336:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005338:	f8cd b000 	str.w	fp, [sp]
 800533c:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005340:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005344:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005348:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800534c:	f00e fd27 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_3.setSelected(false);
 8005350:	4629      	mov	r1, r5
 8005352:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8005354:	f00e fdc4 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_3);
 8005358:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800535a:	9802      	ldr	r0, [sp, #8]
 800535c:	f884 5540 	strb.w	r5, [r4, #1344]	@ 0x540
 8005360:	f7ff fabe 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005364:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8005366:	4630      	mov	r0, r6
 8005368:	f00b f8b8 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_2.setXY(650, 158);
 800536c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800536e:	229e      	movs	r2, #158	@ 0x9e
 8005370:	f240 218a 	movw	r1, #650	@ 0x28a
 8005374:	f7ff f8bf 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005378:	ab4a      	add	r3, sp, #296	@ 0x128
 800537a:	aa49      	add	r2, sp, #292	@ 0x124
 800537c:	a948      	add	r1, sp, #288	@ 0x120
 800537e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005380:	f8cd b000 	str.w	fp, [sp]
 8005384:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005388:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 800538c:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005390:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005394:	f00e fd03 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_2.setSelected(false);
 8005398:	4629      	mov	r1, r5
 800539a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800539c:	f00e fda0 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_2);
 80053a0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80053a2:	9802      	ldr	r0, [sp, #8]
 80053a4:	f884 5580 	strb.w	r5, [r4, #1408]	@ 0x580
 80053a8:	f7ff fa9a 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80053ac:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80053ae:	4630      	mov	r0, r6
 80053b0:	f00b f894 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_3_1.setXY(600, 158);
 80053b4:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80053b6:	229e      	movs	r2, #158	@ 0x9e
 80053b8:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80053bc:	f7ff f89b 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_3_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80053c0:	ab4a      	add	r3, sp, #296	@ 0x128
 80053c2:	aa49      	add	r2, sp, #292	@ 0x124
 80053c4:	a948      	add	r1, sp, #288	@ 0x120
 80053c6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80053c8:	f8cd b000 	str.w	fp, [sp]
 80053cc:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80053d0:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80053d4:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80053d8:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80053dc:	f00e fcdf 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_3_1.setSelected(false);
 80053e0:	4629      	mov	r1, r5
 80053e2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80053e4:	f00e fd7c 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_3_1);
 80053e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80053ea:	9802      	ldr	r0, [sp, #8]
 80053ec:	f884 55c0 	strb.w	r5, [r4, #1472]	@ 0x5c0
 80053f0:	f7ff fa76 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80053f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80053f6:	4630      	mov	r0, r6
 80053f8:	f00b f870 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_16.setXY(550, 308);
 80053fc:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80053fe:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005402:	f240 2126 	movw	r1, #550	@ 0x226
 8005406:	f7ff f876 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800540a:	ab4a      	add	r3, sp, #296	@ 0x128
 800540c:	aa49      	add	r2, sp, #292	@ 0x124
 800540e:	a948      	add	r1, sp, #288	@ 0x120
 8005410:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8005412:	f8cd b000 	str.w	fp, [sp]
 8005416:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 800541a:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 800541e:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005422:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005426:	f00e fcba 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_16.setSelected(false);
 800542a:	4629      	mov	r1, r5
 800542c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800542e:	f00e fd57 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_16);
 8005432:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005434:	9802      	ldr	r0, [sp, #8]
 8005436:	f884 5600 	strb.w	r5, [r4, #1536]	@ 0x600
 800543a:	f7ff fa51 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800543e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8005440:	4630      	mov	r0, r6
 8005442:	f00b f84b 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_15.setXY(500, 308);
 8005446:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8005448:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800544c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005450:	f7ff f851 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005454:	ab4a      	add	r3, sp, #296	@ 0x128
 8005456:	aa49      	add	r2, sp, #292	@ 0x124
 8005458:	a948      	add	r1, sp, #288	@ 0x120
 800545a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800545c:	f8cd b000 	str.w	fp, [sp]
 8005460:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005464:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005468:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800546c:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005470:	f00e fc95 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_15.setSelected(false);
 8005474:	4629      	mov	r1, r5
 8005476:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8005478:	f00e fd32 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_15);
 800547c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800547e:	9802      	ldr	r0, [sp, #8]
 8005480:	f884 5640 	strb.w	r5, [r4, #1600]	@ 0x640
 8005484:	f7ff fa2c 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005488:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800548a:	4630      	mov	r0, r6
 800548c:	f00b f826 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_14.setXY(450, 308);
 8005490:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8005492:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005496:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 800549a:	f7ff f82c 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800549e:	ab4a      	add	r3, sp, #296	@ 0x128
 80054a0:	aa49      	add	r2, sp, #292	@ 0x124
 80054a2:	a948      	add	r1, sp, #288	@ 0x120
 80054a4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80054a6:	f8cd b000 	str.w	fp, [sp]
 80054aa:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80054ae:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80054b2:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80054b6:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80054ba:	f00e fc70 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_14.setSelected(false);
 80054be:	4629      	mov	r1, r5
 80054c0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80054c2:	f00e fd0d 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_14);
 80054c6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80054c8:	9802      	ldr	r0, [sp, #8]
 80054ca:	f884 5680 	strb.w	r5, [r4, #1664]	@ 0x680
 80054ce:	f7ff fa07 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80054d2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80054d4:	4630      	mov	r0, r6
 80054d6:	f00b f801 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_13.setXY(400, 308);
 80054da:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80054dc:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80054e0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80054e4:	f7ff f807 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80054e8:	ab4a      	add	r3, sp, #296	@ 0x128
 80054ea:	aa49      	add	r2, sp, #292	@ 0x124
 80054ec:	a948      	add	r1, sp, #288	@ 0x120
 80054ee:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80054f0:	f8cd b000 	str.w	fp, [sp]
 80054f4:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80054f8:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80054fc:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005500:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005504:	f00e fc4b 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_13.setSelected(false);
 8005508:	4629      	mov	r1, r5
 800550a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800550c:	f00e fce8 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_13);
 8005510:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8005512:	9802      	ldr	r0, [sp, #8]
 8005514:	f884 56c0 	strb.w	r5, [r4, #1728]	@ 0x6c0
 8005518:	f7ff f9e2 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800551c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800551e:	4630      	mov	r0, r6
 8005520:	f00a ffdc 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_12.setXY(550, 258);
 8005524:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8005526:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800552a:	f240 2126 	movw	r1, #550	@ 0x226
 800552e:	f7fe ffe2 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005532:	ab4a      	add	r3, sp, #296	@ 0x128
 8005534:	aa49      	add	r2, sp, #292	@ 0x124
 8005536:	a948      	add	r1, sp, #288	@ 0x120
 8005538:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800553a:	f8cd b000 	str.w	fp, [sp]
 800553e:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005542:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005546:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800554a:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800554e:	f00e fc26 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_12.setSelected(false);
 8005552:	4629      	mov	r1, r5
 8005554:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8005556:	f00e fcc3 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_12);
 800555a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800555c:	9802      	ldr	r0, [sp, #8]
 800555e:	f884 5700 	strb.w	r5, [r4, #1792]	@ 0x700
 8005562:	f7ff f9bd 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005566:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8005568:	4630      	mov	r0, r6
 800556a:	f00a ffb7 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_11.setXY(500, 258);
 800556e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005570:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005574:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005578:	f7fe ffbd 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800557c:	ab4a      	add	r3, sp, #296	@ 0x128
 800557e:	aa49      	add	r2, sp, #292	@ 0x124
 8005580:	a948      	add	r1, sp, #288	@ 0x120
 8005582:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005584:	f8cd b000 	str.w	fp, [sp]
 8005588:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 800558c:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005590:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005594:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005598:	f00e fc01 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_11.setSelected(false);
 800559c:	4629      	mov	r1, r5
 800559e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80055a0:	f00e fc9e 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_11);
 80055a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80055a6:	9802      	ldr	r0, [sp, #8]
 80055a8:	f884 5740 	strb.w	r5, [r4, #1856]	@ 0x740
 80055ac:	f7ff f998 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80055b0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80055b2:	4630      	mov	r0, r6
 80055b4:	f00a ff92 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_10.setXY(450, 258);
 80055b8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80055ba:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80055be:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80055c2:	f7fe ff98 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80055c6:	ab4a      	add	r3, sp, #296	@ 0x128
 80055c8:	aa49      	add	r2, sp, #292	@ 0x124
 80055ca:	a948      	add	r1, sp, #288	@ 0x120
 80055cc:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80055ce:	f8cd b000 	str.w	fp, [sp]
 80055d2:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80055d6:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80055da:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80055de:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80055e2:	f00e fbdc 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_10.setSelected(false);
 80055e6:	4629      	mov	r1, r5
 80055e8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80055ea:	f00e fc79 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_10);
 80055ee:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80055f0:	9802      	ldr	r0, [sp, #8]
 80055f2:	f884 5780 	strb.w	r5, [r4, #1920]	@ 0x780
 80055f6:	f7ff f973 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80055fa:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80055fc:	4630      	mov	r0, r6
 80055fe:	f00a ff6d 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_9.setXY(400, 258);
 8005602:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005604:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005608:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800560c:	f7fe ff73 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005610:	ab4a      	add	r3, sp, #296	@ 0x128
 8005612:	aa49      	add	r2, sp, #292	@ 0x124
 8005614:	a948      	add	r1, sp, #288	@ 0x120
 8005616:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005618:	f8cd b000 	str.w	fp, [sp]
 800561c:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005620:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005624:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005628:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800562c:	f00e fbb7 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_9.setSelected(false);
 8005630:	4629      	mov	r1, r5
 8005632:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8005634:	f00e fc54 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_9);
 8005638:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800563a:	9802      	ldr	r0, [sp, #8]
 800563c:	f884 57c0 	strb.w	r5, [r4, #1984]	@ 0x7c0
 8005640:	f7ff f94e 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005644:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8005646:	4630      	mov	r0, r6
 8005648:	f00a ff48 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_8.setXY(550, 208);
 800564c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800564e:	22d0      	movs	r2, #208	@ 0xd0
 8005650:	f240 2126 	movw	r1, #550	@ 0x226
 8005654:	f7fe ff4f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005658:	ab4a      	add	r3, sp, #296	@ 0x128
 800565a:	aa49      	add	r2, sp, #292	@ 0x124
 800565c:	a948      	add	r1, sp, #288	@ 0x120
 800565e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8005660:	f8cd b000 	str.w	fp, [sp]
 8005664:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005668:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 800566c:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005670:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005674:	f00e fb93 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_8.setSelected(false);
 8005678:	4629      	mov	r1, r5
 800567a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800567c:	f00e fc30 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_8);
 8005680:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8005682:	9802      	ldr	r0, [sp, #8]
 8005684:	f884 5800 	strb.w	r5, [r4, #2048]	@ 0x800
 8005688:	f7ff f92a 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800568c:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800568e:	4630      	mov	r0, r6
 8005690:	f00a ff24 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_7.setXY(500, 208);
 8005694:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005696:	22d0      	movs	r2, #208	@ 0xd0
 8005698:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800569c:	f7fe ff2b 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80056a0:	ab4a      	add	r3, sp, #296	@ 0x128
 80056a2:	aa49      	add	r2, sp, #292	@ 0x124
 80056a4:	a948      	add	r1, sp, #288	@ 0x120
 80056a6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80056a8:	f8cd b000 	str.w	fp, [sp]
 80056ac:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80056b0:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80056b4:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80056b8:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80056bc:	f00e fb6f 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_7.setSelected(false);
 80056c0:	4629      	mov	r1, r5
 80056c2:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80056c4:	f00e fc0c 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_7);
 80056c8:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80056ca:	9802      	ldr	r0, [sp, #8]
 80056cc:	f884 5840 	strb.w	r5, [r4, #2112]	@ 0x840
 80056d0:	f7ff f906 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80056d4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80056d6:	4630      	mov	r0, r6
 80056d8:	f00a ff00 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_6.setXY(450, 208);
 80056dc:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80056de:	22d0      	movs	r2, #208	@ 0xd0
 80056e0:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 80056e4:	f7fe ff07 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80056e8:	ab4a      	add	r3, sp, #296	@ 0x128
 80056ea:	aa49      	add	r2, sp, #292	@ 0x124
 80056ec:	a948      	add	r1, sp, #288	@ 0x120
 80056ee:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80056f0:	f8cd b000 	str.w	fp, [sp]
 80056f4:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80056f8:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80056fc:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005700:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005704:	f00e fb4b 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_6.setSelected(false);
 8005708:	4629      	mov	r1, r5
 800570a:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800570c:	f00e fbe8 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_6);
 8005710:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8005712:	9802      	ldr	r0, [sp, #8]
 8005714:	f884 5880 	strb.w	r5, [r4, #2176]	@ 0x880
 8005718:	f7ff f8e2 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800571c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800571e:	4630      	mov	r0, r6
 8005720:	f00a fedc 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_5.setXY(400, 208);
 8005724:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005726:	22d0      	movs	r2, #208	@ 0xd0
 8005728:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800572c:	f7fe fee3 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005730:	ab4a      	add	r3, sp, #296	@ 0x128
 8005732:	aa49      	add	r2, sp, #292	@ 0x124
 8005734:	a948      	add	r1, sp, #288	@ 0x120
 8005736:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005738:	f8cd b000 	str.w	fp, [sp]
 800573c:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005740:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005744:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005748:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800574c:	f00e fb27 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_5.setSelected(false);
 8005750:	4629      	mov	r1, r5
 8005752:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8005754:	f00e fbc4 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_5);
 8005758:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800575a:	9802      	ldr	r0, [sp, #8]
 800575c:	f884 58c0 	strb.w	r5, [r4, #2240]	@ 0x8c0
 8005760:	f7ff f8be 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005764:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8005766:	4630      	mov	r0, r6
 8005768:	f00a feb8 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_4.setXY(550, 158);
 800576c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800576e:	229e      	movs	r2, #158	@ 0x9e
 8005770:	f240 2126 	movw	r1, #550	@ 0x226
 8005774:	f7fe febf 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005778:	ab4a      	add	r3, sp, #296	@ 0x128
 800577a:	aa49      	add	r2, sp, #292	@ 0x124
 800577c:	a948      	add	r1, sp, #288	@ 0x120
 800577e:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8005780:	f8cd b000 	str.w	fp, [sp]
 8005784:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005788:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 800578c:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005790:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005794:	f00e fb03 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_4.setSelected(false);
 8005798:	4629      	mov	r1, r5
 800579a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 800579c:	f00e fba0 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_4);
 80057a0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80057a2:	9802      	ldr	r0, [sp, #8]
 80057a4:	f884 5900 	strb.w	r5, [r4, #2304]	@ 0x900
 80057a8:	f7ff f89a 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80057ac:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80057ae:	4630      	mov	r0, r6
 80057b0:	f00a fe94 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_3.setXY(500, 158);
 80057b4:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80057b6:	229e      	movs	r2, #158	@ 0x9e
 80057b8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80057bc:	f7fe fe9b 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80057c0:	ab4a      	add	r3, sp, #296	@ 0x128
 80057c2:	aa49      	add	r2, sp, #292	@ 0x124
 80057c4:	a948      	add	r1, sp, #288	@ 0x120
 80057c6:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80057c8:	f8cd b000 	str.w	fp, [sp]
 80057cc:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80057d0:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80057d4:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80057d8:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80057dc:	f00e fadf 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_3.setSelected(false);
 80057e0:	4629      	mov	r1, r5
 80057e2:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80057e4:	f00e fb7c 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_3);
 80057e8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80057ea:	9802      	ldr	r0, [sp, #8]
 80057ec:	f884 5940 	strb.w	r5, [r4, #2368]	@ 0x940
 80057f0:	f7ff f876 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80057f4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80057f6:	4630      	mov	r0, r6
 80057f8:	f00a fe70 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_2.setXY(450, 158);
 80057fc:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80057fe:	229e      	movs	r2, #158	@ 0x9e
 8005800:	f44f 71e1 	mov.w	r1, #450	@ 0x1c2
 8005804:	f7fe fe77 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005808:	ab4a      	add	r3, sp, #296	@ 0x128
 800580a:	aa49      	add	r2, sp, #292	@ 0x124
 800580c:	a948      	add	r1, sp, #288	@ 0x120
 800580e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8005810:	f8cd b000 	str.w	fp, [sp]
 8005814:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005818:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 800581c:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005820:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005824:	f00e fabb 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_2.setSelected(false);
 8005828:	4629      	mov	r1, r5
 800582a:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800582c:	f00e fb58 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_2);
 8005830:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8005832:	9802      	ldr	r0, [sp, #8]
 8005834:	f884 5980 	strb.w	r5, [r4, #2432]	@ 0x980
 8005838:	f7ff f852 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800583c:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800583e:	4630      	mov	r0, r6
 8005840:	f00a fe4c 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_2_1.setXY(400, 158);
 8005844:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8005846:	229e      	movs	r2, #158	@ 0x9e
 8005848:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800584c:	f7fe fe53 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_2_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005850:	ab4a      	add	r3, sp, #296	@ 0x128
 8005852:	aa49      	add	r2, sp, #292	@ 0x124
 8005854:	a948      	add	r1, sp, #288	@ 0x120
 8005856:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8005858:	f8cd b000 	str.w	fp, [sp]
 800585c:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005860:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005864:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005868:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 800586c:	f00e fa97 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_2_1.setSelected(false);
 8005870:	4629      	mov	r1, r5
 8005872:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8005874:	f00e fb34 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_2_1);
 8005878:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800587a:	9802      	ldr	r0, [sp, #8]
 800587c:	f884 59c0 	strb.w	r5, [r4, #2496]	@ 0x9c0
 8005880:	f7ff f82e 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005884:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8005886:	4630      	mov	r0, r6
 8005888:	f00a fe28 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_16.setXY(350, 308);
 800588c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 800588e:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005892:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005896:	f7fe fe2e 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800589a:	ab4a      	add	r3, sp, #296	@ 0x128
 800589c:	aa49      	add	r2, sp, #292	@ 0x124
 800589e:	a948      	add	r1, sp, #288	@ 0x120
 80058a0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80058a2:	f8cd b000 	str.w	fp, [sp]
 80058a6:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80058aa:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80058ae:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80058b2:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80058b6:	f00e fa72 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_16.setSelected(false);
 80058ba:	4629      	mov	r1, r5
 80058bc:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80058be:	f00e fb0f 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_16);
 80058c2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80058c4:	9802      	ldr	r0, [sp, #8]
 80058c6:	f884 5a00 	strb.w	r5, [r4, #2560]	@ 0xa00
 80058ca:	f7ff f809 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80058ce:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80058d0:	4630      	mov	r0, r6
 80058d2:	f00a fe03 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_15.setXY(300, 308);
 80058d6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80058d8:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80058dc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80058e0:	f7fe fe09 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80058e4:	ab4a      	add	r3, sp, #296	@ 0x128
 80058e6:	aa49      	add	r2, sp, #292	@ 0x124
 80058e8:	a948      	add	r1, sp, #288	@ 0x120
 80058ea:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80058ec:	f8cd b000 	str.w	fp, [sp]
 80058f0:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80058f4:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80058f8:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80058fc:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005900:	f00e fa4d 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_15.setSelected(false);
 8005904:	4629      	mov	r1, r5
 8005906:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8005908:	f00e faea 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_15);
 800590c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800590e:	9802      	ldr	r0, [sp, #8]
 8005910:	f884 5a40 	strb.w	r5, [r4, #2624]	@ 0xa40
 8005914:	f7fe ffe4 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005918:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800591a:	4630      	mov	r0, r6
 800591c:	f00a fdde 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_14.setXY(250, 308);
 8005920:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8005922:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005926:	21fa      	movs	r1, #250	@ 0xfa
 8005928:	f7fe fde5 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800592c:	ab4a      	add	r3, sp, #296	@ 0x128
 800592e:	aa49      	add	r2, sp, #292	@ 0x124
 8005930:	a948      	add	r1, sp, #288	@ 0x120
 8005932:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8005934:	f8cd b000 	str.w	fp, [sp]
 8005938:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 800593c:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005940:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005944:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005948:	f00e fa29 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_14.setSelected(false);
 800594c:	4629      	mov	r1, r5
 800594e:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8005950:	f00e fac6 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_14);
 8005954:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8005956:	9802      	ldr	r0, [sp, #8]
 8005958:	f884 5a80 	strb.w	r5, [r4, #2688]	@ 0xa80
 800595c:	f7fe ffc0 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005960:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8005962:	4630      	mov	r0, r6
 8005964:	f00a fdba 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_13.setXY(200, 308);
 8005968:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800596a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800596e:	21c8      	movs	r1, #200	@ 0xc8
 8005970:	f7fe fdc1 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005974:	ab4a      	add	r3, sp, #296	@ 0x128
 8005976:	aa49      	add	r2, sp, #292	@ 0x124
 8005978:	a948      	add	r1, sp, #288	@ 0x120
 800597a:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800597c:	f8cd b000 	str.w	fp, [sp]
 8005980:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005984:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005988:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 800598c:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005990:	f00e fa05 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_13.setSelected(false);
 8005994:	4629      	mov	r1, r5
 8005996:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8005998:	f00e faa2 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_13);
 800599c:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 800599e:	9802      	ldr	r0, [sp, #8]
 80059a0:	f884 5ac0 	strb.w	r5, [r4, #2752]	@ 0xac0
 80059a4:	f7fe ff9c 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80059a8:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80059aa:	4630      	mov	r0, r6
 80059ac:	f00a fd96 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_12.setXY(350, 258);
 80059b0:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 80059b2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80059b6:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80059ba:	f7fe fd9c 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80059be:	ab4a      	add	r3, sp, #296	@ 0x128
 80059c0:	aa49      	add	r2, sp, #292	@ 0x124
 80059c2:	a948      	add	r1, sp, #288	@ 0x120
 80059c4:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 80059c6:	f8cd b000 	str.w	fp, [sp]
 80059ca:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 80059ce:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 80059d2:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 80059d6:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 80059da:	f00e f9e0 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_12.setSelected(false);
 80059de:	4629      	mov	r1, r5
 80059e0:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 80059e2:	f00e fa7d 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_12);
 80059e6:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 80059e8:	9802      	ldr	r0, [sp, #8]
 80059ea:	f884 5b00 	strb.w	r5, [r4, #2816]	@ 0xb00
 80059ee:	f7fe ff77 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80059f2:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 80059f4:	4630      	mov	r0, r6
 80059f6:	f00a fd71 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_11.setXY(300, 258);
 80059fa:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 80059fc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005a00:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005a04:	f7fe fd77 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005a08:	ab4a      	add	r3, sp, #296	@ 0x128
 8005a0a:	aa49      	add	r2, sp, #292	@ 0x124
 8005a0c:	a948      	add	r1, sp, #288	@ 0x120
 8005a0e:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8005a10:	f8cd b000 	str.w	fp, [sp]
 8005a14:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005a18:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005a1c:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005a20:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005a24:	f00e f9bb 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_11.setSelected(false);
 8005a28:	4629      	mov	r1, r5
 8005a2a:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8005a2c:	f00e fa58 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_11);
 8005a30:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8005a32:	9802      	ldr	r0, [sp, #8]
 8005a34:	f884 5b40 	strb.w	r5, [r4, #2880]	@ 0xb40
 8005a38:	f7fe ff52 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005a3c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f00a fd4c 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_10.setXY(250, 258);
 8005a44:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8005a46:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005a4a:	21fa      	movs	r1, #250	@ 0xfa
 8005a4c:	f7fe fd53 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005a50:	ab4a      	add	r3, sp, #296	@ 0x128
 8005a52:	aa49      	add	r2, sp, #292	@ 0x124
 8005a54:	a948      	add	r1, sp, #288	@ 0x120
 8005a56:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8005a58:	f8cd b000 	str.w	fp, [sp]
 8005a5c:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005a60:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005a64:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005a68:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005a6c:	f00e f997 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_10.setSelected(false);
 8005a70:	4629      	mov	r1, r5
 8005a72:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8005a74:	f00e fa34 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_10);
 8005a78:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8005a7a:	9802      	ldr	r0, [sp, #8]
 8005a7c:	f884 5b80 	strb.w	r5, [r4, #2944]	@ 0xb80
 8005a80:	f7fe ff2e 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005a84:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8005a86:	4630      	mov	r0, r6
 8005a88:	f00a fd28 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_9.setXY(200, 258);
 8005a8c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005a8e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005a92:	21c8      	movs	r1, #200	@ 0xc8
 8005a94:	f7fe fd2f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005a98:	ab4a      	add	r3, sp, #296	@ 0x128
 8005a9a:	aa49      	add	r2, sp, #292	@ 0x124
 8005a9c:	a948      	add	r1, sp, #288	@ 0x120
 8005a9e:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005aa0:	f8cd b000 	str.w	fp, [sp]
 8005aa4:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005aa8:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005aac:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005ab0:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005ab4:	f00e f973 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_9.setSelected(false);
 8005ab8:	4629      	mov	r1, r5
 8005aba:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005abc:	f00e fa10 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_9);
 8005ac0:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8005ac2:	9802      	ldr	r0, [sp, #8]
 8005ac4:	f884 5bc0 	strb.w	r5, [r4, #3008]	@ 0xbc0
 8005ac8:	f7fe ff0a 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005acc:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f00a fd04 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_8.setXY(350, 208);
 8005ad4:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8005ad6:	22d0      	movs	r2, #208	@ 0xd0
 8005ad8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005adc:	f7fe fd0b 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005ae0:	ab4a      	add	r3, sp, #296	@ 0x128
 8005ae2:	aa49      	add	r2, sp, #292	@ 0x124
 8005ae4:	a948      	add	r1, sp, #288	@ 0x120
 8005ae6:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8005ae8:	f8cd b000 	str.w	fp, [sp]
 8005aec:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005af0:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005af4:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005af8:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005afc:	f00e f94f 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_8.setSelected(false);
 8005b00:	4629      	mov	r1, r5
 8005b02:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8005b04:	f00e f9ec 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_8);
 8005b08:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8005b0a:	9802      	ldr	r0, [sp, #8]
 8005b0c:	f884 5c00 	strb.w	r5, [r4, #3072]	@ 0xc00
 8005b10:	f7fe fee6 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005b14:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8005b16:	4630      	mov	r0, r6
 8005b18:	f00a fce0 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_7.setXY(300, 208);
 8005b1c:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8005b1e:	22d0      	movs	r2, #208	@ 0xd0
 8005b20:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005b24:	f7fe fce7 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005b28:	ab4a      	add	r3, sp, #296	@ 0x128
 8005b2a:	aa49      	add	r2, sp, #292	@ 0x124
 8005b2c:	a948      	add	r1, sp, #288	@ 0x120
 8005b2e:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8005b30:	f8cd b000 	str.w	fp, [sp]
 8005b34:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005b38:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005b3c:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005b40:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005b44:	f00e f92b 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_7.setSelected(false);
 8005b48:	4629      	mov	r1, r5
 8005b4a:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8005b4c:	f00e f9c8 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_7);
 8005b50:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8005b52:	9802      	ldr	r0, [sp, #8]
 8005b54:	f884 5c40 	strb.w	r5, [r4, #3136]	@ 0xc40
 8005b58:	f7fe fec2 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005b5c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f00a fcbc 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_6.setXY(250, 208);
 8005b64:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8005b66:	22d0      	movs	r2, #208	@ 0xd0
 8005b68:	21fa      	movs	r1, #250	@ 0xfa
 8005b6a:	f7fe fcc4 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005b6e:	ab4a      	add	r3, sp, #296	@ 0x128
 8005b70:	aa49      	add	r2, sp, #292	@ 0x124
 8005b72:	a948      	add	r1, sp, #288	@ 0x120
 8005b74:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8005b76:	f8cd b000 	str.w	fp, [sp]
 8005b7a:	46d3      	mov	fp, sl
 8005b7c:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
 8005b80:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005b84:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005b88:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005b8c:	f00e f907 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_6.setSelected(false);
 8005b90:	4629      	mov	r1, r5
 8005b92:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8005b94:	f00e f9a4 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_6);
 8005b98:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 8005b9a:	9802      	ldr	r0, [sp, #8]
 8005b9c:	f884 5c80 	strb.w	r5, [r4, #3200]	@ 0xc80
 8005ba0:	f7fe fe9e 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005ba4:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f00a fc98 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_5.setXY(200, 208);
 8005bac:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8005bae:	22d0      	movs	r2, #208	@ 0xd0
 8005bb0:	21c8      	movs	r1, #200	@ 0xc8
 8005bb2:	f7fe fca0 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 8005bb6:	f8ad 7120 	strh.w	r7, [sp, #288]	@ 0x120
    RadioButton_1_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005bba:	af4b      	add	r7, sp, #300	@ 0x12c
 8005bbc:	ab4a      	add	r3, sp, #296	@ 0x128
 8005bbe:	aa49      	add	r2, sp, #292	@ 0x124
 8005bc0:	a948      	add	r1, sp, #288	@ 0x120
 8005bc2:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8005bc4:	9700      	str	r7, [sp, #0]
 8005bc6:	f8ad a124 	strh.w	sl, [sp, #292]	@ 0x124
 8005bca:	46ca      	mov	sl, r9
 8005bcc:	f8ad 9128 	strh.w	r9, [sp, #296]	@ 0x128
 8005bd0:	46c1      	mov	r9, r8
 8005bd2:	f8ad 812c 	strh.w	r8, [sp, #300]	@ 0x12c
 8005bd6:	f00e f8e2 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_5.setSelected(false);
 8005bda:	4629      	mov	r1, r5
 8005bdc:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8005bde:	f00e f97f 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_5);
 8005be2:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8005be4:	9802      	ldr	r0, [sp, #8]
 8005be6:	f04f 0803 	mov.w	r8, #3
 8005bea:	f884 5cc0 	strb.w	r5, [r4, #3264]	@ 0xcc0
 8005bee:	f7fe fe77 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005bf2:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f00a fc71 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_4.setXY(350, 158);
 8005bfa:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8005bfc:	229e      	movs	r2, #158	@ 0x9e
 8005bfe:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005c02:	f7fe fc78 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c06:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c08:	aa49      	add	r2, sp, #292	@ 0x124
 8005c0a:	a948      	add	r1, sp, #288	@ 0x120
 8005c0c:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8005c0e:	9700      	str	r7, [sp, #0]
 8005c10:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005c14:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005c18:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005c1c:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005c20:	f00e f8bd 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_4.setSelected(false);
 8005c24:	4629      	mov	r1, r5
 8005c26:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8005c28:	f00e f95a 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_4);
 8005c2c:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8005c2e:	9802      	ldr	r0, [sp, #8]
 8005c30:	f884 5d00 	strb.w	r5, [r4, #3328]	@ 0xd00
 8005c34:	f7fe fe54 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005c38:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f00a fc4e 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_3.setXY(300, 158);
 8005c40:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8005c42:	229e      	movs	r2, #158	@ 0x9e
 8005c44:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8005c48:	f7fe fc55 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c4c:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c4e:	aa49      	add	r2, sp, #292	@ 0x124
 8005c50:	a948      	add	r1, sp, #288	@ 0x120
 8005c52:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8005c54:	9700      	str	r7, [sp, #0]
 8005c56:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005c5a:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005c5e:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005c62:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005c66:	f00e f89a 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_3.setSelected(false);
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8005c6e:	f00e f937 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_3);
 8005c72:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8005c74:	9802      	ldr	r0, [sp, #8]
 8005c76:	f884 5d40 	strb.w	r5, [r4, #3392]	@ 0xd40
 8005c7a:	f7fe fe31 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005c7e:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8005c80:	4630      	mov	r0, r6
 8005c82:	f00a fc2b 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_2.setXY(250, 158);
 8005c86:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 8005c88:	229e      	movs	r2, #158	@ 0x9e
 8005c8a:	21fa      	movs	r1, #250	@ 0xfa
 8005c8c:	f7fe fc33 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005c90:	ab4a      	add	r3, sp, #296	@ 0x128
 8005c92:	aa49      	add	r2, sp, #292	@ 0x124
 8005c94:	a948      	add	r1, sp, #288	@ 0x120
 8005c96:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 8005c98:	9700      	str	r7, [sp, #0]
 8005c9a:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005c9e:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005ca2:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005ca6:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005caa:	f00e f878 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_2.setSelected(false);
 8005cae:	4629      	mov	r1, r5
 8005cb0:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 8005cb2:	f00e f915 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_2);
 8005cb6:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 8005cb8:	9802      	ldr	r0, [sp, #8]
 8005cba:	f884 5d80 	strb.w	r5, [r4, #3456]	@ 0xd80
 8005cbe:	f7fe fe0f 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005cc2:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f00a fc09 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_1_1.setXY(200, 158);
 8005cca:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 8005ccc:	229e      	movs	r2, #158	@ 0x9e
 8005cce:	21c8      	movs	r1, #200	@ 0xc8
 8005cd0:	f7fe fc11 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_1_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005cd4:	ab4a      	add	r3, sp, #296	@ 0x128
 8005cd6:	aa49      	add	r2, sp, #292	@ 0x124
 8005cd8:	a948      	add	r1, sp, #288	@ 0x120
 8005cda:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 8005cdc:	9700      	str	r7, [sp, #0]
 8005cde:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005ce2:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005ce6:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005cea:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005cee:	f00e f856 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_1_1.setSelected(false);
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 8005cf6:	f00e f8f3 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_1_1);
 8005cfa:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8005cfc:	9802      	ldr	r0, [sp, #8]
 8005cfe:	f884 5dc0 	strb.w	r5, [r4, #3520]	@ 0xdc0
 8005d02:	f7fe fded 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005d06:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f00a fbe7 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_16.setXY(150, 308);
 8005d0e:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8005d10:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005d14:	2196      	movs	r1, #150	@ 0x96
 8005d16:	f7fe fbee 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_16.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005d1a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005d1c:	aa49      	add	r2, sp, #292	@ 0x124
 8005d1e:	a948      	add	r1, sp, #288	@ 0x120
 8005d20:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8005d22:	9700      	str	r7, [sp, #0]
 8005d24:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005d28:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005d2c:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005d30:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005d34:	f00e f833 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_16.setSelected(false);
 8005d38:	4629      	mov	r1, r5
 8005d3a:	983b      	ldr	r0, [sp, #236]	@ 0xec
 8005d3c:	f00e f8d0 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_16);
 8005d40:	993b      	ldr	r1, [sp, #236]	@ 0xec
 8005d42:	9802      	ldr	r0, [sp, #8]
 8005d44:	f884 5e00 	strb.w	r5, [r4, #3584]	@ 0xe00
 8005d48:	f7fe fdca 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005d4c:	993b      	ldr	r1, [sp, #236]	@ 0xec
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f00a fbc4 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_15.setXY(100, 308);
 8005d54:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8005d56:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005d5a:	2164      	movs	r1, #100	@ 0x64
 8005d5c:	f7fe fbcb 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_15.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005d60:	ab4a      	add	r3, sp, #296	@ 0x128
 8005d62:	aa49      	add	r2, sp, #292	@ 0x124
 8005d64:	a948      	add	r1, sp, #288	@ 0x120
 8005d66:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8005d68:	9700      	str	r7, [sp, #0]
 8005d6a:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005d6e:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005d72:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005d76:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005d7a:	f00e f810 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_15.setSelected(false);
 8005d7e:	4629      	mov	r1, r5
 8005d80:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8005d82:	f00e f8ad 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_15);
 8005d86:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 8005d88:	9802      	ldr	r0, [sp, #8]
 8005d8a:	f884 5e40 	strb.w	r5, [r4, #3648]	@ 0xe40
 8005d8e:	f7fe fda7 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005d92:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 8005d94:	4630      	mov	r0, r6
 8005d96:	f00a fba1 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_14.setXY(50, 308);
 8005d9a:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 8005d9c:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005da0:	2132      	movs	r1, #50	@ 0x32
 8005da2:	f7fe fba8 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_14.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005da6:	ab4a      	add	r3, sp, #296	@ 0x128
 8005da8:	aa49      	add	r2, sp, #292	@ 0x124
 8005daa:	a948      	add	r1, sp, #288	@ 0x120
 8005dac:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 8005dae:	9700      	str	r7, [sp, #0]
 8005db0:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005db4:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005db8:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005dbc:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005dc0:	f00d ffed 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_14.setSelected(false);
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 8005dc8:	f00e f88a 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_14);
 8005dcc:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8005dce:	9802      	ldr	r0, [sp, #8]
 8005dd0:	f884 5e80 	strb.w	r5, [r4, #3712]	@ 0xe80
 8005dd4:	f7fe fd84 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005dd8:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f00a fb7e 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_13.setXY(0, 308);
 8005de0:	4629      	mov	r1, r5
 8005de2:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8005de4:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8005de8:	f7fe fb85 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_13.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005dec:	ab4a      	add	r3, sp, #296	@ 0x128
 8005dee:	aa49      	add	r2, sp, #292	@ 0x124
 8005df0:	a948      	add	r1, sp, #288	@ 0x120
 8005df2:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8005df4:	9700      	str	r7, [sp, #0]
 8005df6:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005dfa:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005dfe:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005e02:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005e06:	f00d ffca 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_13.setSelected(false);
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8005e0e:	f00e f867 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_13);
 8005e12:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8005e14:	9802      	ldr	r0, [sp, #8]
 8005e16:	f884 5ec0 	strb.w	r5, [r4, #3776]	@ 0xec0
 8005e1a:	f7fe fd61 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005e1e:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 8005e20:	4630      	mov	r0, r6
 8005e22:	f00a fb5b 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_12.setXY(150, 258);
 8005e26:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8005e28:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005e2c:	2196      	movs	r1, #150	@ 0x96
 8005e2e:	f7fe fb62 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_12.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005e32:	ab4a      	add	r3, sp, #296	@ 0x128
 8005e34:	aa49      	add	r2, sp, #292	@ 0x124
 8005e36:	a948      	add	r1, sp, #288	@ 0x120
 8005e38:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8005e3a:	9700      	str	r7, [sp, #0]
 8005e3c:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005e40:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005e44:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005e48:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005e4c:	f00d ffa7 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_12.setSelected(false);
 8005e50:	4629      	mov	r1, r5
 8005e52:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8005e54:	f00e f844 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_12);
 8005e58:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8005e5a:	9802      	ldr	r0, [sp, #8]
 8005e5c:	f884 5f00 	strb.w	r5, [r4, #3840]	@ 0xf00
 8005e60:	f7fe fd3e 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005e64:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8005e66:	4630      	mov	r0, r6
 8005e68:	f00a fb38 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_11.setXY(100, 258);
 8005e6c:	9840      	ldr	r0, [sp, #256]	@ 0x100
 8005e6e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005e72:	2164      	movs	r1, #100	@ 0x64
 8005e74:	f7fe fb3f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_11.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005e78:	ab4a      	add	r3, sp, #296	@ 0x128
 8005e7a:	aa49      	add	r2, sp, #292	@ 0x124
 8005e7c:	a948      	add	r1, sp, #288	@ 0x120
 8005e7e:	9840      	ldr	r0, [sp, #256]	@ 0x100
 8005e80:	9700      	str	r7, [sp, #0]
 8005e82:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005e86:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005e8a:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005e8e:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005e92:	f00d ff84 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_11.setSelected(false);
 8005e96:	4629      	mov	r1, r5
 8005e98:	9840      	ldr	r0, [sp, #256]	@ 0x100
 8005e9a:	f00e f821 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_11);
 8005e9e:	9940      	ldr	r1, [sp, #256]	@ 0x100
 8005ea0:	9802      	ldr	r0, [sp, #8]
 8005ea2:	f884 5f40 	strb.w	r5, [r4, #3904]	@ 0xf40
 8005ea6:	f7fe fd1b 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005eaa:	9940      	ldr	r1, [sp, #256]	@ 0x100
 8005eac:	4630      	mov	r0, r6
 8005eae:	f00a fb15 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_10.setXY(50, 258);
 8005eb2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005eb4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005eb8:	2132      	movs	r1, #50	@ 0x32
 8005eba:	f7fe fb1c 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_10.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005ebe:	ab4a      	add	r3, sp, #296	@ 0x128
 8005ec0:	aa49      	add	r2, sp, #292	@ 0x124
 8005ec2:	a948      	add	r1, sp, #288	@ 0x120
 8005ec4:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005ec6:	9700      	str	r7, [sp, #0]
 8005ec8:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005ecc:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005ed0:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005ed4:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005ed8:	f00d ff61 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_10.setSelected(false);
 8005edc:	4629      	mov	r1, r5
 8005ede:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005ee0:	f00d fffe 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_10);
 8005ee4:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8005ee6:	9802      	ldr	r0, [sp, #8]
 8005ee8:	f884 5f80 	strb.w	r5, [r4, #3968]	@ 0xf80
 8005eec:	f7fe fcf8 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005ef0:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f00a faf2 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_9.setXY(0, 258);
 8005ef8:	4629      	mov	r1, r5
 8005efa:	9842      	ldr	r0, [sp, #264]	@ 0x108
 8005efc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005f00:	f7fe faf9 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_9.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005f04:	ab4a      	add	r3, sp, #296	@ 0x128
 8005f06:	aa49      	add	r2, sp, #292	@ 0x124
 8005f08:	a948      	add	r1, sp, #288	@ 0x120
 8005f0a:	9842      	ldr	r0, [sp, #264]	@ 0x108
 8005f0c:	9700      	str	r7, [sp, #0]
 8005f0e:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005f12:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005f16:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005f1a:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005f1e:	f00d ff3e 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_9.setSelected(false);
 8005f22:	4629      	mov	r1, r5
 8005f24:	9842      	ldr	r0, [sp, #264]	@ 0x108
 8005f26:	f00d ffdb 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButtonGroup1.add(RadioButton_0_9);
 8005f2a:	9942      	ldr	r1, [sp, #264]	@ 0x108
 8005f2c:	9802      	ldr	r0, [sp, #8]
 8005f2e:	f884 5fc0 	strb.w	r5, [r4, #4032]	@ 0xfc0
 8005f32:	f7fe fcd5 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005f36:	9942      	ldr	r1, [sp, #264]	@ 0x108
 8005f38:	4630      	mov	r0, r6
 8005f3a:	f00a facf 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_8.setXY(150, 208);
 8005f3e:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 8005f40:	22d0      	movs	r2, #208	@ 0xd0
 8005f42:	2196      	movs	r1, #150	@ 0x96
 8005f44:	f7fe fad7 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_8.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005f48:	aa49      	add	r2, sp, #292	@ 0x124
 8005f4a:	ab4a      	add	r3, sp, #296	@ 0x128
 8005f4c:	a948      	add	r1, sp, #288	@ 0x120
 8005f4e:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 8005f50:	9700      	str	r7, [sp, #0]
 8005f52:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005f56:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005f5a:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005f5e:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005f62:	f00d ff1c 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_8.setSelected(false);
 8005f66:	4629      	mov	r1, r5
 8005f68:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 8005f6a:	f00d ffb9 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8005f6e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
    radioButtonGroup1.add(RadioButton_0_8);
 8005f72:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005f74:	701d      	strb	r5, [r3, #0]
 8005f76:	9802      	ldr	r0, [sp, #8]
 8005f78:	9303      	str	r3, [sp, #12]
 8005f7a:	f7fe fcb1 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005f7e:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005f80:	4630      	mov	r0, r6
 8005f82:	f00a faab 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_7.setXY(100, 208);
 8005f86:	9804      	ldr	r0, [sp, #16]
 8005f88:	22d0      	movs	r2, #208	@ 0xd0
 8005f8a:	2164      	movs	r1, #100	@ 0x64
 8005f8c:	f7fe fab3 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_7.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005f90:	aa49      	add	r2, sp, #292	@ 0x124
 8005f92:	ab4a      	add	r3, sp, #296	@ 0x128
 8005f94:	a948      	add	r1, sp, #288	@ 0x120
 8005f96:	9804      	ldr	r0, [sp, #16]
 8005f98:	9700      	str	r7, [sp, #0]
 8005f9a:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005f9e:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005fa2:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005fa6:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005faa:	f00d fef8 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_7.setSelected(false);
 8005fae:	4629      	mov	r1, r5
 8005fb0:	9804      	ldr	r0, [sp, #16]
 8005fb2:	f00d ff95 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8005fb6:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_7);
 8005fb8:	9904      	ldr	r1, [sp, #16]
 8005fba:	f883 5040 	strb.w	r5, [r3, #64]	@ 0x40
 8005fbe:	9802      	ldr	r0, [sp, #8]
 8005fc0:	f7fe fc8e 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8005fc4:	9904      	ldr	r1, [sp, #16]
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f00a fa88 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_6.setXY(50, 208);
 8005fcc:	9805      	ldr	r0, [sp, #20]
 8005fce:	22d0      	movs	r2, #208	@ 0xd0
 8005fd0:	2132      	movs	r1, #50	@ 0x32
 8005fd2:	f7fe fa90 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_6.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8005fd6:	aa49      	add	r2, sp, #292	@ 0x124
 8005fd8:	ab4a      	add	r3, sp, #296	@ 0x128
 8005fda:	a948      	add	r1, sp, #288	@ 0x120
 8005fdc:	9805      	ldr	r0, [sp, #20]
 8005fde:	9700      	str	r7, [sp, #0]
 8005fe0:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8005fe4:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8005fe8:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8005fec:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8005ff0:	f00d fed5 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_6.setSelected(false);
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	9805      	ldr	r0, [sp, #20]
 8005ff8:	f00d ff72 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8005ffc:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_6);
 8005ffe:	9905      	ldr	r1, [sp, #20]
 8006000:	f883 5080 	strb.w	r5, [r3, #128]	@ 0x80
 8006004:	9802      	ldr	r0, [sp, #8]
 8006006:	f7fe fc6b 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800600a:	9905      	ldr	r1, [sp, #20]
 800600c:	4630      	mov	r0, r6
 800600e:	f00a fa65 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_5.setXY(0, 208);
 8006012:	4629      	mov	r1, r5
 8006014:	9806      	ldr	r0, [sp, #24]
 8006016:	22d0      	movs	r2, #208	@ 0xd0
 8006018:	f7fe fa6d 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_5.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800601c:	aa49      	add	r2, sp, #292	@ 0x124
 800601e:	ab4a      	add	r3, sp, #296	@ 0x128
 8006020:	a948      	add	r1, sp, #288	@ 0x120
 8006022:	9806      	ldr	r0, [sp, #24]
 8006024:	9700      	str	r7, [sp, #0]
 8006026:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 800602a:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 800602e:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006032:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006036:	f00d feb2 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_5.setSelected(false);
 800603a:	4629      	mov	r1, r5
 800603c:	9806      	ldr	r0, [sp, #24]
 800603e:	f00d ff4f 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8006042:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_5);
 8006044:	9906      	ldr	r1, [sp, #24]
 8006046:	f883 50c0 	strb.w	r5, [r3, #192]	@ 0xc0
 800604a:	9802      	ldr	r0, [sp, #8]
 800604c:	f7fe fc48 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006050:	9906      	ldr	r1, [sp, #24]
 8006052:	4630      	mov	r0, r6
 8006054:	f00a fa42 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_4.setXY(150, 158);
 8006058:	9807      	ldr	r0, [sp, #28]
 800605a:	229e      	movs	r2, #158	@ 0x9e
 800605c:	2196      	movs	r1, #150	@ 0x96
 800605e:	f7fe fa4a 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_4.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 8006062:	aa49      	add	r2, sp, #292	@ 0x124
 8006064:	ab4a      	add	r3, sp, #296	@ 0x128
 8006066:	a948      	add	r1, sp, #288	@ 0x120
 8006068:	9807      	ldr	r0, [sp, #28]
 800606a:	9700      	str	r7, [sp, #0]
 800606c:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006070:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006074:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 8006078:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 800607c:	f00d fe8f 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_4.setSelected(false);
 8006080:	4629      	mov	r1, r5
 8006082:	9807      	ldr	r0, [sp, #28]
 8006084:	f00d ff2c 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8006088:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_4);
 800608a:	9907      	ldr	r1, [sp, #28]
 800608c:	f883 5100 	strb.w	r5, [r3, #256]	@ 0x100
 8006090:	9802      	ldr	r0, [sp, #8]
 8006092:	f7fe fc25 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 8006096:	9907      	ldr	r1, [sp, #28]
 8006098:	4630      	mov	r0, r6
 800609a:	f00a fa1f 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_3.setXY(100, 158);
 800609e:	9808      	ldr	r0, [sp, #32]
 80060a0:	229e      	movs	r2, #158	@ 0x9e
 80060a2:	2164      	movs	r1, #100	@ 0x64
 80060a4:	f7fe fa27 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_3.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80060a8:	aa49      	add	r2, sp, #292	@ 0x124
 80060aa:	ab4a      	add	r3, sp, #296	@ 0x128
 80060ac:	a948      	add	r1, sp, #288	@ 0x120
 80060ae:	9808      	ldr	r0, [sp, #32]
 80060b0:	9700      	str	r7, [sp, #0]
 80060b2:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 80060b6:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 80060ba:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 80060be:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 80060c2:	f00d fe6c 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_3.setSelected(false);
 80060c6:	4629      	mov	r1, r5
 80060c8:	9808      	ldr	r0, [sp, #32]
 80060ca:	f00d ff09 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 80060ce:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_3);
 80060d0:	9908      	ldr	r1, [sp, #32]
 80060d2:	f883 5140 	strb.w	r5, [r3, #320]	@ 0x140
 80060d6:	9802      	ldr	r0, [sp, #8]
 80060d8:	f7fe fc02 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 80060dc:	9908      	ldr	r1, [sp, #32]
 80060de:	4630      	mov	r0, r6
 80060e0:	f00a f9fc 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
 80060e4:	f504 5397 	add.w	r3, r4, #4832	@ 0x12e0
    RadioButton_0_2.setXY(50, 158);
 80060e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060ea:	229e      	movs	r2, #158	@ 0x9e
    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
 80060ec:	3314      	adds	r3, #20
    RadioButton_0_2.setXY(50, 158);
 80060ee:	2132      	movs	r1, #50	@ 0x32
        radioButtonSelectedCallback = &callback;
 80060f0:	f8c4 31c0 	str.w	r3, [r4, #448]	@ 0x1c0
 80060f4:	f7fe f9ff 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_2.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 80060f8:	aa49      	add	r2, sp, #292	@ 0x124
 80060fa:	ab4a      	add	r3, sp, #296	@ 0x128
 80060fc:	a948      	add	r1, sp, #288	@ 0x120
 80060fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006100:	9700      	str	r7, [sp, #0]
 8006102:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 8006106:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 800610a:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 800610e:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006112:	f00d fe44 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_2.setSelected(false);
 8006116:	4629      	mov	r1, r5
 8006118:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800611a:	f00d fee1 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 800611e:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_2);
 8006120:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006122:	f883 5180 	strb.w	r5, [r3, #384]	@ 0x180
 8006126:	9802      	ldr	r0, [sp, #8]
 8006128:	f7fe fbda 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800612c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800612e:	4630      	mov	r0, r6
 8006130:	f00a f9d4 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    RadioButton_0_1.setXY(0, 158);
 8006134:	4629      	mov	r1, r5
 8006136:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006138:	229e      	movs	r2, #158	@ 0x9e
 800613a:	f7fe f9dc 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    RadioButton_0_1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_OFF_PRESSED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_RADIOBUTTON_RADIO_LARGE_ROUNDED_ON_PRESSED_ID));
 800613e:	aa49      	add	r2, sp, #292	@ 0x124
 8006140:	ab4a      	add	r3, sp, #296	@ 0x128
 8006142:	a948      	add	r1, sp, #288	@ 0x120
 8006144:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006146:	9700      	str	r7, [sp, #0]
 8006148:	f8ad a128 	strh.w	sl, [sp, #296]	@ 0x128
 800614c:	f04f 0a02 	mov.w	sl, #2
 8006150:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006154:	f04f 0908 	mov.w	r9, #8
 8006158:	f8ad 8120 	strh.w	r8, [sp, #288]	@ 0x120
 800615c:	f8ad b124 	strh.w	fp, [sp, #292]	@ 0x124
 8006160:	f00d fe1d 	bl	8013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    RadioButton_0_1.setSelected(false);
 8006164:	4629      	mov	r1, r5
 8006166:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006168:	f00d feba 	bl	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 800616c:	9b03      	ldr	r3, [sp, #12]
    radioButtonGroup1.add(RadioButton_0_1);
 800616e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006170:	f883 51c0 	strb.w	r5, [r3, #448]	@ 0x1c0
 8006174:	9802      	ldr	r0, [sp, #8]
 8006176:	f7fe fbb3 	bl	80048e0 <_ZN8touchgfx16RadioButtonGroupILt64EE3addERNS_11RadioButtonE>
 800617a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800617c:	4630      	mov	r0, r6
 800617e:	f00a f9ad 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 8006182:	462a      	mov	r2, r5
 8006184:	4629      	mov	r1, r5
 8006186:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006188:	f7fe f9b5 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 800618c:	4639      	mov	r1, r7
 800618e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006190:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
 8006194:	f00d fc93 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006198:	9944      	ldr	r1, [sp, #272]	@ 0x110
 800619a:	4630      	mov	r0, r6
 800619c:	f00a f99e 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 80061a0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80061a4:	4629      	mov	r1, r5
 80061a6:	9845      	ldr	r0, [sp, #276]	@ 0x114
 80061a8:	f7fe f9a5 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80061ac:	4639      	mov	r1, r7
 80061ae:	9845      	ldr	r0, [sp, #276]	@ 0x114
    Nex.setAction(buttonCallback);
 80061b0:	f504 5597 	add.w	r5, r4, #4832	@ 0x12e0
 80061b4:	f8ad 912c 	strh.w	r9, [sp, #300]	@ 0x12c
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 80061b8:	f00d fc81 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80061bc:	9945      	ldr	r1, [sp, #276]	@ 0x114
 80061be:	4630      	mov	r0, r6
 80061c0:	f00a f98c 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Nex.setXY(615, 415);
 80061c4:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 80061c6:	f240 129f 	movw	r2, #415	@ 0x19f
 80061ca:	f240 2167 	movw	r1, #615	@ 0x267
 80061ce:	f7fe f992 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 80061d2:	2301      	movs	r3, #1
    Nex.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 80061d4:	463a      	mov	r2, r7
 80061d6:	a94a      	add	r1, sp, #296	@ 0x128
 80061d8:	9847      	ldr	r0, [sp, #284]	@ 0x11c
        color = col;
 80061da:	f04f 39ff 	mov.w	r9, #4294967295
 80061de:	f8ad 3128 	strh.w	r3, [sp, #296]	@ 0x128
    Nex.setAction(buttonCallback);
 80061e2:	445d      	add	r5, fp
 80061e4:	f8ad a12c 	strh.w	sl, [sp, #300]	@ 0x12c
    Nex.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 80061e8:	f00d fbad 	bl	8013946 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 80061ec:	9b03      	ldr	r3, [sp, #12]
        updateTextPosition();
 80061ee:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 80061f0:	f8a3 a258 	strh.w	sl, [r3, #600]	@ 0x258
 80061f4:	f7fe fc2e 	bl	8004a54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80061fc:	4630      	mov	r0, r6
        action = &callback;
 80061fe:	f8c3 5248 	str.w	r5, [r3, #584]	@ 0x248
        colorPressed = col;
 8006202:	e9c3 9997 	strd	r9, r9, [r3, #604]	@ 0x25c
 8006206:	f00a f969 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(268, 400);
 800620a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800620c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006210:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8006214:	f7fe f96f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 8006218:	2209      	movs	r2, #9
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 800621a:	a94a      	add	r1, sp, #296	@ 0x128
 800621c:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800621e:	f8ad 2128 	strh.w	r2, [sp, #296]	@ 0x128
 8006222:	f8ad 212c 	strh.w	r2, [sp, #300]	@ 0x12c
 8006226:	463a      	mov	r2, r7
 8006228:	f00d fb8d 	bl	8013946 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800622c:	9946      	ldr	r1, [sp, #280]	@ 0x118
 800622e:	4630      	mov	r0, r6
 8006230:	f00a f954 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Back.setXY(75, 415);
 8006234:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006236:	f240 129f 	movw	r2, #415	@ 0x19f
 800623a:	214b      	movs	r1, #75	@ 0x4b
 800623c:	f7fe f95b 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 8006240:	2301      	movs	r3, #1
    Back.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_TINY_ROUND_PRESSED_ID));
 8006242:	463a      	mov	r2, r7
 8006244:	a94a      	add	r1, sp, #296	@ 0x128
 8006246:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006248:	f8ad 3128 	strh.w	r3, [sp, #296]	@ 0x128
 800624c:	f8ad a12c 	strh.w	sl, [sp, #300]	@ 0x12c
 8006250:	f00d fb79 	bl	8013946 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8006254:	9b03      	ldr	r3, [sp, #12]
        updateTextPosition();
 8006256:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006258:	f8a3 82d4 	strh.w	r8, [r3, #724]	@ 0x2d4
 800625c:	f7fe fbfa 	bl	8004a54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8006260:	9b03      	ldr	r3, [sp, #12]
 8006262:	4630      	mov	r0, r6
 8006264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006266:	f8c3 52c4 	str.w	r5, [r3, #708]	@ 0x2c4
        colorPressed = col;
 800626a:	e9c3 99b6 	strd	r9, r9, [r3, #728]	@ 0x2d8
 800626e:	f00a f935 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006272:	4620      	mov	r0, r4
 8006274:	b04d      	add	sp, #308	@ 0x134
 8006276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627a:	bf00      	nop

0800627c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800627c:	4770      	bx	lr
	...

08006280 <_Z23getFont_verdana_10_4bppv>:
{
 8006280:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006282:	4d16      	ldr	r5, [pc, #88]	@ (80062dc <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8006284:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8006286:	682c      	ldr	r4, [r5, #0]
 8006288:	f3bf 8f5b 	dmb	ish
 800628c:	f014 0401 	ands.w	r4, r4, #1
 8006290:	d120      	bne.n	80062d4 <_Z23getFont_verdana_10_4bppv+0x54>
 8006292:	4628      	mov	r0, r5
 8006294:	f01e f9c3 	bl	802461e <__cxa_guard_acquire>
 8006298:	b1e0      	cbz	r0, 80062d4 <_Z23getFont_verdana_10_4bppv+0x54>
 800629a:	233f      	movs	r3, #63	@ 0x3f
 800629c:	2201      	movs	r2, #1
 800629e:	4910      	ldr	r1, [pc, #64]	@ (80062e0 <_Z23getFont_verdana_10_4bppv+0x60>)
 80062a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062a2:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <_Z23getFont_verdana_10_4bppv+0x64>)
 80062a4:	4810      	ldr	r0, [pc, #64]	@ (80062e8 <_Z23getFont_verdana_10_4bppv+0x68>)
 80062a6:	9308      	str	r3, [sp, #32]
 80062a8:	4b10      	ldr	r3, [pc, #64]	@ (80062ec <_Z23getFont_verdana_10_4bppv+0x6c>)
 80062aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80062ac:	9405      	str	r4, [sp, #20]
 80062ae:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80062b2:	2304      	movs	r3, #4
 80062b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80062b8:	230a      	movs	r3, #10
 80062ba:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80062c4:	f7fe f8aa 	bl	800441c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80062c8:	4809      	ldr	r0, [pc, #36]	@ (80062f0 <_Z23getFont_verdana_10_4bppv+0x70>)
 80062ca:	f01e fd3b 	bl	8024d44 <atexit>
 80062ce:	4628      	mov	r0, r5
 80062d0:	f01e f9b1 	bl	8024636 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80062d4:	4804      	ldr	r0, [pc, #16]	@ (80062e8 <_Z23getFont_verdana_10_4bppv+0x68>)
 80062d6:	b00f      	add	sp, #60	@ 0x3c
 80062d8:	bd30      	pop	{r4, r5, pc}
 80062da:	bf00      	nop
 80062dc:	2400c364 	.word	0x2400c364
 80062e0:	08029d1c 	.word	0x08029d1c
 80062e4:	08029dbc 	.word	0x08029dbc
 80062e8:	2400c368 	.word	0x2400c368
 80062ec:	08029dc8 	.word	0x08029dc8
 80062f0:	0800627d 	.word	0x0800627d

080062f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80062f4:	4770      	bx	lr
	...

080062f8 <_Z23getFont_verdana_20_4bppv>:
{
 80062f8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80062fa:	4d16      	ldr	r5, [pc, #88]	@ (8006354 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 80062fc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 9, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80062fe:	682c      	ldr	r4, [r5, #0]
 8006300:	f3bf 8f5b 	dmb	ish
 8006304:	f014 0401 	ands.w	r4, r4, #1
 8006308:	d121      	bne.n	800634e <_Z23getFont_verdana_20_4bppv+0x56>
 800630a:	4628      	mov	r0, r5
 800630c:	f01e f987 	bl	802461e <__cxa_guard_acquire>
 8006310:	b1e8      	cbz	r0, 800634e <_Z23getFont_verdana_20_4bppv+0x56>
 8006312:	233f      	movs	r3, #63	@ 0x3f
 8006314:	2201      	movs	r2, #1
 8006316:	4910      	ldr	r1, [pc, #64]	@ (8006358 <_Z23getFont_verdana_20_4bppv+0x60>)
 8006318:	9309      	str	r3, [sp, #36]	@ 0x24
 800631a:	4b10      	ldr	r3, [pc, #64]	@ (800635c <_Z23getFont_verdana_20_4bppv+0x64>)
 800631c:	4810      	ldr	r0, [pc, #64]	@ (8006360 <_Z23getFont_verdana_20_4bppv+0x68>)
 800631e:	9308      	str	r3, [sp, #32]
 8006320:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8006322:	940a      	str	r4, [sp, #40]	@ 0x28
 8006324:	9405      	str	r4, [sp, #20]
 8006326:	e9cd 4306 	strd	r4, r3, [sp, #24]
 800632a:	2304      	movs	r3, #4
 800632c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8006330:	2314      	movs	r3, #20
 8006332:	2209      	movs	r2, #9
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800633a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800633e:	f7fe f86d 	bl	800441c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006342:	4809      	ldr	r0, [pc, #36]	@ (8006368 <_Z23getFont_verdana_20_4bppv+0x70>)
 8006344:	f01e fcfe 	bl	8024d44 <atexit>
 8006348:	4628      	mov	r0, r5
 800634a:	f01e f974 	bl	8024636 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800634e:	4804      	ldr	r0, [pc, #16]	@ (8006360 <_Z23getFont_verdana_20_4bppv+0x68>)
 8006350:	b00f      	add	sp, #60	@ 0x3c
 8006352:	bd30      	pop	{r4, r5, pc}
 8006354:	2400c394 	.word	0x2400c394
 8006358:	08029d2c 	.word	0x08029d2c
 800635c:	08029dc0 	.word	0x08029dc0
 8006360:	2400c398 	.word	0x2400c398
 8006364:	08029dcc 	.word	0x08029dcc
 8006368:	080062f5 	.word	0x080062f5

0800636c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800636c:	4770      	bx	lr
	...

08006370 <_Z23getFont_verdana_40_4bppv>:
{
 8006370:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006372:	4d16      	ldr	r5, [pc, #88]	@ (80063cc <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8006374:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8006376:	682c      	ldr	r4, [r5, #0]
 8006378:	f3bf 8f5b 	dmb	ish
 800637c:	f014 0401 	ands.w	r4, r4, #1
 8006380:	d120      	bne.n	80063c4 <_Z23getFont_verdana_40_4bppv+0x54>
 8006382:	4628      	mov	r0, r5
 8006384:	f01e f94b 	bl	802461e <__cxa_guard_acquire>
 8006388:	b1e0      	cbz	r0, 80063c4 <_Z23getFont_verdana_40_4bppv+0x54>
 800638a:	233f      	movs	r3, #63	@ 0x3f
 800638c:	2201      	movs	r2, #1
 800638e:	4910      	ldr	r1, [pc, #64]	@ (80063d0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8006390:	9309      	str	r3, [sp, #36]	@ 0x24
 8006392:	4b10      	ldr	r3, [pc, #64]	@ (80063d4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8006394:	4810      	ldr	r0, [pc, #64]	@ (80063d8 <_Z23getFont_verdana_40_4bppv+0x68>)
 8006396:	9308      	str	r3, [sp, #32]
 8006398:	4b10      	ldr	r3, [pc, #64]	@ (80063dc <_Z23getFont_verdana_40_4bppv+0x6c>)
 800639a:	940a      	str	r4, [sp, #40]	@ 0x28
 800639c:	9405      	str	r4, [sp, #20]
 800639e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80063a2:	2304      	movs	r3, #4
 80063a4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80063a8:	2328      	movs	r3, #40	@ 0x28
 80063aa:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80063b4:	f7fe f832 	bl	800441c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80063b8:	4809      	ldr	r0, [pc, #36]	@ (80063e0 <_Z23getFont_verdana_40_4bppv+0x70>)
 80063ba:	f01e fcc3 	bl	8024d44 <atexit>
 80063be:	4628      	mov	r0, r5
 80063c0:	f01e f939 	bl	8024636 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80063c4:	4804      	ldr	r0, [pc, #16]	@ (80063d8 <_Z23getFont_verdana_40_4bppv+0x68>)
 80063c6:	b00f      	add	sp, #60	@ 0x3c
 80063c8:	bd30      	pop	{r4, r5, pc}
 80063ca:	bf00      	nop
 80063cc:	2400c3c4 	.word	0x2400c3c4
 80063d0:	08029dac 	.word	0x08029dac
 80063d4:	08029dc4 	.word	0x08029dc4
 80063d8:	2400c3c8 	.word	0x2400c3c8
 80063dc:	08029dd0 	.word	0x08029dd0
 80063e0:	0800636d 	.word	0x0800636d

080063e4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80063e4:	2000      	movs	r0, #0
 80063e6:	4770      	bx	lr

080063e8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80063e8:	2000      	movs	r0, #0
 80063ea:	4770      	bx	lr

080063ec <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80063ec:	b40e      	push	{r1, r2, r3}
 80063ee:	b503      	push	{r0, r1, lr}
 80063f0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80063f2:	2100      	movs	r1, #0
{
 80063f4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80063f8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80063fa:	f011 f8bb 	bl	8017574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80063fe:	b002      	add	sp, #8
 8006400:	f85d eb04 	ldr.w	lr, [sp], #4
 8006404:	b003      	add	sp, #12
 8006406:	4770      	bx	lr

08006408 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006408:	b40c      	push	{r2, r3}
 800640a:	b507      	push	{r0, r1, r2, lr}
 800640c:	ab04      	add	r3, sp, #16
 800640e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8006412:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8006414:	f011 f8ae 	bl	8017574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006418:	b003      	add	sp, #12
 800641a:	f85d eb04 	ldr.w	lr, [sp], #4
 800641e:	b002      	add	sp, #8
 8006420:	4770      	bx	lr
	...

08006424 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8006424:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800642a:	b373      	cbz	r3, 800648a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800642c:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800642e:	b92b      	cbnz	r3, 800643c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8006430:	4b18      	ldr	r3, [pc, #96]	@ (8006494 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8006432:	21c5      	movs	r1, #197	@ 0xc5
 8006434:	4a18      	ldr	r2, [pc, #96]	@ (8006498 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006436:	4819      	ldr	r0, [pc, #100]	@ (800649c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8006438:	f01e fc66 	bl	8024d08 <__assert_func>
            return buffer[pos];
 800643c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800643e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006442:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8006444:	b30b      	cbz	r3, 800648a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8006446:	f012 ff81 	bl	801934c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800644a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800644c:	2b01      	cmp	r3, #1
 800644e:	d803      	bhi.n	8006458 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8006450:	4b13      	ldr	r3, [pc, #76]	@ (80064a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8006452:	21cb      	movs	r1, #203	@ 0xcb
 8006454:	4a13      	ldr	r2, [pc, #76]	@ (80064a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8006456:	e7ee      	b.n	8006436 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8006458:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800645a:	f640 103f 	movw	r0, #2367	@ 0x93f
 800645e:	1c53      	adds	r3, r2, #1
 8006460:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8006462:	2b09      	cmp	r3, #9
 8006464:	4619      	mov	r1, r3
 8006466:	bf88      	it	hi
 8006468:	f1a3 010a 	subhi.w	r1, r3, #10
 800646c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8006470:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8006472:	4281      	cmp	r1, r0
 8006474:	d109      	bne.n	800648a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8006476:	2b0a      	cmp	r3, #10
 8006478:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800647c:	bf28      	it	cs
 800647e:	2300      	movcs	r3, #0
            return buffer[pos];
 8006480:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8006482:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8006486:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8006488:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800648a:	4620      	mov	r0, r4
}
 800648c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8006490:	f012 be5e 	b.w	8019150 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006494:	08028398 	.word	0x08028398
 8006498:	080283a1 	.word	0x080283a1
 800649c:	0802844c 	.word	0x0802844c
 80064a0:	080284a4 	.word	0x080284a4
 80064a4:	080284b2 	.word	0x080284b2

080064a8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80064a8:	f012 be1b 	b.w	80190e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080064ac <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80064ac:	b510      	push	{r4, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	ac02      	add	r4, sp, #8
 80064b2:	e884 0006 	stmia.w	r4, {r1, r2}
 80064b6:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80064b8:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80064ba:	4621      	mov	r1, r4
    va_start(pArg, format);
 80064bc:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	9b08      	ldr	r3, [sp, #32]
 80064c6:	f00f fc5b 	bl	8015d80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80064ca:	b006      	add	sp, #24
 80064cc:	bd10      	pop	{r4, pc}
	...

080064d0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80064d0:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80064d2:	bb18      	cbnz	r0, 800651c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80064d4:	4b12      	ldr	r3, [pc, #72]	@ (8006520 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80064d6:	4813      	ldr	r0, [pc, #76]	@ (8006524 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80064d8:	681c      	ldr	r4, [r3, #0]
 80064da:	4913      	ldr	r1, [pc, #76]	@ (8006528 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80064dc:	b1b4      	cbz	r4, 800650c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	4422      	add	r2, r4
 80064e2:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80064e4:	6862      	ldr	r2, [r4, #4]
 80064e6:	4422      	add	r2, r4
 80064e8:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80064ea:	68a2      	ldr	r2, [r4, #8]
 80064ec:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80064ee:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80064f4:	f000 f838 	bl	8006568 <_ZN17TypedTextDatabase8getFontsEv>
 80064f8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80064fa:	f000 f833 	bl	8006564 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80064fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8006500:	601c      	str	r4, [r3, #0]
        fonts = f;
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8006504:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8006506:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8006508:	8018      	strh	r0, [r3, #0]
    }
}
 800650a:	e007      	b.n	800651c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800650c:	4b0b      	ldr	r3, [pc, #44]	@ (800653c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800650e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006510:	4b0b      	ldr	r3, [pc, #44]	@ (8006540 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8006512:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8006514:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8006516:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8006518:	2c00      	cmp	r4, #0
 800651a:	d1e8      	bne.n	80064ee <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800651c:	bd38      	pop	{r3, r4, r5, pc}
 800651e:	bf00      	nop
 8006520:	2400c400 	.word	0x2400c400
 8006524:	2400c3f8 	.word	0x2400c3f8
 8006528:	2400c3f4 	.word	0x2400c3f4
 800652c:	2400c3fc 	.word	0x2400c3fc
 8006530:	24026474 	.word	0x24026474
 8006534:	2402647c 	.word	0x2402647c
 8006538:	24026478 	.word	0x24026478
 800653c:	9021b7a0 	.word	0x9021b7a0
 8006540:	9021b790 	.word	0x9021b790
 8006544:	9021b7b4 	.word	0x9021b7b4

08006548 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006548:	4b04      	ldr	r3, [pc, #16]	@ (800655c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006550:	4b03      	ldr	r3, [pc, #12]	@ (8006560 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	2400c3f4 	.word	0x2400c3f4
 8006560:	2400c3f8 	.word	0x2400c3f8

08006564 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8006564:	2004      	movs	r0, #4
 8006566:	4770      	bx	lr

08006568 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8006568:	4800      	ldr	r0, [pc, #0]	@ (800656c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800656a:	4770      	bx	lr
 800656c:	2400c404 	.word	0x2400c404

08006570 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006570:	b510      	push	{r4, lr}
};
 8006572:	4c05      	ldr	r4, [pc, #20]	@ (8006588 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8006574:	f7ff fec0 	bl	80062f8 <_Z23getFont_verdana_20_4bppv>
};
 8006578:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800657a:	f7ff fef9 	bl	8006370 <_Z23getFont_verdana_40_4bppv>
};
 800657e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8006580:	f7ff fe7e 	bl	8006280 <_Z23getFont_verdana_10_4bppv>
};
 8006584:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8006586:	bd10      	pop	{r4, pc}
 8006588:	2400c404 	.word	0x2400c404

0800658c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800658c:	b510      	push	{r4, lr}
    pointArray = 0;
 800658e:	2400      	movs	r4, #0
 8006590:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8006592:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8006594:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8006596:	601c      	str	r4, [r3, #0]
}
 8006598:	bd10      	pop	{r4, pc}

0800659a <_ZN21WaitingScreenViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
 800659a:	4770      	bx	lr

0800659c <_ZN21WaitingScreenViewBaseD1Ev>:
}

WaitingScreenViewBase::~WaitingScreenViewBase()
{

}
 800659c:	4770      	bx	lr

0800659e <_ZN21WaitingScreenViewBase11setupScreenEv>:

void WaitingScreenViewBase::setupScreen()
{

}
 800659e:	4770      	bx	lr

080065a0 <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80065a0:	4770      	bx	lr

080065a2 <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80065a2:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80065a4:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80065a6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80065a8:	68c2      	ldr	r2, [r0, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	1055      	asrs	r5, r2, #1
 80065ae:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80065b2:	07d2      	lsls	r2, r2, #31
 80065b4:	bf48      	it	mi
 80065b6:	5962      	ldrmi	r2, [r4, r5]
    }
 80065b8:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80065ba:	bf48      	it	mi
 80065bc:	58d3      	ldrmi	r3, [r2, r3]
 80065be:	4718      	bx	r3

080065c0 <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80065c0:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80065c2:	6840      	ldr	r0, [r0, #4]
 80065c4:	b130      	cbz	r0, 80065d4 <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	b91a      	cbnz	r2, 80065d2 <_ZNK8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80065ca:	68d8      	ldr	r0, [r3, #12]
 80065cc:	f000 0001 	and.w	r0, r0, #1
 80065d0:	4770      	bx	lr
 80065d2:	2001      	movs	r0, #1
    }
 80065d4:	4770      	bx	lr

080065d6 <_ZN8touchgfx8CallbackI21WaitingScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80065d6:	b510      	push	{r4, lr}
 80065d8:	4604      	mov	r4, r0
 80065da:	2110      	movs	r1, #16
 80065dc:	f01e f81d 	bl	802461a <_ZdlPvj>
 80065e0:	4620      	mov	r0, r4
 80065e2:	bd10      	pop	{r4, pc}

080065e4 <_ZN21WaitingScreenViewBaseD0Ev>:
WaitingScreenViewBase::~WaitingScreenViewBase()
 80065e4:	b510      	push	{r4, lr}
 80065e6:	4604      	mov	r4, r0
}
 80065e8:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80065ec:	f01e f815 	bl	802461a <_ZdlPvj>
 80065f0:	4620      	mov	r0, r4
 80065f2:	bd10      	pop	{r4, pc}

080065f4 <_ZN21WaitingScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void WaitingScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 80065f4:	30f0      	adds	r0, #240	@ 0xf0
 80065f6:	4288      	cmp	r0, r1
{
 80065f8:	b508      	push	{r3, lr}
    if (&src == &button1)
 80065fa:	d105      	bne.n	8006608 <_ZN21WaitingScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80065fc:	f010 f822 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
    }
}
 8006600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenSlideTransitionEast();
 8006604:	f7fd beb8 	b.w	8004378 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
}
 8006608:	bd08      	pop	{r3, pc}
	...

0800660c <_ZN21WaitingScreenViewBaseC1Ev>:
WaitingScreenViewBase::WaitingScreenViewBase() :
 800660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006610:	4604      	mov	r4, r0
 8006612:	b08d      	sub	sp, #52	@ 0x34
 8006614:	2500      	movs	r5, #0
 8006616:	f011 ff2f 	bl	8018478 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &WaitingScreenViewBase::buttonCallbackHandler)
 800661a:	4627      	mov	r7, r4
 800661c:	4b96      	ldr	r3, [pc, #600]	@ (8006878 <_ZN21WaitingScreenViewBaseC1Ev+0x26c>)
        : Widget(), alpha(255), color(0)
 800661e:	f04f 0826 	mov.w	r8, #38	@ 0x26
 8006622:	4629      	mov	r1, r5
 8006624:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006626:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 800662a:	f847 3b40 	str.w	r3, [r7], #64
 800662e:	4642      	mov	r2, r8
 8006630:	4638      	mov	r0, r7
 8006632:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8006636:	f01e fe03 	bl	8025240 <memset>
 800663a:	4638      	mov	r0, r7
 800663c:	f7fd ff68 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
 8006640:	4b8e      	ldr	r3, [pc, #568]	@ (800687c <_ZN21WaitingScreenViewBaseC1Ev+0x270>)
 8006642:	a90a      	add	r1, sp, #40	@ 0x28
 8006644:	4658      	mov	r0, fp
 8006646:	6423      	str	r3, [r4, #64]	@ 0x40
 8006648:	23ff      	movs	r3, #255	@ 0xff
 800664a:	66a5      	str	r5, [r4, #104]	@ 0x68
 800664c:	f104 0af0 	add.w	sl, r4, #240	@ 0xf0
 8006650:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8006654:	f504 7992 	add.w	r9, r4, #292	@ 0x124
 8006658:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 800665c:	f7fd ff6a 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006660:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8006664:	a90a      	add	r1, sp, #40	@ 0x28
 8006666:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 800666a:	4618      	mov	r0, r3
 800666c:	9302      	str	r3, [sp, #8]
 800666e:	f7fd ff61 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006672:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8006676:	a90a      	add	r1, sp, #40	@ 0x28
 8006678:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 800667c:	4618      	mov	r0, r3
 800667e:	9303      	str	r3, [sp, #12]
 8006680:	f7fd ff58 	bl	8004534 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), action(), pressed(false)
 8006684:	4642      	mov	r2, r8
 8006686:	4629      	mov	r1, r5
 8006688:	4650      	mov	r0, sl
 800668a:	f01e fdd9 	bl	8025240 <memset>
 800668e:	4650      	mov	r0, sl
 8006690:	f7fd ff3e 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
        touchable = touch;
 8006694:	2301      	movs	r3, #1
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8006696:	4642      	mov	r2, r8
 8006698:	4629      	mov	r1, r5
 800669a:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
 800669e:	4648      	mov	r0, r9
 80066a0:	4b77      	ldr	r3, [pc, #476]	@ (8006880 <_ZN21WaitingScreenViewBaseC1Ev+0x274>)
 80066a2:	f104 0804 	add.w	r8, r4, #4
 80066a6:	f8a4 611e 	strh.w	r6, [r4, #286]	@ 0x11e
 80066aa:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 80066ae:	f8a4 6120 	strh.w	r6, [r4, #288]	@ 0x120
 80066b2:	f884 6122 	strb.w	r6, [r4, #290]	@ 0x122
 80066b6:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 80066ba:	f884 511c 	strb.w	r5, [r4, #284]	@ 0x11c
 80066be:	f01e fdbf 	bl	8025240 <memset>
 80066c2:	4648      	mov	r0, r9
 80066c4:	f7fd ff24 	bl	8004510 <_ZN8touchgfx6WidgetC1Ev>
 80066c8:	4b6e      	ldr	r3, [pc, #440]	@ (8006884 <_ZN21WaitingScreenViewBaseC1Ev+0x278>)
        : typedTextId(id)
 80066ca:	f8a4 6150 	strh.w	r6, [r4, #336]	@ 0x150
 80066ce:	f504 76b6 	add.w	r6, r4, #364	@ 0x16c
 80066d2:	f8c4 3124 	str.w	r3, [r4, #292]	@ 0x124
 80066d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006888 <_ZN21WaitingScreenViewBaseC1Ev+0x27c>)
 80066d8:	4630      	mov	r0, r6
 80066da:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
 80066de:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 80066e2:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 80066e6:	f8a4 515c 	strh.w	r5, [r4, #348]	@ 0x15c
 80066ea:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295
 80066f2:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160
              text(0)
 80066f6:	e9c4 3559 	strd	r3, r5, [r4, #356]	@ 0x164
 80066fa:	f009 fcb5 	bl	8010068 <_ZN8touchgfx11BoxProgressC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 80066fe:	4a63      	ldr	r2, [pc, #396]	@ (800688c <_ZN21WaitingScreenViewBaseC1Ev+0x280>)
        setXY(x, y);
 8006700:	4629      	mov	r1, r5
 8006702:	4638      	mov	r0, r7
 8006704:	e9c4 2494 	strd	r2, r4, [r4, #592]	@ 0x250
 8006708:	4a61      	ldr	r2, [pc, #388]	@ (8006890 <_ZN21WaitingScreenViewBaseC1Ev+0x284>)
 800670a:	e9c4 2596 	strd	r2, r5, [r4, #600]	@ 0x258
 800670e:	462a      	mov	r2, r5
 8006710:	f7fd fef1 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8006714:	4638      	mov	r0, r7
 8006716:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800671a:	f7fc ff13 	bl	8003544 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 800671e:	4638      	mov	r0, r7
 8006720:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006724:	f7fc ff10 	bl	8003548 <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
 8006728:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800672c:	4639      	mov	r1, r7
 800672e:	4640      	mov	r0, r8
 8006730:	66a2      	str	r2, [r4, #104]	@ 0x68
 8006732:	2708      	movs	r7, #8
 8006734:	f009 fed2 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(-88, -35);
 8006738:	4658      	mov	r0, fp
 800673a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800673e:	f06f 0157 	mvn.w	r1, #87	@ 0x57
 8006742:	f7fd fed8 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 8006746:	2207      	movs	r2, #7
    image1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BACKGROUNDS_1024X600_METEOR_RAIN_ID));
 8006748:	a90a      	add	r1, sp, #40	@ 0x28
 800674a:	4658      	mov	r0, fp
 800674c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8006750:	f00d f9b5 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006754:	4659      	mov	r1, fp
 8006756:	4640      	mov	r0, r8
 8006758:	f009 fec0 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2_1.setXY(0, 0);
 800675c:	462a      	mov	r2, r5
 800675e:	4629      	mov	r1, r5
 8006760:	9802      	ldr	r0, [sp, #8]
 8006762:	f7fd fec8 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    image2_1.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 8006766:	a90a      	add	r1, sp, #40	@ 0x28
 8006768:	9802      	ldr	r0, [sp, #8]
 800676a:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800676e:	f00d f9a6 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006772:	9902      	ldr	r1, [sp, #8]
 8006774:	4640      	mov	r0, r8
 8006776:	f009 feb1 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 400);
 800677a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800677e:	4629      	mov	r1, r5
 8006780:	9803      	ldr	r0, [sp, #12]
 8006782:	f7fd feb8 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_BARS_800X480_BOTTOM_BASE_ID));
 8006786:	a90a      	add	r1, sp, #40	@ 0x28
 8006788:	9803      	ldr	r0, [sp, #12]
 800678a:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800678e:	f00d f996 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8006792:	9903      	ldr	r1, [sp, #12]
 8006794:	4640      	mov	r0, r8
 8006796:	f009 fea1 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(268, 400);
 800679a:	4650      	mov	r0, sl
 800679c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80067a0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80067a4:	f7fd fea7 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 80067a8:	2209      	movs	r2, #9
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_MEDIUM_ROUND_DISABLED_ID));
 80067aa:	a909      	add	r1, sp, #36	@ 0x24
 80067ac:	4650      	mov	r0, sl
 80067ae:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
        boundingArea = calculateBoundingArea();
 80067b2:	af04      	add	r7, sp, #16
 80067b4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80067b8:	aa0a      	add	r2, sp, #40	@ 0x28
 80067ba:	f00d f8c4 	bl	8013946 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80067be:	f504 7214 	add.w	r2, r4, #592	@ 0x250
 80067c2:	4651      	mov	r1, sl
 80067c4:	4640      	mov	r0, r8
        action = &callback;
 80067c6:	f8c4 2118 	str.w	r2, [r4, #280]	@ 0x118
 80067ca:	f009 fe87 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(377, 430);
 80067ce:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 80067d2:	4648      	mov	r0, r9
 80067d4:	f240 1179 	movw	r1, #377	@ 0x179
 80067d8:	f7fd fe8d 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80067e0:	4649      	mov	r1, r9
 80067e2:	4638      	mov	r0, r7
        color = newColor;
 80067e4:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        linespace = space;
 80067e8:	f8a4 5158 	strh.w	r5, [r4, #344]	@ 0x158
        boundingArea = calculateBoundingArea();
 80067ec:	f00c fdb6 	bl	801335c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80067f0:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 80067f4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80067f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80067fc:	4b22      	ldr	r3, [pc, #136]	@ (8006888 <_ZN21WaitingScreenViewBaseC1Ev+0x27c>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZVLI));
 80067fe:	a90a      	add	r1, sp, #40	@ 0x28
 8006800:	4648      	mov	r0, r9
 8006802:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 8006806:	930a      	str	r3, [sp, #40]	@ 0x28
 8006808:	f00d f842 	bl	8013890 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800680c:	4649      	mov	r1, r9
 800680e:	4640      	mov	r0, r8
 8006810:	f009 fe64 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxProgress1.setXY(300, 342);
 8006814:	4630      	mov	r0, r6
 8006816:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 800681a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800681e:	f7fd fe6a 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
    boxProgress1.setProgressIndicatorPosition(0, 0, 300, 10);
 8006822:	230a      	movs	r3, #10
 8006824:	462a      	mov	r2, r5
 8006826:	4629      	mov	r1, r5
 8006828:	4630      	mov	r0, r6
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006830:	f009 fb74 	bl	800ff1c <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    boxProgress1.setRange(0, 100);
 8006834:	462b      	mov	r3, r5
 8006836:	2264      	movs	r2, #100	@ 0x64
 8006838:	4629      	mov	r1, r5
 800683a:	4630      	mov	r0, r6
 800683c:	9500      	str	r5, [sp, #0]
 800683e:	f009 fc8b 	bl	8010158 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    boxProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8006842:	4629      	mov	r1, r5
 8006844:	4630      	mov	r0, r6
 8006846:	f009 fc66 	bl	8010116 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    boxProgress1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BOXPROGRESS_NORMAL_SMALL_ID));
 800684a:	a90a      	add	r1, sp, #40	@ 0x28
 800684c:	4630      	mov	r0, r6
 800684e:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8006852:	f009 fdd5 	bl	8010400 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    boxProgress1.setColor(touchgfx::Color::getColorFromRGB(0, 240, 255));
 8006856:	4630      	mov	r0, r6
 8006858:	490e      	ldr	r1, [pc, #56]	@ (8006894 <_ZN21WaitingScreenViewBaseC1Ev+0x288>)
 800685a:	f009 fb2e 	bl	800feba <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    boxProgress1.setValue(60);
 800685e:	4630      	mov	r0, r6
 8006860:	213c      	movs	r1, #60	@ 0x3c
 8006862:	f009 fb73 	bl	800ff4c <_ZN8touchgfx11BoxProgress8setValueEi>
 8006866:	4640      	mov	r0, r8
 8006868:	4631      	mov	r1, r6
 800686a:	f009 fe37 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800686e:	4620      	mov	r0, r4
 8006870:	b00d      	add	sp, #52	@ 0x34
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	bf00      	nop
 8006878:	080285a4 	.word	0x080285a4
 800687c:	08029148 	.word	0x08029148
 8006880:	080291b0 	.word	0x080291b0
 8006884:	080290b8 	.word	0x080290b8
 8006888:	08027a80 	.word	0x08027a80
 800688c:	0802858c 	.word	0x0802858c
 8006890:	080065f5 	.word	0x080065f5
 8006894:	ff00f0ff 	.word	0xff00f0ff

08006898 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8006898:	4770      	bx	lr

0800689a <_ZN19FrontendApplicationD0Ev>:
 800689a:	b510      	push	{r4, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80068a2:	f01d feba 	bl	802461a <_ZdlPvj>
 80068a6:	4620      	mov	r0, r4
 80068a8:	bd10      	pop	{r4, pc}

080068aa <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80068aa:	b510      	push	{r4, lr}
 80068ac:	4604      	mov	r4, r0
    {
        model.tick();
 80068ae:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80068b2:	f000 f812 	bl	80068da <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80068b6:	4620      	mov	r0, r4
    }
 80068b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80068bc:	f00f bf5e 	b.w	801677c <_ZN8touchgfx11Application15handleTickEventEv>

080068c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80068c0:	b510      	push	{r4, lr}
 80068c2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80068c4:	f7fd fd14 	bl	80042f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80068c8:	4b01      	ldr	r3, [pc, #4]	@ (80068d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80068ca:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80068cc:	6023      	str	r3, [r4, #0]
}
 80068ce:	bd10      	pop	{r4, pc}
 80068d0:	080285dc 	.word	0x080285dc

080068d4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80068d4:	2200      	movs	r2, #0
 80068d6:	6002      	str	r2, [r0, #0]
{

}
 80068d8:	4770      	bx	lr

080068da <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80068da:	4770      	bx	lr

080068dc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80068dc:	4770      	bx	lr

080068de <_ZThn4_N16Screen1PresenterD1Ev>:
 80068de:	3804      	subs	r0, #4
 80068e0:	4770      	bx	lr

080068e2 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80068e2:	4770      	bx	lr

080068e4 <_ZN16Screen1PresenterD0Ev>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	4604      	mov	r4, r0
 80068e8:	2110      	movs	r1, #16
 80068ea:	f01d fe96 	bl	802461a <_ZdlPvj>
 80068ee:	4620      	mov	r0, r4
 80068f0:	bd10      	pop	{r4, pc}

080068f2 <_ZThn4_N16Screen1PresenterD0Ev>:
 80068f2:	f1a0 0004 	sub.w	r0, r0, #4
 80068f6:	e7f5      	b.n	80068e4 <_ZN16Screen1PresenterD0Ev>

080068f8 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80068f8:	2200      	movs	r2, #0
    : view(v)
 80068fa:	60c1      	str	r1, [r0, #12]
 80068fc:	6082      	str	r2, [r0, #8]
 80068fe:	4a02      	ldr	r2, [pc, #8]	@ (8006908 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8006900:	6002      	str	r2, [r0, #0]
 8006902:	3218      	adds	r2, #24
 8006904:	6042      	str	r2, [r0, #4]
}
 8006906:	4770      	bx	lr
 8006908:	08028630 	.word	0x08028630

0800690c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800690c:	4770      	bx	lr
	...

08006910 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006910:	4b03      	ldr	r3, [pc, #12]	@ (8006920 <_ZN11Screen1ViewD1Ev+0x10>)
 8006912:	b510      	push	{r4, lr}
 8006914:	4604      	mov	r4, r0
 8006916:	6003      	str	r3, [r0, #0]
 8006918:	f7fd fdb6 	bl	8004488 <_ZN15Screen1ViewBaseD1Ev>
 800691c:	4620      	mov	r0, r4
 800691e:	bd10      	pop	{r4, pc}
 8006920:	08028658 	.word	0x08028658

08006924 <_ZN11Screen1ViewD0Ev>:
 8006924:	b510      	push	{r4, lr}
 8006926:	4604      	mov	r4, r0
 8006928:	f7ff fff2 	bl	8006910 <_ZN11Screen1ViewD1Ev>
 800692c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8006930:	4620      	mov	r0, r4
 8006932:	f01d fe72 	bl	802461a <_ZdlPvj>
 8006936:	4620      	mov	r0, r4
 8006938:	bd10      	pop	{r4, pc}
	...

0800693c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 800693c:	b510      	push	{r4, lr}
 800693e:	4604      	mov	r4, r0
 8006940:	f7fd fe12 	bl	8004568 <_ZN15Screen1ViewBaseC1Ev>
 8006944:	4b01      	ldr	r3, [pc, #4]	@ (800694c <_ZN11Screen1ViewC1Ev+0x10>)
}
 8006946:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8006948:	6023      	str	r3, [r4, #0]
}
 800694a:	bd10      	pop	{r4, pc}
 800694c:	08028658 	.word	0x08028658

08006950 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8006950:	f7fd bd9b 	b.w	800448a <_ZN15Screen1ViewBase11setupScreenEv>

08006954 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {}
 8006954:	4770      	bx	lr

08006956 <_ZThn4_N16Screen2PresenterD1Ev>:
 8006956:	3804      	subs	r0, #4
 8006958:	4770      	bx	lr

0800695a <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 800695a:	4770      	bx	lr

0800695c <_ZN16Screen2PresenterD0Ev>:
 800695c:	b510      	push	{r4, lr}
 800695e:	4604      	mov	r4, r0
 8006960:	2110      	movs	r1, #16
 8006962:	f01d fe5a 	bl	802461a <_ZdlPvj>
 8006966:	4620      	mov	r0, r4
 8006968:	bd10      	pop	{r4, pc}

0800696a <_ZThn4_N16Screen2PresenterD0Ev>:
 800696a:	f1a0 0004 	sub.w	r0, r0, #4
 800696e:	e7f5      	b.n	800695c <_ZN16Screen2PresenterD0Ev>

08006970 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8006970:	2200      	movs	r2, #0
    : view(v)
 8006972:	60c1      	str	r1, [r0, #12]
 8006974:	6082      	str	r2, [r0, #8]
 8006976:	4a02      	ldr	r2, [pc, #8]	@ (8006980 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8006978:	6002      	str	r2, [r0, #0]
 800697a:	3218      	adds	r2, #24
 800697c:	6042      	str	r2, [r0, #4]
}
 800697e:	4770      	bx	lr
 8006980:	08028690 	.word	0x08028690

08006984 <_ZN16Screen2Presenter15selectMatrizLedEiii>:

}


void Screen2Presenter:: selectMatrizLed(int matriz, int row, int column)
{
 8006984:	b570      	push	{r4, r5, r6, lr}
//	uint8_t num_mx = (uint8_t)matriz;
//	uint8_t fila = (uint8_t)row;
//	uint8_t columna = (uint8_t)column;
//	MatrizLedSelect(num_mx, fila, columna);
    // Avanzamos una posición por cada toque
    current_bit++;
 8006986:	4e12      	ldr	r6, [pc, #72]	@ (80069d0 <_ZN16Screen2Presenter15selectMatrizLedEiii+0x4c>)
 8006988:	4d12      	ldr	r5, [pc, #72]	@ (80069d4 <_ZN16Screen2Presenter15selectMatrizLedEiii+0x50>)
 800698a:	7833      	ldrb	r3, [r6, #0]
 800698c:	4c12      	ldr	r4, [pc, #72]	@ (80069d8 <_ZN16Screen2Presenter15selectMatrizLedEiii+0x54>)
 800698e:	3301      	adds	r3, #1
 8006990:	b2db      	uxtb	r3, r3
    if (current_bit > 7) {
 8006992:	2b07      	cmp	r3, #7
 8006994:	d809      	bhi.n	80069aa <_ZN16Screen2Presenter15selectMatrizLedEiii+0x26>
    current_bit++;
 8006996:	7033      	strb	r3, [r6, #0]
            }
        }
    }

    // Apagar todo primero
    MAX7219_ClearAll();
 8006998:	f7f9 ff08 	bl	80007ac <MAX7219_ClearAll>

    // Prender el nuevo LED
    MatrizLedSelect(current_matrix, current_row, current_bit);
 800699c:	7832      	ldrb	r2, [r6, #0]
 800699e:	7829      	ldrb	r1, [r5, #0]
 80069a0:	7820      	ldrb	r0, [r4, #0]
    //MAX7219_LightSingleLed(current_matrix, current_row, current_bit);
}
 80069a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MatrizLedSelect(current_matrix, current_row, current_bit);
 80069a6:	f7f9 bebd 	b.w	8000724 <MatrizLedSelect>
        current_row++;
 80069aa:	782b      	ldrb	r3, [r5, #0]
        current_bit = 0;
 80069ac:	2200      	movs	r2, #0
        current_row++;
 80069ae:	3301      	adds	r3, #1
        current_bit = 0;
 80069b0:	7032      	strb	r2, [r6, #0]
        current_row++;
 80069b2:	b2db      	uxtb	r3, r3
        if (current_row > 8) {
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d801      	bhi.n	80069bc <_ZN16Screen2Presenter15selectMatrizLedEiii+0x38>
        current_row++;
 80069b8:	702b      	strb	r3, [r5, #0]
 80069ba:	e7ed      	b.n	8006998 <_ZN16Screen2Presenter15selectMatrizLedEiii+0x14>
            current_row = 1;
 80069bc:	2301      	movs	r3, #1
 80069be:	702b      	strb	r3, [r5, #0]
            current_matrix++;
 80069c0:	7823      	ldrb	r3, [r4, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	b2db      	uxtb	r3, r3
            if (current_matrix >= NUM_MATRICES) {
 80069c6:	2b03      	cmp	r3, #3
            current_matrix++;
 80069c8:	bf94      	ite	ls
 80069ca:	7023      	strbls	r3, [r4, #0]
                current_matrix = 0;
 80069cc:	7022      	strbhi	r2, [r4, #0]
 80069ce:	e7e3      	b.n	8006998 <_ZN16Screen2Presenter15selectMatrizLedEiii+0x14>
 80069d0:	2400037c 	.word	0x2400037c
 80069d4:	24000004 	.word	0x24000004
 80069d8:	2400037d 	.word	0x2400037d

080069dc <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 80069dc:	4770      	bx	lr
	...

080069e0 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80069e0:	4b03      	ldr	r3, [pc, #12]	@ (80069f0 <_ZN11Screen2ViewD1Ev+0x10>)
 80069e2:	b510      	push	{r4, lr}
 80069e4:	4604      	mov	r4, r0
 80069e6:	6003      	str	r3, [r0, #0]
 80069e8:	f7fd fed3 	bl	8004792 <_ZN15Screen2ViewBaseD1Ev>
 80069ec:	4620      	mov	r0, r4
 80069ee:	bd10      	pop	{r4, pc}
 80069f0:	080286b8 	.word	0x080286b8

080069f4 <_ZN11Screen2ViewD0Ev>:
 80069f4:	b510      	push	{r4, lr}
 80069f6:	4604      	mov	r4, r0
 80069f8:	f7ff fff2 	bl	80069e0 <_ZN11Screen2ViewD1Ev>
 80069fc:	f241 3104 	movw	r1, #4868	@ 0x1304
 8006a00:	4620      	mov	r0, r4
 8006a02:	f01d fe0a 	bl	802461a <_ZdlPvj>
 8006a06:	4620      	mov	r0, r4
 8006a08:	bd10      	pop	{r4, pc}
	...

08006a0c <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	4604      	mov	r4, r0
 8006a10:	f7fe f862 	bl	8004ad8 <_ZN15Screen2ViewBaseC1Ev>
 8006a14:	4b01      	ldr	r3, [pc, #4]	@ (8006a1c <_ZN11Screen2ViewC1Ev+0x10>)
}
 8006a16:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8006a18:	6023      	str	r3, [r4, #0]
}
 8006a1a:	bd10      	pop	{r4, pc}
 8006a1c:	080286b8 	.word	0x080286b8

08006a20 <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 8006a20:	f7fd beb8 	b.w	8004794 <_ZN15Screen2ViewBase11setupScreenEv>

08006a24 <_ZN22WaitingScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~WaitingScreenPresenter() {}
 8006a24:	4770      	bx	lr

08006a26 <_ZThn4_N22WaitingScreenPresenterD1Ev>:
 8006a26:	3804      	subs	r0, #4
 8006a28:	4770      	bx	lr

08006a2a <_ZN22WaitingScreenPresenter10deactivateEv>:
}

void WaitingScreenPresenter::activate()
{

}
 8006a2a:	4770      	bx	lr

08006a2c <_ZN22WaitingScreenPresenterD0Ev>:
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	4604      	mov	r4, r0
 8006a30:	2110      	movs	r1, #16
 8006a32:	f01d fdf2 	bl	802461a <_ZdlPvj>
 8006a36:	4620      	mov	r0, r4
 8006a38:	bd10      	pop	{r4, pc}

08006a3a <_ZThn4_N22WaitingScreenPresenterD0Ev>:
 8006a3a:	f1a0 0004 	sub.w	r0, r0, #4
 8006a3e:	e7f5      	b.n	8006a2c <_ZN22WaitingScreenPresenterD0Ev>

08006a40 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView>:
 8006a40:	2200      	movs	r2, #0
    : view(v)
 8006a42:	60c1      	str	r1, [r0, #12]
 8006a44:	6082      	str	r2, [r0, #8]
 8006a46:	4a02      	ldr	r2, [pc, #8]	@ (8006a50 <_ZN22WaitingScreenPresenterC1ER17WaitingScreenView+0x10>)
 8006a48:	6002      	str	r2, [r0, #0]
 8006a4a:	3218      	adds	r2, #24
 8006a4c:	6042      	str	r2, [r0, #4]
}
 8006a4e:	4770      	bx	lr
 8006a50:	080286f0 	.word	0x080286f0

08006a54 <_ZN17WaitingScreenView14tearDownScreenEv>:
}

void WaitingScreenView::tearDownScreen()
{
    WaitingScreenViewBase::tearDownScreen();
}
 8006a54:	4770      	bx	lr
	...

08006a58 <_ZN17WaitingScreenViewD1Ev>:

class WaitingScreenView : public WaitingScreenViewBase
{
public:
    WaitingScreenView();
    virtual ~WaitingScreenView() {}
 8006a58:	4b03      	ldr	r3, [pc, #12]	@ (8006a68 <_ZN17WaitingScreenViewD1Ev+0x10>)
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	6003      	str	r3, [r0, #0]
 8006a60:	f7ff fd9c 	bl	800659c <_ZN21WaitingScreenViewBaseD1Ev>
 8006a64:	4620      	mov	r0, r4
 8006a66:	bd10      	pop	{r4, pc}
 8006a68:	08028718 	.word	0x08028718

08006a6c <_ZN17WaitingScreenViewD0Ev>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4604      	mov	r4, r0
 8006a70:	f7ff fff2 	bl	8006a58 <_ZN17WaitingScreenViewD1Ev>
 8006a74:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f01d fdce 	bl	802461a <_ZdlPvj>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	bd10      	pop	{r4, pc}
	...

08006a84 <_ZN17WaitingScreenViewC1Ev>:
WaitingScreenView::WaitingScreenView()
 8006a84:	b510      	push	{r4, lr}
 8006a86:	4604      	mov	r4, r0
 8006a88:	f7ff fdc0 	bl	800660c <_ZN21WaitingScreenViewBaseC1Ev>
 8006a8c:	4b01      	ldr	r3, [pc, #4]	@ (8006a94 <_ZN17WaitingScreenViewC1Ev+0x10>)
}
 8006a8e:	4620      	mov	r0, r4
WaitingScreenView::WaitingScreenView()
 8006a90:	6023      	str	r3, [r4, #0]
}
 8006a92:	bd10      	pop	{r4, pc}
 8006a94:	08028718 	.word	0x08028718

08006a98 <_ZN17WaitingScreenView11setupScreenEv>:
    WaitingScreenViewBase::setupScreen();
 8006a98:	f7ff bd81 	b.w	800659e <_ZN21WaitingScreenViewBase11setupScreenEv>

08006a9c <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8006a9c:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8006a9e:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8006aa2:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8006aa4:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8006aaa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8006aae:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8006ab2:	4770      	bx	lr

08006ab4 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8006ab4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8006ab8:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8006aba:	bf04      	itt	eq
 8006abc:	2300      	moveq	r3, #0
 8006abe:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	4770      	bx	lr

08006ac6 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	4770      	bx	lr

08006aca <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006aca:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006acc:	6904      	ldr	r4, [r0, #16]
 8006ace:	8900      	ldrh	r0, [r0, #8]
 8006ad0:	46a4      	mov	ip, r4
}
 8006ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006ad6:	4760      	bx	ip

08006ad8 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8006ad8:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006ada:	68c4      	ldr	r4, [r0, #12]
 8006adc:	8900      	ldrh	r0, [r0, #8]
 8006ade:	46a4      	mov	ip, r4
}
 8006ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006ae4:	4760      	bx	ip

08006ae6 <FT6X06_GestureConfig>:
{
 8006ae6:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8006ae8:	f100 0518 	add.w	r5, r0, #24
{
 8006aec:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8006aee:	7809      	ldrb	r1, [r1, #0]
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 f911 	bl	8006d18 <ft6x06_radian_value>
 8006af6:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8006af8:	7931      	ldrb	r1, [r6, #4]
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f918 	bl	8006d30 <ft6x06_offset_left_right>
 8006b00:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8006b02:	7a31      	ldrb	r1, [r6, #8]
 8006b04:	4628      	mov	r0, r5
 8006b06:	f000 f91f 	bl	8006d48 <ft6x06_offset_up_down>
 8006b0a:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8006b0c:	7b31      	ldrb	r1, [r6, #12]
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f926 	bl	8006d60 <ft6x06_disatnce_left_right>
 8006b14:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8006b16:	7c31      	ldrb	r1, [r6, #16]
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 f92d 	bl	8006d78 <ft6x06_distance_up_down>
 8006b1e:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8006b20:	7d31      	ldrb	r1, [r6, #20]
 8006b22:	4628      	mov	r0, r5
 8006b24:	f000 f934 	bl	8006d90 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8006b28:	42c4      	cmn	r4, r0
}
 8006b2a:	bf14      	ite	ne
 8006b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8006b30:	2000      	moveq	r0, #0
 8006b32:	bd70      	pop	{r4, r5, r6, pc}

08006b34 <FT6X06_ReadID>:
{
 8006b34:	b513      	push	{r0, r1, r4, lr}
 8006b36:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8006b38:	3018      	adds	r0, #24
 8006b3a:	f10d 0107 	add.w	r1, sp, #7
 8006b3e:	f000 f93f 	bl	8006dc0 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8006b42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b46:	6023      	str	r3, [r4, #0]
}
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd10      	pop	{r4, pc}

08006b4c <FT6X06_GetState>:
{
 8006b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8006b4e:	f100 0518 	add.w	r5, r0, #24
{
 8006b52:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8006b54:	a901      	add	r1, sp, #4
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 f8d1 	bl	8006cfe <ft6x06_td_status>
 8006b5c:	bb08      	cbnz	r0, 8006ba2 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8006b5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	bf98      	it	ls
 8006b66:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8006b68:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8006b6a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8006b6c:	2103      	movs	r1, #3
 8006b6e:	4628      	mov	r0, r5
 8006b70:	eb0d 0203 	add.w	r2, sp, r3
 8006b74:	f000 f8b0 	bl	8006cd8 <ft6x06_read_reg>
 8006b78:	b9b0      	cbnz	r0, 8006ba8 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8006b7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006b88:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8006b8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8006b8e:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8006b90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60a3      	str	r3, [r4, #8]
}
 8006b9e:	b003      	add	sp, #12
 8006ba0:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8006ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba6:	e7df      	b.n	8006b68 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006bac:	e7f7      	b.n	8006b9e <FT6X06_GetState+0x52>

08006bae <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8006bae:	3018      	adds	r0, #24
 8006bb0:	f000 b8a0 	b.w	8006cf4 <ft6x06_gest_id>

08006bb4 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	3018      	adds	r0, #24
 8006bb8:	f000 b8f6 	b.w	8006da8 <ft6x06_g_mode>

08006bbc <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	3018      	adds	r0, #24
 8006bc0:	f000 b8f2 	b.w	8006da8 <ft6x06_g_mode>

08006bc4 <FT6X06_Init>:
{
 8006bc4:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8006bc6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8006bca:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8006bcc:	b96b      	cbnz	r3, 8006bea <FT6X06_Init+0x26>
    pObj->IO.Init();
 8006bce:	6803      	ldr	r3, [r0, #0]
 8006bd0:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff fff2 	bl	8006bbc <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8006bd8:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8006bda:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8006bde:	bf18      	it	ne
 8006be0:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8006be2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8006be6:	4240      	negs	r0, r0
}
 8006be8:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8006bea:	2000      	movs	r0, #0
  return ret;
 8006bec:	e7fc      	b.n	8006be8 <FT6X06_Init+0x24>

08006bee <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8006bee:	2000      	movs	r0, #0
 8006bf0:	4770      	bx	lr

08006bf2 <FT6X06_GetMultiTouchState>:
{
 8006bf2:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8006bf4:	f100 0518 	add.w	r5, r0, #24
{
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	a901      	add	r1, sp, #4
 8006c00:	f000 f87d 	bl	8006cfe <ft6x06_td_status>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d145      	bne.n	8006c94 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8006c08:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	bf98      	it	ls
 8006c10:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8006c12:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8006c14:	230c      	movs	r3, #12
 8006c16:	aa01      	add	r2, sp, #4
 8006c18:	2103      	movs	r1, #3
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 f85c 	bl	8006cd8 <ft6x06_read_reg>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d13a      	bne.n	8006c9a <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8006c24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006c28:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8006c2c:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8006c2e:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8006c30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8006c34:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8006c36:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8006c38:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006c3c:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8006c40:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8006c42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c4c:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006c4e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8006c52:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8006c54:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006c58:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8006c5a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8006c5e:	091b      	lsrs	r3, r3, #4
 8006c60:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006c62:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8006c64:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006c66:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8006c6a:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006c6c:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8006c6e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8006c72:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8006c74:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c7e:	430b      	orrs	r3, r1
 8006c80:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8006c82:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006c86:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8006c88:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006c8c:	091b      	lsrs	r3, r3, #4
 8006c8e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8006c90:	b005      	add	sp, #20
 8006c92:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
 8006c98:	e7bb      	b.n	8006c12 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8006c9a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8006c9e:	e7f7      	b.n	8006c90 <FT6X06_GetMultiTouchState+0x9e>

08006ca0 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8006ca0:	b190      	cbz	r0, 8006cc8 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8006ca2:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8006ca4:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006ca6:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8006ca8:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8006caa:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8006cac:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006cae:	68ca      	ldr	r2, [r1, #12]
 8006cb0:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006cb2:	690a      	ldr	r2, [r1, #16]
 8006cb4:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8006cb6:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8006cb8:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8006cba:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8006cbc:	4a04      	ldr	r2, [pc, #16]	@ (8006cd0 <FT6X06_RegisterBusIO+0x30>)
 8006cbe:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8006cc0:	4a04      	ldr	r2, [pc, #16]	@ (8006cd4 <FT6X06_RegisterBusIO+0x34>)
 8006cc2:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8006cc4:	b103      	cbz	r3, 8006cc8 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8006cc6:	4718      	bx	r3
}
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	08006acb 	.word	0x08006acb
 8006cd4:	08006ad9 	.word	0x08006ad9

08006cd8 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8006cd8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006cda:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8006cde:	46a4      	mov	ip, r4
}
 8006ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8006ce4:	4760      	bx	ip

08006ce6 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8006ce6:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8006ce8:	6804      	ldr	r4, [r0, #0]
 8006cea:	6880      	ldr	r0, [r0, #8]
 8006cec:	46a4      	mov	ip, r4
}
 8006cee:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8006cf2:	4760      	bx	ip

08006cf4 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8006cf4:	2301      	movs	r3, #1
{
 8006cf6:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	f7ff bfed 	b.w	8006cd8 <ft6x06_read_reg>

08006cfe <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8006cfe:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8006d00:	460a      	mov	r2, r1
{
 8006d02:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8006d04:	2301      	movs	r3, #1
 8006d06:	2102      	movs	r1, #2
 8006d08:	f7ff ffe6 	bl	8006cd8 <ft6x06_read_reg>
  
  if(ret == 0)
 8006d0c:	b918      	cbnz	r0, 8006d16 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8006d0e:	7823      	ldrb	r3, [r4, #0]
 8006d10:	f003 030f 	and.w	r3, r3, #15
 8006d14:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8006d16:	bd10      	pop	{r4, pc}

08006d18 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006d18:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8006d1a:	2301      	movs	r3, #1
{
 8006d1c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8006d20:	f10d 0207 	add.w	r2, sp, #7
 8006d24:	2191      	movs	r1, #145	@ 0x91
 8006d26:	f7ff ffde 	bl	8006ce6 <ft6x06_write_reg>
}
 8006d2a:	b003      	add	sp, #12
 8006d2c:	f85d fb04 	ldr.w	pc, [sp], #4

08006d30 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006d30:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8006d32:	2301      	movs	r3, #1
{
 8006d34:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8006d38:	f10d 0207 	add.w	r2, sp, #7
 8006d3c:	2192      	movs	r1, #146	@ 0x92
 8006d3e:	f7ff ffd2 	bl	8006ce6 <ft6x06_write_reg>
}
 8006d42:	b003      	add	sp, #12
 8006d44:	f85d fb04 	ldr.w	pc, [sp], #4

08006d48 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006d48:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8006d4a:	2301      	movs	r3, #1
{
 8006d4c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8006d50:	f10d 0207 	add.w	r2, sp, #7
 8006d54:	2193      	movs	r1, #147	@ 0x93
 8006d56:	f7ff ffc6 	bl	8006ce6 <ft6x06_write_reg>
}
 8006d5a:	b003      	add	sp, #12
 8006d5c:	f85d fb04 	ldr.w	pc, [sp], #4

08006d60 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006d60:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8006d62:	2301      	movs	r3, #1
{
 8006d64:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8006d68:	f10d 0207 	add.w	r2, sp, #7
 8006d6c:	2194      	movs	r1, #148	@ 0x94
 8006d6e:	f7ff ffba 	bl	8006ce6 <ft6x06_write_reg>
}
 8006d72:	b003      	add	sp, #12
 8006d74:	f85d fb04 	ldr.w	pc, [sp], #4

08006d78 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006d78:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8006d7a:	2301      	movs	r3, #1
{
 8006d7c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8006d80:	f10d 0207 	add.w	r2, sp, #7
 8006d84:	2195      	movs	r1, #149	@ 0x95
 8006d86:	f7ff ffae 	bl	8006ce6 <ft6x06_write_reg>
}
 8006d8a:	b003      	add	sp, #12
 8006d8c:	f85d fb04 	ldr.w	pc, [sp], #4

08006d90 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006d90:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8006d92:	2301      	movs	r3, #1
{
 8006d94:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8006d98:	f10d 0207 	add.w	r2, sp, #7
 8006d9c:	2196      	movs	r1, #150	@ 0x96
 8006d9e:	f7ff ffa2 	bl	8006ce6 <ft6x06_write_reg>
}
 8006da2:	b003      	add	sp, #12
 8006da4:	f85d fb04 	ldr.w	pc, [sp], #4

08006da8 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8006da8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8006daa:	2301      	movs	r3, #1
{
 8006dac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8006db0:	f10d 0207 	add.w	r2, sp, #7
 8006db4:	21a4      	movs	r1, #164	@ 0xa4
 8006db6:	f7ff ff96 	bl	8006ce6 <ft6x06_write_reg>
}
 8006dba:	b003      	add	sp, #12
 8006dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08006dc0 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8006dc0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	21a8      	movs	r1, #168	@ 0xa8
 8006dc6:	f7ff bf87 	b.w	8006cd8 <ft6x06_read_reg>
	...

08006dcc <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8006dcc:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8006dce:	2201      	movs	r2, #1
 8006dd0:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8006dd2:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8006dd6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006dd8:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8006dda:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8006ddc:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8006dde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006de2:	f006 f9d9 	bl	800d198 <HAL_SDRAM_SendCommand>
 8006de6:	3800      	subs	r0, #0
 8006de8:	bf18      	it	ne
 8006dea:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006dec:	4240      	negs	r0, r0
 8006dee:	bd08      	pop	{r3, pc}
 8006df0:	2400c410 	.word	0x2400c410

08006df4 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8006df4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8006df6:	2202      	movs	r2, #2
 8006df8:	4b08      	ldr	r3, [pc, #32]	@ (8006e1c <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8006dfa:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8006dfe:	2101      	movs	r1, #1
 8006e00:	2200      	movs	r2, #0
 8006e02:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8006e06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	f006 f9c4 	bl	800d198 <HAL_SDRAM_SendCommand>
 8006e10:	3800      	subs	r0, #0
 8006e12:	bf18      	it	ne
 8006e14:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006e16:	4240      	negs	r0, r0
 8006e18:	bd08      	pop	{r3, pc}
 8006e1a:	bf00      	nop
 8006e1c:	2400c410 	.word	0x2400c410

08006e20 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8006e20:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8006e22:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8006e26:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8006e28:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8006e2a:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8006e2c:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8006e2e:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8006e30:	6991      	ldr	r1, [r2, #24]
 8006e32:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8006e34:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8006e36:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8006e38:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8006e3a:	4907      	ldr	r1, [pc, #28]	@ (8006e58 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8006e3c:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8006e3e:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8006e40:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8006e42:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8006e46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e4a:	f006 f9a5 	bl	800d198 <HAL_SDRAM_SendCommand>
 8006e4e:	3800      	subs	r0, #0
 8006e50:	bf18      	it	ne
 8006e52:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006e54:	4240      	negs	r0, r0
 8006e56:	bd10      	pop	{r4, pc}
 8006e58:	2400c410 	.word	0x2400c410

08006e5c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8006e5c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8006e5e:	4b08      	ldr	r3, [pc, #32]	@ (8006e80 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8006e60:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8006e64:	2108      	movs	r1, #8
 8006e66:	2200      	movs	r2, #0
 8006e68:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8006e6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e70:	4619      	mov	r1, r3
 8006e72:	f006 f991 	bl	800d198 <HAL_SDRAM_SendCommand>
 8006e76:	3800      	subs	r0, #0
 8006e78:	bf18      	it	ne
 8006e7a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006e7c:	4240      	negs	r0, r0
 8006e7e:	bd08      	pop	{r3, pc}
 8006e80:	2400c410 	.word	0x2400c410

08006e84 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8006e84:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8006e86:	f006 f9a6 	bl	800d1d6 <HAL_SDRAM_ProgramRefreshRate>
 8006e8a:	3800      	subs	r0, #0
 8006e8c:	bf18      	it	ne
 8006e8e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8006e90:	4240      	negs	r0, r0
 8006e92:	bd08      	pop	{r3, pc}

08006e94 <IS42S32800J_Init>:
{
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8006e98:	6809      	ldr	r1, [r1, #0]
{
 8006e9a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8006e9c:	f7ff ff96 	bl	8006dcc <IS42S32800J_ClockEnable>
 8006ea0:	b110      	cbz	r0, 8006ea8 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8006ea8:	f001 fc7c 	bl	80087a4 <HAL_GetTick>
 8006eac:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8006eae:	f001 fc79 	bl	80087a4 <HAL_GetTick>
 8006eb2:	4286      	cmp	r6, r0
 8006eb4:	d0fb      	beq.n	8006eae <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8006eb6:	6821      	ldr	r1, [r4, #0]
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f7ff ff9b 	bl	8006df4 <IS42S32800J_Precharge>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d1ef      	bne.n	8006ea2 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	e9d4 1200 	ldrd	r1, r2, [r4]
 8006ec8:	f7ff ffc8 	bl	8006e5c <IS42S32800J_RefreshMode>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d1e8      	bne.n	8006ea2 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7ff ffa4 	bl	8006e20 <IS42S32800J_ModeRegConfig>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d1e2      	bne.n	8006ea2 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8006edc:	68a1      	ldr	r1, [r4, #8]
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f7ff ffd0 	bl	8006e84 <IS42S32800J_RefreshRate>
 8006ee4:	3800      	subs	r0, #0
 8006ee6:	bf18      	it	ne
 8006ee8:	2001      	movne	r0, #1
 8006eea:	4240      	negs	r0, r0
  return ret;
 8006eec:	e7db      	b.n	8006ea6 <IS42S32800J_Init+0x12>

08006eee <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8006eee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006ef2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8006ef6:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8006efa:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8006efe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006f02:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8006f06:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006f0a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	4770      	bx	lr

08006f10 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8006f10:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006f12:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8006f16:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006f18:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006f1c:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8006f1e:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006f20:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8006f22:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8006f24:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006f26:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8006f28:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f2a:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006f2c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8006f2e:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006f30:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8006f32:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f34:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006f36:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006f3a:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8006f3e:	2310      	movs	r3, #16
 8006f40:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006f42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006f46:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8006f48:	f240 1301 	movw	r3, #257	@ 0x101
 8006f4c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006f52:	f004 fd28 	bl	800b9a6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8006f56:	2800      	cmp	r0, #0

}
 8006f58:	bf14      	ite	ne
 8006f5a:	f06f 0004 	mvnne.w	r0, #4
 8006f5e:	2000      	moveq	r0, #0
 8006f60:	b015      	add	sp, #84	@ 0x54
 8006f62:	f85d fb04 	ldr.w	pc, [sp], #4

08006f66 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006f66:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f68:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8006f6c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006f6e:	bf08      	it	eq
 8006f70:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8006f74:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006f76:	bf18      	it	ne
 8006f78:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8006f7c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f7e:	a906      	add	r1, sp, #24
{
 8006f80:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006f82:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8006f84:	2306      	movs	r3, #6
 8006f86:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006f88:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006f8a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8006f8e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8006f90:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006f92:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006f94:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f98:	f004 fc04 	bl	800b7a4 <HAL_QSPI_Command>
 8006f9c:	bb20      	cbnz	r0, 8006fe8 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8006f9e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8006fa2:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006fa4:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006fa6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006faa:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fac:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8006fae:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8006fb2:	f04f 0310 	mov.w	r3, #16
 8006fb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006fba:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fbe:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006fc0:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006fc4:	bf14      	ite	ne
 8006fc6:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8006fca:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fce:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006fd0:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006fd6:	f004 fce6 	bl	800b9a6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	bf14      	ite	ne
 8006fde:	f06f 0004 	mvnne.w	r0, #4
 8006fe2:	2000      	moveq	r0, #0
}
 8006fe4:	b015      	add	sp, #84	@ 0x54
 8006fe6:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8006fe8:	f06f 0001 	mvn.w	r0, #1
 8006fec:	e7fa      	b.n	8006fe4 <MT25TL01G_WriteEnable+0x7e>

08006fee <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006fee:	2903      	cmp	r1, #3
{
 8006ff0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006ff2:	bf08      	it	eq
 8006ff4:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8006ff8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006ffa:	bf18      	it	ne
 8006ffc:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007004:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8007006:	23b7      	movs	r3, #183	@ 0xb7
 8007008:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800700a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800700c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007010:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8007012:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007014:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007016:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800701a:	f7ff ffa4 	bl	8006f66 <MT25TL01G_WriteEnable>
 800701e:	b118      	cbz	r0, 8007028 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8007020:	f06f 0001 	mvn.w	r0, #1
}
 8007024:	b00f      	add	sp, #60	@ 0x3c
 8007026:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800702c:	4669      	mov	r1, sp
 800702e:	4620      	mov	r0, r4
 8007030:	f004 fbb8 	bl	800b7a4 <HAL_QSPI_Command>
 8007034:	2800      	cmp	r0, #0
 8007036:	d1f3      	bne.n	8007020 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8007038:	4629      	mov	r1, r5
 800703a:	4620      	mov	r0, r4
 800703c:	f7ff ff68 	bl	8006f10 <MT25TL01G_AutoPollingMemReady>
 8007040:	2800      	cmp	r0, #0
 8007042:	d0ef      	beq.n	8007024 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8007044:	e7ec      	b.n	8007020 <MT25TL01G_Enter4BytesAddressMode+0x32>

08007046 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8007046:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007048:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 800704c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800704e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007052:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8007054:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007056:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8007058:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800705a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800705c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007060:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8007062:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007064:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007066:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800706a:	f004 fb9b 	bl	800b7a4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800706e:	2800      	cmp	r0, #0
}
 8007070:	bf14      	ite	ne
 8007072:	f06f 0001 	mvnne.w	r0, #1
 8007076:	2000      	moveq	r0, #0
 8007078:	b00f      	add	sp, #60	@ 0x3c
 800707a:	f85d fb04 	ldr.w	pc, [sp], #4

0800707e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800707e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007080:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8007084:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007086:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800708a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800708c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800708e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8007090:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007092:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007094:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007098:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800709a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800709c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800709e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070a2:	f004 fb7f 	bl	800b7a4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80070a6:	2800      	cmp	r0, #0
}
 80070a8:	bf14      	ite	ne
 80070aa:	f06f 0001 	mvnne.w	r0, #1
 80070ae:	2000      	moveq	r0, #0
 80070b0:	b00f      	add	sp, #60	@ 0x3c
 80070b2:	f85d fb04 	ldr.w	pc, [sp], #4

080070b6 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80070b6:	b500      	push	{lr}
 80070b8:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80070ba:	2903      	cmp	r1, #3
 80070bc:	d80e      	bhi.n	80070dc <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 80070be:	e8df f001 	tbb	[pc, r1]
 80070c2:	2902      	.short	0x2902
 80070c4:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80070c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80070ca:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80070cc:	230e      	movs	r3, #14
 80070ce:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80070d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070d4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80070d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80070da:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80070dc:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80070de:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80070e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80070e6:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80070e8:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80070ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80070ee:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80070f0:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80070f2:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80070f6:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80070f8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80070fa:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80070fc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8007100:	f004 fca2 	bl	800ba48 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8007104:	2800      	cmp	r0, #0
}
 8007106:	bf14      	ite	ne
 8007108:	f06f 0005 	mvnne.w	r0, #5
 800710c:	2000      	moveq	r0, #0
 800710e:	b011      	add	sp, #68	@ 0x44
 8007110:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007118:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800711a:	233d      	movs	r3, #61	@ 0x3d
 800711c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800711e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007122:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8007124:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007128:	e7d7      	b.n	80070da <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800712a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800712e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8007130:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8007132:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8007134:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007138:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800713a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800713e:	e7cc      	b.n	80070da <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007140:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007144:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8007146:	23ed      	movs	r3, #237	@ 0xed
 8007148:	e7f3      	b.n	8007132 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800714a <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800714a:	b500      	push	{lr}
 800714c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800714e:	2903      	cmp	r1, #3
 8007150:	d80e      	bhi.n	8007170 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8007152:	e8df f001 	tbb	[pc, r1]
 8007156:	2502      	.short	0x2502
 8007158:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800715a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800715e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8007160:	230c      	movs	r3, #12
 8007162:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8007164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007168:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800716a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800716e:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8007170:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8007172:	466a      	mov	r2, sp
 8007174:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8007176:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8007178:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800717c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800717e:	2300      	movs	r3, #0
 8007180:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007182:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007184:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8007188:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800718c:	f004 fc5c 	bl	800ba48 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8007190:	2800      	cmp	r0, #0
}
 8007192:	bf14      	ite	ne
 8007194:	f06f 0005 	mvnne.w	r0, #5
 8007198:	2000      	moveq	r0, #0
 800719a:	b011      	add	sp, #68	@ 0x44
 800719c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80071a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071a4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80071a6:	23bc      	movs	r3, #188	@ 0xbc
 80071a8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80071aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80071ae:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80071b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071b4:	e7db      	b.n	800716e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80071b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071ba:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80071bc:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80071be:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80071c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80071c4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80071c6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80071ca:	e7d0      	b.n	800716e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80071cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80071d0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80071d2:	23eb      	movs	r3, #235	@ 0xeb
 80071d4:	e7f3      	b.n	80071be <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080071d6 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80071d6:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071d8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80071dc:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80071de:	bf18      	it	ne
 80071e0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80071e4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80071e6:	bf08      	it	eq
 80071e8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80071ec:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80071ee:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80071f0:	2366      	movs	r3, #102	@ 0x66
 80071f2:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80071f4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80071f6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80071fa:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80071fc:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80071fe:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007200:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007204:	f004 face 	bl	800b7a4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8007208:	2800      	cmp	r0, #0
}
 800720a:	bf14      	ite	ne
 800720c:	f06f 0001 	mvnne.w	r0, #1
 8007210:	2000      	moveq	r0, #0
 8007212:	b00f      	add	sp, #60	@ 0x3c
 8007214:	f85d fb04 	ldr.w	pc, [sp], #4

08007218 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007218:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800721a:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800721e:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007220:	bf18      	it	ne
 8007222:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8007226:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007228:	bf08      	it	eq
 800722a:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800722e:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007230:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8007232:	2399      	movs	r3, #153	@ 0x99
 8007234:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007236:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007238:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800723c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800723e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007240:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007242:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007246:	f004 faad 	bl	800b7a4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800724a:	2800      	cmp	r0, #0
}
 800724c:	bf14      	ite	ne
 800724e:	f06f 0001 	mvnne.w	r0, #1
 8007252:	2000      	moveq	r0, #0
 8007254:	b00f      	add	sp, #60	@ 0x3c
 8007256:	f85d fb04 	ldr.w	pc, [sp], #4

0800725a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800725a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800725c:	6884      	ldr	r4, [r0, #8]
 800725e:	8800      	ldrh	r0, [r0, #0]
 8007260:	46a4      	mov	ip, r4
}
 8007262:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007266:	4760      	bx	ip

08007268 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007268:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800726a:	6844      	ldr	r4, [r0, #4]
 800726c:	8800      	ldrh	r0, [r0, #0]
 800726e:	46a4      	mov	ip, r4
}
 8007270:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007274:	4760      	bx	ip

08007276 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8007276:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8007278:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800727a:	4604      	mov	r4, r0
 800727c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 800727e:	4798      	blx	r3
 8007280:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	4798      	blx	r3
 8007286:	1b83      	subs	r3, r0, r6
 8007288:	42ab      	cmp	r3, r5
 800728a:	d3fa      	bcc.n	8007282 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 800728c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007290 <OTM8009A_Init>:
{
 8007290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007294:	2300      	movs	r3, #0
 8007296:	f100 0510 	add.w	r5, r0, #16
{
 800729a:	4607      	mov	r7, r0
 800729c:	460e      	mov	r6, r1
 800729e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80072a0:	4619      	mov	r1, r3
 80072a2:	4ade      	ldr	r2, [pc, #888]	@ (800761c <OTM8009A_Init+0x38c>)
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 fb99 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80072aa:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80072ac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80072ae:	4adc      	ldr	r2, [pc, #880]	@ (8007620 <OTM8009A_Init+0x390>)
 80072b0:	21ff      	movs	r1, #255	@ 0xff
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 fb92 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80072b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80072ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80072bc:	4ad9      	ldr	r2, [pc, #868]	@ (8007624 <OTM8009A_Init+0x394>)
 80072be:	4619      	mov	r1, r3
 80072c0:	4628      	mov	r0, r5
 80072c2:	f000 fb8b 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80072c6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80072c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80072ca:	4ad7      	ldr	r2, [pc, #860]	@ (8007628 <OTM8009A_Init+0x398>)
 80072cc:	21ff      	movs	r1, #255	@ 0xff
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 fb84 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80072d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80072d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80072d8:	4ad2      	ldr	r2, [pc, #840]	@ (8007624 <OTM8009A_Init+0x394>)
 80072da:	4619      	mov	r1, r3
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 fb7d 	bl	80079dc <otm8009a_write_reg>
 80072e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80072e4:	2300      	movs	r3, #0
 80072e6:	4ad1      	ldr	r2, [pc, #836]	@ (800762c <OTM8009A_Init+0x39c>)
 80072e8:	21c4      	movs	r1, #196	@ 0xc4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 fb76 	bl	80079dc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80072f0:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80072f2:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff ffbe 	bl	8007276 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80072fa:	2300      	movs	r3, #0
 80072fc:	4acc      	ldr	r2, [pc, #816]	@ (8007630 <OTM8009A_Init+0x3a0>)
 80072fe:	4628      	mov	r0, r5
 8007300:	4619      	mov	r1, r3
 8007302:	f000 fb6b 	bl	80079dc <otm8009a_write_reg>
 8007306:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8007308:	2300      	movs	r3, #0
 800730a:	4aca      	ldr	r2, [pc, #808]	@ (8007634 <OTM8009A_Init+0x3a4>)
 800730c:	21c4      	movs	r1, #196	@ 0xc4
 800730e:	4628      	mov	r0, r5
 8007310:	f000 fb64 	bl	80079dc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8007314:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8007316:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8007318:	4638      	mov	r0, r7
 800731a:	f7ff ffac 	bl	8007276 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800731e:	2300      	movs	r3, #0
 8007320:	4ac5      	ldr	r2, [pc, #788]	@ (8007638 <OTM8009A_Init+0x3a8>)
 8007322:	4628      	mov	r0, r5
 8007324:	4619      	mov	r1, r3
 8007326:	f000 fb59 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800732a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800732c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800732e:	4ac3      	ldr	r2, [pc, #780]	@ (800763c <OTM8009A_Init+0x3ac>)
 8007330:	21c5      	movs	r1, #197	@ 0xc5
 8007332:	4628      	mov	r0, r5
 8007334:	f000 fb52 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007338:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800733a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800733c:	4ac0      	ldr	r2, [pc, #768]	@ (8007640 <OTM8009A_Init+0x3b0>)
 800733e:	4619      	mov	r1, r3
 8007340:	4628      	mov	r0, r5
 8007342:	f000 fb4b 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007346:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8007348:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800734a:	4abe      	ldr	r2, [pc, #760]	@ (8007644 <OTM8009A_Init+0x3b4>)
 800734c:	21c5      	movs	r1, #197	@ 0xc5
 800734e:	4628      	mov	r0, r5
 8007350:	f000 fb44 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007354:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007356:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007358:	4abb      	ldr	r2, [pc, #748]	@ (8007648 <OTM8009A_Init+0x3b8>)
 800735a:	4619      	mov	r1, r3
 800735c:	4628      	mov	r0, r5
 800735e:	f000 fb3d 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007362:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8007364:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007366:	4ab9      	ldr	r2, [pc, #740]	@ (800764c <OTM8009A_Init+0x3bc>)
 8007368:	21c0      	movs	r1, #192	@ 0xc0
 800736a:	4628      	mov	r0, r5
 800736c:	f000 fb36 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007370:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007372:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007374:	4aa9      	ldr	r2, [pc, #676]	@ (800761c <OTM8009A_Init+0x38c>)
 8007376:	4619      	mov	r1, r3
 8007378:	4628      	mov	r0, r5
 800737a:	f000 fb2f 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800737e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007380:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007382:	4ab3      	ldr	r2, [pc, #716]	@ (8007650 <OTM8009A_Init+0x3c0>)
 8007384:	21d9      	movs	r1, #217	@ 0xd9
 8007386:	4628      	mov	r0, r5
 8007388:	f000 fb28 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800738c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800738e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007390:	4ab0      	ldr	r2, [pc, #704]	@ (8007654 <OTM8009A_Init+0x3c4>)
 8007392:	4619      	mov	r1, r3
 8007394:	4628      	mov	r0, r5
 8007396:	f000 fb21 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800739a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800739c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800739e:	4aae      	ldr	r2, [pc, #696]	@ (8007658 <OTM8009A_Init+0x3c8>)
 80073a0:	21c1      	movs	r1, #193	@ 0xc1
 80073a2:	4628      	mov	r0, r5
 80073a4:	f000 fb1a 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80073a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80073aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80073ac:	4aab      	ldr	r2, [pc, #684]	@ (800765c <OTM8009A_Init+0x3cc>)
 80073ae:	4619      	mov	r1, r3
 80073b0:	4628      	mov	r0, r5
 80073b2:	f000 fb13 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80073b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80073b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80073ba:	4aa9      	ldr	r2, [pc, #676]	@ (8007660 <OTM8009A_Init+0x3d0>)
 80073bc:	21c5      	movs	r1, #197	@ 0xc5
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 fb0c 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80073c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80073c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80073c8:	4aa6      	ldr	r2, [pc, #664]	@ (8007664 <OTM8009A_Init+0x3d4>)
 80073ca:	4619      	mov	r1, r3
 80073cc:	4628      	mov	r0, r5
 80073ce:	f000 fb05 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80073d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80073d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80073d6:	4a9b      	ldr	r2, [pc, #620]	@ (8007644 <OTM8009A_Init+0x3b4>)
 80073d8:	21c5      	movs	r1, #197	@ 0xc5
 80073da:	4628      	mov	r0, r5
 80073dc:	f000 fafe 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80073e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80073e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80073e4:	4a8d      	ldr	r2, [pc, #564]	@ (800761c <OTM8009A_Init+0x38c>)
 80073e6:	4619      	mov	r1, r3
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 faf7 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80073ee:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80073f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80073f2:	4a9d      	ldr	r2, [pc, #628]	@ (8007668 <OTM8009A_Init+0x3d8>)
 80073f4:	21d8      	movs	r1, #216	@ 0xd8
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 faf0 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80073fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80073fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8007400:	4a9a      	ldr	r2, [pc, #616]	@ (800766c <OTM8009A_Init+0x3dc>)
 8007402:	4619      	mov	r1, r3
 8007404:	4628      	mov	r0, r5
 8007406:	f000 fae9 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800740a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800740c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800740e:	4a98      	ldr	r2, [pc, #608]	@ (8007670 <OTM8009A_Init+0x3e0>)
 8007410:	21c5      	movs	r1, #197	@ 0xc5
 8007412:	4628      	mov	r0, r5
 8007414:	f000 fae2 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007418:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800741a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800741c:	4a95      	ldr	r2, [pc, #596]	@ (8007674 <OTM8009A_Init+0x3e4>)
 800741e:	4619      	mov	r1, r3
 8007420:	4628      	mov	r0, r5
 8007422:	f000 fadb 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007426:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8007428:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800742a:	4a93      	ldr	r2, [pc, #588]	@ (8007678 <OTM8009A_Init+0x3e8>)
 800742c:	21c0      	movs	r1, #192	@ 0xc0
 800742e:	4628      	mov	r0, r5
 8007430:	f000 fad4 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007434:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8007436:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007438:	4a90      	ldr	r2, [pc, #576]	@ (800767c <OTM8009A_Init+0x3ec>)
 800743a:	4619      	mov	r1, r3
 800743c:	4628      	mov	r0, r5
 800743e:	f000 facd 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007442:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8007444:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007446:	4a8e      	ldr	r2, [pc, #568]	@ (8007680 <OTM8009A_Init+0x3f0>)
 8007448:	21c5      	movs	r1, #197	@ 0xc5
 800744a:	4628      	mov	r0, r5
 800744c:	f000 fac6 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007450:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007452:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007454:	4a8b      	ldr	r2, [pc, #556]	@ (8007684 <OTM8009A_Init+0x3f4>)
 8007456:	4619      	mov	r1, r3
 8007458:	4628      	mov	r0, r5
 800745a:	f000 fabf 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800745e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007460:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007462:	4a89      	ldr	r2, [pc, #548]	@ (8007688 <OTM8009A_Init+0x3f8>)
 8007464:	21c4      	movs	r1, #196	@ 0xc4
 8007466:	4628      	mov	r0, r5
 8007468:	f000 fab8 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800746c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800746e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007470:	4a78      	ldr	r2, [pc, #480]	@ (8007654 <OTM8009A_Init+0x3c4>)
 8007472:	4619      	mov	r1, r3
 8007474:	4628      	mov	r0, r5
 8007476:	f000 fab1 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800747a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800747c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800747e:	4a83      	ldr	r2, [pc, #524]	@ (800768c <OTM8009A_Init+0x3fc>)
 8007480:	21c1      	movs	r1, #193	@ 0xc1
 8007482:	4628      	mov	r0, r5
 8007484:	f000 faaa 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007488:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800748a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800748c:	4a80      	ldr	r2, [pc, #512]	@ (8007690 <OTM8009A_Init+0x400>)
 800748e:	4619      	mov	r1, r3
 8007490:	4628      	mov	r0, r5
 8007492:	f000 faa3 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007496:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8007498:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800749a:	4a7e      	ldr	r2, [pc, #504]	@ (8007694 <OTM8009A_Init+0x404>)
 800749c:	21b3      	movs	r1, #179	@ 0xb3
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 fa9c 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80074a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80074a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80074a8:	4a5e      	ldr	r2, [pc, #376]	@ (8007624 <OTM8009A_Init+0x394>)
 80074aa:	4619      	mov	r1, r3
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 fa95 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80074b2:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80074b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80074b6:	4a78      	ldr	r2, [pc, #480]	@ (8007698 <OTM8009A_Init+0x408>)
 80074b8:	21ce      	movs	r1, #206	@ 0xce
 80074ba:	4628      	mov	r0, r5
 80074bc:	f000 fa8e 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80074c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80074c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80074c4:	4a75      	ldr	r2, [pc, #468]	@ (800769c <OTM8009A_Init+0x40c>)
 80074c6:	4619      	mov	r1, r3
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 fa87 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80074ce:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80074d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80074d2:	4a73      	ldr	r2, [pc, #460]	@ (80076a0 <OTM8009A_Init+0x410>)
 80074d4:	21ce      	movs	r1, #206	@ 0xce
 80074d6:	4628      	mov	r0, r5
 80074d8:	f000 fa80 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80074dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80074de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80074e0:	4a70      	ldr	r2, [pc, #448]	@ (80076a4 <OTM8009A_Init+0x414>)
 80074e2:	4619      	mov	r1, r3
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 fa79 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80074ea:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80074ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80074ee:	4a6e      	ldr	r2, [pc, #440]	@ (80076a8 <OTM8009A_Init+0x418>)
 80074f0:	21ce      	movs	r1, #206	@ 0xce
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 fa72 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80074f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80074fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80074fc:	4a6b      	ldr	r2, [pc, #428]	@ (80076ac <OTM8009A_Init+0x41c>)
 80074fe:	4619      	mov	r1, r3
 8007500:	4628      	mov	r0, r5
 8007502:	f000 fa6b 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8007506:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007508:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800750a:	4a69      	ldr	r2, [pc, #420]	@ (80076b0 <OTM8009A_Init+0x420>)
 800750c:	21cf      	movs	r1, #207	@ 0xcf
 800750e:	4628      	mov	r0, r5
 8007510:	f000 fa64 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007514:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8007516:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007518:	4a66      	ldr	r2, [pc, #408]	@ (80076b4 <OTM8009A_Init+0x424>)
 800751a:	4619      	mov	r1, r3
 800751c:	4628      	mov	r0, r5
 800751e:	f000 fa5d 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007522:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007524:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007526:	4a64      	ldr	r2, [pc, #400]	@ (80076b8 <OTM8009A_Init+0x428>)
 8007528:	21cf      	movs	r1, #207	@ 0xcf
 800752a:	4628      	mov	r0, r5
 800752c:	f000 fa56 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007530:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8007532:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007534:	4a3b      	ldr	r2, [pc, #236]	@ (8007624 <OTM8009A_Init+0x394>)
 8007536:	4619      	mov	r1, r3
 8007538:	4628      	mov	r0, r5
 800753a:	f000 fa4f 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800753e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007540:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007542:	4a5e      	ldr	r2, [pc, #376]	@ (80076bc <OTM8009A_Init+0x42c>)
 8007544:	21cb      	movs	r1, #203	@ 0xcb
 8007546:	4628      	mov	r0, r5
 8007548:	f000 fa48 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800754c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800754e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007550:	4a5b      	ldr	r2, [pc, #364]	@ (80076c0 <OTM8009A_Init+0x430>)
 8007552:	4619      	mov	r1, r3
 8007554:	4628      	mov	r0, r5
 8007556:	f000 fa41 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800755a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800755c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800755e:	4a59      	ldr	r2, [pc, #356]	@ (80076c4 <OTM8009A_Init+0x434>)
 8007560:	21cb      	movs	r1, #203	@ 0xcb
 8007562:	4628      	mov	r0, r5
 8007564:	f000 fa3a 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007568:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800756a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800756c:	4a4b      	ldr	r2, [pc, #300]	@ (800769c <OTM8009A_Init+0x40c>)
 800756e:	4619      	mov	r1, r3
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fa33 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007576:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007578:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800757a:	4a53      	ldr	r2, [pc, #332]	@ (80076c8 <OTM8009A_Init+0x438>)
 800757c:	21cb      	movs	r1, #203	@ 0xcb
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fa2c 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007584:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007586:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007588:	4a46      	ldr	r2, [pc, #280]	@ (80076a4 <OTM8009A_Init+0x414>)
 800758a:	4619      	mov	r1, r3
 800758c:	4628      	mov	r0, r5
 800758e:	f000 fa25 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007592:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007594:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007596:	4a4d      	ldr	r2, [pc, #308]	@ (80076cc <OTM8009A_Init+0x43c>)
 8007598:	21cb      	movs	r1, #203	@ 0xcb
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fa1e 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80075a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80075a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80075a4:	4a41      	ldr	r2, [pc, #260]	@ (80076ac <OTM8009A_Init+0x41c>)
 80075a6:	4619      	mov	r1, r3
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 fa17 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80075ae:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80075b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80075b2:	4a47      	ldr	r2, [pc, #284]	@ (80076d0 <OTM8009A_Init+0x440>)
 80075b4:	21cb      	movs	r1, #203	@ 0xcb
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 fa10 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80075bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80075be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80075c0:	4a3c      	ldr	r2, [pc, #240]	@ (80076b4 <OTM8009A_Init+0x424>)
 80075c2:	4619      	mov	r1, r3
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 fa09 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80075ca:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80075cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80075ce:	4a41      	ldr	r2, [pc, #260]	@ (80076d4 <OTM8009A_Init+0x444>)
 80075d0:	21cb      	movs	r1, #203	@ 0xcb
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 fa02 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80075d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80075da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80075dc:	4a3e      	ldr	r2, [pc, #248]	@ (80076d8 <OTM8009A_Init+0x448>)
 80075de:	4619      	mov	r1, r3
 80075e0:	4628      	mov	r0, r5
 80075e2:	f000 f9fb 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80075e6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80075e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80075ea:	4a3c      	ldr	r2, [pc, #240]	@ (80076dc <OTM8009A_Init+0x44c>)
 80075ec:	21cb      	movs	r1, #203	@ 0xcb
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 f9f4 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80075f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80075f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80075f8:	4a39      	ldr	r2, [pc, #228]	@ (80076e0 <OTM8009A_Init+0x450>)
 80075fa:	4619      	mov	r1, r3
 80075fc:	4628      	mov	r0, r5
 80075fe:	f000 f9ed 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007602:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007604:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007606:	4a37      	ldr	r2, [pc, #220]	@ (80076e4 <OTM8009A_Init+0x454>)
 8007608:	21cb      	movs	r1, #203	@ 0xcb
 800760a:	4628      	mov	r0, r5
 800760c:	f000 f9e6 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007610:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007612:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007614:	4a03      	ldr	r2, [pc, #12]	@ (8007624 <OTM8009A_Init+0x394>)
 8007616:	4619      	mov	r1, r3
 8007618:	4628      	mov	r0, r5
 800761a:	e065      	b.n	80076e8 <OTM8009A_Init+0x458>
 800761c:	08028855 	.word	0x08028855
 8007620:	08028851 	.word	0x08028851
 8007624:	08028856 	.word	0x08028856
 8007628:	0802884f 	.word	0x0802884f
 800762c:	08028857 	.word	0x08028857
 8007630:	08028858 	.word	0x08028858
 8007634:	08028859 	.word	0x08028859
 8007638:	0802885a 	.word	0x0802885a
 800763c:	0802885b 	.word	0x0802885b
 8007640:	0802885c 	.word	0x0802885c
 8007644:	0802885d 	.word	0x0802885d
 8007648:	0802885e 	.word	0x0802885e
 800764c:	0802885f 	.word	0x0802885f
 8007650:	08028860 	.word	0x08028860
 8007654:	08028863 	.word	0x08028863
 8007658:	08028864 	.word	0x08028864
 800765c:	08028865 	.word	0x08028865
 8007660:	08028866 	.word	0x08028866
 8007664:	08028867 	.word	0x08028867
 8007668:	0802884d 	.word	0x0802884d
 800766c:	08028868 	.word	0x08028868
 8007670:	08028869 	.word	0x08028869
 8007674:	0802886a 	.word	0x0802886a
 8007678:	0802886b 	.word	0x0802886b
 800767c:	0802886c 	.word	0x0802886c
 8007680:	0802886d 	.word	0x0802886d
 8007684:	08028861 	.word	0x08028861
 8007688:	0802886e 	.word	0x0802886e
 800768c:	0802886f 	.word	0x0802886f
 8007690:	08028870 	.word	0x08028870
 8007694:	0802884b 	.word	0x0802884b
 8007698:	08028845 	.word	0x08028845
 800769c:	08028871 	.word	0x08028871
 80076a0:	08028837 	.word	0x08028837
 80076a4:	08028872 	.word	0x08028872
 80076a8:	08028829 	.word	0x08028829
 80076ac:	08028873 	.word	0x08028873
 80076b0:	0802881f 	.word	0x0802881f
 80076b4:	08028874 	.word	0x08028874
 80076b8:	08028881 	.word	0x08028881
 80076bc:	08028815 	.word	0x08028815
 80076c0:	08028875 	.word	0x08028875
 80076c4:	08028806 	.word	0x08028806
 80076c8:	080287f7 	.word	0x080287f7
 80076cc:	080287ed 	.word	0x080287ed
 80076d0:	080287de 	.word	0x080287de
 80076d4:	080287cf 	.word	0x080287cf
 80076d8:	08028876 	.word	0x08028876
 80076dc:	080287c5 	.word	0x080287c5
 80076e0:	08028877 	.word	0x08028877
 80076e4:	080287bb 	.word	0x080287bb
 80076e8:	f000 f978 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80076ec:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80076ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80076f0:	4a8e      	ldr	r2, [pc, #568]	@ (800792c <OTM8009A_Init+0x69c>)
 80076f2:	21cc      	movs	r1, #204	@ 0xcc
 80076f4:	4628      	mov	r0, r5
 80076f6:	f000 f971 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80076fa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80076fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80076fe:	4a8c      	ldr	r2, [pc, #560]	@ (8007930 <OTM8009A_Init+0x6a0>)
 8007700:	4619      	mov	r1, r3
 8007702:	4628      	mov	r0, r5
 8007704:	f000 f96a 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8007708:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800770a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800770c:	4a89      	ldr	r2, [pc, #548]	@ (8007934 <OTM8009A_Init+0x6a4>)
 800770e:	21cc      	movs	r1, #204	@ 0xcc
 8007710:	4628      	mov	r0, r5
 8007712:	f000 f963 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007716:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8007718:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800771a:	4a87      	ldr	r2, [pc, #540]	@ (8007938 <OTM8009A_Init+0x6a8>)
 800771c:	4619      	mov	r1, r3
 800771e:	4628      	mov	r0, r5
 8007720:	f000 f95c 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007724:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007726:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007728:	4a84      	ldr	r2, [pc, #528]	@ (800793c <OTM8009A_Init+0x6ac>)
 800772a:	21cc      	movs	r1, #204	@ 0xcc
 800772c:	4628      	mov	r0, r5
 800772e:	f000 f955 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007732:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8007734:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007736:	4a82      	ldr	r2, [pc, #520]	@ (8007940 <OTM8009A_Init+0x6b0>)
 8007738:	4619      	mov	r1, r3
 800773a:	4628      	mov	r0, r5
 800773c:	f000 f94e 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007740:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007742:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007744:	4a7f      	ldr	r2, [pc, #508]	@ (8007944 <OTM8009A_Init+0x6b4>)
 8007746:	21cc      	movs	r1, #204	@ 0xcc
 8007748:	4628      	mov	r0, r5
 800774a:	f000 f947 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800774e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007750:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007752:	4a7d      	ldr	r2, [pc, #500]	@ (8007948 <OTM8009A_Init+0x6b8>)
 8007754:	4619      	mov	r1, r3
 8007756:	4628      	mov	r0, r5
 8007758:	f000 f940 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800775c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800775e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007760:	4a7a      	ldr	r2, [pc, #488]	@ (800794c <OTM8009A_Init+0x6bc>)
 8007762:	21cc      	movs	r1, #204	@ 0xcc
 8007764:	4628      	mov	r0, r5
 8007766:	f000 f939 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800776a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800776c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800776e:	4a78      	ldr	r2, [pc, #480]	@ (8007950 <OTM8009A_Init+0x6c0>)
 8007770:	4619      	mov	r1, r3
 8007772:	4628      	mov	r0, r5
 8007774:	f000 f932 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007778:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800777a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800777c:	4a75      	ldr	r2, [pc, #468]	@ (8007954 <OTM8009A_Init+0x6c4>)
 800777e:	21cc      	movs	r1, #204	@ 0xcc
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f92b 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007786:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007788:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800778a:	4a73      	ldr	r2, [pc, #460]	@ (8007958 <OTM8009A_Init+0x6c8>)
 800778c:	4619      	mov	r1, r3
 800778e:	4628      	mov	r0, r5
 8007790:	f000 f924 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007794:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007796:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007798:	4a70      	ldr	r2, [pc, #448]	@ (800795c <OTM8009A_Init+0x6cc>)
 800779a:	21c5      	movs	r1, #197	@ 0xc5
 800779c:	4628      	mov	r0, r5
 800779e:	f000 f91d 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80077a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80077a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80077a6:	4a6e      	ldr	r2, [pc, #440]	@ (8007960 <OTM8009A_Init+0x6d0>)
 80077a8:	4619      	mov	r1, r3
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 f916 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80077b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80077b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80077b4:	4a6b      	ldr	r2, [pc, #428]	@ (8007964 <OTM8009A_Init+0x6d4>)
 80077b6:	21f5      	movs	r1, #245	@ 0xf5
 80077b8:	4628      	mov	r0, r5
 80077ba:	f000 f90f 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80077be:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80077c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80077c2:	4a69      	ldr	r2, [pc, #420]	@ (8007968 <OTM8009A_Init+0x6d8>)
 80077c4:	4619      	mov	r1, r3
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 f908 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80077cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80077ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80077d0:	4a66      	ldr	r2, [pc, #408]	@ (800796c <OTM8009A_Init+0x6dc>)
 80077d2:	21c6      	movs	r1, #198	@ 0xc6
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 f901 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80077da:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80077dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80077de:	4a64      	ldr	r2, [pc, #400]	@ (8007970 <OTM8009A_Init+0x6e0>)
 80077e0:	4619      	mov	r1, r3
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 f8fa 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80077e8:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80077ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80077ec:	4a61      	ldr	r2, [pc, #388]	@ (8007974 <OTM8009A_Init+0x6e4>)
 80077ee:	21ff      	movs	r1, #255	@ 0xff
 80077f0:	4628      	mov	r0, r5
 80077f2:	f000 f8f3 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80077f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80077f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80077fa:	4a5d      	ldr	r2, [pc, #372]	@ (8007970 <OTM8009A_Init+0x6e0>)
 80077fc:	4619      	mov	r1, r3
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f8ec 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007804:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007806:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007808:	4a59      	ldr	r2, [pc, #356]	@ (8007970 <OTM8009A_Init+0x6e0>)
 800780a:	4619      	mov	r1, r3
 800780c:	4628      	mov	r0, r5
 800780e:	f000 f8e5 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8007812:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007814:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8007816:	4a58      	ldr	r2, [pc, #352]	@ (8007978 <OTM8009A_Init+0x6e8>)
 8007818:	21e1      	movs	r1, #225	@ 0xe1
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f8de 	bl	80079dc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007820:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8007822:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007824:	4a52      	ldr	r2, [pc, #328]	@ (8007970 <OTM8009A_Init+0x6e0>)
 8007826:	4619      	mov	r1, r3
 8007828:	4628      	mov	r0, r5
 800782a:	f000 f8d7 	bl	80079dc <otm8009a_write_reg>
 800782e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8007830:	2310      	movs	r3, #16
 8007832:	4a52      	ldr	r2, [pc, #328]	@ (800797c <OTM8009A_Init+0x6ec>)
 8007834:	21e2      	movs	r1, #226	@ 0xe2
 8007836:	4628      	mov	r0, r5
 8007838:	f000 f8d0 	bl	80079dc <otm8009a_write_reg>
 800783c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800783e:	2300      	movs	r3, #0
 8007840:	4a4f      	ldr	r2, [pc, #316]	@ (8007980 <OTM8009A_Init+0x6f0>)
 8007842:	2111      	movs	r1, #17
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f8c9 	bl	80079dc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800784a:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800784c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800784e:	4638      	mov	r0, r7
 8007850:	f7ff fd11 	bl	8007276 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8007854:	4f4b      	ldr	r7, [pc, #300]	@ (8007984 <OTM8009A_Init+0x6f4>)
 8007856:	2e00      	cmp	r6, #0
 8007858:	d061      	beq.n	800791e <OTM8009A_Init+0x68e>
 800785a:	2e02      	cmp	r6, #2
 800785c:	d107      	bne.n	800786e <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800785e:	2300      	movs	r3, #0
 8007860:	4a49      	ldr	r2, [pc, #292]	@ (8007988 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007862:	213a      	movs	r1, #58	@ 0x3a
 8007864:	4628      	mov	r0, r5
 8007866:	f000 f8b9 	bl	80079dc <otm8009a_write_reg>
 800786a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800786c:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800786e:	f1b8 0f01 	cmp.w	r8, #1
 8007872:	d157      	bne.n	8007924 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007874:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007876:	f10d 0207 	add.w	r2, sp, #7
 800787a:	2136      	movs	r1, #54	@ 0x36
 800787c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800787e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007882:	2300      	movs	r3, #0
 8007884:	f000 f8aa 	bl	80079dc <otm8009a_write_reg>
 8007888:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800788a:	2304      	movs	r3, #4
 800788c:	4a3f      	ldr	r2, [pc, #252]	@ (800798c <OTM8009A_Init+0x6fc>)
 800788e:	212a      	movs	r1, #42	@ 0x2a
 8007890:	4628      	mov	r0, r5
 8007892:	f000 f8a3 	bl	80079dc <otm8009a_write_reg>
 8007896:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007898:	2304      	movs	r3, #4
 800789a:	4a3d      	ldr	r2, [pc, #244]	@ (8007990 <OTM8009A_Init+0x700>)
 800789c:	212b      	movs	r1, #43	@ 0x2b
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 f89c 	bl	80079dc <otm8009a_write_reg>
 80078a4:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80078a6:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80078aa:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80078ac:	2300      	movs	r3, #0
 80078ae:	4a39      	ldr	r2, [pc, #228]	@ (8007994 <OTM8009A_Init+0x704>)
 80078b0:	2151      	movs	r1, #81	@ 0x51
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 f892 	bl	80079dc <otm8009a_write_reg>
 80078b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80078ba:	4633      	mov	r3, r6
 80078bc:	4a36      	ldr	r2, [pc, #216]	@ (8007998 <OTM8009A_Init+0x708>)
 80078be:	2153      	movs	r1, #83	@ 0x53
 80078c0:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80078c2:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80078c4:	f000 f88a 	bl	80079dc <otm8009a_write_reg>
 80078c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80078ca:	4633      	mov	r3, r6
 80078cc:	4a33      	ldr	r2, [pc, #204]	@ (800799c <OTM8009A_Init+0x70c>)
 80078ce:	2155      	movs	r1, #85	@ 0x55
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 f883 	bl	80079dc <otm8009a_write_reg>
 80078d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80078d8:	4633      	mov	r3, r6
 80078da:	4a31      	ldr	r2, [pc, #196]	@ (80079a0 <OTM8009A_Init+0x710>)
 80078dc:	215e      	movs	r1, #94	@ 0x5e
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 f87c 	bl	80079dc <otm8009a_write_reg>
 80078e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80078e6:	4633      	mov	r3, r6
 80078e8:	4a2e      	ldr	r2, [pc, #184]	@ (80079a4 <OTM8009A_Init+0x714>)
 80078ea:	2129      	movs	r1, #41	@ 0x29
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f875 	bl	80079dc <otm8009a_write_reg>
 80078f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80078f4:	4633      	mov	r3, r6
 80078f6:	4631      	mov	r1, r6
 80078f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007970 <OTM8009A_Init+0x6e0>)
 80078fa:	4628      	mov	r0, r5
 80078fc:	f000 f86e 	bl	80079dc <otm8009a_write_reg>
 8007900:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8007902:	4633      	mov	r3, r6
 8007904:	4a28      	ldr	r2, [pc, #160]	@ (80079a8 <OTM8009A_Init+0x718>)
 8007906:	212c      	movs	r1, #44	@ 0x2c
 8007908:	4628      	mov	r0, r5
 800790a:	f000 f867 	bl	80079dc <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800790e:	42c4      	cmn	r4, r0
}
 8007910:	bf14      	ite	ne
 8007912:	f04f 30ff 	movne.w	r0, #4294967295
 8007916:	4630      	moveq	r0, r6
 8007918:	b002      	add	sp, #8
 800791a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800791e:	4633      	mov	r3, r6
 8007920:	4a22      	ldr	r2, [pc, #136]	@ (80079ac <OTM8009A_Init+0x71c>)
 8007922:	e79e      	b.n	8007862 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007924:	2300      	movs	r3, #0
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	e7bf      	b.n	80078aa <OTM8009A_Init+0x61a>
 800792a:	bf00      	nop
 800792c:	080287b1 	.word	0x080287b1
 8007930:	08028875 	.word	0x08028875
 8007934:	080287a2 	.word	0x080287a2
 8007938:	08028871 	.word	0x08028871
 800793c:	08028793 	.word	0x08028793
 8007940:	08028872 	.word	0x08028872
 8007944:	08028789 	.word	0x08028789
 8007948:	08028873 	.word	0x08028873
 800794c:	0802877a 	.word	0x0802877a
 8007950:	08028874 	.word	0x08028874
 8007954:	0802876b 	.word	0x0802876b
 8007958:	08028861 	.word	0x08028861
 800795c:	08028882 	.word	0x08028882
 8007960:	08028883 	.word	0x08028883
 8007964:	08028884 	.word	0x08028884
 8007968:	08028885 	.word	0x08028885
 800796c:	08028886 	.word	0x08028886
 8007970:	08028855 	.word	0x08028855
 8007974:	08028768 	.word	0x08028768
 8007978:	08028758 	.word	0x08028758
 800797c:	08028748 	.word	0x08028748
 8007980:	08028878 	.word	0x08028878
 8007984:	2400c420 	.word	0x2400c420
 8007988:	08028879 	.word	0x08028879
 800798c:	0802888b 	.word	0x0802888b
 8007990:	08028887 	.word	0x08028887
 8007994:	0802887b 	.word	0x0802887b
 8007998:	0802887c 	.word	0x0802887c
 800799c:	0802887d 	.word	0x0802887d
 80079a0:	0802887e 	.word	0x0802887e
 80079a4:	0802887f 	.word	0x0802887f
 80079a8:	08028880 	.word	0x08028880
 80079ac:	0802887a 	.word	0x0802887a

080079b0 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80079b0:	b160      	cbz	r0, 80079cc <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80079b2:	684b      	ldr	r3, [r1, #4]
 80079b4:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80079b6:	688b      	ldr	r3, [r1, #8]
 80079b8:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80079ba:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 80079bc:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80079be:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80079c0:	4b04      	ldr	r3, [pc, #16]	@ (80079d4 <OTM8009A_RegisterBusIO+0x24>)
 80079c2:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80079c4:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <OTM8009A_RegisterBusIO+0x28>)
 80079c6:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 80079c8:	2000      	movs	r0, #0
 80079ca:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	0800725b 	.word	0x0800725b
 80079d8:	08007269 	.word	0x08007269

080079dc <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80079dc:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80079de:	6804      	ldr	r4, [r0, #0]
 80079e0:	6880      	ldr	r0, [r0, #8]
 80079e2:	46a4      	mov	ip, r4
}
 80079e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80079e8:	4760      	bx	ip
	...

080079ec <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80079ec:	4a10      	ldr	r2, [pc, #64]	@ (8007a30 <BSP_I2C4_DeInit+0x44>)
{
 80079ee:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80079f0:	6813      	ldr	r3, [r2, #0]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80079f6:	b10b      	cbz	r3, 80079fc <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80079f8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80079fa:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80079fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a00:	480c      	ldr	r0, [pc, #48]	@ (8007a34 <BSP_I2C4_DeInit+0x48>)
 8007a02:	f001 fe3d 	bl	8009680 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007a06:	480b      	ldr	r0, [pc, #44]	@ (8007a34 <BSP_I2C4_DeInit+0x48>)
 8007a08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007a0c:	f001 fe38 	bl	8009680 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8007a10:	4a09      	ldr	r2, [pc, #36]	@ (8007a38 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8007a12:	480a      	ldr	r0, [pc, #40]	@ (8007a3c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8007a14:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8007a18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8007a20:	f002 f87e 	bl	8009b20 <HAL_I2C_DeInit>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d0e7      	beq.n	80079f8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8007a28:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007a2c:	e7e5      	b.n	80079fa <BSP_I2C4_DeInit+0xe>
 8007a2e:	bf00      	nop
 8007a30:	2400ce84 	.word	0x2400ce84
 8007a34:	58020c00 	.word	0x58020c00
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	2400c42c 	.word	0x2400c42c

08007a40 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007a40:	2300      	movs	r3, #0
 8007a42:	2201      	movs	r2, #1
{
 8007a44:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8007a46:	6041      	str	r1, [r0, #4]
{
 8007a48:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007a4a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007a4c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8007a50:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007a54:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8007a58:	f002 f80c 	bl	8009a74 <HAL_I2C_Init>
 8007a5c:	4601      	mov	r1, r0
 8007a5e:	b108      	cbz	r0, 8007a64 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8007a60:	2001      	movs	r0, #1
}
 8007a62:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8007a64:	4620      	mov	r0, r4
 8007a66:	f002 fa32 	bl	8009ece <HAL_I2CEx_ConfigAnalogFilter>
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d1f7      	bne.n	8007a60 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8007a70:	4620      	mov	r0, r4
 8007a72:	f002 fa52 	bl	8009f1a <HAL_I2CEx_ConfigDigitalFilter>
 8007a76:	3800      	subs	r0, #0
 8007a78:	bf18      	it	ne
 8007a7a:	2001      	movne	r0, #1
 8007a7c:	e7f1      	b.n	8007a62 <MX_I2C4_Init+0x22>
	...

08007a80 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8007a80:	4ba1      	ldr	r3, [pc, #644]	@ (8007d08 <BSP_I2C4_Init+0x288>)
 8007a82:	48a2      	ldr	r0, [pc, #648]	@ (8007d0c <BSP_I2C4_Init+0x28c>)
{
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8007a88:	6003      	str	r3, [r0, #0]
{
 8007a8a:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8007a8c:	4ba0      	ldr	r3, [pc, #640]	@ (8007d10 <BSP_I2C4_Init+0x290>)
 8007a8e:	681c      	ldr	r4, [r3, #0]
 8007a90:	b11c      	cbz	r4, 8007a9a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8007a92:	2000      	movs	r0, #0
}
 8007a94:	b013      	add	sp, #76	@ 0x4c
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8007a9e:	f002 fa11 	bl	8009ec4 <HAL_I2C_GetState>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d1f5      	bne.n	8007a92 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007aa6:	4d9b      	ldr	r5, [pc, #620]	@ (8007d14 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007aa8:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8007aac:	2702      	movs	r7, #2
 8007aae:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007ab0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8007ab4:	a90d      	add	r1, sp, #52	@ 0x34
 8007ab6:	4898      	ldr	r0, [pc, #608]	@ (8007d18 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007ab8:	f043 0308 	orr.w	r3, r3, #8
 8007abc:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8007ac0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8007acc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8007ad0:	f043 0308 	orr.w	r3, r3, #8
 8007ad4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8007ad8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007adc:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8007aea:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007aee:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8007af2:	f001 fcdd 	bl	80094b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8007af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8007afa:	a90d      	add	r1, sp, #52	@ 0x34
 8007afc:	4886      	ldr	r0, [pc, #536]	@ (8007d18 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8007afe:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007b00:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007b04:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8007b08:	f001 fcd2 	bl	80094b0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8007b0c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8007b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b14:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8007b18:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8007b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b20:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8007b24:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8007b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b2c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8007b30:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8007b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b38:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8007b3c:	f004 fcbc 	bl	800c4b8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d06f      	beq.n	8007c24 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007b44:	4b75      	ldr	r3, [pc, #468]	@ (8007d1c <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8007b46:	4622      	mov	r2, r4
 8007b48:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8007b4a:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007b4e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007b52:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8007d24 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007b56:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8007b5a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8007b5e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8007b62:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007b64:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007b68:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8007b6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8007b70:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8007b74:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007b76:	4b6a      	ldr	r3, [pc, #424]	@ (8007d20 <BSP_I2C4_Init+0x2a0>)
 8007b78:	681b      	ldr	r3, [r3, #0]
{
 8007b7a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007b7c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8007b80:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8007b84:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8007b88:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8007b8c:	d35d      	bcc.n	8007c4a <BSP_I2C4_Init+0x1ca>
 8007b8e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007b90:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8007b92:	9d00      	ldr	r5, [sp, #0]
 8007b94:	42bd      	cmp	r5, r7
 8007b96:	d852      	bhi.n	8007c3e <BSP_I2C4_Init+0x1be>
 8007b98:	42be      	cmp	r6, r7
 8007b9a:	d350      	bcc.n	8007c3e <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8007b9c:	4591      	cmp	r9, r2
 8007b9e:	d04e      	beq.n	8007c3e <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007ba0:	2514      	movs	r5, #20
 8007ba2:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8007ba6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8007ba8:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007baa:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007bae:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8007bb0:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8007bb4:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8007bb8:	d93e      	bls.n	8007c38 <BSP_I2C4_Init+0x1b8>
 8007bba:	4a59      	ldr	r2, [pc, #356]	@ (8007d20 <BSP_I2C4_Init+0x2a0>)
 8007bbc:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007bbe:	4b58      	ldr	r3, [pc, #352]	@ (8007d20 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007bc0:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8007bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc8:	4956      	ldr	r1, [pc, #344]	@ (8007d24 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007bca:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007bcc:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007bce:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007bd0:	0043      	lsls	r3, r0, #1
 8007bd2:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8007bd6:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8007bda:	f10b 0b01 	add.w	fp, fp, #1
 8007bde:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8007be2:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8007be6:	9508      	str	r5, [sp, #32]
 8007be8:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007bea:	9b05      	ldr	r3, [sp, #20]
 8007bec:	429f      	cmp	r7, r3
 8007bee:	d138      	bne.n	8007c62 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8007bf0:	9b01      	ldr	r3, [sp, #4]
 8007bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bf4:	d816      	bhi.n	8007c24 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007bf6:	2114      	movs	r1, #20
 8007bf8:	9a01      	ldr	r2, [sp, #4]
 8007bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8007d24 <BSP_I2C4_Init+0x2a4>)
 8007bfc:	434a      	muls	r2, r1
 8007bfe:	1899      	adds	r1, r3, r2
 8007c00:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8007c02:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007c04:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8007c08:	684b      	ldr	r3, [r1, #4]
 8007c0a:	051b      	lsls	r3, r3, #20
 8007c0c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007c10:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8007c12:	688b      	ldr	r3, [r1, #8]
 8007c14:	041b      	lsls	r3, r3, #16
 8007c16:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007c1a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8007c1c:	68cb      	ldr	r3, [r1, #12]
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007c22:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8007c24:	4621      	mov	r1, r4
 8007c26:	4839      	ldr	r0, [pc, #228]	@ (8007d0c <BSP_I2C4_Init+0x28c>)
 8007c28:	f7ff ff0a 	bl	8007a40 <MX_I2C4_Init>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f43f af30 	beq.w	8007a92 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8007c32:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007c36:	e72d      	b.n	8007a94 <BSP_I2C4_Init+0x14>
 8007c38:	4691      	mov	r9, r2
 8007c3a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007c3e:	f10e 0e01 	add.w	lr, lr, #1
 8007c42:	440f      	add	r7, r1
 8007c44:	f1be 0f10 	cmp.w	lr, #16
 8007c48:	d1a3      	bne.n	8007b92 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007c4a:	f1bc 0f10 	cmp.w	ip, #16
 8007c4e:	4488      	add	r8, r1
 8007c50:	d196      	bne.n	8007b80 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007c52:	3201      	adds	r2, #1
 8007c54:	4401      	add	r1, r0
 8007c56:	2a10      	cmp	r2, #16
 8007c58:	d18f      	bne.n	8007b7a <BSP_I2C4_Init+0xfa>
 8007c5a:	f1ba 0f00 	cmp.w	sl, #0
 8007c5e:	d1ac      	bne.n	8007bba <BSP_I2C4_Init+0x13a>
 8007c60:	e7ad      	b.n	8007bbe <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007c62:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007c64:	f04f 0c00 	mov.w	ip, #0
 8007c68:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007c6a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007c6e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007c70:	441d      	add	r5, r3
 8007c72:	441e      	add	r6, r3
 8007c74:	9503      	str	r5, [sp, #12]
 8007c76:	ebab 0503 	sub.w	r5, fp, r3
 8007c7a:	9607      	str	r6, [sp, #28]
 8007c7c:	006d      	lsls	r5, r5, #1
 8007c7e:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8007c80:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007c82:	f240 5214 	movw	r2, #1300	@ 0x514
 8007c86:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007c8a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007c8e:	4295      	cmp	r5, r2
 8007c90:	d92f      	bls.n	8007cf2 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007c92:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007c96:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8007c9a:	d22a      	bcs.n	8007cf2 <BSP_I2C4_Init+0x272>
 8007c9c:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007c9e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007ca2:	f8dd 9000 	ldr.w	r9, [sp]
 8007ca6:	442e      	add	r6, r5
 8007ca8:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8007cac:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8007cb0:	f240 4212 	movw	r2, #1042	@ 0x412
 8007cb4:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8007cb8:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8007cbc:	4592      	cmp	sl, r2
 8007cbe:	d811      	bhi.n	8007ce4 <BSP_I2C4_Init+0x264>
 8007cc0:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8007cc4:	d30e      	bcc.n	8007ce4 <BSP_I2C4_Init+0x264>
 8007cc6:	4580      	cmp	r8, r0
 8007cc8:	d90c      	bls.n	8007ce4 <BSP_I2C4_Init+0x264>
              error = -error;
 8007cca:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8007cce:	bf28      	it	cs
 8007cd0:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8007cd2:	9a02      	ldr	r2, [sp, #8]
 8007cd4:	4592      	cmp	sl, r2
 8007cd6:	d205      	bcs.n	8007ce4 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8007cd8:	9a04      	ldr	r2, [sp, #16]
 8007cda:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8007cdc:	9a06      	ldr	r2, [sp, #24]
 8007cde:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8007ce2:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007ce4:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8007ce8:	4498      	add	r8, r3
 8007cea:	441e      	add	r6, r3
 8007cec:	eba9 0903 	sub.w	r9, r9, r3
 8007cf0:	d1dc      	bne.n	8007cac <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007cf2:	9a00      	ldr	r2, [sp, #0]
 8007cf4:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8007cf8:	441d      	add	r5, r3
 8007cfa:	eba2 0203 	sub.w	r2, r2, r3
 8007cfe:	9200      	str	r2, [sp, #0]
 8007d00:	d1bf      	bne.n	8007c82 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007d02:	3701      	adds	r7, #1
 8007d04:	3114      	adds	r1, #20
 8007d06:	e770      	b.n	8007bea <BSP_I2C4_Init+0x16a>
 8007d08:	58001c00 	.word	0x58001c00
 8007d0c:	2400c42c 	.word	0x2400c42c
 8007d10:	2400ce84 	.word	0x2400ce84
 8007d14:	58024400 	.word	0x58024400
 8007d18:	58020c00 	.word	0x58020c00
 8007d1c:	3b9aca00 	.word	0x3b9aca00
 8007d20:	2400c480 	.word	0x2400c480
 8007d24:	2400c484 	.word	0x2400c484

08007d28 <BSP_I2C4_WriteReg>:
{
 8007d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007d2a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8007d2e:	9200      	str	r2, [sp, #0]
 8007d30:	460a      	mov	r2, r1
 8007d32:	4601      	mov	r1, r0
 8007d34:	4808      	ldr	r0, [pc, #32]	@ (8007d58 <BSP_I2C4_WriteReg+0x30>)
 8007d36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f001 ff0a 	bl	8009b54 <HAL_I2C_Mem_Write>
 8007d40:	b140      	cbz	r0, 8007d54 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8007d42:	4805      	ldr	r0, [pc, #20]	@ (8007d58 <BSP_I2C4_WriteReg+0x30>)
 8007d44:	f002 f8c1 	bl	8009eca <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007d48:	2804      	cmp	r0, #4
 8007d4a:	bf14      	ite	ne
 8007d4c:	f06f 0003 	mvnne.w	r0, #3
 8007d50:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8007d54:	b004      	add	sp, #16
 8007d56:	bd10      	pop	{r4, pc}
 8007d58:	2400c42c 	.word	0x2400c42c

08007d5c <BSP_I2C4_ReadReg>:
{
 8007d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8007d5e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8007d62:	9200      	str	r2, [sp, #0]
 8007d64:	460a      	mov	r2, r1
 8007d66:	4601      	mov	r1, r0
 8007d68:	4808      	ldr	r0, [pc, #32]	@ (8007d8c <BSP_I2C4_ReadReg+0x30>)
 8007d6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f001 ffca 	bl	8009d08 <HAL_I2C_Mem_Read>
 8007d74:	b140      	cbz	r0, 8007d88 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8007d76:	4805      	ldr	r0, [pc, #20]	@ (8007d8c <BSP_I2C4_ReadReg+0x30>)
 8007d78:	f002 f8a7 	bl	8009eca <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007d7c:	2804      	cmp	r0, #4
 8007d7e:	bf14      	ite	ne
 8007d80:	f06f 0003 	mvnne.w	r0, #3
 8007d84:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8007d88:	b004      	add	sp, #16
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	2400c42c 	.word	0x2400c42c

08007d90 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8007d90:	f000 bd08 	b.w	80087a4 <HAL_GetTick>

08007d94 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8007d94:	4a09      	ldr	r2, [pc, #36]	@ (8007dbc <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8007d96:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8007d9a:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8007d9c:	684a      	ldr	r2, [r1, #4]
 8007d9e:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8007da0:	2201      	movs	r2, #1
 8007da2:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8007da4:	688a      	ldr	r2, [r1, #8]
 8007da6:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8007da8:	680a      	ldr	r2, [r1, #0]
 8007daa:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8007dac:	2200      	movs	r2, #0
 8007dae:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8007db2:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8007db4:	68ca      	ldr	r2, [r1, #12]
 8007db6:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8007db8:	f003 bca8 	b.w	800b70c <HAL_QSPI_Init>
 8007dbc:	52005000 	.word	0x52005000

08007dc0 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8007dc0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8007dc2:	b988      	cbnz	r0, 8007de8 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8007df0 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8007dc6:	480b      	ldr	r0, [pc, #44]	@ (8007df4 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8007dc8:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007dca:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8007dcc:	b94b      	cbnz	r3, 8007de2 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007dce:	f7ff f9bc 	bl	800714a <MT25TL01G_EnableMemoryMappedModeSTR>
 8007dd2:	b110      	cbz	r0, 8007dda <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007dd4:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8007dd8:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8007dda:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8007ddc:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8007dde:	7023      	strb	r3, [r4, #0]
 8007de0:	e7fa      	b.n	8007dd8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007de2:	f7ff f968 	bl	80070b6 <MT25TL01G_EnableMemoryMappedModeDTR>
 8007de6:	e7f4      	b.n	8007dd2 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8007de8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007dec:	e7f4      	b.n	8007dd8 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8007dee:	bf00      	nop
 8007df0:	2400ce88 	.word	0x2400ce88
 8007df4:	24000474 	.word	0x24000474

08007df8 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8007df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8007dfe:	bb30      	cbnz	r0, 8007e4e <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8007e00:	4d17      	ldr	r5, [pc, #92]	@ (8007e60 <BSP_QSPI_ConfigFlash+0x68>)
 8007e02:	782b      	ldrb	r3, [r5, #0]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d025      	beq.n	8007e54 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007e08:	fab2 f382 	clz	r3, r2
 8007e0c:	4e15      	ldr	r6, [pc, #84]	@ (8007e64 <BSP_QSPI_ConfigFlash+0x6c>)
 8007e0e:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8007e10:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8007e16:	f003 fc79 	bl	800b70c <HAL_QSPI_Init>
 8007e1a:	b9f0      	cbnz	r0, 8007e5a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8007e1c:	786b      	ldrb	r3, [r5, #1]
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d10f      	bne.n	8007e42 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8007e22:	2c03      	cmp	r4, #3
 8007e24:	d105      	bne.n	8007e32 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8007e26:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8007e28:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8007e2a:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8007e2c:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8007e2e:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8007e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7ff f923 	bl	800707e <MT25TL01G_ExitQPIMode>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d0f4      	beq.n	8007e26 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e3c:	f06f 0004 	mvn.w	r0, #4
 8007e40:	e7f6      	b.n	8007e30 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8007e42:	2c03      	cmp	r4, #3
 8007e44:	d1ef      	bne.n	8007e26 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7ff f8fd 	bl	8007046 <MT25TL01G_EnterQPIMode>
 8007e4c:	e7f4      	b.n	8007e38 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8007e4e:	f06f 0001 	mvn.w	r0, #1
 8007e52:	e7ed      	b.n	8007e30 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8007e54:	f06f 0019 	mvn.w	r0, #25
 8007e58:	e7ea      	b.n	8007e30 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8007e5a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8007e5e:	e7e7      	b.n	8007e30 <BSP_QSPI_ConfigFlash+0x38>
 8007e60:	2400ce88 	.word	0x2400ce88
 8007e64:	24000474 	.word	0x24000474

08007e68 <BSP_QSPI_Init>:
{
 8007e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f040 81ac 	bne.w	80081ce <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8007e76:	4d03      	ldr	r5, [pc, #12]	@ (8007e84 <BSP_QSPI_Init+0x1c>)
 8007e78:	782f      	ldrb	r7, [r5, #0]
 8007e7a:	b12f      	cbz	r7, 8007e88 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8007e7c:	2000      	movs	r0, #0
}
 8007e7e:	b024      	add	sp, #144	@ 0x90
 8007e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e84:	2400ce88 	.word	0x2400ce88
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8007e88:	4bc3      	ldr	r3, [pc, #780]	@ (8008198 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007e8a:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8007e8e:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8007e90:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8007e92:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8007e96:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8007e9a:	48c0      	ldr	r0, [pc, #768]	@ (800819c <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8007e9c:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8007ea0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ea4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007ea8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007eac:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8007eb0:	9201      	str	r2, [sp, #4]
 8007eb2:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8007eb4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007eba:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8007ebc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007ebe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ec2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8007ec4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007ec8:	f042 0202 	orr.w	r2, r2, #2
 8007ecc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007ed0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007ed4:	f002 0202 	and.w	r2, r2, #2
 8007ed8:	9202      	str	r2, [sp, #8]
 8007eda:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8007edc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ee4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007ee8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007eec:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007ef0:	9203      	str	r2, [sp, #12]
 8007ef2:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8007ef4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007ef8:	f042 0208 	orr.w	r2, r2, #8
 8007efc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f04:	f002 0208 	and.w	r2, r2, #8
 8007f08:	9204      	str	r2, [sp, #16]
 8007f0a:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8007f0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f10:	f042 0220 	orr.w	r2, r2, #32
 8007f14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007f18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f1c:	f002 0220 	and.w	r2, r2, #32
 8007f20:	9205      	str	r2, [sp, #20]
 8007f22:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8007f24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f28:	f042 0220 	orr.w	r2, r2, #32
 8007f2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007f30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f34:	f002 0220 	and.w	r2, r2, #32
 8007f38:	9206      	str	r2, [sp, #24]
 8007f3a:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8007f3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f40:	f042 0220 	orr.w	r2, r2, #32
 8007f44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007f48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f4c:	f002 0220 	and.w	r2, r2, #32
 8007f50:	9207      	str	r2, [sp, #28]
 8007f52:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8007f54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007f60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f64:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007f68:	9208      	str	r2, [sp, #32]
 8007f6a:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8007f6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007f78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f7c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8007f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007f90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007f94:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007f98:	920a      	str	r2, [sp, #40]	@ 0x28
 8007f9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8007f9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007fa8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007fac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007fb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007fb2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8007fb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fbc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc8:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fd2:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8007fd4:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007fd6:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8007fda:	f001 fa69 	bl	80094b0 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007fde:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8007fe0:	a916      	add	r1, sp, #88	@ 0x58
 8007fe2:	486f      	ldr	r0, [pc, #444]	@ (80081a0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007fe4:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8007fe6:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8007fea:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8007fee:	f001 fa5f 	bl	80094b0 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8007ff2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8007ff6:	a916      	add	r1, sp, #88	@ 0x58
 8007ff8:	486a      	ldr	r0, [pc, #424]	@ (80081a4 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8007ffa:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007ffc:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8007ffe:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8008000:	f001 fa56 	bl	80094b0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8008004:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8008006:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800800a:	4867      	ldr	r0, [pc, #412]	@ (80081a8 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800800c:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8008010:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8008012:	f001 fa4d 	bl	80094b0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8008016:	a916      	add	r1, sp, #88	@ 0x58
 8008018:	4864      	ldr	r0, [pc, #400]	@ (80081ac <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800801a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800801e:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8008022:	f001 fa45 	bl	80094b0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8008026:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8008028:	a916      	add	r1, sp, #88	@ 0x58
 800802a:	485f      	ldr	r0, [pc, #380]	@ (80081a8 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800802c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800802e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8008030:	f001 fa3e 	bl	80094b0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8008034:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8008036:	a916      	add	r1, sp, #88	@ 0x58
 8008038:	485c      	ldr	r0, [pc, #368]	@ (80081ac <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800803a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800803c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800803e:	f001 fa37 	bl	80094b0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8008042:	a916      	add	r1, sp, #88	@ 0x58
 8008044:	4856      	ldr	r0, [pc, #344]	@ (80081a0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8008046:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800804a:	f001 fa31 	bl	80094b0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800804e:	a916      	add	r1, sp, #88	@ 0x58
 8008050:	4856      	ldr	r0, [pc, #344]	@ (80081ac <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8008052:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8008056:	f001 fa2b 	bl	80094b0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800805a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800805e:	a916      	add	r1, sp, #88	@ 0x58
 8008060:	484f      	ldr	r0, [pc, #316]	@ (80081a0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8008062:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8008064:	f001 fa24 	bl	80094b0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8008068:	463a      	mov	r2, r7
 800806a:	210f      	movs	r1, #15
 800806c:	205c      	movs	r0, #92	@ 0x5c
 800806e:	f000 fbc9 	bl	8008804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8008072:	205c      	movs	r0, #92	@ 0x5c
 8008074:	f000 fbf8 	bl	8008868 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8008078:	a811      	add	r0, sp, #68	@ 0x44
 800807a:	f7fe ff38 	bl	8006eee <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800807e:	7863      	ldrb	r3, [r4, #1]
 8008080:	4a4b      	ldr	r2, [pc, #300]	@ (80081b0 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8008082:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8008086:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800808a:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800808c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800808e:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8008092:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8008096:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800809a:	a90d      	add	r1, sp, #52	@ 0x34
 800809c:	4845      	ldr	r0, [pc, #276]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800809e:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80080a0:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80080a2:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80080a4:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80080a6:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80080a8:	f7ff fe74 	bl	8007d94 <MX_QSPI_Init>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f040 8091 	bne.w	80081d4 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80080b2:	2103      	movs	r1, #3
 80080b4:	483f      	ldr	r0, [pc, #252]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 80080b6:	f7ff f88e 	bl	80071d6 <MT25TL01G_ResetEnable>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	f040 8084 	bne.w	80081c8 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80080c0:	2103      	movs	r1, #3
 80080c2:	483c      	ldr	r0, [pc, #240]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 80080c4:	f7ff f8a8 	bl	8007218 <MT25TL01G_ResetMemory>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d17d      	bne.n	80081c8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80080cc:	7869      	ldrb	r1, [r5, #1]
 80080ce:	4839      	ldr	r0, [pc, #228]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 80080d0:	f7fe ff1e 	bl	8006f10 <MT25TL01G_AutoPollingMemReady>
 80080d4:	4601      	mov	r1, r0
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d176      	bne.n	80081c8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80080da:	4836      	ldr	r0, [pc, #216]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 80080dc:	f7ff f87b 	bl	80071d6 <MT25TL01G_ResetEnable>
 80080e0:	4601      	mov	r1, r0
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d170      	bne.n	80081c8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80080e6:	4833      	ldr	r0, [pc, #204]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 80080e8:	f7ff f896 	bl	8007218 <MT25TL01G_ResetMemory>
 80080ec:	4601      	mov	r1, r0
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d16a      	bne.n	80081c8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80080f2:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80080f4:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80080f6:	482f      	ldr	r0, [pc, #188]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80080f8:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80080fa:	f7fe ff09 	bl	8006f10 <MT25TL01G_AutoPollingMemReady>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d162      	bne.n	80081c8 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008102:	7869      	ldrb	r1, [r5, #1]
 8008104:	482b      	ldr	r0, [pc, #172]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 8008106:	f7fe ff72 	bl	8006fee <MT25TL01G_Enter4BytesAddressMode>
 800810a:	2800      	cmp	r0, #0
 800810c:	d15c      	bne.n	80081c8 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800810e:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8008112:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8008116:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008118:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800811c:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800811e:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008120:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8008122:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8008124:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8008128:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 800812a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800812c:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8008130:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008134:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008138:	481e      	ldr	r0, [pc, #120]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 800813a:	f003 fb33 	bl	800b7a4 <HAL_QSPI_Command>
 800813e:	2800      	cmp	r0, #0
 8008140:	d142      	bne.n	80081c8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008146:	f10d 0102 	add.w	r1, sp, #2
 800814a:	481a      	ldr	r0, [pc, #104]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 800814c:	f003 fbcb 	bl	800b8e6 <HAL_QSPI_Receive>
 8008150:	2800      	cmp	r0, #0
 8008152:	d139      	bne.n	80081c8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8008154:	7869      	ldrb	r1, [r5, #1]
 8008156:	4817      	ldr	r0, [pc, #92]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 8008158:	f7fe ff05 	bl	8006f66 <MT25TL01G_WriteEnable>
 800815c:	bba0      	cbnz	r0, 80081c8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800815e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008164:	a916      	add	r1, sp, #88	@ 0x58
 8008166:	4813      	ldr	r0, [pc, #76]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8008168:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800816a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800816e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008172:	051b      	lsls	r3, r3, #20
 8008174:	0d1b      	lsrs	r3, r3, #20
 8008176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800817a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800817e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008182:	f003 fb0f 	bl	800b7a4 <HAL_QSPI_Command>
 8008186:	b9f8      	cbnz	r0, 80081c8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800818c:	f10d 0102 	add.w	r1, sp, #2
 8008190:	4808      	ldr	r0, [pc, #32]	@ (80081b4 <BSP_QSPI_Init+0x34c>)
 8008192:	f003 fb4c 	bl	800b82e <HAL_QSPI_Transmit>
 8008196:	e00f      	b.n	80081b8 <BSP_QSPI_Init+0x350>
 8008198:	58024400 	.word	0x58024400
 800819c:	58020400 	.word	0x58020400
 80081a0:	58021800 	.word	0x58021800
 80081a4:	58020c00 	.word	0x58020c00
 80081a8:	58021c00 	.word	0x58021c00
 80081ac:	58021400 	.word	0x58021400
 80081b0:	08028890 	.word	0x08028890
 80081b4:	24000474 	.word	0x24000474
 80081b8:	b930      	cbnz	r0, 80081c8 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80081ba:	7862      	ldrb	r2, [r4, #1]
 80081bc:	7821      	ldrb	r1, [r4, #0]
 80081be:	f7ff fe1b 	bl	8007df8 <BSP_QSPI_ConfigFlash>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	f43f ae5a 	beq.w	8007e7c <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80081c8:	f06f 0004 	mvn.w	r0, #4
 80081cc:	e657      	b.n	8007e7e <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 80081ce:	f06f 0001 	mvn.w	r0, #1
 80081d2:	e654      	b.n	8007e7e <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 80081d4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80081d8:	e651      	b.n	8007e7e <BSP_QSPI_Init+0x16>
 80081da:	bf00      	nop

080081dc <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80081dc:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80081de:	4604      	mov	r4, r0
 80081e0:	b970      	cbnz	r0, 8008200 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 80081e2:	4b09      	ldr	r3, [pc, #36]	@ (8008208 <BSP_SDRAM_DeInit+0x2c>)
 80081e4:	4809      	ldr	r0, [pc, #36]	@ (800820c <BSP_SDRAM_DeInit+0x30>)
 80081e6:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80081e8:	f004 ffc8 	bl	800d17c <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80081ec:	207a      	movs	r0, #122	@ 0x7a
 80081ee:	f000 fb49 	bl	8008884 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80081f2:	4807      	ldr	r0, [pc, #28]	@ (8008210 <BSP_SDRAM_DeInit+0x34>)
 80081f4:	4b07      	ldr	r3, [pc, #28]	@ (8008214 <BSP_SDRAM_DeInit+0x38>)
 80081f6:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80081f8:	f003 f80c 	bl	800b214 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80081fc:	4620      	mov	r0, r4
}
 80081fe:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8008200:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8008204:	e7fb      	b.n	80081fe <BSP_SDRAM_DeInit+0x22>
 8008206:	bf00      	nop
 8008208:	52004140 	.word	0x52004140
 800820c:	2400cf8c 	.word	0x2400cf8c
 8008210:	2400ce94 	.word	0x2400ce94
 8008214:	52000040 	.word	0x52000040

08008218 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8008218:	2201      	movs	r2, #1
 800821a:	4915      	ldr	r1, [pc, #84]	@ (8008270 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800821c:	4b15      	ldr	r3, [pc, #84]	@ (8008274 <MX_SDRAM_Init+0x5c>)
{
 800821e:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8008220:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8008224:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008226:	2104      	movs	r1, #4
 8008228:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800822a:	2440      	movs	r4, #64	@ 0x40
{
 800822c:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800822e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8008232:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8008236:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800823a:	2200      	movs	r2, #0
 800823c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8008240:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8008244:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8008248:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800824a:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800824c:	2207      	movs	r2, #7
 800824e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8008250:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8008254:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8008256:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8008258:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800825c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8008260:	f004 ff64 	bl	800d12c <HAL_SDRAM_Init>
}
 8008264:	3800      	subs	r0, #0
 8008266:	bf18      	it	ne
 8008268:	2001      	movne	r0, #1
 800826a:	b008      	add	sp, #32
 800826c:	bd10      	pop	{r4, pc}
 800826e:	bf00      	nop
 8008270:	52004140 	.word	0x52004140
 8008274:	2400cf8c 	.word	0x2400cf8c

08008278 <BSP_SDRAM_Init>:
{
 8008278:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800827a:	4605      	mov	r5, r0
{
 800827c:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800827e:	2800      	cmp	r0, #0
 8008280:	f040 80dd 	bne.w	800843e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8008284:	4b71      	ldr	r3, [pc, #452]	@ (800844c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008286:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008288:	a909      	add	r1, sp, #36	@ 0x24
 800828a:	4871      	ldr	r0, [pc, #452]	@ (8008450 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800828c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8008290:	4c70      	ldr	r4, [pc, #448]	@ (8008454 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8008292:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8008296:	4e70      	ldr	r6, [pc, #448]	@ (8008458 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8008298:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800829c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80082a0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80082a4:	9201      	str	r2, [sp, #4]
 80082a6:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80082a8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80082ac:	f042 0201 	orr.w	r2, r2, #1
 80082b0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80082b4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80082b8:	f002 0201 	and.w	r2, r2, #1
 80082bc:	9202      	str	r2, [sp, #8]
 80082be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80082c4:	f042 0208 	orr.w	r2, r2, #8
 80082c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80082cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80082d0:	f002 0208 	and.w	r2, r2, #8
 80082d4:	9203      	str	r2, [sp, #12]
 80082d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80082d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80082dc:	f042 0210 	orr.w	r2, r2, #16
 80082e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80082e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80082e8:	f002 0210 	and.w	r2, r2, #16
 80082ec:	9204      	str	r2, [sp, #16]
 80082ee:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80082f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80082f4:	f042 0220 	orr.w	r2, r2, #32
 80082f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80082fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008300:	f002 0220 	and.w	r2, r2, #32
 8008304:	9205      	str	r2, [sp, #20]
 8008306:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008308:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800830c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008310:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8008314:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008318:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800831c:	9206      	str	r2, [sp, #24]
 800831e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008320:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008324:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008328:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800832c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8008330:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008334:	9207      	str	r2, [sp, #28]
 8008336:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008338:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800833c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008340:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008344:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800834a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834e:	9308      	str	r3, [sp, #32]
 8008350:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008352:	2301      	movs	r3, #1
 8008354:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008358:	230c      	movs	r3, #12
 800835a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800835e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8008362:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008364:	f001 f8a4 	bl	80094b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008368:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800836c:	a909      	add	r1, sp, #36	@ 0x24
 800836e:	483b      	ldr	r0, [pc, #236]	@ (800845c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008370:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008372:	f001 f89d 	bl	80094b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8008376:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800837a:	a909      	add	r1, sp, #36	@ 0x24
 800837c:	4838      	ldr	r0, [pc, #224]	@ (8008460 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800837e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008380:	f001 f896 	bl	80094b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8008384:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008388:	a909      	add	r1, sp, #36	@ 0x24
 800838a:	4836      	ldr	r0, [pc, #216]	@ (8008464 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800838c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800838e:	f001 f88f 	bl	80094b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8008392:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8008396:	a909      	add	r1, sp, #36	@ 0x24
 8008398:	4833      	ldr	r0, [pc, #204]	@ (8008468 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800839a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800839c:	f001 f888 	bl	80094b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80083a0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80083a4:	a909      	add	r1, sp, #36	@ 0x24
 80083a6:	4831      	ldr	r0, [pc, #196]	@ (800846c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80083a8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80083aa:	f001 f881 	bl	80094b0 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80083ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80083b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80083b6:	f240 2002 	movw	r0, #514	@ 0x202
 80083ba:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80083be:	6334      	str	r4, [r6, #48]	@ 0x30
 80083c0:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80083c2:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80083c6:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80083ca:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80083cc:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80083ce:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 80083d0:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80083d2:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80083d6:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80083da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80083de:	4b24      	ldr	r3, [pc, #144]	@ (8008470 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80083e0:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80083e2:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80083e4:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80083e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80083ec:	f002 ff12 	bl	800b214 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80083f0:	4620      	mov	r0, r4
 80083f2:	f002 fea0 	bl	800b136 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80083f6:	462a      	mov	r2, r5
 80083f8:	210f      	movs	r1, #15
 80083fa:	207a      	movs	r0, #122	@ 0x7a
 80083fc:	f000 fa02 	bl	8008804 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8008400:	207a      	movs	r0, #122	@ 0x7a
 8008402:	f000 fa31 	bl	8008868 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ff06 	bl	8008218 <MX_SDRAM_Init>
 800840c:	b9d0      	cbnz	r0, 8008444 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800840e:	4919      	ldr	r1, [pc, #100]	@ (8008474 <BSP_SDRAM_Init+0x1fc>)
 8008410:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8008412:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8008416:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800841a:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800841c:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8008420:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8008422:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8008426:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800842a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800842c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800842e:	f7fe fd31 	bl	8006e94 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8008432:	2800      	cmp	r0, #0
 8008434:	bf18      	it	ne
 8008436:	f06f 0004 	mvnne.w	r0, #4
}
 800843a:	b00f      	add	sp, #60	@ 0x3c
 800843c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800843e:	f06f 0001 	mvn.w	r0, #1
 8008442:	e7fa      	b.n	800843a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008448:	e7f7      	b.n	800843a <BSP_SDRAM_Init+0x1c2>
 800844a:	bf00      	nop
 800844c:	58024400 	.word	0x58024400
 8008450:	58020c00 	.word	0x58020c00
 8008454:	2400cf00 	.word	0x2400cf00
 8008458:	2400cf8c 	.word	0x2400cf8c
 800845c:	58021000 	.word	0x58021000
 8008460:	58021400 	.word	0x58021400
 8008464:	58021800 	.word	0x58021800
 8008468:	58021c00 	.word	0x58021c00
 800846c:	58022000 	.word	0x58022000
 8008470:	52000040 	.word	0x52000040
 8008474:	2400cf6c 	.word	0x2400cf6c

08008478 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8008478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	460c      	mov	r4, r1
 800847e:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008480:	4606      	mov	r6, r0
 8008482:	2800      	cmp	r0, #0
 8008484:	d15c      	bne.n	8008540 <BSP_TS_Init+0xc8>
 8008486:	680b      	ldr	r3, [r1, #0]
 8008488:	1e5a      	subs	r2, r3, #1
 800848a:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800848e:	d257      	bcs.n	8008540 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8008490:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8008492:	1e51      	subs	r1, r2, #1
 8008494:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8008498:	d252      	bcs.n	8008540 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800849a:	4293      	cmp	r3, r2
 800849c:	bf28      	it	cs
 800849e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80084a0:	68e2      	ldr	r2, [r4, #12]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d84c      	bhi.n	8008540 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80084a6:	2370      	movs	r3, #112	@ 0x70
 80084a8:	2254      	movs	r2, #84	@ 0x54
 80084aa:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80084ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008584 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80084b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 80084b6:	4b2e      	ldr	r3, [pc, #184]	@ (8008570 <BSP_TS_Init+0xf8>)
 80084b8:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80084ba:	4b2e      	ldr	r3, [pc, #184]	@ (8008574 <BSP_TS_Init+0xfc>)
 80084bc:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80084be:	4b2e      	ldr	r3, [pc, #184]	@ (8008578 <BSP_TS_Init+0x100>)
 80084c0:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80084c2:	4b2e      	ldr	r3, [pc, #184]	@ (800857c <BSP_TS_Init+0x104>)
 80084c4:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 80084c6:	4b2e      	ldr	r3, [pc, #184]	@ (8008580 <BSP_TS_Init+0x108>)
 80084c8:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80084ca:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80084ce:	a906      	add	r1, sp, #24
 80084d0:	482c      	ldr	r0, [pc, #176]	@ (8008584 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80084d2:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80084d6:	f7fe fbe3 	bl	8006ca0 <FT6X06_RegisterBusIO>
 80084da:	b9c0      	cbnz	r0, 800850e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 80084dc:	4669      	mov	r1, sp
 80084de:	4829      	ldr	r0, [pc, #164]	@ (8008584 <BSP_TS_Init+0x10c>)
 80084e0:	f7fe fb28 	bl	8006b34 <FT6X06_ReadID>
 80084e4:	b998      	cbnz	r0, 800850e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 80084e6:	9b00      	ldr	r3, [sp, #0]
 80084e8:	2b11      	cmp	r3, #17
 80084ea:	d110      	bne.n	800850e <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80084ec:	a903      	add	r1, sp, #12
 80084ee:	4825      	ldr	r0, [pc, #148]	@ (8008584 <BSP_TS_Init+0x10c>)
 80084f0:	f7fe fad4 	bl	8006a9c <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 80084f4:	4f24      	ldr	r7, [pc, #144]	@ (8008588 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80084f6:	4b25      	ldr	r3, [pc, #148]	@ (800858c <BSP_TS_Init+0x114>)
 80084f8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008594 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80084fc:	4821      	ldr	r0, [pc, #132]	@ (8008584 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80084fe:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8008502:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4798      	blx	r3
 800850a:	4605      	mov	r5, r0
 800850c:	b1d8      	cbz	r0, 8008546 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 800850e:	b116      	cbz	r6, 8008516 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8008510:	f04f 35ff 	mov.w	r5, #4294967295
 8008514:	e010      	b.n	8008538 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8008516:	2601      	movs	r6, #1
 8008518:	e7d7      	b.n	80084ca <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800851a:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800851c:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800851e:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8008520:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008522:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8008524:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008526:	68e3      	ldr	r3, [r4, #12]
 8008528:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800852a:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800852c:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800852e:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008530:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8008532:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8008534:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8008538:	4628      	mov	r0, r5
 800853a:	b00c      	add	sp, #48	@ 0x30
 800853c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8008540:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8008544:	e7f8      	b.n	8008538 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8008546:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8008548:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800854a:	4e11      	ldr	r6, [pc, #68]	@ (8008590 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800854c:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800854e:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8008550:	6863      	ldr	r3, [r4, #4]
 8008552:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8008554:	68a3      	ldr	r3, [r4, #8]
 8008556:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8008558:	68e3      	ldr	r3, [r4, #12]
 800855a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800855c:	f8d8 3000 	ldr.w	r3, [r8]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	4798      	blx	r3
 8008564:	2800      	cmp	r0, #0
 8008566:	dad8      	bge.n	800851a <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008568:	f06f 0504 	mvn.w	r5, #4
 800856c:	e7e4      	b.n	8008538 <BSP_TS_Init+0xc0>
 800856e:	bf00      	nop
 8008570:	08007a81 	.word	0x08007a81
 8008574:	080079ed 	.word	0x080079ed
 8008578:	08007d5d 	.word	0x08007d5d
 800857c:	08007d29 	.word	0x08007d29
 8008580:	08007d91 	.word	0x08007d91
 8008584:	2400cfc0 	.word	0x2400cfc0
 8008588:	2400cfe8 	.word	0x2400cfe8
 800858c:	24000038 	.word	0x24000038
 8008590:	2400cfec 	.word	0x2400cfec
 8008594:	2400d014 	.word	0x2400d014

08008598 <BSP_TS_GetState>:
{
 8008598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859a:	460c      	mov	r4, r1
 800859c:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 800859e:	2800      	cmp	r0, #0
 80085a0:	d14d      	bne.n	800863e <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80085a2:	4b28      	ldr	r3, [pc, #160]	@ (8008644 <BSP_TS_GetState+0xac>)
 80085a4:	a901      	add	r1, sp, #4
 80085a6:	4a28      	ldr	r2, [pc, #160]	@ (8008648 <BSP_TS_GetState+0xb0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6810      	ldr	r0, [r2, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	4798      	blx	r3
 80085b0:	2800      	cmp	r0, #0
 80085b2:	db41      	blt.n	8008638 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80085b4:	4925      	ldr	r1, [pc, #148]	@ (800864c <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 80085b6:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80085b8:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80085ba:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 80085bc:	2e00      	cmp	r6, #0
 80085be:	d037      	beq.n	8008630 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80085c0:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80085c2:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80085c6:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 80085ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80085ce:	bf1e      	ittt	ne
 80085d0:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 80085d2:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 80085d4:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80085d6:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80085da:	bf1c      	itt	ne
 80085dc:	f10e 3cff 	addne.w	ip, lr, #4294967295
 80085e0:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80085e4:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80085e8:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80085ea:	bf44      	itt	mi
 80085ec:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 80085f0:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80085f2:	680f      	ldr	r7, [r1, #0]
 80085f4:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80085f6:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80085f8:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80085fa:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80085fc:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80085fe:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8008602:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8008606:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8008608:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800860a:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800860c:	bf8c      	ite	hi
 800860e:	eba2 0c05 	subhi.w	ip, r2, r5
 8008612:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8008616:	4283      	cmp	r3, r0
 8008618:	bf8c      	ite	hi
 800861a:	1a1e      	subhi	r6, r3, r0
 800861c:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800861e:	4567      	cmp	r7, ip
 8008620:	d301      	bcc.n	8008626 <BSP_TS_GetState+0x8e>
 8008622:	42b7      	cmp	r7, r6
 8008624:	d205      	bcs.n	8008632 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8008626:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8008628:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800862a:	2000      	movs	r0, #0
}
 800862c:	b005      	add	sp, #20
 800862e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8008630:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8008632:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8008636:	e7f8      	b.n	800862a <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008638:	f06f 0004 	mvn.w	r0, #4
 800863c:	e7f6      	b.n	800862c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800863e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8008642:	e7f3      	b.n	800862c <BSP_TS_GetState+0x94>
 8008644:	2400d014 	.word	0x2400d014
 8008648:	2400cfe8 	.word	0x2400cfe8
 800864c:	2400cfec 	.word	0x2400cfec

08008650 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008650:	4b2d      	ldr	r3, [pc, #180]	@ (8008708 <SystemInit+0xb8>)
 8008652:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008656:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800865a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	f042 0210 	orr.w	r2, r2, #16
 8008664:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008666:	4a29      	ldr	r2, [pc, #164]	@ (800870c <SystemInit+0xbc>)
 8008668:	6813      	ldr	r3, [r2, #0]
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	2b06      	cmp	r3, #6
 8008670:	d805      	bhi.n	800867e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008672:	6813      	ldr	r3, [r2, #0]
 8008674:	f023 030f 	bic.w	r3, r3, #15
 8008678:	f043 0307 	orr.w	r3, r3, #7
 800867c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800867e:	4b24      	ldr	r3, [pc, #144]	@ (8008710 <SystemInit+0xc0>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008688:	2200      	movs	r2, #0
 800868a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800868c:	4a21      	ldr	r2, [pc, #132]	@ (8008714 <SystemInit+0xc4>)
 800868e:	6819      	ldr	r1, [r3, #0]
 8008690:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008692:	491e      	ldr	r1, [pc, #120]	@ (800870c <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8008694:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008696:	680a      	ldr	r2, [r1, #0]
 8008698:	0712      	lsls	r2, r2, #28
 800869a:	d505      	bpl.n	80086a8 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800869c:	680a      	ldr	r2, [r1, #0]
 800869e:	f022 020f 	bic.w	r2, r2, #15
 80086a2:	f042 0207 	orr.w	r2, r2, #7
 80086a6:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80086a8:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80086aa:	491b      	ldr	r1, [pc, #108]	@ (8008718 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 80086ac:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80086ae:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80086b0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80086b2:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80086b4:	4919      	ldr	r1, [pc, #100]	@ (800871c <SystemInit+0xcc>)
 80086b6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80086b8:	4919      	ldr	r1, [pc, #100]	@ (8008720 <SystemInit+0xd0>)
 80086ba:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80086bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80086be:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80086c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80086c2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80086c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80086c6:	6819      	ldr	r1, [r3, #0]
 80086c8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80086cc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80086ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80086d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80086d4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80086d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80086e0:	4b10      	ldr	r3, [pc, #64]	@ (8008724 <SystemInit+0xd4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	0c1b      	lsrs	r3, r3, #16
 80086e6:	041b      	lsls	r3, r3, #16
 80086e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ec:	d203      	bcs.n	80086f6 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80086ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008728 <SystemInit+0xd8>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80086f6:	4b0d      	ldr	r3, [pc, #52]	@ (800872c <SystemInit+0xdc>)
 80086f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80086fc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80086fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008702:	4b01      	ldr	r3, [pc, #4]	@ (8008708 <SystemInit+0xb8>)
 8008704:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8008706:	4770      	bx	lr
 8008708:	e000ed00 	.word	0xe000ed00
 800870c:	52002000 	.word	0x52002000
 8008710:	58024400 	.word	0x58024400
 8008714:	eaf6ed7f 	.word	0xeaf6ed7f
 8008718:	02020200 	.word	0x02020200
 800871c:	01ff0000 	.word	0x01ff0000
 8008720:	01010280 	.word	0x01010280
 8008724:	5c001000 	.word	0x5c001000
 8008728:	51008000 	.word	0x51008000
 800872c:	52004000 	.word	0x52004000

08008730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008730:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008732:	2003      	movs	r0, #3
 8008734:	f000 f854 	bl	80087e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008738:	f003 fcc2 	bl	800c0c0 <HAL_RCC_GetSysClockFreq>
 800873c:	490f      	ldr	r1, [pc, #60]	@ (800877c <HAL_Init+0x4c>)
 800873e:	4a10      	ldr	r2, [pc, #64]	@ (8008780 <HAL_Init+0x50>)
 8008740:	698b      	ldr	r3, [r1, #24]
 8008742:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008746:	5cd3      	ldrb	r3, [r2, r3]
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800874e:	698b      	ldr	r3, [r1, #24]
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	5cd3      	ldrb	r3, [r2, r3]
 8008756:	4a0b      	ldr	r2, [pc, #44]	@ (8008784 <HAL_Init+0x54>)
 8008758:	f003 031f 	and.w	r3, r3, #31
 800875c:	fa20 f303 	lsr.w	r3, r0, r3
 8008760:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008762:	4b09      	ldr	r3, [pc, #36]	@ (8008788 <HAL_Init+0x58>)
 8008764:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008766:	2000      	movs	r0, #0
 8008768:	f7f9 f894 	bl	8001894 <HAL_InitTick>
 800876c:	4604      	mov	r4, r0
 800876e:	b918      	cbnz	r0, 8008778 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008770:	f7f8 fd1c 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8008774:	4620      	mov	r0, r4
 8008776:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008778:	2401      	movs	r4, #1
 800877a:	e7fb      	b.n	8008774 <HAL_Init+0x44>
 800877c:	58024400 	.word	0x58024400
 8008780:	08028898 	.word	0x08028898
 8008784:	24000068 	.word	0x24000068
 8008788:	2400006c 	.word	0x2400006c

0800878c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800878c:	4a03      	ldr	r2, [pc, #12]	@ (800879c <HAL_IncTick+0x10>)
 800878e:	4b04      	ldr	r3, [pc, #16]	@ (80087a0 <HAL_IncTick+0x14>)
 8008790:	6811      	ldr	r1, [r2, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	440b      	add	r3, r1
 8008796:	6013      	str	r3, [r2, #0]
}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	2400d018 	.word	0x2400d018
 80087a0:	24000070 	.word	0x24000070

080087a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80087a4:	4b01      	ldr	r3, [pc, #4]	@ (80087ac <HAL_GetTick+0x8>)
 80087a6:	6818      	ldr	r0, [r3, #0]
}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	2400d018 	.word	0x2400d018

080087b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80087b4:	f7ff fff6 	bl	80087a4 <HAL_GetTick>
 80087b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087ba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80087bc:	bf1e      	ittt	ne
 80087be:	4b04      	ldrne	r3, [pc, #16]	@ (80087d0 <HAL_Delay+0x20>)
 80087c0:	781b      	ldrbne	r3, [r3, #0]
 80087c2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80087c4:	f7ff ffee 	bl	80087a4 <HAL_GetTick>
 80087c8:	1b43      	subs	r3, r0, r5
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	d3fa      	bcc.n	80087c4 <HAL_Delay+0x14>
  {
  }
}
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	24000070 	.word	0x24000070

080087d4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80087d4:	4b01      	ldr	r3, [pc, #4]	@ (80087dc <HAL_GetREVID+0x8>)
 80087d6:	6818      	ldr	r0, [r3, #0]
}
 80087d8:	0c00      	lsrs	r0, r0, #16
 80087da:	4770      	bx	lr
 80087dc:	5c001000 	.word	0x5c001000

080087e0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087e0:	4907      	ldr	r1, [pc, #28]	@ (8008800 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80087e2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087e4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80087e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80087ee:	0412      	lsls	r2, r2, #16
 80087f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80087f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80087fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80087fe:	4770      	bx	lr
 8008800:	e000ed00 	.word	0xe000ed00

08008804 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008804:	4b16      	ldr	r3, [pc, #88]	@ (8008860 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008806:	b530      	push	{r4, r5, lr}
 8008808:	68dc      	ldr	r4, [r3, #12]
 800880a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800880e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008812:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008814:	2b04      	cmp	r3, #4
 8008816:	bf28      	it	cs
 8008818:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800881a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800881c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008820:	bf8c      	ite	hi
 8008822:	3c03      	subhi	r4, #3
 8008824:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008826:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800882a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800882c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008830:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008834:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008838:	fa03 f304 	lsl.w	r3, r3, r4
 800883c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008840:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008844:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8008846:	db06      	blt.n	8008856 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008848:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800884c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008850:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008854:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008856:	f000 000f 	and.w	r0, r0, #15
 800885a:	4a02      	ldr	r2, [pc, #8]	@ (8008864 <HAL_NVIC_SetPriority+0x60>)
 800885c:	5413      	strb	r3, [r2, r0]
 800885e:	e7f9      	b.n	8008854 <HAL_NVIC_SetPriority+0x50>
 8008860:	e000ed00 	.word	0xe000ed00
 8008864:	e000ed14 	.word	0xe000ed14

08008868 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008868:	2800      	cmp	r0, #0
 800886a:	db07      	blt.n	800887c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800886c:	2301      	movs	r3, #1
 800886e:	0941      	lsrs	r1, r0, #5
 8008870:	f000 001f 	and.w	r0, r0, #31
 8008874:	4a02      	ldr	r2, [pc, #8]	@ (8008880 <HAL_NVIC_EnableIRQ+0x18>)
 8008876:	4083      	lsls	r3, r0
 8008878:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	e000e100 	.word	0xe000e100

08008884 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008884:	2800      	cmp	r0, #0
 8008886:	db0c      	blt.n	80088a2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008888:	0943      	lsrs	r3, r0, #5
 800888a:	2201      	movs	r2, #1
 800888c:	f000 001f 	and.w	r0, r0, #31
 8008890:	4904      	ldr	r1, [pc, #16]	@ (80088a4 <HAL_NVIC_DisableIRQ+0x20>)
 8008892:	3320      	adds	r3, #32
 8008894:	4082      	lsls	r2, r0
 8008896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800889a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800889e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80088a2:	4770      	bx	lr
 80088a4:	e000e100 	.word	0xe000e100

080088a8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80088a8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80088ac:	4b04      	ldr	r3, [pc, #16]	@ (80088c0 <HAL_MPU_Disable+0x18>)
 80088ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088b0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80088b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	e000ed00 	.word	0xe000ed00

080088c4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80088c4:	4b06      	ldr	r3, [pc, #24]	@ (80088e0 <HAL_MPU_Enable+0x1c>)
 80088c6:	f040 0001 	orr.w	r0, r0, #1
 80088ca:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80088ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088d0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80088d4:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80088d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80088da:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80088de:	4770      	bx	lr
 80088e0:	e000ed00 	.word	0xe000ed00

080088e4 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80088e4:	7843      	ldrb	r3, [r0, #1]
 80088e6:	4a14      	ldr	r2, [pc, #80]	@ (8008938 <HAL_MPU_ConfigRegion+0x54>)
 80088e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80088ec:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80088f8:	6843      	ldr	r3, [r0, #4]
 80088fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80088fe:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008900:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008902:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008904:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008908:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800890a:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800890c:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800890e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008912:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008914:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008918:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800891a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800891e:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008924:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008926:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800892a:	7a01      	ldrb	r1, [r0, #8]
 800892c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008930:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	e000ed00 	.word	0xe000ed00

0800893c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800893c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800893e:	4604      	mov	r4, r0
 8008940:	b908      	cbnz	r0, 8008946 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8008942:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008944:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008946:	7f43      	ldrb	r3, [r0, #29]
 8008948:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800894c:	b913      	cbnz	r3, 8008954 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800894e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8008950:	f7f8 fc44 	bl	80011dc <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008954:	2302      	movs	r3, #2
 8008956:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008958:	7923      	ldrb	r3, [r4, #4]
 800895a:	b9e3      	cbnz	r3, 8008996 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	4a13      	ldr	r2, [pc, #76]	@ (80089ac <HAL_CRC_Init+0x70>)
 8008960:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	f022 0218 	bic.w	r2, r2, #24
 8008968:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800896a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800896c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800896e:	b9d2      	cbnz	r2, 80089a6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008970:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008974:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8008976:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	6961      	ldr	r1, [r4, #20]
 800897c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008980:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008982:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008984:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008986:	689a      	ldr	r2, [r3, #8]
 8008988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800898c:	430a      	orrs	r2, r1
 800898e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8008990:	2301      	movs	r3, #1
 8008992:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8008994:	e7d6      	b.n	8008944 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008996:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f808 	bl	80089b0 <HAL_CRCEx_Polynomial_Set>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d0e2      	beq.n	800896a <HAL_CRC_Init+0x2e>
 80089a4:	e7cd      	b.n	8008942 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80089a6:	6922      	ldr	r2, [r4, #16]
 80089a8:	e7e4      	b.n	8008974 <HAL_CRC_Init+0x38>
 80089aa:	bf00      	nop
 80089ac:	04c11db7 	.word	0x04c11db7

080089b0 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80089b0:	07cb      	lsls	r3, r1, #31
{
 80089b2:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80089b4:	d50d      	bpl.n	80089d2 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80089b6:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80089b8:	3b01      	subs	r3, #1
 80089ba:	d31d      	bcc.n	80089f8 <HAL_CRCEx_Polynomial_Set+0x48>
 80089bc:	fa21 f403 	lsr.w	r4, r1, r3
 80089c0:	07e4      	lsls	r4, r4, #31
 80089c2:	d5f9      	bpl.n	80089b8 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80089c4:	2a10      	cmp	r2, #16
 80089c6:	d013      	beq.n	80089f0 <HAL_CRCEx_Polynomial_Set+0x40>
 80089c8:	2a10      	cmp	r2, #16
 80089ca:	d804      	bhi.n	80089d6 <HAL_CRCEx_Polynomial_Set+0x26>
 80089cc:	b13a      	cbz	r2, 80089de <HAL_CRCEx_Polynomial_Set+0x2e>
 80089ce:	2a08      	cmp	r2, #8
 80089d0:	d010      	beq.n	80089f4 <HAL_CRCEx_Polynomial_Set+0x44>
 80089d2:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80089d4:	e00b      	b.n	80089ee <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80089d6:	2a18      	cmp	r2, #24
 80089d8:	d1fb      	bne.n	80089d2 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80089da:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80089dc:	d8f9      	bhi.n	80089d2 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80089de:	6800      	ldr	r0, [r0, #0]
 80089e0:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80089e2:	6883      	ldr	r3, [r0, #8]
 80089e4:	f023 0318 	bic.w	r3, r3, #24
 80089e8:	4313      	orrs	r3, r2
 80089ea:	6083      	str	r3, [r0, #8]
 80089ec:	2000      	movs	r0, #0
}
 80089ee:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80089f0:	2b07      	cmp	r3, #7
 80089f2:	e7f3      	b.n	80089dc <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80089f4:	2b0f      	cmp	r3, #15
 80089f6:	e7f1      	b.n	80089dc <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80089f8:	2a10      	cmp	r2, #16
 80089fa:	d1e5      	bne.n	80089c8 <HAL_CRCEx_Polynomial_Set+0x18>
 80089fc:	e7e9      	b.n	80089d2 <HAL_CRCEx_Polynomial_Set+0x22>

080089fe <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80089fe:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008a00:	4604      	mov	r4, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d036      	beq.n	8008a74 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008a06:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8008a0a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008a0e:	b91b      	cbnz	r3, 8008a18 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008a10:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008a14:	f7f8 fbfa 	bl	800120c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008a18:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008a1a:	69e0      	ldr	r0, [r4, #28]
 8008a1c:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008a1e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008a26:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8008a28:	6819      	ldr	r1, [r3, #0]
 8008a2a:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8008a2e:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8008a32:	430a      	orrs	r2, r1
 8008a34:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008a36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008a38:	68a2      	ldr	r2, [r4, #8]
 8008a3a:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8008a3e:	4302      	orrs	r2, r0
 8008a40:	f021 0101 	bic.w	r1, r1, #1
 8008a44:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008a46:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8008a48:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a4c:	0c12      	lsrs	r2, r2, #16
 8008a4e:	0412      	lsls	r2, r2, #16
 8008a50:	430a      	orrs	r2, r1
 8008a52:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008a54:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008a56:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8008a5a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8008a5e:	0552      	lsls	r2, r2, #21
 8008a60:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008a64:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8008a66:	430a      	orrs	r2, r1
 8008a68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008a6a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008a6c:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008a6e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8008a72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008a74:	2001      	movs	r0, #1
 8008a76:	e7fc      	b.n	8008a72 <HAL_DMA2D_Init+0x74>

08008a78 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8008a78:	4770      	bx	lr

08008a7a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8008a7a:	4770      	bx	lr

08008a7c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008a7c:	6803      	ldr	r3, [r0, #0]
{
 8008a7e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008a80:	685e      	ldr	r6, [r3, #4]
{
 8008a82:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008a84:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008a86:	07f2      	lsls	r2, r6, #31
 8008a88:	d514      	bpl.n	8008ab4 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008a8a:	05e9      	lsls	r1, r5, #23
 8008a8c:	d512      	bpl.n	8008ab4 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a94:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008a96:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8008a98:	f042 0201 	orr.w	r2, r2, #1
 8008a9c:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008aa2:	2304      	movs	r3, #4
 8008aa4:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008aae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008ab0:	b103      	cbz	r3, 8008ab4 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8008ab2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008ab4:	06b2      	lsls	r2, r6, #26
 8008ab6:	d516      	bpl.n	8008ae6 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008ab8:	04ab      	lsls	r3, r5, #18
 8008aba:	d514      	bpl.n	8008ae6 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ac4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008aca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008acc:	f043 0302 	orr.w	r3, r3, #2
 8008ad0:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008ad2:	2304      	movs	r3, #4
 8008ad4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008ade:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008ae0:	b10b      	cbz	r3, 8008ae6 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008ae6:	0730      	lsls	r0, r6, #28
 8008ae8:	d516      	bpl.n	8008b18 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008aea:	0529      	lsls	r1, r5, #20
 8008aec:	d514      	bpl.n	8008b18 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008af6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008af8:	2208      	movs	r2, #8
 8008afa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008afe:	f043 0304 	orr.w	r3, r3, #4
 8008b02:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008b04:	2304      	movs	r3, #4
 8008b06:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8008b10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b12:	b10b      	cbz	r3, 8008b18 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8008b14:	4620      	mov	r0, r4
 8008b16:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008b18:	0772      	lsls	r2, r6, #29
 8008b1a:	d50b      	bpl.n	8008b34 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008b1c:	056b      	lsls	r3, r5, #21
 8008b1e:	d509      	bpl.n	8008b34 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008b20:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008b22:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008b30:	f7ff ffa2 	bl	8008a78 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008b34:	07b0      	lsls	r0, r6, #30
 8008b36:	d514      	bpl.n	8008b62 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008b38:	05a9      	lsls	r1, r5, #22
 8008b3a:	d512      	bpl.n	8008b62 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008b44:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008b46:	2202      	movs	r2, #2
 8008b48:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008b4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b4c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008b54:	2300      	movs	r3, #0
 8008b56:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8008b5a:	6a23      	ldr	r3, [r4, #32]
 8008b5c:	b10b      	cbz	r3, 8008b62 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008b62:	06f2      	lsls	r2, r6, #27
 8008b64:	d513      	bpl.n	8008b8e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008b66:	04eb      	lsls	r3, r5, #19
 8008b68:	d511      	bpl.n	8008b8e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008b6a:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008b6c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b74:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008b76:	2210      	movs	r2, #16
 8008b78:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008b7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b7c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8008b84:	2300      	movs	r3, #0
 8008b86:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008b8a:	f7ff ff76 	bl	8008a7a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}

08008b90 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	4607      	mov	r7, r0
 8008b96:	460d      	mov	r5, r1
 8008b98:	4614      	mov	r4, r2
 8008b9a:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b9c:	f7ff fe02 	bl	80087a4 <HAL_GetTick>
 8008ba0:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008ba6:	07d2      	lsls	r2, r2, #31
 8008ba8:	d50a      	bpl.n	8008bc0 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008baa:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8008bae:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8008bb0:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008bb2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008bb6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8008bba:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008bc0:	f7ff fdf0 	bl	80087a4 <HAL_GetTick>
 8008bc4:	eba0 0008 	sub.w	r0, r0, r8
 8008bc8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008bcc:	d9e9      	bls.n	8008ba2 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8008bce:	2003      	movs	r0, #3
 8008bd0:	e7f4      	b.n	8008bbc <DSI_ShortWrite.constprop.0+0x2c>

08008bd2 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008bd2:	7c03      	ldrb	r3, [r0, #16]
{
 8008bd4:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d05b      	beq.n	8008c92 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8008bda:	6803      	ldr	r3, [r0, #0]
 8008bdc:	2000      	movs	r0, #0
 8008bde:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008be2:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008be6:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8008be8:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8008bea:	d507      	bpl.n	8008bfc <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8008bec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008bf0:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8008bf4:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8008bf8:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8008bfc:	0788      	lsls	r0, r1, #30
 8008bfe:	d505      	bpl.n	8008c0c <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8008c00:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8008c04:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8008c08:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8008c0c:	0748      	lsls	r0, r1, #29
 8008c0e:	d505      	bpl.n	8008c1c <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8008c10:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008c14:	f040 0001 	orr.w	r0, r0, #1
 8008c18:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8008c1c:	0708      	lsls	r0, r1, #28
 8008c1e:	d505      	bpl.n	8008c2c <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8008c20:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008c24:	f040 0002 	orr.w	r0, r0, #2
 8008c28:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8008c2c:	06c8      	lsls	r0, r1, #27
 8008c2e:	d505      	bpl.n	8008c3c <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8008c30:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008c34:	f040 000c 	orr.w	r0, r0, #12
 8008c38:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8008c3c:	0688      	lsls	r0, r1, #26
 8008c3e:	d505      	bpl.n	8008c4c <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8008c40:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008c44:	f040 0010 	orr.w	r0, r0, #16
 8008c48:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8008c4c:	0648      	lsls	r0, r1, #25
 8008c4e:	d505      	bpl.n	8008c5c <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8008c50:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008c54:	f040 0020 	orr.w	r0, r0, #32
 8008c58:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8008c5c:	0608      	lsls	r0, r1, #24
 8008c5e:	d505      	bpl.n	8008c6c <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8008c60:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008c64:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8008c68:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8008c6c:	05c8      	lsls	r0, r1, #23
 8008c6e:	d505      	bpl.n	8008c7c <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8008c70:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008c74:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008c78:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8008c7c:	0589      	lsls	r1, r1, #22
 8008c7e:	d505      	bpl.n	8008c8c <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8008c80:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8008c84:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8008c88:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8008c90:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008c92:	2002      	movs	r0, #2
}
 8008c94:	4770      	bx	lr
	...

08008c98 <HAL_DSI_Init>:
{
 8008c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008c9a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f000 80ea 	beq.w	8008e78 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008ca4:	7c43      	ldrb	r3, [r0, #17]
 8008ca6:	b90b      	cbnz	r3, 8008cac <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8008ca8:	f7f8 fad4 	bl	8001254 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008cac:	2303      	movs	r3, #3
 8008cae:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008cba:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008cbe:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8008cc2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008cc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8008cce:	f7ff fd69 	bl	80087a4 <HAL_GetTick>
 8008cd2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008cd4:	6822      	ldr	r2, [r4, #0]
 8008cd6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8008cda:	04d9      	lsls	r1, r3, #19
 8008cdc:	d56e      	bpl.n	8008dbc <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008cde:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008ce2:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8008ce6:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8008cea:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008cee:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008cf2:	e9d5 0300 	ldrd	r0, r3, [r5]
 8008cf6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008cf8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008cfc:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008cfe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8008d02:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008d04:	430b      	orrs	r3, r1
 8008d06:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008d12:	f043 0301 	orr.w	r3, r3, #1
 8008d16:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8008d1a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8008d26:	f7ff fd43 	bl	80087b0 <HAL_Delay>
  tickstart = HAL_GetTick();
 8008d2a:	f7ff fd3b 	bl	80087a4 <HAL_GetTick>
 8008d2e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008d36:	05d2      	lsls	r2, r2, #23
 8008d38:	d548      	bpl.n	8008dcc <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8008d3a:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008d3c:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8008d3e:	9202      	str	r2, [sp, #8]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	f042 0201 	orr.w	r2, r2, #1
 8008d46:	605a      	str	r2, [r3, #4]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	f002 0201 	and.w	r2, r2, #1
 8008d4e:	9202      	str	r2, [sp, #8]
 8008d50:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008d58:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008d5e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008d60:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8008d62:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008d66:	f042 0202 	orr.w	r2, r2, #2
 8008d6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8008d6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008d72:	f042 0204 	orr.w	r2, r2, #4
 8008d76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008d7a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008d7e:	f022 0203 	bic.w	r2, r2, #3
 8008d82:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008d86:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8008d90:	f7ff fd08 	bl	80087a4 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008d94:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008d96:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008d98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d9c:	079b      	lsls	r3, r3, #30
 8008d9e:	d025      	beq.n	8008dec <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008da6:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8008daa:	2b94      	cmp	r3, #148	@ 0x94
 8008dac:	d025      	beq.n	8008dfa <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008dae:	f7ff fcf9 	bl	80087a4 <HAL_GetTick>
 8008db2:	1b80      	subs	r0, r0, r6
 8008db4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008db8:	d9f2      	bls.n	8008da0 <HAL_DSI_Init+0x108>
 8008dba:	e014      	b.n	8008de6 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008dbc:	f7ff fcf2 	bl	80087a4 <HAL_GetTick>
 8008dc0:	1b80      	subs	r0, r0, r6
 8008dc2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008dc6:	d985      	bls.n	8008cd4 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8008dc8:	2003      	movs	r0, #3
 8008dca:	e053      	b.n	8008e74 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008dcc:	f7ff fcea 	bl	80087a4 <HAL_GetTick>
 8008dd0:	1b80      	subs	r0, r0, r6
 8008dd2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008dd6:	d9ab      	bls.n	8008d30 <HAL_DSI_Init+0x98>
 8008dd8:	e7f6      	b.n	8008dc8 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008dda:	f7ff fce3 	bl	80087a4 <HAL_GetTick>
 8008dde:	1b80      	subs	r0, r0, r6
 8008de0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008de4:	d902      	bls.n	8008dec <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8008de6:	2300      	movs	r3, #0
 8008de8:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8008dea:	e7ed      	b.n	8008dc8 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008df2:	f003 0314 	and.w	r3, r3, #20
 8008df6:	2b14      	cmp	r3, #20
 8008df8:	d1ef      	bne.n	8008dda <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008dfa:	686b      	ldr	r3, [r5, #4]
 8008dfc:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8008e00:	4a1e      	ldr	r2, [pc, #120]	@ (8008e7c <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8008e02:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	bf38      	it	cc
 8008e08:	2301      	movcc	r3, #1
 8008e0a:	435a      	muls	r2, r3
 8008e0c:	68ab      	ldr	r3, [r5, #8]
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	409a      	lsls	r2, r3
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	434b      	muls	r3, r1
 8008e18:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008e1c:	6823      	ldr	r3, [r4, #0]
 8008e1e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008e22:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8008e26:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008e2a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008e2e:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008e30:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008e32:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8008e36:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8008e3a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8008e3e:	9003      	str	r0, [sp, #12]
 8008e40:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8008e42:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8008e44:	f022 0201 	bic.w	r2, r2, #1
 8008e48:	605a      	str	r2, [r3, #4]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	f002 0201 	and.w	r2, r2, #1
 8008e50:	9203      	str	r2, [sp, #12]
 8008e52:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8008e54:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008e58:	f022 0203 	bic.w	r2, r2, #3
 8008e5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8008e60:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008e64:	430a      	orrs	r2, r1
 8008e66:	f042 0201 	orr.w	r2, r2, #1
 8008e6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8008e6e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8008e70:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8008e72:	7463      	strb	r3, [r4, #17]
}
 8008e74:	b004      	add	sp, #16
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008e78:	2001      	movs	r0, #1
 8008e7a:	e7fb      	b.n	8008e74 <HAL_DSI_Init+0x1dc>
 8008e7c:	003d0900 	.word	0x003d0900

08008e80 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8008e80:	4770      	bx	lr

08008e82 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008e82:	6803      	ldr	r3, [r0, #0]
 8008e84:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008e88:	07d1      	lsls	r1, r2, #31
{
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8008e8e:	d508      	bpl.n	8008ea2 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8008e90:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008e94:	07d2      	lsls	r2, r2, #31
 8008e96:	d504      	bpl.n	8008ea2 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8008e9e:	f7f9 f971 	bl	8002184 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008ea8:	0791      	lsls	r1, r2, #30
 8008eaa:	d509      	bpl.n	8008ec0 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008eac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008eb0:	0792      	lsls	r2, r2, #30
 8008eb2:	d505      	bpl.n	8008ec0 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008eb4:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008eb6:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008eb8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008ebc:	f7f9 f994 	bl	80021e8 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8008ec0:	69a3      	ldr	r3, [r4, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d04e      	beq.n	8008f64 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008ec6:	6821      	ldr	r1, [r4, #0]
 8008ec8:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008ecc:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8008ed0:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8008ed2:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008ed6:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8008eda:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008edc:	b291      	uxth	r1, r2
 8008ede:	b119      	cbz	r1, 8008ee8 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8008ee0:	6961      	ldr	r1, [r4, #20]
 8008ee2:	f041 0101 	orr.w	r1, r1, #1
 8008ee6:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008ee8:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8008eec:	d003      	beq.n	8008ef6 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8008eee:	6962      	ldr	r2, [r4, #20]
 8008ef0:	f042 0202 	orr.w	r2, r2, #2
 8008ef4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8008ef6:	07d8      	lsls	r0, r3, #31
 8008ef8:	d503      	bpl.n	8008f02 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008efa:	6962      	ldr	r2, [r4, #20]
 8008efc:	f042 0204 	orr.w	r2, r2, #4
 8008f00:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8008f02:	0799      	lsls	r1, r3, #30
 8008f04:	d503      	bpl.n	8008f0e <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8008f06:	6962      	ldr	r2, [r4, #20]
 8008f08:	f042 0208 	orr.w	r2, r2, #8
 8008f0c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8008f0e:	f013 0f0c 	tst.w	r3, #12
 8008f12:	d003      	beq.n	8008f1c <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8008f14:	6962      	ldr	r2, [r4, #20]
 8008f16:	f042 0210 	orr.w	r2, r2, #16
 8008f1a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8008f1c:	06da      	lsls	r2, r3, #27
 8008f1e:	d503      	bpl.n	8008f28 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8008f20:	6962      	ldr	r2, [r4, #20]
 8008f22:	f042 0220 	orr.w	r2, r2, #32
 8008f26:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8008f28:	0698      	lsls	r0, r3, #26
 8008f2a:	d503      	bpl.n	8008f34 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8008f2c:	6962      	ldr	r2, [r4, #20]
 8008f2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f32:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8008f34:	0659      	lsls	r1, r3, #25
 8008f36:	d503      	bpl.n	8008f40 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8008f38:	6962      	ldr	r2, [r4, #20]
 8008f3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f3e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8008f40:	061a      	lsls	r2, r3, #24
 8008f42:	d503      	bpl.n	8008f4c <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8008f44:	6962      	ldr	r2, [r4, #20]
 8008f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f4a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8008f4c:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8008f50:	d003      	beq.n	8008f5a <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8008f52:	6963      	ldr	r3, [r4, #20]
 8008f54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f58:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8008f5a:	6963      	ldr	r3, [r4, #20]
 8008f5c:	b113      	cbz	r3, 8008f64 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f7ff ff8e 	bl	8008e80 <HAL_DSI_ErrorCallback>
}
 8008f64:	bd10      	pop	{r4, pc}

08008f66 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f66:	7c02      	ldrb	r2, [r0, #16]
{
 8008f68:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008f6a:	2a01      	cmp	r2, #1
 8008f6c:	d00a      	beq.n	8008f84 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8008f6e:	6802      	ldr	r2, [r0, #0]
 8008f70:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008f72:	f020 0003 	bic.w	r0, r0, #3
 8008f76:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008f78:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008f7a:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008f7c:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008f7e:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8008f80:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008f82:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008f84:	2002      	movs	r0, #2
}
 8008f86:	4770      	bx	lr

08008f88 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008f88:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008f8a:	7c03      	ldrb	r3, [r0, #16]
{
 8008f8c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d069      	beq.n	8009066 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008f92:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008f94:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f98:	f042 0201 	orr.w	r2, r2, #1
 8008f9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8008f9e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008fa2:	f022 0201 	bic.w	r2, r2, #1
 8008fa6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008faa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008fae:	f042 0201 	orr.w	r2, r2, #1
 8008fb2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	f022 0203 	bic.w	r2, r2, #3
 8008fbc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	4302      	orrs	r2, r0
 8008fc2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008fc4:	695a      	ldr	r2, [r3, #20]
 8008fc6:	f022 0207 	bic.w	r2, r2, #7
 8008fca:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008fcc:	6958      	ldr	r0, [r3, #20]
 8008fce:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8008fd2:	432a      	orrs	r2, r5
 8008fd4:	694d      	ldr	r5, [r1, #20]
 8008fd6:	432a      	orrs	r2, r5
 8008fd8:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008fda:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008fdc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	f022 020f 	bic.w	r2, r2, #15
 8008fe4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	4302      	orrs	r2, r0
 8008fea:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008fec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008ff0:	f022 020e 	bic.w	r2, r2, #14
 8008ff4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008ff8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008ffc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8009000:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8009002:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8009006:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009008:	0c12      	lsrs	r2, r2, #16
 800900a:	0412      	lsls	r2, r2, #16
 800900c:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800900e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009010:	4302      	orrs	r2, r0
 8009012:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8009014:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8009018:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800901c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009020:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8009024:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8009028:	432a      	orrs	r2, r5
 800902a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800902c:	432a      	orrs	r2, r5
 800902e:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8009030:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009032:	432a      	orrs	r2, r5
 8009034:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009036:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8009038:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800903c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800903e:	f022 0201 	bic.w	r2, r2, #1
 8009042:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8009044:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009046:	430a      	orrs	r2, r1
 8009048:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800904a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8009056:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800905a:	f042 0202 	orr.w	r2, r2, #2
 800905e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8009062:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009064:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009066:	2002      	movs	r0, #2
 8009068:	e7fc      	b.n	8009064 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800906c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800906c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800906e:	7c03      	ldrb	r3, [r0, #16]
{
 8009070:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8009072:	2b01      	cmp	r3, #1
 8009074:	d029      	beq.n	80090ca <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8009076:	6800      	ldr	r0, [r0, #0]
 8009078:	4b15      	ldr	r3, [pc, #84]	@ (80090d0 <HAL_DSI_ConfigCommand+0x64>)
 800907a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800907c:	4023      	ands	r3, r4
 800907e:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8009080:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8009082:	e9d1 3500 	ldrd	r3, r5, [r1]
 8009086:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8009088:	688d      	ldr	r5, [r1, #8]
 800908a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800908c:	68cd      	ldr	r5, [r1, #12]
 800908e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8009090:	690d      	ldr	r5, [r1, #16]
 8009092:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8009094:	694d      	ldr	r5, [r1, #20]
 8009096:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8009098:	698d      	ldr	r5, [r1, #24]
 800909a:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800909c:	69cd      	ldr	r5, [r1, #28]
 800909e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80090a0:	6a0d      	ldr	r5, [r1, #32]
 80090a2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80090a4:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80090a6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80090a8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80090aa:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80090ac:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80090ae:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 80090b0:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80090b2:	4323      	orrs	r3, r4
 80090b4:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80090b6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80090b8:	f023 0302 	bic.w	r3, r3, #2
 80090bc:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80090be:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80090c0:	430b      	orrs	r3, r1
 80090c2:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80090c4:	2000      	movs	r0, #0
 80090c6:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 80090c8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80090ca:	2002      	movs	r0, #2
 80090cc:	e7fc      	b.n	80090c8 <HAL_DSI_ConfigCommand+0x5c>
 80090ce:	bf00      	nop
 80090d0:	fef080ff 	.word	0xfef080ff

080090d4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80090d4:	7c02      	ldrb	r2, [r0, #16]
{
 80090d6:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80090d8:	2a01      	cmp	r2, #1
 80090da:	d00a      	beq.n	80090f2 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80090dc:	6802      	ldr	r2, [r0, #0]
 80090de:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80090e0:	f020 001f 	bic.w	r0, r0, #31
 80090e4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80090e6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80090e8:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80090ea:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 80090ec:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 80090ee:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80090f0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80090f2:	2002      	movs	r0, #2
}
 80090f4:	4770      	bx	lr

080090f6 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80090f6:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80090f8:	7c03      	ldrb	r3, [r0, #16]
{
 80090fa:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d034      	beq.n	800916a <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8009100:	e9d1 0300 	ldrd	r0, r3, [r1]
 8009104:	4298      	cmp	r0, r3
 8009106:	bf38      	it	cc
 8009108:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009110:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8009114:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8009118:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800911c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009120:	4302      	orrs	r2, r0
 8009122:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8009126:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800912a:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800912e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009132:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8009136:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800913a:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800913c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8009140:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8009142:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009144:	432a      	orrs	r2, r5
 8009146:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009148:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800914a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800914e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009152:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8009156:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800915a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800915e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009162:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8009166:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009168:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800916a:	2002      	movs	r0, #2
 800916c:	e7fc      	b.n	8009168 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08009170 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8009170:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009172:	7c03      	ldrb	r3, [r0, #16]
{
 8009174:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8009176:	2b01      	cmp	r3, #1
 8009178:	d05b      	beq.n	8009232 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800917a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800917c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800917e:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8009180:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8009182:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8009186:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800918e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8009190:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8009192:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009194:	b292      	uxth	r2, r2
 8009196:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8009198:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800919a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800919e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80091a0:	4a25      	ldr	r2, [pc, #148]	@ (8009238 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80091a2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80091a4:	4010      	ands	r0, r2
 80091a6:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80091a8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80091aa:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80091ac:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80091ae:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80091b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80091b2:	4010      	ands	r0, r2
 80091b4:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80091b6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80091b8:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80091ba:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80091bc:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80091be:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80091c2:	4010      	ands	r0, r2
 80091c4:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80091c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80091cc:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80091ce:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80091d0:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80091d4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80091d8:	4010      	ands	r0, r2
 80091da:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80091de:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80091e2:	4328      	orrs	r0, r5
 80091e4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80091e8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80091ec:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80091f0:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80091f4:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80091f8:	698d      	ldr	r5, [r1, #24]
 80091fa:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80091fc:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80091fe:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8009200:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8009204:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8009208:	4010      	ands	r0, r2
 800920a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800920e:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8009212:	4328      	orrs	r0, r5
 8009214:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009218:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 800921c:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800921e:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8009220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8009224:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009228:	430a      	orrs	r2, r1
 800922a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800922e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8009230:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8009232:	2002      	movs	r0, #2
 8009234:	e7fc      	b.n	8009230 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8009236:	bf00      	nop
 8009238:	ffff0000 	.word	0xffff0000

0800923c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800923c:	7c03      	ldrb	r3, [r0, #16]
{
 800923e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8009240:	2b01      	cmp	r3, #1
 8009242:	d01c      	beq.n	800927e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8009244:	6802      	ldr	r2, [r0, #0]
 8009246:	2300      	movs	r3, #0
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	6851      	ldr	r1, [r2, #4]
 800924c:	f041 0101 	orr.w	r1, r1, #1
 8009250:	6051      	str	r1, [r2, #4]
 8009252:	6851      	ldr	r1, [r2, #4]
 8009254:	f001 0101 	and.w	r1, r1, #1
 8009258:	9100      	str	r1, [sp, #0]
 800925a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8009262:	f041 0108 	orr.w	r1, r1, #8
 8009266:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800926a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800926e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8009270:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009272:	f002 0208 	and.w	r2, r2, #8
 8009276:	9201      	str	r2, [sp, #4]
 8009278:	9a01      	ldr	r2, [sp, #4]
}
 800927a:	b002      	add	sp, #8
 800927c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800927e:	2002      	movs	r0, #2
 8009280:	e7fb      	b.n	800927a <HAL_DSI_Start+0x3e>

08009282 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009282:	7c02      	ldrb	r2, [r0, #16]
{
 8009284:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009286:	2a01      	cmp	r2, #1
 8009288:	d009      	beq.n	800929e <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800928a:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800928c:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800928e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8009292:	f042 0204 	orr.w	r2, r2, #4
 8009296:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800929a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800929c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800929e:	2002      	movs	r0, #2
}
 80092a0:	4770      	bx	lr

080092a2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80092a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80092a4:	7c05      	ldrb	r5, [r0, #16]
{
 80092a6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80092a8:	2d01      	cmp	r5, #1
 80092aa:	d009      	beq.n	80092c0 <HAL_DSI_ShortWrite+0x1e>
 80092ac:	2501      	movs	r5, #1
 80092ae:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80092b0:	9d06      	ldr	r5, [sp, #24]
 80092b2:	9500      	str	r5, [sp, #0]
 80092b4:	f7ff fc6c 	bl	8008b90 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80092b8:	2300      	movs	r3, #0
 80092ba:	7423      	strb	r3, [r4, #16]

  return status;
}
 80092bc:	b003      	add	sp, #12
 80092be:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80092c0:	2002      	movs	r0, #2
 80092c2:	e7fb      	b.n	80092bc <HAL_DSI_ShortWrite+0x1a>

080092c4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 80092c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c8:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80092ca:	7c03      	ldrb	r3, [r0, #16]
{
 80092cc:	4606      	mov	r6, r0
 80092ce:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 80092d0:	2b01      	cmp	r3, #1
{
 80092d2:	4615      	mov	r5, r2
 80092d4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 80092d8:	d052      	beq.n	8009380 <HAL_DSI_LongWrite+0xbc>
 80092da:	2301      	movs	r3, #1
 80092dc:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80092de:	f7ff fa61 	bl	80087a4 <HAL_GetTick>
 80092e2:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80092e4:	6832      	ldr	r2, [r6, #0]
 80092e6:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80092e8:	f013 0a01 	ands.w	sl, r3, #1
 80092ec:	d019      	beq.n	8009322 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80092ee:	2c03      	cmp	r4, #3
 80092f0:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80092f2:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80092f6:	bf28      	it	cs
 80092f8:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80092fa:	4283      	cmp	r3, r0
 80092fc:	d11d      	bne.n	800933a <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80092fe:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8009300:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8009302:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8009306:	bb10      	cbnz	r0, 800934e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8009308:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800930a:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 800930e:	0223      	lsls	r3, r4, #8
 8009310:	0224      	lsls	r4, r4, #8
 8009312:	b29b      	uxth	r3, r3
 8009314:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8009318:	431d      	orrs	r5, r3
 800931a:	4325      	orrs	r5, r4
 800931c:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800931e:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8009320:	e009      	b.n	8009336 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009322:	f7ff fa3f 	bl	80087a4 <HAL_GetTick>
 8009326:	eba0 000b 	sub.w	r0, r0, fp
 800932a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800932e:	d9d9      	bls.n	80092e4 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8009330:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009332:	f886 a010 	strb.w	sl, [r6, #16]
}
 8009336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800933a:	f818 1003 	ldrb.w	r1, [r8, r3]
 800933e:	3301      	adds	r3, #1
 8009340:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8009344:	fa01 f10c 	lsl.w	r1, r1, ip
 8009348:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800934c:	e7d5      	b.n	80092fa <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800934e:	2804      	cmp	r0, #4
    fifoword = 0U;
 8009350:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009354:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8009356:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8009358:	bf28      	it	cs
 800935a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800935e:	f813 8001 	ldrb.w	r8, [r3, r1]
 8009362:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8009366:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8009368:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800936c:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800936e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8009372:	d1f4      	bne.n	800935e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8009374:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8009378:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800937a:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800937e:	e7c2      	b.n	8009306 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8009380:	2002      	movs	r0, #2
 8009382:	e7d8      	b.n	8009336 <HAL_DSI_LongWrite+0x72>

08009384 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8009384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009388:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800938a:	7c03      	ldrb	r3, [r0, #16]
{
 800938c:	4605      	mov	r5, r0
 800938e:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8009390:	2b01      	cmp	r3, #1
{
 8009392:	4617      	mov	r7, r2
 8009394:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009398:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 800939c:	d06f      	beq.n	800947e <HAL_DSI_Read+0xfa>
 800939e:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80093a0:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 80093a2:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 80093a4:	d90d      	bls.n	80093c2 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80093a6:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80093aa:	2237      	movs	r2, #55	@ 0x37
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	b2f3      	uxtb	r3, r6
 80093b0:	f7ff fbee 	bl	8008b90 <DSI_ShortWrite.constprop.0>
 80093b4:	b128      	cbz	r0, 80093c2 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80093b6:	2300      	movs	r3, #0

      return HAL_ERROR;
 80093b8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80093ba:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80093bc:	b003      	add	sp, #12
 80093be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80093c2:	f1b9 0f06 	cmp.w	r9, #6
 80093c6:	d10f      	bne.n	80093e8 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80093c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80093ca:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80093cc:	021b      	lsls	r3, r3, #8
 80093ce:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 80093d2:	f043 0306 	orr.w	r3, r3, #6
 80093d6:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 80093d8:	f7ff f9e4 	bl	80087a4 <HAL_GetTick>
 80093dc:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 80093de:	2e00      	cmp	r6, #0
 80093e0:	dc27      	bgt.n	8009432 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 80093e2:	2000      	movs	r0, #0
 80093e4:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 80093e6:	e7e9      	b.n	80093bc <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80093e8:	f1b9 0f04 	cmp.w	r9, #4
 80093ec:	d105      	bne.n	80093fa <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80093ee:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80093f0:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80093f2:	f044 0404 	orr.w	r4, r4, #4
 80093f6:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 80093f8:	e7ee      	b.n	80093d8 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80093fa:	f1b9 0f14 	cmp.w	r9, #20
 80093fe:	d108      	bne.n	8009412 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8009400:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009404:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8009406:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009408:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800940c:	f044 0414 	orr.w	r4, r4, #20
 8009410:	e7f1      	b.n	80093f6 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8009412:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8009416:	d1ce      	bne.n	80093b6 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8009418:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800941c:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800941e:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8009424:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8009428:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800942c:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8009430:	e7e1      	b.n	80093f6 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8009432:	682a      	ldr	r2, [r5, #0]
 8009434:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8009436:	f013 0310 	ands.w	r3, r3, #16
 800943a:	d10d      	bne.n	8009458 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800943c:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800943e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009440:	4632      	mov	r2, r6
 8009442:	bf28      	it	cs
 8009444:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8009446:	00d9      	lsls	r1, r3, #3
 8009448:	fa20 f101 	lsr.w	r1, r0, r1
 800944c:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800944e:	3301      	adds	r3, #1
 8009450:	429a      	cmp	r2, r3
 8009452:	d1f8      	bne.n	8009446 <HAL_DSI_Read+0xc2>
        pdata++;
 8009454:	4417      	add	r7, r2
        datasize--;
 8009456:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009458:	f7ff f9a4 	bl	80087a4 <HAL_GetTick>
 800945c:	1b00      	subs	r0, r0, r4
 800945e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009462:	d903      	bls.n	800946c <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8009464:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8009466:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8009468:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800946a:	e7a7      	b.n	80093bc <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009470:	0652      	lsls	r2, r2, #25
 8009472:	d4b4      	bmi.n	80093de <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8009474:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009478:	069b      	lsls	r3, r3, #26
 800947a:	d49c      	bmi.n	80093b6 <HAL_DSI_Read+0x32>
 800947c:	e7af      	b.n	80093de <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800947e:	2002      	movs	r0, #2
 8009480:	e79c      	b.n	80093bc <HAL_DSI_Read+0x38>

08009482 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009482:	7c02      	ldrb	r2, [r0, #16]
{
 8009484:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8009486:	2a01      	cmp	r2, #1
 8009488:	d00f      	beq.n	80094aa <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800948a:	6802      	ldr	r2, [r0, #0]
 800948c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8009490:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8009494:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8009498:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800949c:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80094a0:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80094a2:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 80094a6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80094a8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80094aa:	2002      	movs	r0, #2
}
 80094ac:	4770      	bx	lr
	...

080094b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80094b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80094b4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094b6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800967c <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80094ba:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80094be:	680a      	ldr	r2, [r1, #0]
 80094c0:	fa32 f503 	lsrs.w	r5, r2, r3
 80094c4:	d102      	bne.n	80094cc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80094c6:	b003      	add	sp, #12
 80094c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80094cc:	2501      	movs	r5, #1
 80094ce:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 80094d2:	ea18 0202 	ands.w	r2, r8, r2
 80094d6:	f000 80bb 	beq.w	8009650 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094da:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80094dc:	2703      	movs	r7, #3
 80094de:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094e2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80094e6:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094ea:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80094ec:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094f0:	2f01      	cmp	r7, #1
 80094f2:	d834      	bhi.n	800955e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80094f4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80094f6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094fa:	68cf      	ldr	r7, [r1, #12]
 80094fc:	fa07 f70e 	lsl.w	r7, r7, lr
 8009500:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8009504:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8009506:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009508:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800950c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8009510:	409f      	lsls	r7, r3
 8009512:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8009516:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8009518:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800951a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800951c:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009520:	688f      	ldr	r7, [r1, #8]
 8009522:	fa07 f70e 	lsl.w	r7, r7, lr
 8009526:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800952a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800952c:	d119      	bne.n	8009562 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800952e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009532:	f003 0a07 	and.w	sl, r3, #7
 8009536:	f04f 0b0f 	mov.w	fp, #15
 800953a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800953e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8009542:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009546:	fa0b fb0a 	lsl.w	fp, fp, sl
 800954a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800954e:	690f      	ldr	r7, [r1, #16]
 8009550:	fa07 f70a 	lsl.w	r7, r7, sl
 8009554:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8009558:	f8c8 7020 	str.w	r7, [r8, #32]
 800955c:	e001      	b.n	8009562 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800955e:	2d03      	cmp	r5, #3
 8009560:	d1da      	bne.n	8009518 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8009562:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009564:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009568:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800956c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009570:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8009574:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009576:	d06b      	beq.n	8009650 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009578:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 800957c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009580:	f003 0c03 	and.w	ip, r3, #3
 8009584:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009588:	f045 0502 	orr.w	r5, r5, #2
 800958c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009590:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009594:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8009598:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800959c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80095a0:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095a4:	f005 0502 	and.w	r5, r5, #2
 80095a8:	9501      	str	r5, [sp, #4]
 80095aa:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80095ac:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80095ae:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80095b2:	4d31      	ldr	r5, [pc, #196]	@ (8009678 <HAL_GPIO_Init+0x1c8>)
 80095b4:	42a8      	cmp	r0, r5
 80095b6:	d04d      	beq.n	8009654 <HAL_GPIO_Init+0x1a4>
 80095b8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095bc:	42a8      	cmp	r0, r5
 80095be:	d04b      	beq.n	8009658 <HAL_GPIO_Init+0x1a8>
 80095c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095c4:	42a8      	cmp	r0, r5
 80095c6:	d049      	beq.n	800965c <HAL_GPIO_Init+0x1ac>
 80095c8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095cc:	42a8      	cmp	r0, r5
 80095ce:	d047      	beq.n	8009660 <HAL_GPIO_Init+0x1b0>
 80095d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095d4:	42a8      	cmp	r0, r5
 80095d6:	d045      	beq.n	8009664 <HAL_GPIO_Init+0x1b4>
 80095d8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095dc:	42a8      	cmp	r0, r5
 80095de:	d043      	beq.n	8009668 <HAL_GPIO_Init+0x1b8>
 80095e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095e4:	42a8      	cmp	r0, r5
 80095e6:	d041      	beq.n	800966c <HAL_GPIO_Init+0x1bc>
 80095e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095ec:	42a8      	cmp	r0, r5
 80095ee:	d03f      	beq.n	8009670 <HAL_GPIO_Init+0x1c0>
 80095f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095f4:	42a8      	cmp	r0, r5
 80095f6:	d03d      	beq.n	8009674 <HAL_GPIO_Init+0x1c4>
 80095f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80095fc:	42a8      	cmp	r0, r5
 80095fe:	bf14      	ite	ne
 8009600:	250a      	movne	r5, #10
 8009602:	2509      	moveq	r5, #9
 8009604:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009608:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800960c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009610:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8009612:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8009616:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8009618:	bf0c      	ite	eq
 800961a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800961c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800961e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8009622:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8009624:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8009626:	bf0c      	ite	eq
 8009628:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800962a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800962c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8009630:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8009632:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8009636:	bf0c      	ite	eq
 8009638:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800963a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800963c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800963e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8009642:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8009646:	bf54      	ite	pl
 8009648:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800964a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800964c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8009650:	3301      	adds	r3, #1
 8009652:	e734      	b.n	80094be <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009654:	2500      	movs	r5, #0
 8009656:	e7d5      	b.n	8009604 <HAL_GPIO_Init+0x154>
 8009658:	2501      	movs	r5, #1
 800965a:	e7d3      	b.n	8009604 <HAL_GPIO_Init+0x154>
 800965c:	2502      	movs	r5, #2
 800965e:	e7d1      	b.n	8009604 <HAL_GPIO_Init+0x154>
 8009660:	2503      	movs	r5, #3
 8009662:	e7cf      	b.n	8009604 <HAL_GPIO_Init+0x154>
 8009664:	2504      	movs	r5, #4
 8009666:	e7cd      	b.n	8009604 <HAL_GPIO_Init+0x154>
 8009668:	2505      	movs	r5, #5
 800966a:	e7cb      	b.n	8009604 <HAL_GPIO_Init+0x154>
 800966c:	2506      	movs	r5, #6
 800966e:	e7c9      	b.n	8009604 <HAL_GPIO_Init+0x154>
 8009670:	2507      	movs	r5, #7
 8009672:	e7c7      	b.n	8009604 <HAL_GPIO_Init+0x154>
 8009674:	2508      	movs	r5, #8
 8009676:	e7c5      	b.n	8009604 <HAL_GPIO_Init+0x154>
 8009678:	58020000 	.word	0x58020000
 800967c:	58024400 	.word	0x58024400

08009680 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009684:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009686:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800968a:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800968e:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009692:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8009696:	fa31 f302 	lsrs.w	r3, r1, r2
 800969a:	d101      	bne.n	80096a0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800969c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80096a0:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 80096a4:	ea1c 0601 	ands.w	r6, ip, r1
 80096a8:	d070      	beq.n	800978c <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80096aa:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80096ae:	f002 0703 	and.w	r7, r2, #3
 80096b2:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 80096b6:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 80096b8:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80096bc:	fa08 f907 	lsl.w	r9, r8, r7
 80096c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80096c4:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80096c8:	4b3a      	ldr	r3, [pc, #232]	@ (80097b4 <HAL_GPIO_DeInit+0x134>)
 80096ca:	4298      	cmp	r0, r3
 80096cc:	d060      	beq.n	8009790 <HAL_GPIO_DeInit+0x110>
 80096ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096d2:	4298      	cmp	r0, r3
 80096d4:	d05e      	beq.n	8009794 <HAL_GPIO_DeInit+0x114>
 80096d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096da:	4298      	cmp	r0, r3
 80096dc:	d05c      	beq.n	8009798 <HAL_GPIO_DeInit+0x118>
 80096de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096e2:	4298      	cmp	r0, r3
 80096e4:	d05a      	beq.n	800979c <HAL_GPIO_DeInit+0x11c>
 80096e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ea:	4298      	cmp	r0, r3
 80096ec:	d058      	beq.n	80097a0 <HAL_GPIO_DeInit+0x120>
 80096ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096f2:	4298      	cmp	r0, r3
 80096f4:	d056      	beq.n	80097a4 <HAL_GPIO_DeInit+0x124>
 80096f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096fa:	4298      	cmp	r0, r3
 80096fc:	d054      	beq.n	80097a8 <HAL_GPIO_DeInit+0x128>
 80096fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009702:	4298      	cmp	r0, r3
 8009704:	d052      	beq.n	80097ac <HAL_GPIO_DeInit+0x12c>
 8009706:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800970a:	4298      	cmp	r0, r3
 800970c:	d050      	beq.n	80097b0 <HAL_GPIO_DeInit+0x130>
 800970e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009712:	4298      	cmp	r0, r3
 8009714:	bf0c      	ite	eq
 8009716:	2309      	moveq	r3, #9
 8009718:	230a      	movne	r3, #10
 800971a:	40bb      	lsls	r3, r7
 800971c:	4573      	cmp	r3, lr
 800971e:	d117      	bne.n	8009750 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8009720:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009724:	ea23 0306 	bic.w	r3, r3, r6
 8009728:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800972c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009730:	ea23 0306 	bic.w	r3, r3, r6
 8009734:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8009738:	6863      	ldr	r3, [r4, #4]
 800973a:	ea23 0306 	bic.w	r3, r3, r6
 800973e:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	ea23 0306 	bic.w	r3, r3, r6
 8009746:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009748:	68ab      	ldr	r3, [r5, #8]
 800974a:	ea23 0309 	bic.w	r3, r3, r9
 800974e:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009750:	0053      	lsls	r3, r2, #1
 8009752:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009754:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009756:	fa0b f303 	lsl.w	r3, fp, r3
 800975a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800975e:	431d      	orrs	r5, r3
 8009760:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009762:	f002 0507 	and.w	r5, r2, #7
 8009766:	6a37      	ldr	r7, [r6, #32]
 8009768:	00ad      	lsls	r5, r5, #2
 800976a:	fa08 f505 	lsl.w	r5, r8, r5
 800976e:	ea27 0705 	bic.w	r7, r7, r5
 8009772:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009774:	68c5      	ldr	r5, [r0, #12]
 8009776:	ea25 0503 	bic.w	r5, r5, r3
 800977a:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800977c:	6845      	ldr	r5, [r0, #4]
 800977e:	ea25 050c 	bic.w	r5, r5, ip
 8009782:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009784:	6885      	ldr	r5, [r0, #8]
 8009786:	ea25 0303 	bic.w	r3, r5, r3
 800978a:	6083      	str	r3, [r0, #8]
    position++;
 800978c:	3201      	adds	r2, #1
 800978e:	e782      	b.n	8009696 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009790:	2300      	movs	r3, #0
 8009792:	e7c2      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 8009794:	2301      	movs	r3, #1
 8009796:	e7c0      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 8009798:	2302      	movs	r3, #2
 800979a:	e7be      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 800979c:	2303      	movs	r3, #3
 800979e:	e7bc      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 80097a0:	2304      	movs	r3, #4
 80097a2:	e7ba      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 80097a4:	2305      	movs	r3, #5
 80097a6:	e7b8      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 80097a8:	2306      	movs	r3, #6
 80097aa:	e7b6      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 80097ac:	2307      	movs	r3, #7
 80097ae:	e7b4      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 80097b0:	2308      	movs	r3, #8
 80097b2:	e7b2      	b.n	800971a <HAL_GPIO_DeInit+0x9a>
 80097b4:	58020000 	.word	0x58020000

080097b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80097b8:	6903      	ldr	r3, [r0, #16]
 80097ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80097bc:	bf14      	ite	ne
 80097be:	2001      	movne	r0, #1
 80097c0:	2000      	moveq	r0, #0
 80097c2:	4770      	bx	lr

080097c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80097c4:	b10a      	cbz	r2, 80097ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80097c6:	6181      	str	r1, [r0, #24]
  }
}
 80097c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80097ca:	0409      	lsls	r1, r1, #16
 80097cc:	e7fb      	b.n	80097c6 <HAL_GPIO_WritePin+0x2>

080097ce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80097ce:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80097d0:	ea01 0203 	and.w	r2, r1, r3
 80097d4:	ea21 0103 	bic.w	r1, r1, r3
 80097d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097dc:	6181      	str	r1, [r0, #24]
}
 80097de:	4770      	bx	lr

080097e0 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80097e0:	4b04      	ldr	r3, [pc, #16]	@ (80097f4 <HAL_HSEM_FastTake+0x14>)
 80097e2:	3020      	adds	r0, #32
 80097e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 80097e8:	4b03      	ldr	r3, [pc, #12]	@ (80097f8 <HAL_HSEM_FastTake+0x18>)
 80097ea:	1ac0      	subs	r0, r0, r3
 80097ec:	bf18      	it	ne
 80097ee:	2001      	movne	r0, #1
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	58026400 	.word	0x58026400
 80097f8:	80000300 	.word	0x80000300

080097fc <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80097fc:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8009800:	4b01      	ldr	r3, [pc, #4]	@ (8009808 <HAL_HSEM_Release+0xc>)
 8009802:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8009806:	4770      	bx	lr
 8009808:	58026400 	.word	0x58026400

0800980c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800980c:	6803      	ldr	r3, [r0, #0]
 800980e:	699a      	ldr	r2, [r3, #24]
 8009810:	0791      	lsls	r1, r2, #30
 8009812:	d501      	bpl.n	8009818 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009814:	2200      	movs	r2, #0
 8009816:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009818:	699a      	ldr	r2, [r3, #24]
 800981a:	07d2      	lsls	r2, r2, #31
 800981c:	d403      	bmi.n	8009826 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800981e:	699a      	ldr	r2, [r3, #24]
 8009820:	f042 0201 	orr.w	r2, r2, #1
 8009824:	619a      	str	r2, [r3, #24]
  }
}
 8009826:	4770      	bx	lr

08009828 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009828:	b530      	push	{r4, r5, lr}
 800982a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800982c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009830:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009832:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8009834:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800983a:	4a05      	ldr	r2, [pc, #20]	@ (8009850 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800983c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800983e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009842:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8009846:	ea20 0002 	bic.w	r0, r0, r2
 800984a:	4303      	orrs	r3, r0
 800984c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800984e:	bd30      	pop	{r4, r5, pc}
 8009850:	03ff63ff 	.word	0x03ff63ff

08009854 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8009854:	6803      	ldr	r3, [r0, #0]
{
 8009856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800985a:	699c      	ldr	r4, [r3, #24]
{
 800985c:	4605      	mov	r5, r0
 800985e:	460f      	mov	r7, r1
 8009860:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009862:	f014 0410 	ands.w	r4, r4, #16
 8009866:	d06f      	beq.n	8009948 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8009868:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800986a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800986c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800986e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	699a      	ldr	r2, [r3, #24]
 8009874:	0690      	lsls	r0, r2, #26
 8009876:	d461      	bmi.n	800993c <I2C_IsErrorOccurred+0xe8>
 8009878:	f1b8 0f00 	cmp.w	r8, #0
 800987c:	d035      	beq.n	80098ea <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800987e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8009882:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8009884:	682e      	ldr	r6, [r5, #0]
 8009886:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009888:	05d9      	lsls	r1, r3, #23
 800988a:	d505      	bpl.n	8009898 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800988c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8009890:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8009894:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009896:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009898:	055a      	lsls	r2, r3, #21
 800989a:	d505      	bpl.n	80098a8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800989c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80098a0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80098a4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80098a6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80098a8:	059b      	lsls	r3, r3, #22
 80098aa:	d54f      	bpl.n	800994c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80098ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80098b0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80098b4:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7ff ffa8 	bl	800980c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80098bc:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 80098be:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80098c0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80098c4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80098c8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80098cc:	f023 0301 	bic.w	r3, r3, #1
 80098d0:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80098d2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80098d4:	4323      	orrs	r3, r4
 80098d6:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80098d8:	2320      	movs	r3, #32
 80098da:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098de:	2300      	movs	r3, #0
 80098e0:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80098e4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80098e8:	e032      	b.n	8009950 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80098ea:	1c7a      	adds	r2, r7, #1
 80098ec:	d0c1      	beq.n	8009872 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80098ee:	f7fe ff59 	bl	80087a4 <HAL_GetTick>
 80098f2:	1b80      	subs	r0, r0, r6
 80098f4:	42b8      	cmp	r0, r7
 80098f6:	d801      	bhi.n	80098fc <I2C_IsErrorOccurred+0xa8>
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	d1b9      	bne.n	8009870 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8009900:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009904:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8009906:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009908:	0400      	lsls	r0, r0, #16
 800990a:	d50a      	bpl.n	8009922 <I2C_IsErrorOccurred+0xce>
 800990c:	0449      	lsls	r1, r1, #17
 800990e:	d408      	bmi.n	8009922 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8009910:	2a20      	cmp	r2, #32
 8009912:	d006      	beq.n	8009922 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800991a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800991c:	f7fe ff42 	bl	80087a4 <HAL_GetTick>
 8009920:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009922:	682b      	ldr	r3, [r5, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	069b      	lsls	r3, r3, #26
 8009928:	d4a2      	bmi.n	8009870 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800992a:	f7fe ff3b 	bl	80087a4 <HAL_GetTick>
 800992e:	1b80      	subs	r0, r0, r6
 8009930:	2819      	cmp	r0, #25
 8009932:	d9f6      	bls.n	8009922 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009934:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8009936:	f04f 0801 	mov.w	r8, #1
 800993a:	e799      	b.n	8009870 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800993c:	f1b8 0f00 	cmp.w	r8, #0
 8009940:	d19d      	bne.n	800987e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009942:	2220      	movs	r2, #32
 8009944:	61da      	str	r2, [r3, #28]
 8009946:	e79a      	b.n	800987e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8009948:	4620      	mov	r0, r4
 800994a:	e79b      	b.n	8009884 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800994c:	2800      	cmp	r0, #0
 800994e:	d1b2      	bne.n	80098b6 <I2C_IsErrorOccurred+0x62>
}
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009954 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	4604      	mov	r4, r0
 8009958:	460d      	mov	r5, r1
 800995a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	079b      	lsls	r3, r3, #30
 8009962:	d501      	bpl.n	8009968 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8009964:	2000      	movs	r0, #0
 8009966:	e01f      	b.n	80099a8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009968:	4632      	mov	r2, r6
 800996a:	4629      	mov	r1, r5
 800996c:	4620      	mov	r0, r4
 800996e:	f7ff ff71 	bl	8009854 <I2C_IsErrorOccurred>
 8009972:	b9c0      	cbnz	r0, 80099a6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8009974:	1c6a      	adds	r2, r5, #1
 8009976:	d0f1      	beq.n	800995c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009978:	f7fe ff14 	bl	80087a4 <HAL_GetTick>
 800997c:	1b80      	subs	r0, r0, r6
 800997e:	42a8      	cmp	r0, r5
 8009980:	d801      	bhi.n	8009986 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8009982:	2d00      	cmp	r5, #0
 8009984:	d1ea      	bne.n	800995c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f013 0302 	ands.w	r3, r3, #2
 800998e:	d1e5      	bne.n	800995c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009990:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8009992:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009996:	f042 0220 	orr.w	r2, r2, #32
 800999a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800999c:	2220      	movs	r2, #32
 800999e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80099a6:	2001      	movs	r0, #1
}
 80099a8:	bd70      	pop	{r4, r5, r6, pc}

080099aa <I2C_WaitOnFlagUntilTimeout>:
{
 80099aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ae:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80099b2:	4604      	mov	r4, r0
 80099b4:	460f      	mov	r7, r1
 80099b6:	4616      	mov	r6, r2
 80099b8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	ea37 0303 	bics.w	r3, r7, r3
 80099c2:	bf0c      	ite	eq
 80099c4:	2301      	moveq	r3, #1
 80099c6:	2300      	movne	r3, #0
 80099c8:	42b3      	cmp	r3, r6
 80099ca:	d001      	beq.n	80099d0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80099cc:	2000      	movs	r0, #0
 80099ce:	e025      	b.n	8009a1c <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099d0:	4642      	mov	r2, r8
 80099d2:	4629      	mov	r1, r5
 80099d4:	4620      	mov	r0, r4
 80099d6:	f7ff ff3d 	bl	8009854 <I2C_IsErrorOccurred>
 80099da:	b9f0      	cbnz	r0, 8009a1a <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80099dc:	1c6b      	adds	r3, r5, #1
 80099de:	d0ec      	beq.n	80099ba <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099e0:	f7fe fee0 	bl	80087a4 <HAL_GetTick>
 80099e4:	eba0 0008 	sub.w	r0, r0, r8
 80099e8:	42a8      	cmp	r0, r5
 80099ea:	d801      	bhi.n	80099f0 <I2C_WaitOnFlagUntilTimeout+0x46>
 80099ec:	2d00      	cmp	r5, #0
 80099ee:	d1e4      	bne.n	80099ba <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	ea37 0303 	bics.w	r3, r7, r3
 80099f8:	bf0c      	ite	eq
 80099fa:	2301      	moveq	r3, #1
 80099fc:	2300      	movne	r3, #0
 80099fe:	42b3      	cmp	r3, r6
 8009a00:	d1db      	bne.n	80099ba <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a02:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009a04:	f043 0320 	orr.w	r3, r3, #32
 8009a08:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a0a:	2320      	movs	r3, #32
 8009a0c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8009a16:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009a1a:	2001      	movs	r0, #1
}
 8009a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a20 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	4604      	mov	r4, r0
 8009a24:	460d      	mov	r5, r1
 8009a26:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	069b      	lsls	r3, r3, #26
 8009a2e:	d501      	bpl.n	8009a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8009a30:	2000      	movs	r0, #0
 8009a32:	e01d      	b.n	8009a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a34:	4632      	mov	r2, r6
 8009a36:	4629      	mov	r1, r5
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f7ff ff0b 	bl	8009854 <I2C_IsErrorOccurred>
 8009a3e:	b9b0      	cbnz	r0, 8009a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a40:	f7fe feb0 	bl	80087a4 <HAL_GetTick>
 8009a44:	1b80      	subs	r0, r0, r6
 8009a46:	42a8      	cmp	r0, r5
 8009a48:	d801      	bhi.n	8009a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	d1ec      	bne.n	8009a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	f013 0320 	ands.w	r3, r3, #32
 8009a56:	d1e7      	bne.n	8009a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a58:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009a5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a5e:	f042 0220 	orr.w	r2, r2, #32
 8009a62:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a64:	2220      	movs	r2, #32
 8009a66:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a6a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8009a6e:	2001      	movs	r0, #1
}
 8009a70:	bd70      	pop	{r4, r5, r6, pc}

08009a72 <HAL_I2C_MspInit>:
}
 8009a72:	4770      	bx	lr

08009a74 <HAL_I2C_Init>:
{
 8009a74:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009a76:	4604      	mov	r4, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d04e      	beq.n	8009b1a <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a7c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009a80:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009a84:	b91b      	cbnz	r3, 8009a8e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8009a86:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8009a8a:	f7ff fff2 	bl	8009a72 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a8e:	2324      	movs	r3, #36	@ 0x24
 8009a90:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	f022 0201 	bic.w	r2, r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009a9e:	6862      	ldr	r2, [r4, #4]
 8009aa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009aa4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009aa6:	689a      	ldr	r2, [r3, #8]
 8009aa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009aac:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009aae:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ab2:	2901      	cmp	r1, #1
 8009ab4:	d106      	bne.n	8009ac4 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009aba:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009ac2:	e007      	b.n	8009ad4 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009ac4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009ac8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009aca:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009acc:	d1f6      	bne.n	8009abc <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009ad4:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ad6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8009ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ae2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009aea:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009aec:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8009af0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009af2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009af4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009af8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009afa:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	f042 0201 	orr.w	r2, r2, #1
 8009b08:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8009b0a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b0c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009b0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b12:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b14:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009b18:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009b1a:	2001      	movs	r0, #1
 8009b1c:	e7fc      	b.n	8009b18 <HAL_I2C_Init+0xa4>

08009b1e <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8009b1e:	4770      	bx	lr

08009b20 <HAL_I2C_DeInit>:
{
 8009b20:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8009b22:	4604      	mov	r4, r0
 8009b24:	b198      	cbz	r0, 8009b4e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8009b26:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b28:	2324      	movs	r3, #36	@ 0x24
 8009b2a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009b2e:	6813      	ldr	r3, [r2, #0]
 8009b30:	f023 0301 	bic.w	r3, r3, #1
 8009b34:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8009b36:	f7ff fff2 	bl	8009b1e <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8009b3e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8009b42:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b46:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b48:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8009b4c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009b4e:	2001      	movs	r0, #1
 8009b50:	e7fc      	b.n	8009b4c <HAL_I2C_DeInit+0x2c>
	...

08009b54 <HAL_I2C_Mem_Write>:
{
 8009b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b5a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009b5e:	4604      	mov	r4, r0
 8009b60:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b62:	2b20      	cmp	r3, #32
{
 8009b64:	4616      	mov	r6, r2
 8009b66:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009b6a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b6e:	f040 80c6 	bne.w	8009cfe <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8009b72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b74:	b113      	cbz	r3, 8009b7c <HAL_I2C_Mem_Write+0x28>
 8009b76:	f1ba 0f00 	cmp.w	sl, #0
 8009b7a:	d106      	bne.n	8009b8a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b80:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009b82:	2001      	movs	r0, #1
}
 8009b84:	b003      	add	sp, #12
 8009b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009b8a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	f000 80b5 	beq.w	8009cfe <HAL_I2C_Mem_Write+0x1aa>
 8009b94:	f04f 0b01 	mov.w	fp, #1
 8009b98:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009b9c:	f7fe fe02 	bl	80087a4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ba0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009ba2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ba4:	9000      	str	r0, [sp, #0]
 8009ba6:	465a      	mov	r2, fp
 8009ba8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009bac:	4620      	mov	r0, r4
 8009bae:	f7ff fefc 	bl	80099aa <I2C_WaitOnFlagUntilTimeout>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d1e5      	bne.n	8009b82 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009bb6:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8009bb8:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bba:	fa5f f289 	uxtb.w	r2, r9
 8009bbe:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009bc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bc4:	2340      	movs	r3, #64	@ 0x40
 8009bc6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009bca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bcc:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bce:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009bd0:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8009d04 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8009bd4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009bde:	f7ff fe23 	bl	8009828 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009be2:	462a      	mov	r2, r5
 8009be4:	4641      	mov	r1, r8
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7ff feb4 	bl	8009954 <I2C_WaitOnTXISFlagUntilTimeout>
 8009bec:	bb18      	cbnz	r0, 8009c36 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009bee:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009bf2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009bf4:	d115      	bne.n	8009c22 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009bf6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2180      	movs	r1, #128	@ 0x80
 8009bfc:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009bfe:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009c00:	4643      	mov	r3, r8
 8009c02:	9500      	str	r5, [sp, #0]
 8009c04:	f7ff fed1 	bl	80099aa <I2C_WaitOnFlagUntilTimeout>
 8009c08:	b9a8      	cbnz	r0, 8009c36 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c0a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2bff      	cmp	r3, #255	@ 0xff
 8009c10:	d815      	bhi.n	8009c3e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009c12:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8009c18:	b292      	uxth	r2, r2
 8009c1a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c1c:	b2d2      	uxtb	r2, r2
 8009c1e:	9000      	str	r0, [sp, #0]
 8009c20:	e012      	b.n	8009c48 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c22:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c24:	4641      	mov	r1, r8
 8009c26:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009c28:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	f7ff fe92 	bl	8009954 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c30:	b908      	cbnz	r0, 8009c36 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	e7df      	b.n	8009bf6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8009c36:	2300      	movs	r3, #0
 8009c38:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009c3c:	e7a1      	b.n	8009b82 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c3e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c44:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c46:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c48:	4639      	mov	r1, r7
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f7ff fdec 	bl	8009828 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c50:	462a      	mov	r2, r5
 8009c52:	4641      	mov	r1, r8
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff fe7d 	bl	8009954 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d191      	bne.n	8009b82 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009c66:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009c68:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009c6a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009c6c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009c6e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009c70:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009c72:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009c74:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009c76:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c78:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009c7a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	b1b3      	cbz	r3, 8009cae <HAL_I2C_Mem_Write+0x15a>
 8009c80:	b9aa      	cbnz	r2, 8009cae <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009c82:	4643      	mov	r3, r8
 8009c84:	2180      	movs	r1, #128	@ 0x80
 8009c86:	4620      	mov	r0, r4
 8009c88:	9500      	str	r5, [sp, #0]
 8009c8a:	f7ff fe8e 	bl	80099aa <I2C_WaitOnFlagUntilTimeout>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f47f af77 	bne.w	8009b82 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c94:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	2bff      	cmp	r3, #255	@ 0xff
 8009c9a:	d928      	bls.n	8009cee <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c9c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009ca2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009ca4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7ff fdbd 	bl	8009828 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009cae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1cc      	bne.n	8009c50 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4641      	mov	r1, r8
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff feb0 	bl	8009a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	f47f af5e 	bne.w	8009b82 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	2120      	movs	r1, #32
 8009cca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009cd2:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009cd6:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009cda:	f022 0201 	bic.w	r2, r2, #1
 8009cde:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009ce0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009ce4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ce8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009cec:	e74a      	b.n	8009b84 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009cee:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009cf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009cf4:	b292      	uxth	r2, r2
 8009cf6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009cf8:	b2d2      	uxtb	r2, r2
 8009cfa:	9000      	str	r0, [sp, #0]
 8009cfc:	e7d3      	b.n	8009ca6 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8009cfe:	2002      	movs	r0, #2
 8009d00:	e740      	b.n	8009b84 <HAL_I2C_Mem_Write+0x30>
 8009d02:	bf00      	nop
 8009d04:	80002000 	.word	0x80002000

08009d08 <HAL_I2C_Mem_Read>:
{
 8009d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d0e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009d12:	4604      	mov	r4, r0
 8009d14:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d16:	2b20      	cmp	r3, #32
{
 8009d18:	4616      	mov	r6, r2
 8009d1a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8009d1e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d22:	f040 80c9 	bne.w	8009eb8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8009d26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d28:	b113      	cbz	r3, 8009d30 <HAL_I2C_Mem_Read+0x28>
 8009d2a:	f1ba 0f00 	cmp.w	sl, #0
 8009d2e:	d106      	bne.n	8009d3e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d34:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8009d36:	2001      	movs	r0, #1
}
 8009d38:	b003      	add	sp, #12
 8009d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8009d3e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	f000 80b8 	beq.w	8009eb8 <HAL_I2C_Mem_Read+0x1b0>
 8009d48:	f04f 0b01 	mov.w	fp, #1
 8009d4c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8009d50:	f7fe fd28 	bl	80087a4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d54:	2319      	movs	r3, #25
 8009d56:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009d58:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d5a:	465a      	mov	r2, fp
 8009d5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff fe22 	bl	80099aa <I2C_WaitOnFlagUntilTimeout>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d1e4      	bne.n	8009d36 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d6c:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8009d6e:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d70:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d72:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d76:	2240      	movs	r2, #64	@ 0x40
 8009d78:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009d7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d7e:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d80:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8009d82:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d84:	4a4d      	ldr	r2, [pc, #308]	@ (8009ebc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8009d86:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009d8a:	9200      	str	r2, [sp, #0]
 8009d8c:	fa5f f289 	uxtb.w	r2, r9
 8009d90:	f7ff fd4a 	bl	8009828 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d94:	462a      	mov	r2, r5
 8009d96:	4641      	mov	r1, r8
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f7ff fddb 	bl	8009954 <I2C_WaitOnTXISFlagUntilTimeout>
 8009d9e:	bb20      	cbnz	r0, 8009dea <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009da0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009da4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009da6:	d116      	bne.n	8009dd6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009da8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009daa:	2200      	movs	r2, #0
 8009dac:	2140      	movs	r1, #64	@ 0x40
 8009dae:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009db0:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009db2:	4643      	mov	r3, r8
 8009db4:	9500      	str	r5, [sp, #0]
 8009db6:	f7ff fdf8 	bl	80099aa <I2C_WaitOnFlagUntilTimeout>
 8009dba:	b9b0      	cbnz	r0, 8009dea <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009dbc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	2bff      	cmp	r3, #255	@ 0xff
 8009dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8009ec0 <HAL_I2C_Mem_Read+0x1b8>)
 8009dc4:	d815      	bhi.n	8009df2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009dc6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009dc8:	b292      	uxth	r2, r2
 8009dca:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	9300      	str	r3, [sp, #0]
 8009dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009dd4:	e012      	b.n	8009dfc <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009dd6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dd8:	4641      	mov	r1, r8
 8009dda:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009ddc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dde:	462a      	mov	r2, r5
 8009de0:	f7ff fdb8 	bl	8009954 <I2C_WaitOnTXISFlagUntilTimeout>
 8009de4:	b908      	cbnz	r0, 8009dea <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	e7de      	b.n	8009da8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8009dea:	2300      	movs	r3, #0
 8009dec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8009df0:	e7a1      	b.n	8009d36 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009df2:	22ff      	movs	r2, #255	@ 0xff
 8009df4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f7ff fd12 	bl	8009828 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009e04:	4643      	mov	r3, r8
 8009e06:	2200      	movs	r2, #0
 8009e08:	2104      	movs	r1, #4
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	9500      	str	r5, [sp, #0]
 8009e0e:	f7ff fdcc 	bl	80099aa <I2C_WaitOnFlagUntilTimeout>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d18f      	bne.n	8009d36 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e1c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009e1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8009e20:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009e22:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8009e24:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009e26:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009e28:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009e2a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009e2c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009e2e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009e34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	b1b3      	cbz	r3, 8009e68 <HAL_I2C_Mem_Read+0x160>
 8009e3a:	b9aa      	cbnz	r2, 8009e68 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009e3c:	4643      	mov	r3, r8
 8009e3e:	2180      	movs	r1, #128	@ 0x80
 8009e40:	4620      	mov	r0, r4
 8009e42:	9500      	str	r5, [sp, #0]
 8009e44:	f7ff fdb1 	bl	80099aa <I2C_WaitOnFlagUntilTimeout>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f47f af74 	bne.w	8009d36 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e4e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	2bff      	cmp	r3, #255	@ 0xff
 8009e54:	d928      	bls.n	8009ea8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e56:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009e58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e5c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009e5e:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e60:	4639      	mov	r1, r7
 8009e62:	4620      	mov	r0, r4
 8009e64:	f7ff fce0 	bl	8009828 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009e68:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1c9      	bne.n	8009e04 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e70:	462a      	mov	r2, r5
 8009e72:	4641      	mov	r1, r8
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7ff fdd3 	bl	8009a20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f47f af5b 	bne.w	8009d36 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	2120      	movs	r1, #32
 8009e84:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009e8c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009e90:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009e94:	f022 0201 	bic.w	r2, r2, #1
 8009e98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009e9a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009e9e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ea2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009ea6:	e747      	b.n	8009d38 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009ea8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009eae:	b292      	uxth	r2, r2
 8009eb0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009eb2:	b2d2      	uxtb	r2, r2
 8009eb4:	9000      	str	r0, [sp, #0]
 8009eb6:	e7d3      	b.n	8009e60 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8009eb8:	2002      	movs	r0, #2
 8009eba:	e73d      	b.n	8009d38 <HAL_I2C_Mem_Read+0x30>
 8009ebc:	80002000 	.word	0x80002000
 8009ec0:	80002400 	.word	0x80002400

08009ec4 <HAL_I2C_GetState>:
  return hi2c->State;
 8009ec4:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8009ec8:	4770      	bx	lr

08009eca <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8009eca:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8009ecc:	4770      	bx	lr

08009ece <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ece:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009ed4:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed6:	2a20      	cmp	r2, #32
 8009ed8:	b2d4      	uxtb	r4, r2
 8009eda:	d11c      	bne.n	8009f16 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009edc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009ee0:	2a01      	cmp	r2, #1
 8009ee2:	d018      	beq.n	8009f16 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ee4:	2224      	movs	r2, #36	@ 0x24
 8009ee6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009eea:	6802      	ldr	r2, [r0, #0]
 8009eec:	6810      	ldr	r0, [r2, #0]
 8009eee:	f020 0001 	bic.w	r0, r0, #1
 8009ef2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ef4:	6810      	ldr	r0, [r2, #0]
 8009ef6:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8009efa:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009efc:	6810      	ldr	r0, [r2, #0]
 8009efe:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f00:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f02:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009f04:	6811      	ldr	r1, [r2, #0]
 8009f06:	f041 0101 	orr.w	r1, r1, #1
 8009f0a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009f0c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009f10:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009f14:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009f16:	2002      	movs	r0, #2
 8009f18:	e7fc      	b.n	8009f14 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f1a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f1c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009f20:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f22:	2a20      	cmp	r2, #32
 8009f24:	b2d4      	uxtb	r4, r2
 8009f26:	d11b      	bne.n	8009f60 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f28:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8009f2c:	2a01      	cmp	r2, #1
 8009f2e:	d017      	beq.n	8009f60 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f30:	2224      	movs	r2, #36	@ 0x24
 8009f32:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f36:	6802      	ldr	r2, [r0, #0]
 8009f38:	6810      	ldr	r0, [r2, #0]
 8009f3a:	f020 0001 	bic.w	r0, r0, #1
 8009f3e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f40:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f42:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f46:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f4a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8009f4c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009f4e:	6811      	ldr	r1, [r2, #0]
 8009f50:	f041 0101 	orr.w	r1, r1, #1
 8009f54:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009f56:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009f5a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009f5e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8009f60:	2002      	movs	r0, #2
 8009f62:	e7fc      	b.n	8009f5e <HAL_I2CEx_ConfigDigitalFilter+0x44>

08009f64 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009f64:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8009f66:	2401      	movs	r4, #1
 8009f68:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8009f6a:	2500      	movs	r5, #0
 8009f6c:	194e      	adds	r6, r1, r5
 8009f6e:	443d      	add	r5, r7
 8009f70:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8009f72:	42be      	cmp	r6, r7
 8009f74:	d112      	bne.n	8009f9c <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8009f76:	2c10      	cmp	r4, #16
 8009f78:	d108      	bne.n	8009f8c <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8009f7a:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009f7c:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8009f7e:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8009f80:	601d      	str	r5, [r3, #0]
  p = 0;
 8009f82:	4623      	mov	r3, r4
  si = Huffsize[0];
 8009f84:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8009f86:	5cc8      	ldrb	r0, [r1, r3]
 8009f88:	b9d8      	cbnz	r0, 8009fc2 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8009f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8009f8c:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8009f8e:	3401      	adds	r4, #1
 8009f90:	19ee      	adds	r6, r5, r7
 8009f92:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8009f96:	d9e9      	bls.n	8009f6c <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8009f98:	2001      	movs	r0, #1
 8009f9a:	e7f6      	b.n	8009f8a <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8009f9c:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8009fa0:	e7e7      	b.n	8009f72 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8009fa2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8009fa6:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8009fa8:	5cc8      	ldrb	r0, [r1, r3]
 8009faa:	19dc      	adds	r4, r3, r7
 8009fac:	42a8      	cmp	r0, r5
 8009fae:	d0f8      	beq.n	8009fa2 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8009fb0:	2d1f      	cmp	r5, #31
 8009fb2:	d8f1      	bhi.n	8009f98 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009fb4:	fa06 f005 	lsl.w	r0, r6, r5
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d9ed      	bls.n	8009f98 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8009fbc:	0064      	lsls	r4, r4, #1
    si++;
 8009fbe:	3501      	adds	r5, #1
 8009fc0:	e7e1      	b.n	8009f86 <JPEG_Bits_To_SizeCodes+0x22>
 8009fc2:	1ae7      	subs	r7, r4, r3
 8009fc4:	e7f0      	b.n	8009fa8 <JPEG_Bits_To_SizeCodes+0x44>

08009fc6 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fc8:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8009fcc:	460d      	mov	r5, r1
 8009fce:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009fd0:	ab01      	add	r3, sp, #4
 8009fd2:	aa43      	add	r2, sp, #268	@ 0x10c
 8009fd4:	a902      	add	r1, sp, #8
 8009fd6:	f7ff ffc5 	bl	8009f64 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009fda:	b938      	cbnz	r0, 8009fec <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8009fdc:	9e01      	ldr	r6, [sp, #4]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	f104 010f 	add.w	r1, r4, #15
 8009fe4:	360f      	adds	r6, #15
 8009fe6:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8009fe8:	42a1      	cmp	r1, r4
 8009fea:	d102      	bne.n	8009ff2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8009fec:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8009ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8009ff2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009ff6:	2e0b      	cmp	r6, #11
 8009ff8:	d80a      	bhi.n	800a010 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009ffa:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8009ffe:	f852 cb04 	ldr.w	ip, [r2], #4
 800a002:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a006:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a00a:	3f01      	subs	r7, #1
 800a00c:	55af      	strb	r7, [r5, r6]
      k++;
 800a00e:	e7eb      	b.n	8009fe8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a010:	2001      	movs	r0, #1
 800a012:	e7eb      	b.n	8009fec <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

0800a014 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a014:	4603      	mov	r3, r0
 800a016:	4608      	mov	r0, r1
 800a018:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a01a:	681c      	ldr	r4, [r3, #0]
{
 800a01c:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a01e:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800a022:	429a      	cmp	r2, r3
 800a024:	d125      	bne.n	800a072 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a026:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a02a:	a901      	add	r1, sp, #4
 800a02c:	f7ff ffcb 	bl	8009fc6 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 800a030:	b9e8      	cbnz	r0, 800a06e <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 800a032:	aa01      	add	r2, sp, #4
 800a034:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a038:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800a03c:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800a03e:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 800a040:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a042:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 800a044:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a046:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800a04a:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a04c:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a04e:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a052:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800a056:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a058:	7b13      	ldrb	r3, [r2, #12]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a060:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a066:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a06a:	42b4      	cmp	r4, r6
 800a06c:	d1e9      	bne.n	800a042 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a06e:	b011      	add	sp, #68	@ 0x44
 800a070:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a072:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 800a076:	429a      	cmp	r2, r3
 800a078:	d102      	bne.n	800a080 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a07a:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800a07e:	e7d4      	b.n	800a02a <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800a080:	2001      	movs	r0, #1
 800a082:	e7f4      	b.n	800a06e <JPEG_Set_HuffDC_Mem+0x5a>

0800a084 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a088:	6804      	ldr	r4, [r0, #0]
{
 800a08a:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800a08e:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a090:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800a094:	429a      	cmp	r2, r3
 800a096:	d149      	bne.n	800a12c <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a098:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a09c:	466b      	mov	r3, sp
 800a09e:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800a0a2:	a901      	add	r1, sp, #4
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f7ff ff5d 	bl	8009f64 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d13a      	bne.n	800a124 <JPEG_Set_HuffAC_Mem+0xa0>
 800a0ae:	9b00      	ldr	r3, [sp, #0]
 800a0b0:	460d      	mov	r5, r1
 800a0b2:	f106 0c0f 	add.w	ip, r6, #15
 800a0b6:	4617      	mov	r7, r2
 800a0b8:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a0ba:	f04f 0e0a 	mov.w	lr, #10
 800a0be:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a0c0:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800a0c2:	4561      	cmp	r1, ip
 800a0c4:	d139      	bne.n	800a13a <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800a0c6:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800a0ca:	a942      	add	r1, sp, #264	@ 0x108
 800a0cc:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800a0d0:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800a0d2:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800a0d4:	6063      	str	r3, [r4, #4]
 800a0d6:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800a0d8:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800a0dc:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800a0e0:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800a0e2:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a0e6:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800a0e8:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a0ec:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800a0ee:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800a0f2:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a0f4:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800a0f8:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a0fa:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800a0fe:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a100:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a102:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a106:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a10a:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a10c:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a116:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a11c:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800a120:	42b4      	cmp	r4, r6
 800a122:	d1e7      	bne.n	800a0f4 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a124:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800a128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a12c:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 800a130:	429a      	cmp	r2, r3
 800a132:	d10f      	bne.n	800a154 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a134:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 800a138:	e7b0      	b.n	800a09c <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800a13a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800a13e:	b15b      	cbz	r3, 800a158 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a140:	2bf0      	cmp	r3, #240	@ 0xf0
 800a142:	d015      	beq.n	800a170 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 800a144:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 800a146:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800a14a:	3b01      	subs	r3, #1
 800a14c:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a150:	2ba1      	cmp	r3, #161	@ 0xa1
 800a152:	d902      	bls.n	800a15a <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 800a154:	2001      	movs	r0, #1
 800a156:	e7e5      	b.n	800a124 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 800a158:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a15a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800a15e:	f857 8b04 	ldr.w	r8, [r7], #4
 800a162:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a166:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a16a:	3a01      	subs	r2, #1
 800a16c:	54f2      	strb	r2, [r6, r3]
      k++;
 800a16e:	e7a8      	b.n	800a0c2 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800a170:	23a1      	movs	r3, #161	@ 0xa1
 800a172:	e7f2      	b.n	800a15a <JPEG_Set_HuffAC_Mem+0xd6>

0800a174 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a174:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a176:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a17a:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a17c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a17e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a180:	f002 0203 	and.w	r2, r2, #3
 800a184:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	bf0c      	ite	eq
 800a18a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a18e:	f022 0208 	bicne.w	r2, r2, #8
 800a192:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	f022 0201 	bic.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a19c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a19e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a1a2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a1a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a1aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a1ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1b2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a1b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1b6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a1ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	f042 0201 	orr.w	r2, r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a1c4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a1c6:	f002 020c 	and.w	r2, r2, #12
 800a1ca:	2a08      	cmp	r2, #8
 800a1cc:	d104      	bne.n	800a1d8 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a1ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1d0:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a1d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a1d6:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a1d8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a1da:	f002 020c 	and.w	r2, r2, #12
 800a1de:	2a0c      	cmp	r2, #12
 800a1e0:	d1f9      	bne.n	800a1d6 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a1e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1e4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a1e8:	e7f4      	b.n	800a1d4 <JPEG_Init_Process+0x60>
	...

0800a1ec <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a1ee:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800a1f0:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a1f2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a1f4:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a1f6:	42aa      	cmp	r2, r5
 800a1f8:	d313      	bcc.n	800a222 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a1fa:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a1fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800a1fe:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800a200:	428b      	cmp	r3, r1
 800a202:	d30e      	bcc.n	800a222 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800a204:	4f18      	ldr	r7, [pc, #96]	@ (800a268 <JPEG_DMA_StartProcess+0x7c>)
 800a206:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a208:	4f18      	ldr	r7, [pc, #96]	@ (800a26c <JPEG_DMA_StartProcess+0x80>)
 800a20a:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800a20c:	4e18      	ldr	r6, [pc, #96]	@ (800a270 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800a20e:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800a210:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800a212:	4e18      	ldr	r6, [pc, #96]	@ (800a274 <JPEG_DMA_StartProcess+0x88>)
 800a214:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800a216:	b105      	cbz	r5, 800a21a <JPEG_DMA_StartProcess+0x2e>
 800a218:	b931      	cbnz	r1, 800a228 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a21a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a21c:	f043 0304 	orr.w	r3, r3, #4
 800a220:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800a222:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a224:	b003      	add	sp, #12
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a228:	fbb2 f6f5 	udiv	r6, r2, r5
 800a22c:	fb05 2516 	mls	r5, r5, r6, r2
 800a230:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a232:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a234:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a236:	fbb3 f2f1 	udiv	r2, r3, r1
 800a23a:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a23e:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a240:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a242:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800a244:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a246:	9500      	str	r5, [sp, #0]
 800a248:	69e2      	ldr	r2, [r4, #28]
 800a24a:	f001 f82a 	bl	800b2a2 <HAL_MDMA_Start_IT>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d1e3      	bne.n	800a21a <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	9500      	str	r5, [sp, #0]
 800a256:	3240      	adds	r2, #64	@ 0x40
 800a258:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a25a:	69a1      	ldr	r1, [r4, #24]
 800a25c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a25e:	f001 f820 	bl	800b2a2 <HAL_MDMA_Start_IT>
 800a262:	2800      	cmp	r0, #0
 800a264:	d0de      	beq.n	800a224 <JPEG_DMA_StartProcess+0x38>
 800a266:	e7d8      	b.n	800a21a <JPEG_DMA_StartProcess+0x2e>
 800a268:	0800a7af 	.word	0x0800a7af
 800a26c:	0800a6a7 	.word	0x0800a6a7
 800a270:	0800ac6d 	.word	0x0800ac6d
 800a274:	0800ac5f 	.word	0x0800ac5f

0800a278 <HAL_JPEG_Init>:
{
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800a27a:	4605      	mov	r5, r0
 800a27c:	2800      	cmp	r0, #0
 800a27e:	f000 80f2 	beq.w	800a466 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800a282:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800a286:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a28a:	b91b      	cbnz	r3, 800a294 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 800a28c:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800a290:	f7f7 f830 	bl	80012f4 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800a294:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800a296:	2302      	movs	r3, #2
 800a298:	4a86      	ldr	r2, [pc, #536]	@ (800a4b4 <HAL_JPEG_Init+0x23c>)
 800a29a:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800a29e:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800a2a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a2a4:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800a2a8:	f043 0301 	orr.w	r3, r3, #1
 800a2ac:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	f023 0301 	bic.w	r3, r3, #1
 800a2b4:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a2b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a2b8:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800a2bc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a2be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a2c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a2c4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a2c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a2c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2cc:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a2ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a2d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a2d4:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800a2d6:	4b78      	ldr	r3, [pc, #480]	@ (800a4b8 <HAL_JPEG_Init+0x240>)
 800a2d8:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800a2da:	4b78      	ldr	r3, [pc, #480]	@ (800a4bc <HAL_JPEG_Init+0x244>)
 800a2dc:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800a2de:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800a2e0:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a2e4:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800a2e6:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a2e8:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a2ea:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a2ec:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a2f0:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a2f2:	4333      	orrs	r3, r6
 800a2f4:	7c56      	ldrb	r6, [r2, #17]
 800a2f6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a2fa:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a2fe:	4281      	cmp	r1, r0
 800a300:	d1f0      	bne.n	800a2e4 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a302:	4b6f      	ldr	r3, [pc, #444]	@ (800a4c0 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a304:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800a308:	4a6e      	ldr	r2, [pc, #440]	@ (800a4c4 <HAL_JPEG_Init+0x24c>)
 800a30a:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a30e:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800a312:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a316:	4610      	mov	r0, r2
 800a318:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a31a:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800a31e:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a322:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a326:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800a328:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a32a:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a32e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a330:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a334:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a338:	ea43 030c 	orr.w	r3, r3, ip
 800a33c:	f890 c011 	ldrb.w	ip, [r0, #17]
 800a340:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a344:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800a348:	42be      	cmp	r6, r7
 800a34a:	d1ec      	bne.n	800a326 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800a34c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a350:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 800a354:	0c1b      	lsrs	r3, r3, #16
 800a356:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a358:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800a35c:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 800a360:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a364:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800a368:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a36a:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a36e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a370:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a374:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a378:	4333      	orrs	r3, r6
 800a37a:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800a37e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a382:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800a386:	4281      	cmp	r1, r0
 800a388:	d1ec      	bne.n	800a364 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800a38a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800a38e:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800a392:	4a4d      	ldr	r2, [pc, #308]	@ (800a4c8 <HAL_JPEG_Init+0x250>)
 800a394:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800a398:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a39a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800a39e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800a3a2:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a3a6:	4013      	ands	r3, r2
  *address = value;
 800a3a8:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800a3b2:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800a3b6:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800a3ba:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800a3be:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800a3c2:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a3c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a3c8:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800a3cc:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a3d0:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a3d2:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800a3d6:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800a3da:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3de:	4b3b      	ldr	r3, [pc, #236]	@ (800a4cc <HAL_JPEG_Init+0x254>)
 800a3e0:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 800a3e4:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800a3e8:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800a3ec:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800a3f0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a3f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800a3f6:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800a3fa:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a3fe:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a400:	4a33      	ldr	r2, [pc, #204]	@ (800a4d0 <HAL_JPEG_Init+0x258>)
 800a402:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800a406:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800a40a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a40e:	4b31      	ldr	r3, [pc, #196]	@ (800a4d4 <HAL_JPEG_Init+0x25c>)
 800a410:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 800a414:	4b30      	ldr	r3, [pc, #192]	@ (800a4d8 <HAL_JPEG_Init+0x260>)
 800a416:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800a41a:	4b30      	ldr	r3, [pc, #192]	@ (800a4dc <HAL_JPEG_Init+0x264>)
 800a41c:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 800a420:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800a424:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800a42a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a42e:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 800a432:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a434:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a438:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a43a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a43e:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a442:	4333      	orrs	r3, r6
 800a444:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800a448:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a44c:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800a450:	4281      	cmp	r1, r0
 800a452:	d1ec      	bne.n	800a42e <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a454:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800a458:	491a      	ldr	r1, [pc, #104]	@ (800a4c4 <HAL_JPEG_Init+0x24c>)
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7ff fe12 	bl	800a084 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a460:	b118      	cbz	r0, 800a46a <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800a462:	2301      	movs	r3, #1
 800a464:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800a466:	2001      	movs	r0, #1
}
 800a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a46a:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800a46e:	4918      	ldr	r1, [pc, #96]	@ (800a4d0 <HAL_JPEG_Init+0x258>)
 800a470:	4628      	mov	r0, r5
 800a472:	f7ff fe07 	bl	800a084 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800a476:	2800      	cmp	r0, #0
 800a478:	d1f3      	bne.n	800a462 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a47a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800a47e:	490d      	ldr	r1, [pc, #52]	@ (800a4b4 <HAL_JPEG_Init+0x23c>)
 800a480:	4628      	mov	r0, r5
 800a482:	f7ff fdc7 	bl	800a014 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800a486:	2800      	cmp	r0, #0
 800a488:	d1eb      	bne.n	800a462 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a48a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800a48e:	4914      	ldr	r1, [pc, #80]	@ (800a4e0 <HAL_JPEG_Init+0x268>)
 800a490:	4628      	mov	r0, r5
 800a492:	f7ff fdbf 	bl	800a014 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800a496:	2800      	cmp	r0, #0
 800a498:	d1e3      	bne.n	800a462 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800a49a:	6863      	ldr	r3, [r4, #4]
 800a49c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4a0:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a4a2:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 800a4a4:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800a4a6:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a4a8:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a4ac:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800a4ae:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800a4b0:	e7da      	b.n	800a468 <HAL_JPEG_Init+0x1f0>
 800a4b2:	bf00      	nop
 800a4b4:	08028ae8 	.word	0x08028ae8
 800a4b8:	080288e8 	.word	0x080288e8
 800a4bc:	080288a8 	.word	0x080288a8
 800a4c0:	0b0a0908 	.word	0x0b0a0908
 800a4c4:	08028a1a 	.word	0x08028a1a
 800a4c8:	ffff0000 	.word	0xffff0000
 800a4cc:	09080706 	.word	0x09080706
 800a4d0:	08028968 	.word	0x08028968
 800a4d4:	01000404 	.word	0x01000404
 800a4d8:	05070403 	.word	0x05070403
 800a4dc:	04040201 	.word	0x04040201
 800a4e0:	08028acc 	.word	0x08028acc

0800a4e4 <HAL_JPEG_GetInfo>:
{
 800a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d06f      	beq.n	800a5cc <HAL_JPEG_GetInfo+0xe8>
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	d06d      	beq.n	800a5cc <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a4f0:	6804      	ldr	r4, [r0, #0]
 800a4f2:	6863      	ldr	r3, [r4, #4]
 800a4f4:	f003 0303 	and.w	r3, r3, #3
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d047      	beq.n	800a58c <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a4fc:	6863      	ldr	r3, [r4, #4]
 800a4fe:	f013 0303 	ands.w	r3, r3, #3
 800a502:	d005      	beq.n	800a510 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a504:	6863      	ldr	r3, [r4, #4]
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d15e      	bne.n	800a5cc <HAL_JPEG_GetInfo+0xe8>
 800a50e:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a510:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a512:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a514:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a518:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a51a:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a51c:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a51e:	68e2      	ldr	r2, [r4, #12]
 800a520:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a524:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a526:	d13c      	bne.n	800a5a2 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a528:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a52a:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a52c:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a530:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a532:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a534:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a536:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a53a:	d129      	bne.n	800a590 <HAL_JPEG_GetInfo+0xac>
 800a53c:	4313      	orrs	r3, r2
 800a53e:	f013 0f0f 	tst.w	r3, #15
 800a542:	bf0c      	ite	eq
 800a544:	2301      	moveq	r3, #1
 800a546:	2300      	movne	r3, #0
 800a548:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800a54a:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	3450      	adds	r4, #80	@ 0x50
 800a550:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800a5d0 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 800a554:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a556:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800a55a:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800a55e:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 800a562:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800a566:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a568:	fa29 f206 	lsr.w	r2, r9, r6
 800a56c:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800a56e:	2a01      	cmp	r2, #1
 800a570:	d119      	bne.n	800a5a6 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800a572:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 800a574:	3608      	adds	r6, #8
 800a576:	3701      	adds	r7, #1
 800a578:	2e20      	cmp	r6, #32
 800a57a:	d1f5      	bne.n	800a568 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 800a57c:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a57e:	2d40      	cmp	r5, #64	@ 0x40
 800a580:	d1ed      	bne.n	800a55e <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800a582:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 800a584:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800a586:	610b      	str	r3, [r1, #16]
}
 800a588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58c:	2310      	movs	r3, #16
 800a58e:	e7bf      	b.n	800a510 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a590:	2d03      	cmp	r5, #3
 800a592:	d106      	bne.n	800a5a2 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a594:	4313      	orrs	r3, r2
 800a596:	f013 0f0f 	tst.w	r3, #15
 800a59a:	bf0c      	ite	eq
 800a59c:	2301      	moveq	r3, #1
 800a59e:	2300      	movne	r3, #0
 800a5a0:	e7d3      	b.n	800a54a <HAL_JPEG_GetInfo+0x66>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e7d1      	b.n	800a54a <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a5a6:	fb0e fb02 	mul.w	fp, lr, r2
 800a5aa:	f897 a000 	ldrb.w	sl, [r7]
 800a5ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5b0:	f812 a00a 	ldrb.w	sl, [r2, sl]
 800a5b4:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800a5b8:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800a5ba:	bf8b      	itete	hi
 800a5bc:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800a5c0:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 800a5c4:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800a5c6:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800a5ca:	e7d3      	b.n	800a574 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	e7db      	b.n	800a588 <HAL_JPEG_GetInfo+0xa4>
 800a5d0:	08028928 	.word	0x08028928

0800a5d4 <HAL_JPEG_Decode_DMA>:
{
 800a5d4:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	b348      	cbz	r0, 800a62e <HAL_JPEG_Decode_DMA+0x5a>
 800a5da:	b341      	cbz	r1, 800a62e <HAL_JPEG_Decode_DMA+0x5a>
 800a5dc:	b33b      	cbz	r3, 800a62e <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800a5de:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800a5e2:	2d01      	cmp	r5, #1
 800a5e4:	d028      	beq.n	800a638 <HAL_JPEG_Decode_DMA+0x64>
 800a5e6:	2501      	movs	r5, #1
 800a5e8:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800a5ec:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800a5f0:	2d01      	cmp	r5, #1
 800a5f2:	d11e      	bne.n	800a632 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a5f4:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800a5f6:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a5f8:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800a5fc:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800a5fe:	f025 050f 	bic.w	r5, r5, #15
 800a602:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a604:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800a606:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800a60a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a60e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 800a610:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800a612:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800a614:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800a616:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800a618:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800a61a:	f7ff fdab 	bl	800a174 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800a61e:	f7ff fde5 	bl	800a1ec <JPEG_DMA_StartProcess>
 800a622:	b128      	cbz	r0, 800a630 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a624:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800a626:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a62a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800a62e:	2001      	movs	r0, #1
}
 800a630:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800a632:	2300      	movs	r3, #0
 800a634:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 800a638:	2002      	movs	r0, #2
 800a63a:	e7f9      	b.n	800a630 <HAL_JPEG_Decode_DMA+0x5c>

0800a63c <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a63c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a63e:	f003 030c 	and.w	r3, r3, #12
 800a642:	2b0c      	cmp	r3, #12
 800a644:	d10d      	bne.n	800a662 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a646:	07cb      	lsls	r3, r1, #31
 800a648:	d503      	bpl.n	800a652 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a64a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a64c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a650:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a652:	0789      	lsls	r1, r1, #30
 800a654:	d503      	bpl.n	800a65e <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a656:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a658:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a65c:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800a65e:	2000      	movs	r0, #0
 800a660:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a662:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a664:	f003 030c 	and.w	r3, r3, #12
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d1f8      	bne.n	800a65e <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a66c:	f011 0301 	ands.w	r3, r1, #1
 800a670:	d004      	beq.n	800a67c <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a672:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a674:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a678:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a67a:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a67c:	078a      	lsls	r2, r1, #30
 800a67e:	d505      	bpl.n	800a68c <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a680:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a682:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a686:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a68a:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a68c:	6801      	ldr	r1, [r0, #0]
 800a68e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800a690:	ea22 0303 	bic.w	r3, r2, r3
 800a694:	630b      	str	r3, [r1, #48]	@ 0x30
 800a696:	e7e2      	b.n	800a65e <HAL_JPEG_Pause+0x22>

0800a698 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800a698:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800a69a:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800a69c:	4770      	bx	lr

0800a69e <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 800a69e:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 800a6a0:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 800a6a4:	4770      	bx	lr

0800a6a6 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a6a6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800a6a8:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a6aa:	6803      	ldr	r3, [r0, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	f022 0201 	bic.w	r2, r2, #1
 800a6b2:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a6b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6b6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a6ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a6c2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800a6c4:	f043 0304 	orr.w	r3, r3, #4
 800a6c8:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800a6ca:	f7f8 f967 	bl	800299c <HAL_JPEG_ErrorCallback>
}
 800a6ce:	bd08      	pop	{r3, pc}

0800a6d0 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a6d0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800a6d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a6d8:	b922      	cbnz	r2, 800a6e4 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a6da:	2101      	movs	r1, #1
 800a6dc:	f7ff ffae 	bl	800a63c <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	e004      	b.n	800a6ee <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a6e4:	6a03      	ldr	r3, [r0, #32]
 800a6e6:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a6e8:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a6ea:	d924      	bls.n	800a736 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a6ec:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a6ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a6f0:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800a6f4:	d11e      	bne.n	800a734 <JPEG_ReadInputData+0x64>
 800a6f6:	b1ea      	cbz	r2, 800a734 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800a6f8:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 800a6fc:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 800a6fe:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800a702:	d827      	bhi.n	800a754 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a704:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800a706:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a708:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a70a:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a70c:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 800a70e:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a710:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a712:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a716:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a71a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a71c:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a720:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a724:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a728:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800a72a:	6a22      	ldr	r2, [r4, #32]
 800a72c:	f102 0204 	add.w	r2, r2, #4
 800a730:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a732:	d1e8      	bne.n	800a706 <JPEG_ReadInputData+0x36>
}
 800a734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a736:	429a      	cmp	r2, r3
 800a738:	d1d2      	bne.n	800a6e0 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a73a:	6a01      	ldr	r1, [r0, #32]
 800a73c:	f7f8 f8c0 	bl	80028c0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 800a740:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a742:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a744:	bf84      	itt	hi
 800a746:	f023 0303 	bichi.w	r3, r3, #3
 800a74a:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800a74c:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 800a74e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 800a750:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800a752:	e7cc      	b.n	800a6ee <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800a754:	2a03      	cmp	r2, #3
 800a756:	d918      	bls.n	800a78a <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a758:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800a75a:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a75c:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a75e:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a760:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800a762:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a764:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a766:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a76a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a76e:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a770:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800a774:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a778:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a77c:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a77e:	6a22      	ldr	r2, [r4, #32]
 800a780:	f102 0204 	add.w	r2, r2, #4
 800a784:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800a786:	d1e8      	bne.n	800a75a <JPEG_ReadInputData+0x8a>
 800a788:	e7d4      	b.n	800a734 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800a78a:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a78c:	6a25      	ldr	r5, [r4, #32]
 800a78e:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 800a790:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a792:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 800a794:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a796:	fa05 f506 	lsl.w	r5, r5, r6
 800a79a:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 800a79e:	6a25      	ldr	r5, [r4, #32]
 800a7a0:	f105 0501 	add.w	r5, r5, #1
 800a7a4:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800a7a6:	d1f1      	bne.n	800a78c <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800a7a8:	6822      	ldr	r2, [r4, #0]
 800a7aa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800a7ac:	e7c2      	b.n	800a734 <JPEG_ReadInputData+0x64>

0800a7ae <JPEG_MDMAInCpltCallback>:
{
 800a7ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a7b0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a7b2:	6822      	ldr	r2, [r4, #0]
 800a7b4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a7b6:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800a7ba:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800a7bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a7be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a7c2:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800a7c6:	041b      	lsls	r3, r3, #16
 800a7c8:	0c1b      	lsrs	r3, r3, #16
 800a7ca:	2b0c      	cmp	r3, #12
 800a7cc:	d11a      	bne.n	800a804 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a7ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a7d0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a7d2:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a7d4:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a7d6:	695a      	ldr	r2, [r3, #20]
 800a7d8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a7da:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800a7de:	1a9b      	subs	r3, r3, r2
 800a7e0:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a7e2:	6a21      	ldr	r1, [r4, #32]
 800a7e4:	f7f8 f86c 	bl	80028c0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800a7e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a7ea:	42ab      	cmp	r3, r5
 800a7ec:	d327      	bcc.n	800a83e <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 800a7ee:	b95d      	cbnz	r5, 800a808 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a7f0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800a7f2:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a7f4:	f043 0304 	orr.w	r3, r3, #4
 800a7f8:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a7fa:	2306      	movs	r3, #6
 800a7fc:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 800a800:	f7f8 f8cc 	bl	800299c <HAL_JPEG_ErrorCallback>
}
 800a804:	b003      	add	sp, #12
 800a806:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a808:	fbb3 f2f5 	udiv	r2, r3, r5
 800a80c:	fb05 3212 	mls	r2, r5, r2, r3
 800a810:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a812:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a814:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a816:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a818:	04db      	lsls	r3, r3, #19
 800a81a:	d40a      	bmi.n	800a832 <JPEG_MDMAInCpltCallback+0x84>
 800a81c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a81e:	b143      	cbz	r3, 800a832 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a820:	2101      	movs	r1, #1
 800a822:	3240      	adds	r2, #64	@ 0x40
 800a824:	9100      	str	r1, [sp, #0]
 800a826:	69a1      	ldr	r1, [r4, #24]
 800a828:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a82a:	f000 fd3a 	bl	800b2a2 <HAL_MDMA_Start_IT>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d1de      	bne.n	800a7f0 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a836:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a83a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a83c:	e7e2      	b.n	800a804 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0e8      	beq.n	800a814 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800a842:	079a      	lsls	r2, r3, #30
 800a844:	d0e6      	beq.n	800a814 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a846:	f023 0303 	bic.w	r3, r3, #3
 800a84a:	3304      	adds	r3, #4
 800a84c:	e7e1      	b.n	800a812 <JPEG_MDMAInCpltCallback+0x64>

0800a84e <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a84e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a852:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a856:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800a858:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d32a      	bcc.n	800a8b4 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800a85e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a860:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800a862:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a864:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800a866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800a868:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a86a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a86c:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a86e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a870:	69e0      	ldr	r0, [r4, #28]
 800a872:	4428      	add	r0, r5
 800a874:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800a878:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a87a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a87c:	69e0      	ldr	r0, [r4, #28]
 800a87e:	4428      	add	r0, r5
 800a880:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a884:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a888:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a88a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a88c:	69e0      	ldr	r0, [r4, #28]
 800a88e:	4428      	add	r0, r5
 800a890:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 800a892:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a894:	f103 0304 	add.w	r3, r3, #4
 800a898:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a89a:	d1e1      	bne.n	800a860 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a89c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a89e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d106      	bne.n	800a8b2 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a8a6:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f7f8 f827 	bl	80028fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a8b4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d9fb      	bls.n	800a8b2 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a8ba:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a8bc:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a8be:	1a9b      	subs	r3, r3, r2
 800a8c0:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 800a8c2:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a8c4:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800a8c6:	d105      	bne.n	800a8d4 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a8c8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a8ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a8cc:	429f      	cmp	r7, r3
 800a8ce:	d119      	bne.n	800a904 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a8d2:	e7e9      	b.n	800a8a8 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 800a8d4:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800a8d6:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800a8d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a8da:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a8dc:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a8de:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a8e0:	69e1      	ldr	r1, [r4, #28]
 800a8e2:	4429      	add	r1, r5
 800a8e4:	0a1d      	lsrs	r5, r3, #8
 800a8e6:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a8e8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a8ea:	69e1      	ldr	r1, [r4, #28]
 800a8ec:	4429      	add	r1, r5
 800a8ee:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a8f0:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a8f2:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a8f4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a8f6:	69e1      	ldr	r1, [r4, #28]
 800a8f8:	4429      	add	r1, r5
 800a8fa:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800a8fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a8fe:	3304      	adds	r3, #4
 800a900:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a902:	e7de      	b.n	800a8c2 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a904:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a906:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800a908:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a90a:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800a90c:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800a90e:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a910:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800a912:	d114      	bne.n	800a93e <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a914:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a916:	4620      	mov	r0, r4
 800a918:	f7f7 fff0 	bl	80028fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a920:	1d2b      	adds	r3, r5, #4
 800a922:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800a924:	2b03      	cmp	r3, #3
 800a926:	d8c4      	bhi.n	800a8b2 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a928:	00da      	lsls	r2, r3, #3
 800a92a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a92c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 800a92e:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a930:	fa26 f202 	lsr.w	r2, r6, r2
 800a934:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800a936:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a938:	3201      	adds	r2, #1
 800a93a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a93c:	e7f2      	b.n	800a924 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a93e:	f002 0303 	and.w	r3, r2, #3
 800a942:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a946:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a948:	00db      	lsls	r3, r3, #3
 800a94a:	fa26 f303 	lsr.w	r3, r6, r3
 800a94e:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800a952:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a954:	3301      	adds	r3, #1
 800a956:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a958:	e7d9      	b.n	800a90e <JPEG_StoreOutputData+0xc0>

0800a95a <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a95a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a95c:	f003 0303 	and.w	r3, r3, #3
 800a960:	2b02      	cmp	r3, #2
{
 800a962:	b510      	push	{r4, lr}
 800a964:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a966:	d114      	bne.n	800a992 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a968:	6803      	ldr	r3, [r0, #0]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a96c:	065b      	lsls	r3, r3, #25
 800a96e:	d510      	bpl.n	800a992 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a970:	1d01      	adds	r1, r0, #4
 800a972:	f7ff fdb7 	bl	800a4e4 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800a976:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a978:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800a97a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a97c:	f7f7 ff6a 	bl	8002854 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a984:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a988:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a98a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a98c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a990:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a992:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a994:	04d9      	lsls	r1, r3, #19
 800a996:	d407      	bmi.n	800a9a8 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a99c:	0792      	lsls	r2, r2, #30
 800a99e:	d544      	bpl.n	800aa2a <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a9a0:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f7ff fe94 	bl	800a6d0 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a9a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a9aa:	0499      	lsls	r1, r3, #18
 800a9ac:	d407      	bmi.n	800a9be <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9b2:	0712      	lsls	r2, r2, #28
 800a9b4:	d53e      	bpl.n	800aa34 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a9b6:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f7ff ff48 	bl	800a84e <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9c2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a9c6:	2a20      	cmp	r2, #32
 800a9c8:	d13c      	bne.n	800aa44 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	f022 0201 	bic.w	r2, r2, #1
 800a9d0:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a9d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9d4:	f002 020c 	and.w	r2, r2, #12
 800a9d8:	2a08      	cmp	r2, #8
 800a9da:	d103      	bne.n	800a9e4 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a9dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9de:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a9e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a9e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9e6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a9ea:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800a9ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a9ee:	b133      	cbz	r3, 800a9fe <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a9f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	69e1      	ldr	r1, [r4, #28]
 800a9f6:	f7f7 ff81 	bl	80028fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800a9fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aa00:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa02:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa04:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa08:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa0c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aa0e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800aa10:	f04f 0200 	mov.w	r2, #0
 800aa14:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aa18:	f04f 0201 	mov.w	r2, #1
 800aa1c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aa20:	d10d      	bne.n	800aa3e <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aa22:	f7f7 ffbd 	bl	80029a0 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800aa26:	2001      	movs	r0, #1
}
 800aa28:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800aa2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa2c:	0758      	lsls	r0, r3, #29
 800aa2e:	d5bb      	bpl.n	800a9a8 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 800aa30:	2101      	movs	r1, #1
 800aa32:	e7b6      	b.n	800a9a2 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800aa34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa36:	06db      	lsls	r3, r3, #27
 800aa38:	d5c1      	bpl.n	800a9be <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	e7bc      	b.n	800a9b8 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800aa3e:	f7ff fe31 	bl	800a6a4 <HAL_JPEG_EncodeCpltCallback>
 800aa42:	e7f0      	b.n	800aa26 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800aa44:	2000      	movs	r0, #0
 800aa46:	e7ef      	b.n	800aa28 <JPEG_Process+0xce>

0800aa48 <JPEG_DMA_PollResidualData>:
{
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aa4e:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800aa50:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aa52:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800aa56:	d122      	bne.n	800aa9e <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800aa58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa5a:	06d0      	lsls	r0, r2, #27
 800aa5c:	d51f      	bpl.n	800aa9e <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800aa5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800aa60:	69e1      	ldr	r1, [r4, #28]
 800aa62:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa64:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800aa66:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aa68:	69e2      	ldr	r2, [r4, #28]
 800aa6a:	440a      	add	r2, r1
 800aa6c:	0a19      	lsrs	r1, r3, #8
 800aa6e:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800aa70:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aa72:	69e2      	ldr	r2, [r4, #28]
 800aa74:	440a      	add	r2, r1
 800aa76:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800aa78:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800aa7a:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800aa7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800aa7e:	69e2      	ldr	r2, [r4, #28]
 800aa80:	440a      	add	r2, r1
 800aa82:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800aa84:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aa86:	3304      	adds	r3, #4
 800aa88:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800aa8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800aa8c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d105      	bne.n	800aa9e <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aa92:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aa94:	4620      	mov	r0, r4
 800aa96:	69e1      	ldr	r1, [r4, #28]
 800aa98:	f7f7 ff30 	bl	80028fc <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800aa9c:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800aa9e:	3e01      	subs	r6, #1
 800aaa0:	d1d5      	bne.n	800aa4e <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800aaa2:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 800aaa4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800aaa6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800aaa8:	06c9      	lsls	r1, r1, #27
 800aaaa:	d501      	bpl.n	800aab0 <JPEG_DMA_PollResidualData+0x68>
 800aaac:	0492      	lsls	r2, r2, #18
 800aaae:	d420      	bmi.n	800aaf2 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	f022 0201 	bic.w	r2, r2, #1
 800aab6:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800aab8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aaba:	b133      	cbz	r3, 800aaca <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aabc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aabe:	4620      	mov	r0, r4
 800aac0:	69e1      	ldr	r1, [r4, #28]
 800aac2:	f7f7 ff1b 	bl	80028fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800aaca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aacc:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aace:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aad0:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aad4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aad8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aada:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800aae4:	f04f 0201 	mov.w	r2, #1
 800aae8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aaec:	d102      	bne.n	800aaf4 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800aaee:	f7f7 ff57 	bl	80029a0 <HAL_JPEG_DecodeCpltCallback>
}
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800aaf4:	f7ff fdd6 	bl	800a6a4 <HAL_JPEG_EncodeCpltCallback>
}
 800aaf8:	e7fb      	b.n	800aaf2 <JPEG_DMA_PollResidualData+0xaa>

0800aafa <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800aafa:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aafc:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 800ab00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab02:	4604      	mov	r4, r0
 800ab04:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800ab06:	d014      	beq.n	800ab32 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ab08:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab0a:	f003 030c 	and.w	r3, r3, #12
 800ab0e:	2b0c      	cmp	r3, #12
 800ab10:	d146      	bne.n	800aba0 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ab12:	07cb      	lsls	r3, r1, #31
 800ab14:	d520      	bpl.n	800ab58 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800ab16:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ab18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab1c:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ab1e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800ab20:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800ab22:	b941      	cbnz	r1, 800ab36 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ab24:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ab26:	f043 0304 	orr.w	r3, r3, #4
 800ab2a:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ab2c:	2306      	movs	r3, #6
 800ab2e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800ab32:	2001      	movs	r0, #1
 800ab34:	e01d      	b.n	800ab72 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800ab36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ab38:	fbb3 f2f1 	udiv	r2, r3, r1
 800ab3c:	fb01 3212 	mls	r2, r1, r2, r3
 800ab40:	1a9b      	subs	r3, r3, r2
 800ab42:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800ab44:	b143      	cbz	r3, 800ab58 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ab46:	6822      	ldr	r2, [r4, #0]
 800ab48:	2101      	movs	r1, #1
 800ab4a:	3240      	adds	r2, #64	@ 0x40
 800ab4c:	9100      	str	r1, [sp, #0]
 800ab4e:	69a1      	ldr	r1, [r4, #24]
 800ab50:	f000 fba7 	bl	800b2a2 <HAL_MDMA_Start_IT>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d1e5      	bne.n	800ab24 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ab58:	07a8      	lsls	r0, r5, #30
 800ab5a:	d509      	bpl.n	800ab70 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800ab5c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ab5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab62:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ab64:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ab66:	0419      	lsls	r1, r3, #16
 800ab68:	d505      	bpl.n	800ab76 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7ff ff6c 	bl	800aa48 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 800ab70:	2000      	movs	r0, #0
}
 800ab72:	b003      	add	sp, #12
 800ab74:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ab76:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ab78:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800ab7a:	2900      	cmp	r1, #0
 800ab7c:	d0d2      	beq.n	800ab24 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ab7e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ab80:	fbb3 f2f1 	udiv	r2, r3, r1
 800ab84:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ab88:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ab8a:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800ab90:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ab92:	9200      	str	r2, [sp, #0]
 800ab94:	69e2      	ldr	r2, [r4, #28]
 800ab96:	f000 fb84 	bl	800b2a2 <HAL_MDMA_Start_IT>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d0e8      	beq.n	800ab70 <HAL_JPEG_Resume+0x76>
 800ab9e:	e7c1      	b.n	800ab24 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800aba0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800aba2:	f003 030c 	and.w	r3, r3, #12
 800aba6:	2b08      	cmp	r3, #8
 800aba8:	d1e2      	bne.n	800ab70 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800abaa:	f011 0301 	ands.w	r3, r1, #1
 800abae:	d004      	beq.n	800abba <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800abb0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800abb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abb6:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800abb8:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800abba:	07aa      	lsls	r2, r5, #30
 800abbc:	d505      	bpl.n	800abca <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800abbe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800abc0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800abc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800abc8:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800abca:	6821      	ldr	r1, [r4, #0]
 800abcc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800abce:	4313      	orrs	r3, r2
 800abd0:	630b      	str	r3, [r1, #48]	@ 0x30
 800abd2:	e7cd      	b.n	800ab70 <HAL_JPEG_Resume+0x76>

0800abd4 <JPEG_DMA_EndProcess>:
{
 800abd4:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800abd6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800abd8:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800abda:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800abe8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800abea:	429a      	cmp	r2, r3
 800abec:	d105      	bne.n	800abfa <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800abee:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800abf0:	69c1      	ldr	r1, [r0, #28]
 800abf2:	f7f7 fe83 	bl	80028fc <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800abfe:	f015 0510 	ands.w	r5, r5, #16
 800ac02:	d124      	bne.n	800ac4e <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800ac04:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ac06:	b12b      	cbz	r3, 800ac14 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac08:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	69e1      	ldr	r1, [r4, #28]
 800ac0e:	f7f7 fe75 	bl	80028fc <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ac12:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac14:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ac16:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac18:	6813      	ldr	r3, [r2, #0]
 800ac1a:	f023 0301 	bic.w	r3, r3, #1
 800ac1e:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 800ac20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac24:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac28:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac2c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac2e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800ac30:	f04f 0200 	mov.w	r2, #0
 800ac34:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ac38:	f04f 0201 	mov.w	r2, #1
 800ac3c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac40:	d102      	bne.n	800ac48 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ac42:	f7f7 fead 	bl	80029a0 <HAL_JPEG_DecodeCpltCallback>
}
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ac48:	f7ff fd2c 	bl	800a6a4 <HAL_JPEG_EncodeCpltCallback>
 800ac4c:	e7fb      	b.n	800ac46 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ac4e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ac50:	049b      	lsls	r3, r3, #18
 800ac52:	d4f8      	bmi.n	800ac46 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800ac54:	4620      	mov	r0, r4
}
 800ac56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800ac5a:	f7ff bef5 	b.w	800aa48 <JPEG_DMA_PollResidualData>

0800ac5e <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ac5e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800ac60:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ac62:	041b      	lsls	r3, r3, #16
 800ac64:	d501      	bpl.n	800ac6a <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800ac66:	f7ff bfb5 	b.w	800abd4 <JPEG_DMA_EndProcess>
}
 800ac6a:	4770      	bx	lr

0800ac6c <JPEG_MDMAOutCpltCallback>:
{
 800ac6c:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ac6e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac74:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ac78:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800ac7a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac7c:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800ac80:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800ac84:	0412      	lsls	r2, r2, #16
 800ac86:	0c12      	lsrs	r2, r2, #16
 800ac88:	2a0c      	cmp	r2, #12
 800ac8a:	d125      	bne.n	800acd8 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8e:	069a      	lsls	r2, r3, #26
 800ac90:	d424      	bmi.n	800acdc <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ac92:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac94:	4620      	mov	r0, r4
 800ac96:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ac98:	695a      	ldr	r2, [r3, #20]
 800ac9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac9c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800aca0:	1a9b      	subs	r3, r3, r2
 800aca2:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aca4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aca6:	f7f7 fe29 	bl	80028fc <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800acaa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800acac:	049b      	lsls	r3, r3, #18
 800acae:	d415      	bmi.n	800acdc <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800acb0:	6821      	ldr	r1, [r4, #0]
 800acb2:	2301      	movs	r3, #1
 800acb4:	3144      	adds	r1, #68	@ 0x44
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800acba:	69e2      	ldr	r2, [r4, #28]
 800acbc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800acbe:	f000 faf0 	bl	800b2a2 <HAL_MDMA_Start_IT>
 800acc2:	b158      	cbz	r0, 800acdc <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800acc4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800acc6:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800acc8:	f043 0304 	orr.w	r3, r3, #4
 800accc:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800acce:	2306      	movs	r3, #6
 800acd0:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800acd4:	f7f7 fe62 	bl	800299c <HAL_JPEG_ErrorCallback>
}
 800acd8:	b002      	add	sp, #8
 800acda:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800acdc:	6822      	ldr	r2, [r4, #0]
 800acde:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800ace0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ace4:	6313      	str	r3, [r2, #48]	@ 0x30
 800ace6:	e7f7      	b.n	800acd8 <JPEG_MDMAOutCpltCallback+0x6c>

0800ace8 <HAL_JPEG_IRQHandler>:
{
 800ace8:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800acea:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800acee:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800acf0:	3b03      	subs	r3, #3
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d850      	bhi.n	800ad98 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800acf6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800acf8:	f003 030c 	and.w	r3, r3, #12
 800acfc:	2b08      	cmp	r3, #8
 800acfe:	d103      	bne.n	800ad08 <HAL_JPEG_IRQHandler+0x20>
}
 800ad00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800ad04:	f7ff be29 	b.w	800a95a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ad08:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ad0a:	f003 030c 	and.w	r3, r3, #12
 800ad0e:	2b0c      	cmp	r3, #12
 800ad10:	d142      	bne.n	800ad98 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ad12:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ad14:	f003 0303 	and.w	r3, r3, #3
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	d114      	bne.n	800ad46 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ad1c:	6803      	ldr	r3, [r0, #0]
 800ad1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad20:	0659      	lsls	r1, r3, #25
 800ad22:	d510      	bpl.n	800ad46 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ad24:	1d01      	adds	r1, r0, #4
 800ad26:	f7ff fbdd 	bl	800a4e4 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800ad2a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ad2c:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800ad2e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ad30:	f7f7 fd90 	bl	8002854 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad3c:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800ad3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad44:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad4a:	0692      	lsls	r2, r2, #26
 800ad4c:	d524      	bpl.n	800ad98 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ad4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800ad50:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800ad52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad56:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	f022 0201 	bic.w	r2, r2, #1
 800ad5e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ad60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad62:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ad66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ad68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad6a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ad6e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800ad70:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d101      	bne.n	800ad7c <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800ad78:	f000 fadc 	bl	800b334 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800ad7c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ad7e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d103      	bne.n	800ad8e <HAL_JPEG_IRQHandler+0xa6>
}
 800ad86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800ad8a:	f000 bad3 	b.w	800b334 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800ad8e:	4620      	mov	r0, r4
}
 800ad90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800ad94:	f7ff bf1e 	b.w	800abd4 <JPEG_DMA_EndProcess>
}
 800ad98:	bd10      	pop	{r4, pc}

0800ad9a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad9a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ad9c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ad9e:	3284      	adds	r2, #132	@ 0x84
 800ada0:	1883      	adds	r3, r0, r2
{
 800ada2:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ada4:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ada6:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ada8:	684c      	ldr	r4, [r1, #4]
 800adaa:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800adae:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800adb2:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800adb4:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800adb6:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800adb8:	f106 0c01 	add.w	ip, r6, #1
 800adbc:	68c5      	ldr	r5, [r0, #12]
 800adbe:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800adc2:	4465      	add	r5, ip
 800adc4:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800adc8:	605d      	str	r5, [r3, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800adca:	68c7      	ldr	r7, [r0, #12]
 800adcc:	68cd      	ldr	r5, [r1, #12]
 800adce:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800add2:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800add4:	689d      	ldr	r5, [r3, #8]
 800add6:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800adda:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800addc:	688d      	ldr	r5, [r1, #8]
 800adde:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800ade2:	3501      	adds	r5, #1
 800ade4:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 800ade8:	4465      	add	r5, ip

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800adea:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800adee:	ea45 4507 	orr.w	r5, r5, r7, lsl #16

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800adf2:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800adf4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800adf6:	691d      	ldr	r5, [r3, #16]
 800adf8:	f025 0507 	bic.w	r5, r5, #7
 800adfc:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800adfe:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800ae02:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800ae06:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ae0a:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800ae0e:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ae12:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800ae16:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800ae1a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ae1c:	695d      	ldr	r5, [r3, #20]
 800ae1e:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800ae22:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ae24:	694d      	ldr	r5, [r1, #20]
 800ae26:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ae28:	69dd      	ldr	r5, [r3, #28]
 800ae2a:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800ae2e:	f025 0507 	bic.w	r5, r5, #7
 800ae32:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ae34:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800ae38:	433d      	orrs	r5, r7
 800ae3a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800ae3c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800ae3e:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ae40:	f1bc 0f00 	cmp.w	ip, #0
 800ae44:	d024      	beq.n	800ae90 <LTDC_SetConfig+0xf6>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ae46:	f1bc 0f01 	cmp.w	ip, #1
 800ae4a:	d023      	beq.n	800ae94 <LTDC_SetConfig+0xfa>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ae4c:	f1ac 0502 	sub.w	r5, ip, #2
 800ae50:	2d02      	cmp	r5, #2
 800ae52:	d921      	bls.n	800ae98 <LTDC_SetConfig+0xfe>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800ae54:	f1bc 0f07 	cmp.w	ip, #7
 800ae58:	bf14      	ite	ne
 800ae5a:	2501      	movne	r5, #1
 800ae5c:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ae5e:	6adf      	ldr	r7, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ae60:	1ba4      	subs	r4, r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ae62:	f007 27e0 	and.w	r7, r7, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ae66:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ae68:	62df      	str	r7, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ae6a:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800ae6c:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ae6e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800ae70:	436f      	muls	r7, r5
 800ae72:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800ae76:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ae78:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800ae7a:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800ae7e:	f024 0407 	bic.w	r4, r4, #7
 800ae82:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ae84:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ae86:	5883      	ldr	r3, [r0, r2]
 800ae88:	f043 0301 	orr.w	r3, r3, #1
 800ae8c:	5083      	str	r3, [r0, r2]
}
 800ae8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 4U;
 800ae90:	2504      	movs	r5, #4
 800ae92:	e7e4      	b.n	800ae5e <LTDC_SetConfig+0xc4>
    tmp = 3U;
 800ae94:	2503      	movs	r5, #3
 800ae96:	e7e2      	b.n	800ae5e <LTDC_SetConfig+0xc4>
    tmp = 2U;
 800ae98:	2502      	movs	r5, #2
 800ae9a:	e7e0      	b.n	800ae5e <LTDC_SetConfig+0xc4>

0800ae9c <HAL_LTDC_Init>:
{
 800ae9c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800ae9e:	4604      	mov	r4, r0
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d04e      	beq.n	800af42 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800aea4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800aea8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800aeac:	b91b      	cbnz	r3, 800aeb6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800aeae:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800aeb2:	f7f6 faa5 	bl	8001400 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	699a      	ldr	r2, [r3, #24]
 800aec0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800aec4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aec6:	6999      	ldr	r1, [r3, #24]
 800aec8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800aecc:	4302      	orrs	r2, r0
 800aece:	68e0      	ldr	r0, [r4, #12]
 800aed0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800aed2:	6920      	ldr	r0, [r4, #16]
 800aed4:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aed6:	430a      	orrs	r2, r1
 800aed8:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800aeda:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800aede:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aee2:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800aee4:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 800aee8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aeec:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800aeee:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 800aef2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aef6:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800aef8:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800aefc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800af00:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800af02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800af04:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800af08:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800af0c:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800af10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800af12:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800af14:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800af18:	432a      	orrs	r2, r5
 800af1a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800af1e:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800af20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800af24:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800af26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af28:	f042 0206 	orr.w	r2, r2, #6
 800af2c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800af2e:	699a      	ldr	r2, [r3, #24]
 800af30:	f042 0201 	orr.w	r2, r2, #1
 800af34:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800af36:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800af38:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800af3c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800af40:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800af42:	2001      	movs	r0, #1
 800af44:	e7fc      	b.n	800af40 <HAL_LTDC_Init+0xa4>

0800af46 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800af46:	4770      	bx	lr

0800af48 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800af48:	4770      	bx	lr

0800af4a <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800af4a:	4770      	bx	lr

0800af4c <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800af4c:	6803      	ldr	r3, [r0, #0]
{
 800af4e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800af50:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800af52:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800af54:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800af56:	0772      	lsls	r2, r6, #29
 800af58:	d514      	bpl.n	800af84 <HAL_LTDC_IRQHandler+0x38>
 800af5a:	0769      	lsls	r1, r5, #29
 800af5c:	d512      	bpl.n	800af84 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800af5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af60:	f022 0204 	bic.w	r2, r2, #4
 800af64:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800af66:	2204      	movs	r2, #4
 800af68:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800af6a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800af76:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800af78:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800af7c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800af80:	f7ff ffe1 	bl	800af46 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800af84:	07b2      	lsls	r2, r6, #30
 800af86:	d516      	bpl.n	800afb6 <HAL_LTDC_IRQHandler+0x6a>
 800af88:	07ab      	lsls	r3, r5, #30
 800af8a:	d514      	bpl.n	800afb6 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800af8c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800af8e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800af90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af92:	f022 0202 	bic.w	r2, r2, #2
 800af96:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800af98:	2202      	movs	r2, #2
 800af9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800af9c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800afa6:	2304      	movs	r3, #4
 800afa8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800afac:	2300      	movs	r3, #0
 800afae:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800afb2:	f7ff ffc8 	bl	800af46 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800afb6:	07f0      	lsls	r0, r6, #31
 800afb8:	d510      	bpl.n	800afdc <HAL_LTDC_IRQHandler+0x90>
 800afba:	07e9      	lsls	r1, r5, #31
 800afbc:	d50e      	bpl.n	800afdc <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800afbe:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800afc0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800afc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afc4:	f022 0201 	bic.w	r2, r2, #1
 800afc8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800afca:	2201      	movs	r2, #1
 800afcc:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800afce:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800afd0:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800afd4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800afd8:	f7ff ffb6 	bl	800af48 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800afdc:	0732      	lsls	r2, r6, #28
 800afde:	d511      	bpl.n	800b004 <HAL_LTDC_IRQHandler+0xb8>
 800afe0:	072b      	lsls	r3, r5, #28
 800afe2:	d50f      	bpl.n	800b004 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800afe4:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800afe6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800afe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afea:	f022 0208 	bic.w	r2, r2, #8
 800afee:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800aff0:	2208      	movs	r2, #8
 800aff2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800aff4:	2301      	movs	r3, #1
 800aff6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800affa:	2300      	movs	r3, #0
 800affc:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b000:	f7ff ffa3 	bl	800af4a <HAL_LTDC_ReloadEventCallback>
}
 800b004:	bd70      	pop	{r4, r5, r6, pc}

0800b006 <HAL_LTDC_ConfigLayer>:
{
 800b006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800b00a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800b00e:	4606      	mov	r6, r0
 800b010:	460f      	mov	r7, r1
 800b012:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800b014:	2b01      	cmp	r3, #1
 800b016:	f04f 0002 	mov.w	r0, #2
 800b01a:	d01f      	beq.n	800b05c <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b01c:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800b01e:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b022:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b024:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b028:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800b02c:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b030:	3438      	adds	r4, #56	@ 0x38
 800b032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b03a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b03c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b03e:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b040:	4630      	mov	r0, r6
 800b042:	4662      	mov	r2, ip
 800b044:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b046:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b048:	f7ff fea7 	bl	800ad9a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b04c:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800b04e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b050:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b054:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b058:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800b05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b060 <HAL_LTDC_SetPitch>:
{
 800b060:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800b062:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800b066:	2b01      	cmp	r3, #1
 800b068:	f04f 0302 	mov.w	r3, #2
 800b06c:	d02c      	beq.n	800b0c8 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b06e:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b070:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800b074:	fb04 0402 	mla	r4, r4, r2, r0
 800b078:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b07a:	b33c      	cbz	r4, 800b0cc <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b07c:	2c01      	cmp	r4, #1
 800b07e:	d027      	beq.n	800b0d0 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b080:	1ea5      	subs	r5, r4, #2
 800b082:	429d      	cmp	r5, r3
 800b084:	d902      	bls.n	800b08c <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800b086:	2c07      	cmp	r4, #7
 800b088:	bf18      	it	ne
 800b08a:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b08c:	01d2      	lsls	r2, r2, #7
 800b08e:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800b090:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800b092:	3284      	adds	r2, #132	@ 0x84
 800b094:	4422      	add	r2, r4
 800b096:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800b098:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800b09c:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800b0a0:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b0a2:	4c0c      	ldr	r4, [pc, #48]	@ (800b0d4 <HAL_LTDC_SetPitch+0x74>)
 800b0a4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800b0a6:	f045 0501 	orr.w	r5, r5, #1
 800b0aa:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800b0ac:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800b0ae:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800b0b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800b0b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b0b6:	f043 0301 	orr.w	r3, r3, #1
 800b0ba:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800b0cc:	2304      	movs	r3, #4
 800b0ce:	e7dd      	b.n	800b08c <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e7db      	b.n	800b08c <HAL_LTDC_SetPitch+0x2c>
 800b0d4:	50001000 	.word	0x50001000

0800b0d8 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b0d8:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b0da:	6804      	ldr	r4, [r0, #0]
 800b0dc:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b0e0:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b0e4:	6965      	ldr	r5, [r4, #20]
 800b0e6:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800b0ea:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800b0ee:	ea45 0503 	orr.w	r5, r5, r3
 800b0f2:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800b0f4:	9d03      	ldr	r5, [sp, #12]
 800b0f6:	6963      	ldr	r3, [r4, #20]
 800b0f8:	f105 35ff 	add.w	r5, r5, #4294967295
 800b0fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b100:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800b104:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800b106:	f04f 031f 	mov.w	r3, #31
 800b10a:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800b10c:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800b10e:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800b110:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b112:	bf0c      	ite	eq
 800b114:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b118:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800b11c:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800b120:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800b122:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b124:	bf0c      	ite	eq
 800b126:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800b12a:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800b12e:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800b130:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800b132:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800b134:	bd30      	pop	{r4, r5, pc}

0800b136 <HAL_MDMA_Init>:
{
 800b136:	b538      	push	{r3, r4, r5, lr}
 800b138:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b13a:	f7fd fb33 	bl	80087a4 <HAL_GetTick>
 800b13e:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800b140:	2c00      	cmp	r4, #0
 800b142:	d061      	beq.n	800b208 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800b144:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800b146:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800b148:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b14c:	2302      	movs	r3, #2
 800b14e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800b152:	68d3      	ldr	r3, [r2, #12]
 800b154:	f023 0301 	bic.w	r3, r3, #1
 800b158:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	07d2      	lsls	r2, r2, #31
 800b160:	d448      	bmi.n	800b1f4 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b162:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800b166:	430a      	orrs	r2, r1
 800b168:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b16a:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800b16e:	430a      	orrs	r2, r1
 800b170:	69e1      	ldr	r1, [r4, #28]
 800b172:	430a      	orrs	r2, r1
 800b174:	6a21      	ldr	r1, [r4, #32]
 800b176:	430a      	orrs	r2, r1
 800b178:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b17a:	430a      	orrs	r2, r1
 800b17c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b17e:	430a      	orrs	r2, r1
 800b180:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b182:	430a      	orrs	r2, r1
 800b184:	68a1      	ldr	r1, [r4, #8]
 800b186:	430a      	orrs	r2, r1
 800b188:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b18a:	3901      	subs	r1, #1
 800b18c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b190:	6861      	ldr	r1, [r4, #4]
 800b192:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b196:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b198:	d103      	bne.n	800b1a2 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b19a:	691a      	ldr	r2, [r3, #16]
 800b19c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b1a0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b1a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b1a8:	2a00      	cmp	r2, #0
 800b1aa:	da04      	bge.n	800b1b6 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b1ac:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b1ae:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b1b0:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800b1b4:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b1b6:	b292      	uxth	r2, r2
 800b1b8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b1ba:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b1bc:	2a00      	cmp	r2, #0
 800b1be:	da25      	bge.n	800b20c <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b1c0:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800b1c2:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b1c4:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800b1c8:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b1ca:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b1cc:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b1d0:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b1d4:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b1d6:	f04f 0200 	mov.w	r2, #0
 800b1da:	d019      	beq.n	800b210 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800b1dc:	b2c9      	uxtb	r1, r1
 800b1de:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800b1e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800b1e2:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b1e4:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800b1e6:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800b1e8:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800b1ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800b1ee:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800b1f2:	e00a      	b.n	800b20a <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b1f4:	f7fd fad6 	bl	80087a4 <HAL_GetTick>
 800b1f8:	1b40      	subs	r0, r0, r5
 800b1fa:	2805      	cmp	r0, #5
 800b1fc:	d9ad      	bls.n	800b15a <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b1fe:	2340      	movs	r3, #64	@ 0x40
 800b200:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b202:	2303      	movs	r3, #3
 800b204:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800b208:	2001      	movs	r0, #1
}
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b20c:	6a18      	ldr	r0, [r3, #32]
 800b20e:	e7dd      	b.n	800b1cc <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800b210:	629a      	str	r2, [r3, #40]	@ 0x28
 800b212:	e7e5      	b.n	800b1e0 <HAL_MDMA_Init+0xaa>

0800b214 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800b214:	b1d8      	cbz	r0, 800b24e <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800b216:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800b218:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800b21a:	68d3      	ldr	r3, [r2, #12]
 800b21c:	f023 0301 	bic.w	r3, r3, #1
 800b220:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800b226:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800b228:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800b22a:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800b22c:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800b22e:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800b230:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800b232:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800b234:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800b236:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800b238:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b23a:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800b23c:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800b23e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800b242:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b246:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800b24a:	4618      	mov	r0, r3
 800b24c:	4770      	bx	lr
    return HAL_ERROR;
 800b24e:	2001      	movs	r0, #1
}
 800b250:	4770      	bx	lr

0800b252 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800b252:	4603      	mov	r3, r0
{
 800b254:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800b256:	b300      	cbz	r0, 800b29a <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800b258:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800b25c:	2801      	cmp	r0, #1
 800b25e:	d01e      	beq.n	800b29e <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800b260:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b262:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800b266:	42a5      	cmp	r5, r4
 800b268:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800b26a:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b26e:	d112      	bne.n	800b296 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b270:	681c      	ldr	r4, [r3, #0]
 800b272:	6925      	ldr	r5, [r4, #16]
 800b274:	006d      	lsls	r5, r5, #1
 800b276:	d407      	bmi.n	800b288 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800b278:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b27a:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b27c:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800b27e:	b939      	cbnz	r1, 800b290 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b280:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800b284:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b286:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b28e:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b290:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b294:	e7f6      	b.n	800b284 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800b296:	4620      	mov	r0, r4
 800b298:	e7f6      	b.n	800b288 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800b29a:	2001      	movs	r0, #1
 800b29c:	e7f7      	b.n	800b28e <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800b29e:	2002      	movs	r0, #2
 800b2a0:	e7f5      	b.n	800b28e <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800b2a2 <HAL_MDMA_Start_IT>:
{
 800b2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d042      	beq.n	800b330 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800b2aa:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800b2ae:	2d01      	cmp	r5, #1
 800b2b0:	d03c      	beq.n	800b32c <HAL_MDMA_Start_IT+0x8a>
 800b2b2:	2501      	movs	r5, #1
 800b2b4:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b2b8:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800b2bc:	2d01      	cmp	r5, #1
 800b2be:	f04f 0500 	mov.w	r5, #0
 800b2c2:	d131      	bne.n	800b328 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b2c4:	2602      	movs	r6, #2
 800b2c6:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b2ca:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800b2cc:	6805      	ldr	r5, [r0, #0]
 800b2ce:	68ee      	ldr	r6, [r5, #12]
 800b2d0:	f026 0601 	bic.w	r6, r6, #1
 800b2d4:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b2d6:	9e06      	ldr	r6, [sp, #24]
 800b2d8:	9600      	str	r6, [sp, #0]
 800b2da:	f7ff fefd 	bl	800b0d8 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b2de:	68eb      	ldr	r3, [r5, #12]
 800b2e0:	f043 0306 	orr.w	r3, r3, #6
 800b2e4:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800b2e6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800b2e8:	b11b      	cbz	r3, 800b2f2 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b2ea:	68eb      	ldr	r3, [r5, #12]
 800b2ec:	f043 0310 	orr.w	r3, r3, #16
 800b2f0:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b2f2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b2f4:	b11b      	cbz	r3, 800b2fe <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b2f6:	68eb      	ldr	r3, [r5, #12]
 800b2f8:	f043 0308 	orr.w	r3, r3, #8
 800b2fc:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800b2fe:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b300:	b11b      	cbz	r3, 800b30a <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b302:	68eb      	ldr	r3, [r5, #12]
 800b304:	f043 0320 	orr.w	r3, r3, #32
 800b308:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800b30a:	68eb      	ldr	r3, [r5, #12]
 800b30c:	f043 0301 	orr.w	r3, r3, #1
 800b310:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b312:	6863      	ldr	r3, [r4, #4]
 800b314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b318:	d103      	bne.n	800b322 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b31a:	68eb      	ldr	r3, [r5, #12]
 800b31c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b320:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800b322:	2000      	movs	r0, #0
}
 800b324:	b002      	add	sp, #8
 800b326:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800b328:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800b32c:	2002      	movs	r0, #2
 800b32e:	e7f9      	b.n	800b324 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800b330:	2001      	movs	r0, #1
 800b332:	e7f7      	b.n	800b324 <HAL_MDMA_Start_IT+0x82>

0800b334 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800b334:	b128      	cbz	r0, 800b342 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b336:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d003      	beq.n	800b346 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b33e:	2380      	movs	r3, #128	@ 0x80
 800b340:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800b342:	2001      	movs	r0, #1
 800b344:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800b346:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b348:	2304      	movs	r3, #4
 800b34a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800b34e:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800b350:	68d3      	ldr	r3, [r2, #12]
 800b352:	f023 0301 	bic.w	r3, r3, #1
 800b356:	60d3      	str	r3, [r2, #12]
}
 800b358:	4770      	bx	lr
	...

0800b35c <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800b35c:	2300      	movs	r3, #0
{
 800b35e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800b360:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b362:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800b366:	4b58      	ldr	r3, [pc, #352]	@ (800b4c8 <HAL_MDMA_IRQHandler+0x16c>)
{
 800b368:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b36a:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800b36c:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b36e:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b370:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b372:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800b376:	3a40      	subs	r2, #64	@ 0x40
 800b378:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800b37c:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b380:	4202      	tst	r2, r0
 800b382:	f000 809e 	beq.w	800b4c2 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	07d1      	lsls	r1, r2, #31
 800b38a:	d529      	bpl.n	800b3e0 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	0792      	lsls	r2, r2, #30
 800b390:	d526      	bpl.n	800b3e0 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800b392:	68da      	ldr	r2, [r3, #12]
 800b394:	f022 0202 	bic.w	r2, r2, #2
 800b398:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800b39a:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b39c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800b39e:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b3a0:	bf54      	ite	pl
 800b3a2:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800b3a6:	f041 0102 	orrmi.w	r1, r1, #2
 800b3aa:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800b3ac:	0591      	lsls	r1, r2, #22
 800b3ae:	d503      	bpl.n	800b3b8 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800b3b0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b3b2:	f041 0104 	orr.w	r1, r1, #4
 800b3b6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800b3b8:	05d0      	lsls	r0, r2, #23
 800b3ba:	d503      	bpl.n	800b3c4 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800b3bc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b3be:	f041 0108 	orr.w	r1, r1, #8
 800b3c2:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800b3c4:	0551      	lsls	r1, r2, #21
 800b3c6:	d503      	bpl.n	800b3d0 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800b3c8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800b3ca:	f041 0110 	orr.w	r1, r1, #16
 800b3ce:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800b3d0:	0512      	lsls	r2, r2, #20
 800b3d2:	d503      	bpl.n	800b3dc <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800b3d4:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800b3d6:	f042 0220 	orr.w	r2, r2, #32
 800b3da:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800b3dc:	2201      	movs	r2, #1
 800b3de:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	06d0      	lsls	r0, r2, #27
 800b3e4:	d508      	bpl.n	800b3f8 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800b3e6:	68da      	ldr	r2, [r3, #12]
 800b3e8:	0691      	lsls	r1, r2, #26
 800b3ea:	d505      	bpl.n	800b3f8 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b3ec:	2210      	movs	r2, #16
 800b3ee:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800b3f0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b3f2:	b10b      	cbz	r3, 800b3f8 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	0712      	lsls	r2, r2, #28
 800b3fe:	d508      	bpl.n	800b412 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b400:	68da      	ldr	r2, [r3, #12]
 800b402:	06d0      	lsls	r0, r2, #27
 800b404:	d505      	bpl.n	800b412 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b406:	2208      	movs	r2, #8
 800b408:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800b40a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b40c:	b10b      	cbz	r3, 800b412 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800b40e:	4620      	mov	r0, r4
 800b410:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	0751      	lsls	r1, r2, #29
 800b418:	d508      	bpl.n	800b42c <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	0712      	lsls	r2, r2, #28
 800b41e:	d505      	bpl.n	800b42c <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b420:	2204      	movs	r2, #4
 800b422:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b424:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b426:	b10b      	cbz	r3, 800b42c <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b428:	4620      	mov	r0, r4
 800b42a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	0790      	lsls	r0, r2, #30
 800b432:	d524      	bpl.n	800b47e <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b434:	68da      	ldr	r2, [r3, #12]
 800b436:	0751      	lsls	r1, r2, #29
 800b438:	d521      	bpl.n	800b47e <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b43a:	68da      	ldr	r2, [r3, #12]
 800b43c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b440:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b442:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800b446:	2a04      	cmp	r2, #4
 800b448:	f04f 0200 	mov.w	r2, #0
 800b44c:	d10c      	bne.n	800b468 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800b44e:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800b450:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800b454:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800b458:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d031      	beq.n	800b4c2 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800b45e:	4620      	mov	r0, r4
}
 800b460:	b003      	add	sp, #12
 800b462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800b466:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b468:	2102      	movs	r1, #2
 800b46a:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800b46c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800b46e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800b472:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800b476:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b478:	b10b      	cbz	r3, 800b47e <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800b47a:	4620      	mov	r0, r4
 800b47c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b47e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800b480:	b1fb      	cbz	r3, 800b4c2 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800b482:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800b486:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b48a:	2304      	movs	r3, #4
 800b48c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	68da      	ldr	r2, [r3, #12]
 800b494:	f022 0201 	bic.w	r2, r2, #1
 800b498:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800b49a:	9a01      	ldr	r2, [sp, #4]
 800b49c:	3201      	adds	r2, #1
 800b49e:	42aa      	cmp	r2, r5
 800b4a0:	9201      	str	r2, [sp, #4]
 800b4a2:	d802      	bhi.n	800b4aa <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	07d2      	lsls	r2, r2, #31
 800b4a8:	d4f7      	bmi.n	800b49a <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b4b4:	bf4c      	ite	mi
 800b4b6:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800b4b8:	2301      	movpl	r3, #1
 800b4ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800b4be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b4c0:	e7cb      	b.n	800b45a <HAL_MDMA_IRQHandler+0xfe>
}
 800b4c2:	b003      	add	sp, #12
 800b4c4:	bd30      	pop	{r4, r5, pc}
 800b4c6:	bf00      	nop
 800b4c8:	2400006c 	.word	0x2400006c

0800b4cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b4cc:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b4ce:	4d1c      	ldr	r5, [pc, #112]	@ (800b540 <HAL_PWREx_ConfigSupply+0x74>)
{
 800b4d0:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b4d2:	68eb      	ldr	r3, [r5, #12]
 800b4d4:	f003 0307 	and.w	r3, r3, #7
 800b4d8:	2b06      	cmp	r3, #6
 800b4da:	d006      	beq.n	800b4ea <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b4dc:	68e8      	ldr	r0, [r5, #12]
 800b4de:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800b4e2:	1b00      	subs	r0, r0, r4
 800b4e4:	bf18      	it	ne
 800b4e6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800b4e8:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b4ea:	68eb      	ldr	r3, [r5, #12]
 800b4ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b4f0:	4303      	orrs	r3, r0
 800b4f2:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800b4f4:	f7fd f956 	bl	80087a4 <HAL_GetTick>
 800b4f8:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b4fa:	686b      	ldr	r3, [r5, #4]
 800b4fc:	049a      	lsls	r2, r3, #18
 800b4fe:	d508      	bpl.n	800b512 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b500:	f1a4 031d 	sub.w	r3, r4, #29
 800b504:	2b01      	cmp	r3, #1
 800b506:	d90c      	bls.n	800b522 <HAL_PWREx_ConfigSupply+0x56>
 800b508:	3c2d      	subs	r4, #45	@ 0x2d
 800b50a:	2c01      	cmp	r4, #1
 800b50c:	d909      	bls.n	800b522 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800b50e:	2000      	movs	r0, #0
 800b510:	e7ea      	b.n	800b4e8 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b512:	f7fd f947 	bl	80087a4 <HAL_GetTick>
 800b516:	1b80      	subs	r0, r0, r6
 800b518:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b51c:	d9ed      	bls.n	800b4fa <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800b51e:	2001      	movs	r0, #1
 800b520:	e7e2      	b.n	800b4e8 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800b522:	f7fd f93f 	bl	80087a4 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b526:	4d06      	ldr	r5, [pc, #24]	@ (800b540 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800b528:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b52a:	68eb      	ldr	r3, [r5, #12]
 800b52c:	03db      	lsls	r3, r3, #15
 800b52e:	d4ee      	bmi.n	800b50e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b530:	f7fd f938 	bl	80087a4 <HAL_GetTick>
 800b534:	1b00      	subs	r0, r0, r4
 800b536:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800b53a:	d9f6      	bls.n	800b52a <HAL_PWREx_ConfigSupply+0x5e>
 800b53c:	e7ef      	b.n	800b51e <HAL_PWREx_ConfigSupply+0x52>
 800b53e:	bf00      	nop
 800b540:	58024800 	.word	0x58024800

0800b544 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b548:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800b54a:	b135      	cbz	r5, 800b55a <QSPI_Config+0x16>
 800b54c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800b550:	d003      	beq.n	800b55a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b552:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800b554:	6804      	ldr	r4, [r0, #0]
 800b556:	3b01      	subs	r3, #1
 800b558:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b55a:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b55e:	e9d1 7807 	ldrd	r7, r8, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b562:	f1ba 0f00 	cmp.w	sl, #0
 800b566:	d04c      	beq.n	800b602 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b568:	694c      	ldr	r4, [r1, #20]
 800b56a:	ea45 0a0a 	orr.w	sl, r5, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b56e:	6806      	ldr	r6, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b570:	680b      	ldr	r3, [r1, #0]
 800b572:	04a4      	lsls	r4, r4, #18
 800b574:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
 800b578:	ea4a 0a02 	orr.w	sl, sl, r2
 800b57c:	e9d1 0e0b 	ldrd	r0, lr, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b580:	f1b8 0f00 	cmp.w	r8, #0
 800b584:	d026      	beq.n	800b5d4 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b586:	688d      	ldr	r5, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b588:	f8d1 9010 	ldr.w	r9, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b58c:	61f5      	str	r5, [r6, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b58e:	ea4a 0508 	orr.w	r5, sl, r8
 800b592:	b19f      	cbz	r7, 800b5bc <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b594:	433b      	orrs	r3, r7
 800b596:	4303      	orrs	r3, r0
 800b598:	68c8      	ldr	r0, [r1, #12]
 800b59a:	ea43 030e 	orr.w	r3, r3, lr
 800b59e:	ea43 030c 	orr.w	r3, r3, ip
 800b5a2:	ea43 0309 	orr.w	r3, r3, r9
 800b5a6:	4303      	orrs	r3, r0
 800b5a8:	4323      	orrs	r3, r4
 800b5aa:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b5ac:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b5b0:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b5b2:	d001      	beq.n	800b5b8 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b5b4:	684b      	ldr	r3, [r1, #4]
 800b5b6:	61b3      	str	r3, [r6, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800b5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b5bc:	4303      	orrs	r3, r0
 800b5be:	ea43 030e 	orr.w	r3, r3, lr
 800b5c2:	ea43 030c 	orr.w	r3, r3, ip
 800b5c6:	ea43 0309 	orr.w	r3, r3, r9
 800b5ca:	4323      	orrs	r3, r4
 800b5cc:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b5ce:	6173      	str	r3, [r6, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800b5d0:	61b7      	str	r7, [r6, #24]
 800b5d2:	e7f1      	b.n	800b5b8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b5d4:	b15f      	cbz	r7, 800b5ee <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b5d6:	433b      	orrs	r3, r7
 800b5d8:	4303      	orrs	r3, r0
 800b5da:	68c8      	ldr	r0, [r1, #12]
 800b5dc:	ea43 030e 	orr.w	r3, r3, lr
 800b5e0:	ea43 030c 	orr.w	r3, r3, ip
 800b5e4:	4303      	orrs	r3, r0
 800b5e6:	4323      	orrs	r3, r4
 800b5e8:	ea43 030a 	orr.w	r3, r3, sl
 800b5ec:	e7de      	b.n	800b5ac <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b5ee:	4303      	orrs	r3, r0
 800b5f0:	ea43 030e 	orr.w	r3, r3, lr
 800b5f4:	ea43 050c 	orr.w	r5, r3, ip
 800b5f8:	ea45 0304 	orr.w	r3, r5, r4
 800b5fc:	ea43 030a 	orr.w	r3, r3, sl
 800b600:	e7e5      	b.n	800b5ce <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b602:	f1b8 0f00 	cmp.w	r8, #0
 800b606:	d02d      	beq.n	800b664 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b608:	688b      	ldr	r3, [r1, #8]
 800b60a:	ea45 0508 	orr.w	r5, r5, r8
 800b60e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b610:	694e      	ldr	r6, [r1, #20]
 800b612:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b614:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b616:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b61a:	04b6      	lsls	r6, r6, #18
 800b61c:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b61e:	e9d1 9e0b 	ldrd	r9, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b622:	b1a7      	cbz	r7, 800b64e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b624:	433b      	orrs	r3, r7
 800b626:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b628:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b62c:	ea43 0309 	orr.w	r3, r3, r9
 800b630:	ea43 030e 	orr.w	r3, r3, lr
 800b634:	ea43 030c 	orr.w	r3, r3, ip
 800b638:	ea43 0300 	orr.w	r3, r3, r0
 800b63c:	ea43 0306 	orr.w	r3, r3, r6
 800b640:	ea43 0305 	orr.w	r3, r3, r5
 800b644:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b646:	d0b7      	beq.n	800b5b8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b648:	684b      	ldr	r3, [r1, #4]
 800b64a:	61a3      	str	r3, [r4, #24]
 800b64c:	e7b4      	b.n	800b5b8 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b64e:	ea43 0209 	orr.w	r2, r3, r9
 800b652:	ea42 020e 	orr.w	r2, r2, lr
 800b656:	ea42 020c 	orr.w	r2, r2, ip
 800b65a:	4332      	orrs	r2, r6
 800b65c:	432a      	orrs	r2, r5
 800b65e:	6162      	str	r2, [r4, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800b660:	61a7      	str	r7, [r4, #24]
 800b662:	e7a9      	b.n	800b5b8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b664:	b1d7      	cbz	r7, 800b69c <QSPI_Config+0x158>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b666:	ea45 0307 	orr.w	r3, r5, r7
 800b66a:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800b66c:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b66e:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b672:	ea43 0302 	orr.w	r3, r3, r2
 800b676:	ea43 0304 	orr.w	r3, r3, r4
 800b67a:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800b67c:	ea43 0304 	orr.w	r3, r3, r4
 800b680:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800b682:	ea43 0304 	orr.w	r3, r3, r4
 800b686:	68cc      	ldr	r4, [r1, #12]
 800b688:	ea43 0304 	orr.w	r3, r3, r4
 800b68c:	694c      	ldr	r4, [r1, #20]
 800b68e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800b692:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b694:	d090      	beq.n	800b5b8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b696:	684b      	ldr	r3, [r1, #4]
 800b698:	6183      	str	r3, [r0, #24]
 800b69a:	e78d      	b.n	800b5b8 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b69c:	2d00      	cmp	r5, #0
 800b69e:	d08b      	beq.n	800b5b8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b6a0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800b6a2:	6800      	ldr	r0, [r0, #0]
 800b6a4:	432b      	orrs	r3, r5
 800b6a6:	431a      	orrs	r2, r3
 800b6a8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800b6ae:	431a      	orrs	r2, r3
 800b6b0:	694b      	ldr	r3, [r1, #20]
 800b6b2:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800b6b6:	6142      	str	r2, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800b6b8:	6187      	str	r7, [r0, #24]
}
 800b6ba:	e77d      	b.n	800b5b8 <QSPI_Config+0x74>

0800b6bc <QSPI_WaitFlagStateUntilTimeout>:
{
 800b6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	460e      	mov	r6, r1
 800b6c8:	4615      	mov	r5, r2
 800b6ca:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b6cc:	6822      	ldr	r2, [r4, #0]
 800b6ce:	6893      	ldr	r3, [r2, #8]
 800b6d0:	4233      	tst	r3, r6
 800b6d2:	bf14      	ite	ne
 800b6d4:	2301      	movne	r3, #1
 800b6d6:	2300      	moveq	r3, #0
 800b6d8:	42ab      	cmp	r3, r5
 800b6da:	d101      	bne.n	800b6e0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e012      	b.n	800b706 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800b6e0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b6e4:	d0f3      	beq.n	800b6ce <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6e6:	f7fd f85d 	bl	80087a4 <HAL_GetTick>
 800b6ea:	1bc0      	subs	r0, r0, r7
 800b6ec:	4540      	cmp	r0, r8
 800b6ee:	d802      	bhi.n	800b6f6 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800b6f0:	f1b8 0f00 	cmp.w	r8, #0
 800b6f4:	d1ea      	bne.n	800b6cc <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b6f6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b6f8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b6fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b6fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b700:	f043 0301 	orr.w	r3, r3, #1
 800b704:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800b706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b70c <HAL_QSPI_Init>:
{
 800b70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b70e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b710:	f7fd f848 	bl	80087a4 <HAL_GetTick>
 800b714:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800b716:	2c00      	cmp	r4, #0
 800b718:	d03f      	beq.n	800b79a <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b71a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b71e:	b92b      	cbnz	r3, 800b72c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800b720:	4620      	mov	r0, r4
 800b722:	f7f5 feab 	bl	800147c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800b726:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b72a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b72c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b72e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b730:	68a3      	ldr	r3, [r4, #8]
 800b732:	680a      	ldr	r2, [r1, #0]
 800b734:	3b01      	subs	r3, #1
 800b736:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800b73a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b73e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b740:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b742:	2200      	movs	r2, #0
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	2120      	movs	r1, #32
 800b748:	462b      	mov	r3, r5
 800b74a:	f7ff ffb7 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800b74e:	bb10      	cbnz	r0, 800b796 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	69e5      	ldr	r5, [r4, #28]
 800b754:	68e3      	ldr	r3, [r4, #12]
 800b756:	6811      	ldr	r1, [r2, #0]
 800b758:	432b      	orrs	r3, r5
 800b75a:	6a25      	ldr	r5, [r4, #32]
 800b75c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800b760:	432b      	orrs	r3, r5
 800b762:	6865      	ldr	r5, [r4, #4]
 800b764:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800b768:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800b76c:	430b      	orrs	r3, r1
 800b76e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b770:	6855      	ldr	r5, [r2, #4]
 800b772:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800b776:	430b      	orrs	r3, r1
 800b778:	6921      	ldr	r1, [r4, #16]
 800b77a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b77e:	4908      	ldr	r1, [pc, #32]	@ (800b7a0 <HAL_QSPI_Init+0x94>)
 800b780:	4029      	ands	r1, r5
 800b782:	430b      	orrs	r3, r1
 800b784:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800b786:	6813      	ldr	r3, [r2, #0]
 800b788:	f043 0301 	orr.w	r3, r3, #1
 800b78c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800b78e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b790:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800b792:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800b796:	b003      	add	sp, #12
 800b798:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800b79a:	2001      	movs	r0, #1
 800b79c:	e7fb      	b.n	800b796 <HAL_QSPI_Init+0x8a>
 800b79e:	bf00      	nop
 800b7a0:	ffe0f8fe 	.word	0xffe0f8fe

0800b7a4 <HAL_QSPI_Command>:
{
 800b7a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	468a      	mov	sl, r1
 800b7ac:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800b7ae:	f7fc fff9 	bl	80087a4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b7b2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b7b6:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d036      	beq.n	800b82a <HAL_QSPI_Command+0x86>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	2602      	movs	r6, #2
 800b7c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b7c4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	fa5f f983 	uxtb.w	r9, r3
 800b7ce:	d128      	bne.n	800b822 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b7d0:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2120      	movs	r1, #32
 800b7d6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b7d8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b7da:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b7de:	f8cd 8000 	str.w	r8, [sp]
 800b7e2:	f7ff ff6b 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	b9a0      	cbnz	r0, 800b814 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	4651      	mov	r1, sl
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f7ff fea8 	bl	800b544 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800b7f4:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800b7f8:	b953      	cbnz	r3, 800b810 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	464a      	mov	r2, r9
 800b7fe:	4631      	mov	r1, r6
 800b800:	4620      	mov	r0, r4
 800b802:	f8cd 8000 	str.w	r8, [sp]
 800b806:	f7ff ff59 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b80a:	b960      	cbnz	r0, 800b826 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800b810:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b814:	2300      	movs	r3, #0
 800b816:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b81a:	4628      	mov	r0, r5
 800b81c:	b002      	add	sp, #8
 800b81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800b822:	4635      	mov	r5, r6
 800b824:	e7f6      	b.n	800b814 <HAL_QSPI_Command+0x70>
 800b826:	4605      	mov	r5, r0
 800b828:	e7f4      	b.n	800b814 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800b82a:	2502      	movs	r5, #2
 800b82c:	e7f5      	b.n	800b81a <HAL_QSPI_Command+0x76>

0800b82e <HAL_QSPI_Transmit>:
{
 800b82e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b832:	4604      	mov	r4, r0
 800b834:	4688      	mov	r8, r1
 800b836:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800b838:	f7fc ffb4 	bl	80087a4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b83c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b840:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b842:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800b844:	2b01      	cmp	r3, #1
 800b846:	d04c      	beq.n	800b8e2 <HAL_QSPI_Transmit+0xb4>
 800b848:	2301      	movs	r3, #1
 800b84a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b84e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b852:	2b01      	cmp	r3, #1
 800b854:	b2d8      	uxtb	r0, r3
 800b856:	d142      	bne.n	800b8de <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b858:	2300      	movs	r3, #0
 800b85a:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800b85c:	f1b8 0f00 	cmp.w	r8, #0
 800b860:	d038      	beq.n	800b8d4 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b862:	2312      	movs	r3, #18
 800b864:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b868:	692b      	ldr	r3, [r5, #16]
 800b86a:	3301      	adds	r3, #1
 800b86c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b86e:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800b870:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b874:	3301      	adds	r3, #1
 800b876:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b878:	696b      	ldr	r3, [r5, #20]
 800b87a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800b87e:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800b880:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b882:	b99b      	cbnz	r3, 800b8ac <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b884:	4633      	mov	r3, r6
 800b886:	2201      	movs	r2, #1
 800b888:	2102      	movs	r1, #2
 800b88a:	4620      	mov	r0, r4
 800b88c:	9700      	str	r7, [sp, #0]
 800b88e:	f7ff ff15 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800b892:	b910      	cbnz	r0, 800b89a <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	2202      	movs	r2, #2
 800b898:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b89a:	2301      	movs	r3, #1
 800b89c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b8a6:	b002      	add	sp, #8
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b8ac:	4633      	mov	r3, r6
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	2104      	movs	r1, #4
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	9700      	str	r7, [sp, #0]
 800b8b6:	f7ff ff01 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d1ed      	bne.n	800b89a <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b8be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800b8c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800b8cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b8d2:	e7d5      	b.n	800b880 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b8d4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b8d6:	f043 0308 	orr.w	r3, r3, #8
 800b8da:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800b8dc:	e7e0      	b.n	800b8a0 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800b8de:	2002      	movs	r0, #2
 800b8e0:	e7de      	b.n	800b8a0 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800b8e2:	2002      	movs	r0, #2
 800b8e4:	e7df      	b.n	800b8a6 <HAL_QSPI_Transmit+0x78>

0800b8e6 <HAL_QSPI_Receive>:
{
 800b8e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	4617      	mov	r7, r2
 800b8ee:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800b8f0:	f7fc ff58 	bl	80087a4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b8f4:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800b8f6:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b8f8:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800b8fa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d04f      	beq.n	800b9a2 <HAL_QSPI_Receive+0xbc>
 800b902:	2301      	movs	r3, #1
 800b904:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b908:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	b2d8      	uxtb	r0, r3
 800b910:	d145      	bne.n	800b99e <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b912:	2300      	movs	r3, #0
 800b914:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800b916:	f1b8 0f00 	cmp.w	r8, #0
 800b91a:	d03b      	beq.n	800b994 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b91c:	2322      	movs	r3, #34	@ 0x22
 800b91e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b922:	692b      	ldr	r3, [r5, #16]
 800b924:	3301      	adds	r3, #1
 800b926:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b928:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800b92a:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b92e:	3301      	adds	r3, #1
 800b930:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b932:	6969      	ldr	r1, [r5, #20]
 800b934:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800b938:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800b93c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b93e:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800b940:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b942:	b99b      	cbnz	r3, 800b96c <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b944:	4633      	mov	r3, r6
 800b946:	2201      	movs	r2, #1
 800b948:	2102      	movs	r1, #2
 800b94a:	4620      	mov	r0, r4
 800b94c:	9700      	str	r7, [sp, #0]
 800b94e:	f7ff feb5 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800b952:	b910      	cbnz	r0, 800b95a <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	2202      	movs	r2, #2
 800b958:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800b95a:	2301      	movs	r3, #1
 800b95c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800b960:	2300      	movs	r3, #0
 800b962:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800b966:	b002      	add	sp, #8
 800b968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b96c:	4633      	mov	r3, r6
 800b96e:	2201      	movs	r2, #1
 800b970:	2106      	movs	r1, #6
 800b972:	4620      	mov	r0, r4
 800b974:	9700      	str	r7, [sp, #0]
 800b976:	f7ff fea1 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d1ed      	bne.n	800b95a <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b97e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800b982:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b984:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b986:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b988:	3301      	adds	r3, #1
 800b98a:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800b98c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b98e:	3b01      	subs	r3, #1
 800b990:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b992:	e7d5      	b.n	800b940 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b994:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b996:	f043 0308 	orr.w	r3, r3, #8
 800b99a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800b99c:	e7e0      	b.n	800b960 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800b99e:	2002      	movs	r0, #2
 800b9a0:	e7de      	b.n	800b960 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800b9a2:	2002      	movs	r0, #2
 800b9a4:	e7df      	b.n	800b966 <HAL_QSPI_Receive+0x80>

0800b9a6 <HAL_QSPI_AutoPolling>:
{
 800b9a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	461f      	mov	r7, r3
 800b9ae:	4689      	mov	r9, r1
 800b9b0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800b9b2:	f7fc fef7 	bl	80087a4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800b9b6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800b9ba:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d041      	beq.n	800ba44 <HAL_QSPI_AutoPolling+0x9e>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b9c6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	fa5f f883 	uxtb.w	r8, r3
 800b9d0:	d136      	bne.n	800ba40 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b9d2:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b9d4:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b9d6:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b9d8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b9da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b9de:	4603      	mov	r3, r0
 800b9e0:	9700      	str	r7, [sp, #0]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f7ff fe6a 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800b9e8:	bb20      	cbnz	r0, 800ba34 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b9ea:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b9ec:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b9ee:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b9f0:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b9f2:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b9f4:	686b      	ldr	r3, [r5, #4]
 800b9f6:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b9f8:	68ab      	ldr	r3, [r5, #8]
 800b9fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b9fc:	6813      	ldr	r3, [r2, #0]
 800b9fe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ba02:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ba04:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ba06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ba0a:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ba0c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800ba10:	68eb      	ldr	r3, [r5, #12]
 800ba12:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ba16:	f7ff fd95 	bl	800b544 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ba1a:	4633      	mov	r3, r6
 800ba1c:	4642      	mov	r2, r8
 800ba1e:	2108      	movs	r1, #8
 800ba20:	4620      	mov	r0, r4
 800ba22:	9700      	str	r7, [sp, #0]
 800ba24:	f7ff fe4a 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800ba28:	b920      	cbnz	r0, 800ba34 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	2208      	movs	r2, #8
 800ba2e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800ba30:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ba34:	2300      	movs	r3, #0
 800ba36:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ba3a:	b003      	add	sp, #12
 800ba3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800ba40:	2002      	movs	r0, #2
 800ba42:	e7f7      	b.n	800ba34 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800ba44:	2002      	movs	r0, #2
 800ba46:	e7f8      	b.n	800ba3a <HAL_QSPI_AutoPolling+0x94>

0800ba48 <HAL_QSPI_MemoryMapped>:
{
 800ba48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	4616      	mov	r6, r2
 800ba4e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800ba50:	f7fc fea8 	bl	80087a4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ba54:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ba58:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800ba5a:	2a01      	cmp	r2, #1
 800ba5c:	d033      	beq.n	800bac6 <HAL_QSPI_MemoryMapped+0x7e>
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ba64:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800ba68:	2a01      	cmp	r2, #1
 800ba6a:	d12a      	bne.n	800bac2 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ba6c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ba6e:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ba70:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ba72:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ba74:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ba78:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba7a:	9100      	str	r1, [sp, #0]
 800ba7c:	2120      	movs	r1, #32
 800ba7e:	f7ff fe1d 	bl	800b6bc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ba82:	4605      	mov	r5, r0
 800ba84:	b9b8      	cbnz	r0, 800bab6 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	6872      	ldr	r2, [r6, #4]
 800ba8a:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ba8c:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ba8e:	f020 0008 	bic.w	r0, r0, #8
 800ba92:	ea40 0002 	orr.w	r0, r0, r2
 800ba96:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ba98:	d107      	bne.n	800baaa <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800ba9a:	6832      	ldr	r2, [r6, #0]
 800ba9c:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800ba9e:	2210      	movs	r2, #16
 800baa0:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800baa8:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800baaa:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800baae:	4639      	mov	r1, r7
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7ff fd47 	bl	800b544 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800bab6:	2300      	movs	r3, #0
 800bab8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800babc:	4628      	mov	r0, r5
 800babe:	b003      	add	sp, #12
 800bac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800bac2:	2502      	movs	r5, #2
 800bac4:	e7f7      	b.n	800bab6 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800bac6:	2502      	movs	r5, #2
 800bac8:	e7f8      	b.n	800babc <HAL_QSPI_MemoryMapped+0x74>
	...

0800bacc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bace:	4604      	mov	r4, r0
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d074      	beq.n	800bbbe <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bad4:	6803      	ldr	r3, [r0, #0]
 800bad6:	07d8      	lsls	r0, r3, #31
 800bad8:	d45e      	bmi.n	800bb98 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	0799      	lsls	r1, r3, #30
 800bade:	f100 80ad 	bmi.w	800bc3c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	06da      	lsls	r2, r3, #27
 800bae6:	d527      	bpl.n	800bb38 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bae8:	4a9c      	ldr	r2, [pc, #624]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
 800baea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800baec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800baee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800baf2:	2b08      	cmp	r3, #8
 800baf4:	d007      	beq.n	800bb06 <HAL_RCC_OscConfig+0x3a>
 800baf6:	2b18      	cmp	r3, #24
 800baf8:	f040 8103 	bne.w	800bd02 <HAL_RCC_OscConfig+0x236>
 800bafc:	f001 0303 	and.w	r3, r1, #3
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	f040 80fe 	bne.w	800bd02 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bb06:	6813      	ldr	r3, [r2, #0]
 800bb08:	05db      	lsls	r3, r3, #23
 800bb0a:	d502      	bpl.n	800bb12 <HAL_RCC_OscConfig+0x46>
 800bb0c:	69e3      	ldr	r3, [r4, #28]
 800bb0e:	2b80      	cmp	r3, #128	@ 0x80
 800bb10:	d155      	bne.n	800bbbe <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bb12:	f7fc fe5f 	bl	80087d4 <HAL_GetREVID>
 800bb16:	f241 0303 	movw	r3, #4099	@ 0x1003
 800bb1a:	6a21      	ldr	r1, [r4, #32]
 800bb1c:	4298      	cmp	r0, r3
 800bb1e:	4b8f      	ldr	r3, [pc, #572]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
 800bb20:	f200 80e8 	bhi.w	800bcf4 <HAL_RCC_OscConfig+0x228>
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	2920      	cmp	r1, #32
 800bb28:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800bb2c:	bf0c      	ite	eq
 800bb2e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800bb32:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800bb36:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	0719      	lsls	r1, r3, #28
 800bb3c:	f100 8123 	bmi.w	800bd86 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	069a      	lsls	r2, r3, #26
 800bb44:	f100 8144 	bmi.w	800bdd0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	075d      	lsls	r5, r3, #29
 800bb4c:	d51e      	bpl.n	800bb8c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bb4e:	4d84      	ldr	r5, [pc, #528]	@ (800bd60 <HAL_RCC_OscConfig+0x294>)
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb56:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb58:	f7fc fe24 	bl	80087a4 <HAL_GetTick>
 800bb5c:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb5e:	682b      	ldr	r3, [r5, #0]
 800bb60:	05da      	lsls	r2, r3, #23
 800bb62:	f140 815a 	bpl.w	800be1a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb66:	68a3      	ldr	r3, [r4, #8]
 800bb68:	4d7c      	ldr	r5, [pc, #496]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	f040 815c 	bne.w	800be28 <HAL_RCC_OscConfig+0x35c>
 800bb70:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800bb72:	f043 0301 	orr.w	r3, r3, #1
 800bb76:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb78:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800bb7c:	f7fc fe12 	bl	80087a4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb80:	4e76      	ldr	r6, [pc, #472]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800bb82:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb84:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800bb86:	079b      	lsls	r3, r3, #30
 800bb88:	f140 8174 	bpl.w	800be74 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800bb8e:	2900      	cmp	r1, #0
 800bb90:	f040 8177 	bne.w	800be82 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800bb94:	2000      	movs	r0, #0
 800bb96:	e02b      	b.n	800bbf0 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb98:	4a70      	ldr	r2, [pc, #448]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
 800bb9a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bb9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bba2:	2b10      	cmp	r3, #16
 800bba4:	d005      	beq.n	800bbb2 <HAL_RCC_OscConfig+0xe6>
 800bba6:	2b18      	cmp	r3, #24
 800bba8:	d10b      	bne.n	800bbc2 <HAL_RCC_OscConfig+0xf6>
 800bbaa:	f001 0303 	and.w	r3, r1, #3
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d107      	bne.n	800bbc2 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbb2:	6813      	ldr	r3, [r2, #0]
 800bbb4:	039a      	lsls	r2, r3, #14
 800bbb6:	d590      	bpl.n	800bada <HAL_RCC_OscConfig+0xe>
 800bbb8:	6863      	ldr	r3, [r4, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d18d      	bne.n	800bada <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	e016      	b.n	800bbf0 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbc2:	6863      	ldr	r3, [r4, #4]
 800bbc4:	4d65      	ldr	r5, [pc, #404]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
 800bbc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbca:	d112      	bne.n	800bbf2 <HAL_RCC_OscConfig+0x126>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbd2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bbd4:	f7fc fde6 	bl	80087a4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bbd8:	4e60      	ldr	r6, [pc, #384]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800bbda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bbdc:	6833      	ldr	r3, [r6, #0]
 800bbde:	039b      	lsls	r3, r3, #14
 800bbe0:	f53f af7b 	bmi.w	800bada <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbe4:	f7fc fdde 	bl	80087a4 <HAL_GetTick>
 800bbe8:	1b40      	subs	r0, r0, r5
 800bbea:	2864      	cmp	r0, #100	@ 0x64
 800bbec:	d9f6      	bls.n	800bbdc <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800bbee:	2003      	movs	r0, #3
}
 800bbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbf2:	b9a3      	cbnz	r3, 800bc1e <HAL_RCC_OscConfig+0x152>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbfa:	602b      	str	r3, [r5, #0]
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bc04:	f7fc fdce 	bl	80087a4 <HAL_GetTick>
 800bc08:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bc0a:	682b      	ldr	r3, [r5, #0]
 800bc0c:	039f      	lsls	r7, r3, #14
 800bc0e:	f57f af64 	bpl.w	800bada <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc12:	f7fc fdc7 	bl	80087a4 <HAL_GetTick>
 800bc16:	1b80      	subs	r0, r0, r6
 800bc18:	2864      	cmp	r0, #100	@ 0x64
 800bc1a:	d9f6      	bls.n	800bc0a <HAL_RCC_OscConfig+0x13e>
 800bc1c:	e7e7      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc22:	682b      	ldr	r3, [r5, #0]
 800bc24:	d103      	bne.n	800bc2e <HAL_RCC_OscConfig+0x162>
 800bc26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	e7ce      	b.n	800bbcc <HAL_RCC_OscConfig+0x100>
 800bc2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc32:	602b      	str	r3, [r5, #0]
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bc3a:	e7ca      	b.n	800bbd2 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc3c:	4947      	ldr	r1, [pc, #284]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
 800bc3e:	68e2      	ldr	r2, [r4, #12]
 800bc40:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc42:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bc44:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800bc48:	d003      	beq.n	800bc52 <HAL_RCC_OscConfig+0x186>
 800bc4a:	2b18      	cmp	r3, #24
 800bc4c:	d12a      	bne.n	800bca4 <HAL_RCC_OscConfig+0x1d8>
 800bc4e:	0780      	lsls	r0, r0, #30
 800bc50:	d128      	bne.n	800bca4 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc52:	680b      	ldr	r3, [r1, #0]
 800bc54:	075b      	lsls	r3, r3, #29
 800bc56:	d501      	bpl.n	800bc5c <HAL_RCC_OscConfig+0x190>
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	d0b0      	beq.n	800bbbe <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bc5c:	4d3f      	ldr	r5, [pc, #252]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
 800bc5e:	682b      	ldr	r3, [r5, #0]
 800bc60:	f023 0319 	bic.w	r3, r3, #25
 800bc64:	4313      	orrs	r3, r2
 800bc66:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bc68:	f7fc fd9c 	bl	80087a4 <HAL_GetTick>
 800bc6c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc6e:	682b      	ldr	r3, [r5, #0]
 800bc70:	075f      	lsls	r7, r3, #29
 800bc72:	d511      	bpl.n	800bc98 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc74:	f7fc fdae 	bl	80087d4 <HAL_GetREVID>
 800bc78:	f241 0303 	movw	r3, #4099	@ 0x1003
 800bc7c:	6922      	ldr	r2, [r4, #16]
 800bc7e:	4298      	cmp	r0, r3
 800bc80:	686b      	ldr	r3, [r5, #4]
 800bc82:	d822      	bhi.n	800bcca <HAL_RCC_OscConfig+0x1fe>
 800bc84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bc88:	2a40      	cmp	r2, #64	@ 0x40
 800bc8a:	bf0c      	ite	eq
 800bc8c:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800bc90:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800bc94:	606b      	str	r3, [r5, #4]
 800bc96:	e724      	b.n	800bae2 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc98:	f7fc fd84 	bl	80087a4 <HAL_GetTick>
 800bc9c:	1b80      	subs	r0, r0, r6
 800bc9e:	2802      	cmp	r0, #2
 800bca0:	d9e5      	bls.n	800bc6e <HAL_RCC_OscConfig+0x1a2>
 800bca2:	e7a4      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bca4:	4d2d      	ldr	r5, [pc, #180]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bca6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bca8:	b1a2      	cbz	r2, 800bcd4 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bcaa:	f023 0319 	bic.w	r3, r3, #25
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bcb2:	f7fc fd77 	bl	80087a4 <HAL_GetTick>
 800bcb6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	0758      	lsls	r0, r3, #29
 800bcbc:	d4da      	bmi.n	800bc74 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcbe:	f7fc fd71 	bl	80087a4 <HAL_GetTick>
 800bcc2:	1b80      	subs	r0, r0, r6
 800bcc4:	2802      	cmp	r0, #2
 800bcc6:	d9f7      	bls.n	800bcb8 <HAL_RCC_OscConfig+0x1ec>
 800bcc8:	e791      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bcce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bcd2:	e7df      	b.n	800bc94 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800bcd4:	f023 0301 	bic.w	r3, r3, #1
 800bcd8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bcda:	f7fc fd63 	bl	80087a4 <HAL_GetTick>
 800bcde:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	0759      	lsls	r1, r3, #29
 800bce4:	f57f aefd 	bpl.w	800bae2 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bce8:	f7fc fd5c 	bl	80087a4 <HAL_GetTick>
 800bcec:	1b80      	subs	r0, r0, r6
 800bcee:	2802      	cmp	r0, #2
 800bcf0:	d9f6      	bls.n	800bce0 <HAL_RCC_OscConfig+0x214>
 800bcf2:	e77c      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bcf4:	68da      	ldr	r2, [r3, #12]
 800bcf6:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800bcfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bcfe:	60da      	str	r2, [r3, #12]
 800bd00:	e71a      	b.n	800bb38 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bd02:	69e3      	ldr	r3, [r4, #28]
 800bd04:	4d15      	ldr	r5, [pc, #84]	@ (800bd5c <HAL_RCC_OscConfig+0x290>)
 800bd06:	b36b      	cbz	r3, 800bd64 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bd10:	f7fc fd48 	bl	80087a4 <HAL_GetTick>
 800bd14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd16:	682b      	ldr	r3, [r5, #0]
 800bd18:	05df      	lsls	r7, r3, #23
 800bd1a:	d511      	bpl.n	800bd40 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd1c:	f7fc fd5a 	bl	80087d4 <HAL_GetREVID>
 800bd20:	f241 0303 	movw	r3, #4099	@ 0x1003
 800bd24:	6a22      	ldr	r2, [r4, #32]
 800bd26:	4298      	cmp	r0, r3
 800bd28:	d810      	bhi.n	800bd4c <HAL_RCC_OscConfig+0x280>
 800bd2a:	686b      	ldr	r3, [r5, #4]
 800bd2c:	2a20      	cmp	r2, #32
 800bd2e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bd32:	bf0c      	ite	eq
 800bd34:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800bd38:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800bd3c:	606b      	str	r3, [r5, #4]
 800bd3e:	e6fb      	b.n	800bb38 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bd40:	f7fc fd30 	bl	80087a4 <HAL_GetTick>
 800bd44:	1b80      	subs	r0, r0, r6
 800bd46:	2802      	cmp	r0, #2
 800bd48:	d9e5      	bls.n	800bd16 <HAL_RCC_OscConfig+0x24a>
 800bd4a:	e750      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bd4c:	68eb      	ldr	r3, [r5, #12]
 800bd4e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800bd52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bd56:	60eb      	str	r3, [r5, #12]
 800bd58:	e6ee      	b.n	800bb38 <HAL_RCC_OscConfig+0x6c>
 800bd5a:	bf00      	nop
 800bd5c:	58024400 	.word	0x58024400
 800bd60:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bd6c:	f7fc fd1a 	bl	80087a4 <HAL_GetTick>
 800bd70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd72:	682b      	ldr	r3, [r5, #0]
 800bd74:	05d8      	lsls	r0, r3, #23
 800bd76:	f57f aedf 	bpl.w	800bb38 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bd7a:	f7fc fd13 	bl	80087a4 <HAL_GetTick>
 800bd7e:	1b80      	subs	r0, r0, r6
 800bd80:	2802      	cmp	r0, #2
 800bd82:	d9f6      	bls.n	800bd72 <HAL_RCC_OscConfig+0x2a6>
 800bd84:	e733      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bd86:	6963      	ldr	r3, [r4, #20]
 800bd88:	4da5      	ldr	r5, [pc, #660]	@ (800c020 <HAL_RCC_OscConfig+0x554>)
 800bd8a:	b183      	cbz	r3, 800bdae <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800bd8c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800bd8e:	f043 0301 	orr.w	r3, r3, #1
 800bd92:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800bd94:	f7fc fd06 	bl	80087a4 <HAL_GetTick>
 800bd98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bd9a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800bd9c:	079b      	lsls	r3, r3, #30
 800bd9e:	f53f aecf 	bmi.w	800bb40 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bda2:	f7fc fcff 	bl	80087a4 <HAL_GetTick>
 800bda6:	1b80      	subs	r0, r0, r6
 800bda8:	2802      	cmp	r0, #2
 800bdaa:	d9f6      	bls.n	800bd9a <HAL_RCC_OscConfig+0x2ce>
 800bdac:	e71f      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800bdae:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800bdb0:	f023 0301 	bic.w	r3, r3, #1
 800bdb4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800bdb6:	f7fc fcf5 	bl	80087a4 <HAL_GetTick>
 800bdba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bdbc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800bdbe:	079f      	lsls	r7, r3, #30
 800bdc0:	f57f aebe 	bpl.w	800bb40 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bdc4:	f7fc fcee 	bl	80087a4 <HAL_GetTick>
 800bdc8:	1b80      	subs	r0, r0, r6
 800bdca:	2802      	cmp	r0, #2
 800bdcc:	d9f6      	bls.n	800bdbc <HAL_RCC_OscConfig+0x2f0>
 800bdce:	e70e      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bdd0:	69a3      	ldr	r3, [r4, #24]
 800bdd2:	4d93      	ldr	r5, [pc, #588]	@ (800c020 <HAL_RCC_OscConfig+0x554>)
 800bdd4:	b183      	cbz	r3, 800bdf8 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800bdd6:	682b      	ldr	r3, [r5, #0]
 800bdd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bddc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800bdde:	f7fc fce1 	bl	80087a4 <HAL_GetTick>
 800bde2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	0498      	lsls	r0, r3, #18
 800bde8:	f53f aeae 	bmi.w	800bb48 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdec:	f7fc fcda 	bl	80087a4 <HAL_GetTick>
 800bdf0:	1b80      	subs	r0, r0, r6
 800bdf2:	2802      	cmp	r0, #2
 800bdf4:	d9f6      	bls.n	800bde4 <HAL_RCC_OscConfig+0x318>
 800bdf6:	e6fa      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800bdf8:	682b      	ldr	r3, [r5, #0]
 800bdfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdfe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800be00:	f7fc fcd0 	bl	80087a4 <HAL_GetTick>
 800be04:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	0499      	lsls	r1, r3, #18
 800be0a:	f57f ae9d 	bpl.w	800bb48 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be0e:	f7fc fcc9 	bl	80087a4 <HAL_GetTick>
 800be12:	1b80      	subs	r0, r0, r6
 800be14:	2802      	cmp	r0, #2
 800be16:	d9f6      	bls.n	800be06 <HAL_RCC_OscConfig+0x33a>
 800be18:	e6e9      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be1a:	f7fc fcc3 	bl	80087a4 <HAL_GetTick>
 800be1e:	1b80      	subs	r0, r0, r6
 800be20:	2864      	cmp	r0, #100	@ 0x64
 800be22:	f67f ae9c 	bls.w	800bb5e <HAL_RCC_OscConfig+0x92>
 800be26:	e6e2      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be28:	b9b3      	cbnz	r3, 800be58 <HAL_RCC_OscConfig+0x38c>
 800be2a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be2c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be30:	f023 0301 	bic.w	r3, r3, #1
 800be34:	672b      	str	r3, [r5, #112]	@ 0x70
 800be36:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800be38:	f023 0304 	bic.w	r3, r3, #4
 800be3c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800be3e:	f7fc fcb1 	bl	80087a4 <HAL_GetTick>
 800be42:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800be44:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800be46:	0798      	lsls	r0, r3, #30
 800be48:	f57f aea0 	bpl.w	800bb8c <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be4c:	f7fc fcaa 	bl	80087a4 <HAL_GetTick>
 800be50:	1b80      	subs	r0, r0, r6
 800be52:	42b8      	cmp	r0, r7
 800be54:	d9f6      	bls.n	800be44 <HAL_RCC_OscConfig+0x378>
 800be56:	e6ca      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be58:	2b05      	cmp	r3, #5
 800be5a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800be5c:	d103      	bne.n	800be66 <HAL_RCC_OscConfig+0x39a>
 800be5e:	f043 0304 	orr.w	r3, r3, #4
 800be62:	672b      	str	r3, [r5, #112]	@ 0x70
 800be64:	e684      	b.n	800bb70 <HAL_RCC_OscConfig+0xa4>
 800be66:	f023 0301 	bic.w	r3, r3, #1
 800be6a:	672b      	str	r3, [r5, #112]	@ 0x70
 800be6c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800be6e:	f023 0304 	bic.w	r3, r3, #4
 800be72:	e680      	b.n	800bb76 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be74:	f7fc fc96 	bl	80087a4 <HAL_GetTick>
 800be78:	1b40      	subs	r0, r0, r5
 800be7a:	42b8      	cmp	r0, r7
 800be7c:	f67f ae82 	bls.w	800bb84 <HAL_RCC_OscConfig+0xb8>
 800be80:	e6b5      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800be82:	4d67      	ldr	r5, [pc, #412]	@ (800c020 <HAL_RCC_OscConfig+0x554>)
 800be84:	692b      	ldr	r3, [r5, #16]
 800be86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be8a:	2b18      	cmp	r3, #24
 800be8c:	d07a      	beq.n	800bf84 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800be8e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be90:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800be92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be96:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be98:	d167      	bne.n	800bf6a <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800be9a:	f7fc fc83 	bl	80087a4 <HAL_GetTick>
 800be9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	0199      	lsls	r1, r3, #6
 800bea4:	d45b      	bmi.n	800bf5e <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bea6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800bea8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800beaa:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	4313      	orrs	r3, r2
 800beb4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800beb6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800beba:	62ab      	str	r3, [r5, #40]	@ 0x28
 800bebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bebe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bec0:	3b01      	subs	r3, #1
 800bec2:	3a01      	subs	r2, #1
 800bec4:	025b      	lsls	r3, r3, #9
 800bec6:	0412      	lsls	r2, r2, #16
 800bec8:	b29b      	uxth	r3, r3
 800beca:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800bece:	4313      	orrs	r3, r2
 800bed0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800bed2:	3a01      	subs	r2, #1
 800bed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bed8:	4313      	orrs	r3, r2
 800beda:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800bedc:	3a01      	subs	r2, #1
 800bede:	0612      	lsls	r2, r2, #24
 800bee0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800bee4:	4313      	orrs	r3, r2
 800bee6:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800bee8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800beea:	f023 0301 	bic.w	r3, r3, #1
 800beee:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bef0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bef2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800bef4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bef8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800befc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800bf00:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bf02:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bf04:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800bf06:	f023 030c 	bic.w	r3, r3, #12
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bf0e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bf10:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800bf12:	f023 0302 	bic.w	r3, r3, #2
 800bf16:	4313      	orrs	r3, r2
 800bf18:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf1a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bf1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf20:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf22:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bf24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf28:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bf2a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bf2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bf30:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800bf32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bf34:	f043 0301 	orr.w	r3, r3, #1
 800bf38:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800bf3a:	682b      	ldr	r3, [r5, #0]
 800bf3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bf42:	f7fc fc2f 	bl	80087a4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf46:	4d36      	ldr	r5, [pc, #216]	@ (800c020 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800bf48:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf4a:	682b      	ldr	r3, [r5, #0]
 800bf4c:	019a      	lsls	r2, r3, #6
 800bf4e:	f53f ae21 	bmi.w	800bb94 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf52:	f7fc fc27 	bl	80087a4 <HAL_GetTick>
 800bf56:	1b00      	subs	r0, r0, r4
 800bf58:	2802      	cmp	r0, #2
 800bf5a:	d9f6      	bls.n	800bf4a <HAL_RCC_OscConfig+0x47e>
 800bf5c:	e647      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf5e:	f7fc fc21 	bl	80087a4 <HAL_GetTick>
 800bf62:	1b80      	subs	r0, r0, r6
 800bf64:	2802      	cmp	r0, #2
 800bf66:	d99b      	bls.n	800bea0 <HAL_RCC_OscConfig+0x3d4>
 800bf68:	e641      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800bf6a:	f7fc fc1b 	bl	80087a4 <HAL_GetTick>
 800bf6e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	019b      	lsls	r3, r3, #6
 800bf74:	f57f ae0e 	bpl.w	800bb94 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf78:	f7fc fc14 	bl	80087a4 <HAL_GetTick>
 800bf7c:	1b00      	subs	r0, r0, r4
 800bf7e:	2802      	cmp	r0, #2
 800bf80:	d9f6      	bls.n	800bf70 <HAL_RCC_OscConfig+0x4a4>
 800bf82:	e634      	b.n	800bbee <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf84:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bf86:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bf88:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf8a:	f43f ae18 	beq.w	800bbbe <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf8e:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf92:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800bf94:	4281      	cmp	r1, r0
 800bf96:	f47f ae12 	bne.w	800bbbe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf9a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bfa0:	428a      	cmp	r2, r1
 800bfa2:	f47f ae0c 	bne.w	800bbbe <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bfa6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800bfa8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800bfac:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bfae:	4291      	cmp	r1, r2
 800bfb0:	f47f ae05 	bne.w	800bbbe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bfb4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bfb6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800bfba:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bfbc:	4291      	cmp	r1, r2
 800bfbe:	f47f adfe 	bne.w	800bbbe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bfc2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bfc4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800bfc8:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bfca:	4291      	cmp	r1, r2
 800bfcc:	f47f adf7 	bne.w	800bbbe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bfd0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800bfd2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bfd6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	f47f adf0 	bne.w	800bbbe <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bfde:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bfe0:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bfe2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	f43f add4 	beq.w	800bb94 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800bfec:	4d0c      	ldr	r5, [pc, #48]	@ (800c020 <HAL_RCC_OscConfig+0x554>)
 800bfee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800bff0:	f023 0301 	bic.w	r3, r3, #1
 800bff4:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800bff6:	f7fc fbd5 	bl	80087a4 <HAL_GetTick>
 800bffa:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bffc:	f7fc fbd2 	bl	80087a4 <HAL_GetTick>
 800c000:	42b0      	cmp	r0, r6
 800c002:	d0fb      	beq.n	800bffc <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c004:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800c006:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800c008:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c00c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c010:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c014:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800c016:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800c018:	f043 0301 	orr.w	r3, r3, #1
 800c01c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800c01e:	e5b9      	b.n	800bb94 <HAL_RCC_OscConfig+0xc8>
 800c020:	58024400 	.word	0x58024400

0800c024 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	4c23      	ldr	r4, [pc, #140]	@ (800c0b4 <HAL_RCC_MCOConfig+0x90>)
 800c028:	b088      	sub	sp, #32
 800c02a:	460e      	mov	r6, r1
 800c02c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800c02e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800c032:	b9f8      	cbnz	r0, 800c074 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800c034:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c038:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c03c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800c03e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c042:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c046:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c050:	2302      	movs	r3, #2
 800c052:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c056:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c058:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c05c:	4816      	ldr	r0, [pc, #88]	@ (800c0b8 <HAL_RCC_MCOConfig+0x94>)
 800c05e:	f7fd fa27 	bl	80094b0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800c062:	6923      	ldr	r3, [r4, #16]
 800c064:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800c068:	ea43 0106 	orr.w	r1, r3, r6
 800c06c:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c06e:	6121      	str	r1, [r4, #16]
  }
}
 800c070:	b008      	add	sp, #32
 800c072:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800c074:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c078:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c07c:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c07e:	480f      	ldr	r0, [pc, #60]	@ (800c0bc <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800c080:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800c084:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800c088:	f003 0304 	and.w	r3, r3, #4
 800c08c:	9302      	str	r3, [sp, #8]
 800c08e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c090:	2302      	movs	r3, #2
 800c092:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c096:	2300      	movs	r3, #0
 800c098:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c09c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c09e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c0a0:	f7fd fa06 	bl	80094b0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800c0aa:	ea43 0106 	orr.w	r1, r3, r6
 800c0ae:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800c0b2:	e7dc      	b.n	800c06e <HAL_RCC_MCOConfig+0x4a>
 800c0b4:	58024400 	.word	0x58024400
 800c0b8:	58020000 	.word	0x58020000
 800c0bc:	58020800 	.word	0x58020800

0800c0c0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c0c0:	4b49      	ldr	r3, [pc, #292]	@ (800c1e8 <HAL_RCC_GetSysClockFreq+0x128>)
 800c0c2:	691a      	ldr	r2, [r3, #16]
 800c0c4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c0c8:	2a10      	cmp	r2, #16
{
 800c0ca:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c0cc:	f000 8088 	beq.w	800c1e0 <HAL_RCC_GetSysClockFreq+0x120>
 800c0d0:	2a18      	cmp	r2, #24
 800c0d2:	d00c      	beq.n	800c0ee <HAL_RCC_GetSysClockFreq+0x2e>
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	f040 8085 	bne.w	800c1e4 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	4843      	ldr	r0, [pc, #268]	@ (800c1ec <HAL_RCC_GetSysClockFreq+0x12c>)
 800c0de:	f012 0f20 	tst.w	r2, #32
 800c0e2:	d003      	beq.n	800c0ec <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c0ea:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800c0ec:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0ee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c0f0:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c0f2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800c0f4:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c0f8:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c0fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800c0fe:	d0f5      	beq.n	800c0ec <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c100:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c104:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c108:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c10c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c110:	4362      	muls	r2, r4
 800c112:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c116:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c11c:	ee06 2a90 	vmov	s13, r2
 800c120:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800c124:	d04e      	beq.n	800c1c4 <HAL_RCC_GetSysClockFreq+0x104>
 800c126:	2902      	cmp	r1, #2
 800c128:	d03e      	beq.n	800c1a8 <HAL_RCC_GetSysClockFreq+0xe8>
 800c12a:	2900      	cmp	r1, #0
 800c12c:	d14a      	bne.n	800c1c4 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	0692      	lsls	r2, r2, #26
 800c132:	d527      	bpl.n	800c184 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c134:	6819      	ldr	r1, [r3, #0]
 800c136:	4a2d      	ldr	r2, [pc, #180]	@ (800c1ec <HAL_RCC_GetSysClockFreq+0x12c>)
 800c138:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c13e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c144:	ee07 2a90 	vmov	s15, r2
 800c148:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c14c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c150:	ee07 3a10 	vmov	s14, r3
 800c154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c158:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c15c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c160:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c164:	4b20      	ldr	r3, [pc, #128]	@ (800c1e8 <HAL_RCC_GetSysClockFreq+0x128>)
 800c166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c168:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c16c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c16e:	ee07 3a10 	vmov	s14, r3
 800c172:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800c176:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c17a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c17e:	ee17 0a90 	vmov	r0, s15
 800c182:	e7b3      	b.n	800c0ec <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18a:	ee07 3a90 	vmov	s15, r3
 800c18e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c196:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c19a:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800c1f0 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c19e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c1a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800c1a6:	e7dd      	b.n	800c164 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c1be:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800c1f4 <HAL_RCC_GetSysClockFreq+0x134>
 800c1c2:	e7ec      	b.n	800c19e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ca:	ee07 3a90 	vmov	s15, r3
 800c1ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c1da:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800c1f8 <HAL_RCC_GetSysClockFreq+0x138>
 800c1de:	e7de      	b.n	800c19e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c1e0:	4806      	ldr	r0, [pc, #24]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x13c>)
 800c1e2:	e783      	b.n	800c0ec <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800c1e4:	4806      	ldr	r0, [pc, #24]	@ (800c200 <HAL_RCC_GetSysClockFreq+0x140>)
 800c1e6:	e781      	b.n	800c0ec <HAL_RCC_GetSysClockFreq+0x2c>
 800c1e8:	58024400 	.word	0x58024400
 800c1ec:	03d09000 	.word	0x03d09000
 800c1f0:	4c742400 	.word	0x4c742400
 800c1f4:	4bbebc20 	.word	0x4bbebc20
 800c1f8:	4a742400 	.word	0x4a742400
 800c1fc:	017d7840 	.word	0x017d7840
 800c200:	003d0900 	.word	0x003d0900

0800c204 <HAL_RCC_ClockConfig>:
{
 800c204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c208:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800c20a:	4604      	mov	r4, r0
 800c20c:	b910      	cbnz	r0, 800c214 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800c20e:	2001      	movs	r0, #1
}
 800c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c214:	4a88      	ldr	r2, [pc, #544]	@ (800c438 <HAL_RCC_ClockConfig+0x234>)
 800c216:	6813      	ldr	r3, [r2, #0]
 800c218:	f003 030f 	and.w	r3, r3, #15
 800c21c:	428b      	cmp	r3, r1
 800c21e:	f0c0 8093 	bcc.w	800c348 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c222:	6823      	ldr	r3, [r4, #0]
 800c224:	075f      	lsls	r7, r3, #29
 800c226:	f100 809b 	bmi.w	800c360 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c22a:	071e      	lsls	r6, r3, #28
 800c22c:	d50b      	bpl.n	800c246 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c22e:	4983      	ldr	r1, [pc, #524]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c230:	6960      	ldr	r0, [r4, #20]
 800c232:	69ca      	ldr	r2, [r1, #28]
 800c234:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c238:	4290      	cmp	r0, r2
 800c23a:	d904      	bls.n	800c246 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c23c:	69ca      	ldr	r2, [r1, #28]
 800c23e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c242:	4302      	orrs	r2, r0
 800c244:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c246:	06d8      	lsls	r0, r3, #27
 800c248:	d50b      	bpl.n	800c262 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c24a:	497c      	ldr	r1, [pc, #496]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c24c:	69a0      	ldr	r0, [r4, #24]
 800c24e:	69ca      	ldr	r2, [r1, #28]
 800c250:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c254:	4290      	cmp	r0, r2
 800c256:	d904      	bls.n	800c262 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c258:	69ca      	ldr	r2, [r1, #28]
 800c25a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c25e:	4302      	orrs	r2, r0
 800c260:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c262:	0699      	lsls	r1, r3, #26
 800c264:	d50b      	bpl.n	800c27e <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c266:	4975      	ldr	r1, [pc, #468]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c268:	69e0      	ldr	r0, [r4, #28]
 800c26a:	6a0a      	ldr	r2, [r1, #32]
 800c26c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c270:	4290      	cmp	r0, r2
 800c272:	d904      	bls.n	800c27e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c274:	6a0a      	ldr	r2, [r1, #32]
 800c276:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c27a:	4302      	orrs	r2, r0
 800c27c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c27e:	079a      	lsls	r2, r3, #30
 800c280:	d50b      	bpl.n	800c29a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c282:	496e      	ldr	r1, [pc, #440]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c284:	68e0      	ldr	r0, [r4, #12]
 800c286:	698a      	ldr	r2, [r1, #24]
 800c288:	f002 020f 	and.w	r2, r2, #15
 800c28c:	4290      	cmp	r0, r2
 800c28e:	d904      	bls.n	800c29a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c290:	698a      	ldr	r2, [r1, #24]
 800c292:	f022 020f 	bic.w	r2, r2, #15
 800c296:	4302      	orrs	r2, r0
 800c298:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c29a:	07df      	lsls	r7, r3, #31
 800c29c:	d46e      	bmi.n	800c37c <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	079e      	lsls	r6, r3, #30
 800c2a2:	f100 80a1 	bmi.w	800c3e8 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c2a6:	4964      	ldr	r1, [pc, #400]	@ (800c438 <HAL_RCC_ClockConfig+0x234>)
 800c2a8:	680a      	ldr	r2, [r1, #0]
 800c2aa:	f002 020f 	and.w	r2, r2, #15
 800c2ae:	42aa      	cmp	r2, r5
 800c2b0:	f200 80a8 	bhi.w	800c404 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c2b4:	0758      	lsls	r0, r3, #29
 800c2b6:	f100 80b1 	bmi.w	800c41c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2ba:	0719      	lsls	r1, r3, #28
 800c2bc:	d50b      	bpl.n	800c2d6 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c2be:	495f      	ldr	r1, [pc, #380]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c2c0:	6960      	ldr	r0, [r4, #20]
 800c2c2:	69ca      	ldr	r2, [r1, #28]
 800c2c4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c2c8:	4290      	cmp	r0, r2
 800c2ca:	d204      	bcs.n	800c2d6 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c2cc:	69ca      	ldr	r2, [r1, #28]
 800c2ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c2d2:	4302      	orrs	r2, r0
 800c2d4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2d6:	06da      	lsls	r2, r3, #27
 800c2d8:	d50b      	bpl.n	800c2f2 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c2da:	4958      	ldr	r1, [pc, #352]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c2dc:	69a0      	ldr	r0, [r4, #24]
 800c2de:	69ca      	ldr	r2, [r1, #28]
 800c2e0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c2e4:	4290      	cmp	r0, r2
 800c2e6:	d204      	bcs.n	800c2f2 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c2e8:	69ca      	ldr	r2, [r1, #28]
 800c2ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c2ee:	4302      	orrs	r2, r0
 800c2f0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c2f2:	069b      	lsls	r3, r3, #26
 800c2f4:	d50b      	bpl.n	800c30e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c2f6:	4a51      	ldr	r2, [pc, #324]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c2f8:	69e1      	ldr	r1, [r4, #28]
 800c2fa:	6a13      	ldr	r3, [r2, #32]
 800c2fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c300:	4299      	cmp	r1, r3
 800c302:	d204      	bcs.n	800c30e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c304:	6a13      	ldr	r3, [r2, #32]
 800c306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c30a:	430b      	orrs	r3, r1
 800c30c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c30e:	f7ff fed7 	bl	800c0c0 <HAL_RCC_GetSysClockFreq>
 800c312:	494a      	ldr	r1, [pc, #296]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c314:	4a4a      	ldr	r2, [pc, #296]	@ (800c440 <HAL_RCC_ClockConfig+0x23c>)
 800c316:	698b      	ldr	r3, [r1, #24]
 800c318:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c31c:	5cd3      	ldrb	r3, [r2, r3]
 800c31e:	f003 031f 	and.w	r3, r3, #31
 800c322:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c324:	698b      	ldr	r3, [r1, #24]
 800c326:	f003 030f 	and.w	r3, r3, #15
 800c32a:	5cd3      	ldrb	r3, [r2, r3]
 800c32c:	4a45      	ldr	r2, [pc, #276]	@ (800c444 <HAL_RCC_ClockConfig+0x240>)
 800c32e:	f003 031f 	and.w	r3, r3, #31
 800c332:	fa20 f303 	lsr.w	r3, r0, r3
 800c336:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800c338:	4b43      	ldr	r3, [pc, #268]	@ (800c448 <HAL_RCC_ClockConfig+0x244>)
 800c33a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800c33c:	4b43      	ldr	r3, [pc, #268]	@ (800c44c <HAL_RCC_ClockConfig+0x248>)
}
 800c33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	f7f5 baa6 	b.w	8001894 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c348:	6813      	ldr	r3, [r2, #0]
 800c34a:	f023 030f 	bic.w	r3, r3, #15
 800c34e:	430b      	orrs	r3, r1
 800c350:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c352:	6813      	ldr	r3, [r2, #0]
 800c354:	f003 030f 	and.w	r3, r3, #15
 800c358:	428b      	cmp	r3, r1
 800c35a:	f47f af58 	bne.w	800c20e <HAL_RCC_ClockConfig+0xa>
 800c35e:	e760      	b.n	800c222 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c360:	4936      	ldr	r1, [pc, #216]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c362:	6920      	ldr	r0, [r4, #16]
 800c364:	698a      	ldr	r2, [r1, #24]
 800c366:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c36a:	4290      	cmp	r0, r2
 800c36c:	f67f af5d 	bls.w	800c22a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c370:	698a      	ldr	r2, [r1, #24]
 800c372:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c376:	4302      	orrs	r2, r0
 800c378:	618a      	str	r2, [r1, #24]
 800c37a:	e756      	b.n	800c22a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c37c:	4b2f      	ldr	r3, [pc, #188]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c37e:	68a1      	ldr	r1, [r4, #8]
 800c380:	699a      	ldr	r2, [r3, #24]
 800c382:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800c386:	430a      	orrs	r2, r1
 800c388:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c38a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c38c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c38e:	2902      	cmp	r1, #2
 800c390:	d11d      	bne.n	800c3ce <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c392:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c396:	f43f af3a 	beq.w	800c20e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c39a:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c39c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3a0:	4f26      	ldr	r7, [pc, #152]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c3a2:	f022 0207 	bic.w	r2, r2, #7
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800c3aa:	f7fc f9fb 	bl	80087a4 <HAL_GetTick>
 800c3ae:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	6862      	ldr	r2, [r4, #4]
 800c3b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3b8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800c3bc:	f43f af6f 	beq.w	800c29e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c3c0:	f7fc f9f0 	bl	80087a4 <HAL_GetTick>
 800c3c4:	1b80      	subs	r0, r0, r6
 800c3c6:	4540      	cmp	r0, r8
 800c3c8:	d9f2      	bls.n	800c3b0 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800c3ca:	2003      	movs	r0, #3
 800c3cc:	e720      	b.n	800c210 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c3ce:	2903      	cmp	r1, #3
 800c3d0:	d102      	bne.n	800c3d8 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3d2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800c3d6:	e7de      	b.n	800c396 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c3d8:	2901      	cmp	r1, #1
 800c3da:	d102      	bne.n	800c3e2 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c3dc:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800c3e0:	e7d9      	b.n	800c396 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c3e2:	f012 0f04 	tst.w	r2, #4
 800c3e6:	e7d6      	b.n	800c396 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c3e8:	4914      	ldr	r1, [pc, #80]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c3ea:	68e0      	ldr	r0, [r4, #12]
 800c3ec:	698a      	ldr	r2, [r1, #24]
 800c3ee:	f002 020f 	and.w	r2, r2, #15
 800c3f2:	4290      	cmp	r0, r2
 800c3f4:	f4bf af57 	bcs.w	800c2a6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c3f8:	698a      	ldr	r2, [r1, #24]
 800c3fa:	f022 020f 	bic.w	r2, r2, #15
 800c3fe:	4302      	orrs	r2, r0
 800c400:	618a      	str	r2, [r1, #24]
 800c402:	e750      	b.n	800c2a6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c404:	680a      	ldr	r2, [r1, #0]
 800c406:	f022 020f 	bic.w	r2, r2, #15
 800c40a:	432a      	orrs	r2, r5
 800c40c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c40e:	680a      	ldr	r2, [r1, #0]
 800c410:	f002 020f 	and.w	r2, r2, #15
 800c414:	42aa      	cmp	r2, r5
 800c416:	f47f aefa 	bne.w	800c20e <HAL_RCC_ClockConfig+0xa>
 800c41a:	e74b      	b.n	800c2b4 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c41c:	4907      	ldr	r1, [pc, #28]	@ (800c43c <HAL_RCC_ClockConfig+0x238>)
 800c41e:	6920      	ldr	r0, [r4, #16]
 800c420:	698a      	ldr	r2, [r1, #24]
 800c422:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c426:	4290      	cmp	r0, r2
 800c428:	f4bf af47 	bcs.w	800c2ba <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c42c:	698a      	ldr	r2, [r1, #24]
 800c42e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800c432:	4302      	orrs	r2, r0
 800c434:	618a      	str	r2, [r1, #24]
 800c436:	e740      	b.n	800c2ba <HAL_RCC_ClockConfig+0xb6>
 800c438:	52002000 	.word	0x52002000
 800c43c:	58024400 	.word	0x58024400
 800c440:	08028898 	.word	0x08028898
 800c444:	24000068 	.word	0x24000068
 800c448:	2400006c 	.word	0x2400006c
 800c44c:	24000074 	.word	0x24000074

0800c450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c450:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c452:	f7ff fe35 	bl	800c0c0 <HAL_RCC_GetSysClockFreq>
 800c456:	4a0b      	ldr	r2, [pc, #44]	@ (800c484 <HAL_RCC_GetHCLKFreq+0x34>)
 800c458:	490b      	ldr	r1, [pc, #44]	@ (800c488 <HAL_RCC_GetHCLKFreq+0x38>)
 800c45a:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c45c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c45e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c462:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c466:	5ccb      	ldrb	r3, [r1, r3]
 800c468:	f003 031f 	and.w	r3, r3, #31
 800c46c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c470:	5c88      	ldrb	r0, [r1, r2]
 800c472:	4a06      	ldr	r2, [pc, #24]	@ (800c48c <HAL_RCC_GetHCLKFreq+0x3c>)
 800c474:	f000 001f 	and.w	r0, r0, #31
 800c478:	fa23 f000 	lsr.w	r0, r3, r0
 800c47c:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c47e:	4a04      	ldr	r2, [pc, #16]	@ (800c490 <HAL_RCC_GetHCLKFreq+0x40>)
 800c480:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800c482:	bd08      	pop	{r3, pc}
 800c484:	58024400 	.word	0x58024400
 800c488:	08028898 	.word	0x08028898
 800c48c:	24000068 	.word	0x24000068
 800c490:	2400006c 	.word	0x2400006c

0800c494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c494:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c496:	f7ff ffdb 	bl	800c450 <HAL_RCC_GetHCLKFreq>
 800c49a:	4b05      	ldr	r3, [pc, #20]	@ (800c4b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c49c:	4a05      	ldr	r2, [pc, #20]	@ (800c4b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c49e:	69db      	ldr	r3, [r3, #28]
 800c4a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c4a4:	5cd3      	ldrb	r3, [r2, r3]
 800c4a6:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c4aa:	40d8      	lsrs	r0, r3
 800c4ac:	bd08      	pop	{r3, pc}
 800c4ae:	bf00      	nop
 800c4b0:	58024400 	.word	0x58024400
 800c4b4:	08028898 	.word	0x08028898

0800c4b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4b8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c4ba:	f7ff ffc9 	bl	800c450 <HAL_RCC_GetHCLKFreq>
 800c4be:	4b05      	ldr	r3, [pc, #20]	@ (800c4d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800c4c0:	4a05      	ldr	r2, [pc, #20]	@ (800c4d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c4c2:	69db      	ldr	r3, [r3, #28]
 800c4c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c4c8:	5cd3      	ldrb	r3, [r2, r3]
 800c4ca:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c4ce:	40d8      	lsrs	r0, r3
 800c4d0:	bd08      	pop	{r3, pc}
 800c4d2:	bf00      	nop
 800c4d4:	58024400 	.word	0x58024400
 800c4d8:	08028898 	.word	0x08028898

0800c4dc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c4dc:	233f      	movs	r3, #63	@ 0x3f
 800c4de:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c4e0:	4b11      	ldr	r3, [pc, #68]	@ (800c528 <HAL_RCC_GetClockConfig+0x4c>)
 800c4e2:	691a      	ldr	r2, [r3, #16]
 800c4e4:	f002 0207 	and.w	r2, r2, #7
 800c4e8:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c4ea:	699a      	ldr	r2, [r3, #24]
 800c4ec:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800c4f0:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c4f2:	699a      	ldr	r2, [r3, #24]
 800c4f4:	f002 020f 	and.w	r2, r2, #15
 800c4f8:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c4fa:	699a      	ldr	r2, [r3, #24]
 800c4fc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c500:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c502:	69da      	ldr	r2, [r3, #28]
 800c504:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800c508:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c50a:	69da      	ldr	r2, [r3, #28]
 800c50c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c510:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c518:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c51a:	4b04      	ldr	r3, [pc, #16]	@ (800c52c <HAL_RCC_GetClockConfig+0x50>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f003 030f 	and.w	r3, r3, #15
 800c522:	600b      	str	r3, [r1, #0]
}
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	58024400 	.word	0x58024400
 800c52c:	52002000 	.word	0x52002000

0800c530 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c532:	4c3a      	ldr	r4, [pc, #232]	@ (800c61c <RCCEx_PLL2_Config+0xec>)
{
 800c534:	4606      	mov	r6, r0
 800c536:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c538:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c53a:	f003 0303 	and.w	r3, r3, #3
 800c53e:	2b03      	cmp	r3, #3
 800c540:	d069      	beq.n	800c616 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c548:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c54a:	f7fc f92b 	bl	80087a4 <HAL_GetTick>
 800c54e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	011a      	lsls	r2, r3, #4
 800c554:	d44b      	bmi.n	800c5ee <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c556:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c558:	6832      	ldr	r2, [r6, #0]
 800c55a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c55e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800c562:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c564:	68b3      	ldr	r3, [r6, #8]
 800c566:	68f2      	ldr	r2, [r6, #12]
 800c568:	3b01      	subs	r3, #1
 800c56a:	3a01      	subs	r2, #1
 800c56c:	025b      	lsls	r3, r3, #9
 800c56e:	0412      	lsls	r2, r2, #16
 800c570:	b29b      	uxth	r3, r3
 800c572:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c576:	4313      	orrs	r3, r2
 800c578:	6872      	ldr	r2, [r6, #4]
 800c57a:	3a01      	subs	r2, #1
 800c57c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c580:	4313      	orrs	r3, r2
 800c582:	6932      	ldr	r2, [r6, #16]
 800c584:	3a01      	subs	r2, #1
 800c586:	0612      	lsls	r2, r2, #24
 800c588:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c58c:	4313      	orrs	r3, r2
 800c58e:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c590:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c592:	6972      	ldr	r2, [r6, #20]
 800c594:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c598:	4313      	orrs	r3, r2
 800c59a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c59c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c59e:	69b2      	ldr	r2, [r6, #24]
 800c5a0:	f023 0320 	bic.w	r3, r3, #32
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c5a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c5aa:	f023 0310 	bic.w	r3, r3, #16
 800c5ae:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c5b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c5b2:	69f2      	ldr	r2, [r6, #28]
 800c5b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c5b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c5bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c5c0:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c5c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c5c4:	f043 0310 	orr.w	r3, r3, #16
 800c5c8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c5ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c5cc:	b9b5      	cbnz	r5, 800c5fc <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c5ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c5d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c5d4:	4c11      	ldr	r4, [pc, #68]	@ (800c61c <RCCEx_PLL2_Config+0xec>)
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c5dc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5de:	f7fc f8e1 	bl	80087a4 <HAL_GetTick>
 800c5e2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	011b      	lsls	r3, r3, #4
 800c5e8:	d50f      	bpl.n	800c60a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	e005      	b.n	800c5fa <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5ee:	f7fc f8d9 	bl	80087a4 <HAL_GetTick>
 800c5f2:	1bc0      	subs	r0, r0, r7
 800c5f4:	2802      	cmp	r0, #2
 800c5f6:	d9ab      	bls.n	800c550 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800c5f8:	2003      	movs	r0, #3
}
 800c5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800c5fc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c5fe:	bf0c      	ite	eq
 800c600:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c604:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800c608:	e7e3      	b.n	800c5d2 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c60a:	f7fc f8cb 	bl	80087a4 <HAL_GetTick>
 800c60e:	1b40      	subs	r0, r0, r5
 800c610:	2802      	cmp	r0, #2
 800c612:	d9e7      	bls.n	800c5e4 <RCCEx_PLL2_Config+0xb4>
 800c614:	e7f0      	b.n	800c5f8 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800c616:	2001      	movs	r0, #1
 800c618:	e7ef      	b.n	800c5fa <RCCEx_PLL2_Config+0xca>
 800c61a:	bf00      	nop
 800c61c:	58024400 	.word	0x58024400

0800c620 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c622:	4c3a      	ldr	r4, [pc, #232]	@ (800c70c <RCCEx_PLL3_Config+0xec>)
{
 800c624:	4606      	mov	r6, r0
 800c626:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c628:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c62a:	f003 0303 	and.w	r3, r3, #3
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d069      	beq.n	800c706 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c632:	6823      	ldr	r3, [r4, #0]
 800c634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c638:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c63a:	f7fc f8b3 	bl	80087a4 <HAL_GetTick>
 800c63e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	009a      	lsls	r2, r3, #2
 800c644:	d44b      	bmi.n	800c6de <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c646:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c648:	6832      	ldr	r2, [r6, #0]
 800c64a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800c64e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800c652:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c654:	68b3      	ldr	r3, [r6, #8]
 800c656:	68f2      	ldr	r2, [r6, #12]
 800c658:	3b01      	subs	r3, #1
 800c65a:	3a01      	subs	r2, #1
 800c65c:	025b      	lsls	r3, r3, #9
 800c65e:	0412      	lsls	r2, r2, #16
 800c660:	b29b      	uxth	r3, r3
 800c662:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c666:	4313      	orrs	r3, r2
 800c668:	6872      	ldr	r2, [r6, #4]
 800c66a:	3a01      	subs	r2, #1
 800c66c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c670:	4313      	orrs	r3, r2
 800c672:	6932      	ldr	r2, [r6, #16]
 800c674:	3a01      	subs	r2, #1
 800c676:	0612      	lsls	r2, r2, #24
 800c678:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c67c:	4313      	orrs	r3, r2
 800c67e:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c680:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c682:	6972      	ldr	r2, [r6, #20]
 800c684:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c688:	4313      	orrs	r3, r2
 800c68a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c68c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c68e:	69b2      	ldr	r2, [r6, #24]
 800c690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c694:	4313      	orrs	r3, r2
 800c696:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c698:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c69a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c69e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c6a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c6a2:	69f2      	ldr	r2, [r6, #28]
 800c6a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6a8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c6ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c6b0:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c6b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c6b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6b8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c6ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c6bc:	b9b5      	cbnz	r5, 800c6ec <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c6be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c6c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c6c4:	4c11      	ldr	r4, [pc, #68]	@ (800c70c <RCCEx_PLL3_Config+0xec>)
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c6cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6ce:	f7fc f869 	bl	80087a4 <HAL_GetTick>
 800c6d2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	d50f      	bpl.n	800c6fa <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e005      	b.n	800c6ea <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6de:	f7fc f861 	bl	80087a4 <HAL_GetTick>
 800c6e2:	1bc0      	subs	r0, r0, r7
 800c6e4:	2802      	cmp	r0, #2
 800c6e6:	d9ab      	bls.n	800c640 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800c6e8:	2003      	movs	r0, #3
}
 800c6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800c6ec:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c6ee:	bf0c      	ite	eq
 800c6f0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c6f4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800c6f8:	e7e3      	b.n	800c6c2 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6fa:	f7fc f853 	bl	80087a4 <HAL_GetTick>
 800c6fe:	1b40      	subs	r0, r0, r5
 800c700:	2802      	cmp	r0, #2
 800c702:	d9e7      	bls.n	800c6d4 <RCCEx_PLL3_Config+0xb4>
 800c704:	e7f0      	b.n	800c6e8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800c706:	2001      	movs	r0, #1
 800c708:	e7ef      	b.n	800c6ea <RCCEx_PLL3_Config+0xca>
 800c70a:	bf00      	nop
 800c70c:	58024400 	.word	0x58024400

0800c710 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c714:	6803      	ldr	r3, [r0, #0]
{
 800c716:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c718:	011c      	lsls	r4, r3, #4
 800c71a:	d51e      	bpl.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c71c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c71e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c722:	d02a      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800c724:	d80f      	bhi.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800c726:	b1d3      	cbz	r3, 800c75e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800c728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c72c:	d01d      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800c72e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	05d8      	lsls	r0, r3, #23
 800c734:	d54f      	bpl.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c736:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800c738:	2b04      	cmp	r3, #4
 800c73a:	d84b      	bhi.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800c73c:	e8df f003 	tbb	[pc, r3]
 800c740:	27443d22 	.word	0x27443d22
 800c744:	27          	.byte	0x27
 800c745:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c74a:	d1f0      	bne.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c74c:	4a86      	ldr	r2, [pc, #536]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c74e:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800c750:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c752:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c756:	430b      	orrs	r3, r1
 800c758:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c75a:	2600      	movs	r6, #0
 800c75c:	e7e8      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c75e:	4a82      	ldr	r2, [pc, #520]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c760:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c766:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c768:	e7f0      	b.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c76a:	2102      	movs	r1, #2
 800c76c:	3008      	adds	r0, #8
 800c76e:	f7ff fedf 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c772:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c774:	2800      	cmp	r0, #0
 800c776:	d1db      	bne.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800c778:	e7e8      	b.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c77a:	2102      	movs	r1, #2
 800c77c:	3028      	adds	r0, #40	@ 0x28
 800c77e:	f7ff ff4f 	bl	800c620 <RCCEx_PLL3_Config>
 800c782:	e7f6      	b.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c784:	4a78      	ldr	r2, [pc, #480]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c786:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c78c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c78e:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800c790:	bb1c      	cbnz	r4, 800c7da <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c792:	4a75      	ldr	r2, [pc, #468]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c794:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800c796:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c798:	f023 0307 	bic.w	r3, r3, #7
 800c79c:	430b      	orrs	r3, r1
 800c79e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c7a0:	682b      	ldr	r3, [r5, #0]
 800c7a2:	0599      	lsls	r1, r3, #22
 800c7a4:	d528      	bpl.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800c7a6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800c7a8:	2b80      	cmp	r3, #128	@ 0x80
 800c7aa:	d043      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800c7ac:	d817      	bhi.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0xce>
 800c7ae:	b3a3      	cbz	r3, 800c81a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800c7b0:	2b40      	cmp	r3, #64	@ 0x40
 800c7b2:	d038      	beq.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800c7b4:	2601      	movs	r6, #1
 800c7b6:	4634      	mov	r4, r6
 800c7b8:	e01e      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	f105 0008 	add.w	r0, r5, #8
 800c7c0:	f7ff feb6 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7c4:	4604      	mov	r4, r0
        break;
 800c7c6:	e7e3      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c7ce:	f7ff ff27 	bl	800c620 <RCCEx_PLL3_Config>
 800c7d2:	e7f7      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c7d4:	2601      	movs	r6, #1
 800c7d6:	4634      	mov	r4, r6
 800c7d8:	e7e2      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c7da:	4626      	mov	r6, r4
 800c7dc:	e7e0      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800c7de:	2bc0      	cmp	r3, #192	@ 0xc0
 800c7e0:	d002      	beq.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800c7e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7e6:	d1e5      	bne.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800c7e8:	bb54      	cbnz	r4, 800c840 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c7ea:	4a5f      	ldr	r2, [pc, #380]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c7ec:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c7ee:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c7f0:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800c7f4:	430b      	orrs	r3, r1
 800c7f6:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	055a      	lsls	r2, r3, #21
 800c7fc:	d531      	bpl.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800c7fe:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800c802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c806:	d049      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c808:	d81c      	bhi.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d039      	beq.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800c80e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c812:	d03c      	beq.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800c814:	2601      	movs	r6, #1
 800c816:	4634      	mov	r4, r6
 800c818:	e023      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c81a:	4a53      	ldr	r2, [pc, #332]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c81c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c81e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c822:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c824:	e7e0      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c826:	2100      	movs	r1, #0
 800c828:	f105 0008 	add.w	r0, r5, #8
 800c82c:	f7ff fe80 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c830:	4604      	mov	r4, r0
        break;
 800c832:	e7d9      	b.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c834:	2100      	movs	r1, #0
 800c836:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c83a:	f7ff fef1 	bl	800c620 <RCCEx_PLL3_Config>
 800c83e:	e7f7      	b.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800c840:	4626      	mov	r6, r4
 800c842:	e7d9      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800c844:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c848:	d002      	beq.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800c84a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c84e:	d1e1      	bne.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800c850:	bb54      	cbnz	r4, 800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c852:	4a45      	ldr	r2, [pc, #276]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c854:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800c858:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c85a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800c85e:	430b      	orrs	r3, r1
 800c860:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c862:	682b      	ldr	r3, [r5, #0]
 800c864:	051b      	lsls	r3, r3, #20
 800c866:	d530      	bpl.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c868:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800c86c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c870:	d045      	beq.n	800c8fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c872:	d81b      	bhi.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800c874:	b3b3      	cbz	r3, 800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800c876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c87a:	d039      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800c87c:	2601      	movs	r6, #1
 800c87e:	4634      	mov	r4, r6
 800c880:	e023      	b.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c882:	4a39      	ldr	r2, [pc, #228]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c884:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c88a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c88c:	e7e0      	b.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c88e:	2100      	movs	r1, #0
 800c890:	f105 0008 	add.w	r0, r5, #8
 800c894:	f7ff fe4c 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c898:	4604      	mov	r4, r0
        break;
 800c89a:	e7d9      	b.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c89c:	2100      	movs	r1, #0
 800c89e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c8a2:	f7ff febd 	bl	800c620 <RCCEx_PLL3_Config>
 800c8a6:	e7f7      	b.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800c8a8:	4626      	mov	r6, r4
 800c8aa:	e7da      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c8ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c8b0:	d002      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c8b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c8b6:	d1e1      	bne.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800c8b8:	bb3c      	cbnz	r4, 800c90a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c8ba:	4a2b      	ldr	r2, [pc, #172]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c8bc:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800c8c0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c8c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800c8c6:	430b      	orrs	r3, r1
 800c8c8:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c8ca:	682b      	ldr	r3, [r5, #0]
 800c8cc:	019f      	lsls	r7, r3, #6
 800c8ce:	d528      	bpl.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800c8d0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800c8d2:	2b20      	cmp	r3, #32
 800c8d4:	d03e      	beq.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800c8d6:	d81a      	bhi.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800c8d8:	b1db      	cbz	r3, 800c912 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c8da:	2b10      	cmp	r3, #16
 800c8dc:	d034      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800c8de:	2601      	movs	r6, #1
 800c8e0:	4634      	mov	r4, r6
 800c8e2:	e01e      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8e4:	4a20      	ldr	r2, [pc, #128]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c8e6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c8e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c8ee:	e7e3      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	f105 0008 	add.w	r0, r5, #8
 800c8f6:	f7ff fe1b 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8fa:	4604      	mov	r4, r0
        break;
 800c8fc:	e7dc      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8fe:	2100      	movs	r1, #0
 800c900:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c904:	f7ff fe8c 	bl	800c620 <RCCEx_PLL3_Config>
 800c908:	e7f7      	b.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c90a:	4626      	mov	r6, r4
 800c90c:	e7dd      	b.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800c90e:	2b30      	cmp	r3, #48	@ 0x30
 800c910:	d1e5      	bne.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800c912:	bb34      	cbnz	r4, 800c962 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c914:	4a14      	ldr	r2, [pc, #80]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c916:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c918:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800c91a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800c91e:	430b      	orrs	r3, r1
 800c920:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c922:	682b      	ldr	r3, [r5, #0]
 800c924:	04d8      	lsls	r0, r3, #19
 800c926:	d530      	bpl.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800c928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c92a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c92e:	f000 8097 	beq.w	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800c932:	d81b      	bhi.n	800c96c <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 8086 	beq.w	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800c93a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c93e:	f000 8088 	beq.w	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c942:	2601      	movs	r6, #1
 800c944:	4634      	mov	r4, r6
 800c946:	e020      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c948:	4a07      	ldr	r2, [pc, #28]	@ (800c968 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800c94a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c94c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c950:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800c952:	e7de      	b.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c954:	2102      	movs	r1, #2
 800c956:	f105 0008 	add.w	r0, r5, #8
 800c95a:	f7ff fde9 	bl	800c530 <RCCEx_PLL2_Config>
 800c95e:	4604      	mov	r4, r0
        break;
 800c960:	e7d7      	b.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c962:	4626      	mov	r6, r4
 800c964:	e7dd      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800c966:	bf00      	nop
 800c968:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800c96c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c970:	d002      	beq.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800c972:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c976:	d1e4      	bne.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800c978:	2c00      	cmp	r4, #0
 800c97a:	d177      	bne.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c97c:	4a9e      	ldr	r2, [pc, #632]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c97e:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800c980:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800c982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c986:	430b      	orrs	r3, r1
 800c988:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c98a:	682b      	ldr	r3, [r5, #0]
 800c98c:	0499      	lsls	r1, r3, #18
 800c98e:	d50c      	bpl.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800c990:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800c992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c996:	f000 8083 	beq.w	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800c99a:	d869      	bhi.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d06f      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800c9a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9a4:	d075      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c9a6:	2601      	movs	r6, #1
 800c9a8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c9aa:	682b      	ldr	r3, [r5, #0]
 800c9ac:	045a      	lsls	r2, r3, #17
 800c9ae:	d50e      	bpl.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800c9b0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800c9b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9b8:	f000 8093 	beq.w	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800c9bc:	d878      	bhi.n	800cab0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d07e      	beq.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800c9c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9c6:	f000 8085 	beq.w	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800c9ca:	2601      	movs	r6, #1
 800c9cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c9ce:	682b      	ldr	r3, [r5, #0]
 800c9d0:	015b      	lsls	r3, r3, #5
 800c9d2:	d515      	bpl.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800c9d4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c9d6:	b14b      	cbz	r3, 800c9ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800c9d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9dc:	f040 8089 	bne.w	800caf2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	f105 0008 	add.w	r0, r5, #8
 800c9e6:	f7ff fda3 	bl	800c530 <RCCEx_PLL2_Config>
 800c9ea:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800c9ec:	2c00      	cmp	r4, #0
 800c9ee:	f040 8083 	bne.w	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800c9f2:	4a81      	ldr	r2, [pc, #516]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800c9f4:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800c9f6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800c9f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9fc:	430b      	orrs	r3, r1
 800c9fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	041f      	lsls	r7, r3, #16
 800ca04:	d511      	bpl.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800ca06:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ca08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca0c:	d076      	beq.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ca0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca12:	d079      	beq.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d17e      	bne.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800ca18:	2c00      	cmp	r4, #0
 800ca1a:	d17f      	bne.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ca1c:	4a76      	ldr	r2, [pc, #472]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ca1e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800ca20:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ca22:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800ca26:	430b      	orrs	r3, r1
 800ca28:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ca2a:	682b      	ldr	r3, [r5, #0]
 800ca2c:	01d8      	lsls	r0, r3, #7
 800ca2e:	f140 8085 	bpl.w	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800ca32:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800ca34:	2b03      	cmp	r3, #3
 800ca36:	f200 80e5 	bhi.w	800cc04 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800ca3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ca3e:	0076      	.short	0x0076
 800ca40:	00d50071 	.word	0x00d50071
 800ca44:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca46:	4a6c      	ldr	r2, [pc, #432]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ca48:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ca4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ca50:	e792      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca52:	2100      	movs	r1, #0
 800ca54:	f105 0008 	add.w	r0, r5, #8
 800ca58:	f7ff fd6a 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca5c:	4604      	mov	r4, r0
        break;
 800ca5e:	e78b      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca60:	2100      	movs	r1, #0
 800ca62:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ca66:	f7ff fddb 	bl	800c620 <RCCEx_PLL3_Config>
 800ca6a:	e7f7      	b.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ca6c:	4626      	mov	r6, r4
 800ca6e:	e78c      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800ca70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ca74:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800ca78:	d002      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800ca7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca7e:	d192      	bne.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800ca80:	b9a4      	cbnz	r4, 800caac <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ca82:	4a5d      	ldr	r2, [pc, #372]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ca84:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800ca86:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ca88:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800ca8c:	430b      	orrs	r3, r1
 800ca8e:	6513      	str	r3, [r2, #80]	@ 0x50
 800ca90:	e78b      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca92:	2101      	movs	r1, #1
 800ca94:	f105 0008 	add.w	r0, r5, #8
 800ca98:	f7ff fd4a 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca9c:	4604      	mov	r4, r0
        break;
 800ca9e:	e7ef      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800caa0:	2101      	movs	r1, #1
 800caa2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800caa6:	f7ff fdbb 	bl	800c620 <RCCEx_PLL3_Config>
 800caaa:	e7f7      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800caac:	4626      	mov	r6, r4
 800caae:	e77c      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800cab0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cab4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800cab8:	d002      	beq.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800caba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cabe:	d184      	bne.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800cac0:	b9ac      	cbnz	r4, 800caee <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cac2:	4a4d      	ldr	r2, [pc, #308]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cac4:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800cac8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800caca:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800cace:	430b      	orrs	r3, r1
 800cad0:	6593      	str	r3, [r2, #88]	@ 0x58
 800cad2:	e77c      	b.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cad4:	2101      	movs	r1, #1
 800cad6:	f105 0008 	add.w	r0, r5, #8
 800cada:	f7ff fd29 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cade:	4604      	mov	r4, r0
        break;
 800cae0:	e7ee      	b.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cae2:	2101      	movs	r1, #1
 800cae4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cae8:	f7ff fd9a 	bl	800c620 <RCCEx_PLL3_Config>
 800caec:	e7f7      	b.n	800cade <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800caee:	4626      	mov	r6, r4
 800caf0:	e76d      	b.n	800c9ce <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800caf2:	2601      	movs	r6, #1
 800caf4:	4634      	mov	r4, r6
 800caf6:	e783      	b.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800caf8:	4626      	mov	r6, r4
 800cafa:	e781      	b.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cafc:	4a3e      	ldr	r2, [pc, #248]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cafe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cb00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb04:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800cb06:	e787      	b.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb08:	2101      	movs	r1, #1
 800cb0a:	f105 0008 	add.w	r0, r5, #8
 800cb0e:	f7ff fd0f 	bl	800c530 <RCCEx_PLL2_Config>
 800cb12:	4604      	mov	r4, r0
        break;
 800cb14:	e780      	b.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800cb16:	2601      	movs	r6, #1
 800cb18:	4634      	mov	r4, r6
 800cb1a:	e786      	b.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800cb1c:	4626      	mov	r6, r4
 800cb1e:	e784      	b.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb20:	4a35      	ldr	r2, [pc, #212]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cb22:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800cb24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800cb2a:	2c00      	cmp	r4, #0
 800cb2c:	d16d      	bne.n	800cc0a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cb2e:	4a32      	ldr	r2, [pc, #200]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cb30:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800cb32:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800cb34:	f023 0303 	bic.w	r3, r3, #3
 800cb38:	430b      	orrs	r3, r1
 800cb3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	0259      	lsls	r1, r3, #9
 800cb40:	d539      	bpl.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cb42:	4f2e      	ldr	r7, [pc, #184]	@ (800cbfc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb4a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800cb4c:	f7fb fe2a 	bl	80087a4 <HAL_GetTick>
 800cb50:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	05da      	lsls	r2, r3, #23
 800cb56:	d55a      	bpl.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800cb58:	2c00      	cmp	r4, #0
 800cb5a:	d176      	bne.n	800cc4a <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cb5c:	4b26      	ldr	r3, [pc, #152]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cb5e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800cb62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cb64:	4042      	eors	r2, r0
 800cb66:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800cb6a:	d00b      	beq.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cb6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800cb6e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cb70:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800cb74:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800cb78:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cb7a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cb7c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800cb80:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800cb82:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cb84:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800cb88:	d04a      	beq.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb8a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800cb8e:	491a      	ldr	r1, [pc, #104]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cb90:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800cb94:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800cb98:	d153      	bne.n	800cc42 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800cb9a:	6908      	ldr	r0, [r1, #16]
 800cb9c:	4a18      	ldr	r2, [pc, #96]	@ (800cc00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800cb9e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800cba2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800cba6:	4302      	orrs	r2, r0
 800cba8:	610a      	str	r2, [r1, #16]
 800cbaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbae:	4a12      	ldr	r2, [pc, #72]	@ (800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800cbb0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800cbb2:	430b      	orrs	r3, r1
 800cbb4:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cbb6:	682b      	ldr	r3, [r5, #0]
 800cbb8:	07d8      	lsls	r0, r3, #31
 800cbba:	d50a      	bpl.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800cbbc:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800cbc0:	2b10      	cmp	r3, #16
 800cbc2:	d05b      	beq.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800cbc4:	d843      	bhi.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d047      	beq.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800cbca:	2b08      	cmp	r3, #8
 800cbcc:	d04f      	beq.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800cbce:	2601      	movs	r6, #1
 800cbd0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	0799      	lsls	r1, r3, #30
 800cbd6:	d567      	bpl.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cbd8:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800cbda:	2b05      	cmp	r3, #5
 800cbdc:	d87a      	bhi.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800cbde:	e8df f003 	tbb	[pc, r3]
 800cbe2:	555b      	.short	0x555b
 800cbe4:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cbe8:	2102      	movs	r1, #2
 800cbea:	f105 0008 	add.w	r0, r5, #8
 800cbee:	f7ff fc9f 	bl	800c530 <RCCEx_PLL2_Config>
 800cbf2:	4604      	mov	r4, r0
        break;
 800cbf4:	e799      	b.n	800cb2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cbf6:	bf00      	nop
 800cbf8:	58024400 	.word	0x58024400
 800cbfc:	58024800 	.word	0x58024800
 800cc00:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800cc04:	2601      	movs	r6, #1
 800cc06:	4634      	mov	r4, r6
 800cc08:	e798      	b.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800cc0a:	4626      	mov	r6, r4
 800cc0c:	e796      	b.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc0e:	f7fb fdc9 	bl	80087a4 <HAL_GetTick>
 800cc12:	eba0 0008 	sub.w	r0, r0, r8
 800cc16:	2864      	cmp	r0, #100	@ 0x64
 800cc18:	d99b      	bls.n	800cb52 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800cc1a:	2603      	movs	r6, #3
 800cc1c:	4634      	mov	r4, r6
 800cc1e:	e7ca      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800cc20:	f7fb fdc0 	bl	80087a4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cc24:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800cce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800cc28:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc2a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cc2e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800cc32:	079b      	lsls	r3, r3, #30
 800cc34:	d4a9      	bmi.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc36:	f7fb fdb5 	bl	80087a4 <HAL_GetTick>
 800cc3a:	1bc0      	subs	r0, r0, r7
 800cc3c:	4548      	cmp	r0, r9
 800cc3e:	d9f6      	bls.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800cc40:	e7eb      	b.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc42:	690a      	ldr	r2, [r1, #16]
 800cc44:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800cc48:	e7ae      	b.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800cc4a:	4626      	mov	r6, r4
 800cc4c:	e7b3      	b.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800cc4e:	f023 0208 	bic.w	r2, r3, #8
 800cc52:	2a20      	cmp	r2, #32
 800cc54:	d001      	beq.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800cc56:	2b18      	cmp	r3, #24
 800cc58:	d1b9      	bne.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800cc5a:	b9ac      	cbnz	r4, 800cc88 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cc5c:	4a20      	ldr	r2, [pc, #128]	@ (800cce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cc5e:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800cc62:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cc64:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800cc68:	430b      	orrs	r3, r1
 800cc6a:	6553      	str	r3, [r2, #84]	@ 0x54
 800cc6c:	e7b1      	b.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc6e:	2101      	movs	r1, #1
 800cc70:	f105 0008 	add.w	r0, r5, #8
 800cc74:	f7ff fc5c 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc78:	4604      	mov	r4, r0
        break;
 800cc7a:	e7ee      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc7c:	2101      	movs	r1, #1
 800cc7e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cc82:	f7ff fccd 	bl	800c620 <RCCEx_PLL3_Config>
 800cc86:	e7f7      	b.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800cc88:	4626      	mov	r6, r4
 800cc8a:	e7a2      	b.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	f105 0008 	add.w	r0, r5, #8
 800cc92:	f7ff fc4d 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc96:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800cc98:	b9fc      	cbnz	r4, 800ccda <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cc9a:	4a11      	ldr	r2, [pc, #68]	@ (800cce0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cc9c:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800cc9e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cca0:	f023 0307 	bic.w	r3, r3, #7
 800cca4:	430b      	orrs	r3, r1
 800cca6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	075a      	lsls	r2, r3, #29
 800ccac:	d52b      	bpl.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ccae:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800ccb2:	2b05      	cmp	r3, #5
 800ccb4:	f200 816e 	bhi.w	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800ccb8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ccbc:	0014001a 	.word	0x0014001a
 800ccc0:	001a0166 	.word	0x001a0166
 800ccc4:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccc8:	2101      	movs	r1, #1
 800ccca:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ccce:	f7ff fca7 	bl	800c620 <RCCEx_PLL3_Config>
 800ccd2:	e7e0      	b.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ccd4:	2601      	movs	r6, #1
 800ccd6:	4634      	mov	r4, r6
 800ccd8:	e7e6      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ccda:	4626      	mov	r6, r4
 800ccdc:	e7e4      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ccde:	bf00      	nop
 800cce0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cce4:	2101      	movs	r1, #1
 800cce6:	f105 0008 	add.w	r0, r5, #8
 800ccea:	f7ff fc21 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccee:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ccf0:	2c00      	cmp	r4, #0
 800ccf2:	f040 8152 	bne.w	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ccf6:	4aaa      	ldr	r2, [pc, #680]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ccf8:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800ccfc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ccfe:	f023 0307 	bic.w	r3, r3, #7
 800cd02:	430b      	orrs	r3, r1
 800cd04:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cd06:	682b      	ldr	r3, [r5, #0]
 800cd08:	069b      	lsls	r3, r3, #26
 800cd0a:	d510      	bpl.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cd0c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800cd10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd14:	f000 8160 	beq.w	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800cd18:	f200 8144 	bhi.w	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 814a 	beq.w	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800cd22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd26:	f000 8150 	beq.w	800cfca <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800cd2a:	2601      	movs	r6, #1
 800cd2c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cd2e:	682b      	ldr	r3, [r5, #0]
 800cd30:	065f      	lsls	r7, r3, #25
 800cd32:	d510      	bpl.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800cd34:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800cd38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd3c:	f000 816e 	beq.w	800d01c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800cd40:	f200 8152 	bhi.w	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 8158 	beq.w	800cffa <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800cd4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd4e:	f000 815e 	beq.w	800d00e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800cd52:	2601      	movs	r6, #1
 800cd54:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cd56:	682b      	ldr	r3, [r5, #0]
 800cd58:	0618      	lsls	r0, r3, #24
 800cd5a:	d510      	bpl.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cd5c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800cd60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd64:	f000 817c 	beq.w	800d060 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800cd68:	f200 8160 	bhi.w	800d02c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 8166 	beq.w	800d03e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800cd72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd76:	f000 816c 	beq.w	800d052 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800cd7a:	2601      	movs	r6, #1
 800cd7c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cd7e:	682b      	ldr	r3, [r5, #0]
 800cd80:	0719      	lsls	r1, r3, #28
 800cd82:	d514      	bpl.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800cd84:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800cd88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd8c:	d107      	bne.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cd8e:	2102      	movs	r1, #2
 800cd90:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cd94:	f7ff fc44 	bl	800c620 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	bf18      	it	ne
 800cd9c:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cd9e:	4a80      	ldr	r2, [pc, #512]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cda0:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800cda4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cda6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800cdaa:	430b      	orrs	r3, r1
 800cdac:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	06da      	lsls	r2, r3, #27
 800cdb2:	d514      	bpl.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800cdb4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800cdb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdbc:	d107      	bne.n	800cdce <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cdbe:	2102      	movs	r1, #2
 800cdc0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cdc4:	f7ff fc2c 	bl	800c620 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	bf18      	it	ne
 800cdcc:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cdce:	4a74      	ldr	r2, [pc, #464]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cdd0:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800cdd4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800cdd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdda:	430b      	orrs	r3, r1
 800cddc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cdde:	682b      	ldr	r3, [r5, #0]
 800cde0:	031b      	lsls	r3, r3, #12
 800cde2:	d51b      	bpl.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800cde4:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800cde8:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800cdec:	f000 8140 	beq.w	800d070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800cdf0:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800cdf4:	d007      	beq.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800cdf6:	2900      	cmp	r1, #0
 800cdf8:	f040 8140 	bne.w	800d07c <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cdfc:	f105 0008 	add.w	r0, r5, #8
 800ce00:	f7ff fb96 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce04:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ce06:	2c00      	cmp	r4, #0
 800ce08:	f040 813b 	bne.w	800d082 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ce0c:	4a64      	ldr	r2, [pc, #400]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ce0e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800ce12:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ce14:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800ce18:	430b      	orrs	r3, r1
 800ce1a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	035f      	lsls	r7, r3, #13
 800ce20:	d50f      	bpl.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800ce22:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800ce26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce2a:	f000 813b 	beq.w	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800ce2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ce32:	f000 812d 	beq.w	800d090 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800ce36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce3a:	f000 8124 	beq.w	800d086 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800ce3e:	2601      	movs	r6, #1
 800ce40:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ce42:	682b      	ldr	r3, [r5, #0]
 800ce44:	03d8      	lsls	r0, r3, #15
 800ce46:	d509      	bpl.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800ce48:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 8133 	beq.w	800d0b6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800ce50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce54:	f000 813d 	beq.w	800d0d2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800ce58:	2601      	movs	r6, #1
 800ce5a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ce5c:	682b      	ldr	r3, [r5, #0]
 800ce5e:	0099      	lsls	r1, r3, #2
 800ce60:	d507      	bpl.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce62:	2102      	movs	r1, #2
 800ce64:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ce68:	f7ff fbda 	bl	800c620 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	bf18      	it	ne
 800ce70:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ce72:	e9d5 3100 	ldrd	r3, r1, [r5]
 800ce76:	039a      	lsls	r2, r3, #14
 800ce78:	f140 8143 	bpl.w	800d102 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800ce7c:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800ce80:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800ce84:	f000 813f 	beq.w	800d106 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800ce88:	f200 812c 	bhi.w	800d0e4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	f000 812f 	beq.w	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800ce92:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ce94:	02df      	lsls	r7, r3, #11
 800ce96:	d506      	bpl.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ce98:	4841      	ldr	r0, [pc, #260]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ce9a:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800ce9c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ce9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800cea2:	4332      	orrs	r2, r6
 800cea4:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cea6:	00de      	lsls	r6, r3, #3
 800cea8:	d507      	bpl.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ceaa:	483d      	ldr	r0, [pc, #244]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ceac:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800ceb0:	6902      	ldr	r2, [r0, #16]
 800ceb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ceb6:	4332      	orrs	r2, r6
 800ceb8:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ceba:	0298      	lsls	r0, r3, #10
 800cebc:	d506      	bpl.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cebe:	4838      	ldr	r0, [pc, #224]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cec0:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800cec2:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800cec4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800cec8:	4332      	orrs	r2, r6
 800ceca:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cecc:	005a      	lsls	r2, r3, #1
 800cece:	d509      	bpl.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ced0:	4a33      	ldr	r2, [pc, #204]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ced2:	6910      	ldr	r0, [r2, #16]
 800ced4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800ced8:	6110      	str	r0, [r2, #16]
 800ceda:	6910      	ldr	r0, [r2, #16]
 800cedc:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800cee0:	4330      	orrs	r0, r6
 800cee2:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	da06      	bge.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cee8:	482d      	ldr	r0, [pc, #180]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ceea:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ceec:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800ceee:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800cef2:	4332      	orrs	r2, r6
 800cef4:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cef6:	021f      	lsls	r7, r3, #8
 800cef8:	d507      	bpl.n	800cf0a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cefa:	4a29      	ldr	r2, [pc, #164]	@ (800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800cefc:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800cf00:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cf02:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800cf06:	4303      	orrs	r3, r0
 800cf08:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cf0a:	07ce      	lsls	r6, r1, #31
 800cf0c:	d506      	bpl.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf0e:	2100      	movs	r1, #0
 800cf10:	f105 0008 	add.w	r0, r5, #8
 800cf14:	f7ff fb0c 	bl	800c530 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800cf18:	4607      	mov	r7, r0
 800cf1a:	b900      	cbnz	r0, 800cf1e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800cf1c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cf1e:	686b      	ldr	r3, [r5, #4]
 800cf20:	079c      	lsls	r4, r3, #30
 800cf22:	d506      	bpl.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf24:	2101      	movs	r1, #1
 800cf26:	f105 0008 	add.w	r0, r5, #8
 800cf2a:	f7ff fb01 	bl	800c530 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800cf2e:	4606      	mov	r6, r0
 800cf30:	b900      	cbnz	r0, 800cf34 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800cf32:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cf34:	686b      	ldr	r3, [r5, #4]
 800cf36:	0758      	lsls	r0, r3, #29
 800cf38:	d506      	bpl.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cf3a:	2102      	movs	r1, #2
 800cf3c:	f105 0008 	add.w	r0, r5, #8
 800cf40:	f7ff faf6 	bl	800c530 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800cf44:	4604      	mov	r4, r0
 800cf46:	b900      	cbnz	r0, 800cf4a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800cf48:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cf4a:	686b      	ldr	r3, [r5, #4]
 800cf4c:	0719      	lsls	r1, r3, #28
 800cf4e:	d506      	bpl.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf50:	2100      	movs	r1, #0
 800cf52:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cf56:	f7ff fb63 	bl	800c620 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800cf5a:	4606      	mov	r6, r0
 800cf5c:	b900      	cbnz	r0, 800cf60 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800cf5e:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cf60:	686b      	ldr	r3, [r5, #4]
 800cf62:	06da      	lsls	r2, r3, #27
 800cf64:	d506      	bpl.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf66:	2101      	movs	r1, #1
 800cf68:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cf6c:	f7ff fb58 	bl	800c620 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800cf70:	4604      	mov	r4, r0
 800cf72:	b900      	cbnz	r0, 800cf76 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800cf74:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cf76:	686b      	ldr	r3, [r5, #4]
 800cf78:	069b      	lsls	r3, r3, #26
 800cf7a:	f100 80ca 	bmi.w	800d112 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800cf7e:	1e20      	subs	r0, r4, #0
 800cf80:	bf18      	it	ne
 800cf82:	2001      	movne	r0, #1
}
 800cf84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf88:	2101      	movs	r1, #1
 800cf8a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cf8e:	f7ff fb47 	bl	800c620 <RCCEx_PLL3_Config>
 800cf92:	e6ac      	b.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cf94:	2601      	movs	r6, #1
 800cf96:	4634      	mov	r4, r6
 800cf98:	e6b5      	b.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800cf9a:	4626      	mov	r6, r4
 800cf9c:	e6b3      	b.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800cf9e:	bf00      	nop
 800cfa0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cfa4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800cfa8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800cfac:	d003      	beq.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800cfae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cfb2:	f47f aeba 	bne.w	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800cfb6:	b9ac      	cbnz	r4, 800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cfb8:	4a5b      	ldr	r2, [pc, #364]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800cfba:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800cfbe:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800cfc0:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800cfc4:	430b      	orrs	r3, r1
 800cfc6:	6553      	str	r3, [r2, #84]	@ 0x54
 800cfc8:	e6b1      	b.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cfca:	2100      	movs	r1, #0
 800cfcc:	f105 0008 	add.w	r0, r5, #8
 800cfd0:	f7ff faae 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cfd4:	4604      	mov	r4, r0
        break;
 800cfd6:	e7ee      	b.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cfd8:	2102      	movs	r1, #2
 800cfda:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800cfde:	f7ff fb1f 	bl	800c620 <RCCEx_PLL3_Config>
 800cfe2:	e7f7      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800cfe4:	4626      	mov	r6, r4
 800cfe6:	e6a2      	b.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800cfe8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800cfec:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800cff0:	d003      	beq.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800cff2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cff6:	f47f aeac 	bne.w	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800cffa:	b9ac      	cbnz	r4, 800d028 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cffc:	4a4a      	ldr	r2, [pc, #296]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800cffe:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800d002:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d004:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800d008:	430b      	orrs	r3, r1
 800d00a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d00c:	e6a3      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d00e:	2100      	movs	r1, #0
 800d010:	f105 0008 	add.w	r0, r5, #8
 800d014:	f7ff fa8c 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d018:	4604      	mov	r4, r0
        break;
 800d01a:	e7ee      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d01c:	2102      	movs	r1, #2
 800d01e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d022:	f7ff fafd 	bl	800c620 <RCCEx_PLL3_Config>
 800d026:	e7f7      	b.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800d028:	4626      	mov	r6, r4
 800d02a:	e694      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d02c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d030:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800d034:	d003      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800d036:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d03a:	f47f ae9e 	bne.w	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800d03e:	b9ac      	cbnz	r4, 800d06c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d040:	4a39      	ldr	r2, [pc, #228]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d042:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800d046:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d048:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800d04c:	430b      	orrs	r3, r1
 800d04e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d050:	e695      	b.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d052:	2100      	movs	r1, #0
 800d054:	f105 0008 	add.w	r0, r5, #8
 800d058:	f7ff fa6a 	bl	800c530 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d05c:	4604      	mov	r4, r0
        break;
 800d05e:	e7ee      	b.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d060:	2102      	movs	r1, #2
 800d062:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d066:	f7ff fadb 	bl	800c620 <RCCEx_PLL3_Config>
 800d06a:	e7f7      	b.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800d06c:	4626      	mov	r6, r4
 800d06e:	e686      	b.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d070:	2102      	movs	r1, #2
 800d072:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d076:	f7ff fad3 	bl	800c620 <RCCEx_PLL3_Config>
 800d07a:	e6c3      	b.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800d07c:	2601      	movs	r6, #1
 800d07e:	4634      	mov	r4, r6
 800d080:	e6cc      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800d082:	4626      	mov	r6, r4
 800d084:	e6ca      	b.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d086:	4a28      	ldr	r2, [pc, #160]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d088:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d08a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d08e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d090:	b97c      	cbnz	r4, 800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d092:	4a25      	ldr	r2, [pc, #148]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d094:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800d098:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800d09a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d09e:	430b      	orrs	r3, r1
 800d0a0:	6553      	str	r3, [r2, #84]	@ 0x54
 800d0a2:	e6ce      	b.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d0a4:	2101      	movs	r1, #1
 800d0a6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d0aa:	f7ff fab9 	bl	800c620 <RCCEx_PLL3_Config>
 800d0ae:	4604      	mov	r4, r0
        break;
 800d0b0:	e7ee      	b.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800d0b2:	4626      	mov	r6, r4
 800d0b4:	e6c5      	b.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0b6:	4a1c      	ldr	r2, [pc, #112]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d0b8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800d0ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0be:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800d0c0:	b974      	cbnz	r4, 800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d0c2:	4a19      	ldr	r2, [pc, #100]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d0c4:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800d0c6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800d0c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d0cc:	430b      	orrs	r3, r1
 800d0ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d0d0:	e6c4      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d0d2:	2102      	movs	r1, #2
 800d0d4:	f105 0008 	add.w	r0, r5, #8
 800d0d8:	f7ff fa2a 	bl	800c530 <RCCEx_PLL2_Config>
 800d0dc:	4604      	mov	r4, r0
        break;
 800d0de:	e7ef      	b.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800d0e0:	4626      	mov	r6, r4
 800d0e2:	e6bb      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800d0e4:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800d0e8:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800d0ec:	f47f aed1 	bne.w	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800d0f0:	2c00      	cmp	r4, #0
 800d0f2:	f47f aecf 	bne.w	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d0f6:	4c0c      	ldr	r4, [pc, #48]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d0f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d0fa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800d0fe:	4302      	orrs	r2, r0
 800d100:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800d102:	4634      	mov	r4, r6
 800d104:	e6c6      	b.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d106:	4f08      	ldr	r7, [pc, #32]	@ (800d128 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800d108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d10a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d10e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800d110:	e7ee      	b.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d112:	2102      	movs	r1, #2
 800d114:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800d118:	f7ff fa82 	bl	800c620 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f43f af2e 	beq.w	800cf7e <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800d122:	2001      	movs	r0, #1
 800d124:	e72e      	b.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800d126:	bf00      	nop
 800d128:	58024400 	.word	0x58024400

0800d12c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d130:	4604      	mov	r4, r0
 800d132:	b1f0      	cbz	r0, 800d172 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d134:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800d138:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d13c:	b91b      	cbnz	r3, 800d146 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d13e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d142:	f7f4 fac3 	bl	80016cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d146:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d148:	1d21      	adds	r1, r4, #4
 800d14a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d14c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d150:	f000 fc29 	bl	800d9a6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d154:	6862      	ldr	r2, [r4, #4]
 800d156:	4629      	mov	r1, r5
 800d158:	6820      	ldr	r0, [r4, #0]
 800d15a:	f000 fc5c 	bl	800da16 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d15e:	4a06      	ldr	r2, [pc, #24]	@ (800d178 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800d160:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800d162:	6813      	ldr	r3, [r2, #0]
 800d164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d168:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d16a:	2301      	movs	r3, #1
 800d16c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800d170:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d172:	2001      	movs	r0, #1
 800d174:	e7fc      	b.n	800d170 <HAL_SDRAM_Init+0x44>
 800d176:	bf00      	nop
 800d178:	52004000 	.word	0x52004000

0800d17c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800d17c:	b510      	push	{r4, lr}
 800d17e:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800d180:	f7f4 fb3e 	bl	8001800 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800d184:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d188:	f000 fc7b 	bl	800da82 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800d18c:	2000      	movs	r0, #0
 800d18e:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800d192:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800d196:	bd10      	pop	{r4, pc}

0800d198 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d198:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d19a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d19e:	4605      	mov	r5, r0
 800d1a0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d1a2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d1a4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800d1a6:	d010      	beq.n	800d1ca <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d1a8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800d1ac:	2c01      	cmp	r4, #1
 800d1ae:	d110      	bne.n	800d1d2 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d1b0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d1b2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d1b4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d1b8:	f000 fc72 	bl	800daa0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d1bc:	6833      	ldr	r3, [r6, #0]
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d104      	bne.n	800d1cc <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d1c2:	2305      	movs	r3, #5
 800d1c4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d1c8:	2000      	movs	r0, #0
}
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d1cc:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800d1d0:	e7fa      	b.n	800d1c8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800d1d2:	2001      	movs	r0, #1
 800d1d4:	e7f9      	b.n	800d1ca <HAL_SDRAM_SendCommand+0x32>

0800d1d6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d1d6:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d1d8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800d1dc:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	b2d8      	uxtb	r0, r3
 800d1e2:	d00d      	beq.n	800d200 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d1e4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	b2dd      	uxtb	r5, r3
 800d1ec:	d109      	bne.n	800d202 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d1ee:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d1f0:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d1f2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d1f6:	f000 fc65 	bl	800dac4 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d1fa:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d1fc:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800d200:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d202:	2001      	movs	r0, #1
 800d204:	e7fc      	b.n	800d200 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800d206 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800d206:	6803      	ldr	r3, [r0, #0]
 800d208:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d20a:	699a      	ldr	r2, [r3, #24]
 800d20c:	f042 0208 	orr.w	r2, r2, #8
 800d210:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d212:	699a      	ldr	r2, [r3, #24]
 800d214:	f042 0210 	orr.w	r2, r2, #16
 800d218:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	f022 0201 	bic.w	r2, r2, #1
 800d220:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d222:	691a      	ldr	r2, [r3, #16]
 800d224:	f422 725b 	bic.w	r2, r2, #876	@ 0x36c
 800d228:	f022 0203 	bic.w	r2, r2, #3
 800d22c:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d22e:	689a      	ldr	r2, [r3, #8]
 800d230:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d234:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d236:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800d23a:	2a04      	cmp	r2, #4
 800d23c:	d00b      	beq.n	800d256 <SPI_CloseTransfer+0x50>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d23e:	068a      	lsls	r2, r1, #26
 800d240:	d509      	bpl.n	800d256 <SPI_CloseTransfer+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d242:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800d246:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d24a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d24e:	699a      	ldr	r2, [r3, #24]
 800d250:	f042 0220 	orr.w	r2, r2, #32
 800d254:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d256:	f890 2081 	ldrb.w	r2, [r0, #129]	@ 0x81
 800d25a:	2a03      	cmp	r2, #3
 800d25c:	d00b      	beq.n	800d276 <SPI_CloseTransfer+0x70>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d25e:	064a      	lsls	r2, r1, #25
 800d260:	d509      	bpl.n	800d276 <SPI_CloseTransfer+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d262:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800d266:	f042 0204 	orr.w	r2, r2, #4
 800d26a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d26e:	699a      	ldr	r2, [r3, #24]
 800d270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d274:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d276:	058a      	lsls	r2, r1, #22
 800d278:	d509      	bpl.n	800d28e <SPI_CloseTransfer+0x88>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d27a:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800d27e:	f042 0201 	orr.w	r2, r2, #1
 800d282:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d286:	699a      	ldr	r2, [r3, #24]
 800d288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d28c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d28e:	05ca      	lsls	r2, r1, #23
 800d290:	d509      	bpl.n	800d2a6 <SPI_CloseTransfer+0xa0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d292:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800d296:	f042 0208 	orr.w	r2, r2, #8
 800d29a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d29e:	699a      	ldr	r2, [r3, #24]
 800d2a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d2a4:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d2ac:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 800d2b0:	4770      	bx	lr
	...

0800d2b4 <HAL_SPI_Init>:
{
 800d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	b908      	cbnz	r0, 800d2be <HAL_SPI_Init+0xa>
    return HAL_ERROR;
 800d2ba:	2001      	movs	r0, #1
}
 800d2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d2be:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2c0:	2300      	movs	r3, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d2c2:	494d      	ldr	r1, [pc, #308]	@ (800d3f8 <HAL_SPI_Init+0x144>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2c4:	6283      	str	r3, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d2c6:	428a      	cmp	r2, r1
 800d2c8:	68c3      	ldr	r3, [r0, #12]
 800d2ca:	d009      	beq.n	800d2e0 <HAL_SPI_Init+0x2c>
 800d2cc:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 800d2d0:	428a      	cmp	r2, r1
 800d2d2:	d005      	beq.n	800d2e0 <HAL_SPI_Init+0x2c>
 800d2d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d2d8:	428a      	cmp	r2, r1
 800d2da:	d001      	beq.n	800d2e0 <HAL_SPI_Init+0x2c>
 800d2dc:	2b0f      	cmp	r3, #15
 800d2de:	d8ec      	bhi.n	800d2ba <HAL_SPI_Init+0x6>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d2e0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d2e2:	3308      	adds	r3, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d2e4:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800d2e6:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 800d2e8:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d2ec:	4942      	ldr	r1, [pc, #264]	@ (800d3f8 <HAL_SPI_Init+0x144>)
 800d2ee:	428a      	cmp	r2, r1
 800d2f0:	d073      	beq.n	800d3da <HAL_SPI_Init+0x126>
 800d2f2:	f5a1 4178 	sub.w	r1, r1, #63488	@ 0xf800
 800d2f6:	428a      	cmp	r2, r1
 800d2f8:	d06f      	beq.n	800d3da <HAL_SPI_Init+0x126>
 800d2fa:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d2fe:	428a      	cmp	r2, r1
 800d300:	d06b      	beq.n	800d3da <HAL_SPI_Init+0x126>
 800d302:	2b08      	cmp	r3, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d304:	d8d9      	bhi.n	800d2ba <HAL_SPI_Init+0x6>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d306:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800d30a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d30e:	b923      	cbnz	r3, 800d31a <HAL_SPI_Init+0x66>
    HAL_SPI_MspInit(hspi);
 800d310:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800d312:	f884 2080 	strb.w	r2, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800d316:	f7f4 f975 	bl	8001604 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800d31a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d31c:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d31e:	6861      	ldr	r1, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800d320:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 800d324:	6813      	ldr	r3, [r2, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d326:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
  __HAL_SPI_DISABLE(hspi);
 800d328:	f023 0301 	bic.w	r3, r3, #1
 800d32c:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d32e:	6893      	ldr	r3, [r2, #8]
 800d330:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d334:	69a3      	ldr	r3, [r4, #24]
 800d336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d33a:	d104      	bne.n	800d346 <HAL_SPI_Init+0x92>
 800d33c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800d340:	d14d      	bne.n	800d3de <HAL_SPI_Init+0x12a>
 800d342:	2e00      	cmp	r6, #0
 800d344:	d050      	beq.n	800d3e8 <HAL_SPI_Init+0x134>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d346:	f411 0080 	ands.w	r0, r1, #4194304	@ 0x400000
 800d34a:	68e5      	ldr	r5, [r4, #12]
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d34c:	6817      	ldr	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d34e:	d050      	beq.n	800d3f2 <HAL_SPI_Init+0x13e>
 800d350:	2d06      	cmp	r5, #6
 800d352:	d94e      	bls.n	800d3f2 <HAL_SPI_Init+0x13e>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d354:	f427 7e80 	bic.w	lr, r7, #256	@ 0x100
 800d358:	6d27      	ldr	r7, [r4, #80]	@ 0x50
 800d35a:	ea4e 0707 	orr.w	r7, lr, r7
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d35e:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d360:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d362:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d364:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d366:	433d      	orrs	r5, r7
 800d368:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800d36a:	433d      	orrs	r5, r7
 800d36c:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 800d36e:	433d      	orrs	r5, r7
 800d370:	ea45 050c 	orr.w	r5, r5, ip
 800d374:	6095      	str	r5, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d376:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800d378:	432b      	orrs	r3, r5
 800d37a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d37c:	432b      	orrs	r3, r5
 800d37e:	6925      	ldr	r5, [r4, #16]
 800d380:	432b      	orrs	r3, r5
 800d382:	6965      	ldr	r5, [r4, #20]
 800d384:	432b      	orrs	r3, r5
 800d386:	6a25      	ldr	r5, [r4, #32]
 800d388:	432b      	orrs	r3, r5
 800d38a:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 800d38c:	432b      	orrs	r3, r5
 800d38e:	68a5      	ldr	r5, [r4, #8]
 800d390:	432b      	orrs	r3, r5
 800d392:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800d394:	432b      	orrs	r3, r5
 800d396:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 800d398:	432b      	orrs	r3, r5
 800d39a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d39c:	b959      	cbnz	r1, 800d3b6 <HAL_SPI_Init+0x102>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d39e:	6893      	ldr	r3, [r2, #8]
 800d3a0:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800d3a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d3a8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d3aa:	6893      	ldr	r3, [r2, #8]
 800d3ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d3b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d3b4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d3b6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d3b8:	f023 0301 	bic.w	r3, r3, #1
 800d3bc:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d3be:	b128      	cbz	r0, 800d3cc <HAL_SPI_Init+0x118>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d3c0:	68d3      	ldr	r3, [r2, #12]
 800d3c2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d3c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d3c8:	430b      	orrs	r3, r1
 800d3ca:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d3cc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800d3ce:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d3d0:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d3d4:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  return HAL_OK;
 800d3d8:	e770      	b.n	800d2bc <HAL_SPI_Init+0x8>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d3da:	2b10      	cmp	r3, #16
 800d3dc:	e792      	b.n	800d304 <HAL_SPI_Init+0x50>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	d1b1      	bne.n	800d346 <HAL_SPI_Init+0x92>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d3e2:	f1b6 5f80 	cmp.w	r6, #268435456	@ 0x10000000
 800d3e6:	d1ae      	bne.n	800d346 <HAL_SPI_Init+0x92>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d3e8:	6810      	ldr	r0, [r2, #0]
 800d3ea:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800d3ee:	6010      	str	r0, [r2, #0]
 800d3f0:	e7a9      	b.n	800d346 <HAL_SPI_Init+0x92>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d3f2:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800d3f6:	e7b2      	b.n	800d35e <HAL_SPI_Init+0xaa>
 800d3f8:	40013000 	.word	0x40013000

0800d3fc <HAL_SPI_Transmit>:
{
 800d3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d400:	4604      	mov	r4, r0
 800d402:	461d      	mov	r5, r3
 800d404:	4689      	mov	r9, r1
 800d406:	4690      	mov	r8, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d408:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 800d40a:	f7fb f9cb 	bl	80087a4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d40e:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 800d412:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d414:	2b01      	cmp	r3, #1
 800d416:	b2d8      	uxtb	r0, r3
 800d418:	f040 8108 	bne.w	800d62c <HAL_SPI_Transmit+0x230>
  if ((pData == NULL) || (Size == 0UL))
 800d41c:	f1b9 0f00 	cmp.w	r9, #0
 800d420:	f000 80a3 	beq.w	800d56a <HAL_SPI_Transmit+0x16e>
 800d424:	f1b8 0f00 	cmp.w	r8, #0
 800d428:	f000 809f 	beq.w	800d56a <HAL_SPI_Transmit+0x16e>
  __HAL_LOCK(hspi);
 800d42c:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800d430:	2b01      	cmp	r3, #1
 800d432:	f000 80fb 	beq.w	800d62c <HAL_SPI_Transmit+0x230>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d436:	2303      	movs	r3, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d438:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hspi);
 800d43a:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d43e:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d442:	f5b2 2fc0 	cmp.w	r2, #393216	@ 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d446:	f04f 0300 	mov.w	r3, #0
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d44a:	f8c4 905c 	str.w	r9, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d44e:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d452:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->pRxBuffPtr  = NULL;
 800d456:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800d458:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d45c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d460:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800d464:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
    SPI_1LINE_TX(hspi);
 800d468:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d46a:	d139      	bne.n	800d4e0 <HAL_SPI_Transmit+0xe4>
    SPI_1LINE_TX(hspi);
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d472:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d474:	6859      	ldr	r1, [r3, #4]
 800d476:	0c09      	lsrs	r1, r1, #16
 800d478:	0409      	lsls	r1, r1, #16
 800d47a:	ea41 0108 	orr.w	r1, r1, r8
 800d47e:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	f042 0201 	orr.w	r2, r2, #1
 800d486:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d488:	6862      	ldr	r2, [r4, #4]
 800d48a:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800d48e:	d103      	bne.n	800d498 <HAL_SPI_Transmit+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d496:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d498:	68e3      	ldr	r3, [r4, #12]
 800d49a:	2b0f      	cmp	r3, #15
 800d49c:	d835      	bhi.n	800d50a <HAL_SPI_Transmit+0x10e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d49e:	2b07      	cmp	r3, #7
 800d4a0:	d87a      	bhi.n	800d598 <HAL_SPI_Transmit+0x19c>
    while (hspi->TxXferCount > 0UL)
 800d4a2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d4a6:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d033      	beq.n	800d516 <HAL_SPI_Transmit+0x11a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d4ae:	694b      	ldr	r3, [r1, #20]
 800d4b0:	0798      	lsls	r0, r3, #30
 800d4b2:	f140 80a1 	bpl.w	800d5f8 <HAL_SPI_Transmit+0x1fc>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d4b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d4ba:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	f240 8081 	bls.w	800d5c6 <HAL_SPI_Transmit+0x1ca>
 800d4c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d4c6:	2b40      	cmp	r3, #64	@ 0x40
 800d4c8:	d97d      	bls.n	800d5c6 <HAL_SPI_Transmit+0x1ca>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d4ca:	f852 3b04 	ldr.w	r3, [r2], #4
 800d4ce:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 800d4d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d4d4:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d4d6:	3b04      	subs	r3, #4
          hspi->TxXferCount -= (uint16_t)2UL;
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 800d4de:	e7e0      	b.n	800d4a2 <HAL_SPI_Transmit+0xa6>
    SPI_2LINES_TX(hspi);
 800d4e0:	68da      	ldr	r2, [r3, #12]
 800d4e2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800d4e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d4ea:	60da      	str	r2, [r3, #12]
 800d4ec:	e7c2      	b.n	800d474 <HAL_SPI_Transmit+0x78>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d4ee:	6953      	ldr	r3, [r2, #20]
 800d4f0:	0798      	lsls	r0, r3, #30
 800d4f2:	d523      	bpl.n	800d53c <HAL_SPI_Transmit+0x140>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d4f4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800d4f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4fa:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d4fc:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d4fe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800d502:	3b01      	subs	r3, #1
 800d504:	b29b      	uxth	r3, r3
 800d506:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800d50a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d50e:	6822      	ldr	r2, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800d510:	b29b      	uxth	r3, r3
 800d512:	2b00      	cmp	r3, #0
 800d514:	d1eb      	bne.n	800d4ee <HAL_SPI_Transmit+0xf2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d516:	6823      	ldr	r3, [r4, #0]
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	071b      	lsls	r3, r3, #28
 800d51c:	d576      	bpl.n	800d60c <HAL_SPI_Transmit+0x210>
  SPI_CloseTransfer(hspi);
 800d51e:	4620      	mov	r0, r4
 800d520:	f7ff fe71 	bl	800d206 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800d524:	2301      	movs	r3, #1
 800d526:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_UNLOCK(hspi);
 800d52a:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d52c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 800d530:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d534:	1ac0      	subs	r0, r0, r3
 800d536:	bf18      	it	ne
 800d538:	2001      	movne	r0, #1
 800d53a:	e016      	b.n	800d56a <HAL_SPI_Transmit+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d53c:	f7fb f932 	bl	80087a4 <HAL_GetTick>
 800d540:	1b80      	subs	r0, r0, r6
 800d542:	42a8      	cmp	r0, r5
 800d544:	d3e1      	bcc.n	800d50a <HAL_SPI_Transmit+0x10e>
 800d546:	1c69      	adds	r1, r5, #1
 800d548:	d0df      	beq.n	800d50a <HAL_SPI_Transmit+0x10e>
          SPI_CloseTransfer(hspi);
 800d54a:	4620      	mov	r0, r4
 800d54c:	f7ff fe5b 	bl	800d206 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d550:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 800d554:	2003      	movs	r0, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d55a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d55e:	2301      	movs	r3, #1
 800d560:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
          __HAL_UNLOCK(hspi);
 800d564:	2300      	movs	r3, #0
 800d566:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 800d56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d56e:	694b      	ldr	r3, [r1, #20]
 800d570:	079a      	lsls	r2, r3, #30
 800d572:	d520      	bpl.n	800d5b6 <HAL_SPI_Transmit+0x1ba>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d574:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d578:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d57a:	b292      	uxth	r2, r2
 800d57c:	2a01      	cmp	r2, #1
 800d57e:	d912      	bls.n	800d5a6 <HAL_SPI_Transmit+0x1aa>
 800d580:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800d582:	b182      	cbz	r2, 800d5a6 <HAL_SPI_Transmit+0x1aa>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d584:	f853 2b04 	ldr.w	r2, [r3], #4
 800d588:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d58a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d58c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800d590:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800d592:	b29b      	uxth	r3, r3
 800d594:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800d598:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d59c:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1e4      	bne.n	800d56e <HAL_SPI_Transmit+0x172>
 800d5a4:	e7b7      	b.n	800d516 <HAL_SPI_Transmit+0x11a>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d5a6:	f833 2b02 	ldrh.w	r2, [r3], #2
 800d5aa:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5ac:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d5ae:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800d5b2:	3b01      	subs	r3, #1
 800d5b4:	e7ed      	b.n	800d592 <HAL_SPI_Transmit+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5b6:	f7fb f8f5 	bl	80087a4 <HAL_GetTick>
 800d5ba:	1b80      	subs	r0, r0, r6
 800d5bc:	42a8      	cmp	r0, r5
 800d5be:	d3eb      	bcc.n	800d598 <HAL_SPI_Transmit+0x19c>
 800d5c0:	1c6b      	adds	r3, r5, #1
 800d5c2:	d0e9      	beq.n	800d598 <HAL_SPI_Transmit+0x19c>
 800d5c4:	e7c1      	b.n	800d54a <HAL_SPI_Transmit+0x14e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d5c6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d909      	bls.n	800d5e4 <HAL_SPI_Transmit+0x1e8>
 800d5d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d5d2:	b13b      	cbz	r3, 800d5e4 <HAL_SPI_Transmit+0x1e8>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d5d4:	f832 3b02 	ldrh.w	r3, [r2], #2
 800d5d8:	843b      	strh	r3, [r7, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 800d5da:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5de:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d5e0:	3b02      	subs	r3, #2
 800d5e2:	e779      	b.n	800d4d8 <HAL_SPI_Transmit+0xdc>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d5e4:	7813      	ldrb	r3, [r2, #0]
 800d5e6:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d5ea:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d5f0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	e76f      	b.n	800d4d8 <HAL_SPI_Transmit+0xdc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5f8:	f7fb f8d4 	bl	80087a4 <HAL_GetTick>
 800d5fc:	1b80      	subs	r0, r0, r6
 800d5fe:	42a8      	cmp	r0, r5
 800d600:	f4ff af4f 	bcc.w	800d4a2 <HAL_SPI_Transmit+0xa6>
 800d604:	1c69      	adds	r1, r5, #1
 800d606:	f43f af4c 	beq.w	800d4a2 <HAL_SPI_Transmit+0xa6>
 800d60a:	e79e      	b.n	800d54a <HAL_SPI_Transmit+0x14e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d60c:	f7fb f8ca 	bl	80087a4 <HAL_GetTick>
 800d610:	1b80      	subs	r0, r0, r6
 800d612:	4285      	cmp	r5, r0
 800d614:	f63f af7f 	bhi.w	800d516 <HAL_SPI_Transmit+0x11a>
 800d618:	1c6a      	adds	r2, r5, #1
 800d61a:	f43f af7c 	beq.w	800d516 <HAL_SPI_Transmit+0x11a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d61e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d622:	f043 0320 	orr.w	r3, r3, #32
 800d626:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 800d62a:	e778      	b.n	800d51e <HAL_SPI_Transmit+0x122>
    return HAL_BUSY;
 800d62c:	2002      	movs	r0, #2
 800d62e:	e79c      	b.n	800d56a <HAL_SPI_Transmit+0x16e>

0800d630 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d630:	4770      	bx	lr
	...

0800d634 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d634:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d12f      	bne.n	800d69c <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d63c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d63e:	4a18      	ldr	r2, [pc, #96]	@ (800d6a0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d640:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d644:	6803      	ldr	r3, [r0, #0]
 800d646:	4293      	cmp	r3, r2
 800d648:	d01a      	beq.n	800d680 <HAL_TIM_Base_Start+0x4c>
 800d64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d64e:	d017      	beq.n	800d680 <HAL_TIM_Base_Start+0x4c>
 800d650:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800d654:	4293      	cmp	r3, r2
 800d656:	d013      	beq.n	800d680 <HAL_TIM_Base_Start+0x4c>
 800d658:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d00f      	beq.n	800d680 <HAL_TIM_Base_Start+0x4c>
 800d660:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d664:	4293      	cmp	r3, r2
 800d666:	d00b      	beq.n	800d680 <HAL_TIM_Base_Start+0x4c>
 800d668:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d007      	beq.n	800d680 <HAL_TIM_Base_Start+0x4c>
 800d670:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800d674:	4293      	cmp	r3, r2
 800d676:	d003      	beq.n	800d680 <HAL_TIM_Base_Start+0x4c>
 800d678:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d107      	bne.n	800d690 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d680:	6899      	ldr	r1, [r3, #8]
 800d682:	4a08      	ldr	r2, [pc, #32]	@ (800d6a4 <HAL_TIM_Base_Start+0x70>)
 800d684:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d686:	2a06      	cmp	r2, #6
 800d688:	d006      	beq.n	800d698 <HAL_TIM_Base_Start+0x64>
 800d68a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800d68e:	d003      	beq.n	800d698 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	f042 0201 	orr.w	r2, r2, #1
 800d696:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800d698:	2000      	movs	r0, #0
 800d69a:	4770      	bx	lr
    return HAL_ERROR;
 800d69c:	2001      	movs	r0, #1
}
 800d69e:	4770      	bx	lr
 800d6a0:	40010000 	.word	0x40010000
 800d6a4:	00010007 	.word	0x00010007

0800d6a8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d6a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d133      	bne.n	800d718 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6b0:	2302      	movs	r3, #2
 800d6b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6b6:	6803      	ldr	r3, [r0, #0]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	f042 0201 	orr.w	r2, r2, #1
 800d6be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6c0:	4a16      	ldr	r2, [pc, #88]	@ (800d71c <HAL_TIM_Base_Start_IT+0x74>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d01a      	beq.n	800d6fc <HAL_TIM_Base_Start_IT+0x54>
 800d6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6ca:	d017      	beq.n	800d6fc <HAL_TIM_Base_Start_IT+0x54>
 800d6cc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d013      	beq.n	800d6fc <HAL_TIM_Base_Start_IT+0x54>
 800d6d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d00f      	beq.n	800d6fc <HAL_TIM_Base_Start_IT+0x54>
 800d6dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d00b      	beq.n	800d6fc <HAL_TIM_Base_Start_IT+0x54>
 800d6e4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d007      	beq.n	800d6fc <HAL_TIM_Base_Start_IT+0x54>
 800d6ec:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d003      	beq.n	800d6fc <HAL_TIM_Base_Start_IT+0x54>
 800d6f4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d107      	bne.n	800d70c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6fc:	6899      	ldr	r1, [r3, #8]
 800d6fe:	4a08      	ldr	r2, [pc, #32]	@ (800d720 <HAL_TIM_Base_Start_IT+0x78>)
 800d700:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d702:	2a06      	cmp	r2, #6
 800d704:	d006      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x6c>
 800d706:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800d70a:	d003      	beq.n	800d714 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	f042 0201 	orr.w	r2, r2, #1
 800d712:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800d714:	2000      	movs	r0, #0
 800d716:	4770      	bx	lr
    return HAL_ERROR;
 800d718:	2001      	movs	r0, #1
}
 800d71a:	4770      	bx	lr
 800d71c:	40010000 	.word	0x40010000
 800d720:	00010007 	.word	0x00010007

0800d724 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800d724:	4770      	bx	lr

0800d726 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800d726:	4770      	bx	lr

0800d728 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800d728:	4770      	bx	lr

0800d72a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800d72a:	4770      	bx	lr

0800d72c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800d72c:	6803      	ldr	r3, [r0, #0]
{
 800d72e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800d730:	68dd      	ldr	r5, [r3, #12]
{
 800d732:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800d734:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d736:	07b2      	lsls	r2, r6, #30
 800d738:	d50d      	bpl.n	800d756 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d73a:	07a9      	lsls	r1, r5, #30
 800d73c:	d50b      	bpl.n	800d756 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d73e:	f06f 0202 	mvn.w	r2, #2
 800d742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d744:	2201      	movs	r2, #1
 800d746:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d748:	699b      	ldr	r3, [r3, #24]
 800d74a:	079a      	lsls	r2, r3, #30
 800d74c:	d075      	beq.n	800d83a <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800d74e:	f7ff ffea 	bl	800d726 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d752:	2300      	movs	r3, #0
 800d754:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d756:	0773      	lsls	r3, r6, #29
 800d758:	d510      	bpl.n	800d77c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d75a:	0768      	lsls	r0, r5, #29
 800d75c:	d50e      	bpl.n	800d77c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800d764:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d768:	2202      	movs	r2, #2
 800d76a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d76c:	699b      	ldr	r3, [r3, #24]
 800d76e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800d772:	d068      	beq.n	800d846 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800d774:	f7ff ffd7 	bl	800d726 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d778:	2300      	movs	r3, #0
 800d77a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d77c:	0731      	lsls	r1, r6, #28
 800d77e:	d50f      	bpl.n	800d7a0 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d780:	072a      	lsls	r2, r5, #28
 800d782:	d50d      	bpl.n	800d7a0 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800d78a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d78c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d78e:	2204      	movs	r2, #4
 800d790:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d792:	69db      	ldr	r3, [r3, #28]
 800d794:	079b      	lsls	r3, r3, #30
 800d796:	d05c      	beq.n	800d852 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800d798:	f7ff ffc5 	bl	800d726 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d79c:	2300      	movs	r3, #0
 800d79e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d7a0:	06f1      	lsls	r1, r6, #27
 800d7a2:	d510      	bpl.n	800d7c6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d7a4:	06ea      	lsls	r2, r5, #27
 800d7a6:	d50e      	bpl.n	800d7c6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800d7ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d7b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7b2:	2208      	movs	r2, #8
 800d7b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7b6:	69db      	ldr	r3, [r3, #28]
 800d7b8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800d7bc:	d04f      	beq.n	800d85e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800d7be:	f7ff ffb2 	bl	800d726 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d7c6:	07f3      	lsls	r3, r6, #31
 800d7c8:	d508      	bpl.n	800d7dc <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d7ca:	07e8      	lsls	r0, r5, #31
 800d7cc:	d506      	bpl.n	800d7dc <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d7d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d7d8:	f7f3 fcdc 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d7dc:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800d7e0:	d008      	beq.n	800d7f4 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7e2:	0629      	lsls	r1, r5, #24
 800d7e4:	d506      	bpl.n	800d7f4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800d7ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d7ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d7f0:	f000 f8d7 	bl	800d9a2 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d7f4:	05f2      	lsls	r2, r6, #23
 800d7f6:	d508      	bpl.n	800d80a <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d7f8:	062b      	lsls	r3, r5, #24
 800d7fa:	d506      	bpl.n	800d80a <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800d802:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d804:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d806:	f000 f8cd 	bl	800d9a4 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d80a:	0670      	lsls	r0, r6, #25
 800d80c:	d508      	bpl.n	800d820 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d80e:	0669      	lsls	r1, r5, #25
 800d810:	d506      	bpl.n	800d820 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800d818:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d81a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d81c:	f7ff ff85 	bl	800d72a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d820:	06b2      	lsls	r2, r6, #26
 800d822:	d522      	bpl.n	800d86a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d824:	06ab      	lsls	r3, r5, #26
 800d826:	d520      	bpl.n	800d86a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d82e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d830:	611a      	str	r2, [r3, #16]
}
 800d832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d836:	f000 b8b3 	b.w	800d9a0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d83a:	f7ff ff73 	bl	800d724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d83e:	4620      	mov	r0, r4
 800d840:	f7ff ff72 	bl	800d728 <HAL_TIM_PWM_PulseFinishedCallback>
 800d844:	e785      	b.n	800d752 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d846:	f7ff ff6d 	bl	800d724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7ff ff6c 	bl	800d728 <HAL_TIM_PWM_PulseFinishedCallback>
 800d850:	e792      	b.n	800d778 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d852:	f7ff ff67 	bl	800d724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d856:	4620      	mov	r0, r4
 800d858:	f7ff ff66 	bl	800d728 <HAL_TIM_PWM_PulseFinishedCallback>
 800d85c:	e79e      	b.n	800d79c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d85e:	f7ff ff61 	bl	800d724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d862:	4620      	mov	r0, r4
 800d864:	f7ff ff60 	bl	800d728 <HAL_TIM_PWM_PulseFinishedCallback>
 800d868:	e7ab      	b.n	800d7c2 <HAL_TIM_IRQHandler+0x96>
}
 800d86a:	bd70      	pop	{r4, r5, r6, pc}

0800d86c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d86c:	4a32      	ldr	r2, [pc, #200]	@ (800d938 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800d86e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d870:	4290      	cmp	r0, r2
 800d872:	d012      	beq.n	800d89a <TIM_Base_SetConfig+0x2e>
 800d874:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800d878:	d00f      	beq.n	800d89a <TIM_Base_SetConfig+0x2e>
 800d87a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800d87e:	4290      	cmp	r0, r2
 800d880:	d00b      	beq.n	800d89a <TIM_Base_SetConfig+0x2e>
 800d882:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d886:	4290      	cmp	r0, r2
 800d888:	d007      	beq.n	800d89a <TIM_Base_SetConfig+0x2e>
 800d88a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d88e:	4290      	cmp	r0, r2
 800d890:	d003      	beq.n	800d89a <TIM_Base_SetConfig+0x2e>
 800d892:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800d896:	4290      	cmp	r0, r2
 800d898:	d119      	bne.n	800d8ce <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800d89a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d89c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800d8a0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d8a2:	4a25      	ldr	r2, [pc, #148]	@ (800d938 <TIM_Base_SetConfig+0xcc>)
 800d8a4:	4290      	cmp	r0, r2
 800d8a6:	d01d      	beq.n	800d8e4 <TIM_Base_SetConfig+0x78>
 800d8a8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800d8ac:	d01a      	beq.n	800d8e4 <TIM_Base_SetConfig+0x78>
 800d8ae:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800d8b2:	4290      	cmp	r0, r2
 800d8b4:	d016      	beq.n	800d8e4 <TIM_Base_SetConfig+0x78>
 800d8b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8ba:	4290      	cmp	r0, r2
 800d8bc:	d012      	beq.n	800d8e4 <TIM_Base_SetConfig+0x78>
 800d8be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8c2:	4290      	cmp	r0, r2
 800d8c4:	d00e      	beq.n	800d8e4 <TIM_Base_SetConfig+0x78>
 800d8c6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800d8ca:	4290      	cmp	r0, r2
 800d8cc:	d00a      	beq.n	800d8e4 <TIM_Base_SetConfig+0x78>
 800d8ce:	4a1b      	ldr	r2, [pc, #108]	@ (800d93c <TIM_Base_SetConfig+0xd0>)
 800d8d0:	4290      	cmp	r0, r2
 800d8d2:	d007      	beq.n	800d8e4 <TIM_Base_SetConfig+0x78>
 800d8d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8d8:	4290      	cmp	r0, r2
 800d8da:	d003      	beq.n	800d8e4 <TIM_Base_SetConfig+0x78>
 800d8dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8e0:	4290      	cmp	r0, r2
 800d8e2:	d103      	bne.n	800d8ec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d8e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d8e8:	68ca      	ldr	r2, [r1, #12]
 800d8ea:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d8ec:	694a      	ldr	r2, [r1, #20]
 800d8ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8f2:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8f4:	688a      	ldr	r2, [r1, #8]
 800d8f6:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8f8:	680a      	ldr	r2, [r1, #0]
 800d8fa:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8fc:	4a0e      	ldr	r2, [pc, #56]	@ (800d938 <TIM_Base_SetConfig+0xcc>)
 800d8fe:	4290      	cmp	r0, r2
 800d900:	d00f      	beq.n	800d922 <TIM_Base_SetConfig+0xb6>
 800d902:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d906:	4290      	cmp	r0, r2
 800d908:	d00b      	beq.n	800d922 <TIM_Base_SetConfig+0xb6>
 800d90a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800d90e:	4290      	cmp	r0, r2
 800d910:	d007      	beq.n	800d922 <TIM_Base_SetConfig+0xb6>
 800d912:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d916:	4290      	cmp	r0, r2
 800d918:	d003      	beq.n	800d922 <TIM_Base_SetConfig+0xb6>
 800d91a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d91e:	4290      	cmp	r0, r2
 800d920:	d101      	bne.n	800d926 <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d922:	690a      	ldr	r2, [r1, #16]
 800d924:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d926:	6802      	ldr	r2, [r0, #0]
 800d928:	f042 0204 	orr.w	r2, r2, #4
 800d92c:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d92e:	2201      	movs	r2, #1
 800d930:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800d932:	6003      	str	r3, [r0, #0]
}
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	40010000 	.word	0x40010000
 800d93c:	40014000 	.word	0x40014000

0800d940 <HAL_TIM_Base_Init>:
{
 800d940:	b510      	push	{r4, lr}
  if (htim == NULL)
 800d942:	4604      	mov	r4, r0
 800d944:	b350      	cbz	r0, 800d99c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d946:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800d94a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800d94e:	b91b      	cbnz	r3, 800d958 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800d950:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800d954:	f7ff fe6c 	bl	800d630 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800d958:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d95a:	6820      	ldr	r0, [r4, #0]
 800d95c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800d95e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d962:	f7ff ff83 	bl	800d86c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d966:	2301      	movs	r3, #1
  return HAL_OK;
 800d968:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d96a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d96e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800d972:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800d976:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800d97a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800d97e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d986:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d98a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d98e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800d992:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800d996:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800d99a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d99c:	2001      	movs	r0, #1
 800d99e:	e7fc      	b.n	800d99a <HAL_TIM_Base_Init+0x5a>

0800d9a0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800d9a0:	4770      	bx	lr

0800d9a2 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800d9a2:	4770      	bx	lr

0800d9a4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800d9a4:	4770      	bx	lr

0800d9a6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800d9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d9aa:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800d9ae:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800d9b2:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800d9b6:	ea43 0308 	orr.w	r3, r3, r8
 800d9ba:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800d9be:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d9c2:	6809      	ldr	r1, [r1, #0]
 800d9c4:	b991      	cbnz	r1, 800d9ec <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d9c6:	ea43 030e 	orr.w	r3, r3, lr
 800d9ca:	6801      	ldr	r1, [r0, #0]
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800d9d2:	ea43 030c 	orr.w	r3, r3, ip
 800d9d6:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800d9da:	433b      	orrs	r3, r7
 800d9dc:	4333      	orrs	r3, r6
 800d9de:	432b      	orrs	r3, r5
 800d9e0:	4323      	orrs	r3, r4
 800d9e2:	430b      	orrs	r3, r1
 800d9e4:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d9ec:	6801      	ldr	r1, [r0, #0]
 800d9ee:	ea43 030e 	orr.w	r3, r3, lr
 800d9f2:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800d9f6:	430b      	orrs	r3, r1
 800d9f8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d9fa:	ea42 030c 	orr.w	r3, r2, ip
 800d9fe:	6841      	ldr	r1, [r0, #4]
 800da00:	433b      	orrs	r3, r7
 800da02:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800da06:	4333      	orrs	r3, r6
 800da08:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800da0c:	432b      	orrs	r3, r5
 800da0e:	4323      	orrs	r3, r4
 800da10:	4313      	orrs	r3, r2
 800da12:	6043      	str	r3, [r0, #4]
 800da14:	e7e7      	b.n	800d9e6 <FMC_SDRAM_Init+0x40>

0800da16 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da16:	68cb      	ldr	r3, [r1, #12]
 800da18:	f103 3cff 	add.w	ip, r3, #4294967295
 800da1c:	694b      	ldr	r3, [r1, #20]
{
 800da1e:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da20:	3b01      	subs	r3, #1
 800da22:	680f      	ldr	r7, [r1, #0]
 800da24:	684c      	ldr	r4, [r1, #4]
 800da26:	688e      	ldr	r6, [r1, #8]
 800da28:	051b      	lsls	r3, r3, #20
 800da2a:	690d      	ldr	r5, [r1, #16]
 800da2c:	3c01      	subs	r4, #1
 800da2e:	6989      	ldr	r1, [r1, #24]
 800da30:	3e01      	subs	r6, #1
 800da32:	3d01      	subs	r5, #1
 800da34:	3f01      	subs	r7, #1
 800da36:	3901      	subs	r1, #1
 800da38:	0124      	lsls	r4, r4, #4
 800da3a:	0236      	lsls	r6, r6, #8
 800da3c:	042d      	lsls	r5, r5, #16
 800da3e:	0609      	lsls	r1, r1, #24
 800da40:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800da44:	b95a      	cbnz	r2, 800da5e <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da46:	433b      	orrs	r3, r7
 800da48:	6882      	ldr	r2, [r0, #8]
 800da4a:	4323      	orrs	r3, r4
 800da4c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800da50:	4333      	orrs	r3, r6
 800da52:	432b      	orrs	r3, r5
 800da54:	430b      	orrs	r3, r1
 800da56:	4313      	orrs	r3, r2
 800da58:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800da5a:	2000      	movs	r0, #0
 800da5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da5e:	6882      	ldr	r2, [r0, #8]
 800da60:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800da64:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800da68:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800da6a:	ea44 0306 	orr.w	r3, r4, r6
 800da6e:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800da70:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800da72:	68c2      	ldr	r2, [r0, #12]
 800da74:	432b      	orrs	r3, r5
 800da76:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800da7a:	430b      	orrs	r3, r1
 800da7c:	4313      	orrs	r3, r2
 800da7e:	60c3      	str	r3, [r0, #12]
 800da80:	e7eb      	b.n	800da5a <FMC_SDRAM_Timing_Init+0x44>

0800da82 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800da82:	4603      	mov	r3, r0
 800da84:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800da88:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800da8c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800da90:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800da92:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800da96:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800da98:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800da9a:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800da9c:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800da9e:	4770      	bx	lr

0800daa0 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800daa0:	6902      	ldr	r2, [r0, #16]
{
 800daa2:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800daa4:	e9d1 3400 	ldrd	r3, r4, [r1]
 800daa8:	0d92      	lsrs	r2, r2, #22
 800daaa:	4323      	orrs	r3, r4
 800daac:	68cc      	ldr	r4, [r1, #12]
 800daae:	0592      	lsls	r2, r2, #22
 800dab0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800dab4:	4313      	orrs	r3, r2
 800dab6:	688a      	ldr	r2, [r1, #8]
 800dab8:	3a01      	subs	r2, #1
 800daba:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800dabe:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800dac0:	2000      	movs	r0, #0
 800dac2:	bd10      	pop	{r4, pc}

0800dac4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800dac4:	6943      	ldr	r3, [r0, #20]
 800dac6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800daca:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800dace:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800dad2:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800dad4:	2000      	movs	r0, #0
 800dad6:	4770      	bx	lr

0800dad8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dad8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800dada:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dade:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dae0:	f001 fee2 	bl	800f8a8 <xTaskGetSchedulerState>
 800dae4:	2801      	cmp	r0, #1
 800dae6:	d003      	beq.n	800daf0 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800dae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800daec:	f000 bc4a 	b.w	800e384 <xPortSysTickHandler>
}
 800daf0:	bd08      	pop	{r3, pc}
	...

0800daf4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daf4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800daf8:	b92b      	cbnz	r3, 800db06 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800dafa:	4b06      	ldr	r3, [pc, #24]	@ (800db14 <osKernelInitialize+0x20>)
 800dafc:	6818      	ldr	r0, [r3, #0]
 800dafe:	b928      	cbnz	r0, 800db0c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800db00:	2201      	movs	r2, #1
 800db02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800db04:	4770      	bx	lr
    stat = osErrorISR;
 800db06:	f06f 0005 	mvn.w	r0, #5
 800db0a:	4770      	bx	lr
    } else {
      stat = osError;
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	2400d6dc 	.word	0x2400d6dc

0800db18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800db18:	b510      	push	{r4, lr}
 800db1a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800db1e:	b95c      	cbnz	r4, 800db38 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800db20:	4b08      	ldr	r3, [pc, #32]	@ (800db44 <osKernelStart+0x2c>)
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	2a01      	cmp	r2, #1
 800db26:	d10a      	bne.n	800db3e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db28:	4a07      	ldr	r2, [pc, #28]	@ (800db48 <osKernelStart+0x30>)
 800db2a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800db2c:	2202      	movs	r2, #2
 800db2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800db30:	f001 fd5a 	bl	800f5e8 <vTaskStartScheduler>
      stat = osOK;
 800db34:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800db36:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800db38:	f06f 0005 	mvn.w	r0, #5
 800db3c:	e7fb      	b.n	800db36 <osKernelStart+0x1e>
      stat = osError;
 800db3e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800db42:	e7f8      	b.n	800db36 <osKernelStart+0x1e>
 800db44:	2400d6dc 	.word	0x2400d6dc
 800db48:	e000ed00 	.word	0xe000ed00

0800db4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800db4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db4e:	4614      	mov	r4, r2
 800db50:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800db52:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800db54:	460b      	mov	r3, r1
  hTask = NULL;
 800db56:	9205      	str	r2, [sp, #20]
 800db58:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800db5c:	b9ca      	cbnz	r2, 800db92 <osThreadNew+0x46>
 800db5e:	b1c0      	cbz	r0, 800db92 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800db60:	b36c      	cbz	r4, 800dbbe <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800db62:	69a5      	ldr	r5, [r4, #24]
 800db64:	2d00      	cmp	r5, #0
 800db66:	bf08      	it	eq
 800db68:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db6a:	1e69      	subs	r1, r5, #1
 800db6c:	46ac      	mov	ip, r5
 800db6e:	2937      	cmp	r1, #55	@ 0x37
 800db70:	d82a      	bhi.n	800dbc8 <osThreadNew+0x7c>
 800db72:	6861      	ldr	r1, [r4, #4]
 800db74:	07c9      	lsls	r1, r1, #31
 800db76:	d427      	bmi.n	800dbc8 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800db78:	6966      	ldr	r6, [r4, #20]
 800db7a:	b16e      	cbz	r6, 800db98 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db7c:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800db7e:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db80:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800db84:	b157      	cbz	r7, 800db9c <osThreadNew+0x50>
 800db86:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800db8a:	d902      	bls.n	800db92 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db8c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db8e:	b104      	cbz	r4, 800db92 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db90:	b9e6      	cbnz	r6, 800dbcc <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800db92:	9805      	ldr	r0, [sp, #20]
}
 800db94:	b007      	add	sp, #28
 800db96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800db98:	2280      	movs	r2, #128	@ 0x80
 800db9a:	e7f0      	b.n	800db7e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db9c:	f1be 0f00 	cmp.w	lr, #0
 800dba0:	d1f7      	bne.n	800db92 <osThreadNew+0x46>
      if (mem == 0) {
 800dba2:	6924      	ldr	r4, [r4, #16]
 800dba4:	2c00      	cmp	r4, #0
 800dba6:	d1f4      	bne.n	800db92 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dba8:	ac05      	add	r4, sp, #20
 800dbaa:	b292      	uxth	r2, r2
 800dbac:	e9cd c400 	strd	ip, r4, [sp]
 800dbb0:	f001 fbb7 	bl	800f322 <xTaskCreate>
 800dbb4:	2801      	cmp	r0, #1
            hTask = NULL;
 800dbb6:	bf1c      	itt	ne
 800dbb8:	2300      	movne	r3, #0
 800dbba:	9305      	strne	r3, [sp, #20]
 800dbbc:	e7e9      	b.n	800db92 <osThreadNew+0x46>
    name = NULL;
 800dbbe:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800dbc0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800dbc4:	2280      	movs	r2, #128	@ 0x80
 800dbc6:	e7ef      	b.n	800dba8 <osThreadNew+0x5c>
        return (NULL);
 800dbc8:	4610      	mov	r0, r2
 800dbca:	e7e3      	b.n	800db94 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbcc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800dbd0:	9500      	str	r5, [sp, #0]
 800dbd2:	f001 fb6e 	bl	800f2b2 <xTaskCreateStatic>
 800dbd6:	9005      	str	r0, [sp, #20]
 800dbd8:	e7db      	b.n	800db92 <osThreadNew+0x46>

0800dbda <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dbda:	b570      	push	{r4, r5, r6, lr}
 800dbdc:	4605      	mov	r5, r0
 800dbde:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800dbe2:	b116      	cbz	r6, 800dbea <osMutexNew+0x10>
  hMutex = NULL;
 800dbe4:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800dbea:	b110      	cbz	r0, 800dbf2 <osMutexNew+0x18>
      type = attr->attr_bits;
 800dbec:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800dbee:	0733      	lsls	r3, r6, #28
 800dbf0:	d4f8      	bmi.n	800dbe4 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dbf2:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800dbf6:	b17d      	cbz	r5, 800dc18 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dbf8:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800dbfc:	b151      	cbz	r1, 800dc14 <osMutexNew+0x3a>
 800dbfe:	2b4f      	cmp	r3, #79	@ 0x4f
 800dc00:	d9f0      	bls.n	800dbe4 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800dc02:	b1de      	cbz	r6, 800dc3c <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dc04:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dc06:	f000 fec6 	bl	800e996 <xQueueCreateMutexStatic>
 800dc0a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d0e9      	beq.n	800dbe4 <osMutexNew+0xa>
          name = attr->name;
 800dc10:	682d      	ldr	r5, [r5, #0]
 800dc12:	e00a      	b.n	800dc2a <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d1e5      	bne.n	800dbe4 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800dc18:	b196      	cbz	r6, 800dc40 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800dc1a:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800dc1c:	f000 feef 	bl	800e9fe <xQueueCreateMutex>
 800dc20:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d0de      	beq.n	800dbe4 <osMutexNew+0xa>
        if (attr != NULL) {
 800dc26:	2d00      	cmp	r5, #0
 800dc28:	d1f2      	bne.n	800dc10 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f001 f97b 	bl	800ef28 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dc32:	2e00      	cmp	r6, #0
 800dc34:	d0d7      	beq.n	800dbe6 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dc36:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800dc3a:	e7d4      	b.n	800dbe6 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	e7e2      	b.n	800dc06 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800dc40:	2001      	movs	r0, #1
 800dc42:	e7eb      	b.n	800dc1c <osMutexNew+0x42>

0800dc44 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4603      	mov	r3, r0
 800dc48:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dc4a:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800dc4e:	f003 0201 	and.w	r2, r3, #1
 800dc52:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800dc56:	b995      	cbnz	r5, 800dc7e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d913      	bls.n	800dc84 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800dc5c:	b162      	cbz	r2, 800dc78 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800dc5e:	f001 f8f4 	bl	800ee4a <xQueueTakeMutexRecursive>
 800dc62:	2801      	cmp	r0, #1
 800dc64:	d101      	bne.n	800dc6a <osMutexAcquire+0x26>
  stat = osOK;
 800dc66:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800dc68:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800dc6a:	2c00      	cmp	r4, #0
 800dc6c:	bf14      	ite	ne
 800dc6e:	f06f 0001 	mvnne.w	r0, #1
 800dc72:	f06f 0002 	mvneq.w	r0, #2
 800dc76:	e7f7      	b.n	800dc68 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800dc78:	f001 f82a 	bl	800ecd0 <xQueueSemaphoreTake>
 800dc7c:	e7f1      	b.n	800dc62 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800dc7e:	f06f 0005 	mvn.w	r0, #5
 800dc82:	e7f1      	b.n	800dc68 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800dc84:	f06f 0003 	mvn.w	r0, #3
 800dc88:	e7ee      	b.n	800dc68 <osMutexAcquire+0x24>

0800dc8a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800dc8a:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dc8c:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800dc90:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800dc92:	f002 0301 	and.w	r3, r2, #1
 800dc96:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800dc9a:	b979      	cbnz	r1, 800dcbc <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800dc9c:	2a01      	cmp	r2, #1
 800dc9e:	d910      	bls.n	800dcc2 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800dca0:	b13b      	cbz	r3, 800dcb2 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800dca2:	f000 fe8d 	bl	800e9c0 <xQueueGiveMutexRecursive>
 800dca6:	2801      	cmp	r0, #1
  stat = osOK;
 800dca8:	bf0c      	ite	eq
 800dcaa:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800dcac:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800dcb0:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	f000 fdbc 	bl	800e832 <xQueueGenericSend>
 800dcba:	e7f4      	b.n	800dca6 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800dcbc:	f06f 0005 	mvn.w	r0, #5
 800dcc0:	e7f6      	b.n	800dcb0 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800dcc2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800dcc6:	e7f3      	b.n	800dcb0 <osMutexRelease+0x26>

0800dcc8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dcc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcca:	4604      	mov	r4, r0
 800dccc:	460e      	mov	r6, r1
 800dcce:	4615      	mov	r5, r2
 800dcd0:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dcd4:	b942      	cbnz	r2, 800dce8 <osSemaphoreNew+0x20>
 800dcd6:	b138      	cbz	r0, 800dce8 <osSemaphoreNew+0x20>
 800dcd8:	4288      	cmp	r0, r1
 800dcda:	d305      	bcc.n	800dce8 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800dcdc:	b155      	cbz	r5, 800dcf4 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dcde:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800dce2:	b12b      	cbz	r3, 800dcf0 <osSemaphoreNew+0x28>
 800dce4:	2f4f      	cmp	r7, #79	@ 0x4f
 800dce6:	d822      	bhi.n	800dd2e <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800dce8:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800dcea:	4620      	mov	r0, r4
 800dcec:	b003      	add	sp, #12
 800dcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dcf0:	2f00      	cmp	r7, #0
 800dcf2:	d1f9      	bne.n	800dce8 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800dcf4:	2c01      	cmp	r4, #1
 800dcf6:	d00c      	beq.n	800dd12 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	f000 fd7b 	bl	800e7f6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800dd00:	4604      	mov	r4, r0
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0f0      	beq.n	800dce8 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800dd06:	b985      	cbnz	r5, 800dd2a <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f001 f90c 	bl	800ef28 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800dd10:	e7eb      	b.n	800dcea <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800dd12:	2203      	movs	r2, #3
 800dd14:	2100      	movs	r1, #0
 800dd16:	2001      	movs	r0, #1
 800dd18:	f000 fd24 	bl	800e764 <xQueueGenericCreate>
 800dd1c:	e00e      	b.n	800dd3c <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dd1e:	461a      	mov	r2, r3
 800dd20:	f000 fd47 	bl	800e7b2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800dd24:	4604      	mov	r4, r0
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d0de      	beq.n	800dce8 <osSemaphoreNew+0x20>
          name = attr->name;
 800dd2a:	682d      	ldr	r5, [r5, #0]
 800dd2c:	e7ec      	b.n	800dd08 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800dd2e:	2801      	cmp	r0, #1
 800dd30:	d1f5      	bne.n	800dd1e <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dd32:	2103      	movs	r1, #3
 800dd34:	9100      	str	r1, [sp, #0]
 800dd36:	4611      	mov	r1, r2
 800dd38:	f000 fcc6 	bl	800e6c8 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800dd3c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d0d2      	beq.n	800dce8 <osSemaphoreNew+0x20>
 800dd42:	2e00      	cmp	r6, #0
 800dd44:	d0df      	beq.n	800dd06 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dd46:	2300      	movs	r3, #0
 800dd48:	461a      	mov	r2, r3
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	f000 fd71 	bl	800e832 <xQueueGenericSend>
 800dd50:	2801      	cmp	r0, #1
 800dd52:	d0d8      	beq.n	800dd06 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800dd54:	4620      	mov	r0, r4
 800dd56:	f001 f911 	bl	800ef7c <vQueueDelete>
      if (hSemaphore != NULL) {
 800dd5a:	e7c5      	b.n	800dce8 <osSemaphoreNew+0x20>

0800dd5c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dd5c:	b513      	push	{r0, r1, r4, lr}
 800dd5e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800dd60:	b328      	cbz	r0, 800ddae <osSemaphoreAcquire+0x52>
 800dd62:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800dd66:	b1cb      	cbz	r3, 800dd9c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800dd68:	bb09      	cbnz	r1, 800ddae <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dd6a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800dd6c:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dd6e:	f001 f88d 	bl	800ee8c <xQueueReceiveFromISR>
 800dd72:	2801      	cmp	r0, #1
 800dd74:	d003      	beq.n	800dd7e <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800dd76:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800dd7a:	b002      	add	sp, #8
 800dd7c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800dd7e:	9b01      	ldr	r3, [sp, #4]
 800dd80:	b90b      	cbnz	r3, 800dd86 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800dd82:	2000      	movs	r0, #0
 800dd84:	e7f9      	b.n	800dd7a <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800dd86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dd8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	e7f2      	b.n	800dd82 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800dd9c:	f000 ff98 	bl	800ecd0 <xQueueSemaphoreTake>
 800dda0:	2801      	cmp	r0, #1
 800dda2:	d0ee      	beq.n	800dd82 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800dda4:	2c00      	cmp	r4, #0
 800dda6:	d0e6      	beq.n	800dd76 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800dda8:	f06f 0001 	mvn.w	r0, #1
 800ddac:	e7e5      	b.n	800dd7a <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800ddae:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ddb2:	e7e2      	b.n	800dd7a <osSemaphoreAcquire+0x1e>

0800ddb4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ddb4:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ddb6:	b318      	cbz	r0, 800de00 <osSemaphoreRelease+0x4c>
 800ddb8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ddbc:	b1cb      	cbz	r3, 800ddf2 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800ddbe:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ddc0:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800ddc2:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ddc4:	f000 fe95 	bl	800eaf2 <xQueueGiveFromISR>
 800ddc8:	2801      	cmp	r0, #1
 800ddca:	d004      	beq.n	800ddd6 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800ddcc:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800ddd0:	b003      	add	sp, #12
 800ddd2:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800ddd6:	9b01      	ldr	r3, [sp, #4]
 800ddd8:	b14b      	cbz	r3, 800ddee <osSemaphoreRelease+0x3a>
 800ddda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ddde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dde2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800ddee:	2000      	movs	r0, #0
 800ddf0:	e7ee      	b.n	800ddd0 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	f000 fd1c 	bl	800e832 <xQueueGenericSend>
 800ddfa:	2801      	cmp	r0, #1
 800ddfc:	d0f7      	beq.n	800ddee <osSemaphoreRelease+0x3a>
 800ddfe:	e7e5      	b.n	800ddcc <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800de00:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800de04:	e7e4      	b.n	800ddd0 <osSemaphoreRelease+0x1c>

0800de06 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800de06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de08:	4605      	mov	r5, r0
 800de0a:	460e      	mov	r6, r1
 800de0c:	4614      	mov	r4, r2
 800de0e:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800de12:	b11f      	cbz	r7, 800de1c <osMessageQueueNew+0x16>
  hQueue = NULL;
 800de14:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800de16:	4628      	mov	r0, r5
 800de18:	b003      	add	sp, #12
 800de1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d0f9      	beq.n	800de14 <osMessageQueueNew+0xe>
 800de20:	2900      	cmp	r1, #0
 800de22:	d0f7      	beq.n	800de14 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800de24:	b1da      	cbz	r2, 800de5e <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de26:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800de2a:	b183      	cbz	r3, 800de4e <osMessageQueueNew+0x48>
 800de2c:	2a4f      	cmp	r2, #79	@ 0x4f
 800de2e:	d9f1      	bls.n	800de14 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de30:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800de32:	2a00      	cmp	r2, #0
 800de34:	d0ee      	beq.n	800de14 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800de36:	434d      	muls	r5, r1
 800de38:	6966      	ldr	r6, [r4, #20]
 800de3a:	42ae      	cmp	r6, r5
 800de3c:	d3ea      	bcc.n	800de14 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800de3e:	9700      	str	r7, [sp, #0]
 800de40:	f000 fc42 	bl	800e6c8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800de44:	4605      	mov	r5, r0
 800de46:	2800      	cmp	r0, #0
 800de48:	d0e4      	beq.n	800de14 <osMessageQueueNew+0xe>
        name = attr->name;
 800de4a:	6824      	ldr	r4, [r4, #0]
 800de4c:	e011      	b.n	800de72 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800de4e:	2a00      	cmp	r2, #0
 800de50:	d1e0      	bne.n	800de14 <osMessageQueueNew+0xe>
 800de52:	6923      	ldr	r3, [r4, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1dd      	bne.n	800de14 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800de58:	6963      	ldr	r3, [r4, #20]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1da      	bne.n	800de14 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800de5e:	4628      	mov	r0, r5
 800de60:	2200      	movs	r2, #0
 800de62:	4631      	mov	r1, r6
 800de64:	f000 fc7e 	bl	800e764 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800de68:	4605      	mov	r5, r0
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d0d2      	beq.n	800de14 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800de6e:	2c00      	cmp	r4, #0
 800de70:	d1eb      	bne.n	800de4a <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800de72:	4621      	mov	r1, r4
 800de74:	4628      	mov	r0, r5
 800de76:	f001 f857 	bl	800ef28 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800de7a:	e7cc      	b.n	800de16 <osMessageQueueNew+0x10>

0800de7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800de7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de7e:	461c      	mov	r4, r3
 800de80:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800de84:	b1de      	cbz	r6, 800debe <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de86:	b338      	cbz	r0, 800ded8 <osMessageQueuePut+0x5c>
 800de88:	b331      	cbz	r1, 800ded8 <osMessageQueuePut+0x5c>
 800de8a:	bb2b      	cbnz	r3, 800ded8 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800de8c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800de8e:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800de90:	f000 fdd2 	bl	800ea38 <xQueueGenericSendFromISR>
 800de94:	2801      	cmp	r0, #1
 800de96:	d003      	beq.n	800dea0 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800de98:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800de9c:	b002      	add	sp, #8
 800de9e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800dea0:	9b01      	ldr	r3, [sp, #4]
 800dea2:	b90b      	cbnz	r3, 800dea8 <osMessageQueuePut+0x2c>
  stat = osOK;
 800dea4:	2000      	movs	r0, #0
 800dea6:	e7f9      	b.n	800de9c <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800dea8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800deac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	e7f2      	b.n	800dea4 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800debe:	b158      	cbz	r0, 800ded8 <osMessageQueuePut+0x5c>
 800dec0:	b151      	cbz	r1, 800ded8 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dec2:	4633      	mov	r3, r6
 800dec4:	4622      	mov	r2, r4
 800dec6:	f000 fcb4 	bl	800e832 <xQueueGenericSend>
 800deca:	2801      	cmp	r0, #1
 800decc:	d0ea      	beq.n	800dea4 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800dece:	2c00      	cmp	r4, #0
 800ded0:	d0e2      	beq.n	800de98 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800ded2:	f06f 0001 	mvn.w	r0, #1
 800ded6:	e7e1      	b.n	800de9c <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800ded8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800dedc:	e7de      	b.n	800de9c <osMessageQueuePut+0x20>

0800dede <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dede:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dee0:	461c      	mov	r4, r3
 800dee2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800dee6:	b1db      	cbz	r3, 800df20 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dee8:	b330      	cbz	r0, 800df38 <osMessageQueueGet+0x5a>
 800deea:	b329      	cbz	r1, 800df38 <osMessageQueueGet+0x5a>
 800deec:	bb24      	cbnz	r4, 800df38 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800deee:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800def0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800def2:	f000 ffcb 	bl	800ee8c <xQueueReceiveFromISR>
 800def6:	2801      	cmp	r0, #1
 800def8:	d003      	beq.n	800df02 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800defa:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800defe:	b003      	add	sp, #12
 800df00:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800df02:	9b01      	ldr	r3, [sp, #4]
 800df04:	b90b      	cbnz	r3, 800df0a <osMessageQueueGet+0x2c>
  stat = osOK;
 800df06:	2000      	movs	r0, #0
 800df08:	e7f9      	b.n	800defe <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800df0a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df12:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	e7f2      	b.n	800df06 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800df20:	b150      	cbz	r0, 800df38 <osMessageQueueGet+0x5a>
 800df22:	b149      	cbz	r1, 800df38 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800df24:	4622      	mov	r2, r4
 800df26:	f000 fe35 	bl	800eb94 <xQueueReceive>
 800df2a:	2801      	cmp	r0, #1
 800df2c:	d0eb      	beq.n	800df06 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800df2e:	2c00      	cmp	r4, #0
 800df30:	d0e3      	beq.n	800defa <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800df32:	f06f 0001 	mvn.w	r0, #1
 800df36:	e7e2      	b.n	800defe <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800df38:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800df3c:	e7df      	b.n	800defe <osMessageQueueGet+0x20>
	...

0800df40 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800df40:	4b03      	ldr	r3, [pc, #12]	@ (800df50 <vApplicationGetIdleTaskMemory+0x10>)
 800df42:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800df44:	4b03      	ldr	r3, [pc, #12]	@ (800df54 <vApplicationGetIdleTaskMemory+0x14>)
 800df46:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800df48:	2380      	movs	r3, #128	@ 0x80
 800df4a:	6013      	str	r3, [r2, #0]
}
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	2400d67c 	.word	0x2400d67c
 800df54:	2400d47c 	.word	0x2400d47c

0800df58 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800df58:	4b03      	ldr	r3, [pc, #12]	@ (800df68 <vApplicationGetTimerTaskMemory+0x10>)
 800df5a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800df5c:	4b03      	ldr	r3, [pc, #12]	@ (800df6c <vApplicationGetTimerTaskMemory+0x14>)
 800df5e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800df60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df64:	6013      	str	r3, [r2, #0]
}
 800df66:	4770      	bx	lr
 800df68:	2400d41c 	.word	0x2400d41c
 800df6c:	2400d01c 	.word	0x2400d01c

0800df70 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df70:	4b10      	ldr	r3, [pc, #64]	@ (800dfb4 <prvInsertBlockIntoFreeList+0x44>)
{
 800df72:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df74:	461a      	mov	r2, r3
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4283      	cmp	r3, r0
 800df7a:	d3fb      	bcc.n	800df74 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df7c:	6854      	ldr	r4, [r2, #4]
 800df7e:	1911      	adds	r1, r2, r4
 800df80:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df82:	bf01      	itttt	eq
 800df84:	6841      	ldreq	r1, [r0, #4]
 800df86:	4610      	moveq	r0, r2
 800df88:	1909      	addeq	r1, r1, r4
 800df8a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df8c:	6844      	ldr	r4, [r0, #4]
 800df8e:	1901      	adds	r1, r0, r4
 800df90:	428b      	cmp	r3, r1
 800df92:	d10c      	bne.n	800dfae <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df94:	4908      	ldr	r1, [pc, #32]	@ (800dfb8 <prvInsertBlockIntoFreeList+0x48>)
 800df96:	6809      	ldr	r1, [r1, #0]
 800df98:	428b      	cmp	r3, r1
 800df9a:	d003      	beq.n	800dfa4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df9c:	6859      	ldr	r1, [r3, #4]
 800df9e:	4421      	add	r1, r4
 800dfa0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dfa2:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dfa4:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dfa6:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dfa8:	bf18      	it	ne
 800dfaa:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfac:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dfae:	4619      	mov	r1, r3
 800dfb0:	e7f8      	b.n	800dfa4 <prvInsertBlockIntoFreeList+0x34>
 800dfb2:	bf00      	nop
 800dfb4:	2400d6f8 	.word	0x2400d6f8
 800dfb8:	2400d6f4 	.word	0x2400d6f4

0800dfbc <pvPortMalloc>:
{
 800dfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800dfc2:	f001 f9dd 	bl	800f380 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800dfc6:	4940      	ldr	r1, [pc, #256]	@ (800e0c8 <pvPortMalloc+0x10c>)
 800dfc8:	4d40      	ldr	r5, [pc, #256]	@ (800e0cc <pvPortMalloc+0x110>)
 800dfca:	680b      	ldr	r3, [r1, #0]
 800dfcc:	b9f3      	cbnz	r3, 800e00c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800dfce:	4a40      	ldr	r2, [pc, #256]	@ (800e0d0 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800dfd0:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfd2:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfd4:	4e3f      	ldr	r6, [pc, #252]	@ (800e0d4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfd6:	bf1b      	ittet	ne
 800dfd8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfda:	4b3f      	ldrne	r3, [pc, #252]	@ (800e0d8 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfdc:	4b3f      	ldreq	r3, [pc, #252]	@ (800e0dc <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfde:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800dfe2:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfe4:	bf18      	it	ne
 800dfe6:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfe8:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dfea:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800dfec:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfee:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800dff2:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dff6:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800dff8:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dffa:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dffe:	4b38      	ldr	r3, [pc, #224]	@ (800e0e0 <pvPortMalloc+0x124>)
 800e000:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e002:	4b38      	ldr	r3, [pc, #224]	@ (800e0e4 <pvPortMalloc+0x128>)
 800e004:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e006:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e00a:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e00c:	682e      	ldr	r6, [r5, #0]
 800e00e:	4226      	tst	r6, r4
 800e010:	d155      	bne.n	800e0be <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800e012:	2c00      	cmp	r4, #0
 800e014:	d046      	beq.n	800e0a4 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800e016:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e01a:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e01c:	bf1c      	itt	ne
 800e01e:	f023 0307 	bicne.w	r3, r3, #7
 800e022:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e024:	2b00      	cmp	r3, #0
 800e026:	d04a      	beq.n	800e0be <pvPortMalloc+0x102>
 800e028:	4f2e      	ldr	r7, [pc, #184]	@ (800e0e4 <pvPortMalloc+0x128>)
 800e02a:	683c      	ldr	r4, [r7, #0]
 800e02c:	429c      	cmp	r4, r3
 800e02e:	d346      	bcc.n	800e0be <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800e030:	4a28      	ldr	r2, [pc, #160]	@ (800e0d4 <pvPortMalloc+0x118>)
 800e032:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e034:	6868      	ldr	r0, [r5, #4]
 800e036:	4298      	cmp	r0, r3
 800e038:	d204      	bcs.n	800e044 <pvPortMalloc+0x88>
 800e03a:	f8d5 c000 	ldr.w	ip, [r5]
 800e03e:	f1bc 0f00 	cmp.w	ip, #0
 800e042:	d115      	bne.n	800e070 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800e044:	6809      	ldr	r1, [r1, #0]
 800e046:	42a9      	cmp	r1, r5
 800e048:	d039      	beq.n	800e0be <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e04a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e04c:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e050:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e052:	1ac2      	subs	r2, r0, r3
 800e054:	2a10      	cmp	r2, #16
 800e056:	d912      	bls.n	800e07e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e058:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e05a:	0741      	lsls	r1, r0, #29
 800e05c:	d00b      	beq.n	800e076 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	e7fe      	b.n	800e06e <pvPortMalloc+0xb2>
 800e070:	462a      	mov	r2, r5
 800e072:	4665      	mov	r5, ip
 800e074:	e7de      	b.n	800e034 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e076:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e078:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e07a:	f7ff ff79 	bl	800df70 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e07e:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e080:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e082:	4917      	ldr	r1, [pc, #92]	@ (800e0e0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e084:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e086:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e088:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800e08a:	4a17      	ldr	r2, [pc, #92]	@ (800e0e8 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e08c:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800e08e:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800e090:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e092:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800e094:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e098:	bf38      	it	cc
 800e09a:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e09c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0a0:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800e0a2:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800e0a4:	f001 fa10 	bl	800f4c8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0a8:	0763      	lsls	r3, r4, #29
 800e0aa:	d00a      	beq.n	800e0c2 <pvPortMalloc+0x106>
 800e0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	e7fe      	b.n	800e0bc <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800e0be:	2400      	movs	r4, #0
 800e0c0:	e7f0      	b.n	800e0a4 <pvPortMalloc+0xe8>
}
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c8:	2400d6f4 	.word	0x2400d6f4
 800e0cc:	2400d6e0 	.word	0x2400d6e0
 800e0d0:	2400d700 	.word	0x2400d700
 800e0d4:	2400d6f8 	.word	0x2400d6f8
 800e0d8:	24025da0 	.word	0x24025da0
 800e0dc:	000186a0 	.word	0x000186a0
 800e0e0:	2400d6ec 	.word	0x2400d6ec
 800e0e4:	2400d6f0 	.word	0x2400d6f0
 800e0e8:	2400d6e8 	.word	0x2400d6e8

0800e0ec <vPortFree>:
{
 800e0ec:	b510      	push	{r4, lr}
	if( pv != NULL )
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	b390      	cbz	r0, 800e158 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0f2:	4a1a      	ldr	r2, [pc, #104]	@ (800e15c <vPortFree+0x70>)
 800e0f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e0f8:	6812      	ldr	r2, [r2, #0]
 800e0fa:	4213      	tst	r3, r2
 800e0fc:	d108      	bne.n	800e110 <vPortFree+0x24>
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	e7fe      	b.n	800e10e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e110:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e114:	b141      	cbz	r1, 800e128 <vPortFree+0x3c>
 800e116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	e7fe      	b.n	800e126 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e128:	ea23 0302 	bic.w	r3, r3, r2
 800e12c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e130:	f001 f926 	bl	800f380 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e134:	4a0a      	ldr	r2, [pc, #40]	@ (800e160 <vPortFree+0x74>)
 800e136:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e13a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e13e:	6811      	ldr	r1, [r2, #0]
 800e140:	440b      	add	r3, r1
 800e142:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e144:	f7ff ff14 	bl	800df70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e148:	4a06      	ldr	r2, [pc, #24]	@ (800e164 <vPortFree+0x78>)
 800e14a:	6813      	ldr	r3, [r2, #0]
 800e14c:	3301      	adds	r3, #1
}
 800e14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800e152:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e154:	f001 b9b8 	b.w	800f4c8 <xTaskResumeAll>
}
 800e158:	bd10      	pop	{r4, pc}
 800e15a:	bf00      	nop
 800e15c:	2400d6e0 	.word	0x2400d6e0
 800e160:	2400d6f0 	.word	0x2400d6f0
 800e164:	2400d6e4 	.word	0x2400d6e4

0800e168 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e168:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e16c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e170:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e172:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e174:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e17c:	4770      	bx	lr

0800e17e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e17e:	2300      	movs	r3, #0
 800e180:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e182:	4770      	bx	lr

0800e184 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e184:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e186:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e188:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e18a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e18c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e18e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e190:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e192:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e194:	3301      	adds	r3, #1
 800e196:	6003      	str	r3, [r0, #0]
}
 800e198:	4770      	bx	lr

0800e19a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e19a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e19c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e19e:	1c63      	adds	r3, r4, #1
 800e1a0:	d10a      	bne.n	800e1b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e1a2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1a8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1aa:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1ac:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e1ae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e1b0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	6003      	str	r3, [r0, #0]
}
 800e1b6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e1b8:	f100 0208 	add.w	r2, r0, #8
 800e1bc:	4613      	mov	r3, r2
 800e1be:	6852      	ldr	r2, [r2, #4]
 800e1c0:	6815      	ldr	r5, [r2, #0]
 800e1c2:	42a5      	cmp	r5, r4
 800e1c4:	d9fa      	bls.n	800e1bc <vListInsert+0x22>
 800e1c6:	e7ed      	b.n	800e1a4 <vListInsert+0xa>

0800e1c8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1ca:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800e1ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1d0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e1d2:	6859      	ldr	r1, [r3, #4]
 800e1d4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e1d6:	bf08      	it	eq
 800e1d8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e1da:	2200      	movs	r2, #0
 800e1dc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	3a01      	subs	r2, #1
 800e1e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e1e4:	6818      	ldr	r0, [r3, #0]
}
 800e1e6:	4770      	bx	lr

0800e1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1e8:	4808      	ldr	r0, [pc, #32]	@ (800e20c <prvPortStartFirstTask+0x24>)
 800e1ea:	6800      	ldr	r0, [r0, #0]
 800e1ec:	6800      	ldr	r0, [r0, #0]
 800e1ee:	f380 8808 	msr	MSP, r0
 800e1f2:	f04f 0000 	mov.w	r0, #0
 800e1f6:	f380 8814 	msr	CONTROL, r0
 800e1fa:	b662      	cpsie	i
 800e1fc:	b661      	cpsie	f
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	df00      	svc	0
 800e208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e20a:	0000      	.short	0x0000
 800e20c:	e000ed08 	.word	0xe000ed08

0800e210 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e210:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e220 <vPortEnableVFP+0x10>
 800e214:	6801      	ldr	r1, [r0, #0]
 800e216:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e21a:	6001      	str	r1, [r0, #0]
 800e21c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e21e:	0000      	.short	0x0000
 800e220:	e000ed88 	.word	0xe000ed88

0800e224 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800e224:	2300      	movs	r3, #0
{
 800e226:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e228:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800e22a:	4b0d      	ldr	r3, [pc, #52]	@ (800e260 <prvTaskExitError+0x3c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	3301      	adds	r3, #1
 800e230:	d008      	beq.n	800e244 <prvTaskExitError+0x20>
 800e232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	e7fe      	b.n	800e242 <prvTaskExitError+0x1e>
 800e244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e248:	f383 8811 	msr	BASEPRI, r3
 800e24c:	f3bf 8f6f 	isb	sy
 800e250:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800e254:	9b01      	ldr	r3, [sp, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0fc      	beq.n	800e254 <prvTaskExitError+0x30>
}
 800e25a:	b002      	add	sp, #8
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	24000078 	.word	0x24000078

0800e264 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e264:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e268:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e26c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800e270:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e272:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e274:	4b03      	ldr	r3, [pc, #12]	@ (800e284 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e276:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e278:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e27a:	f06f 0302 	mvn.w	r3, #2
 800e27e:	6203      	str	r3, [r0, #32]
}
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	0800e225 	.word	0x0800e225
	...

0800e290 <SVC_Handler>:
	__asm volatile (
 800e290:	4b07      	ldr	r3, [pc, #28]	@ (800e2b0 <pxCurrentTCBConst2>)
 800e292:	6819      	ldr	r1, [r3, #0]
 800e294:	6808      	ldr	r0, [r1, #0]
 800e296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29a:	f380 8809 	msr	PSP, r0
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f04f 0000 	mov.w	r0, #0
 800e2a6:	f380 8811 	msr	BASEPRI, r0
 800e2aa:	4770      	bx	lr
 800e2ac:	f3af 8000 	nop.w

0800e2b0 <pxCurrentTCBConst2>:
 800e2b0:	240262e0 	.word	0x240262e0

0800e2b4 <vPortEnterCritical>:
 800e2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e2c4:	4a0a      	ldr	r2, [pc, #40]	@ (800e2f0 <vPortEnterCritical+0x3c>)
 800e2c6:	6813      	ldr	r3, [r2, #0]
 800e2c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800e2ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800e2cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e2ce:	d10e      	bne.n	800e2ee <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e2d4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	b143      	cbz	r3, 800e2ee <vPortEnterCritical+0x3a>
 800e2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e0:	f383 8811 	msr	BASEPRI, r3
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	e7fe      	b.n	800e2ec <vPortEnterCritical+0x38>
}
 800e2ee:	4770      	bx	lr
 800e2f0:	24000078 	.word	0x24000078

0800e2f4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e2f4:	4a08      	ldr	r2, [pc, #32]	@ (800e318 <vPortExitCritical+0x24>)
 800e2f6:	6813      	ldr	r3, [r2, #0]
 800e2f8:	b943      	cbnz	r3, 800e30c <vPortExitCritical+0x18>
 800e2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	e7fe      	b.n	800e30a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e30c:	3b01      	subs	r3, #1
 800e30e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e310:	b90b      	cbnz	r3, 800e316 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e312:	f383 8811 	msr	BASEPRI, r3
}
 800e316:	4770      	bx	lr
 800e318:	24000078 	.word	0x24000078
 800e31c:	00000000 	.word	0x00000000

0800e320 <PendSV_Handler>:
	__asm volatile
 800e320:	f3ef 8009 	mrs	r0, PSP
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	4b15      	ldr	r3, [pc, #84]	@ (800e380 <pxCurrentTCBConst>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	f01e 0f10 	tst.w	lr, #16
 800e330:	bf08      	it	eq
 800e332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33a:	6010      	str	r0, [r2, #0]
 800e33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e344:	f380 8811 	msr	BASEPRI, r0
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	f3bf 8f6f 	isb	sy
 800e350:	f001 f998 	bl	800f684 <vTaskSwitchContext>
 800e354:	f04f 0000 	mov.w	r0, #0
 800e358:	f380 8811 	msr	BASEPRI, r0
 800e35c:	bc09      	pop	{r0, r3}
 800e35e:	6819      	ldr	r1, [r3, #0]
 800e360:	6808      	ldr	r0, [r1, #0]
 800e362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e366:	f01e 0f10 	tst.w	lr, #16
 800e36a:	bf08      	it	eq
 800e36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e370:	f380 8809 	msr	PSP, r0
 800e374:	f3bf 8f6f 	isb	sy
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	f3af 8000 	nop.w

0800e380 <pxCurrentTCBConst>:
 800e380:	240262e0 	.word	0x240262e0

0800e384 <xPortSysTickHandler>:
{
 800e384:	b508      	push	{r3, lr}
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e396:	f001 f801 	bl	800f39c <xTaskIncrementTick>
 800e39a:	b128      	cbz	r0, 800e3a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e39c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e3a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f383 8811 	msr	BASEPRI, r3
}
 800e3ae:	bd08      	pop	{r3, pc}

0800e3b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800e3b4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3ba:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e3bc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3be:	4b04      	ldr	r3, [pc, #16]	@ (800e3d0 <vPortSetupTimerInterrupt+0x20>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3ca:	2307      	movs	r3, #7
 800e3cc:	6113      	str	r3, [r2, #16]
}
 800e3ce:	4770      	bx	lr
 800e3d0:	2400006c 	.word	0x2400006c

0800e3d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e3d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800e3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e3da:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800e3de:	4a38      	ldr	r2, [pc, #224]	@ (800e4c0 <xPortStartScheduler+0xec>)
 800e3e0:	4291      	cmp	r1, r2
 800e3e2:	d108      	bne.n	800e3f6 <xPortStartScheduler+0x22>
	__asm volatile
 800e3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e8:	f383 8811 	msr	BASEPRI, r3
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	e7fe      	b.n	800e3f4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e3f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e3fa:	4b32      	ldr	r3, [pc, #200]	@ (800e4c4 <xPortStartScheduler+0xf0>)
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d108      	bne.n	800e412 <xPortStartScheduler+0x3e>
 800e400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	e7fe      	b.n	800e410 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e412:	4b2d      	ldr	r3, [pc, #180]	@ (800e4c8 <xPortStartScheduler+0xf4>)
 800e414:	781a      	ldrb	r2, [r3, #0]
 800e416:	b2d2      	uxtb	r2, r2
 800e418:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e41a:	22ff      	movs	r2, #255	@ 0xff
 800e41c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e41e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e420:	4a2a      	ldr	r2, [pc, #168]	@ (800e4cc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e422:	b2db      	uxtb	r3, r3
 800e424:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e428:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e42c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e430:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e432:	2307      	movs	r3, #7
 800e434:	4a26      	ldr	r2, [pc, #152]	@ (800e4d0 <xPortStartScheduler+0xfc>)
 800e436:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e438:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800e43c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e43e:	0609      	lsls	r1, r1, #24
 800e440:	d40a      	bmi.n	800e458 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e442:	2b03      	cmp	r3, #3
 800e444:	d011      	beq.n	800e46a <xPortStartScheduler+0x96>
 800e446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	e7fe      	b.n	800e456 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800e458:	3b01      	subs	r3, #1
 800e45a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e45c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	b2db      	uxtb	r3, r3
 800e464:	f88d 3003 	strb.w	r3, [sp, #3]
 800e468:	e7e6      	b.n	800e438 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e46a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e46e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800e472:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e474:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e476:	9b01      	ldr	r3, [sp, #4]
 800e478:	4a13      	ldr	r2, [pc, #76]	@ (800e4c8 <xPortStartScheduler+0xf4>)
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e47e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e486:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e48a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e48e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e492:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800e496:	f7ff ff8b 	bl	800e3b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e49a:	4b0e      	ldr	r3, [pc, #56]	@ (800e4d4 <xPortStartScheduler+0x100>)
 800e49c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e49e:	f7ff feb7 	bl	800e210 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e4a2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e4a6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e4aa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e4ae:	f7ff fe9b 	bl	800e1e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e4b2:	f001 f8e7 	bl	800f684 <vTaskSwitchContext>
}
 800e4b6:	4628      	mov	r0, r5
	prvTaskExitError();
 800e4b8:	f7ff feb4 	bl	800e224 <prvTaskExitError>
}
 800e4bc:	b003      	add	sp, #12
 800e4be:	bd30      	pop	{r4, r5, pc}
 800e4c0:	410fc271 	.word	0x410fc271
 800e4c4:	410fc270 	.word	0x410fc270
 800e4c8:	e000e400 	.word	0xe000e400
 800e4cc:	24025da4 	.word	0x24025da4
 800e4d0:	24025da0 	.word	0x24025da0
 800e4d4:	24000078 	.word	0x24000078

0800e4d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e4dc:	2b0f      	cmp	r3, #15
 800e4de:	d90e      	bls.n	800e4fe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e4e0:	4a11      	ldr	r2, [pc, #68]	@ (800e528 <vPortValidateInterruptPriority+0x50>)
 800e4e2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e4e4:	4a11      	ldr	r2, [pc, #68]	@ (800e52c <vPortValidateInterruptPriority+0x54>)
 800e4e6:	7812      	ldrb	r2, [r2, #0]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d908      	bls.n	800e4fe <vPortValidateInterruptPriority+0x26>
 800e4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f0:	f383 8811 	msr	BASEPRI, r3
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	e7fe      	b.n	800e4fc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e4fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e502:	4a0b      	ldr	r2, [pc, #44]	@ (800e530 <vPortValidateInterruptPriority+0x58>)
 800e504:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800e508:	6812      	ldr	r2, [r2, #0]
 800e50a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e50e:	4293      	cmp	r3, r2
 800e510:	d908      	bls.n	800e524 <vPortValidateInterruptPriority+0x4c>
 800e512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	e7fe      	b.n	800e522 <vPortValidateInterruptPriority+0x4a>
	}
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	e000e3f0 	.word	0xe000e3f0
 800e52c:	24025da4 	.word	0x24025da4
 800e530:	24025da0 	.word	0x24025da0

0800e534 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e534:	b510      	push	{r4, lr}
 800e536:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e538:	f7ff febc 	bl	800e2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e53c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e53e:	f7ff fed9 	bl	800e2f4 <vPortExitCritical>

	return xReturn;
}
 800e542:	fab4 f084 	clz	r0, r4
 800e546:	0940      	lsrs	r0, r0, #5
 800e548:	bd10      	pop	{r4, pc}

0800e54a <prvCopyDataToQueue>:
{
 800e54a:	b570      	push	{r4, r5, r6, lr}
 800e54c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e54e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800e550:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e552:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e554:	b942      	cbnz	r2, 800e568 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e556:	6806      	ldr	r6, [r0, #0]
 800e558:	b99e      	cbnz	r6, 800e582 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e55a:	6880      	ldr	r0, [r0, #8]
 800e55c:	f001 f9f2 	bl	800f944 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e560:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e562:	3501      	adds	r5, #1
 800e564:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800e566:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800e568:	b96e      	cbnz	r6, 800e586 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e56a:	6840      	ldr	r0, [r0, #4]
 800e56c:	f016 ff49 	bl	8025402 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e570:	6863      	ldr	r3, [r4, #4]
 800e572:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800e574:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e576:	68a2      	ldr	r2, [r4, #8]
 800e578:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e57a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e57c:	bf24      	itt	cs
 800e57e:	6823      	ldrcs	r3, [r4, #0]
 800e580:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800e582:	2000      	movs	r0, #0
 800e584:	e7ed      	b.n	800e562 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e586:	68c0      	ldr	r0, [r0, #12]
 800e588:	f016 ff3b 	bl	8025402 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e58c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800e58e:	68e3      	ldr	r3, [r4, #12]
 800e590:	4251      	negs	r1, r2
 800e592:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e594:	6822      	ldr	r2, [r4, #0]
 800e596:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e598:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e59a:	bf3e      	ittt	cc
 800e59c:	68a3      	ldrcc	r3, [r4, #8]
 800e59e:	185b      	addcc	r3, r3, r1
 800e5a0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e5a2:	2e02      	cmp	r6, #2
 800e5a4:	d1ed      	bne.n	800e582 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5a6:	b10d      	cbz	r5, 800e5ac <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800e5a8:	3d01      	subs	r5, #1
 800e5aa:	e7ea      	b.n	800e582 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	e7d8      	b.n	800e562 <prvCopyDataToQueue+0x18>

0800e5b0 <prvCopyDataFromQueue>:
{
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800e5b6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5b8:	b162      	cbz	r2, 800e5d4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5ba:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5bc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5be:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5c0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5c2:	60dc      	str	r4, [r3, #12]
}
 800e5c4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e5c8:	bf24      	itt	cs
 800e5ca:	6819      	ldrcs	r1, [r3, #0]
 800e5cc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5ce:	68d9      	ldr	r1, [r3, #12]
 800e5d0:	f016 bf17 	b.w	8025402 <memcpy>
}
 800e5d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <prvUnlockQueue>:
{
 800e5da:	b570      	push	{r4, r5, r6, lr}
 800e5dc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e5de:	f7ff fe69 	bl	800e2b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800e5e2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5e6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800e5ea:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5ec:	2d00      	cmp	r5, #0
 800e5ee:	dc14      	bgt.n	800e61a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800e5f0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5f2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800e5f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800e5fa:	f7ff fe7b 	bl	800e2f4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e5fe:	f7ff fe59 	bl	800e2b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800e602:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800e606:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e608:	2d00      	cmp	r5, #0
 800e60a:	dc12      	bgt.n	800e632 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800e60c:	23ff      	movs	r3, #255	@ 0xff
 800e60e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800e612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800e616:	f7ff be6d 	b.w	800e2f4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e61a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d0e7      	beq.n	800e5f0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e620:	4630      	mov	r0, r6
 800e622:	f001 f8ab 	bl	800f77c <xTaskRemoveFromEventList>
 800e626:	b108      	cbz	r0, 800e62c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800e628:	f001 f932 	bl	800f890 <vTaskMissedYield>
			--cTxLock;
 800e62c:	3d01      	subs	r5, #1
 800e62e:	b26d      	sxtb	r5, r5
 800e630:	e7dc      	b.n	800e5ec <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e632:	6923      	ldr	r3, [r4, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d0e9      	beq.n	800e60c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e638:	4630      	mov	r0, r6
 800e63a:	f001 f89f 	bl	800f77c <xTaskRemoveFromEventList>
 800e63e:	b108      	cbz	r0, 800e644 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800e640:	f001 f926 	bl	800f890 <vTaskMissedYield>
				--cRxLock;
 800e644:	3d01      	subs	r5, #1
 800e646:	b26d      	sxtb	r5, r5
 800e648:	e7de      	b.n	800e608 <prvUnlockQueue+0x2e>

0800e64a <xQueueGenericReset>:
{
 800e64a:	b538      	push	{r3, r4, r5, lr}
 800e64c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e64e:	4604      	mov	r4, r0
 800e650:	b940      	cbnz	r0, 800e664 <xQueueGenericReset+0x1a>
 800e652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	e7fe      	b.n	800e662 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800e664:	f7ff fe26 	bl	800e2b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e668:	6822      	ldr	r2, [r4, #0]
 800e66a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e66e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e670:	434b      	muls	r3, r1
 800e672:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e674:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e676:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e678:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e67a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800e67c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e67e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e680:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800e682:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e686:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800e68a:	b9a5      	cbnz	r5, 800e6b6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e68c:	6923      	ldr	r3, [r4, #16]
 800e68e:	b173      	cbz	r3, 800e6ae <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e690:	f104 0010 	add.w	r0, r4, #16
 800e694:	f001 f872 	bl	800f77c <xTaskRemoveFromEventList>
 800e698:	b148      	cbz	r0, 800e6ae <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800e69a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e69e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800e6ae:	f7ff fe21 	bl	800e2f4 <vPortExitCritical>
}
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e6b6:	f104 0010 	add.w	r0, r4, #16
 800e6ba:	f7ff fd55 	bl	800e168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e6be:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e6c2:	f7ff fd51 	bl	800e168 <vListInitialise>
 800e6c6:	e7f2      	b.n	800e6ae <xQueueGenericReset+0x64>

0800e6c8 <xQueueGenericCreateStatic>:
	{
 800e6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e6ce:	b940      	cbnz	r0, 800e6e2 <xQueueGenericCreateStatic+0x1a>
 800e6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	e7fe      	b.n	800e6e0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800e6e2:	b943      	cbnz	r3, 800e6f6 <xQueueGenericCreateStatic+0x2e>
 800e6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	e7fe      	b.n	800e6f4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e6f6:	b14a      	cbz	r2, 800e70c <xQueueGenericCreateStatic+0x44>
 800e6f8:	b991      	cbnz	r1, 800e720 <xQueueGenericCreateStatic+0x58>
 800e6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fe:	f383 8811 	msr	BASEPRI, r3
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	f3bf 8f4f 	dsb	sy
 800e70a:	e7fe      	b.n	800e70a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e70c:	b141      	cbz	r1, 800e720 <xQueueGenericCreateStatic+0x58>
 800e70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	e7fe      	b.n	800e71e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e720:	2350      	movs	r3, #80	@ 0x50
 800e722:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e724:	9b01      	ldr	r3, [sp, #4]
 800e726:	2b50      	cmp	r3, #80	@ 0x50
 800e728:	d008      	beq.n	800e73c <xQueueGenericCreateStatic+0x74>
 800e72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	e7fe      	b.n	800e73a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e73c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e73e:	2d00      	cmp	r5, #0
 800e740:	bf08      	it	eq
 800e742:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e744:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e746:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e74a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800e74c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e750:	4620      	mov	r0, r4
 800e752:	f7ff ff7a 	bl	800e64a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800e756:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800e75a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800e75c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800e760:	b003      	add	sp, #12
 800e762:	bd30      	pop	{r4, r5, pc}

0800e764 <xQueueGenericCreate>:
	{
 800e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e766:	460d      	mov	r5, r1
 800e768:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e76a:	4606      	mov	r6, r0
 800e76c:	b940      	cbnz	r0, 800e780 <xQueueGenericCreate+0x1c>
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	e7fe      	b.n	800e77e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e780:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e782:	3050      	adds	r0, #80	@ 0x50
 800e784:	f7ff fc1a 	bl	800dfbc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800e788:	4604      	mov	r4, r0
 800e78a:	b170      	cbz	r0, 800e7aa <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e78c:	2300      	movs	r3, #0
 800e78e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e792:	b165      	cbz	r5, 800e7ae <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e794:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e798:	2101      	movs	r1, #1
 800e79a:	4620      	mov	r0, r4
 800e79c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800e79e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e7a2:	f7ff ff52 	bl	800e64a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800e7a6:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	e7f2      	b.n	800e798 <xQueueGenericCreate+0x34>

0800e7b2 <xQueueCreateCountingSemaphoreStatic>:
	{
 800e7b2:	b513      	push	{r0, r1, r4, lr}
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e7b8:	b940      	cbnz	r0, 800e7cc <xQueueCreateCountingSemaphoreStatic+0x1a>
 800e7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	e7fe      	b.n	800e7ca <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e7cc:	4288      	cmp	r0, r1
 800e7ce:	d208      	bcs.n	800e7e2 <xQueueCreateCountingSemaphoreStatic+0x30>
 800e7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	e7fe      	b.n	800e7e0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	9200      	str	r2, [sp, #0]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	f7ff ff6d 	bl	800e6c8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800e7ee:	b100      	cbz	r0, 800e7f2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e7f0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800e7f2:	b002      	add	sp, #8
 800e7f4:	bd10      	pop	{r4, pc}

0800e7f6 <xQueueCreateCountingSemaphore>:
	{
 800e7f6:	b510      	push	{r4, lr}
 800e7f8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e7fa:	b940      	cbnz	r0, 800e80e <xQueueCreateCountingSemaphore+0x18>
 800e7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e800:	f383 8811 	msr	BASEPRI, r3
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	e7fe      	b.n	800e80c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e80e:	4288      	cmp	r0, r1
 800e810:	d208      	bcs.n	800e824 <xQueueCreateCountingSemaphore+0x2e>
 800e812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	e7fe      	b.n	800e822 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e824:	2202      	movs	r2, #2
 800e826:	2100      	movs	r1, #0
 800e828:	f7ff ff9c 	bl	800e764 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e82c:	b100      	cbz	r0, 800e830 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e82e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800e830:	bd10      	pop	{r4, pc}

0800e832 <xQueueGenericSend>:
{
 800e832:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e836:	460f      	mov	r7, r1
 800e838:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800e83a:	4604      	mov	r4, r0
{
 800e83c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800e83e:	b940      	cbnz	r0, 800e852 <xQueueGenericSend+0x20>
 800e840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	e7fe      	b.n	800e850 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e852:	b951      	cbnz	r1, 800e86a <xQueueGenericSend+0x38>
 800e854:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e856:	b143      	cbz	r3, 800e86a <xQueueGenericSend+0x38>
 800e858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	e7fe      	b.n	800e868 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e86a:	2e02      	cmp	r6, #2
 800e86c:	d10b      	bne.n	800e886 <xQueueGenericSend+0x54>
 800e86e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e870:	2b01      	cmp	r3, #1
 800e872:	d008      	beq.n	800e886 <xQueueGenericSend+0x54>
 800e874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e878:	f383 8811 	msr	BASEPRI, r3
 800e87c:	f3bf 8f6f 	isb	sy
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	e7fe      	b.n	800e884 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e886:	f001 f80f 	bl	800f8a8 <xTaskGetSchedulerState>
 800e88a:	4605      	mov	r5, r0
 800e88c:	b330      	cbz	r0, 800e8dc <xQueueGenericSend+0xaa>
 800e88e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e890:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800e894:	f7ff fd0e 	bl	800e2b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e898:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e89a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d301      	bcc.n	800e8a4 <xQueueGenericSend+0x72>
 800e8a0:	2e02      	cmp	r6, #2
 800e8a2:	d127      	bne.n	800e8f4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8a4:	4632      	mov	r2, r6
 800e8a6:	4639      	mov	r1, r7
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f7ff fe4e 	bl	800e54a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e8b0:	b11b      	cbz	r3, 800e8ba <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8b2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e8b6:	f000 ff61 	bl	800f77c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800e8ba:	b148      	cbz	r0, 800e8d0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800e8bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e8c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e8d0:	f7ff fd10 	bl	800e2f4 <vPortExitCritical>
				return pdPASS;
 800e8d4:	2001      	movs	r0, #1
}
 800e8d6:	b004      	add	sp, #16
 800e8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8dc:	9b01      	ldr	r3, [sp, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d0d6      	beq.n	800e890 <xQueueGenericSend+0x5e>
 800e8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e6:	f383 8811 	msr	BASEPRI, r3
 800e8ea:	f3bf 8f6f 	isb	sy
 800e8ee:	f3bf 8f4f 	dsb	sy
 800e8f2:	e7fe      	b.n	800e8f2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	b91b      	cbnz	r3, 800e900 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800e8f8:	f7ff fcfc 	bl	800e2f4 <vPortExitCritical>
					return errQUEUE_FULL;
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	e7ea      	b.n	800e8d6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800e900:	b915      	cbnz	r5, 800e908 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e902:	a802      	add	r0, sp, #8
 800e904:	f000 ff7c 	bl	800f800 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e908:	f7ff fcf4 	bl	800e2f4 <vPortExitCritical>
		vTaskSuspendAll();
 800e90c:	f000 fd38 	bl	800f380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e910:	f7ff fcd0 	bl	800e2b4 <vPortEnterCritical>
 800e914:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e918:	2bff      	cmp	r3, #255	@ 0xff
 800e91a:	d101      	bne.n	800e920 <xQueueGenericSend+0xee>
 800e91c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800e920:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e924:	2bff      	cmp	r3, #255	@ 0xff
 800e926:	d101      	bne.n	800e92c <xQueueGenericSend+0xfa>
 800e928:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800e92c:	f7ff fce2 	bl	800e2f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e930:	a901      	add	r1, sp, #4
 800e932:	a802      	add	r0, sp, #8
 800e934:	f000 ff70 	bl	800f818 <xTaskCheckForTimeOut>
 800e938:	bb38      	cbnz	r0, 800e98a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e93a:	f7ff fcbb 	bl	800e2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e93e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e940:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e942:	429a      	cmp	r2, r3
 800e944:	d10e      	bne.n	800e964 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e946:	f7ff fcd5 	bl	800e2f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e94a:	9901      	ldr	r1, [sp, #4]
 800e94c:	f104 0010 	add.w	r0, r4, #16
 800e950:	f000 fedc 	bl	800f70c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e954:	4620      	mov	r0, r4
 800e956:	f7ff fe40 	bl	800e5da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e95a:	f000 fdb5 	bl	800f4c8 <xTaskResumeAll>
 800e95e:	b148      	cbz	r0, 800e974 <xQueueGenericSend+0x142>
 800e960:	2501      	movs	r5, #1
 800e962:	e797      	b.n	800e894 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800e964:	f7ff fcc6 	bl	800e2f4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e968:	4620      	mov	r0, r4
 800e96a:	f7ff fe36 	bl	800e5da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e96e:	f000 fdab 	bl	800f4c8 <xTaskResumeAll>
 800e972:	e7f5      	b.n	800e960 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800e974:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e97c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	e7ea      	b.n	800e960 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800e98a:	4620      	mov	r0, r4
 800e98c:	f7ff fe25 	bl	800e5da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e990:	f000 fd9a 	bl	800f4c8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e994:	e7b2      	b.n	800e8fc <xQueueGenericSend+0xca>

0800e996 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e996:	2200      	movs	r2, #0
	{
 800e998:	460b      	mov	r3, r1
 800e99a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e99c:	4611      	mov	r1, r2
 800e99e:	9000      	str	r0, [sp, #0]
 800e9a0:	2001      	movs	r0, #1
 800e9a2:	f7ff fe91 	bl	800e6c8 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	b138      	cbz	r0, 800e9ba <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e9aa:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e9b0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e9b2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e9b4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e9b6:	f7ff ff3c 	bl	800e832 <xQueueGenericSend>
	}
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	b002      	add	sp, #8
 800e9be:	bd10      	pop	{r4, pc}

0800e9c0 <xQueueGiveMutexRecursive>:
	{
 800e9c0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	b940      	cbnz	r0, 800e9d8 <xQueueGiveMutexRecursive+0x18>
 800e9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	e7fe      	b.n	800e9d6 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e9d8:	6885      	ldr	r5, [r0, #8]
 800e9da:	f000 ff5f 	bl	800f89c <xTaskGetCurrentTaskHandle>
 800e9de:	4285      	cmp	r5, r0
 800e9e0:	d10b      	bne.n	800e9fa <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e9e2:	68e3      	ldr	r3, [r4, #12]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e9e8:	b10b      	cbz	r3, 800e9ee <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800e9ea:	2001      	movs	r0, #1
	}
 800e9ec:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f7ff ff1d 	bl	800e832 <xQueueGenericSend>
 800e9f8:	e7f7      	b.n	800e9ea <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800e9fa:	2000      	movs	r0, #0
		return xReturn;
 800e9fc:	e7f6      	b.n	800e9ec <xQueueGiveMutexRecursive+0x2c>

0800e9fe <xQueueCreateMutex>:
	{
 800e9fe:	b570      	push	{r4, r5, r6, lr}
 800ea00:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea02:	2050      	movs	r0, #80	@ 0x50
 800ea04:	f7ff fada 	bl	800dfbc <pvPortMalloc>
 800ea08:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800ea0a:	b198      	cbz	r0, 800ea34 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea0c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800ea0e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea10:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea12:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800ea16:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea1a:	f7ff fe16 	bl	800e64a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ea1e:	462b      	mov	r3, r5
 800ea20:	462a      	mov	r2, r5
 800ea22:	4629      	mov	r1, r5
 800ea24:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800ea26:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea2a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ea2c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ea2e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ea30:	f7ff feff 	bl	800e832 <xQueueGenericSend>
	}
 800ea34:	4620      	mov	r0, r4
 800ea36:	bd70      	pop	{r4, r5, r6, pc}

0800ea38 <xQueueGenericSendFromISR>:
{
 800ea38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea3c:	4689      	mov	r9, r1
 800ea3e:	4617      	mov	r7, r2
 800ea40:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800ea42:	4604      	mov	r4, r0
 800ea44:	b940      	cbnz	r0, 800ea58 <xQueueGenericSendFromISR+0x20>
 800ea46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	e7fe      	b.n	800ea56 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea58:	b951      	cbnz	r1, 800ea70 <xQueueGenericSendFromISR+0x38>
 800ea5a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ea5c:	b143      	cbz	r3, 800ea70 <xQueueGenericSendFromISR+0x38>
 800ea5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea62:	f383 8811 	msr	BASEPRI, r3
 800ea66:	f3bf 8f6f 	isb	sy
 800ea6a:	f3bf 8f4f 	dsb	sy
 800ea6e:	e7fe      	b.n	800ea6e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea70:	2e02      	cmp	r6, #2
 800ea72:	d10b      	bne.n	800ea8c <xQueueGenericSendFromISR+0x54>
 800ea74:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d008      	beq.n	800ea8c <xQueueGenericSendFromISR+0x54>
 800ea7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7e:	f383 8811 	msr	BASEPRI, r3
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	f3bf 8f4f 	dsb	sy
 800ea8a:	e7fe      	b.n	800ea8a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea8c:	f7ff fd24 	bl	800e4d8 <vPortValidateInterruptPriority>
	__asm volatile
 800ea90:	f3ef 8811 	mrs	r8, BASEPRI
 800ea94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eaa4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800eaa6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d301      	bcc.n	800eab0 <xQueueGenericSendFromISR+0x78>
 800eaac:	2e02      	cmp	r6, #2
 800eaae:	d11e      	bne.n	800eaee <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800eab0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eab4:	4632      	mov	r2, r6
 800eab6:	4649      	mov	r1, r9
 800eab8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800eaba:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eabc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eabe:	f7ff fd44 	bl	800e54a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800eac2:	1c6b      	adds	r3, r5, #1
 800eac4:	d10e      	bne.n	800eae4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eac6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800eac8:	b13b      	cbz	r3, 800eada <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800eace:	f000 fe55 	bl	800f77c <xTaskRemoveFromEventList>
 800ead2:	b110      	cbz	r0, 800eada <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800ead4:	b10f      	cbz	r7, 800eada <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ead6:	2301      	movs	r3, #1
 800ead8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800eada:	2001      	movs	r0, #1
	__asm volatile
 800eadc:	f388 8811 	msr	BASEPRI, r8
}
 800eae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eae4:	3501      	adds	r5, #1
 800eae6:	b26d      	sxtb	r5, r5
 800eae8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800eaec:	e7f5      	b.n	800eada <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800eaee:	2000      	movs	r0, #0
 800eaf0:	e7f4      	b.n	800eadc <xQueueGenericSendFromISR+0xa4>

0800eaf2 <xQueueGiveFromISR>:
{
 800eaf2:	b570      	push	{r4, r5, r6, lr}
 800eaf4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	b940      	cbnz	r0, 800eb0c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800eafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eafe:	f383 8811 	msr	BASEPRI, r3
 800eb02:	f3bf 8f6f 	isb	sy
 800eb06:	f3bf 8f4f 	dsb	sy
 800eb0a:	e7fe      	b.n	800eb0a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800eb0c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800eb0e:	b143      	cbz	r3, 800eb22 <xQueueGiveFromISR+0x30>
 800eb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb14:	f383 8811 	msr	BASEPRI, r3
 800eb18:	f3bf 8f6f 	isb	sy
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	e7fe      	b.n	800eb20 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800eb22:	6803      	ldr	r3, [r0, #0]
 800eb24:	b953      	cbnz	r3, 800eb3c <xQueueGiveFromISR+0x4a>
 800eb26:	6883      	ldr	r3, [r0, #8]
 800eb28:	b143      	cbz	r3, 800eb3c <xQueueGiveFromISR+0x4a>
 800eb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	e7fe      	b.n	800eb3a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb3c:	f7ff fccc 	bl	800e4d8 <vPortValidateInterruptPriority>
	__asm volatile
 800eb40:	f3ef 8611 	mrs	r6, BASEPRI
 800eb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb54:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eb56:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d919      	bls.n	800eb90 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb60:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800eb62:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb64:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb66:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800eb68:	d10d      	bne.n	800eb86 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800eb6c:	b13b      	cbz	r3, 800eb7e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb6e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800eb72:	f000 fe03 	bl	800f77c <xTaskRemoveFromEventList>
 800eb76:	b110      	cbz	r0, 800eb7e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800eb78:	b10d      	cbz	r5, 800eb7e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800eb7e:	2001      	movs	r0, #1
	__asm volatile
 800eb80:	f386 8811 	msr	BASEPRI, r6
}
 800eb84:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eb86:	3301      	adds	r3, #1
 800eb88:	b25b      	sxtb	r3, r3
 800eb8a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800eb8e:	e7f6      	b.n	800eb7e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800eb90:	2000      	movs	r0, #0
 800eb92:	e7f5      	b.n	800eb80 <xQueueGiveFromISR+0x8e>

0800eb94 <xQueueReceive>:
{
 800eb94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800eb98:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800eb9a:	4604      	mov	r4, r0
{
 800eb9c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800eb9e:	b940      	cbnz	r0, 800ebb2 <xQueueReceive+0x1e>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebb2:	b951      	cbnz	r1, 800ebca <xQueueReceive+0x36>
 800ebb4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ebb6:	b143      	cbz	r3, 800ebca <xQueueReceive+0x36>
 800ebb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	e7fe      	b.n	800ebc8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebca:	f000 fe6d 	bl	800f8a8 <xTaskGetSchedulerState>
 800ebce:	4605      	mov	r5, r0
 800ebd0:	b318      	cbz	r0, 800ec1a <xQueueReceive+0x86>
 800ebd2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ebd4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800ebd8:	f7ff fb6c 	bl	800e2b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebdc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebde:	b347      	cbz	r7, 800ec32 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebe0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f7ff fce3 	bl	800e5b0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebea:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebec:	6923      	ldr	r3, [r4, #16]
 800ebee:	b173      	cbz	r3, 800ec0e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebf0:	f104 0010 	add.w	r0, r4, #16
 800ebf4:	f000 fdc2 	bl	800f77c <xTaskRemoveFromEventList>
 800ebf8:	b148      	cbz	r0, 800ec0e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800ebfa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ebfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec02:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ec06:	f3bf 8f4f 	dsb	sy
 800ec0a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ec0e:	f7ff fb71 	bl	800e2f4 <vPortExitCritical>
				return pdPASS;
 800ec12:	2001      	movs	r0, #1
}
 800ec14:	b004      	add	sp, #16
 800ec16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec1a:	9b01      	ldr	r3, [sp, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d0d9      	beq.n	800ebd4 <xQueueReceive+0x40>
 800ec20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec24:	f383 8811 	msr	BASEPRI, r3
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	f3bf 8f4f 	dsb	sy
 800ec30:	e7fe      	b.n	800ec30 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec32:	9b01      	ldr	r3, [sp, #4]
 800ec34:	b91b      	cbnz	r3, 800ec3e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800ec36:	f7ff fb5d 	bl	800e2f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	e7ea      	b.n	800ec14 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800ec3e:	b915      	cbnz	r5, 800ec46 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec40:	a802      	add	r0, sp, #8
 800ec42:	f000 fddd 	bl	800f800 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ec46:	f7ff fb55 	bl	800e2f4 <vPortExitCritical>
		vTaskSuspendAll();
 800ec4a:	f000 fb99 	bl	800f380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec4e:	f7ff fb31 	bl	800e2b4 <vPortEnterCritical>
 800ec52:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ec56:	2bff      	cmp	r3, #255	@ 0xff
 800ec58:	d101      	bne.n	800ec5e <xQueueReceive+0xca>
 800ec5a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800ec5e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ec62:	2bff      	cmp	r3, #255	@ 0xff
 800ec64:	d101      	bne.n	800ec6a <xQueueReceive+0xd6>
 800ec66:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800ec6a:	f7ff fb43 	bl	800e2f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec6e:	a901      	add	r1, sp, #4
 800ec70:	a802      	add	r0, sp, #8
 800ec72:	f000 fdd1 	bl	800f818 <xTaskCheckForTimeOut>
 800ec76:	bb00      	cbnz	r0, 800ecba <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f7ff fc5b 	bl	800e534 <prvIsQueueEmpty>
 800ec7e:	b1b0      	cbz	r0, 800ecae <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec80:	9901      	ldr	r1, [sp, #4]
 800ec82:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ec86:	f000 fd41 	bl	800f70c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f7ff fca5 	bl	800e5da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec90:	f000 fc1a 	bl	800f4c8 <xTaskResumeAll>
 800ec94:	b948      	cbnz	r0, 800ecaa <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800ec96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ec9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	2501      	movs	r5, #1
 800ecac:	e794      	b.n	800ebd8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800ecae:	4620      	mov	r0, r4
 800ecb0:	f7ff fc93 	bl	800e5da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ecb4:	f000 fc08 	bl	800f4c8 <xTaskResumeAll>
 800ecb8:	e7f7      	b.n	800ecaa <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f7ff fc8d 	bl	800e5da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ecc0:	f000 fc02 	bl	800f4c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	f7ff fc35 	bl	800e534 <prvIsQueueEmpty>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d0ed      	beq.n	800ecaa <xQueueReceive+0x116>
 800ecce:	e7b4      	b.n	800ec3a <xQueueReceive+0xa6>

0800ecd0 <xQueueSemaphoreTake>:
{
 800ecd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecd2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800ecd4:	4604      	mov	r4, r0
{
 800ecd6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ecd8:	b940      	cbnz	r0, 800ecec <xQueueSemaphoreTake+0x1c>
 800ecda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	e7fe      	b.n	800ecea <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ecec:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800ecee:	b145      	cbz	r5, 800ed02 <xQueueSemaphoreTake+0x32>
 800ecf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	e7fe      	b.n	800ed00 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed02:	f000 fdd1 	bl	800f8a8 <xTaskGetSchedulerState>
 800ed06:	4606      	mov	r6, r0
 800ed08:	b320      	cbz	r0, 800ed54 <xQueueSemaphoreTake+0x84>
 800ed0a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800ed0c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800ed0e:	f7ff fad1 	bl	800e2b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ed12:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ed14:	b353      	cbz	r3, 800ed6c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ed16:	3b01      	subs	r3, #1
 800ed18:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed1a:	6823      	ldr	r3, [r4, #0]
 800ed1c:	b913      	cbnz	r3, 800ed24 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ed1e:	f000 fea1 	bl	800fa64 <pvTaskIncrementMutexHeldCount>
 800ed22:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed24:	6923      	ldr	r3, [r4, #16]
 800ed26:	b173      	cbz	r3, 800ed46 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed28:	f104 0010 	add.w	r0, r4, #16
 800ed2c:	f000 fd26 	bl	800f77c <xTaskRemoveFromEventList>
 800ed30:	b148      	cbz	r0, 800ed46 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800ed32:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ed36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ed46:	f7ff fad5 	bl	800e2f4 <vPortExitCritical>
				return pdPASS;
 800ed4a:	2001      	movs	r0, #1
}
 800ed4c:	b005      	add	sp, #20
 800ed4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed50:	4635      	mov	r5, r6
 800ed52:	e7db      	b.n	800ed0c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed54:	9b01      	ldr	r3, [sp, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d0fa      	beq.n	800ed50 <xQueueSemaphoreTake+0x80>
 800ed5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	e7fe      	b.n	800ed6a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed6c:	9b01      	ldr	r3, [sp, #4]
 800ed6e:	b953      	cbnz	r3, 800ed86 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ed70:	2d00      	cmp	r5, #0
 800ed72:	d066      	beq.n	800ee42 <xQueueSemaphoreTake+0x172>
 800ed74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	e7fe      	b.n	800ed84 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800ed86:	b916      	cbnz	r6, 800ed8e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed88:	a802      	add	r0, sp, #8
 800ed8a:	f000 fd39 	bl	800f800 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ed8e:	f7ff fab1 	bl	800e2f4 <vPortExitCritical>
		vTaskSuspendAll();
 800ed92:	f000 faf5 	bl	800f380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed96:	f7ff fa8d 	bl	800e2b4 <vPortEnterCritical>
 800ed9a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ed9e:	2bff      	cmp	r3, #255	@ 0xff
 800eda0:	d101      	bne.n	800eda6 <xQueueSemaphoreTake+0xd6>
 800eda2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800eda6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800edaa:	2bff      	cmp	r3, #255	@ 0xff
 800edac:	d101      	bne.n	800edb2 <xQueueSemaphoreTake+0xe2>
 800edae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800edb2:	f7ff fa9f 	bl	800e2f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800edb6:	a901      	add	r1, sp, #4
 800edb8:	a802      	add	r0, sp, #8
 800edba:	f000 fd2d 	bl	800f818 <xTaskCheckForTimeOut>
 800edbe:	bb50      	cbnz	r0, 800ee16 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edc0:	4620      	mov	r0, r4
 800edc2:	f7ff fbb7 	bl	800e534 <prvIsQueueEmpty>
 800edc6:	b300      	cbz	r0, 800ee0a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800edc8:	6823      	ldr	r3, [r4, #0]
 800edca:	b93b      	cbnz	r3, 800eddc <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800edcc:	f7ff fa72 	bl	800e2b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800edd0:	68a0      	ldr	r0, [r4, #8]
 800edd2:	f000 fd79 	bl	800f8c8 <xTaskPriorityInherit>
 800edd6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800edd8:	f7ff fa8c 	bl	800e2f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eddc:	9901      	ldr	r1, [sp, #4]
 800edde:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ede2:	f000 fc93 	bl	800f70c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ede6:	4620      	mov	r0, r4
 800ede8:	f7ff fbf7 	bl	800e5da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800edec:	f000 fb6c 	bl	800f4c8 <xTaskResumeAll>
 800edf0:	b948      	cbnz	r0, 800ee06 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800edf2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800edf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edfa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	2601      	movs	r6, #1
 800ee08:	e781      	b.n	800ed0e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f7ff fbe5 	bl	800e5da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee10:	f000 fb5a 	bl	800f4c8 <xTaskResumeAll>
 800ee14:	e7f7      	b.n	800ee06 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800ee16:	4620      	mov	r0, r4
 800ee18:	f7ff fbdf 	bl	800e5da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee1c:	f000 fb54 	bl	800f4c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee20:	4620      	mov	r0, r4
 800ee22:	f7ff fb87 	bl	800e534 <prvIsQueueEmpty>
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d0ed      	beq.n	800ee06 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800ee2a:	b165      	cbz	r5, 800ee46 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800ee2c:	f7ff fa42 	bl	800e2b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ee32:	b119      	cbz	r1, 800ee3c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ee36:	6819      	ldr	r1, [r3, #0]
 800ee38:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ee3c:	68a0      	ldr	r0, [r4, #8]
 800ee3e:	f000 fdc3 	bl	800f9c8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800ee42:	f7ff fa57 	bl	800e2f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ee46:	2000      	movs	r0, #0
 800ee48:	e780      	b.n	800ed4c <xQueueSemaphoreTake+0x7c>

0800ee4a <xQueueTakeMutexRecursive>:
	{
 800ee4a:	b570      	push	{r4, r5, r6, lr}
 800ee4c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800ee4e:	4604      	mov	r4, r0
 800ee50:	b940      	cbnz	r0, 800ee64 <xQueueTakeMutexRecursive+0x1a>
 800ee52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	e7fe      	b.n	800ee62 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ee64:	6886      	ldr	r6, [r0, #8]
 800ee66:	f000 fd19 	bl	800f89c <xTaskGetCurrentTaskHandle>
 800ee6a:	4286      	cmp	r6, r0
 800ee6c:	d104      	bne.n	800ee78 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ee6e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800ee70:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ee72:	3301      	adds	r3, #1
 800ee74:	60e3      	str	r3, [r4, #12]
	}
 800ee76:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ee78:	4629      	mov	r1, r5
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f7ff ff28 	bl	800ecd0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800ee80:	2800      	cmp	r0, #0
 800ee82:	d0f8      	beq.n	800ee76 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ee84:	68e3      	ldr	r3, [r4, #12]
 800ee86:	3301      	adds	r3, #1
 800ee88:	60e3      	str	r3, [r4, #12]
 800ee8a:	e7f4      	b.n	800ee76 <xQueueTakeMutexRecursive+0x2c>

0800ee8c <xQueueReceiveFromISR>:
{
 800ee8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee90:	4689      	mov	r9, r1
 800ee92:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800ee94:	4604      	mov	r4, r0
 800ee96:	b940      	cbnz	r0, 800eeaa <xQueueReceiveFromISR+0x1e>
 800ee98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee9c:	f383 8811 	msr	BASEPRI, r3
 800eea0:	f3bf 8f6f 	isb	sy
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	e7fe      	b.n	800eea8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eeaa:	b951      	cbnz	r1, 800eec2 <xQueueReceiveFromISR+0x36>
 800eeac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800eeae:	b143      	cbz	r3, 800eec2 <xQueueReceiveFromISR+0x36>
 800eeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	e7fe      	b.n	800eec0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eec2:	f7ff fb09 	bl	800e4d8 <vPortValidateInterruptPriority>
	__asm volatile
 800eec6:	f3ef 8711 	mrs	r7, BASEPRI
 800eeca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eece:	f383 8811 	msr	BASEPRI, r3
 800eed2:	f3bf 8f6f 	isb	sy
 800eed6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eeda:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eedc:	b30d      	cbz	r5, 800ef22 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800eede:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eee2:	4649      	mov	r1, r9
 800eee4:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eee6:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800eee8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eeea:	f7ff fb61 	bl	800e5b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eeee:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800eef0:	1c73      	adds	r3, r6, #1
 800eef2:	d111      	bne.n	800ef18 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eef4:	6923      	ldr	r3, [r4, #16]
 800eef6:	b153      	cbz	r3, 800ef0e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eef8:	f104 0010 	add.w	r0, r4, #16
 800eefc:	f000 fc3e 	bl	800f77c <xTaskRemoveFromEventList>
 800ef00:	b128      	cbz	r0, 800ef0e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800ef02:	f1b8 0f00 	cmp.w	r8, #0
 800ef06:	d002      	beq.n	800ef0e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800ef0e:	2001      	movs	r0, #1
	__asm volatile
 800ef10:	f387 8811 	msr	BASEPRI, r7
}
 800ef14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ef18:	3601      	adds	r6, #1
 800ef1a:	b276      	sxtb	r6, r6
 800ef1c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800ef20:	e7f5      	b.n	800ef0e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800ef22:	4628      	mov	r0, r5
 800ef24:	e7f4      	b.n	800ef10 <xQueueReceiveFromISR+0x84>
	...

0800ef28 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef28:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ef2a:	4a07      	ldr	r2, [pc, #28]	@ (800ef48 <vQueueAddToRegistry+0x20>)
	{
 800ef2c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ef2e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800ef32:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800ef36:	b91d      	cbnz	r5, 800ef40 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ef38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ef3c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ef3e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef40:	3301      	adds	r3, #1
 800ef42:	2b08      	cmp	r3, #8
 800ef44:	d1f3      	bne.n	800ef2e <vQueueAddToRegistry+0x6>
 800ef46:	e7fa      	b.n	800ef3e <vQueueAddToRegistry+0x16>
 800ef48:	24025da8 	.word	0x24025da8

0800ef4c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef4c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ef4e:	4a09      	ldr	r2, [pc, #36]	@ (800ef74 <vQueueUnregisterQueue+0x28>)
	{
 800ef50:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ef52:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ef56:	00dc      	lsls	r4, r3, #3
 800ef58:	4281      	cmp	r1, r0
 800ef5a:	d106      	bne.n	800ef6a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ef5c:	4a06      	ldr	r2, [pc, #24]	@ (800ef78 <vQueueUnregisterQueue+0x2c>)
 800ef5e:	2100      	movs	r1, #0
 800ef60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ef64:	4422      	add	r2, r4
 800ef66:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ef68:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	2b08      	cmp	r3, #8
 800ef6e:	d1f0      	bne.n	800ef52 <vQueueUnregisterQueue+0x6>
 800ef70:	e7fa      	b.n	800ef68 <vQueueUnregisterQueue+0x1c>
 800ef72:	bf00      	nop
 800ef74:	24025dac 	.word	0x24025dac
 800ef78:	24025da8 	.word	0x24025da8

0800ef7c <vQueueDelete>:
{
 800ef7c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800ef7e:	b940      	cbnz	r0, 800ef92 <vQueueDelete+0x16>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	e7fe      	b.n	800ef90 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800ef92:	f7ff ffdb 	bl	800ef4c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ef96:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800ef9a:	b91b      	cbnz	r3, 800efa4 <vQueueDelete+0x28>
}
 800ef9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800efa0:	f7ff b8a4 	b.w	800e0ec <vPortFree>
}
 800efa4:	bd10      	pop	{r4, pc}

0800efa6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800efa6:	b570      	push	{r4, r5, r6, lr}
 800efa8:	4604      	mov	r4, r0
 800efaa:	460d      	mov	r5, r1
 800efac:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800efae:	f7ff f981 	bl	800e2b4 <vPortEnterCritical>
 800efb2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800efb6:	2bff      	cmp	r3, #255	@ 0xff
 800efb8:	d102      	bne.n	800efc0 <vQueueWaitForMessageRestricted+0x1a>
 800efba:	2300      	movs	r3, #0
 800efbc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800efc0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800efc4:	2bff      	cmp	r3, #255	@ 0xff
 800efc6:	d102      	bne.n	800efce <vQueueWaitForMessageRestricted+0x28>
 800efc8:	2300      	movs	r3, #0
 800efca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800efce:	f7ff f991 	bl	800e2f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800efd2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800efd4:	b92b      	cbnz	r3, 800efe2 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800efd6:	4632      	mov	r2, r6
 800efd8:	4629      	mov	r1, r5
 800efda:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800efde:	f000 fbaf 	bl	800f740 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800efe2:	4620      	mov	r0, r4
	}
 800efe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800efe8:	f7ff baf7 	b.w	800e5da <prvUnlockQueue>

0800efec <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800efec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eff2:	f7ff f95f 	bl	800e2b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eff6:	4b2f      	ldr	r3, [pc, #188]	@ (800f0b4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800eff8:	4e2f      	ldr	r6, [pc, #188]	@ (800f0b8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	4f2f      	ldr	r7, [pc, #188]	@ (800f0bc <prvAddNewTaskToReadyList+0xd0>)
 800effe:	3201      	adds	r2, #1
 800f000:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800f002:	6835      	ldr	r5, [r6, #0]
 800f004:	2d00      	cmp	r5, #0
 800f006:	d14a      	bne.n	800f09e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f008:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d11f      	bne.n	800f050 <prvAddNewTaskToReadyList+0x64>
 800f010:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f012:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f014:	4640      	mov	r0, r8
 800f016:	f7ff f8a7 	bl	800e168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f01a:	f108 0814 	add.w	r8, r8, #20
 800f01e:	2d38      	cmp	r5, #56	@ 0x38
 800f020:	d1f7      	bne.n	800f012 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f022:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800f0e4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800f026:	4d26      	ldr	r5, [pc, #152]	@ (800f0c0 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800f028:	4640      	mov	r0, r8
 800f02a:	f7ff f89d 	bl	800e168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f02e:	4628      	mov	r0, r5
 800f030:	f7ff f89a 	bl	800e168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f034:	4823      	ldr	r0, [pc, #140]	@ (800f0c4 <prvAddNewTaskToReadyList+0xd8>)
 800f036:	f7ff f897 	bl	800e168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f03a:	4823      	ldr	r0, [pc, #140]	@ (800f0c8 <prvAddNewTaskToReadyList+0xdc>)
 800f03c:	f7ff f894 	bl	800e168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f040:	4822      	ldr	r0, [pc, #136]	@ (800f0cc <prvAddNewTaskToReadyList+0xe0>)
 800f042:	f7ff f891 	bl	800e168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f046:	4b22      	ldr	r3, [pc, #136]	@ (800f0d0 <prvAddNewTaskToReadyList+0xe4>)
 800f048:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f04c:	4b21      	ldr	r3, [pc, #132]	@ (800f0d4 <prvAddNewTaskToReadyList+0xe8>)
 800f04e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800f050:	4a21      	ldr	r2, [pc, #132]	@ (800f0d8 <prvAddNewTaskToReadyList+0xec>)
 800f052:	6813      	ldr	r3, [r2, #0]
 800f054:	3301      	adds	r3, #1
 800f056:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800f058:	4a20      	ldr	r2, [pc, #128]	@ (800f0dc <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f05a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800f05c:	6811      	ldr	r1, [r2, #0]
 800f05e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f060:	428b      	cmp	r3, r1
 800f062:	d900      	bls.n	800f066 <prvAddNewTaskToReadyList+0x7a>
 800f064:	6013      	str	r3, [r2, #0]
 800f066:	2014      	movs	r0, #20
 800f068:	1d21      	adds	r1, r4, #4
 800f06a:	fb00 7003 	mla	r0, r0, r3, r7
 800f06e:	f7ff f889 	bl	800e184 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800f072:	f7ff f93f 	bl	800e2f4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800f076:	4b1a      	ldr	r3, [pc, #104]	@ (800f0e0 <prvAddNewTaskToReadyList+0xf4>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	b173      	cbz	r3, 800f09a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f07c:	6833      	ldr	r3, [r6, #0]
 800f07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f080:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f082:	429a      	cmp	r2, r3
 800f084:	d209      	bcs.n	800f09a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800f086:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f08a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f08e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	f3bf 8f6f 	isb	sy
}
 800f09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800f09e:	4b10      	ldr	r3, [pc, #64]	@ (800f0e0 <prvAddNewTaskToReadyList+0xf4>)
 800f0a0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f0a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800f0a4:	2a00      	cmp	r2, #0
 800f0a6:	d1d3      	bne.n	800f050 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f0a8:	6832      	ldr	r2, [r6, #0]
 800f0aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d8cf      	bhi.n	800f050 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800f0b0:	6034      	str	r4, [r6, #0]
 800f0b2:	e7cd      	b.n	800f050 <prvAddNewTaskToReadyList+0x64>
 800f0b4:	24025e0c 	.word	0x24025e0c
 800f0b8:	240262e0 	.word	0x240262e0
 800f0bc:	24025e80 	.word	0x24025e80
 800f0c0:	24025e58 	.word	0x24025e58
 800f0c4:	24025e3c 	.word	0x24025e3c
 800f0c8:	24025e28 	.word	0x24025e28
 800f0cc:	24025e10 	.word	0x24025e10
 800f0d0:	24025e54 	.word	0x24025e54
 800f0d4:	24025e50 	.word	0x24025e50
 800f0d8:	24025df0 	.word	0x24025df0
 800f0dc:	24025e04 	.word	0x24025e04
 800f0e0:	24025e00 	.word	0x24025e00
 800f0e4:	24025e6c 	.word	0x24025e6c

0800f0e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f0ea:	4b15      	ldr	r3, [pc, #84]	@ (800f140 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800f0ec:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0ee:	4d15      	ldr	r5, [pc, #84]	@ (800f144 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800f0f0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800f0f2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0f4:	6828      	ldr	r0, [r5, #0]
 800f0f6:	3004      	adds	r0, #4
 800f0f8:	f7ff f866 	bl	800e1c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f0fc:	1c73      	adds	r3, r6, #1
 800f0fe:	d107      	bne.n	800f110 <prvAddCurrentTaskToDelayedList+0x28>
 800f100:	b137      	cbz	r7, 800f110 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f102:	6829      	ldr	r1, [r5, #0]
 800f104:	4810      	ldr	r0, [pc, #64]	@ (800f148 <prvAddCurrentTaskToDelayedList+0x60>)
 800f106:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f10c:	f7ff b83a 	b.w	800e184 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f110:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f112:	682b      	ldr	r3, [r5, #0]
 800f114:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f116:	d307      	bcc.n	800f128 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f118:	4b0c      	ldr	r3, [pc, #48]	@ (800f14c <prvAddCurrentTaskToDelayedList+0x64>)
 800f11a:	6818      	ldr	r0, [r3, #0]
 800f11c:	6829      	ldr	r1, [r5, #0]
}
 800f11e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f122:	3104      	adds	r1, #4
 800f124:	f7ff b839 	b.w	800e19a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f128:	4b09      	ldr	r3, [pc, #36]	@ (800f150 <prvAddCurrentTaskToDelayedList+0x68>)
 800f12a:	6818      	ldr	r0, [r3, #0]
 800f12c:	6829      	ldr	r1, [r5, #0]
 800f12e:	3104      	adds	r1, #4
 800f130:	f7ff f833 	bl	800e19a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f134:	4b07      	ldr	r3, [pc, #28]	@ (800f154 <prvAddCurrentTaskToDelayedList+0x6c>)
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	42a2      	cmp	r2, r4
 800f13a:	d900      	bls.n	800f13e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800f13c:	601c      	str	r4, [r3, #0]
}
 800f13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f140:	24025e08 	.word	0x24025e08
 800f144:	240262e0 	.word	0x240262e0
 800f148:	24025e10 	.word	0x24025e10
 800f14c:	24025e50 	.word	0x24025e50
 800f150:	24025e54 	.word	0x24025e54
 800f154:	24025dec 	.word	0x24025dec

0800f158 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f158:	4a06      	ldr	r2, [pc, #24]	@ (800f174 <prvResetNextTaskUnblockTime+0x1c>)
 800f15a:	6813      	ldr	r3, [r2, #0]
 800f15c:	6819      	ldr	r1, [r3, #0]
 800f15e:	4b06      	ldr	r3, [pc, #24]	@ (800f178 <prvResetNextTaskUnblockTime+0x20>)
 800f160:	b919      	cbnz	r1, 800f16a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800f162:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f166:	601a      	str	r2, [r3, #0]
}
 800f168:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f16a:	6812      	ldr	r2, [r2, #0]
 800f16c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f16e:	68d2      	ldr	r2, [r2, #12]
 800f170:	6852      	ldr	r2, [r2, #4]
 800f172:	e7f8      	b.n	800f166 <prvResetNextTaskUnblockTime+0xe>
 800f174:	24025e54 	.word	0x24025e54
 800f178:	24025dec 	.word	0x24025dec

0800f17c <prvDeleteTCB>:
	{
 800f17c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f17e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800f182:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f184:	b93b      	cbnz	r3, 800f196 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800f186:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f188:	f7fe ffb0 	bl	800e0ec <vPortFree>
				vPortFree( pxTCB );
 800f18c:	4620      	mov	r0, r4
	}
 800f18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800f192:	f7fe bfab 	b.w	800e0ec <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f196:	2b01      	cmp	r3, #1
 800f198:	d0f9      	beq.n	800f18e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	d008      	beq.n	800f1b0 <prvDeleteTCB+0x34>
 800f19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	e7fe      	b.n	800f1ae <prvDeleteTCB+0x32>
	}
 800f1b0:	bd10      	pop	{r4, pc}
	...

0800f1b4 <prvIdleTask>:
{
 800f1b4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f1b6:	4c14      	ldr	r4, [pc, #80]	@ (800f208 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1b8:	4f14      	ldr	r7, [pc, #80]	@ (800f20c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800f1ba:	4d15      	ldr	r5, [pc, #84]	@ (800f210 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f1bc:	6823      	ldr	r3, [r4, #0]
 800f1be:	b983      	cbnz	r3, 800f1e2 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f1c0:	4b14      	ldr	r3, [pc, #80]	@ (800f214 <prvIdleTask+0x60>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d909      	bls.n	800f1dc <prvIdleTask+0x28>
				taskYIELD();
 800f1c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f1cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800f1dc:	f7f1 fa8c 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f1e0:	e7eb      	b.n	800f1ba <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800f1e2:	f7ff f867 	bl	800e2b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1ea:	1d30      	adds	r0, r6, #4
 800f1ec:	f7fe ffec 	bl	800e1c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800f1fc:	f7ff f87a 	bl	800e2f4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800f200:	4630      	mov	r0, r6
 800f202:	f7ff ffbb 	bl	800f17c <prvDeleteTCB>
 800f206:	e7d9      	b.n	800f1bc <prvIdleTask+0x8>
 800f208:	24025e24 	.word	0x24025e24
 800f20c:	24025e28 	.word	0x24025e28
 800f210:	24025e0c 	.word	0x24025e0c
 800f214:	24025e80 	.word	0x24025e80

0800f218 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f21c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f21e:	4607      	mov	r7, r0
 800f220:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f222:	21a5      	movs	r1, #165	@ 0xa5
 800f224:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f226:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f228:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f22a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f22e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f230:	f016 f806 	bl	8025240 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f234:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f236:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f238:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800f23c:	b3b5      	cbz	r5, 800f2ac <prvInitialiseNewTask.constprop.0+0x94>
 800f23e:	1e6b      	subs	r3, r5, #1
 800f240:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800f244:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f246:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f24a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800f24e:	b109      	cbz	r1, 800f254 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f250:	42ab      	cmp	r3, r5
 800f252:	d1f8      	bne.n	800f246 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f254:	2300      	movs	r3, #0
 800f256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f25a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800f25c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f260:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f262:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800f264:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f268:	bf28      	it	cs
 800f26a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800f26c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800f26e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f270:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f274:	f7fe ff83 	bl	800e17e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f278:	f104 0018 	add.w	r0, r4, #24
 800f27c:	f7fe ff7f 	bl	800e17e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800f280:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f284:	4642      	mov	r2, r8
 800f286:	4639      	mov	r1, r7
 800f288:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f28a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f28c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f28e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800f290:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f294:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f298:	f7fe ffe4 	bl	800e264 <pxPortInitialiseStack>
 800f29c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800f29e:	f1b9 0f00 	cmp.w	r9, #0
 800f2a2:	d001      	beq.n	800f2a8 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f2a4:	f8c9 4000 	str.w	r4, [r9]
}
 800f2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f2ac:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800f2b0:	e7d3      	b.n	800f25a <prvInitialiseNewTask.constprop.0+0x42>

0800f2b2 <xTaskCreateStatic>:
	{
 800f2b2:	b570      	push	{r4, r5, r6, lr}
 800f2b4:	b086      	sub	sp, #24
 800f2b6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800f2ba:	b945      	cbnz	r5, 800f2ce <xTaskCreateStatic+0x1c>
 800f2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2c0:	f383 8811 	msr	BASEPRI, r3
 800f2c4:	f3bf 8f6f 	isb	sy
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	e7fe      	b.n	800f2cc <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800f2ce:	b944      	cbnz	r4, 800f2e2 <xTaskCreateStatic+0x30>
 800f2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	e7fe      	b.n	800f2e0 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800f2e2:	2660      	movs	r6, #96	@ 0x60
 800f2e4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f2e6:	9e05      	ldr	r6, [sp, #20]
 800f2e8:	2e60      	cmp	r6, #96	@ 0x60
 800f2ea:	d008      	beq.n	800f2fe <xTaskCreateStatic+0x4c>
 800f2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	e7fe      	b.n	800f2fc <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f2fe:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f300:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f302:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f304:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f308:	ad04      	add	r5, sp, #16
 800f30a:	9402      	str	r4, [sp, #8]
 800f30c:	9501      	str	r5, [sp, #4]
 800f30e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f310:	9500      	str	r5, [sp, #0]
 800f312:	f7ff ff81 	bl	800f218 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f316:	4620      	mov	r0, r4
 800f318:	f7ff fe68 	bl	800efec <prvAddNewTaskToReadyList>
	}
 800f31c:	9804      	ldr	r0, [sp, #16]
 800f31e:	b006      	add	sp, #24
 800f320:	bd70      	pop	{r4, r5, r6, pc}

0800f322 <xTaskCreate>:
	{
 800f322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f326:	4607      	mov	r7, r0
 800f328:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f32a:	0090      	lsls	r0, r2, #2
	{
 800f32c:	4688      	mov	r8, r1
 800f32e:	4616      	mov	r6, r2
 800f330:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f332:	f7fe fe43 	bl	800dfbc <pvPortMalloc>
			if( pxStack != NULL )
 800f336:	4605      	mov	r5, r0
 800f338:	b920      	cbnz	r0, 800f344 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f33a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800f33e:	b005      	add	sp, #20
 800f340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f344:	2060      	movs	r0, #96	@ 0x60
 800f346:	f7fe fe39 	bl	800dfbc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800f34a:	4604      	mov	r4, r0
 800f34c:	b198      	cbz	r0, 800f376 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f34e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800f350:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f352:	4632      	mov	r2, r6
 800f354:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f356:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f35a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f35c:	9002      	str	r0, [sp, #8]
 800f35e:	4638      	mov	r0, r7
 800f360:	9301      	str	r3, [sp, #4]
 800f362:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	464b      	mov	r3, r9
 800f368:	f7ff ff56 	bl	800f218 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f36c:	4620      	mov	r0, r4
 800f36e:	f7ff fe3d 	bl	800efec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f372:	2001      	movs	r0, #1
 800f374:	e7e3      	b.n	800f33e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800f376:	4628      	mov	r0, r5
 800f378:	f7fe feb8 	bl	800e0ec <vPortFree>
		if( pxNewTCB != NULL )
 800f37c:	e7dd      	b.n	800f33a <xTaskCreate+0x18>
	...

0800f380 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f380:	4a02      	ldr	r2, [pc, #8]	@ (800f38c <vTaskSuspendAll+0xc>)
 800f382:	6813      	ldr	r3, [r2, #0]
 800f384:	3301      	adds	r3, #1
 800f386:	6013      	str	r3, [r2, #0]
}
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	24025de8 	.word	0x24025de8

0800f390 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f390:	4b01      	ldr	r3, [pc, #4]	@ (800f398 <xTaskGetTickCount+0x8>)
 800f392:	6818      	ldr	r0, [r3, #0]
}
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	24025e08 	.word	0x24025e08

0800f39c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f39c:	4b3f      	ldr	r3, [pc, #252]	@ (800f49c <xTaskIncrementTick+0x100>)
 800f39e:	681b      	ldr	r3, [r3, #0]
{
 800f3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d172      	bne.n	800f48e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f3a8:	4b3d      	ldr	r3, [pc, #244]	@ (800f4a0 <xTaskIncrementTick+0x104>)
 800f3aa:	681c      	ldr	r4, [r3, #0]
 800f3ac:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800f3ae:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f3b0:	b9bc      	cbnz	r4, 800f3e2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800f3b2:	4b3c      	ldr	r3, [pc, #240]	@ (800f4a4 <xTaskIncrementTick+0x108>)
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	6812      	ldr	r2, [r2, #0]
 800f3b8:	b142      	cbz	r2, 800f3cc <xTaskIncrementTick+0x30>
 800f3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	e7fe      	b.n	800f3ca <xTaskIncrementTick+0x2e>
 800f3cc:	4a36      	ldr	r2, [pc, #216]	@ (800f4a8 <xTaskIncrementTick+0x10c>)
 800f3ce:	6819      	ldr	r1, [r3, #0]
 800f3d0:	6810      	ldr	r0, [r2, #0]
 800f3d2:	6018      	str	r0, [r3, #0]
 800f3d4:	6011      	str	r1, [r2, #0]
 800f3d6:	4a35      	ldr	r2, [pc, #212]	@ (800f4ac <xTaskIncrementTick+0x110>)
 800f3d8:	6813      	ldr	r3, [r2, #0]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	6013      	str	r3, [r2, #0]
 800f3de:	f7ff febb 	bl	800f158 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3e2:	4d33      	ldr	r5, [pc, #204]	@ (800f4b0 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800f3e4:	f04f 0b00 	mov.w	fp, #0
 800f3e8:	4e32      	ldr	r6, [pc, #200]	@ (800f4b4 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3ea:	682b      	ldr	r3, [r5, #0]
 800f3ec:	4f32      	ldr	r7, [pc, #200]	@ (800f4b8 <xTaskIncrementTick+0x11c>)
 800f3ee:	429c      	cmp	r4, r3
 800f3f0:	d212      	bcs.n	800f418 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	2114      	movs	r1, #20
 800f3f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f3f8:	434a      	muls	r2, r1
 800f3fa:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800f3fc:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800f3fe:	4a2f      	ldr	r2, [pc, #188]	@ (800f4bc <xTaskIncrementTick+0x120>)
 800f400:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800f402:	bf28      	it	cs
 800f404:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800f408:	2a00      	cmp	r2, #0
 800f40a:	bf18      	it	ne
 800f40c:	f04f 0b01 	movne.w	fp, #1
}
 800f410:	4658      	mov	r0, fp
 800f412:	b003      	add	sp, #12
 800f414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f418:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800f4a4 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800f41c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800f4c4 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f420:	f8d9 2000 	ldr.w	r2, [r9]
 800f424:	6812      	ldr	r2, [r2, #0]
 800f426:	b91a      	cbnz	r2, 800f430 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f428:	f04f 32ff 	mov.w	r2, #4294967295
 800f42c:	602a      	str	r2, [r5, #0]
					break;
 800f42e:	e7e0      	b.n	800f3f2 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f430:	f8d9 2000 	ldr.w	r2, [r9]
 800f434:	68d2      	ldr	r2, [r2, #12]
 800f436:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f43a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800f43e:	428c      	cmp	r4, r1
 800f440:	d201      	bcs.n	800f446 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800f442:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f444:	e7d5      	b.n	800f3f2 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f446:	f108 0304 	add.w	r3, r8, #4
 800f44a:	4618      	mov	r0, r3
 800f44c:	9301      	str	r3, [sp, #4]
 800f44e:	f7fe febb 	bl	800e1c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f452:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800f456:	b119      	cbz	r1, 800f460 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f458:	f108 0018 	add.w	r0, r8, #24
 800f45c:	f7fe feb4 	bl	800e1c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f460:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800f464:	f8da 1000 	ldr.w	r1, [sl]
 800f468:	4288      	cmp	r0, r1
 800f46a:	d901      	bls.n	800f470 <xTaskIncrementTick+0xd4>
 800f46c:	f8ca 0000 	str.w	r0, [sl]
 800f470:	2314      	movs	r3, #20
 800f472:	9901      	ldr	r1, [sp, #4]
 800f474:	fb03 6000 	mla	r0, r3, r0, r6
 800f478:	f7fe fe84 	bl	800e184 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f47c:	6838      	ldr	r0, [r7, #0]
 800f47e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800f482:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800f484:	4291      	cmp	r1, r2
 800f486:	bf28      	it	cs
 800f488:	f04f 0b01 	movcs.w	fp, #1
 800f48c:	e7c8      	b.n	800f420 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800f48e:	4a0c      	ldr	r2, [pc, #48]	@ (800f4c0 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800f490:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800f494:	6813      	ldr	r3, [r2, #0]
 800f496:	3301      	adds	r3, #1
 800f498:	6013      	str	r3, [r2, #0]
 800f49a:	e7b9      	b.n	800f410 <xTaskIncrementTick+0x74>
 800f49c:	24025de8 	.word	0x24025de8
 800f4a0:	24025e08 	.word	0x24025e08
 800f4a4:	24025e54 	.word	0x24025e54
 800f4a8:	24025e50 	.word	0x24025e50
 800f4ac:	24025df4 	.word	0x24025df4
 800f4b0:	24025dec 	.word	0x24025dec
 800f4b4:	24025e80 	.word	0x24025e80
 800f4b8:	240262e0 	.word	0x240262e0
 800f4bc:	24025df8 	.word	0x24025df8
 800f4c0:	24025dfc 	.word	0x24025dfc
 800f4c4:	24025e04 	.word	0x24025e04

0800f4c8 <xTaskResumeAll>:
{
 800f4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800f4cc:	4c30      	ldr	r4, [pc, #192]	@ (800f590 <xTaskResumeAll+0xc8>)
 800f4ce:	6823      	ldr	r3, [r4, #0]
 800f4d0:	b943      	cbnz	r3, 800f4e4 <xTaskResumeAll+0x1c>
 800f4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	e7fe      	b.n	800f4e2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800f4e4:	f7fe fee6 	bl	800e2b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4ee:	6824      	ldr	r4, [r4, #0]
 800f4f0:	b12c      	cbz	r4, 800f4fe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800f4f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f4f4:	f7fe fefe 	bl	800e2f4 <vPortExitCritical>
}
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f4fe:	4b25      	ldr	r3, [pc, #148]	@ (800f594 <xTaskResumeAll+0xcc>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d0f5      	beq.n	800f4f2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f506:	4d24      	ldr	r5, [pc, #144]	@ (800f598 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800f508:	4e24      	ldr	r6, [pc, #144]	@ (800f59c <xTaskResumeAll+0xd4>)
 800f50a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800f5ac <xTaskResumeAll+0xe4>
 800f50e:	e01d      	b.n	800f54c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f510:	68eb      	ldr	r3, [r5, #12]
 800f512:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f514:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f516:	f104 0018 	add.w	r0, r4, #24
 800f51a:	f7fe fe55 	bl	800e1c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f51e:	4638      	mov	r0, r7
 800f520:	f7fe fe52 	bl	800e1c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f524:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f526:	6832      	ldr	r2, [r6, #0]
 800f528:	4293      	cmp	r3, r2
 800f52a:	d900      	bls.n	800f52e <xTaskResumeAll+0x66>
 800f52c:	6033      	str	r3, [r6, #0]
 800f52e:	2014      	movs	r0, #20
 800f530:	4639      	mov	r1, r7
 800f532:	fb00 8003 	mla	r0, r0, r3, r8
 800f536:	f7fe fe25 	bl	800e184 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f53a:	4b19      	ldr	r3, [pc, #100]	@ (800f5a0 <xTaskResumeAll+0xd8>)
 800f53c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f542:	429a      	cmp	r2, r3
 800f544:	d302      	bcc.n	800f54c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800f546:	4b17      	ldr	r3, [pc, #92]	@ (800f5a4 <xTaskResumeAll+0xdc>)
 800f548:	2201      	movs	r2, #1
 800f54a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1de      	bne.n	800f510 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800f552:	b10c      	cbz	r4, 800f558 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800f554:	f7ff fe00 	bl	800f158 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f558:	4d13      	ldr	r5, [pc, #76]	@ (800f5a8 <xTaskResumeAll+0xe0>)
 800f55a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800f55c:	b144      	cbz	r4, 800f570 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800f55e:	4e11      	ldr	r6, [pc, #68]	@ (800f5a4 <xTaskResumeAll+0xdc>)
 800f560:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800f562:	f7ff ff1b 	bl	800f39c <xTaskIncrementTick>
 800f566:	b100      	cbz	r0, 800f56a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800f568:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f56a:	3c01      	subs	r4, #1
 800f56c:	d1f9      	bne.n	800f562 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800f56e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800f570:	4b0c      	ldr	r3, [pc, #48]	@ (800f5a4 <xTaskResumeAll+0xdc>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d0bc      	beq.n	800f4f2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800f578:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f57c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f580:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800f58c:	2401      	movs	r4, #1
 800f58e:	e7b1      	b.n	800f4f4 <xTaskResumeAll+0x2c>
 800f590:	24025de8 	.word	0x24025de8
 800f594:	24025e0c 	.word	0x24025e0c
 800f598:	24025e3c 	.word	0x24025e3c
 800f59c:	24025e04 	.word	0x24025e04
 800f5a0:	240262e0 	.word	0x240262e0
 800f5a4:	24025df8 	.word	0x24025df8
 800f5a8:	24025dfc 	.word	0x24025dfc
 800f5ac:	24025e80 	.word	0x24025e80

0800f5b0 <vTaskSetApplicationTaskTag>:
	{
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	460d      	mov	r5, r1
		if( xTask == NULL )
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	b908      	cbnz	r0, 800f5bc <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800f5b8:	4b04      	ldr	r3, [pc, #16]	@ (800f5cc <vTaskSetApplicationTaskTag+0x1c>)
 800f5ba:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f5bc:	f7fe fe7a 	bl	800e2b4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800f5c0:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800f5c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800f5c6:	f7fe be95 	b.w	800e2f4 <vPortExitCritical>
 800f5ca:	bf00      	nop
 800f5cc:	240262e0 	.word	0x240262e0

0800f5d0 <xTaskCallApplicationTaskHook>:
	{
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	4608      	mov	r0, r1
		if( xTask == NULL )
 800f5d4:	b90b      	cbnz	r3, 800f5da <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800f5d6:	4b03      	ldr	r3, [pc, #12]	@ (800f5e4 <xTaskCallApplicationTaskHook+0x14>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800f5da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5dc:	b103      	cbz	r3, 800f5e0 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800f5de:	4718      	bx	r3
	}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	4770      	bx	lr
 800f5e4:	240262e0 	.word	0x240262e0

0800f5e8 <vTaskStartScheduler>:
{
 800f5e8:	b510      	push	{r4, lr}
 800f5ea:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f5ec:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f5ee:	aa07      	add	r2, sp, #28
 800f5f0:	a906      	add	r1, sp, #24
 800f5f2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f5f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f5f8:	f7fe fca2 	bl	800df40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f5fc:	9b05      	ldr	r3, [sp, #20]
 800f5fe:	9a07      	ldr	r2, [sp, #28]
 800f600:	9302      	str	r3, [sp, #8]
 800f602:	9b06      	ldr	r3, [sp, #24]
 800f604:	4919      	ldr	r1, [pc, #100]	@ (800f66c <vTaskStartScheduler+0x84>)
 800f606:	481a      	ldr	r0, [pc, #104]	@ (800f670 <vTaskStartScheduler+0x88>)
 800f608:	e9cd 4300 	strd	r4, r3, [sp]
 800f60c:	4623      	mov	r3, r4
 800f60e:	f7ff fe50 	bl	800f2b2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800f612:	b340      	cbz	r0, 800f666 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800f614:	f000 fa84 	bl	800fb20 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f618:	2801      	cmp	r0, #1
 800f61a:	d119      	bne.n	800f650 <vTaskStartScheduler+0x68>
 800f61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f620:	f383 8811 	msr	BASEPRI, r3
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800f62c:	f04f 32ff 	mov.w	r2, #4294967295
 800f630:	4b10      	ldr	r3, [pc, #64]	@ (800f674 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800f632:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800f634:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f636:	4b10      	ldr	r3, [pc, #64]	@ (800f678 <vTaskStartScheduler+0x90>)
 800f638:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f63a:	4b10      	ldr	r3, [pc, #64]	@ (800f67c <vTaskStartScheduler+0x94>)
 800f63c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800f63e:	4b10      	ldr	r3, [pc, #64]	@ (800f680 <vTaskStartScheduler+0x98>)
 800f640:	6818      	ldr	r0, [r3, #0]
 800f642:	f7ff ffc5 	bl	800f5d0 <xTaskCallApplicationTaskHook>
}
 800f646:	b008      	add	sp, #32
 800f648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800f64c:	f7fe bec2 	b.w	800e3d4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f650:	3001      	adds	r0, #1
 800f652:	d108      	bne.n	800f666 <vTaskStartScheduler+0x7e>
 800f654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f658:	f383 8811 	msr	BASEPRI, r3
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	f3bf 8f4f 	dsb	sy
 800f664:	e7fe      	b.n	800f664 <vTaskStartScheduler+0x7c>
}
 800f666:	b008      	add	sp, #32
 800f668:	bd10      	pop	{r4, pc}
 800f66a:	bf00      	nop
 800f66c:	08028b04 	.word	0x08028b04
 800f670:	0800f1b5 	.word	0x0800f1b5
 800f674:	24025dec 	.word	0x24025dec
 800f678:	24025e00 	.word	0x24025e00
 800f67c:	24025e08 	.word	0x24025e08
 800f680:	240262e0 	.word	0x240262e0

0800f684 <vTaskSwitchContext>:
{
 800f684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f686:	4b1c      	ldr	r3, [pc, #112]	@ (800f6f8 <vTaskSwitchContext+0x74>)
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	4b1c      	ldr	r3, [pc, #112]	@ (800f6fc <vTaskSwitchContext+0x78>)
 800f68c:	b112      	cbz	r2, 800f694 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800f68e:	2201      	movs	r2, #1
 800f690:	601a      	str	r2, [r3, #0]
}
 800f692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800f694:	4c1a      	ldr	r4, [pc, #104]	@ (800f700 <vTaskSwitchContext+0x7c>)
 800f696:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f698:	4e1a      	ldr	r6, [pc, #104]	@ (800f704 <vTaskSwitchContext+0x80>)
 800f69a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800f69c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800f69e:	6820      	ldr	r0, [r4, #0]
 800f6a0:	f7ff ff96 	bl	800f5d0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6a4:	6832      	ldr	r2, [r6, #0]
 800f6a6:	4918      	ldr	r1, [pc, #96]	@ (800f708 <vTaskSwitchContext+0x84>)
 800f6a8:	fb07 f302 	mul.w	r3, r7, r2
 800f6ac:	58cd      	ldr	r5, [r1, r3]
 800f6ae:	18c8      	adds	r0, r1, r3
 800f6b0:	b1ad      	cbz	r5, 800f6de <vTaskSwitchContext+0x5a>
 800f6b2:	6845      	ldr	r5, [r0, #4]
 800f6b4:	3308      	adds	r3, #8
 800f6b6:	686d      	ldr	r5, [r5, #4]
 800f6b8:	440b      	add	r3, r1
 800f6ba:	429d      	cmp	r5, r3
 800f6bc:	6045      	str	r5, [r0, #4]
 800f6be:	bf04      	itt	eq
 800f6c0:	686b      	ldreq	r3, [r5, #4]
 800f6c2:	6043      	streq	r3, [r0, #4]
 800f6c4:	2314      	movs	r3, #20
 800f6c6:	fb03 1102 	mla	r1, r3, r2, r1
 800f6ca:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800f6cc:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	6023      	str	r3, [r4, #0]
 800f6d2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800f6d4:	6820      	ldr	r0, [r4, #0]
}
 800f6d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800f6da:	f7ff bf79 	b.w	800f5d0 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6de:	b942      	cbnz	r2, 800f6f2 <vTaskSwitchContext+0x6e>
 800f6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6e4:	f383 8811 	msr	BASEPRI, r3
 800f6e8:	f3bf 8f6f 	isb	sy
 800f6ec:	f3bf 8f4f 	dsb	sy
 800f6f0:	e7fe      	b.n	800f6f0 <vTaskSwitchContext+0x6c>
 800f6f2:	3a01      	subs	r2, #1
 800f6f4:	e7d8      	b.n	800f6a8 <vTaskSwitchContext+0x24>
 800f6f6:	bf00      	nop
 800f6f8:	24025de8 	.word	0x24025de8
 800f6fc:	24025df8 	.word	0x24025df8
 800f700:	240262e0 	.word	0x240262e0
 800f704:	24025e04 	.word	0x24025e04
 800f708:	24025e80 	.word	0x24025e80

0800f70c <vTaskPlaceOnEventList>:
{
 800f70c:	b510      	push	{r4, lr}
 800f70e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800f710:	b940      	cbnz	r0, 800f724 <vTaskPlaceOnEventList+0x18>
 800f712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	e7fe      	b.n	800f722 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f724:	4b05      	ldr	r3, [pc, #20]	@ (800f73c <vTaskPlaceOnEventList+0x30>)
 800f726:	6819      	ldr	r1, [r3, #0]
 800f728:	3118      	adds	r1, #24
 800f72a:	f7fe fd36 	bl	800e19a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f72e:	4620      	mov	r0, r4
 800f730:	2101      	movs	r1, #1
}
 800f732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f736:	f7ff bcd7 	b.w	800f0e8 <prvAddCurrentTaskToDelayedList>
 800f73a:	bf00      	nop
 800f73c:	240262e0 	.word	0x240262e0

0800f740 <vTaskPlaceOnEventListRestricted>:
	{
 800f740:	b538      	push	{r3, r4, r5, lr}
 800f742:	460d      	mov	r5, r1
 800f744:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800f746:	b940      	cbnz	r0, 800f75a <vTaskPlaceOnEventListRestricted+0x1a>
 800f748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f74c:	f383 8811 	msr	BASEPRI, r3
 800f750:	f3bf 8f6f 	isb	sy
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	e7fe      	b.n	800f758 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f75a:	4b07      	ldr	r3, [pc, #28]	@ (800f778 <vTaskPlaceOnEventListRestricted+0x38>)
 800f75c:	6819      	ldr	r1, [r3, #0]
 800f75e:	3118      	adds	r1, #24
 800f760:	f7fe fd10 	bl	800e184 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800f764:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f766:	4621      	mov	r1, r4
 800f768:	bf0c      	ite	eq
 800f76a:	4628      	moveq	r0, r5
 800f76c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800f770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f774:	f7ff bcb8 	b.w	800f0e8 <prvAddCurrentTaskToDelayedList>
 800f778:	240262e0 	.word	0x240262e0

0800f77c <xTaskRemoveFromEventList>:
{
 800f77c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f77e:	68c3      	ldr	r3, [r0, #12]
 800f780:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f782:	b944      	cbnz	r4, 800f796 <xTaskRemoveFromEventList+0x1a>
 800f784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f788:	f383 8811 	msr	BASEPRI, r3
 800f78c:	f3bf 8f6f 	isb	sy
 800f790:	f3bf 8f4f 	dsb	sy
 800f794:	e7fe      	b.n	800f794 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f796:	f104 0518 	add.w	r5, r4, #24
 800f79a:	4628      	mov	r0, r5
 800f79c:	f7fe fd14 	bl	800e1c8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7a0:	4b11      	ldr	r3, [pc, #68]	@ (800f7e8 <xTaskRemoveFromEventList+0x6c>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	b9d3      	cbnz	r3, 800f7dc <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f7a6:	1d25      	adds	r5, r4, #4
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	f7fe fd0d 	bl	800e1c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f7ae:	4a0f      	ldr	r2, [pc, #60]	@ (800f7ec <xTaskRemoveFromEventList+0x70>)
 800f7b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f7b2:	6811      	ldr	r1, [r2, #0]
 800f7b4:	428b      	cmp	r3, r1
 800f7b6:	d900      	bls.n	800f7ba <xTaskRemoveFromEventList+0x3e>
 800f7b8:	6013      	str	r3, [r2, #0]
 800f7ba:	2014      	movs	r0, #20
 800f7bc:	4a0c      	ldr	r2, [pc, #48]	@ (800f7f0 <xTaskRemoveFromEventList+0x74>)
 800f7be:	4629      	mov	r1, r5
 800f7c0:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f7c4:	f7fe fcde 	bl	800e184 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f7c8:	4b0a      	ldr	r3, [pc, #40]	@ (800f7f4 <xTaskRemoveFromEventList+0x78>)
 800f7ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d906      	bls.n	800f7e2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800f7d4:	2001      	movs	r0, #1
 800f7d6:	4b08      	ldr	r3, [pc, #32]	@ (800f7f8 <xTaskRemoveFromEventList+0x7c>)
 800f7d8:	6018      	str	r0, [r3, #0]
}
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f7dc:	4629      	mov	r1, r5
 800f7de:	4807      	ldr	r0, [pc, #28]	@ (800f7fc <xTaskRemoveFromEventList+0x80>)
 800f7e0:	e7f0      	b.n	800f7c4 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800f7e2:	2000      	movs	r0, #0
	return xReturn;
 800f7e4:	e7f9      	b.n	800f7da <xTaskRemoveFromEventList+0x5e>
 800f7e6:	bf00      	nop
 800f7e8:	24025de8 	.word	0x24025de8
 800f7ec:	24025e04 	.word	0x24025e04
 800f7f0:	24025e80 	.word	0x24025e80
 800f7f4:	240262e0 	.word	0x240262e0
 800f7f8:	24025df8 	.word	0x24025df8
 800f7fc:	24025e3c 	.word	0x24025e3c

0800f800 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f800:	4b03      	ldr	r3, [pc, #12]	@ (800f810 <vTaskInternalSetTimeOutState+0x10>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f806:	4b03      	ldr	r3, [pc, #12]	@ (800f814 <vTaskInternalSetTimeOutState+0x14>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	6043      	str	r3, [r0, #4]
}
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	24025df4 	.word	0x24025df4
 800f814:	24025e08 	.word	0x24025e08

0800f818 <xTaskCheckForTimeOut>:
{
 800f818:	b570      	push	{r4, r5, r6, lr}
 800f81a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800f81c:	4605      	mov	r5, r0
 800f81e:	b940      	cbnz	r0, 800f832 <xTaskCheckForTimeOut+0x1a>
 800f820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f824:	f383 8811 	msr	BASEPRI, r3
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	e7fe      	b.n	800f830 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800f832:	b941      	cbnz	r1, 800f846 <xTaskCheckForTimeOut+0x2e>
 800f834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	e7fe      	b.n	800f844 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800f846:	f7fe fd35 	bl	800e2b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f84a:	4b0f      	ldr	r3, [pc, #60]	@ (800f888 <xTaskCheckForTimeOut+0x70>)
 800f84c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	1c5a      	adds	r2, r3, #1
 800f852:	d010      	beq.n	800f876 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f854:	480d      	ldr	r0, [pc, #52]	@ (800f88c <xTaskCheckForTimeOut+0x74>)
 800f856:	682e      	ldr	r6, [r5, #0]
 800f858:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f85a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f85c:	4286      	cmp	r6, r0
 800f85e:	d001      	beq.n	800f864 <xTaskCheckForTimeOut+0x4c>
 800f860:	428a      	cmp	r2, r1
 800f862:	d90f      	bls.n	800f884 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f864:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f866:	4283      	cmp	r3, r0
 800f868:	d90a      	bls.n	800f880 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800f86a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f86c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800f86e:	4413      	add	r3, r2
 800f870:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f872:	f7ff ffc5 	bl	800f800 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800f876:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f878:	f7fe fd3c 	bl	800e2f4 <vPortExitCritical>
}
 800f87c:	4620      	mov	r0, r4
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800f880:	2300      	movs	r3, #0
 800f882:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800f884:	2401      	movs	r4, #1
 800f886:	e7f7      	b.n	800f878 <xTaskCheckForTimeOut+0x60>
 800f888:	24025e08 	.word	0x24025e08
 800f88c:	24025df4 	.word	0x24025df4

0800f890 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f890:	4b01      	ldr	r3, [pc, #4]	@ (800f898 <vTaskMissedYield+0x8>)
 800f892:	2201      	movs	r2, #1
 800f894:	601a      	str	r2, [r3, #0]
}
 800f896:	4770      	bx	lr
 800f898:	24025df8 	.word	0x24025df8

0800f89c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800f89c:	4b01      	ldr	r3, [pc, #4]	@ (800f8a4 <xTaskGetCurrentTaskHandle+0x8>)
 800f89e:	6818      	ldr	r0, [r3, #0]
	}
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	240262e0 	.word	0x240262e0

0800f8a8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f8a8:	4b05      	ldr	r3, [pc, #20]	@ (800f8c0 <xTaskGetSchedulerState+0x18>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	b133      	cbz	r3, 800f8bc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8ae:	4b05      	ldr	r3, [pc, #20]	@ (800f8c4 <xTaskGetSchedulerState+0x1c>)
 800f8b0:	6818      	ldr	r0, [r3, #0]
 800f8b2:	fab0 f080 	clz	r0, r0
 800f8b6:	0940      	lsrs	r0, r0, #5
 800f8b8:	0040      	lsls	r0, r0, #1
 800f8ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f8bc:	2001      	movs	r0, #1
	}
 800f8be:	4770      	bx	lr
 800f8c0:	24025e00 	.word	0x24025e00
 800f8c4:	24025de8 	.word	0x24025de8

0800f8c8 <xTaskPriorityInherit>:
	{
 800f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	b338      	cbz	r0, 800f91e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f8ce:	4d1a      	ldr	r5, [pc, #104]	@ (800f938 <xTaskPriorityInherit+0x70>)
 800f8d0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800f8d2:	682a      	ldr	r2, [r5, #0]
 800f8d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d226      	bcs.n	800f928 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f8da:	6982      	ldr	r2, [r0, #24]
 800f8dc:	2a00      	cmp	r2, #0
 800f8de:	db04      	blt.n	800f8ea <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8e0:	682a      	ldr	r2, [r5, #0]
 800f8e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f8e4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800f8e8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f8ea:	2214      	movs	r2, #20
 800f8ec:	4e13      	ldr	r6, [pc, #76]	@ (800f93c <xTaskPriorityInherit+0x74>)
 800f8ee:	fb02 6303 	mla	r3, r2, r3, r6
 800f8f2:	6962      	ldr	r2, [r4, #20]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d113      	bne.n	800f920 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8f8:	1d27      	adds	r7, r4, #4
 800f8fa:	4638      	mov	r0, r7
 800f8fc:	f7fe fc64 	bl	800e1c8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f900:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f902:	4a0f      	ldr	r2, [pc, #60]	@ (800f940 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f906:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f908:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f90a:	428b      	cmp	r3, r1
 800f90c:	d900      	bls.n	800f910 <xTaskPriorityInherit+0x48>
 800f90e:	6013      	str	r3, [r2, #0]
 800f910:	2014      	movs	r0, #20
 800f912:	4639      	mov	r1, r7
 800f914:	fb00 6003 	mla	r0, r0, r3, r6
 800f918:	f7fe fc34 	bl	800e184 <vListInsertEnd>
				xReturn = pdTRUE;
 800f91c:	2001      	movs	r0, #1
	}
 800f91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f926:	e7f9      	b.n	800f91c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f928:	682b      	ldr	r3, [r5, #0]
 800f92a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800f92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f92e:	4298      	cmp	r0, r3
 800f930:	bf2c      	ite	cs
 800f932:	2000      	movcs	r0, #0
 800f934:	2001      	movcc	r0, #1
 800f936:	e7f2      	b.n	800f91e <xTaskPriorityInherit+0x56>
 800f938:	240262e0 	.word	0x240262e0
 800f93c:	24025e80 	.word	0x24025e80
 800f940:	24025e04 	.word	0x24025e04

0800f944 <xTaskPriorityDisinherit>:
	{
 800f944:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800f946:	b908      	cbnz	r0, 800f94c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800f948:	2000      	movs	r0, #0
	}
 800f94a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800f94c:	4b1b      	ldr	r3, [pc, #108]	@ (800f9bc <xTaskPriorityDisinherit+0x78>)
 800f94e:	681c      	ldr	r4, [r3, #0]
 800f950:	4284      	cmp	r4, r0
 800f952:	d008      	beq.n	800f966 <xTaskPriorityDisinherit+0x22>
 800f954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f958:	f383 8811 	msr	BASEPRI, r3
 800f95c:	f3bf 8f6f 	isb	sy
 800f960:	f3bf 8f4f 	dsb	sy
 800f964:	e7fe      	b.n	800f964 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800f966:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f968:	b943      	cbnz	r3, 800f97c <xTaskPriorityDisinherit+0x38>
 800f96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f96e:	f383 8811 	msr	BASEPRI, r3
 800f972:	f3bf 8f6f 	isb	sy
 800f976:	f3bf 8f4f 	dsb	sy
 800f97a:	e7fe      	b.n	800f97a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f97c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800f97e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f980:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800f982:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f984:	4291      	cmp	r1, r2
 800f986:	d0df      	beq.n	800f948 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1dd      	bne.n	800f948 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f98c:	1d25      	adds	r5, r4, #4
 800f98e:	4628      	mov	r0, r5
 800f990:	f7fe fc1a 	bl	800e1c8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f994:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f996:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f99a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f99c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f99e:	4a08      	ldr	r2, [pc, #32]	@ (800f9c0 <xTaskPriorityDisinherit+0x7c>)
 800f9a0:	6811      	ldr	r1, [r2, #0]
 800f9a2:	428b      	cmp	r3, r1
 800f9a4:	d900      	bls.n	800f9a8 <xTaskPriorityDisinherit+0x64>
 800f9a6:	6013      	str	r3, [r2, #0]
 800f9a8:	4a06      	ldr	r2, [pc, #24]	@ (800f9c4 <xTaskPriorityDisinherit+0x80>)
 800f9aa:	2014      	movs	r0, #20
 800f9ac:	4629      	mov	r1, r5
 800f9ae:	fb00 2003 	mla	r0, r0, r3, r2
 800f9b2:	f7fe fbe7 	bl	800e184 <vListInsertEnd>
					xReturn = pdTRUE;
 800f9b6:	2001      	movs	r0, #1
		return xReturn;
 800f9b8:	e7c7      	b.n	800f94a <xTaskPriorityDisinherit+0x6>
 800f9ba:	bf00      	nop
 800f9bc:	240262e0 	.word	0x240262e0
 800f9c0:	24025e04 	.word	0x24025e04
 800f9c4:	24025e80 	.word	0x24025e80

0800f9c8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800f9c8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d042      	beq.n	800fa56 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800f9d0:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800f9d2:	b942      	cbnz	r2, 800f9e6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800f9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d8:	f383 8811 	msr	BASEPRI, r3
 800f9dc:	f3bf 8f6f 	isb	sy
 800f9e0:	f3bf 8f4f 	dsb	sy
 800f9e4:	e7fe      	b.n	800f9e4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f9e6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800f9e8:	4299      	cmp	r1, r3
 800f9ea:	bf38      	it	cc
 800f9ec:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f9ee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800f9f0:	428b      	cmp	r3, r1
 800f9f2:	d030      	beq.n	800fa56 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f9f4:	2a01      	cmp	r2, #1
 800f9f6:	d12e      	bne.n	800fa56 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800f9f8:	4a17      	ldr	r2, [pc, #92]	@ (800fa58 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800f9fa:	6812      	ldr	r2, [r2, #0]
 800f9fc:	4282      	cmp	r2, r0
 800f9fe:	d108      	bne.n	800fa12 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800fa00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	e7fe      	b.n	800fa10 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa12:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa14:	4d11      	ldr	r5, [pc, #68]	@ (800fa5c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa16:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa18:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800fa1c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa1e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa22:	bfa8      	it	ge
 800fa24:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa28:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa2a:	bfa8      	it	ge
 800fa2c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d111      	bne.n	800fa56 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa32:	1d06      	adds	r6, r0, #4
 800fa34:	4630      	mov	r0, r6
 800fa36:	f7fe fbc7 	bl	800e1c8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800fa3a:	4a09      	ldr	r2, [pc, #36]	@ (800fa60 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800fa3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fa3e:	6811      	ldr	r1, [r2, #0]
 800fa40:	428b      	cmp	r3, r1
 800fa42:	d900      	bls.n	800fa46 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800fa44:	6013      	str	r3, [r2, #0]
 800fa46:	2014      	movs	r0, #20
 800fa48:	4631      	mov	r1, r6
 800fa4a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800fa4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800fa52:	f7fe bb97 	b.w	800e184 <vListInsertEnd>
	}
 800fa56:	bd70      	pop	{r4, r5, r6, pc}
 800fa58:	240262e0 	.word	0x240262e0
 800fa5c:	24025e80 	.word	0x24025e80
 800fa60:	24025e04 	.word	0x24025e04

0800fa64 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800fa64:	4b04      	ldr	r3, [pc, #16]	@ (800fa78 <pvTaskIncrementMutexHeldCount+0x14>)
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	b11a      	cbz	r2, 800fa72 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800fa6a:	6819      	ldr	r1, [r3, #0]
 800fa6c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800fa6e:	3201      	adds	r2, #1
 800fa70:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800fa72:	6818      	ldr	r0, [r3, #0]
	}
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	240262e0 	.word	0x240262e0

0800fa7c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800fa7c:	4291      	cmp	r1, r2
{
 800fa7e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fa80:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa82:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800fa84:	d80a      	bhi.n	800fa9c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa86:	1ad2      	subs	r2, r2, r3
 800fa88:	6983      	ldr	r3, [r0, #24]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d20d      	bcs.n	800faaa <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa8e:	1d01      	adds	r1, r0, #4
 800fa90:	4b07      	ldr	r3, [pc, #28]	@ (800fab0 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa92:	6818      	ldr	r0, [r3, #0]
 800fa94:	f7fe fb81 	bl	800e19a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fa98:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800fa9a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d201      	bcs.n	800faa4 <prvInsertTimerInActiveList+0x28>
 800faa0:	4299      	cmp	r1, r3
 800faa2:	d202      	bcs.n	800faaa <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800faa4:	1d01      	adds	r1, r0, #4
 800faa6:	4b03      	ldr	r3, [pc, #12]	@ (800fab4 <prvInsertTimerInActiveList+0x38>)
 800faa8:	e7f3      	b.n	800fa92 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800faaa:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800faac:	e7f5      	b.n	800fa9a <prvInsertTimerInActiveList+0x1e>
 800faae:	bf00      	nop
 800fab0:	240263e0 	.word	0x240263e0
 800fab4:	240263e4 	.word	0x240263e4

0800fab8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800faba:	4c11      	ldr	r4, [pc, #68]	@ (800fb00 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800fabc:	f7fe fbfa 	bl	800e2b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800fac0:	6825      	ldr	r5, [r4, #0]
 800fac2:	b9bd      	cbnz	r5, 800faf4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800fac4:	4f0f      	ldr	r7, [pc, #60]	@ (800fb04 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800fac6:	4e10      	ldr	r6, [pc, #64]	@ (800fb08 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800fac8:	4638      	mov	r0, r7
 800faca:	f7fe fb4d 	bl	800e168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800face:	4630      	mov	r0, r6
 800fad0:	f7fe fb4a 	bl	800e168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fad4:	4b0d      	ldr	r3, [pc, #52]	@ (800fb0c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fad6:	4a0e      	ldr	r2, [pc, #56]	@ (800fb10 <prvCheckForValidListAndQueue+0x58>)
 800fad8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800fada:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fadc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800fade:	4b0d      	ldr	r3, [pc, #52]	@ (800fb14 <prvCheckForValidListAndQueue+0x5c>)
 800fae0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fae2:	4b0d      	ldr	r3, [pc, #52]	@ (800fb18 <prvCheckForValidListAndQueue+0x60>)
 800fae4:	9500      	str	r5, [sp, #0]
 800fae6:	f7fe fdef 	bl	800e6c8 <xQueueGenericCreateStatic>
 800faea:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800faec:	b110      	cbz	r0, 800faf4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800faee:	490b      	ldr	r1, [pc, #44]	@ (800fb1c <prvCheckForValidListAndQueue+0x64>)
 800faf0:	f7ff fa1a 	bl	800ef28 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800faf4:	b003      	add	sp, #12
 800faf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800fafa:	f7fe bbfb 	b.w	800e2f4 <vPortExitCritical>
 800fafe:	bf00      	nop
 800fb00:	240263dc 	.word	0x240263dc
 800fb04:	240263fc 	.word	0x240263fc
 800fb08:	240263e8 	.word	0x240263e8
 800fb0c:	240263e4 	.word	0x240263e4
 800fb10:	24026334 	.word	0x24026334
 800fb14:	240263e0 	.word	0x240263e0
 800fb18:	240262e4 	.word	0x240262e4
 800fb1c:	08028b09 	.word	0x08028b09

0800fb20 <xTimerCreateTimerTask>:
{
 800fb20:	b510      	push	{r4, lr}
 800fb22:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800fb24:	f7ff ffc8 	bl	800fab8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fb28:	4b12      	ldr	r3, [pc, #72]	@ (800fb74 <xTimerCreateTimerTask+0x54>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	b1b3      	cbz	r3, 800fb5c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fb2e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fb30:	aa07      	add	r2, sp, #28
 800fb32:	a906      	add	r1, sp, #24
 800fb34:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fb36:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fb3a:	f7fe fa0d 	bl	800df58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fb3e:	9b05      	ldr	r3, [sp, #20]
 800fb40:	9a07      	ldr	r2, [sp, #28]
 800fb42:	9302      	str	r3, [sp, #8]
 800fb44:	9b06      	ldr	r3, [sp, #24]
 800fb46:	490c      	ldr	r1, [pc, #48]	@ (800fb78 <xTimerCreateTimerTask+0x58>)
 800fb48:	9301      	str	r3, [sp, #4]
 800fb4a:	2302      	movs	r3, #2
 800fb4c:	480b      	ldr	r0, [pc, #44]	@ (800fb7c <xTimerCreateTimerTask+0x5c>)
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	4623      	mov	r3, r4
 800fb52:	f7ff fbae 	bl	800f2b2 <xTaskCreateStatic>
 800fb56:	4b0a      	ldr	r3, [pc, #40]	@ (800fb80 <xTimerCreateTimerTask+0x60>)
 800fb58:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800fb5a:	b940      	cbnz	r0, 800fb6e <xTimerCreateTimerTask+0x4e>
 800fb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800fb6c:	e7fe      	b.n	800fb6c <xTimerCreateTimerTask+0x4c>
}
 800fb6e:	2001      	movs	r0, #1
 800fb70:	b008      	add	sp, #32
 800fb72:	bd10      	pop	{r4, pc}
 800fb74:	240263dc 	.word	0x240263dc
 800fb78:	08028b0e 	.word	0x08028b0e
 800fb7c:	0800fc7d 	.word	0x0800fc7d
 800fb80:	240263d8 	.word	0x240263d8

0800fb84 <xTimerGenericCommand>:
{
 800fb84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fb86:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800fb88:	4604      	mov	r4, r0
{
 800fb8a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800fb8c:	b940      	cbnz	r0, 800fba0 <xTimerGenericCommand+0x1c>
 800fb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	e7fe      	b.n	800fb9e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800fba0:	4d0c      	ldr	r5, [pc, #48]	@ (800fbd4 <xTimerGenericCommand+0x50>)
 800fba2:	6828      	ldr	r0, [r5, #0]
 800fba4:	b178      	cbz	r0, 800fbc6 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fba6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fba8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fbaa:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fbae:	dc0c      	bgt.n	800fbca <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fbb0:	f7ff fe7a 	bl	800f8a8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fbb4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fbb6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fbb8:	4669      	mov	r1, sp
 800fbba:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fbbc:	bf0c      	ite	eq
 800fbbe:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fbc0:	461a      	movne	r2, r3
 800fbc2:	f7fe fe36 	bl	800e832 <xQueueGenericSend>
}
 800fbc6:	b004      	add	sp, #16
 800fbc8:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fbca:	2300      	movs	r3, #0
 800fbcc:	4669      	mov	r1, sp
 800fbce:	f7fe ff33 	bl	800ea38 <xQueueGenericSendFromISR>
 800fbd2:	e7f8      	b.n	800fbc6 <xTimerGenericCommand+0x42>
 800fbd4:	240263dc 	.word	0x240263dc

0800fbd8 <prvSampleTimeNow>:
{
 800fbd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800fbdc:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800fc78 <prvSampleTimeNow+0xa0>
{
 800fbe0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800fbe2:	f7ff fbd5 	bl	800f390 <xTaskGetTickCount>
 800fbe6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800fbe8:	f8d8 3000 	ldr.w	r3, [r8]
 800fbec:	4283      	cmp	r3, r0
 800fbee:	d909      	bls.n	800fc04 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbf0:	4f1f      	ldr	r7, [pc, #124]	@ (800fc70 <prvSampleTimeNow+0x98>)
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	b96a      	cbnz	r2, 800fc14 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800fbf8:	4a1e      	ldr	r2, [pc, #120]	@ (800fc74 <prvSampleTimeNow+0x9c>)
 800fbfa:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fbfc:	6013      	str	r3, [r2, #0]
 800fbfe:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800fc00:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800fc02:	e000      	b.n	800fc06 <prvSampleTimeNow+0x2e>
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800fc08:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800fc0a:	f8c8 5000 	str.w	r5, [r8]
}
 800fc0e:	b002      	add	sp, #8
 800fc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc14:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc16:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc18:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc1c:	f104 0a04 	add.w	sl, r4, #4
 800fc20:	4650      	mov	r0, sl
 800fc22:	f7fe fad1 	bl	800e1c8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc26:	6a23      	ldr	r3, [r4, #32]
 800fc28:	4620      	mov	r0, r4
 800fc2a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc2c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fc30:	075b      	lsls	r3, r3, #29
 800fc32:	d5de      	bpl.n	800fbf2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fc34:	69a3      	ldr	r3, [r4, #24]
 800fc36:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800fc38:	4599      	cmp	r9, r3
 800fc3a:	d206      	bcs.n	800fc4a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc3c:	4651      	mov	r1, sl
 800fc3e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fc40:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc42:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc44:	f7fe faa9 	bl	800e19a <vListInsert>
 800fc48:	e7d3      	b.n	800fbf2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	464a      	mov	r2, r9
 800fc4e:	4620      	mov	r0, r4
 800fc50:	4619      	mov	r1, r3
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	f7ff ff96 	bl	800fb84 <xTimerGenericCommand>
				configASSERT( xResult );
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d1ca      	bne.n	800fbf2 <prvSampleTimeNow+0x1a>
 800fc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc60:	f383 8811 	msr	BASEPRI, r3
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	f3bf 8f4f 	dsb	sy
 800fc6c:	e7fe      	b.n	800fc6c <prvSampleTimeNow+0x94>
 800fc6e:	bf00      	nop
 800fc70:	240263e4 	.word	0x240263e4
 800fc74:	240263e0 	.word	0x240263e0
 800fc78:	240263d4 	.word	0x240263d4

0800fc7c <prvTimerTask>:
{
 800fc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc80:	4d6e      	ldr	r5, [pc, #440]	@ (800fe3c <prvTimerTask+0x1c0>)
{
 800fc82:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc84:	4e6e      	ldr	r6, [pc, #440]	@ (800fe40 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc86:	682b      	ldr	r3, [r5, #0]
 800fc88:	f8d3 8000 	ldr.w	r8, [r3]
 800fc8c:	f1b8 0f00 	cmp.w	r8, #0
 800fc90:	d035      	beq.n	800fcfe <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc92:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc94:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc96:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800fc9a:	f7ff fb71 	bl	800f380 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc9e:	a804      	add	r0, sp, #16
 800fca0:	f7ff ff9a 	bl	800fbd8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800fca4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fca6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d169      	bne.n	800fd80 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fcac:	2c00      	cmp	r4, #0
 800fcae:	d14c      	bne.n	800fd4a <prvTimerTask+0xce>
 800fcb0:	4540      	cmp	r0, r8
 800fcb2:	d350      	bcc.n	800fd56 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800fcb4:	f7ff fc08 	bl	800f4c8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcb8:	682b      	ldr	r3, [r5, #0]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fcbe:	1d38      	adds	r0, r7, #4
 800fcc0:	f7fe fa82 	bl	800e1c8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fcc8:	0758      	lsls	r0, r3, #29
 800fcca:	d51a      	bpl.n	800fd02 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fccc:	69b9      	ldr	r1, [r7, #24]
 800fcce:	4643      	mov	r3, r8
 800fcd0:	464a      	mov	r2, r9
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	4441      	add	r1, r8
 800fcd6:	f7ff fed1 	bl	800fa7c <prvInsertTimerInActiveList>
 800fcda:	b1b0      	cbz	r0, 800fd0a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fcdc:	4623      	mov	r3, r4
 800fcde:	4642      	mov	r2, r8
 800fce0:	4621      	mov	r1, r4
 800fce2:	4638      	mov	r0, r7
 800fce4:	9400      	str	r4, [sp, #0]
 800fce6:	f7ff ff4d 	bl	800fb84 <xTimerGenericCommand>
			configASSERT( xResult );
 800fcea:	b970      	cbnz	r0, 800fd0a <prvTimerTask+0x8e>
 800fcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf0:	f383 8811 	msr	BASEPRI, r3
 800fcf4:	f3bf 8f6f 	isb	sy
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	e7fe      	b.n	800fcfc <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fcfe:	2401      	movs	r4, #1
 800fd00:	e7cb      	b.n	800fc9a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd02:	f023 0301 	bic.w	r3, r3, #1
 800fd06:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd0a:	6a3b      	ldr	r3, [r7, #32]
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd10:	2200      	movs	r2, #0
 800fd12:	a904      	add	r1, sp, #16
 800fd14:	6830      	ldr	r0, [r6, #0]
 800fd16:	f7fe ff3d 	bl	800eb94 <xQueueReceive>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d0b3      	beq.n	800fc86 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd1e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd20:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	db2f      	blt.n	800fd86 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd26:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd28:	6963      	ldr	r3, [r4, #20]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d132      	bne.n	800fd94 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd2e:	a803      	add	r0, sp, #12
 800fd30:	f7ff ff52 	bl	800fbd8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800fd34:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd36:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800fd38:	2b09      	cmp	r3, #9
 800fd3a:	d8e9      	bhi.n	800fd10 <prvTimerTask+0x94>
 800fd3c:	e8df f003 	tbb	[pc, r3]
 800fd40:	572e2e2e 	.word	0x572e2e2e
 800fd44:	2e2e765e 	.word	0x2e2e765e
 800fd48:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fd4a:	4b3e      	ldr	r3, [pc, #248]	@ (800fe44 <prvTimerTask+0x1c8>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	681c      	ldr	r4, [r3, #0]
 800fd50:	fab4 f484 	clz	r4, r4
 800fd54:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fd56:	4622      	mov	r2, r4
 800fd58:	eba8 0109 	sub.w	r1, r8, r9
 800fd5c:	6830      	ldr	r0, [r6, #0]
 800fd5e:	f7ff f922 	bl	800efa6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd62:	f7ff fbb1 	bl	800f4c8 <xTaskResumeAll>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d1d2      	bne.n	800fd10 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800fd6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fd6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	f3bf 8f6f 	isb	sy
 800fd7e:	e7c7      	b.n	800fd10 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800fd80:	f7ff fba2 	bl	800f4c8 <xTaskResumeAll>
}
 800fd84:	e7c4      	b.n	800fd10 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd86:	9b05      	ldr	r3, [sp, #20]
 800fd88:	9907      	ldr	r1, [sp, #28]
 800fd8a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd8c:	9b04      	ldr	r3, [sp, #16]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	dbbe      	blt.n	800fd10 <prvTimerTask+0x94>
 800fd92:	e7c8      	b.n	800fd26 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd94:	1d20      	adds	r0, r4, #4
 800fd96:	f7fe fa17 	bl	800e1c8 <uxListRemove>
 800fd9a:	e7c8      	b.n	800fd2e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fd9c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fda0:	4620      	mov	r0, r4
 800fda2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fda4:	f043 0301 	orr.w	r3, r3, #1
 800fda8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fdac:	9b05      	ldr	r3, [sp, #20]
 800fdae:	4419      	add	r1, r3
 800fdb0:	f7ff fe64 	bl	800fa7c <prvInsertTimerInActiveList>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d0ab      	beq.n	800fd10 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdb8:	6a23      	ldr	r3, [r4, #32]
 800fdba:	4620      	mov	r0, r4
 800fdbc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fdbe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fdc2:	0759      	lsls	r1, r3, #29
 800fdc4:	d5a4      	bpl.n	800fd10 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fdc6:	69a2      	ldr	r2, [r4, #24]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9905      	ldr	r1, [sp, #20]
 800fdcc:	4620      	mov	r0, r4
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	440a      	add	r2, r1
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	f7ff fed6 	bl	800fb84 <xTimerGenericCommand>
							configASSERT( xResult );
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d199      	bne.n	800fd10 <prvTimerTask+0x94>
 800fddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	e7fe      	b.n	800fdec <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fdee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fdf2:	f023 0301 	bic.w	r3, r3, #1
 800fdf6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800fdfa:	e789      	b.n	800fd10 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fdfc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fe00:	f043 0301 	orr.w	r3, r3, #1
 800fe04:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe08:	9905      	ldr	r1, [sp, #20]
 800fe0a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe0c:	b941      	cbnz	r1, 800fe20 <prvTimerTask+0x1a4>
 800fe0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe12:	f383 8811 	msr	BASEPRI, r3
 800fe16:	f3bf 8f6f 	isb	sy
 800fe1a:	f3bf 8f4f 	dsb	sy
 800fe1e:	e7fe      	b.n	800fe1e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe20:	4603      	mov	r3, r0
 800fe22:	4401      	add	r1, r0
 800fe24:	4620      	mov	r0, r4
 800fe26:	f7ff fe29 	bl	800fa7c <prvInsertTimerInActiveList>
					break;
 800fe2a:	e771      	b.n	800fd10 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe2c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fe30:	079a      	lsls	r2, r3, #30
 800fe32:	d4de      	bmi.n	800fdf2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800fe34:	4620      	mov	r0, r4
 800fe36:	f7fe f959 	bl	800e0ec <vPortFree>
 800fe3a:	e769      	b.n	800fd10 <prvTimerTask+0x94>
 800fe3c:	240263e4 	.word	0x240263e4
 800fe40:	240263dc 	.word	0x240263dc
 800fe44:	240263e0 	.word	0x240263e0

0800fe48 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800fe48:	8880      	ldrh	r0, [r0, #4]
 800fe4a:	4770      	bx	lr

0800fe4c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	6803      	ldr	r3, [r0, #0]
 800fe50:	460c      	mov	r4, r1
 800fe52:	2100      	movs	r1, #0
 800fe54:	4605      	mov	r5, r0
 800fe56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe58:	4798      	blx	r3
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	682b      	ldr	r3, [r5, #0]
 800fe5e:	4628      	mov	r0, r5
 800fe60:	1ba4      	subs	r4, r4, r6
 800fe62:	6a1b      	ldr	r3, [r3, #32]
 800fe64:	b2a4      	uxth	r4, r4
 800fe66:	4798      	blx	r3
 800fe68:	fbb4 f0f0 	udiv	r0, r4, r0
 800fe6c:	bd70      	pop	{r4, r5, r6, pc}

0800fe6e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800fe6e:	2300      	movs	r3, #0
 800fe70:	8083      	strh	r3, [r0, #4]
 800fe72:	4770      	bx	lr

0800fe74 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800fe74:	b510      	push	{r4, lr}
 800fe76:	6803      	ldr	r3, [r0, #0]
 800fe78:	4604      	mov	r4, r0
 800fe7a:	8881      	ldrh	r1, [r0, #4]
 800fe7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe7e:	4798      	blx	r3
 800fe80:	88a3      	ldrh	r3, [r4, #4]
 800fe82:	3301      	adds	r3, #1
 800fe84:	80a3      	strh	r3, [r4, #4]
 800fe86:	bd10      	pop	{r4, pc}

0800fe88 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800fe88:	6803      	ldr	r3, [r0, #0]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe8c:	4718      	bx	r3

0800fe8e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800fe8e:	4770      	bx	lr

0800fe90 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800fe90:	4a02      	ldr	r2, [pc, #8]	@ (800fe9c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800fe92:	6002      	str	r2, [r0, #0]
 800fe94:	2200      	movs	r2, #0
 800fe96:	8082      	strh	r2, [r0, #4]
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop
 800fe9c:	08028b20 	.word	0x08028b20

0800fea0 <_ZN8touchgfx9Container13getFirstChildEv>:
 800fea0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800fea2:	4770      	bx	lr

0800fea4 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 800fea4:	b510      	push	{r4, lr}
 800fea6:	6803      	ldr	r3, [r0, #0]
 800fea8:	4604      	mov	r4, r0
 800feaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800feae:	4798      	blx	r3
 800feb0:	b110      	cbz	r0, 800feb8 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7f3 fc0b 	bl	80036ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800feb8:	bd10      	pop	{r4, pc}

0800feba <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 800feba:	f8c0 10e0 	str.w	r1, [r0, #224]	@ 0xe0
 800febe:	4770      	bx	lr

0800fec0 <_ZNK8touchgfx11BoxProgress8getColorEv>:
 800fec0:	f8d0 00e0 	ldr.w	r0, [r0, #224]	@ 0xe0
 800fec4:	4770      	bx	lr

0800fec6 <_ZN8touchgfx11BoxProgressD1Ev>:
 800fec6:	4770      	bx	lr

0800fec8 <_ZN8touchgfx11BoxProgressD0Ev>:
 800fec8:	b510      	push	{r4, lr}
 800feca:	4604      	mov	r4, r0
 800fecc:	21e4      	movs	r1, #228	@ 0xe4
 800fece:	f014 fba4 	bl	802461a <_ZdlPvj>
 800fed2:	4620      	mov	r0, r4
 800fed4:	bd10      	pop	{r4, pc}

0800fed6 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 800fed6:	b538      	push	{r3, r4, r5, lr}
 800fed8:	4604      	mov	r4, r0
 800feda:	460d      	mov	r5, r1
 800fedc:	f000 f97c 	bl	80101d8 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 800fee0:	f884 50de 	strb.w	r5, [r4, #222]	@ 0xde
 800fee4:	bd38      	pop	{r3, r4, r5, pc}

0800fee6 <_ZN8touchgfx8Drawable11setPositionEssss>:
 800fee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feea:	461e      	mov	r6, r3
 800feec:	6803      	ldr	r3, [r0, #0]
 800feee:	4604      	mov	r4, r0
 800fef0:	4617      	mov	r7, r2
 800fef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fef4:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 800fef8:	4798      	blx	r3
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	4639      	mov	r1, r7
 800fefe:	4620      	mov	r0, r4
 800ff00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff02:	4798      	blx	r3
 800ff04:	6823      	ldr	r3, [r4, #0]
 800ff06:	4631      	mov	r1, r6
 800ff08:	4620      	mov	r0, r4
 800ff0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff0c:	4790      	blx	r2
 800ff0e:	6823      	ldr	r3, [r4, #0]
 800ff10:	4629      	mov	r1, r5
 800ff12:	4620      	mov	r0, r4
 800ff14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1a:	4718      	bx	r3

0800ff1c <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 800ff1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ff20:	4617      	mov	r7, r2
 800ff22:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 800ff26:	2200      	movs	r2, #0
 800ff28:	4604      	mov	r4, r0
 800ff2a:	460e      	mov	r6, r1
 800ff2c:	4698      	mov	r8, r3
 800ff2e:	4611      	mov	r1, r2
 800ff30:	9500      	str	r5, [sp, #0]
 800ff32:	30b8      	adds	r0, #184	@ 0xb8
 800ff34:	f7ff ffd7 	bl	800fee6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ff38:	4643      	mov	r3, r8
 800ff3a:	463a      	mov	r2, r7
 800ff3c:	4631      	mov	r1, r6
 800ff3e:	4620      	mov	r0, r4
 800ff40:	9508      	str	r5, [sp, #32]
 800ff42:	b002      	add	sp, #8
 800ff44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff48:	f000 ba3b 	b.w	80103c2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0800ff4c <_ZN8touchgfx11BoxProgress8setValueEi>:
 800ff4c:	b530      	push	{r4, r5, lr}
 800ff4e:	4604      	mov	r4, r0
 800ff50:	b085      	sub	sp, #20
 800ff52:	f000 f994 	bl	801027e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 800ff56:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 800ff5a:	2b03      	cmp	r3, #3
 800ff5c:	d814      	bhi.n	800ff88 <_ZN8touchgfx11BoxProgress8setValueEi+0x3c>
 800ff5e:	e8df f003 	tbb	[pc, r3]
 800ff62:	0202      	.short	0x0202
 800ff64:	1010      	.short	0x1010
 800ff66:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f000 f9a9 	bl	80102c2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800ff70:	b200      	sxth	r0, r0
 800ff72:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 800ff76:	2b03      	cmp	r3, #3
 800ff78:	d830      	bhi.n	800ffdc <_ZN8touchgfx11BoxProgress8setValueEi+0x90>
 800ff7a:	e8df f003 	tbb	[pc, r3]
 800ff7e:	3107      	.short	0x3107
 800ff80:	6442      	.short	0x6442
 800ff82:	f8b4 1062 	ldrh.w	r1, [r4, #98]	@ 0x62
 800ff86:	e7f0      	b.n	800ff6a <_ZN8touchgfx11BoxProgress8setValueEi+0x1e>
 800ff88:	2000      	movs	r0, #0
 800ff8a:	e7f2      	b.n	800ff72 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 800ff8c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800ff90:	2200      	movs	r2, #0
 800ff92:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	@ 0xc0
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	4611      	mov	r1, r2
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800ffa0:	f7ff ffa1 	bl	800fee6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ffa4:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
 800ffa8:	4629      	mov	r1, r5
 800ffaa:	429d      	cmp	r5, r3
 800ffac:	eba5 0503 	sub.w	r5, r5, r3
 800ffb0:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
 800ffb4:	bfa8      	it	ge
 800ffb6:	4619      	movge	r1, r3
 800ffb8:	2d00      	cmp	r5, #0
 800ffba:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ffbe:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ffc2:	f04f 0100 	mov.w	r1, #0
 800ffc6:	bfb8      	it	lt
 800ffc8:	426d      	neglt	r5, r5
 800ffca:	f8ad 100a 	strh.w	r1, [sp, #10]
 800ffce:	f8ad 500c 	strh.w	r5, [sp, #12]
 800ffd2:	a902      	add	r1, sp, #8
 800ffd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ffd8:	f007 fc48 	bl	801786c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 800ffdc:	b005      	add	sp, #20
 800ffde:	bd30      	pop	{r4, r5, pc}
 800ffe0:	8921      	ldrh	r1, [r4, #8]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 800ffe8:	1a09      	subs	r1, r1, r0
 800ffea:	f9b4 50bc 	ldrsh.w	r5, [r4, #188]	@ 0xbc
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	4603      	mov	r3, r0
 800fff2:	b209      	sxth	r1, r1
 800fff4:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 800fff8:	f7ff ff75 	bl	800fee6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800fffc:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
 8010000:	e7d2      	b.n	800ffa8 <_ZN8touchgfx11BoxProgress8setValueEi+0x5c>
 8010002:	2200      	movs	r2, #0
 8010004:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 8010008:	9000      	str	r0, [sp, #0]
 801000a:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 801000e:	4611      	mov	r1, r2
 8010010:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	@ 0xc2
 8010014:	f7ff ff67 	bl	800fee6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8010018:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
 801001c:	2100      	movs	r1, #0
 801001e:	429d      	cmp	r5, r3
 8010020:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 8010024:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010028:	4629      	mov	r1, r5
 801002a:	eba5 0503 	sub.w	r5, r5, r3
 801002e:	bfa8      	it	ge
 8010030:	4619      	movge	r1, r3
 8010032:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010036:	2d00      	cmp	r5, #0
 8010038:	f8ad 100a 	strh.w	r1, [sp, #10]
 801003c:	bfb8      	it	lt
 801003e:	426d      	neglt	r5, r5
 8010040:	f8ad 500e 	strh.w	r5, [sp, #14]
 8010044:	e7c5      	b.n	800ffd2 <_ZN8touchgfx11BoxProgress8setValueEi+0x86>
 8010046:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 801004a:	2100      	movs	r1, #0
 801004c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 8010050:	1a12      	subs	r2, r2, r0
 8010052:	9000      	str	r0, [sp, #0]
 8010054:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8010058:	f9b4 50be 	ldrsh.w	r5, [r4, #190]	@ 0xbe
 801005c:	b212      	sxth	r2, r2
 801005e:	f7ff ff42 	bl	800fee6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8010062:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
 8010066:	e7d9      	b.n	801001c <_ZN8touchgfx11BoxProgress8setValueEi+0xd0>

08010068 <_ZN8touchgfx11BoxProgressC1Ev>:
 8010068:	b510      	push	{r4, lr}
 801006a:	4604      	mov	r4, r0
 801006c:	f000 f85a 	bl	8010124 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8010070:	2201      	movs	r2, #1
 8010072:	4b17      	ldr	r3, [pc, #92]	@ (80100d0 <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 8010074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010078:	f104 01b8 	add.w	r1, r4, #184	@ 0xb8
 801007c:	f884 20dd 	strb.w	r2, [r4, #221]	@ 0xdd
 8010080:	4a14      	ldr	r2, [pc, #80]	@ (80100d4 <_ZN8touchgfx11BoxProgressC1Ev+0x6c>)
 8010082:	6023      	str	r3, [r4, #0]
 8010084:	2300      	movs	r3, #0
 8010086:	f8c4 20b8 	str.w	r2, [r4, #184]	@ 0xb8
 801008a:	22ff      	movs	r2, #255	@ 0xff
 801008c:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8010090:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8010094:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 8010098:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 801009c:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 80100a0:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 80100a4:	f8a4 30c8 	strh.w	r3, [r4, #200]	@ 0xc8
 80100a8:	f8a4 30ca 	strh.w	r3, [r4, #202]	@ 0xca
 80100ac:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80100b0:	f8a4 30d8 	strh.w	r3, [r4, #216]	@ 0xd8
 80100b4:	f8a4 30da 	strh.w	r3, [r4, #218]	@ 0xda
 80100b8:	f884 30dc 	strb.w	r3, [r4, #220]	@ 0xdc
 80100bc:	f884 20de 	strb.w	r2, [r4, #222]	@ 0xde
 80100c0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80100c4:	e9c4 3333 	strd	r3, r3, [r4, #204]	@ 0xcc
 80100c8:	f000 fa08 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80100cc:	4620      	mov	r0, r4
 80100ce:	bd10      	pop	{r4, pc}
 80100d0:	08028b54 	.word	0x08028b54
 80100d4:	08029148 	.word	0x08029148

080100d8 <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80100d8:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 80100dc:	4770      	bx	lr

080100de <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 80100de:	4770      	bx	lr

080100e0 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 80100e0:	b510      	push	{r4, lr}
 80100e2:	4604      	mov	r4, r0
 80100e4:	21b8      	movs	r1, #184	@ 0xb8
 80100e6:	f014 fa98 	bl	802461a <_ZdlPvj>
 80100ea:	4620      	mov	r0, r4
 80100ec:	bd10      	pop	{r4, pc}

080100ee <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
 80100ee:	b570      	push	{r4, r5, r6, lr}
 80100f0:	4604      	mov	r4, r0
 80100f2:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
 80100f6:	3058      	adds	r0, #88	@ 0x58
 80100f8:	f007 fb67 	bl	80177ca <_ZNK8touchgfx8Drawable10invalidateEv>
 80100fc:	6823      	ldr	r3, [r4, #0]
 80100fe:	4620      	mov	r0, r4
 8010100:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 8010104:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010108:	4798      	blx	r3
 801010a:	462b      	mov	r3, r5
 801010c:	4601      	mov	r1, r0
 801010e:	4620      	mov	r0, r4
 8010110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010114:	4718      	bx	r3

08010116 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 8010116:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 801011a:	428b      	cmp	r3, r1
 801011c:	d001      	beq.n	8010122 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 801011e:	f7ff bfe6 	b.w	80100ee <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
 8010122:	4770      	bx	lr

08010124 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8010124:	b510      	push	{r4, lr}
 8010126:	4604      	mov	r4, r0
 8010128:	f000 f978 	bl	801041c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801012c:	4b03      	ldr	r3, [pc, #12]	@ (801013c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801012e:	4620      	mov	r0, r4
 8010130:	6023      	str	r3, [r4, #0]
 8010132:	2300      	movs	r3, #0
 8010134:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010138:	bd10      	pop	{r4, pc}
 801013a:	bf00      	nop
 801013c:	08028c38 	.word	0x08028c38

08010140 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8010140:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 8010144:	4770      	bx	lr

08010146 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8010146:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 801014a:	4770      	bx	lr

0801014c <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801014c:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 8010150:	4770      	bx	lr

08010152 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8010152:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 8010156:	4770      	bx	lr

08010158 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8010158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801015a:	461e      	mov	r6, r3
 801015c:	6803      	ldr	r3, [r0, #0]
 801015e:	460f      	mov	r7, r1
 8010160:	4604      	mov	r4, r0
 8010162:	4615      	mov	r5, r2
 8010164:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 8010168:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 801016c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010170:	4798      	blx	r3
 8010172:	b93e      	cbnz	r6, 8010184 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 8010174:	1bed      	subs	r5, r5, r7
 8010176:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 801017a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801017e:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 8010182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010184:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 8010188:	e7f7      	b.n	801017a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0801018a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 801018a:	b510      	push	{r4, lr}
 801018c:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8010190:	600c      	str	r4, [r1, #0]
 8010192:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8010196:	6011      	str	r1, [r2, #0]
 8010198:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 801019c:	801a      	strh	r2, [r3, #0]
 801019e:	9b02      	ldr	r3, [sp, #8]
 80101a0:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 80101a4:	801a      	strh	r2, [r3, #0]
 80101a6:	bd10      	pop	{r4, pc}

080101a8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 80101a8:	b510      	push	{r4, lr}
 80101aa:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 80101ae:	600c      	str	r4, [r1, #0]
 80101b0:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 80101b4:	6011      	str	r1, [r2, #0]
 80101b6:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 80101ba:	801a      	strh	r2, [r3, #0]
 80101bc:	bd10      	pop	{r4, pc}

080101be <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 80101be:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80101c2:	600b      	str	r3, [r1, #0]
 80101c4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80101c8:	6013      	str	r3, [r2, #0]
 80101ca:	4770      	bx	lr

080101cc <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 80101cc:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 80101d0:	4770      	bx	lr

080101d2 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80101d2:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 80101d6:	4770      	bx	lr

080101d8 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 80101d8:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 80101dc:	4770      	bx	lr

080101de <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 80101de:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 80101e2:	4770      	bx	lr

080101e4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 80101e4:	4770      	bx	lr

080101e6 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80101e6:	b510      	push	{r4, lr}
 80101e8:	4604      	mov	r4, r0
 80101ea:	21b4      	movs	r1, #180	@ 0xb4
 80101ec:	f014 fa15 	bl	802461a <_ZdlPvj>
 80101f0:	4620      	mov	r0, r4
 80101f2:	bd10      	pop	{r4, pc}

080101f4 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80101f4:	b570      	push	{r4, r5, r6, lr}
 80101f6:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 80101fa:	4604      	mov	r4, r0
 80101fc:	4616      	mov	r6, r2
 80101fe:	428d      	cmp	r5, r1
 8010200:	bfb8      	it	lt
 8010202:	460d      	movlt	r5, r1
 8010204:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8010208:	428d      	cmp	r5, r1
 801020a:	bfa8      	it	ge
 801020c:	460d      	movge	r5, r1
 801020e:	b99a      	cbnz	r2, 8010238 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8010210:	6803      	ldr	r3, [r0, #0]
 8010212:	4629      	mov	r1, r5
 8010214:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010218:	4798      	blx	r3
 801021a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801021e:	b368      	cbz	r0, 801027c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8010220:	6803      	ldr	r3, [r0, #0]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	4798      	blx	r3
 8010226:	b348      	cbz	r0, 801027c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8010228:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 801022c:	4621      	mov	r1, r4
 801022e:	6803      	ldr	r3, [r0, #0]
 8010230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	4718      	bx	r3
 8010238:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 801023c:	2b00      	cmp	r3, #0
 801023e:	dd08      	ble.n	8010252 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8010240:	f006 fa00 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 8010244:	4621      	mov	r1, r4
 8010246:	3004      	adds	r0, #4
 8010248:	f006 fa21 	bl	801668e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801024c:	2300      	movs	r3, #0
 801024e:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8010252:	6823      	ldr	r3, [r4, #0]
 8010254:	4620      	mov	r0, r4
 8010256:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801025a:	4798      	blx	r3
 801025c:	2300      	movs	r3, #0
 801025e:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 8010262:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8010266:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 801026a:	f006 f9eb 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 801026e:	4621      	mov	r1, r4
 8010270:	3004      	adds	r0, #4
 8010272:	f006 fab5 	bl	80167e0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8010276:	2301      	movs	r3, #1
 8010278:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 801027c:	bd70      	pop	{r4, r5, r6, pc}

0801027e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801027e:	b510      	push	{r4, lr}
 8010280:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8010284:	4604      	mov	r4, r0
 8010286:	4299      	cmp	r1, r3
 8010288:	bfb8      	it	lt
 801028a:	4619      	movlt	r1, r3
 801028c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8010290:	4299      	cmp	r1, r3
 8010292:	bfa8      	it	ge
 8010294:	4619      	movge	r1, r3
 8010296:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 801029a:	428b      	cmp	r3, r1
 801029c:	d010      	beq.n	80102c0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801029e:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 80102a2:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 80102a6:	b158      	cbz	r0, 80102c0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80102a8:	6803      	ldr	r3, [r0, #0]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	4798      	blx	r3
 80102ae:	b138      	cbz	r0, 80102c0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80102b0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80102b4:	4621      	mov	r1, r4
 80102b6:	6803      	ldr	r3, [r0, #0]
 80102b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	4718      	bx	r3
 80102c0:	bd10      	pop	{r4, pc}

080102c2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80102c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102c4:	4604      	mov	r4, r0
 80102c6:	460d      	mov	r5, r1
 80102c8:	b1a9      	cbz	r1, 80102f6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 80102ca:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 80102ce:	ab01      	add	r3, sp, #4
 80102d0:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 80102d4:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 80102d8:	1b89      	subs	r1, r1, r6
 80102da:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 80102de:	1a12      	subs	r2, r2, r0
 80102e0:	1a38      	subs	r0, r7, r0
 80102e2:	f007 ff41 	bl	8018168 <_ZN8touchgfx6muldivElllRl>
 80102e6:	4629      	mov	r1, r5
 80102e8:	ab01      	add	r3, sp, #4
 80102ea:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 80102ee:	4430      	add	r0, r6
 80102f0:	f007 ff3a 	bl	8018168 <_ZN8touchgfx6muldivElllRl>
 80102f4:	b285      	uxth	r5, r0
 80102f6:	4628      	mov	r0, r5
 80102f8:	b003      	add	sp, #12
 80102fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102fc <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 80102fc:	b570      	push	{r4, r5, r6, lr}
 80102fe:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8010302:	4604      	mov	r4, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d035      	beq.n	8010374 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010308:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 801030c:	2100      	movs	r1, #0
 801030e:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 8010312:	3001      	adds	r0, #1
 8010314:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 8010318:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 801031c:	b280      	uxth	r0, r0
 801031e:	1ad2      	subs	r2, r2, r3
 8010320:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8010324:	b212      	sxth	r2, r2
 8010326:	47a8      	blx	r5
 8010328:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	4401      	add	r1, r0
 8010330:	4620      	mov	r0, r4
 8010332:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010336:	4798      	blx	r3
 8010338:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 801033c:	429a      	cmp	r2, r3
 801033e:	db19      	blt.n	8010374 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010340:	2500      	movs	r5, #0
 8010342:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8010346:	f006 f97d 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 801034a:	4621      	mov	r1, r4
 801034c:	3004      	adds	r0, #4
 801034e:	f006 f99e 	bl	801668e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8010352:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010356:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 801035a:	b158      	cbz	r0, 8010374 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 801035c:	6803      	ldr	r3, [r0, #0]
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	4798      	blx	r3
 8010362:	b138      	cbz	r0, 8010374 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8010364:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8010368:	4621      	mov	r1, r4
 801036a:	6803      	ldr	r3, [r0, #0]
 801036c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010370:	689b      	ldr	r3, [r3, #8]
 8010372:	4718      	bx	r3
 8010374:	bd70      	pop	{r4, r5, r6, pc}
	...

08010378 <_ZN8touchgfx8DrawableC1Ev>:
 8010378:	4a0a      	ldr	r2, [pc, #40]	@ (80103a4 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 801037a:	6002      	str	r2, [r0, #0]
 801037c:	2200      	movs	r2, #0
 801037e:	8082      	strh	r2, [r0, #4]
 8010380:	80c2      	strh	r2, [r0, #6]
 8010382:	8102      	strh	r2, [r0, #8]
 8010384:	8142      	strh	r2, [r0, #10]
 8010386:	8182      	strh	r2, [r0, #12]
 8010388:	81c2      	strh	r2, [r0, #14]
 801038a:	8202      	strh	r2, [r0, #16]
 801038c:	8242      	strh	r2, [r0, #18]
 801038e:	61c2      	str	r2, [r0, #28]
 8010390:	8402      	strh	r2, [r0, #32]
 8010392:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010394:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8010398:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801039c:	2201      	movs	r2, #1
 801039e:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 80103a2:	4770      	bx	lr
 80103a4:	080293dc 	.word	0x080293dc

080103a8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	6803      	ldr	r3, [r0, #0]
 80103ac:	4604      	mov	r4, r0
 80103ae:	4615      	mov	r5, r2
 80103b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b2:	4798      	blx	r3
 80103b4:	6823      	ldr	r3, [r4, #0]
 80103b6:	4629      	mov	r1, r5
 80103b8:	4620      	mov	r0, r4
 80103ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103c0:	4718      	bx	r3

080103c2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80103c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c6:	4604      	mov	r4, r0
 80103c8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 80103cc:	4698      	mov	r8, r3
 80103ce:	460e      	mov	r6, r1
 80103d0:	4615      	mov	r5, r2
 80103d2:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 80103d6:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 80103da:	4619      	mov	r1, r3
 80103dc:	463a      	mov	r2, r7
 80103de:	3058      	adds	r0, #88	@ 0x58
 80103e0:	f7ff ffe2 	bl	80103a8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80103e4:	4446      	add	r6, r8
 80103e6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80103ea:	443d      	add	r5, r7
 80103ec:	42b3      	cmp	r3, r6
 80103ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80103f2:	bfb8      	it	lt
 80103f4:	8126      	strhlt	r6, [r4, #8]
 80103f6:	42ab      	cmp	r3, r5
 80103f8:	bfb8      	it	lt
 80103fa:	8165      	strhlt	r5, [r4, #10]
 80103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010400 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8010400:	b510      	push	{r4, lr}
 8010402:	4604      	mov	r4, r0
 8010404:	302c      	adds	r0, #44	@ 0x2c
 8010406:	f003 fb5a 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801040a:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 801040e:	4620      	mov	r0, r4
 8010410:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8010414:	f7ff ffc8 	bl	80103a8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010418:	bd10      	pop	{r4, pc}
	...

0801041c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 801041c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801041e:	4604      	mov	r4, r0
 8010420:	2500      	movs	r5, #0
 8010422:	f7ff ffa9 	bl	8010378 <_ZN8touchgfx8DrawableC1Ev>
 8010426:	4b24      	ldr	r3, [pc, #144]	@ (80104b8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8010428:	4626      	mov	r6, r4
 801042a:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801042e:	2226      	movs	r2, #38	@ 0x26
 8010430:	4629      	mov	r1, r5
 8010432:	62a5      	str	r5, [r4, #40]	@ 0x28
 8010434:	f846 3b2c 	str.w	r3, [r6], #44
 8010438:	4630      	mov	r0, r6
 801043a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801043e:	f014 feff 	bl	8025240 <memset>
 8010442:	4630      	mov	r0, r6
 8010444:	f7ff ff98 	bl	8010378 <_ZN8touchgfx8DrawableC1Ev>
 8010448:	a902      	add	r1, sp, #8
 801044a:	4b1c      	ldr	r3, [pc, #112]	@ (80104bc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 801044c:	4630      	mov	r0, r6
 801044e:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 8010452:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 8010456:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010458:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 801045c:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8010460:	f003 fb2d 	bl	8013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8010464:	4638      	mov	r0, r7
 8010466:	f7ff ff87 	bl	8010378 <_ZN8touchgfx8DrawableC1Ev>
 801046a:	4b15      	ldr	r3, [pc, #84]	@ (80104c0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 801046c:	4629      	mov	r1, r5
 801046e:	4630      	mov	r0, r6
 8010470:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010472:	2364      	movs	r3, #100	@ 0x64
 8010474:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8010478:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 801047c:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 8010480:	4b10      	ldr	r3, [pc, #64]	@ (80104c4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8010482:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 8010486:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 801048a:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 801048e:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8010492:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 8010496:	f7f3 f851 	bl	800353c <_ZN8touchgfx8Drawable4setXEs>
 801049a:	4629      	mov	r1, r5
 801049c:	4630      	mov	r0, r6
 801049e:	f7f3 f84f 	bl	8003540 <_ZN8touchgfx8Drawable4setYEs>
 80104a2:	4631      	mov	r1, r6
 80104a4:	4620      	mov	r0, r4
 80104a6:	f000 f819 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80104aa:	4620      	mov	r0, r4
 80104ac:	4639      	mov	r1, r7
 80104ae:	f000 f815 	bl	80104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80104b2:	4620      	mov	r0, r4
 80104b4:	b003      	add	sp, #12
 80104b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104b8:	08028d14 	.word	0x08028d14
 80104bc:	08029224 	.word	0x08029224
 80104c0:	08028de8 	.word	0x08028de8
 80104c4:	08018843 	.word	0x08018843

080104c8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80104c8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80104ca:	2000      	movs	r0, #0
 80104cc:	b12b      	cbz	r3, 80104da <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80104ce:	b920      	cbnz	r0, 80104da <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80104d0:	1a5a      	subs	r2, r3, r1
 80104d2:	699b      	ldr	r3, [r3, #24]
 80104d4:	4250      	negs	r0, r2
 80104d6:	4150      	adcs	r0, r2
 80104d8:	e7f8      	b.n	80104cc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80104da:	4770      	bx	lr

080104dc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80104dc:	2300      	movs	r3, #0
 80104de:	6148      	str	r0, [r1, #20]
 80104e0:	618b      	str	r3, [r1, #24]
 80104e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80104e4:	b913      	cbnz	r3, 80104ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80104e6:	6281      	str	r1, [r0, #40]	@ 0x28
 80104e8:	4770      	bx	lr
 80104ea:	4613      	mov	r3, r2
 80104ec:	699a      	ldr	r2, [r3, #24]
 80104ee:	2a00      	cmp	r2, #0
 80104f0:	d1fb      	bne.n	80104ea <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80104f2:	6199      	str	r1, [r3, #24]
 80104f4:	4770      	bx	lr

080104f6 <_ZN8touchgfx9Container9removeAllEv>:
 80104f6:	2200      	movs	r2, #0
 80104f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80104fa:	b123      	cbz	r3, 8010506 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80104fc:	6999      	ldr	r1, [r3, #24]
 80104fe:	6281      	str	r1, [r0, #40]	@ 0x28
 8010500:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8010504:	e7f8      	b.n	80104f8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8010506:	4770      	bx	lr

08010508 <_ZN8touchgfx9Container6unlinkEv>:
 8010508:	2300      	movs	r3, #0
 801050a:	6283      	str	r3, [r0, #40]	@ 0x28
 801050c:	4770      	bx	lr

0801050e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801050e:	2200      	movs	r2, #0
 8010510:	8002      	strh	r2, [r0, #0]
 8010512:	8042      	strh	r2, [r0, #2]
 8010514:	8082      	strh	r2, [r0, #4]
 8010516:	80c2      	strh	r2, [r0, #6]
 8010518:	4770      	bx	lr

0801051a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801051a:	b570      	push	{r4, r5, r6, lr}
 801051c:	460d      	mov	r5, r1
 801051e:	4616      	mov	r6, r2
 8010520:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8010522:	b13c      	cbz	r4, 8010534 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8010524:	6823      	ldr	r3, [r4, #0]
 8010526:	4620      	mov	r0, r4
 8010528:	4632      	mov	r2, r6
 801052a:	4629      	mov	r1, r5
 801052c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801052e:	4798      	blx	r3
 8010530:	69a4      	ldr	r4, [r4, #24]
 8010532:	e7f6      	b.n	8010522 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8010534:	bd70      	pop	{r4, r5, r6, pc}

08010536 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8010536:	b538      	push	{r3, r4, r5, lr}
 8010538:	460d      	mov	r5, r1
 801053a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801053c:	b134      	cbz	r4, 801054c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801053e:	682b      	ldr	r3, [r5, #0]
 8010540:	4621      	mov	r1, r4
 8010542:	4628      	mov	r0, r5
 8010544:	689b      	ldr	r3, [r3, #8]
 8010546:	4798      	blx	r3
 8010548:	69a4      	ldr	r4, [r4, #24]
 801054a:	e7f7      	b.n	801053c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801054c:	bd38      	pop	{r3, r4, r5, pc}

0801054e <_ZN8touchgfx9ContainerD1Ev>:
 801054e:	4770      	bx	lr

08010550 <_ZN8touchgfx9ContainerD0Ev>:
 8010550:	b510      	push	{r4, lr}
 8010552:	4604      	mov	r4, r0
 8010554:	212c      	movs	r1, #44	@ 0x2c
 8010556:	f014 f860 	bl	802461a <_ZdlPvj>
 801055a:	4620      	mov	r0, r4
 801055c:	bd10      	pop	{r4, pc}

0801055e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801055e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010560:	b19b      	cbz	r3, 801058a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010562:	428b      	cmp	r3, r1
 8010564:	d109      	bne.n	801057a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8010566:	699a      	ldr	r2, [r3, #24]
 8010568:	2100      	movs	r1, #0
 801056a:	6159      	str	r1, [r3, #20]
 801056c:	6282      	str	r2, [r0, #40]	@ 0x28
 801056e:	b902      	cbnz	r2, 8010572 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010570:	4770      	bx	lr
 8010572:	6199      	str	r1, [r3, #24]
 8010574:	4770      	bx	lr
 8010576:	4613      	mov	r3, r2
 8010578:	b13a      	cbz	r2, 801058a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801057a:	699a      	ldr	r2, [r3, #24]
 801057c:	428a      	cmp	r2, r1
 801057e:	d1fa      	bne.n	8010576 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010580:	698a      	ldr	r2, [r1, #24]
 8010582:	619a      	str	r2, [r3, #24]
 8010584:	2300      	movs	r3, #0
 8010586:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801058a:	4770      	bx	lr

0801058c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801058c:	b410      	push	{r4}
 801058e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010590:	4604      	mov	r4, r0
 8010592:	b92b      	cbnz	r3, 80105a0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8010594:	6803      	ldr	r3, [r0, #0]
 8010596:	4611      	mov	r1, r2
 8010598:	f85d 4b04 	ldr.w	r4, [sp], #4
 801059c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801059e:	4718      	bx	r3
 80105a0:	b941      	cbnz	r1, 80105b4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80105a2:	6193      	str	r3, [r2, #24]
 80105a4:	6282      	str	r2, [r0, #40]	@ 0x28
 80105a6:	6154      	str	r4, [r2, #20]
 80105a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105ac:	4770      	bx	lr
 80105ae:	4603      	mov	r3, r0
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d0f9      	beq.n	80105a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80105b4:	4299      	cmp	r1, r3
 80105b6:	6998      	ldr	r0, [r3, #24]
 80105b8:	d1f9      	bne.n	80105ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80105ba:	6190      	str	r0, [r2, #24]
 80105bc:	618a      	str	r2, [r1, #24]
 80105be:	e7f2      	b.n	80105a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080105c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80105c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c4:	461f      	mov	r7, r3
 80105c6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80105ca:	460d      	mov	r5, r1
 80105cc:	4616      	mov	r6, r2
 80105ce:	b103      	cbz	r3, 80105d2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80105d0:	6038      	str	r0, [r7, #0]
 80105d2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80105d4:	b314      	cbz	r4, 801061c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80105d6:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80105da:	b1eb      	cbz	r3, 8010618 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80105dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80105e0:	428d      	cmp	r5, r1
 80105e2:	db19      	blt.n	8010618 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80105e4:	b289      	uxth	r1, r1
 80105e6:	8923      	ldrh	r3, [r4, #8]
 80105e8:	440b      	add	r3, r1
 80105ea:	b21b      	sxth	r3, r3
 80105ec:	429d      	cmp	r5, r3
 80105ee:	da13      	bge.n	8010618 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80105f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80105f4:	4296      	cmp	r6, r2
 80105f6:	db0f      	blt.n	8010618 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80105f8:	b292      	uxth	r2, r2
 80105fa:	8963      	ldrh	r3, [r4, #10]
 80105fc:	4413      	add	r3, r2
 80105fe:	b21b      	sxth	r3, r3
 8010600:	429e      	cmp	r6, r3
 8010602:	da09      	bge.n	8010618 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010604:	6823      	ldr	r3, [r4, #0]
 8010606:	1ab2      	subs	r2, r6, r2
 8010608:	1a69      	subs	r1, r5, r1
 801060a:	4620      	mov	r0, r4
 801060c:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8010610:	b212      	sxth	r2, r2
 8010612:	463b      	mov	r3, r7
 8010614:	b209      	sxth	r1, r1
 8010616:	47c0      	blx	r8
 8010618:	69a4      	ldr	r4, [r4, #24]
 801061a:	e7db      	b.n	80105d4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801061c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010620 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8010620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010624:	4c6d      	ldr	r4, [pc, #436]	@ (80107dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8010626:	b0a1      	sub	sp, #132	@ 0x84
 8010628:	4606      	mov	r6, r0
 801062a:	6824      	ldr	r4, [r4, #0]
 801062c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801062e:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8010632:	2400      	movs	r4, #0
 8010634:	9303      	str	r3, [sp, #12]
 8010636:	802c      	strh	r4, [r5, #0]
 8010638:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 801063a:	802c      	strh	r4, [r5, #0]
 801063c:	601c      	str	r4, [r3, #0]
 801063e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010642:	f7ff ffbd 	bl	80105c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010646:	f1b9 0f03 	cmp.w	r9, #3
 801064a:	f340 80c1 	ble.w	80107d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801064e:	4631      	mov	r1, r6
 8010650:	a80c      	add	r0, sp, #48	@ 0x30
 8010652:	f007 f955 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010656:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801065a:	9306      	str	r3, [sp, #24]
 801065c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8010660:	9307      	str	r3, [sp, #28]
 8010662:	9b03      	ldr	r3, [sp, #12]
 8010664:	f8d3 a000 	ldr.w	sl, [r3]
 8010668:	f1ba 0f00 	cmp.w	sl, #0
 801066c:	f000 80b3 	beq.w	80107d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8010670:	4651      	mov	r1, sl
 8010672:	a810      	add	r0, sp, #64	@ 0x40
 8010674:	f007 f944 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010678:	2002      	movs	r0, #2
 801067a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 801067e:	9b01      	ldr	r3, [sp, #4]
 8010680:	9a06      	ldr	r2, [sp, #24]
 8010682:	fb91 f1f0 	sdiv	r1, r1, r0
 8010686:	189d      	adds	r5, r3, r2
 8010688:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 801068c:	9a07      	ldr	r2, [sp, #28]
 801068e:	4419      	add	r1, r3
 8010690:	9b02      	ldr	r3, [sp, #8]
 8010692:	4413      	add	r3, r2
 8010694:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8010698:	1a6d      	subs	r5, r5, r1
 801069a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801069e:	fb92 f2f0 	sdiv	r2, r2, r0
 80106a2:	440a      	add	r2, r1
 80106a4:	1a9b      	subs	r3, r3, r2
 80106a6:	435b      	muls	r3, r3
 80106a8:	fb05 3505 	mla	r5, r5, r5, r3
 80106ac:	4f4c      	ldr	r7, [pc, #304]	@ (80107e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80106ae:	ac10      	add	r4, sp, #64	@ 0x40
 80106b0:	f1b9 0f0c 	cmp.w	r9, #12
 80106b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80106b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80106ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80106be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106c0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80106c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80106c8:	f04f 0303 	mov.w	r3, #3
 80106cc:	bfd8      	it	le
 80106ce:	f109 32ff 	addle.w	r2, r9, #4294967295
 80106d2:	f04f 0400 	mov.w	r4, #0
 80106d6:	f8cd 9000 	str.w	r9, [sp]
 80106da:	bfcc      	ite	gt
 80106dc:	4698      	movgt	r8, r3
 80106de:	fb92 f8f3 	sdivle	r8, r2, r3
 80106e2:	1c63      	adds	r3, r4, #1
 80106e4:	aa10      	add	r2, sp, #64	@ 0x40
 80106e6:	f004 0401 	and.w	r4, r4, #1
 80106ea:	f04f 0b00 	mov.w	fp, #0
 80106ee:	9308      	str	r3, [sp, #32]
 80106f0:	9b00      	ldr	r3, [sp, #0]
 80106f2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80106f6:	fb93 f3f8 	sdiv	r3, r3, r8
 80106fa:	3404      	adds	r4, #4
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	9304      	str	r3, [sp, #16]
 8010700:	9a04      	ldr	r2, [sp, #16]
 8010702:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010706:	fb13 f302 	smulbb	r3, r3, r2
 801070a:	9a01      	ldr	r2, [sp, #4]
 801070c:	b29b      	uxth	r3, r3
 801070e:	1899      	adds	r1, r3, r2
 8010710:	9305      	str	r3, [sp, #20]
 8010712:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010716:	b209      	sxth	r1, r1
 8010718:	4299      	cmp	r1, r3
 801071a:	db4d      	blt.n	80107b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801071c:	8932      	ldrh	r2, [r6, #8]
 801071e:	4413      	add	r3, r2
 8010720:	b21b      	sxth	r3, r3
 8010722:	4299      	cmp	r1, r3
 8010724:	da48      	bge.n	80107b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010726:	9b04      	ldr	r3, [sp, #16]
 8010728:	6827      	ldr	r7, [r4, #0]
 801072a:	fb17 f703 	smulbb	r7, r7, r3
 801072e:	9b02      	ldr	r3, [sp, #8]
 8010730:	b2bf      	uxth	r7, r7
 8010732:	18fa      	adds	r2, r7, r3
 8010734:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010738:	b212      	sxth	r2, r2
 801073a:	429a      	cmp	r2, r3
 801073c:	db3c      	blt.n	80107b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801073e:	8970      	ldrh	r0, [r6, #10]
 8010740:	4403      	add	r3, r0
 8010742:	b21b      	sxth	r3, r3
 8010744:	429a      	cmp	r2, r3
 8010746:	da37      	bge.n	80107b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010748:	2300      	movs	r3, #0
 801074a:	4630      	mov	r0, r6
 801074c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801074e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8010750:	f7ff ff36 	bl	80105c0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010754:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010756:	b37a      	cbz	r2, 80107b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8010758:	4552      	cmp	r2, sl
 801075a:	d02d      	beq.n	80107b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801075c:	4611      	mov	r1, r2
 801075e:	a80e      	add	r0, sp, #56	@ 0x38
 8010760:	9209      	str	r2, [sp, #36]	@ 0x24
 8010762:	f007 f8cd 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010766:	f04f 0e02 	mov.w	lr, #2
 801076a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 801076e:	9a06      	ldr	r2, [sp, #24]
 8010770:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8010774:	9b01      	ldr	r3, [sp, #4]
 8010776:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801077a:	4413      	add	r3, r2
 801077c:	9a07      	ldr	r2, [sp, #28]
 801077e:	fb91 f1fe 	sdiv	r1, r1, lr
 8010782:	fb9c fcfe 	sdiv	ip, ip, lr
 8010786:	4401      	add	r1, r0
 8010788:	1a58      	subs	r0, r3, r1
 801078a:	9b02      	ldr	r3, [sp, #8]
 801078c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8010790:	4413      	add	r3, r2
 8010792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010794:	448c      	add	ip, r1
 8010796:	eba3 030c 	sub.w	r3, r3, ip
 801079a:	435b      	muls	r3, r3
 801079c:	fb00 3300 	mla	r3, r0, r0, r3
 80107a0:	42ab      	cmp	r3, r5
 80107a2:	d208      	bcs.n	80107b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80107a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80107a6:	461d      	mov	r5, r3
 80107a8:	9803      	ldr	r0, [sp, #12]
 80107aa:	6001      	str	r1, [r0, #0]
 80107ac:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80107ae:	9805      	ldr	r0, [sp, #20]
 80107b0:	8008      	strh	r0, [r1, #0]
 80107b2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80107b4:	800f      	strh	r7, [r1, #0]
 80107b6:	4692      	mov	sl, r2
 80107b8:	f10b 0b01 	add.w	fp, fp, #1
 80107bc:	3408      	adds	r4, #8
 80107be:	f1bb 0f04 	cmp.w	fp, #4
 80107c2:	d19d      	bne.n	8010700 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80107c4:	9b00      	ldr	r3, [sp, #0]
 80107c6:	9c08      	ldr	r4, [sp, #32]
 80107c8:	444b      	add	r3, r9
 80107ca:	4544      	cmp	r4, r8
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	d188      	bne.n	80106e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80107d0:	b021      	add	sp, #132	@ 0x84
 80107d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d6:	f04f 35ff 	mov.w	r5, #4294967295
 80107da:	e767      	b.n	80106ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80107dc:	2402641c 	.word	0x2402641c
 80107e0:	08025d88 	.word	0x08025d88

080107e4 <_ZN8touchgfx4RectaNERKS0_>:
 80107e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107e8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80107ec:	888c      	ldrh	r4, [r1, #4]
 80107ee:	f9b0 9000 	ldrsh.w	r9, [r0]
 80107f2:	443c      	add	r4, r7
 80107f4:	b2a4      	uxth	r4, r4
 80107f6:	fa0f f884 	sxth.w	r8, r4
 80107fa:	45c1      	cmp	r9, r8
 80107fc:	da2f      	bge.n	801085e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80107fe:	8882      	ldrh	r2, [r0, #4]
 8010800:	444a      	add	r2, r9
 8010802:	b292      	uxth	r2, r2
 8010804:	fa0f fe82 	sxth.w	lr, r2
 8010808:	4577      	cmp	r7, lr
 801080a:	da28      	bge.n	801085e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801080c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010810:	88cb      	ldrh	r3, [r1, #6]
 8010812:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010816:	442b      	add	r3, r5
 8010818:	b21b      	sxth	r3, r3
 801081a:	429e      	cmp	r6, r3
 801081c:	da1f      	bge.n	801085e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801081e:	88c3      	ldrh	r3, [r0, #6]
 8010820:	4433      	add	r3, r6
 8010822:	b29b      	uxth	r3, r3
 8010824:	fa0f fc83 	sxth.w	ip, r3
 8010828:	4565      	cmp	r5, ip
 801082a:	da18      	bge.n	801085e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801082c:	454f      	cmp	r7, r9
 801082e:	bfb8      	it	lt
 8010830:	464f      	movlt	r7, r9
 8010832:	42b5      	cmp	r5, r6
 8010834:	bfb8      	it	lt
 8010836:	4635      	movlt	r5, r6
 8010838:	45f0      	cmp	r8, lr
 801083a:	bfd8      	it	le
 801083c:	4622      	movle	r2, r4
 801083e:	1bd2      	subs	r2, r2, r7
 8010840:	8082      	strh	r2, [r0, #4]
 8010842:	884a      	ldrh	r2, [r1, #2]
 8010844:	88c9      	ldrh	r1, [r1, #6]
 8010846:	8007      	strh	r7, [r0, #0]
 8010848:	440a      	add	r2, r1
 801084a:	8045      	strh	r5, [r0, #2]
 801084c:	b292      	uxth	r2, r2
 801084e:	b211      	sxth	r1, r2
 8010850:	458c      	cmp	ip, r1
 8010852:	bfa8      	it	ge
 8010854:	4613      	movge	r3, r2
 8010856:	1b5b      	subs	r3, r3, r5
 8010858:	80c3      	strh	r3, [r0, #6]
 801085a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801085e:	2300      	movs	r3, #0
 8010860:	8003      	strh	r3, [r0, #0]
 8010862:	8043      	strh	r3, [r0, #2]
 8010864:	8083      	strh	r3, [r0, #4]
 8010866:	80c3      	strh	r3, [r0, #6]
 8010868:	e7f7      	b.n	801085a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801086a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801086a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	dd06      	ble.n	8010880 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010872:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010876:	2800      	cmp	r0, #0
 8010878:	bfcc      	ite	gt
 801087a:	2000      	movgt	r0, #0
 801087c:	2001      	movle	r0, #1
 801087e:	4770      	bx	lr
 8010880:	2001      	movs	r0, #1
 8010882:	4770      	bx	lr

08010884 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010888:	2300      	movs	r3, #0
 801088a:	4604      	mov	r4, r0
 801088c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801088e:	8003      	strh	r3, [r0, #0]
 8010890:	8043      	strh	r3, [r0, #2]
 8010892:	8083      	strh	r3, [r0, #4]
 8010894:	80c3      	strh	r3, [r0, #6]
 8010896:	2d00      	cmp	r5, #0
 8010898:	d040      	beq.n	801091c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801089a:	1d28      	adds	r0, r5, #4
 801089c:	f7ff ffe5 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 80108a0:	b988      	cbnz	r0, 80108c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80108a2:	4620      	mov	r0, r4
 80108a4:	f7ff ffe1 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 80108a8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80108ac:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80108b0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80108b4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80108b8:	b138      	cbz	r0, 80108ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80108ba:	8022      	strh	r2, [r4, #0]
 80108bc:	8063      	strh	r3, [r4, #2]
 80108be:	f8a4 e004 	strh.w	lr, [r4, #4]
 80108c2:	f8a4 c006 	strh.w	ip, [r4, #6]
 80108c6:	69ad      	ldr	r5, [r5, #24]
 80108c8:	e7e5      	b.n	8010896 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80108ca:	f9b4 0000 	ldrsh.w	r0, [r4]
 80108ce:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80108d2:	4290      	cmp	r0, r2
 80108d4:	4607      	mov	r7, r0
 80108d6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80108da:	460e      	mov	r6, r1
 80108dc:	bfa8      	it	ge
 80108de:	4617      	movge	r7, r2
 80108e0:	4299      	cmp	r1, r3
 80108e2:	4472      	add	r2, lr
 80108e4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80108e8:	bfa8      	it	ge
 80108ea:	461e      	movge	r6, r3
 80108ec:	4440      	add	r0, r8
 80108ee:	4471      	add	r1, lr
 80108f0:	4463      	add	r3, ip
 80108f2:	b200      	sxth	r0, r0
 80108f4:	8027      	strh	r7, [r4, #0]
 80108f6:	b212      	sxth	r2, r2
 80108f8:	8066      	strh	r6, [r4, #2]
 80108fa:	b209      	sxth	r1, r1
 80108fc:	b21b      	sxth	r3, r3
 80108fe:	4290      	cmp	r0, r2
 8010900:	bfac      	ite	ge
 8010902:	ebc7 0200 	rsbge	r2, r7, r0
 8010906:	ebc7 0202 	rsblt	r2, r7, r2
 801090a:	4299      	cmp	r1, r3
 801090c:	bfac      	ite	ge
 801090e:	ebc6 0301 	rsbge	r3, r6, r1
 8010912:	ebc6 0303 	rsblt	r3, r6, r3
 8010916:	80a2      	strh	r2, [r4, #4]
 8010918:	80e3      	strh	r3, [r4, #6]
 801091a:	e7d4      	b.n	80108c6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801091c:	4620      	mov	r0, r4
 801091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010922 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010922:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010926:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801092a:	b383      	cbz	r3, 801098e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801092c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801092e:	b374      	cbz	r4, 801098e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010930:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010934:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010938:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801093c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010940:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010944:	b303      	cbz	r3, 8010988 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010946:	4668      	mov	r0, sp
 8010948:	1d21      	adds	r1, r4, #4
 801094a:	f8ad 5000 	strh.w	r5, [sp]
 801094e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010952:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010956:	f8ad 8006 	strh.w	r8, [sp, #6]
 801095a:	f7ff ff43 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 801095e:	4668      	mov	r0, sp
 8010960:	f7ff ff83 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010964:	b980      	cbnz	r0, 8010988 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010966:	f8bd 3000 	ldrh.w	r3, [sp]
 801096a:	4669      	mov	r1, sp
 801096c:	88a2      	ldrh	r2, [r4, #4]
 801096e:	4620      	mov	r0, r4
 8010970:	1a9b      	subs	r3, r3, r2
 8010972:	88e2      	ldrh	r2, [r4, #6]
 8010974:	f8ad 3000 	strh.w	r3, [sp]
 8010978:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801097c:	1a9b      	subs	r3, r3, r2
 801097e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010982:	6823      	ldr	r3, [r4, #0]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	4798      	blx	r3
 8010988:	69a4      	ldr	r4, [r4, #24]
 801098a:	2c00      	cmp	r4, #0
 801098c:	d1d8      	bne.n	8010940 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801098e:	b002      	add	sp, #8
 8010990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010994 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010994:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010996:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801099a:	460d      	mov	r5, r1
 801099c:	4616      	mov	r6, r2
 801099e:	b323      	cbz	r3, 80109ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80109a0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80109a2:	b314      	cbz	r4, 80109ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80109a4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80109a8:	b1eb      	cbz	r3, 80109e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80109aa:	6828      	ldr	r0, [r5, #0]
 80109ac:	466b      	mov	r3, sp
 80109ae:	6869      	ldr	r1, [r5, #4]
 80109b0:	c303      	stmia	r3!, {r0, r1}
 80109b2:	4668      	mov	r0, sp
 80109b4:	1d21      	adds	r1, r4, #4
 80109b6:	f7ff ff15 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 80109ba:	4668      	mov	r0, sp
 80109bc:	f7ff ff55 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 80109c0:	b988      	cbnz	r0, 80109e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80109c2:	f8bd 3000 	ldrh.w	r3, [sp]
 80109c6:	4669      	mov	r1, sp
 80109c8:	88a2      	ldrh	r2, [r4, #4]
 80109ca:	4620      	mov	r0, r4
 80109cc:	1a9b      	subs	r3, r3, r2
 80109ce:	88e2      	ldrh	r2, [r4, #6]
 80109d0:	f8ad 3000 	strh.w	r3, [sp]
 80109d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80109d8:	1a9b      	subs	r3, r3, r2
 80109da:	4632      	mov	r2, r6
 80109dc:	f8ad 3002 	strh.w	r3, [sp, #2]
 80109e0:	6823      	ldr	r3, [r4, #0]
 80109e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109e4:	4798      	blx	r3
 80109e6:	69a4      	ldr	r4, [r4, #24]
 80109e8:	e7db      	b.n	80109a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80109ea:	b002      	add	sp, #8
 80109ec:	bd70      	pop	{r4, r5, r6, pc}

080109ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80109ee:	6803      	ldr	r3, [r0, #0]
 80109f0:	b513      	push	{r0, r1, r4, lr}
 80109f2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80109f6:	2300      	movs	r3, #0
 80109f8:	e9cd 3300 	strd	r3, r3, [sp]
 80109fc:	466b      	mov	r3, sp
 80109fe:	47a0      	blx	r4
 8010a00:	b002      	add	sp, #8
 8010a02:	bd10      	pop	{r4, pc}

08010a04 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010a04:	2301      	movs	r3, #1
 8010a06:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010a0a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010a0e:	4770      	bx	lr

08010a10 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010a10:	2301      	movs	r3, #1
 8010a12:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010a16:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8010a1a:	4770      	bx	lr

08010a1c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010a1c:	6843      	ldr	r3, [r0, #4]
 8010a1e:	2201      	movs	r2, #1
 8010a20:	725a      	strb	r2, [r3, #9]
 8010a22:	6840      	ldr	r0, [r0, #4]
 8010a24:	6803      	ldr	r3, [r0, #0]
 8010a26:	691b      	ldr	r3, [r3, #16]
 8010a28:	4718      	bx	r3

08010a2a <_ZN8touchgfx3HAL8flushDMAEv>:
 8010a2a:	6840      	ldr	r0, [r0, #4]
 8010a2c:	6803      	ldr	r3, [r0, #0]
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	4718      	bx	r3

08010a32 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010a32:	b530      	push	{r4, r5, lr}
 8010a34:	b08b      	sub	sp, #44	@ 0x2c
 8010a36:	6804      	ldr	r4, [r0, #0]
 8010a38:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8010a3c:	9509      	str	r5, [sp, #36]	@ 0x24
 8010a3e:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8010a42:	9508      	str	r5, [sp, #32]
 8010a44:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8010a48:	9507      	str	r5, [sp, #28]
 8010a4a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8010a4e:	9506      	str	r5, [sp, #24]
 8010a50:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8010a54:	9505      	str	r5, [sp, #20]
 8010a56:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8010a5a:	9504      	str	r5, [sp, #16]
 8010a5c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8010a60:	9503      	str	r5, [sp, #12]
 8010a62:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8010a66:	9502      	str	r5, [sp, #8]
 8010a68:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8010a6c:	e9cd 3500 	strd	r3, r5, [sp]
 8010a70:	4613      	mov	r3, r2
 8010a72:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8010a74:	2200      	movs	r2, #0
 8010a76:	47a0      	blx	r4
 8010a78:	b00b      	add	sp, #44	@ 0x2c
 8010a7a:	bd30      	pop	{r4, r5, pc}

08010a7c <_ZN8touchgfx3HAL10beginFrameEv>:
 8010a7c:	4b04      	ldr	r3, [pc, #16]	@ (8010a90 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	b123      	cbz	r3, 8010a8c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010a82:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8010a86:	f080 0001 	eor.w	r0, r0, #1
 8010a8a:	4770      	bx	lr
 8010a8c:	2001      	movs	r0, #1
 8010a8e:	4770      	bx	lr
 8010a90:	2402641a 	.word	0x2402641a

08010a94 <_ZN8touchgfx3HAL8endFrameEv>:
 8010a94:	b510      	push	{r4, lr}
 8010a96:	4604      	mov	r4, r0
 8010a98:	6840      	ldr	r0, [r0, #4]
 8010a9a:	6803      	ldr	r3, [r0, #0]
 8010a9c:	689b      	ldr	r3, [r3, #8]
 8010a9e:	4798      	blx	r3
 8010aa0:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8010aa4:	b113      	cbz	r3, 8010aac <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010aac:	bd10      	pop	{r4, pc}

08010aae <_ZN8touchgfx3HAL10initializeEv>:
 8010aae:	b510      	push	{r4, lr}
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	f7f2 f8f5 	bl	8002ca0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010ab6:	f7f1 f94b 	bl	8001d50 <_ZN8touchgfx4GPIO4initEv>
 8010aba:	6860      	ldr	r0, [r4, #4]
 8010abc:	6803      	ldr	r3, [r0, #0]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	4798      	blx	r3
 8010ac2:	68e0      	ldr	r0, [r4, #12]
 8010ac4:	6803      	ldr	r3, [r0, #0]
 8010ac6:	689b      	ldr	r3, [r3, #8]
 8010ac8:	4798      	blx	r3
 8010aca:	6823      	ldr	r3, [r4, #0]
 8010acc:	4620      	mov	r0, r4
 8010ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ad4:	4718      	bx	r3
	...

08010ad8 <_ZN8touchgfx3HAL4tickEv>:
 8010ad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010ada:	6803      	ldr	r3, [r0, #0]
 8010adc:	4604      	mov	r4, r0
 8010ade:	4d5b      	ldr	r5, [pc, #364]	@ (8010c4c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010ae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010ae4:	4798      	blx	r3
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f000 8095 	beq.w	8010c16 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8010aec:	2001      	movs	r0, #1
 8010aee:	2600      	movs	r6, #0
 8010af0:	f7f1 f894 	bl	8001c1c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010af4:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8010af8:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8010afc:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010b00:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010b04:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8010b08:	b133      	cbz	r3, 8010b18 <_ZN8touchgfx3HAL4tickEv+0x40>
 8010b0a:	6823      	ldr	r3, [r4, #0]
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010b12:	4798      	blx	r3
 8010b14:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010b18:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8010b1c:	2601      	movs	r6, #1
 8010b1e:	6862      	ldr	r2, [r4, #4]
 8010b20:	f083 0301 	eor.w	r3, r3, #1
 8010b24:	702e      	strb	r6, [r5, #0]
 8010b26:	7253      	strb	r3, [r2, #9]
 8010b28:	f005 fd8c 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 8010b2c:	6803      	ldr	r3, [r0, #0]
 8010b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b30:	4798      	blx	r3
 8010b32:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010b36:	b90b      	cbnz	r3, 8010b3c <_ZN8touchgfx3HAL4tickEv+0x64>
 8010b38:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8010b3c:	f005 fd82 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 8010b40:	6803      	ldr	r3, [r0, #0]
 8010b42:	695b      	ldr	r3, [r3, #20]
 8010b44:	4798      	blx	r3
 8010b46:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010b48:	6803      	ldr	r3, [r0, #0]
 8010b4a:	691b      	ldr	r3, [r3, #16]
 8010b4c:	4798      	blx	r3
 8010b4e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010b52:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8010b56:	3b01      	subs	r3, #1
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010b5e:	b10a      	cbz	r2, 8010b64 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d1eb      	bne.n	8010b3c <_ZN8touchgfx3HAL4tickEv+0x64>
 8010b64:	4a3a      	ldr	r2, [pc, #232]	@ (8010c50 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010b66:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8010b6a:	7813      	ldrb	r3, [r2, #0]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	b25b      	sxtb	r3, r3
 8010b70:	4299      	cmp	r1, r3
 8010b72:	7013      	strb	r3, [r2, #0]
 8010b74:	dc10      	bgt.n	8010b98 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010b76:	2300      	movs	r3, #0
 8010b78:	68e0      	ldr	r0, [r4, #12]
 8010b7a:	a902      	add	r1, sp, #8
 8010b7c:	7013      	strb	r3, [r2, #0]
 8010b7e:	aa03      	add	r2, sp, #12
 8010b80:	6803      	ldr	r3, [r0, #0]
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	4798      	blx	r3
 8010b86:	6823      	ldr	r3, [r4, #0]
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d050      	beq.n	8010c2e <_ZN8touchgfx3HAL4tickEv+0x156>
 8010b8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010b90:	4620      	mov	r0, r4
 8010b92:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010b96:	4798      	blx	r3
 8010b98:	2300      	movs	r3, #0
 8010b9a:	6960      	ldr	r0, [r4, #20]
 8010b9c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010ba0:	b158      	cbz	r0, 8010bba <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010ba2:	6803      	ldr	r3, [r0, #0]
 8010ba4:	f10d 0107 	add.w	r1, sp, #7
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	4798      	blx	r3
 8010bac:	b128      	cbz	r0, 8010bba <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010bae:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010bb0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010bb4:	6803      	ldr	r3, [r0, #0]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	4798      	blx	r3
 8010bba:	f104 001c 	add.w	r0, r4, #28
 8010bbe:	f012 ff2f 	bl	8023a20 <_ZN8touchgfx8Gestures4tickEv>
 8010bc2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8010bc6:	b30b      	cbz	r3, 8010c0c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010bc8:	6920      	ldr	r0, [r4, #16]
 8010bca:	6803      	ldr	r3, [r0, #0]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	4798      	blx	r3
 8010bd0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010bd2:	4606      	mov	r6, r0
 8010bd4:	b903      	cbnz	r3, 8010bd8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010bd6:	6760      	str	r0, [r4, #116]	@ 0x74
 8010bd8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010bda:	4a1e      	ldr	r2, [pc, #120]	@ (8010c54 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010bdc:	1af3      	subs	r3, r6, r3
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d914      	bls.n	8010c0c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010be2:	6920      	ldr	r0, [r4, #16]
 8010be4:	6803      	ldr	r3, [r0, #0]
 8010be6:	699b      	ldr	r3, [r3, #24]
 8010be8:	4798      	blx	r3
 8010bea:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010bec:	2264      	movs	r2, #100	@ 0x64
 8010bee:	1af3      	subs	r3, r6, r3
 8010bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bf4:	fbb0 f0f3 	udiv	r0, r0, r3
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	dc1d      	bgt.n	8010c38 <_ZN8touchgfx3HAL4tickEv+0x160>
 8010bfc:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8010c00:	6920      	ldr	r0, [r4, #16]
 8010c02:	2100      	movs	r1, #0
 8010c04:	6803      	ldr	r3, [r0, #0]
 8010c06:	69db      	ldr	r3, [r3, #28]
 8010c08:	4798      	blx	r3
 8010c0a:	6766      	str	r6, [r4, #116]	@ 0x74
 8010c0c:	f005 fd1a 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 8010c10:	6803      	ldr	r3, [r0, #0]
 8010c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c14:	4798      	blx	r3
 8010c16:	6823      	ldr	r3, [r4, #0]
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010c1e:	4798      	blx	r3
 8010c20:	2001      	movs	r0, #1
 8010c22:	f7f1 f82b 	bl	8001c7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010c26:	2300      	movs	r3, #0
 8010c28:	702b      	strb	r3, [r5, #0]
 8010c2a:	b004      	add	sp, #16
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
 8010c2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010c32:	4620      	mov	r0, r4
 8010c34:	4798      	blx	r3
 8010c36:	e7af      	b.n	8010b98 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010c38:	2863      	cmp	r0, #99	@ 0x63
 8010c3a:	bfcb      	itete	gt
 8010c3c:	2300      	movgt	r3, #0
 8010c3e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8010c42:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8010c46:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8010c4a:	e7d9      	b.n	8010c00 <_ZN8touchgfx3HAL4tickEv+0x128>
 8010c4c:	24026420 	.word	0x24026420
 8010c50:	24026421 	.word	0x24026421
 8010c54:	05f5e100 	.word	0x05f5e100

08010c58 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010c58:	b510      	push	{r4, lr}
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	f7f2 f850 	bl	8002d00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8010c60:	2200      	movs	r2, #0
 8010c62:	6863      	ldr	r3, [r4, #4]
 8010c64:	729a      	strb	r2, [r3, #10]
 8010c66:	bd10      	pop	{r4, pc}

08010c68 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010c68:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8010c6a:	301c      	adds	r0, #28
 8010c6c:	f012 bed6 	b.w	8023a1c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010c70 <_ZN8touchgfx3HAL5touchEll>:
 8010c70:	b530      	push	{r4, r5, lr}
 8010c72:	b087      	sub	sp, #28
 8010c74:	4604      	mov	r4, r0
 8010c76:	a804      	add	r0, sp, #16
 8010c78:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010c7c:	f005 faca 	bl	8016214 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010c80:	9b04      	ldr	r3, [sp, #16]
 8010c82:	a906      	add	r1, sp, #24
 8010c84:	a803      	add	r0, sp, #12
 8010c86:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010c8a:	9b05      	ldr	r3, [sp, #20]
 8010c8c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010c90:	f005 fb12 	bl	80162b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010c94:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8010c98:	f104 001c 	add.w	r0, r4, #28
 8010c9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010ca0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010ca4:	b189      	cbz	r1, 8010cca <_ZN8touchgfx3HAL5touchEll+0x5a>
 8010ca6:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	4613      	mov	r3, r2
 8010cae:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8010cb2:	462a      	mov	r2, r5
 8010cb4:	f012 fec2 	bl	8023a3c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8010cb8:	b128      	cbz	r0, 8010cc6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8010cba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010cbe:	6623      	str	r3, [r4, #96]	@ 0x60
 8010cc0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010cc4:	6663      	str	r3, [r4, #100]	@ 0x64
 8010cc6:	b007      	add	sp, #28
 8010cc8:	bd30      	pop	{r4, r5, pc}
 8010cca:	f012 fef7 	bl	8023abc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010cd4:	e7f1      	b.n	8010cba <_ZN8touchgfx3HAL5touchEll+0x4a>

08010cd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010cd6:	b510      	push	{r4, lr}
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d046      	beq.n	8010d6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010cdc:	ea81 0002 	eor.w	r0, r1, r2
 8010ce0:	07c4      	lsls	r4, r0, #31
 8010ce2:	d508      	bpl.n	8010cf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010ce4:	440b      	add	r3, r1
 8010ce6:	3a01      	subs	r2, #1
 8010ce8:	428b      	cmp	r3, r1
 8010cea:	d93e      	bls.n	8010d6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010cec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010cf0:	f801 0b01 	strb.w	r0, [r1], #1
 8010cf4:	e7f8      	b.n	8010ce8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010cf6:	07d0      	lsls	r0, r2, #31
 8010cf8:	bf42      	ittt	mi
 8010cfa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8010cfe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010d02:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d911      	bls.n	8010d2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010d0a:	ea81 0402 	eor.w	r4, r1, r2
 8010d0e:	4610      	mov	r0, r2
 8010d10:	07a4      	lsls	r4, r4, #30
 8010d12:	d022      	beq.n	8010d5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010d14:	f023 0401 	bic.w	r4, r3, #1
 8010d18:	440c      	add	r4, r1
 8010d1a:	428c      	cmp	r4, r1
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	d904      	bls.n	8010d2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010d20:	8812      	ldrh	r2, [r2, #0]
 8010d22:	3002      	adds	r0, #2
 8010d24:	f821 2b02 	strh.w	r2, [r1], #2
 8010d28:	e7f7      	b.n	8010d1a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8010d2a:	f003 0301 	and.w	r3, r3, #1
 8010d2e:	f023 0003 	bic.w	r0, r3, #3
 8010d32:	4408      	add	r0, r1
 8010d34:	4288      	cmp	r0, r1
 8010d36:	4614      	mov	r4, r2
 8010d38:	d904      	bls.n	8010d44 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8010d3a:	6824      	ldr	r4, [r4, #0]
 8010d3c:	3204      	adds	r2, #4
 8010d3e:	f841 4b04 	str.w	r4, [r1], #4
 8010d42:	e7f7      	b.n	8010d34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010d44:	f003 0303 	and.w	r3, r3, #3
 8010d48:	3a01      	subs	r2, #1
 8010d4a:	440b      	add	r3, r1
 8010d4c:	428b      	cmp	r3, r1
 8010d4e:	d90c      	bls.n	8010d6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010d50:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010d54:	f801 0b01 	strb.w	r0, [r1], #1
 8010d58:	e7f8      	b.n	8010d4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8010d5a:	0790      	lsls	r0, r2, #30
 8010d5c:	d0e7      	beq.n	8010d2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010d5e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8010d62:	3b02      	subs	r3, #2
 8010d64:	f821 0b02 	strh.w	r0, [r1], #2
 8010d68:	e7e1      	b.n	8010d2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010d6a:	2001      	movs	r0, #1
 8010d6c:	bd10      	pop	{r4, pc}

08010d6e <_ZN8touchgfx3HAL7noTouchEv>:
 8010d6e:	b510      	push	{r4, lr}
 8010d70:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8010d74:	4604      	mov	r4, r0
 8010d76:	b153      	cbz	r3, 8010d8e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010d78:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8010d7c:	2101      	movs	r1, #1
 8010d7e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8010d82:	301c      	adds	r0, #28
 8010d84:	f012 fe9a 	bl	8023abc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010d8e:	bd10      	pop	{r4, pc}

08010d90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8010d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d94:	b085      	sub	sp, #20
 8010d96:	4604      	mov	r4, r0
 8010d98:	2000      	movs	r0, #0
 8010d9a:	4699      	mov	r9, r3
 8010d9c:	ad04      	add	r5, sp, #16
 8010d9e:	460f      	mov	r7, r1
 8010da0:	4690      	mov	r8, r2
 8010da2:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010da6:	69a0      	ldr	r0, [r4, #24]
 8010da8:	6806      	ldr	r6, [r0, #0]
 8010daa:	9501      	str	r5, [sp, #4]
 8010dac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8010db0:	9500      	str	r5, [sp, #0]
 8010db2:	6835      	ldr	r5, [r6, #0]
 8010db4:	47a8      	blx	r5
 8010db6:	4d10      	ldr	r5, [pc, #64]	@ (8010df8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010db8:	4606      	mov	r6, r0
 8010dba:	f8a5 9000 	strh.w	r9, [r5]
 8010dbe:	f7f3 fa8b 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8010dc2:	6803      	ldr	r3, [r0, #0]
 8010dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc6:	4798      	blx	r3
 8010dc8:	b128      	cbz	r0, 8010dd6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010dca:	2801      	cmp	r0, #1
 8010dcc:	d00b      	beq.n	8010de6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8010dce:	4630      	mov	r0, r6
 8010dd0:	b005      	add	sp, #20
 8010dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dd6:	882b      	ldrh	r3, [r5, #0]
 8010dd8:	fb08 7203 	mla	r2, r8, r3, r7
 8010ddc:	9b03      	ldr	r3, [sp, #12]
 8010dde:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010de2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010de4:	e7f3      	b.n	8010dce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010de6:	882a      	ldrh	r2, [r5, #0]
 8010de8:	9b03      	ldr	r3, [sp, #12]
 8010dea:	fb08 7202 	mla	r2, r8, r2, r7
 8010dee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010df2:	1a9a      	subs	r2, r3, r2
 8010df4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8010df6:	e7ea      	b.n	8010dce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010df8:	24026416 	.word	0x24026416

08010dfc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dfe:	b08b      	sub	sp, #44	@ 0x2c
 8010e00:	4617      	mov	r7, r2
 8010e02:	4604      	mov	r4, r0
 8010e04:	460e      	mov	r6, r1
 8010e06:	461d      	mov	r5, r3
 8010e08:	f7f3 fa66 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8010e0c:	6803      	ldr	r3, [r0, #0]
 8010e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e10:	4798      	blx	r3
 8010e12:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010e16:	9007      	str	r0, [sp, #28]
 8010e18:	4631      	mov	r1, r6
 8010e1a:	6822      	ldr	r2, [r4, #0]
 8010e1c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010e20:	4b0c      	ldr	r3, [pc, #48]	@ (8010e54 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8010e22:	4620      	mov	r0, r4
 8010e24:	881b      	ldrh	r3, [r3, #0]
 8010e26:	9306      	str	r3, [sp, #24]
 8010e28:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010e2c:	9305      	str	r3, [sp, #20]
 8010e2e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8010e32:	9304      	str	r3, [sp, #16]
 8010e34:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010e38:	9303      	str	r3, [sp, #12]
 8010e3a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010e3e:	9302      	str	r3, [sp, #8]
 8010e40:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010e44:	e9cd 5300 	strd	r5, r3, [sp]
 8010e48:	463b      	mov	r3, r7
 8010e4a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	47a8      	blx	r5
 8010e50:	b00b      	add	sp, #44	@ 0x2c
 8010e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e54:	24026416 	.word	0x24026416

08010e58 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e5c:	4698      	mov	r8, r3
 8010e5e:	6803      	ldr	r3, [r0, #0]
 8010e60:	b08b      	sub	sp, #44	@ 0x2c
 8010e62:	4617      	mov	r7, r2
 8010e64:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8010e66:	460e      	mov	r6, r1
 8010e68:	4b13      	ldr	r3, [pc, #76]	@ (8010eb8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	f8b3 9000 	ldrh.w	r9, [r3]
 8010e70:	f7f3 fa32 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8010e74:	6803      	ldr	r3, [r0, #0]
 8010e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e78:	4798      	blx	r3
 8010e7a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010e7e:	2200      	movs	r2, #0
 8010e80:	4631      	mov	r1, r6
 8010e82:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010e86:	2302      	movs	r3, #2
 8010e88:	4620      	mov	r0, r4
 8010e8a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8010e8e:	2301      	movs	r3, #1
 8010e90:	9305      	str	r3, [sp, #20]
 8010e92:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010e96:	9304      	str	r3, [sp, #16]
 8010e98:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8010e9c:	9303      	str	r3, [sp, #12]
 8010e9e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010ea2:	9302      	str	r3, [sp, #8]
 8010ea4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010ea8:	e9cd 8300 	strd	r8, r3, [sp]
 8010eac:	463b      	mov	r3, r7
 8010eae:	47a8      	blx	r5
 8010eb0:	b00b      	add	sp, #44	@ 0x2c
 8010eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eb6:	bf00      	nop
 8010eb8:	24026416 	.word	0x24026416

08010ebc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ec0:	4698      	mov	r8, r3
 8010ec2:	6803      	ldr	r3, [r0, #0]
 8010ec4:	b087      	sub	sp, #28
 8010ec6:	460e      	mov	r6, r1
 8010ec8:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8010eca:	4617      	mov	r7, r2
 8010ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8010f0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8010ece:	4604      	mov	r4, r0
 8010ed0:	f8b3 9000 	ldrh.w	r9, [r3]
 8010ed4:	f7f3 fa00 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8010ed8:	6803      	ldr	r3, [r0, #0]
 8010eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010edc:	4798      	blx	r3
 8010ede:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8010ee2:	463a      	mov	r2, r7
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	f8cd 900c 	str.w	r9, [sp, #12]
 8010eea:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8010eee:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	9302      	str	r3, [sp, #8]
 8010ef6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8010efa:	9301      	str	r3, [sp, #4]
 8010efc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	4643      	mov	r3, r8
 8010f04:	47a8      	blx	r5
 8010f06:	b007      	add	sp, #28
 8010f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f0c:	24026416 	.word	0x24026416

08010f10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	4604      	mov	r4, r0
 8010f16:	b08f      	sub	sp, #60	@ 0x3c
 8010f18:	4610      	mov	r0, r2
 8010f1a:	460d      	mov	r5, r1
 8010f1c:	4691      	mov	r9, r2
 8010f1e:	461e      	mov	r6, r3
 8010f20:	f008 fc68 	bl	80197f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010f24:	2800      	cmp	r0, #0
 8010f26:	f000 809d 	beq.w	8011064 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8010f2a:	6823      	ldr	r3, [r4, #0]
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80110c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8010f32:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8010f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f38:	4798      	blx	r3
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80110cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8010f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f44:	4798      	blx	r3
 8010f46:	f8bb 3000 	ldrh.w	r3, [fp]
 8010f4a:	4f5c      	ldr	r7, [pc, #368]	@ (80110bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010f4c:	9301      	str	r3, [sp, #4]
 8010f4e:	f8ba 3000 	ldrh.w	r3, [sl]
 8010f52:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8010f56:	4640      	mov	r0, r8
 8010f58:	9302      	str	r3, [sp, #8]
 8010f5a:	883b      	ldrh	r3, [r7, #0]
 8010f5c:	9303      	str	r3, [sp, #12]
 8010f5e:	4b58      	ldr	r3, [pc, #352]	@ (80110c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010f60:	881a      	ldrh	r2, [r3, #0]
 8010f62:	9305      	str	r3, [sp, #20]
 8010f64:	9204      	str	r2, [sp, #16]
 8010f66:	f008 fd95 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010f6a:	8038      	strh	r0, [r7, #0]
 8010f6c:	4640      	mov	r0, r8
 8010f6e:	f008 fdc5 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010f72:	9b05      	ldr	r3, [sp, #20]
 8010f74:	b280      	uxth	r0, r0
 8010f76:	8018      	strh	r0, [r3, #0]
 8010f78:	4b52      	ldr	r3, [pc, #328]	@ (80110c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d174      	bne.n	801106a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8010f80:	883b      	ldrh	r3, [r7, #0]
 8010f82:	f8aa 0000 	strh.w	r0, [sl]
 8010f86:	f8ab 3000 	strh.w	r3, [fp]
 8010f8a:	4648      	mov	r0, r9
 8010f8c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8010f90:	f008 fc30 	bl	80197f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010f94:	2200      	movs	r2, #0
 8010f96:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8010f9a:	4611      	mov	r1, r2
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8010fa2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8010fa6:	f7f3 faa6 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 8010faa:	2301      	movs	r3, #1
 8010fac:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8010fb0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010fb4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	dd5c      	ble.n	8011076 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010fbc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	dd58      	ble.n	8011076 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010fc4:	462a      	mov	r2, r5
 8010fc6:	ab0a      	add	r3, sp, #40	@ 0x28
 8010fc8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010fcc:	6851      	ldr	r1, [r2, #4]
 8010fce:	c303      	stmia	r3!, {r0, r1}
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	a80a      	add	r0, sp, #40	@ 0x28
 8010fd4:	f7ff fc06 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 8010fd8:	4b38      	ldr	r3, [pc, #224]	@ (80110bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010fda:	2100      	movs	r1, #0
 8010fdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010fe0:	4b37      	ldr	r3, [pc, #220]	@ (80110c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010fe2:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8010fe6:	aa0a      	add	r2, sp, #40	@ 0x28
 8010fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fec:	910c      	str	r1, [sp, #48]	@ 0x30
 8010fee:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010ff2:	ab08      	add	r3, sp, #32
 8010ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ff8:	e883 0003 	stmia.w	r3, {r0, r1}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	a90c      	add	r1, sp, #48	@ 0x30
 8011000:	f7ff fbf0 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 8011004:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011006:	2b00      	cmp	r3, #0
 8011008:	d13c      	bne.n	8011084 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801100a:	2000      	movs	r0, #0
 801100c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8011010:	2600      	movs	r6, #0
 8011012:	696b      	ldr	r3, [r5, #20]
 8011014:	a908      	add	r1, sp, #32
 8011016:	682a      	ldr	r2, [r5, #0]
 8011018:	4628      	mov	r0, r5
 801101a:	9305      	str	r3, [sp, #20]
 801101c:	616e      	str	r6, [r5, #20]
 801101e:	6892      	ldr	r2, [r2, #8]
 8011020:	4790      	blx	r2
 8011022:	9b05      	ldr	r3, [sp, #20]
 8011024:	4652      	mov	r2, sl
 8011026:	4649      	mov	r1, r9
 8011028:	616b      	str	r3, [r5, #20]
 801102a:	4628      	mov	r0, r5
 801102c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8011030:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8011034:	f7f3 fa5f 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 8011038:	9a01      	ldr	r2, [sp, #4]
 801103a:	4b23      	ldr	r3, [pc, #140]	@ (80110c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801103c:	4620      	mov	r0, r4
 801103e:	801a      	strh	r2, [r3, #0]
 8011040:	9a02      	ldr	r2, [sp, #8]
 8011042:	4b22      	ldr	r3, [pc, #136]	@ (80110cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011044:	801a      	strh	r2, [r3, #0]
 8011046:	9a03      	ldr	r2, [sp, #12]
 8011048:	4b1c      	ldr	r3, [pc, #112]	@ (80110bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801104a:	801a      	strh	r2, [r3, #0]
 801104c:	4b1c      	ldr	r3, [pc, #112]	@ (80110c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801104e:	9a04      	ldr	r2, [sp, #16]
 8011050:	801a      	strh	r2, [r3, #0]
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8011058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801105a:	4798      	blx	r3
 801105c:	6823      	ldr	r3, [r4, #0]
 801105e:	4620      	mov	r0, r4
 8011060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011062:	4798      	blx	r3
 8011064:	b00f      	add	sp, #60	@ 0x3c
 8011066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106a:	883b      	ldrh	r3, [r7, #0]
 801106c:	f8ab 0000 	strh.w	r0, [fp]
 8011070:	f8aa 3000 	strh.w	r3, [sl]
 8011074:	e789      	b.n	8010f8a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8011076:	462a      	mov	r2, r5
 8011078:	ab0a      	add	r3, sp, #40	@ 0x28
 801107a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801107e:	6851      	ldr	r1, [r2, #4]
 8011080:	c303      	stmia	r3!, {r0, r1}
 8011082:	e7a9      	b.n	8010fd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011084:	a807      	add	r0, sp, #28
 8011086:	f008 fe43 	bl	8019d10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801108a:	4606      	mov	r6, r0
 801108c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801108e:	6803      	ldr	r3, [r0, #0]
 8011090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011092:	4798      	blx	r3
 8011094:	4286      	cmp	r6, r0
 8011096:	d1b8      	bne.n	801100a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8011098:	f7f3 f91e 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 801109c:	6803      	ldr	r3, [r0, #0]
 801109e:	4606      	mov	r6, r0
 80110a0:	a807      	add	r0, sp, #28
 80110a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110a4:	9305      	str	r3, [sp, #20]
 80110a6:	f008 fe33 	bl	8019d10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80110aa:	9b05      	ldr	r3, [sp, #20]
 80110ac:	4601      	mov	r1, r0
 80110ae:	4630      	mov	r0, r6
 80110b0:	4798      	blx	r3
 80110b2:	f080 0001 	eor.w	r0, r0, #1
 80110b6:	b2c0      	uxtb	r0, r0
 80110b8:	e7a8      	b.n	801100c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80110ba:	bf00      	nop
 80110bc:	24026410 	.word	0x24026410
 80110c0:	24026412 	.word	0x24026412
 80110c4:	24026414 	.word	0x24026414
 80110c8:	24026416 	.word	0x24026416
 80110cc:	24026418 	.word	0x24026418

080110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80110d0:	4b07      	ldr	r3, [pc, #28]	@ (80110f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80110d2:	b510      	push	{r4, lr}
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	4604      	mov	r4, r0
 80110d8:	b13b      	cbz	r3, 80110ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80110da:	6803      	ldr	r3, [r0, #0]
 80110dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110de:	4798      	blx	r3
 80110e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80110e2:	4283      	cmp	r3, r0
 80110e4:	d101      	bne.n	80110ea <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80110e6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80110e8:	bd10      	pop	{r4, pc}
 80110ea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80110ec:	e7fc      	b.n	80110e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80110ee:	bf00      	nop
 80110f0:	2402641a 	.word	0x2402641a

080110f4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80110f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f8:	461d      	mov	r5, r3
 80110fa:	b08a      	sub	sp, #40	@ 0x28
 80110fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011100:	4690      	mov	r8, r2
 8011102:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8011106:	2400      	movs	r4, #0
 8011108:	4607      	mov	r7, r0
 801110a:	fb06 8505 	mla	r5, r6, r5, r8
 801110e:	9404      	str	r4, [sp, #16]
 8011110:	f88d 4020 	strb.w	r4, [sp, #32]
 8011114:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011118:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801111c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011120:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8011124:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011128:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801112c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011130:	f7ff ffce 	bl	80110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011134:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801113e:	a901      	add	r1, sp, #4
 8011140:	9505      	str	r5, [sp, #20]
 8011142:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011146:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801114a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801114e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8011152:	6803      	ldr	r3, [r0, #0]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	4798      	blx	r3
 8011158:	b00a      	add	sp, #40	@ 0x28
 801115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801115e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801115e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011162:	b08b      	sub	sp, #44	@ 0x2c
 8011164:	2400      	movs	r4, #0
 8011166:	4691      	mov	r9, r2
 8011168:	461d      	mov	r5, r3
 801116a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801116e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011172:	4688      	mov	r8, r1
 8011174:	4607      	mov	r7, r0
 8011176:	9404      	str	r4, [sp, #16]
 8011178:	fb06 9505 	mla	r5, r6, r5, r9
 801117c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011180:	f7ff ffa6 	bl	80110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011184:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011188:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011192:	a901      	add	r1, sp, #4
 8011194:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011198:	9505      	str	r5, [sp, #20]
 801119a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801119e:	f8ad 401c 	strh.w	r4, [sp, #28]
 80111a2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80111a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80111aa:	f8ad 4020 	strh.w	r4, [sp, #32]
 80111ae:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80111b2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80111b6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80111ba:	6803      	ldr	r3, [r0, #0]
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	4798      	blx	r3
 80111c0:	b00b      	add	sp, #44	@ 0x2c
 80111c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080111c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80111c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111cc:	b08a      	sub	sp, #40	@ 0x28
 80111ce:	4698      	mov	r8, r3
 80111d0:	2300      	movs	r3, #0
 80111d2:	4606      	mov	r6, r0
 80111d4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80111d8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80111dc:	2d0b      	cmp	r5, #11
 80111de:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80111e2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80111e6:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80111ea:	9304      	str	r3, [sp, #16]
 80111ec:	d137      	bne.n	801125e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80111ee:	2380      	movs	r3, #128	@ 0x80
 80111f0:	f88d 0020 	strb.w	r0, [sp, #32]
 80111f4:	4630      	mov	r0, r6
 80111f6:	9203      	str	r2, [sp, #12]
 80111f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80111fc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8011200:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011204:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011208:	f8ad 301a 	strh.w	r3, [sp, #26]
 801120c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011210:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011214:	f7ff ff5c 	bl	80110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011218:	2c0b      	cmp	r4, #11
 801121a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801121e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8011222:	bf94      	ite	ls
 8011224:	4b19      	ldrls	r3, [pc, #100]	@ (801128c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011226:	2100      	movhi	r1, #0
 8011228:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801122c:	bf98      	it	ls
 801122e:	5d19      	ldrbls	r1, [r3, r4]
 8011230:	fb02 8307 	mla	r3, r2, r7, r8
 8011234:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011238:	10c9      	asrs	r1, r1, #3
 801123a:	fb01 0003 	mla	r0, r1, r3, r0
 801123e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8011242:	a901      	add	r1, sp, #4
 8011244:	9005      	str	r0, [sp, #20]
 8011246:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801124a:	2300      	movs	r3, #0
 801124c:	6870      	ldr	r0, [r6, #4]
 801124e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011252:	6803      	ldr	r3, [r0, #0]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	4798      	blx	r3
 8011258:	b00a      	add	sp, #40	@ 0x28
 801125a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801125e:	2d02      	cmp	r5, #2
 8011260:	d109      	bne.n	8011276 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011262:	28ff      	cmp	r0, #255	@ 0xff
 8011264:	d105      	bne.n	8011272 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011266:	f1bc 0f00 	cmp.w	ip, #0
 801126a:	bf14      	ite	ne
 801126c:	2340      	movne	r3, #64	@ 0x40
 801126e:	2320      	moveq	r3, #32
 8011270:	e7be      	b.n	80111f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011272:	2340      	movs	r3, #64	@ 0x40
 8011274:	e7bc      	b.n	80111f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011276:	28ff      	cmp	r0, #255	@ 0xff
 8011278:	d105      	bne.n	8011286 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801127a:	f1bc 0f00 	cmp.w	ip, #0
 801127e:	bf14      	ite	ne
 8011280:	2304      	movne	r3, #4
 8011282:	2301      	moveq	r3, #1
 8011284:	e7b4      	b.n	80111f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011286:	2304      	movs	r3, #4
 8011288:	e7b2      	b.n	80111f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801128a:	bf00      	nop
 801128c:	08028e70 	.word	0x08028e70

08011290 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	b08b      	sub	sp, #44	@ 0x2c
 8011296:	461d      	mov	r5, r3
 8011298:	2400      	movs	r4, #0
 801129a:	4688      	mov	r8, r1
 801129c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80112a0:	4693      	mov	fp, r2
 80112a2:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80112a6:	4607      	mov	r7, r0
 80112a8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80112ac:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80112b0:	9404      	str	r4, [sp, #16]
 80112b2:	bf14      	ite	ne
 80112b4:	2308      	movne	r3, #8
 80112b6:	2302      	moveq	r3, #2
 80112b8:	fb05 b50a 	mla	r5, r5, sl, fp
 80112bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80112c0:	f7ff ff06 	bl	80110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80112c4:	2e0b      	cmp	r6, #11
 80112c6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80112ca:	a901      	add	r1, sp, #4
 80112cc:	bf98      	it	ls
 80112ce:	4b13      	ldrls	r3, [pc, #76]	@ (801131c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80112d0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80112d4:	bf98      	it	ls
 80112d6:	5d9c      	ldrbls	r4, [r3, r6]
 80112d8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80112dc:	10e4      	asrs	r4, r4, #3
 80112de:	f8cd 8010 	str.w	r8, [sp, #16]
 80112e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80112e6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80112ea:	fb04 0405 	mla	r4, r4, r5, r0
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80112f4:	2300      	movs	r3, #0
 80112f6:	9405      	str	r4, [sp, #20]
 80112f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80112fc:	f88d 9020 	strb.w	r9, [sp, #32]
 8011300:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8011304:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8011308:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 801130c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8011310:	6803      	ldr	r3, [r0, #0]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	4798      	blx	r3
 8011316:	b00b      	add	sp, #44	@ 0x2c
 8011318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801131c:	08028e70 	.word	0x08028e70

08011320 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011324:	461e      	mov	r6, r3
 8011326:	4b0a      	ldr	r3, [pc, #40]	@ (8011350 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011328:	460f      	mov	r7, r1
 801132a:	4690      	mov	r8, r2
 801132c:	881d      	ldrh	r5, [r3, #0]
 801132e:	f7f2 ffd3 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8011332:	6803      	ldr	r3, [r0, #0]
 8011334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011336:	4798      	blx	r3
 8011338:	280b      	cmp	r0, #11
 801133a:	bf96      	itet	ls
 801133c:	4b05      	ldrls	r3, [pc, #20]	@ (8011354 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801133e:	2400      	movhi	r4, #0
 8011340:	5c1c      	ldrbls	r4, [r3, r0]
 8011342:	fb08 7005 	mla	r0, r8, r5, r7
 8011346:	10e4      	asrs	r4, r4, #3
 8011348:	fb04 6000 	mla	r0, r4, r0, r6
 801134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011350:	24026416 	.word	0x24026416
 8011354:	08028e70 	.word	0x08028e70

08011358 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801135a:	b08b      	sub	sp, #44	@ 0x2c
 801135c:	461f      	mov	r7, r3
 801135e:	4604      	mov	r4, r0
 8011360:	4616      	mov	r6, r2
 8011362:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8011366:	2500      	movs	r5, #0
 8011368:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801136c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011370:	9504      	str	r5, [sp, #16]
 8011372:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011376:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801137a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801137e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8011382:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011386:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801138a:	f88d 3020 	strb.w	r3, [sp, #32]
 801138e:	f7ff fe9f 	bl	80110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011392:	463a      	mov	r2, r7
 8011394:	4631      	mov	r1, r6
 8011396:	4603      	mov	r3, r0
 8011398:	4620      	mov	r0, r4
 801139a:	f7ff ffc1 	bl	8011320 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801139e:	4b0e      	ldr	r3, [pc, #56]	@ (80113d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80113a0:	9005      	str	r0, [sp, #20]
 80113a2:	881b      	ldrh	r3, [r3, #0]
 80113a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80113a8:	f7f2 ff96 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 80113ac:	6803      	ldr	r3, [r0, #0]
 80113ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113b0:	4798      	blx	r3
 80113b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80113b4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80113b8:	a901      	add	r1, sp, #4
 80113ba:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80113be:	9304      	str	r3, [sp, #16]
 80113c0:	6860      	ldr	r0, [r4, #4]
 80113c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80113c6:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80113ca:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80113ce:	6803      	ldr	r3, [r0, #0]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	4798      	blx	r3
 80113d4:	b00b      	add	sp, #44	@ 0x2c
 80113d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113d8:	24026416 	.word	0x24026416

080113dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80113dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113de:	b08d      	sub	sp, #52	@ 0x34
 80113e0:	2501      	movs	r5, #1
 80113e2:	4604      	mov	r4, r0
 80113e4:	466b      	mov	r3, sp
 80113e6:	9503      	str	r5, [sp, #12]
 80113e8:	e883 0006 	stmia.w	r3, {r1, r2}
 80113ec:	2300      	movs	r3, #0
 80113ee:	f8bd 6000 	ldrh.w	r6, [sp]
 80113f2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80113f6:	9306      	str	r3, [sp, #24]
 80113f8:	6803      	ldr	r3, [r0, #0]
 80113fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113fc:	4798      	blx	r3
 80113fe:	463a      	mov	r2, r7
 8011400:	4631      	mov	r1, r6
 8011402:	4603      	mov	r3, r0
 8011404:	4620      	mov	r0, r4
 8011406:	f7ff ff8b 	bl	8011320 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801140a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801140c:	9004      	str	r0, [sp, #16]
 801140e:	9307      	str	r3, [sp, #28]
 8011410:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011414:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801141c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8011420:	4b0e      	ldr	r3, [pc, #56]	@ (801145c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8011428:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801142c:	f7f2 ff54 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8011430:	6803      	ldr	r3, [r0, #0]
 8011432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011434:	4798      	blx	r3
 8011436:	23ff      	movs	r3, #255	@ 0xff
 8011438:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 801143c:	a903      	add	r1, sp, #12
 801143e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8011442:	6860      	ldr	r0, [r4, #4]
 8011444:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8011448:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801144c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8011450:	6803      	ldr	r3, [r0, #0]
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	4798      	blx	r3
 8011456:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8011458:	b00d      	add	sp, #52	@ 0x34
 801145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801145c:	24026416 	.word	0x24026416

08011460 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011464:	b08c      	sub	sp, #48	@ 0x30
 8011466:	461e      	mov	r6, r3
 8011468:	2300      	movs	r3, #0
 801146a:	4604      	mov	r4, r0
 801146c:	466d      	mov	r5, sp
 801146e:	9306      	str	r3, [sp, #24]
 8011470:	6803      	ldr	r3, [r0, #0]
 8011472:	e885 0006 	stmia.w	r5, {r1, r2}
 8011476:	2501      	movs	r5, #1
 8011478:	f8bd 7000 	ldrh.w	r7, [sp]
 801147c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011480:	9503      	str	r5, [sp, #12]
 8011482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011484:	4798      	blx	r3
 8011486:	4642      	mov	r2, r8
 8011488:	4639      	mov	r1, r7
 801148a:	4603      	mov	r3, r0
 801148c:	4620      	mov	r0, r4
 801148e:	f7ff ff47 	bl	8011320 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011492:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011496:	9004      	str	r0, [sp, #16]
 8011498:	f8ad 3020 	strh.w	r3, [sp, #32]
 801149c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80114a0:	9607      	str	r6, [sp, #28]
 80114a2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80114a6:	4b10      	ldr	r3, [pc, #64]	@ (80114e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80114a8:	881b      	ldrh	r3, [r3, #0]
 80114aa:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80114ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80114b0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80114b4:	f7f2 ff10 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 80114b8:	6803      	ldr	r3, [r0, #0]
 80114ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114bc:	4798      	blx	r3
 80114be:	23ff      	movs	r3, #255	@ 0xff
 80114c0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80114c4:	a903      	add	r1, sp, #12
 80114c6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80114ca:	6860      	ldr	r0, [r4, #4]
 80114cc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80114d0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80114d4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80114d8:	6803      	ldr	r3, [r0, #0]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	4798      	blx	r3
 80114de:	4630      	mov	r0, r6
 80114e0:	b00c      	add	sp, #48	@ 0x30
 80114e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114e6:	bf00      	nop
 80114e8:	24026416 	.word	0x24026416

080114ec <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80114ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ee:	b085      	sub	sp, #20
 80114f0:	4605      	mov	r5, r0
 80114f2:	ac02      	add	r4, sp, #8
 80114f4:	e884 0006 	stmia.w	r4, {r1, r2}
 80114f8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80114fc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8011500:	f7ff fde6 	bl	80110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011504:	4631      	mov	r1, r6
 8011506:	4603      	mov	r3, r0
 8011508:	463a      	mov	r2, r7
 801150a:	4628      	mov	r0, r5
 801150c:	f7ff ff08 	bl	8011320 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011510:	4a05      	ldr	r2, [pc, #20]	@ (8011528 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8011512:	682b      	ldr	r3, [r5, #0]
 8011514:	8812      	ldrh	r2, [r2, #0]
 8011516:	9200      	str	r2, [sp, #0]
 8011518:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801151a:	4603      	mov	r3, r0
 801151c:	4628      	mov	r0, r5
 801151e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011522:	47b0      	blx	r6
 8011524:	b005      	add	sp, #20
 8011526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011528:	24026416 	.word	0x24026416

0801152c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801152c:	b570      	push	{r4, r5, r6, lr}
 801152e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8011532:	4604      	mov	r4, r0
 8011534:	b19b      	cbz	r3, 801155e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011536:	2002      	movs	r0, #2
 8011538:	f7f0 fbd0 	bl	8001cdc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801153c:	2300      	movs	r3, #0
 801153e:	4620      	mov	r0, r4
 8011540:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8011544:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8011548:	6823      	ldr	r3, [r4, #0]
 801154a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801154e:	f7ff fdbf 	bl	80110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011552:	4601      	mov	r1, r0
 8011554:	4620      	mov	r0, r4
 8011556:	462b      	mov	r3, r5
 8011558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801155c:	4718      	bx	r3
 801155e:	bd70      	pop	{r4, r5, r6, pc}

08011560 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8011560:	b570      	push	{r4, r5, r6, lr}
 8011562:	4605      	mov	r5, r0
 8011564:	460c      	mov	r4, r1
 8011566:	2003      	movs	r0, #3
 8011568:	b149      	cbz	r1, 801157e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801156a:	f7f0 fb57 	bl	8001c1c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801156e:	6928      	ldr	r0, [r5, #16]
 8011570:	b168      	cbz	r0, 801158e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011572:	6803      	ldr	r3, [r0, #0]
 8011574:	2101      	movs	r1, #1
 8011576:	695b      	ldr	r3, [r3, #20]
 8011578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801157c:	4718      	bx	r3
 801157e:	f7f0 fb7d 	bl	8001c7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011582:	6928      	ldr	r0, [r5, #16]
 8011584:	b118      	cbz	r0, 801158e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011586:	6803      	ldr	r3, [r0, #0]
 8011588:	4621      	mov	r1, r4
 801158a:	695b      	ldr	r3, [r3, #20]
 801158c:	e7f4      	b.n	8011578 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801158e:	bd70      	pop	{r4, r5, r6, pc}

08011590 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8011596:	4604      	mov	r4, r0
 8011598:	460d      	mov	r5, r1
 801159a:	428b      	cmp	r3, r1
 801159c:	d006      	beq.n	80115ac <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801159e:	6803      	ldr	r3, [r0, #0]
 80115a0:	b929      	cbnz	r1, 80115ae <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80115a2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80115a6:	4798      	blx	r3
 80115a8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80115ac:	bd38      	pop	{r3, r4, r5, pc}
 80115ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80115b2:	e7f8      	b.n	80115a6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080115b4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80115b4:	4b0d      	ldr	r3, [pc, #52]	@ (80115ec <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80115b6:	b510      	push	{r4, lr}
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	4604      	mov	r4, r0
 80115bc:	b95b      	cbnz	r3, 80115d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80115be:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80115c2:	2b02      	cmp	r3, #2
 80115c4:	d007      	beq.n	80115d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80115c6:	6840      	ldr	r0, [r0, #4]
 80115c8:	f000 f91a 	bl	8011800 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80115cc:	b118      	cbz	r0, 80115d6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80115ce:	6862      	ldr	r2, [r4, #4]
 80115d0:	7a53      	ldrb	r3, [r2, #9]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d0fc      	beq.n	80115d0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80115d6:	f7f1 fb8b 	bl	8002cf0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80115da:	4620      	mov	r0, r4
 80115dc:	2100      	movs	r1, #0
 80115de:	f7ff ffd7 	bl	8011590 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80115e2:	4620      	mov	r0, r4
 80115e4:	f7ff fd74 	bl	80110d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80115e8:	bd10      	pop	{r4, pc}
 80115ea:	bf00      	nop
 80115ec:	2402641a 	.word	0x2402641a

080115f0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80115f0:	b570      	push	{r4, r5, r6, lr}
 80115f2:	4604      	mov	r4, r0
 80115f4:	6803      	ldr	r3, [r0, #0]
 80115f6:	b919      	cbnz	r1, 8011600 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80115f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115fe:	4718      	bx	r3
 8011600:	2200      	movs	r2, #0
 8011602:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8011606:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 801160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801160c:	4798      	blx	r3
 801160e:	6863      	ldr	r3, [r4, #4]
 8011610:	2101      	movs	r1, #1
 8011612:	4605      	mov	r5, r0
 8011614:	4620      	mov	r0, r4
 8011616:	7299      	strb	r1, [r3, #10]
 8011618:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 801161c:	f7ff ffb8 	bl	8011590 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011620:	4628      	mov	r0, r5
 8011622:	bd70      	pop	{r4, r5, r6, pc}

08011624 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8011624:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8011628:	1a13      	subs	r3, r2, r0
 801162a:	4258      	negs	r0, r3
 801162c:	4158      	adcs	r0, r3
 801162e:	4770      	bx	lr

08011630 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8011630:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8011634:	1a9b      	subs	r3, r3, r2
 8011636:	2b00      	cmp	r3, #0
 8011638:	bfdc      	itt	le
 801163a:	6882      	ldrle	r2, [r0, #8]
 801163c:	189b      	addle	r3, r3, r2
 801163e:	2b01      	cmp	r3, #1
 8011640:	bfcc      	ite	gt
 8011642:	2000      	movgt	r0, #0
 8011644:	2001      	movle	r0, #1
 8011646:	4770      	bx	lr

08011648 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8011648:	6902      	ldr	r2, [r0, #16]
 801164a:	6843      	ldr	r3, [r0, #4]
 801164c:	2024      	movs	r0, #36	@ 0x24
 801164e:	fb00 3002 	mla	r0, r0, r2, r3
 8011652:	4770      	bx	lr

08011654 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8011654:	6803      	ldr	r3, [r0, #0]
 8011656:	691b      	ldr	r3, [r3, #16]
 8011658:	4718      	bx	r3

0801165a <_ZN8touchgfx13DMA_Interface7executeEv>:
 801165a:	2301      	movs	r3, #1
 801165c:	b570      	push	{r4, r5, r6, lr}
 801165e:	7203      	strb	r3, [r0, #8]
 8011660:	4604      	mov	r4, r0
 8011662:	6840      	ldr	r0, [r0, #4]
 8011664:	6803      	ldr	r3, [r0, #0]
 8011666:	699b      	ldr	r3, [r3, #24]
 8011668:	4798      	blx	r3
 801166a:	6803      	ldr	r3, [r0, #0]
 801166c:	4605      	mov	r5, r0
 801166e:	2b40      	cmp	r3, #64	@ 0x40
 8011670:	d00c      	beq.n	801168c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011672:	d810      	bhi.n	8011696 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8011674:	2b04      	cmp	r3, #4
 8011676:	d01d      	beq.n	80116b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8011678:	d804      	bhi.n	8011684 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801167a:	2b01      	cmp	r3, #1
 801167c:	d006      	beq.n	801168c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801167e:	2b02      	cmp	r3, #2
 8011680:	d02c      	beq.n	80116dc <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	2b08      	cmp	r3, #8
 8011686:	d01d      	beq.n	80116c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8011688:	2b20      	cmp	r3, #32
 801168a:	d1fa      	bne.n	8011682 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801168c:	6823      	ldr	r3, [r4, #0]
 801168e:	4620      	mov	r0, r4
 8011690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011692:	4798      	blx	r3
 8011694:	e013      	b.n	80116be <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8011696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801169a:	d0f7      	beq.n	801168c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801169c:	d804      	bhi.n	80116a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801169e:	2b80      	cmp	r3, #128	@ 0x80
 80116a0:	d0f4      	beq.n	801168c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80116a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80116a6:	e7f0      	b.n	801168a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80116a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80116ac:	d0ee      	beq.n	801168c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80116ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80116b2:	e7e5      	b.n	8011680 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80116b4:	6823      	ldr	r3, [r4, #0]
 80116b6:	7f01      	ldrb	r1, [r0, #28]
 80116b8:	4620      	mov	r0, r4
 80116ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116bc:	4798      	blx	r3
 80116be:	6823      	ldr	r3, [r4, #0]
 80116c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116c2:	e006      	b.n	80116d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	7f01      	ldrb	r1, [r0, #28]
 80116c8:	4620      	mov	r0, r4
 80116ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116cc:	4798      	blx	r3
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116d2:	4629      	mov	r1, r5
 80116d4:	4620      	mov	r0, r4
 80116d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116da:	4718      	bx	r3
 80116dc:	6823      	ldr	r3, [r4, #0]
 80116de:	4620      	mov	r0, r4
 80116e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116e2:	4798      	blx	r3
 80116e4:	e7f3      	b.n	80116ce <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080116e6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80116e6:	4770      	bx	lr

080116e8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80116e8:	4770      	bx	lr

080116ea <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80116ea:	4770      	bx	lr

080116ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80116ec:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80116f0:	b510      	push	{r4, lr}
 80116f2:	1ad2      	subs	r2, r2, r3
 80116f4:	2a00      	cmp	r2, #0
 80116f6:	bfdc      	itt	le
 80116f8:	6884      	ldrle	r4, [r0, #8]
 80116fa:	1912      	addle	r2, r2, r4
 80116fc:	2a01      	cmp	r2, #1
 80116fe:	dd16      	ble.n	801172e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011700:	6842      	ldr	r2, [r0, #4]
 8011702:	2424      	movs	r4, #36	@ 0x24
 8011704:	fb04 2303 	mla	r3, r4, r3, r2
 8011708:	f101 0220 	add.w	r2, r1, #32
 801170c:	f851 4b04 	ldr.w	r4, [r1], #4
 8011710:	4291      	cmp	r1, r2
 8011712:	f843 4b04 	str.w	r4, [r3], #4
 8011716:	d1f9      	bne.n	801170c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8011718:	780a      	ldrb	r2, [r1, #0]
 801171a:	701a      	strb	r2, [r3, #0]
 801171c:	68c3      	ldr	r3, [r0, #12]
 801171e:	6882      	ldr	r2, [r0, #8]
 8011720:	f3bf 8f5b 	dmb	ish
 8011724:	3301      	adds	r3, #1
 8011726:	429a      	cmp	r2, r3
 8011728:	bfd8      	it	le
 801172a:	1a9b      	suble	r3, r3, r2
 801172c:	60c3      	str	r3, [r0, #12]
 801172e:	bd10      	pop	{r4, pc}

08011730 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8011730:	6903      	ldr	r3, [r0, #16]
 8011732:	6882      	ldr	r2, [r0, #8]
 8011734:	f3bf 8f5b 	dmb	ish
 8011738:	3301      	adds	r3, #1
 801173a:	429a      	cmp	r2, r3
 801173c:	bfd8      	it	le
 801173e:	1a9b      	suble	r3, r3, r2
 8011740:	6103      	str	r3, [r0, #16]
 8011742:	4770      	bx	lr

08011744 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8011744:	b570      	push	{r4, r5, r6, lr}
 8011746:	4604      	mov	r4, r0
 8011748:	460e      	mov	r6, r1
 801174a:	6860      	ldr	r0, [r4, #4]
 801174c:	6803      	ldr	r3, [r0, #0]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	4798      	blx	r3
 8011752:	2800      	cmp	r0, #0
 8011754:	d1f9      	bne.n	801174a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8011756:	4d0d      	ldr	r5, [pc, #52]	@ (801178c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8011758:	6828      	ldr	r0, [r5, #0]
 801175a:	6803      	ldr	r3, [r0, #0]
 801175c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801175e:	4798      	blx	r3
 8011760:	f7f1 fad4 	bl	8002d0c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8011764:	6828      	ldr	r0, [r5, #0]
 8011766:	2101      	movs	r1, #1
 8011768:	f7ff ff12 	bl	8011590 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801176c:	6860      	ldr	r0, [r4, #4]
 801176e:	4631      	mov	r1, r6
 8011770:	6803      	ldr	r3, [r0, #0]
 8011772:	689b      	ldr	r3, [r3, #8]
 8011774:	4798      	blx	r3
 8011776:	6823      	ldr	r3, [r4, #0]
 8011778:	4620      	mov	r0, r4
 801177a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801177c:	4798      	blx	r3
 801177e:	6828      	ldr	r0, [r5, #0]
 8011780:	6803      	ldr	r3, [r0, #0]
 8011782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011788:	4718      	bx	r3
 801178a:	bf00      	nop
 801178c:	2402641c 	.word	0x2402641c

08011790 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011790:	b508      	push	{r3, lr}
 8011792:	f7f1 faad 	bl	8002cf0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801179a:	f7f1 bab1 	b.w	8002d00 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801179e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801179e:	b510      	push	{r4, lr}
 80117a0:	4604      	mov	r4, r0
 80117a2:	2114      	movs	r1, #20
 80117a4:	f012 ff39 	bl	802461a <_ZdlPvj>
 80117a8:	4620      	mov	r0, r4
 80117aa:	bd10      	pop	{r4, pc}

080117ac <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80117ac:	b570      	push	{r4, r5, r6, lr}
 80117ae:	4604      	mov	r4, r0
 80117b0:	6840      	ldr	r0, [r0, #4]
 80117b2:	6803      	ldr	r3, [r0, #0]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	4798      	blx	r3
 80117b8:	4605      	mov	r5, r0
 80117ba:	b930      	cbnz	r0, 80117ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80117bc:	7a23      	ldrb	r3, [r4, #8]
 80117be:	b123      	cbz	r3, 80117ca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80117c0:	6860      	ldr	r0, [r4, #4]
 80117c2:	6803      	ldr	r3, [r0, #0]
 80117c4:	695b      	ldr	r3, [r3, #20]
 80117c6:	4798      	blx	r3
 80117c8:	7225      	strb	r5, [r4, #8]
 80117ca:	6860      	ldr	r0, [r4, #4]
 80117cc:	6803      	ldr	r3, [r0, #0]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4798      	blx	r3
 80117d2:	b928      	cbnz	r0, 80117e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	4620      	mov	r0, r4
 80117d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117de:	4718      	bx	r3
 80117e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117e4:	f7f1 ba9a 	b.w	8002d1c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080117e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80117e8:	b510      	push	{r4, lr}
 80117ea:	6082      	str	r2, [r0, #8]
 80117ec:	2200      	movs	r2, #0
 80117ee:	4c03      	ldr	r4, [pc, #12]	@ (80117fc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80117f0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80117f4:	e9c0 4100 	strd	r4, r1, [r0]
 80117f8:	bd10      	pop	{r4, pc}
 80117fa:	bf00      	nop
 80117fc:	08028e84 	.word	0x08028e84

08011800 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8011800:	6840      	ldr	r0, [r0, #4]
 8011802:	6803      	ldr	r3, [r0, #0]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	4718      	bx	r3

08011808 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8011808:	2300      	movs	r3, #0
 801180a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801180c:	8503      	strh	r3, [r0, #40]	@ 0x28
 801180e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8011810:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011812:	6980      	ldr	r0, [r0, #24]
 8011814:	b110      	cbz	r0, 801181c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8011816:	6803      	ldr	r3, [r0, #0]
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	4718      	bx	r3
 801181c:	4770      	bx	lr

0801181e <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801181e:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8011822:	4770      	bx	lr

08011824 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8011824:	b538      	push	{r3, r4, r5, lr}
 8011826:	0e0b      	lsrs	r3, r1, #24
 8011828:	4604      	mov	r4, r0
 801182a:	460d      	mov	r5, r1
 801182c:	7783      	strb	r3, [r0, #30]
 801182e:	6803      	ldr	r3, [r0, #0]
 8011830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011832:	4798      	blx	r3
 8011834:	6803      	ldr	r3, [r0, #0]
 8011836:	4629      	mov	r1, r5
 8011838:	689b      	ldr	r3, [r3, #8]
 801183a:	4798      	blx	r3
 801183c:	6823      	ldr	r3, [r4, #0]
 801183e:	4620      	mov	r0, r4
 8011840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011842:	4798      	blx	r3
 8011844:	61a0      	str	r0, [r4, #24]
 8011846:	bd38      	pop	{r3, r4, r5, pc}

08011848 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8011848:	7741      	strb	r1, [r0, #29]
 801184a:	4770      	bx	lr

0801184c <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 801184c:	b530      	push	{r4, r5, lr}
 801184e:	460d      	mov	r5, r1
 8011850:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8011854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801185a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801185c:	682b      	ldr	r3, [r5, #0]
 801185e:	6023      	str	r3, [r4, #0]
 8011860:	bd30      	pop	{r4, r5, pc}

08011862 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8011862:	b538      	push	{r3, r4, r5, lr}
 8011864:	4604      	mov	r4, r0
 8011866:	1d03      	adds	r3, r0, #4
 8011868:	6808      	ldr	r0, [r1, #0]
 801186a:	2500      	movs	r5, #0
 801186c:	6849      	ldr	r1, [r1, #4]
 801186e:	c303      	stmia	r3!, {r0, r1}
 8011870:	6813      	ldr	r3, [r2, #0]
 8011872:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8011876:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 801187a:	6853      	ldr	r3, [r2, #4]
 801187c:	61a5      	str	r5, [r4, #24]
 801187e:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8011882:	f006 faa9 	bl	8017dd8 <_ZN8touchgfx9Matrix3x35resetEv>
 8011886:	23ff      	movs	r3, #255	@ 0xff
 8011888:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 801188c:	7763      	strb	r3, [r4, #29]
 801188e:	77a3      	strb	r3, [r4, #30]
 8011890:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011894:	6323      	str	r3, [r4, #48]	@ 0x30
 8011896:	2301      	movs	r3, #1
 8011898:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801189c:	bd38      	pop	{r3, r4, r5, pc}
	...

080118a0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 80118a0:	ee70 7a41 	vsub.f32	s15, s0, s2
 80118a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80118ac:	4605      	mov	r5, r0
 80118ae:	ed2d 8b0a 	vpush	{d8-d12}
 80118b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b6:	b086      	sub	sp, #24
 80118b8:	eeb0 ba40 	vmov.f32	s22, s0
 80118bc:	6802      	ldr	r2, [r0, #0]
 80118be:	eef0 ba60 	vmov.f32	s23, s1
 80118c2:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 80118c6:	eef0 aa41 	vmov.f32	s21, s2
 80118ca:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80118cc:	eeb0 aa61 	vmov.f32	s20, s3
 80118d0:	eeb0 ca42 	vmov.f32	s24, s4
 80118d4:	eef0 ca62 	vmov.f32	s25, s5
 80118d8:	d112      	bne.n	8011900 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80118da:	ee70 7ae1 	vsub.f32	s15, s1, s3
 80118de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80118e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e6:	d10b      	bne.n	8011900 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 80118e8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80118ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80118ee:	3901      	subs	r1, #1
 80118f0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80118f4:	b006      	add	sp, #24
 80118f6:	ecbd 8b0a 	vpop	{d8-d12}
 80118fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118fe:	4710      	bx	r2
 8011900:	23ff      	movs	r3, #255	@ 0xff
 8011902:	4628      	mov	r0, r5
 8011904:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8011908:	77ab      	strb	r3, [r5, #30]
 801190a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801190c:	4798      	blx	r3
 801190e:	eeb0 0a4b 	vmov.f32	s0, s22
 8011912:	eef0 0a6b 	vmov.f32	s1, s23
 8011916:	4604      	mov	r4, r0
 8011918:	4640      	mov	r0, r8
 801191a:	f006 fb0c 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801191e:	eef0 8a40 	vmov.f32	s17, s0
 8011922:	ed8d 0a00 	vstr	s0, [sp]
 8011926:	eeb0 0a6a 	vmov.f32	s0, s21
 801192a:	eef0 9a60 	vmov.f32	s19, s1
 801192e:	edcd 0a01 	vstr	s1, [sp, #4]
 8011932:	4640      	mov	r0, r8
 8011934:	eef0 0a4a 	vmov.f32	s1, s20
 8011938:	f006 fafd 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801193c:	eef4 8a40 	vcmp.f32	s17, s0
 8011940:	eeb0 8a40 	vmov.f32	s16, s0
 8011944:	ed8d 0a02 	vstr	s0, [sp, #8]
 8011948:	eeb0 9a60 	vmov.f32	s18, s1
 801194c:	edcd 0a03 	vstr	s1, [sp, #12]
 8011950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011954:	eef4 9a60 	vcmp.f32	s19, s1
 8011958:	bf0c      	ite	eq
 801195a:	2301      	moveq	r3, #1
 801195c:	2300      	movne	r3, #0
 801195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011962:	eef4 8a40 	vcmp.f32	s17, s0
 8011966:	7463      	strb	r3, [r4, #17]
 8011968:	bf0c      	ite	eq
 801196a:	2301      	moveq	r3, #1
 801196c:	2300      	movne	r3, #0
 801196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011972:	74a3      	strb	r3, [r4, #18]
 8011974:	d024      	beq.n	80119c0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011976:	eef4 9a60 	vcmp.f32	s19, s1
 801197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197e:	d01f      	beq.n	80119c0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011980:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8011984:	4640      	mov	r0, r8
 8011986:	ee7a aacb 	vsub.f32	s21, s21, s22
 801198a:	eeb0 0a4b 	vmov.f32	s0, s22
 801198e:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 8011992:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8011996:	eef0 0a6b 	vmov.f32	s1, s23
 801199a:	eea7 0acc 	vfms.f32	s0, s15, s24
 801199e:	eeec 0a87 	vfma.f32	s1, s25, s14
 80119a2:	f006 fac8 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80119a6:	ed8d 0a04 	vstr	s0, [sp, #16]
 80119aa:	ee30 0a68 	vsub.f32	s0, s0, s17
 80119ae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80119b2:	edcd 0a05 	vstr	s1, [sp, #20]
 80119b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ba:	d121      	bne.n	8011a00 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 80119bc:	2301      	movs	r3, #1
 80119be:	74a3      	strb	r3, [r4, #18]
 80119c0:	7c63      	ldrb	r3, [r4, #17]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d051      	beq.n	8011a6a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 80119c6:	ee39 7a69 	vsub.f32	s14, s18, s19
 80119ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011ac0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80119ce:	eef4 9ac9 	vcmpe.f32	s19, s18
 80119d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80119d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119da:	edc4 7a08 	vstr	s15, [r4, #32]
 80119de:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80119e2:	ee17 3a90 	vmov	r3, s15
 80119e6:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 80119ea:	b21a      	sxth	r2, r3
 80119ec:	ee17 3a90 	vmov	r3, s15
 80119f0:	bf48      	it	mi
 80119f2:	8122      	strhmi	r2, [r4, #8]
 80119f4:	b21b      	sxth	r3, r3
 80119f6:	bf56      	itet	pl
 80119f8:	80e2      	strhpl	r2, [r4, #6]
 80119fa:	80e3      	strhmi	r3, [r4, #6]
 80119fc:	8123      	strhpl	r3, [r4, #8]
 80119fe:	e02c      	b.n	8011a5a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011a00:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8011a04:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8011a08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a0c:	edc4 7a05 	vstr	s15, [r4, #20]
 8011a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a14:	d102      	bne.n	8011a1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8011a16:	2301      	movs	r3, #1
 8011a18:	7463      	strb	r3, [r4, #17]
 8011a1a:	e7d1      	b.n	80119c0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8011a1c:	eeb0 7a69 	vmov.f32	s14, s19
 8011a20:	ee39 9a69 	vsub.f32	s18, s18, s19
 8011a24:	ee38 8a68 	vsub.f32	s16, s16, s17
 8011a28:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8011a2c:	ed84 7a06 	vstr	s14, [r4, #24]
 8011a30:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8011a34:	ee38 8a47 	vsub.f32	s16, s16, s14
 8011a38:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8011ac4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8011a3c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8011a40:	ed84 8a07 	vstr	s16, [r4, #28]
 8011a44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4c:	edc4 7a08 	vstr	s15, [r4, #32]
 8011a50:	d503      	bpl.n	8011a5a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011a52:	eeb1 8a48 	vneg.f32	s16, s16
 8011a56:	ed84 8a07 	vstr	s16, [r4, #28]
 8011a5a:	60e7      	str	r7, [r4, #12]
 8011a5c:	7426      	strb	r6, [r4, #16]
 8011a5e:	61ac      	str	r4, [r5, #24]
 8011a60:	b006      	add	sp, #24
 8011a62:	ecbd 8b0a 	vpop	{d8-d12}
 8011a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a6a:	7ca3      	ldrb	r3, [r4, #18]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d0f4      	beq.n	8011a5a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011a70:	ee38 7a68 	vsub.f32	s14, s16, s17
 8011a74:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8011ac0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8011a78:	eef4 8ac8 	vcmpe.f32	s17, s16
 8011a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a84:	edc4 7a08 	vstr	s15, [r4, #32]
 8011a88:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011a8c:	ee17 3a90 	vmov	r3, s15
 8011a90:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8011a94:	b21a      	sxth	r2, r3
 8011a96:	ee17 3a90 	vmov	r3, s15
 8011a9a:	bf48      	it	mi
 8011a9c:	8122      	strhmi	r2, [r4, #8]
 8011a9e:	b21b      	sxth	r3, r3
 8011aa0:	bf56      	itet	pl
 8011aa2:	80e2      	strhpl	r2, [r4, #6]
 8011aa4:	80e3      	strhmi	r3, [r4, #6]
 8011aa6:	8123      	strhpl	r3, [r4, #8]
 8011aa8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011aac:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8011ab0:	1a9b      	subs	r3, r3, r2
 8011ab2:	ee07 3a90 	vmov	s15, r3
 8011ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011aba:	edc4 7a07 	vstr	s15, [r4, #28]
 8011abe:	e7cc      	b.n	8011a5a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011ac0:	447ffffe 	.word	0x447ffffe
 8011ac4:	44800000 	.word	0x44800000

08011ac8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8011ac8:	b510      	push	{r4, lr}
 8011aca:	ed2d 8b02 	vpush	{d8}
 8011ace:	eef0 8a62 	vmov.f32	s17, s5
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	eeb0 8a42 	vmov.f32	s16, s4
 8011ada:	f012 fb2f 	bl	802413c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8011ade:	eef0 7a68 	vmov.f32	s15, s17
 8011ae2:	6823      	ldr	r3, [r4, #0]
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	689b      	ldr	r3, [r3, #8]
 8011ae8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011aec:	ee17 2a90 	vmov	r2, s15
 8011af0:	eef0 7a48 	vmov.f32	s15, s16
 8011af4:	ecbd 8b02 	vpop	{d8}
 8011af8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b00:	ee17 1a90 	vmov	r1, s15
 8011b04:	4718      	bx	r3

08011b06 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8011b06:	b510      	push	{r4, lr}
 8011b08:	ed2d 8b02 	vpush	{d8}
 8011b0c:	eef0 8a63 	vmov.f32	s17, s7
 8011b10:	2100      	movs	r1, #0
 8011b12:	4604      	mov	r4, r0
 8011b14:	eeb0 8a43 	vmov.f32	s16, s6
 8011b18:	f012 fbd2 	bl	80242c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8011b1c:	eef0 7a68 	vmov.f32	s15, s17
 8011b20:	6823      	ldr	r3, [r4, #0]
 8011b22:	4620      	mov	r0, r4
 8011b24:	689b      	ldr	r3, [r3, #8]
 8011b26:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011b2a:	ee17 2a90 	vmov	r2, s15
 8011b2e:	eef0 7a48 	vmov.f32	s15, s16
 8011b32:	ecbd 8b02 	vpop	{d8}
 8011b36:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b3e:	ee17 1a90 	vmov	r1, s15
 8011b42:	4718      	bx	r3

08011b44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8011b44:	b513      	push	{r0, r1, r4, lr}
 8011b46:	4604      	mov	r4, r0
 8011b48:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8011b4a:	f006 f9f4 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011b4e:	eef0 7a60 	vmov.f32	s15, s1
 8011b52:	4620      	mov	r0, r4
 8011b54:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011b58:	ee17 2a90 	vmov	r2, s15
 8011b5c:	eef0 7a40 	vmov.f32	s15, s0
 8011b60:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011b64:	ee17 1a90 	vmov	r1, s15
 8011b68:	b002      	add	sp, #8
 8011b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b6e:	f012 ba3f 	b.w	8023ff0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

08011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 8011b72:	b513      	push	{r0, r1, r4, lr}
 8011b74:	4604      	mov	r4, r0
 8011b76:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8011b78:	f006 f9dd 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011b7c:	eef0 7a60 	vmov.f32	s15, s1
 8011b80:	4620      	mov	r0, r4
 8011b82:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011b86:	ee17 2a90 	vmov	r2, s15
 8011b8a:	eef0 7a40 	vmov.f32	s15, s0
 8011b8e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011b92:	ee17 1a90 	vmov	r1, s15
 8011b96:	b002      	add	sp, #8
 8011b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b9c:	f012 ba75 	b.w	802408a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08011ba0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8011ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ba2:	2400      	movs	r4, #0
 8011ba4:	9f07      	ldr	r7, [sp, #28]
 8011ba6:	f04f 0e01 	mov.w	lr, #1
 8011baa:	4626      	mov	r6, r4
 8011bac:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8011bb0:	4463      	add	r3, ip
 8011bb2:	4563      	cmp	r3, ip
 8011bb4:	d02d      	beq.n	8011c12 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8011bb6:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8011bba:	2d06      	cmp	r5, #6
 8011bbc:	d8f9      	bhi.n	8011bb2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011bbe:	fa0e f505 	lsl.w	r5, lr, r5
 8011bc2:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8011bc6:	d10d      	bne.n	8011be4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8011bc8:	f015 0f10 	tst.w	r5, #16
 8011bcc:	d117      	bne.n	8011bfe <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8011bce:	072d      	lsls	r5, r5, #28
 8011bd0:	d5ef      	bpl.n	8011bb2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011bd2:	3801      	subs	r0, #1
 8011bd4:	b91e      	cbnz	r6, 8011bde <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8011bd6:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8011bda:	682d      	ldr	r5, [r5, #0]
 8011bdc:	600d      	str	r5, [r1, #0]
 8011bde:	b96c      	cbnz	r4, 8011bfc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011be0:	2601      	movs	r6, #1
 8011be2:	e7e6      	b.n	8011bb2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011be4:	b926      	cbnz	r6, 8011bf0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8011be6:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8011bea:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8011bee:	600b      	str	r3, [r1, #0]
 8011bf0:	b924      	cbnz	r4, 8011bfc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011bf2:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8011bf6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011bfa:	6013      	str	r3, [r2, #0]
 8011bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bfe:	3801      	subs	r0, #1
 8011c00:	b91c      	cbnz	r4, 8011c0a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8011c02:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8011c06:	6824      	ldr	r4, [r4, #0]
 8011c08:	6014      	str	r4, [r2, #0]
 8011c0a:	2e00      	cmp	r6, #0
 8011c0c:	d1f6      	bne.n	8011bfc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011c0e:	2401      	movs	r4, #1
 8011c10:	e7cf      	b.n	8011bb2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011c12:	b90e      	cbnz	r6, 8011c18 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8011c14:	2300      	movs	r3, #0
 8011c16:	600b      	str	r3, [r1, #0]
 8011c18:	2c00      	cmp	r4, #0
 8011c1a:	d1ef      	bne.n	8011bfc <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	e7ec      	b.n	8011bfa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08011c20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8011c20:	b538      	push	{r3, r4, r5, lr}
 8011c22:	ed2d 8b0a 	vpush	{d8-d12}
 8011c26:	eef0 ba40 	vmov.f32	s23, s0
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	eeb0 ca60 	vmov.f32	s24, s1
 8011c30:	460d      	mov	r5, r1
 8011c32:	eef0 aa41 	vmov.f32	s21, s2
 8011c36:	eeb0 ba61 	vmov.f32	s22, s3
 8011c3a:	eeb0 9a42 	vmov.f32	s18, s4
 8011c3e:	eef0 9a62 	vmov.f32	s19, s5
 8011c42:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8011c46:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8011c4a:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8011c4e:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8011c52:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8011c56:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8011c5a:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8011c5e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011c62:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8011c66:	f012 fd03 	bl	8024670 <sqrtf>
 8011c6a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c72:	d12e      	bne.n	8011cd2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8011c74:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8011c78:	ee39 7acb 	vsub.f32	s14, s19, s22
 8011c7c:	eeb0 8a6a 	vmov.f32	s16, s21
 8011c80:	eef0 8a4b 	vmov.f32	s17, s22
 8011c84:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8011c88:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8011c8c:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8011c90:	eee7 8aca 	vfms.f32	s17, s15, s20
 8011c94:	2d02      	cmp	r5, #2
 8011c96:	dc2f      	bgt.n	8011cf8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8011c98:	3501      	adds	r5, #1
 8011c9a:	eef0 1a4b 	vmov.f32	s3, s22
 8011c9e:	eeb0 1a6a 	vmov.f32	s2, s21
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	eef0 2a68 	vmov.f32	s5, s17
 8011caa:	eeb0 2a48 	vmov.f32	s4, s16
 8011cae:	eef0 0a4c 	vmov.f32	s1, s24
 8011cb2:	eeb0 0a6b 	vmov.f32	s0, s23
 8011cb6:	f7ff ffb3 	bl	8011c20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8011cba:	eef0 0a68 	vmov.f32	s1, s17
 8011cbe:	eeb0 0a48 	vmov.f32	s0, s16
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f7ff ff55 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011cc8:	eeb0 ba68 	vmov.f32	s22, s17
 8011ccc:	eef0 aa48 	vmov.f32	s21, s16
 8011cd0:	e7b9      	b.n	8011c46 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8011cd2:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8011cd6:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8011cda:	ee78 8acc 	vsub.f32	s17, s17, s24
 8011cde:	ee28 7a27 	vmul.f32	s14, s16, s15
 8011ce2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8011ce6:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8011cea:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8011cee:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8011cf2:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8011cf6:	e7cd      	b.n	8011c94 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8011cf8:	eef0 0a68 	vmov.f32	s1, s17
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	eeb0 0a48 	vmov.f32	s0, s16
 8011d02:	f7ff ff36 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011d06:	ecbd 8b0a 	vpop	{d8-d12}
 8011d0a:	bd38      	pop	{r3, r4, r5, pc}

08011d0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8011d0c:	b510      	push	{r4, lr}
 8011d0e:	ed2d 8b0a 	vpush	{d8-d12}
 8011d12:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8011d16:	4604      	mov	r4, r0
 8011d18:	eeb0 ca40 	vmov.f32	s24, s0
 8011d1c:	2b02      	cmp	r3, #2
 8011d1e:	eeb0 9a60 	vmov.f32	s18, s1
 8011d22:	eef0 9a41 	vmov.f32	s19, s2
 8011d26:	eef0 8a61 	vmov.f32	s17, s3
 8011d2a:	eeb0 ba42 	vmov.f32	s22, s4
 8011d2e:	eef0 ba62 	vmov.f32	s23, s5
 8011d32:	eeb0 aa43 	vmov.f32	s20, s6
 8011d36:	eef0 aa63 	vmov.f32	s21, s7
 8011d3a:	eeb0 8a44 	vmov.f32	s16, s8
 8011d3e:	eef0 ca64 	vmov.f32	s25, s9
 8011d42:	d12c      	bne.n	8011d9e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8011d44:	eef0 0a62 	vmov.f32	s1, s5
 8011d48:	eeb0 0a42 	vmov.f32	s0, s4
 8011d4c:	f7ff ff11 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011d50:	ee79 9acb 	vsub.f32	s19, s19, s22
 8011d54:	ee7a caec 	vsub.f32	s25, s21, s25
 8011d58:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8011d5c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8011d60:	ee69 9aac 	vmul.f32	s19, s19, s25
 8011d64:	ee28 8a88 	vmul.f32	s16, s17, s16
 8011d68:	eef4 9ac8 	vcmpe.f32	s19, s16
 8011d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d70:	db0f      	blt.n	8011d92 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8011d72:	2101      	movs	r1, #1
 8011d74:	eef0 2a6a 	vmov.f32	s5, s21
 8011d78:	eeb0 2a4a 	vmov.f32	s4, s20
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	eef0 1a6b 	vmov.f32	s3, s23
 8011d82:	eeb0 1a4b 	vmov.f32	s2, s22
 8011d86:	eef0 0a49 	vmov.f32	s1, s18
 8011d8a:	eeb0 0a4c 	vmov.f32	s0, s24
 8011d8e:	f7ff ff47 	bl	8011c20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8011d92:	eef0 0a6a 	vmov.f32	s1, s21
 8011d96:	4620      	mov	r0, r4
 8011d98:	eeb0 0a4a 	vmov.f32	s0, s20
 8011d9c:	e035      	b.n	8011e0a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d138      	bne.n	8011e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011da2:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8011da6:	ee33 6a48 	vsub.f32	s12, s6, s16
 8011daa:	ee71 7a42 	vsub.f32	s15, s2, s4
 8011dae:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8011db2:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8011db6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011dba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc2:	d027      	beq.n	8011e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011dc4:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8011dc8:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8011dcc:	eea4 8a83 	vfma.f32	s16, s9, s6
 8011dd0:	eee1 8a22 	vfma.f32	s17, s2, s5
 8011dd4:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8011dd8:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8011ddc:	eee6 7a28 	vfma.f32	s15, s12, s17
 8011de0:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8011de4:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8011de8:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8011dec:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8011df0:	ee3c ca40 	vsub.f32	s24, s24, s0
 8011df4:	ee39 9a60 	vsub.f32	s18, s18, s1
 8011df8:	ee29 9a09 	vmul.f32	s18, s18, s18
 8011dfc:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8011e00:	eef4 7ac9 	vcmpe.f32	s15, s18
 8011e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e08:	db04      	blt.n	8011e14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8011e0a:	f7ff feb2 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e0e:	ecbd 8b0a 	vpop	{d8-d12}
 8011e12:	bd10      	pop	{r4, pc}
 8011e14:	eef0 0a6b 	vmov.f32	s1, s23
 8011e18:	4620      	mov	r0, r4
 8011e1a:	eeb0 0a4b 	vmov.f32	s0, s22
 8011e1e:	f7ff fea8 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e22:	e7b6      	b.n	8011d92 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08011e24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8011e24:	b510      	push	{r4, lr}
 8011e26:	ed2d 8b0c 	vpush	{d8-d13}
 8011e2a:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8011e2e:	4604      	mov	r4, r0
 8011e30:	eeb0 9a40 	vmov.f32	s18, s0
 8011e34:	eef0 9a60 	vmov.f32	s19, s1
 8011e38:	eef0 aa41 	vmov.f32	s21, s2
 8011e3c:	eeb0 ba61 	vmov.f32	s22, s3
 8011e40:	b933      	cbnz	r3, 8011e50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8011e42:	f7ff fe96 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e46:	eef0 0a4b 	vmov.f32	s1, s22
 8011e4a:	eeb0 0a6a 	vmov.f32	s0, s21
 8011e4e:	e015      	b.n	8011e7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8011e50:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011e54:	2b02      	cmp	r3, #2
 8011e56:	ee71 8a40 	vsub.f32	s17, s2, s0
 8011e5a:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8011e5e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011e62:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011e66:	d10f      	bne.n	8011e88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8011e68:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8011e6c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011e70:	f7ff fe7f 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e74:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8011e78:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f7ff fe78 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e82:	ecbd 8b0c 	vpop	{d8-d13}
 8011e86:	bd10      	pop	{r4, pc}
 8011e88:	f7ff fe73 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011e8c:	eef0 0a69 	vmov.f32	s1, s19
 8011e90:	eeb0 0a49 	vmov.f32	s0, s18
 8011e94:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8011fc4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8011e98:	eeb1 aa68 	vneg.f32	s20, s17
 8011e9c:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8011fc8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8011ea0:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011eaa:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8011fcc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8011eae:	eddf ca48 	vldr	s25, [pc, #288]	@ 8011fd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8011eb2:	ed9f da48 	vldr	s26, [pc, #288]	@ 8011fd4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8011eb6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8011eba:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8011ebe:	f7ff fe58 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011ec2:	eef0 0a69 	vmov.f32	s1, s19
 8011ec6:	eeb0 0a49 	vmov.f32	s0, s18
 8011eca:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011fd8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8011ece:	4620      	mov	r0, r4
 8011ed0:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011ed4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011ed8:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8011edc:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8011ee0:	f7ff fe47 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011ee4:	eef0 0a69 	vmov.f32	s1, s19
 8011ee8:	eeb0 0a49 	vmov.f32	s0, s18
 8011eec:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011fdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011ef6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011efa:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8011efe:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8011f02:	f7ff fe36 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f06:	eef0 0a69 	vmov.f32	s1, s19
 8011f0a:	eeb0 0a49 	vmov.f32	s0, s18
 8011f0e:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8011fe0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8011f12:	4620      	mov	r0, r4
 8011f14:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011f18:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011f1c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8011f20:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8011f24:	f7ff fe25 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f28:	ee79 0a88 	vadd.f32	s1, s19, s16
 8011f2c:	ee39 0a28 	vadd.f32	s0, s18, s17
 8011f30:	4620      	mov	r0, r4
 8011f32:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8011f36:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011f3a:	f7ff fe1a 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f3e:	eef0 0a69 	vmov.f32	s1, s19
 8011f42:	eeb0 0a49 	vmov.f32	s0, s18
 8011f46:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8011fe4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011f50:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011f54:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8011f58:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8011f5c:	f7ff fe09 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f60:	eef0 0a69 	vmov.f32	s1, s19
 8011f64:	eeb0 0a49 	vmov.f32	s0, s18
 8011f68:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8011fe8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011f72:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011f76:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8011f7a:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8011f7e:	f7ff fdf8 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011f82:	eef0 0a69 	vmov.f32	s1, s19
 8011f86:	eeb0 0a49 	vmov.f32	s0, s18
 8011f8a:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8011fec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8011f8e:	4620      	mov	r0, r4
 8011f90:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011f94:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011f98:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8011f9c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8011fa0:	f7ff fde7 	bl	8011b72 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011fa4:	eef0 0a69 	vmov.f32	s1, s19
 8011fa8:	eeb0 0a49 	vmov.f32	s0, s18
 8011fac:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011ff0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011fb6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011fba:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8011fbe:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8011fc2:	e73e      	b.n	8011e42 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8011fc4:	3d23d70a 	.word	0x3d23d70a
 8011fc8:	3e8f5c29 	.word	0x3e8f5c29
 8011fcc:	3f19999a 	.word	0x3f19999a
 8011fd0:	3f4ccccd 	.word	0x3f4ccccd
 8011fd4:	3f75c28f 	.word	0x3f75c28f
 8011fd8:	3e4ccccd 	.word	0x3e4ccccd
 8011fdc:	3ecccccd 	.word	0x3ecccccd
 8011fe0:	3f3851ec 	.word	0x3f3851ec
 8011fe4:	3fa3d70a 	.word	0x3fa3d70a
 8011fe8:	3fcccccd 	.word	0x3fcccccd
 8011fec:	3fe66666 	.word	0x3fe66666
 8011ff0:	3ffae148 	.word	0x3ffae148

08011ff4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8011ff4:	b570      	push	{r4, r5, r6, lr}
 8011ff6:	ed2d 8b06 	vpush	{d8-d10}
 8011ffa:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8011ffe:	eef0 aa40 	vmov.f32	s21, s0
 8012002:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8012006:	4604      	mov	r4, r0
 8012008:	ee30 8ac8 	vsub.f32	s16, s1, s16
 801200c:	ee30 9a49 	vsub.f32	s18, s0, s18
 8012010:	eeb0 aa60 	vmov.f32	s20, s1
 8012014:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012018:	eea9 0a09 	vfma.f32	s0, s18, s18
 801201c:	f012 fb28 	bl	8024670 <sqrtf>
 8012020:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012028:	dd36      	ble.n	8012098 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 801202a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801202e:	2600      	movs	r6, #0
 8012030:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8012034:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8012038:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 801203c:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8012040:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012044:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8012048:	ee89 8a26 	vdiv.f32	s16, s18, s13
 801204c:	ee70 9a28 	vadd.f32	s19, s0, s17
 8012050:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8012054:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8012058:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801205c:	b1fd      	cbz	r5, 801209e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801205e:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8012062:	eef0 0a49 	vmov.f32	s1, s18
 8012066:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 801206a:	eeb0 0a69 	vmov.f32	s0, s19
 801206e:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8012072:	4620      	mov	r0, r4
 8012074:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8012078:	f7ff fd64 	bl	8011b44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 801207c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8012080:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8012084:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8012088:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 801208c:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8012090:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8012094:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8012098:	ecbd 8b06 	vpop	{d8-d10}
 801209c:	bd70      	pop	{r4, r5, r6, pc}
 801209e:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80120a2:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80120a6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80120aa:	b16b      	cbz	r3, 80120c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80120ac:	eef0 1a49 	vmov.f32	s3, s18
 80120b0:	4620      	mov	r0, r4
 80120b2:	eeb0 1a69 	vmov.f32	s2, s19
 80120b6:	eef0 0a62 	vmov.f32	s1, s5
 80120ba:	eeb0 0a42 	vmov.f32	s0, s4
 80120be:	f7ff feb1 	bl	8011e24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80120c2:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80120c6:	e7db      	b.n	8012080 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80120c8:	eef0 4a48 	vmov.f32	s9, s16
 80120cc:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80120d0:	eeb0 4a68 	vmov.f32	s8, s17
 80120d4:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80120d8:	eef0 3a49 	vmov.f32	s7, s18
 80120dc:	4620      	mov	r0, r4
 80120de:	eeb0 3a69 	vmov.f32	s6, s19
 80120e2:	f7ff fe13 	bl	8011d0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80120e6:	e7cb      	b.n	8012080 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

080120e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 80120e8:	ee07 2a90 	vmov	s15, r2
 80120ec:	ee07 1a10 	vmov	s14, r1
 80120f0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80120f4:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8012108 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 80120f8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80120fc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8012100:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012104:	f7ff bf76 	b.w	8011ff4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012108:	3d000000 	.word	0x3d000000

0801210c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	ed2d 8b02 	vpush	{d8}
 8012112:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8012116:	4604      	mov	r4, r0
 8012118:	b31d      	cbz	r5, 8012162 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 801211a:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801211e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8012122:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8012126:	ee78 8a67 	vsub.f32	s17, s16, s15
 801212a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801212e:	eef0 0a68 	vmov.f32	s1, s17
 8012132:	f7ff fd07 	bl	8011b44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8012136:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801213a:	eef0 1a48 	vmov.f32	s3, s16
 801213e:	4620      	mov	r0, r4
 8012140:	eeb0 0a41 	vmov.f32	s0, s2
 8012144:	eef0 0a68 	vmov.f32	s1, s17
 8012148:	f7ff fe6c 	bl	8011e24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801214c:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8012150:	eef0 1a68 	vmov.f32	s3, s17
 8012154:	4620      	mov	r0, r4
 8012156:	eef0 0a48 	vmov.f32	s1, s16
 801215a:	eeb0 0a41 	vmov.f32	s0, s2
 801215e:	f7ff fe61 	bl	8011e24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8012162:	4628      	mov	r0, r5
 8012164:	ecbd 8b02 	vpop	{d8}
 8012168:	bd38      	pop	{r3, r4, r5, pc}

0801216a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 801216a:	b510      	push	{r4, lr}
 801216c:	ed2d 8b02 	vpush	{d8}
 8012170:	4604      	mov	r4, r0
 8012172:	eeb0 8a40 	vmov.f32	s16, s0
 8012176:	eef0 8a60 	vmov.f32	s17, s1
 801217a:	f7ff ffc7 	bl	801210c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801217e:	b9d0      	cbnz	r0, 80121b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8012180:	4620      	mov	r0, r4
 8012182:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8012186:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 801218a:	eef0 0a68 	vmov.f32	s1, s17
 801218e:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 8012192:	eeb0 0a48 	vmov.f32	s0, s16
 8012196:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 801219a:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801219e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80121a2:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80121a6:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80121aa:	f7ff fdaf 	bl	8011d0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80121ae:	2001      	movs	r0, #1
 80121b0:	ecbd 8b02 	vpop	{d8}
 80121b4:	bd10      	pop	{r4, pc}
 80121b6:	2000      	movs	r0, #0
 80121b8:	e7fa      	b.n	80121b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

080121ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 80121ba:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 80121be:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80121c2:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80121c6:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80121ca:	f7ff be2b 	b.w	8011e24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080121d0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80121d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d4:	b089      	sub	sp, #36	@ 0x24
 80121d6:	461c      	mov	r4, r3
 80121d8:	4682      	mov	sl, r0
 80121da:	4615      	mov	r5, r2
 80121dc:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80121e0:	f10d 0820 	add.w	r8, sp, #32
 80121e4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80121e6:	9304      	str	r3, [sp, #16]
 80121e8:	2300      	movs	r3, #0
 80121ea:	9105      	str	r1, [sp, #20]
 80121ec:	9306      	str	r3, [sp, #24]
 80121ee:	f848 3d04 	str.w	r3, [r8, #-4]!
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 80121f8:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 80121fc:	9b05      	ldr	r3, [sp, #20]
 80121fe:	429d      	cmp	r5, r3
 8012200:	d96d      	bls.n	80122de <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8012202:	3d01      	subs	r5, #1
 8012204:	f819 3005 	ldrb.w	r3, [r9, r5]
 8012208:	2b06      	cmp	r3, #6
 801220a:	d8f7      	bhi.n	80121fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801220c:	a201      	add	r2, pc, #4	@ (adr r2, 8012214 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012212:	bf00      	nop
 8012214:	08012233 	.word	0x08012233
 8012218:	080121fd 	.word	0x080121fd
 801221c:	08012231 	.word	0x08012231
 8012220:	08012255 	.word	0x08012255
 8012224:	08012255 	.word	0x08012255
 8012228:	08012259 	.word	0x08012259
 801222c:	08012299 	.word	0x08012299
 8012230:	3c02      	subs	r4, #2
 8012232:	4650      	mov	r0, sl
 8012234:	9400      	str	r4, [sp, #0]
 8012236:	462b      	mov	r3, r5
 8012238:	4642      	mov	r2, r8
 801223a:	a906      	add	r1, sp, #24
 801223c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012240:	f7ff fcae 	bl	8011ba0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012244:	eddd 0a07 	vldr	s1, [sp, #28]
 8012248:	ed9d 0a06 	vldr	s0, [sp, #24]
 801224c:	4630      	mov	r0, r6
 801224e:	f7ff fed1 	bl	8011ff4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012252:	e7d3      	b.n	80121fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012254:	3c01      	subs	r4, #1
 8012256:	e7ec      	b.n	8012232 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8012258:	f1a4 0b04 	sub.w	fp, r4, #4
 801225c:	3c02      	subs	r4, #2
 801225e:	4650      	mov	r0, sl
 8012260:	462b      	mov	r3, r5
 8012262:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8012266:	f8cd b000 	str.w	fp, [sp]
 801226a:	4642      	mov	r2, r8
 801226c:	a906      	add	r1, sp, #24
 801226e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8012272:	f7ff fc95 	bl	8011ba0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8012276:	eddd 2a07 	vldr	s5, [sp, #28]
 801227a:	ed9d 2a06 	vldr	s4, [sp, #24]
 801227e:	4630      	mov	r0, r6
 8012280:	ed54 1a01 	vldr	s3, [r4, #-4]
 8012284:	ed14 1a02 	vldr	s2, [r4, #-8]
 8012288:	edd4 0a01 	vldr	s1, [r4, #4]
 801228c:	ed94 0a00 	vldr	s0, [r4]
 8012290:	f7ff fc1a 	bl	8011ac8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012294:	465c      	mov	r4, fp
 8012296:	e7b1      	b.n	80121fc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8012298:	f1a4 0b06 	sub.w	fp, r4, #6
 801229c:	3c02      	subs	r4, #2
 801229e:	4650      	mov	r0, sl
 80122a0:	462b      	mov	r3, r5
 80122a2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80122a6:	f8cd b000 	str.w	fp, [sp]
 80122aa:	4642      	mov	r2, r8
 80122ac:	a906      	add	r1, sp, #24
 80122ae:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80122b2:	f7ff fc75 	bl	8011ba0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80122b6:	eddd 3a07 	vldr	s7, [sp, #28]
 80122ba:	ed9d 3a06 	vldr	s6, [sp, #24]
 80122be:	4630      	mov	r0, r6
 80122c0:	ed54 2a03 	vldr	s5, [r4, #-12]
 80122c4:	ed14 2a04 	vldr	s4, [r4, #-16]
 80122c8:	ed54 1a01 	vldr	s3, [r4, #-4]
 80122cc:	ed14 1a02 	vldr	s2, [r4, #-8]
 80122d0:	edd4 0a01 	vldr	s1, [r4, #4]
 80122d4:	ed94 0a00 	vldr	s0, [r4]
 80122d8:	f7ff fc15 	bl	8011b06 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80122dc:	e7da      	b.n	8012294 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 80122de:	9b04      	ldr	r3, [sp, #16]
 80122e0:	b113      	cbz	r3, 80122e8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 80122e2:	4630      	mov	r0, r6
 80122e4:	f7ff ff69 	bl	80121ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 80122e8:	b009      	add	sp, #36	@ 0x24
 80122ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ee:	bf00      	nop

080122f0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 80122f0:	eef0 7a60 	vmov.f32	s15, s1
 80122f4:	6803      	ldr	r3, [r0, #0]
 80122f6:	689b      	ldr	r3, [r3, #8]
 80122f8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80122fc:	ee17 2a90 	vmov	r2, s15
 8012300:	eef0 7a40 	vmov.f32	s15, s0
 8012304:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8012308:	ee17 1a90 	vmov	r1, s15
 801230c:	4718      	bx	r3
	...

08012310 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8012310:	4b04      	ldr	r3, [pc, #16]	@ (8012324 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8012312:	b510      	push	{r4, lr}
 8012314:	4604      	mov	r4, r0
 8012316:	f840 3b14 	str.w	r3, [r0], #20
 801231a:	f001 fe28 	bl	8013f6e <_ZN8touchgfx7OutlineD1Ev>
 801231e:	4620      	mov	r0, r4
 8012320:	bd10      	pop	{r4, pc}
 8012322:	bf00      	nop
 8012324:	08029778 	.word	0x08029778

08012328 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8012328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801232c:	ed2d 8b04 	vpush	{d8-d9}
 8012330:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8012334:	b0b5      	sub	sp, #212	@ 0xd4
 8012336:	4605      	mov	r5, r0
 8012338:	468b      	mov	fp, r1
 801233a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801233e:	9206      	str	r2, [sp, #24]
 8012340:	461e      	mov	r6, r3
 8012342:	2400      	movs	r4, #0
 8012344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012348:	f240 814f 	bls.w	80125ea <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 801234c:	23ff      	movs	r3, #255	@ 0xff
 801234e:	1d02      	adds	r2, r0, #4
 8012350:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 80125f0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8012354:	f04f 0800 	mov.w	r8, #0
 8012358:	9300      	str	r3, [sp, #0]
 801235a:	af08      	add	r7, sp, #32
 801235c:	6981      	ldr	r1, [r0, #24]
 801235e:	a808      	add	r0, sp, #32
 8012360:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012362:	eef0 9a49 	vmov.f32	s19, s18
 8012366:	f011 fcf7 	bl	8023d58 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801236a:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 801236e:	4ba1      	ldr	r3, [pc, #644]	@ (80125f4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8012370:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012378:	2201      	movs	r2, #1
 801237a:	9308      	str	r3, [sp, #32]
 801237c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8012380:	edd5 6a08 	vldr	s13, [r5, #32]
 8012384:	eeb0 8a49 	vmov.f32	s16, s18
 8012388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238c:	9325      	str	r3, [sp, #148]	@ 0x94
 801238e:	f04f 0300 	mov.w	r3, #0
 8012392:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8012396:	7f6a      	ldrb	r2, [r5, #29]
 8012398:	eef0 8a49 	vmov.f32	s17, s18
 801239c:	bf48      	it	mi
 801239e:	eef1 7a67 	vnegmi.f32	s15, s15
 80123a2:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 80123a6:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 80123aa:	46c1      	mov	r9, r8
 80123ac:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80123b0:	f04f 0a01 	mov.w	sl, #1
 80123b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123b8:	7fab      	ldrb	r3, [r5, #30]
 80123ba:	942a      	str	r4, [sp, #168]	@ 0xa8
 80123bc:	435a      	muls	r2, r3
 80123be:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 80123c2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80123c6:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 80123ca:	1c53      	adds	r3, r2, #1
 80123cc:	942b      	str	r4, [sp, #172]	@ 0xac
 80123ce:	942c      	str	r4, [sp, #176]	@ 0xb0
 80123d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80123d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80123d8:	942d      	str	r4, [sp, #180]	@ 0xb4
 80123da:	942e      	str	r4, [sp, #184]	@ 0xb8
 80123dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80123e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123e4:	942f      	str	r4, [sp, #188]	@ 0xbc
 80123e6:	9430      	str	r4, [sp, #192]	@ 0xc0
 80123e8:	9431      	str	r4, [sp, #196]	@ 0xc4
 80123ea:	9432      	str	r4, [sp, #200]	@ 0xc8
 80123ec:	9433      	str	r4, [sp, #204]	@ 0xcc
 80123ee:	4644      	mov	r4, r8
 80123f0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80123f4:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 80123f8:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 80123fc:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8012400:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8012404:	9b06      	ldr	r3, [sp, #24]
 8012406:	454b      	cmp	r3, r9
 8012408:	f000 80cc 	beq.w	80125a4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 801240c:	f109 0301 	add.w	r3, r9, #1
 8012410:	9305      	str	r3, [sp, #20]
 8012412:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8012416:	2b06      	cmp	r3, #6
 8012418:	d839      	bhi.n	801248e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801241a:	e8df f003 	tbb	[pc, r3]
 801241e:	3b04      	.short	0x3b04
 8012420:	817c6f60 	.word	0x817c6f60
 8012424:	a0          	.byte	0xa0
 8012425:	00          	.byte	0x00
 8012426:	45c1      	cmp	r9, r8
 8012428:	d92b      	bls.n	8012482 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 801242a:	eef0 0a49 	vmov.f32	s1, s18
 801242e:	4638      	mov	r0, r7
 8012430:	eeb0 0a69 	vmov.f32	s0, s19
 8012434:	f7ff fdde 	bl	8011ff4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012438:	4638      	mov	r0, r7
 801243a:	f7ff fe67 	bl	801210c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801243e:	4681      	mov	r9, r0
 8012440:	b9f8      	cbnz	r0, 8012482 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8012442:	eef0 0a49 	vmov.f32	s1, s18
 8012446:	4638      	mov	r0, r7
 8012448:	eeb0 0a69 	vmov.f32	s0, s19
 801244c:	f7ff fe8d 	bl	801216a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012450:	4628      	mov	r0, r5
 8012452:	4623      	mov	r3, r4
 8012454:	9a05      	ldr	r2, [sp, #20]
 8012456:	4641      	mov	r1, r8
 8012458:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 801245c:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8012460:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8012464:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8012468:	e9cd 9702 	strd	r9, r7, [sp, #8]
 801246c:	e9cd b600 	strd	fp, r6, [sp]
 8012470:	f7ff feae 	bl	80121d0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8012474:	eef0 0a49 	vmov.f32	s1, s18
 8012478:	eeb0 0a69 	vmov.f32	s0, s19
 801247c:	4638      	mov	r0, r7
 801247e:	f7ff fe74 	bl	801216a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8012482:	eeb0 8a49 	vmov.f32	s16, s18
 8012486:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801248a:	eef0 8a69 	vmov.f32	s17, s19
 801248e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012492:	e7b7      	b.n	8012404 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8012494:	45c1      	cmp	r9, r8
 8012496:	d90d      	bls.n	80124b4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8012498:	4638      	mov	r0, r7
 801249a:	f7ff fe37 	bl	801210c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801249e:	b948      	cbnz	r0, 80124b4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 80124a0:	4623      	mov	r3, r4
 80124a2:	464a      	mov	r2, r9
 80124a4:	4641      	mov	r1, r8
 80124a6:	4628      	mov	r0, r5
 80124a8:	e9cd a702 	strd	sl, r7, [sp, #8]
 80124ac:	e9cd b600 	strd	fp, r6, [sp]
 80124b0:	f7ff fe8e 	bl	80121d0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80124b4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80124b8:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80124bc:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80124c0:	3402      	adds	r4, #2
 80124c2:	edd3 8a00 	vldr	s17, [r3]
 80124c6:	46c8      	mov	r8, r9
 80124c8:	ed93 8a01 	vldr	s16, [r3, #4]
 80124cc:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 80124d0:	eef0 9a68 	vmov.f32	s19, s17
 80124d4:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 80124d8:	eeb0 9a48 	vmov.f32	s18, s16
 80124dc:	e7d7      	b.n	801248e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80124de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80124e2:	4638      	mov	r0, r7
 80124e4:	3402      	adds	r4, #2
 80124e6:	edd3 8a00 	vldr	s17, [r3]
 80124ea:	ed93 8a01 	vldr	s16, [r3, #4]
 80124ee:	eeb0 0a68 	vmov.f32	s0, s17
 80124f2:	eef0 0a48 	vmov.f32	s1, s16
 80124f6:	f7ff fd7d 	bl	8011ff4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80124fa:	e7c8      	b.n	801248e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80124fc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012500:	edd3 8a00 	vldr	s17, [r3]
 8012504:	eef0 0a48 	vmov.f32	s1, s16
 8012508:	4638      	mov	r0, r7
 801250a:	eeb0 0a68 	vmov.f32	s0, s17
 801250e:	3401      	adds	r4, #1
 8012510:	f7ff fd70 	bl	8011ff4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8012514:	e7bb      	b.n	801248e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8012516:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801251a:	ed93 8a00 	vldr	s16, [r3]
 801251e:	e7f1      	b.n	8012504 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8012520:	00a3      	lsls	r3, r4, #2
 8012522:	eef0 0a48 	vmov.f32	s1, s16
 8012526:	eeb0 0a68 	vmov.f32	s0, s17
 801252a:	4638      	mov	r0, r7
 801252c:	f103 0208 	add.w	r2, r3, #8
 8012530:	f103 090c 	add.w	r9, r3, #12
 8012534:	4433      	add	r3, r6
 8012536:	3404      	adds	r4, #4
 8012538:	4432      	add	r2, r6
 801253a:	44b1      	add	r9, r6
 801253c:	edd3 1a01 	vldr	s3, [r3, #4]
 8012540:	ed92 2a00 	vldr	s4, [r2]
 8012544:	edd9 2a00 	vldr	s5, [r9]
 8012548:	ed93 1a00 	vldr	s2, [r3]
 801254c:	9207      	str	r2, [sp, #28]
 801254e:	f7ff fabb 	bl	8011ac8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8012552:	9a07      	ldr	r2, [sp, #28]
 8012554:	ed99 8a00 	vldr	s16, [r9]
 8012558:	edd2 8a00 	vldr	s17, [r2]
 801255c:	e797      	b.n	801248e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801255e:	00a3      	lsls	r3, r4, #2
 8012560:	eef0 0a48 	vmov.f32	s1, s16
 8012564:	eeb0 0a68 	vmov.f32	s0, s17
 8012568:	4638      	mov	r0, r7
 801256a:	f103 0210 	add.w	r2, r3, #16
 801256e:	f103 0914 	add.w	r9, r3, #20
 8012572:	4433      	add	r3, r6
 8012574:	3406      	adds	r4, #6
 8012576:	4432      	add	r2, r6
 8012578:	44b1      	add	r9, r6
 801257a:	edd3 2a03 	vldr	s5, [r3, #12]
 801257e:	ed92 3a00 	vldr	s6, [r2]
 8012582:	edd9 3a00 	vldr	s7, [r9]
 8012586:	ed93 2a02 	vldr	s4, [r3, #8]
 801258a:	edd3 1a01 	vldr	s3, [r3, #4]
 801258e:	ed93 1a00 	vldr	s2, [r3]
 8012592:	9207      	str	r2, [sp, #28]
 8012594:	f7ff fab7 	bl	8011b06 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8012598:	9a07      	ldr	r2, [sp, #28]
 801259a:	ed99 8a00 	vldr	s16, [r9]
 801259e:	edd2 8a00 	vldr	s17, [r2]
 80125a2:	e774      	b.n	801248e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80125a4:	9b06      	ldr	r3, [sp, #24]
 80125a6:	af08      	add	r7, sp, #32
 80125a8:	4543      	cmp	r3, r8
 80125aa:	d90f      	bls.n	80125cc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80125ac:	4638      	mov	r0, r7
 80125ae:	f7ff fdad 	bl	801210c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80125b2:	b958      	cbnz	r0, 80125cc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 80125b4:	2301      	movs	r3, #1
 80125b6:	9703      	str	r7, [sp, #12]
 80125b8:	f8cd b000 	str.w	fp, [sp]
 80125bc:	4641      	mov	r1, r8
 80125be:	9a06      	ldr	r2, [sp, #24]
 80125c0:	4628      	mov	r0, r5
 80125c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80125c6:	4623      	mov	r3, r4
 80125c8:	f7ff fe02 	bl	80121d0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80125cc:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 80125d0:	4638      	mov	r0, r7
 80125d2:	f011 fc55 	bl	8023e80 <_ZN8touchgfx6Canvas6renderEh>
 80125d6:	4604      	mov	r4, r0
 80125d8:	4638      	mov	r0, r7
 80125da:	f7ff fe99 	bl	8012310 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 80125de:	4620      	mov	r0, r4
 80125e0:	b035      	add	sp, #212	@ 0xd4
 80125e2:	ecbd 8b04 	vpop	{d8-d9}
 80125e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ea:	2401      	movs	r4, #1
 80125ec:	e7f7      	b.n	80125de <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 80125ee:	bf00      	nop
 80125f0:	00000000 	.word	0x00000000
 80125f4:	08028ea8 	.word	0x08028ea8

080125f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 80125f8:	b510      	push	{r4, lr}
 80125fa:	4604      	mov	r4, r0
 80125fc:	f7ff fe88 	bl	8012310 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8012600:	21b0      	movs	r1, #176	@ 0xb0
 8012602:	4620      	mov	r0, r4
 8012604:	f012 f809 	bl	802461a <_ZdlPvj>
 8012608:	4620      	mov	r0, r4
 801260a:	bd10      	pop	{r4, pc}

0801260c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 801260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012610:	4698      	mov	r8, r3
 8012612:	23ff      	movs	r3, #255	@ 0xff
 8012614:	4607      	mov	r7, r0
 8012616:	4689      	mov	r9, r1
 8012618:	4692      	mov	sl, r2
 801261a:	1d02      	adds	r2, r0, #4
 801261c:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8012620:	2400      	movs	r4, #0
 8012622:	44ca      	add	sl, r9
 8012624:	ed2d 8b06 	vpush	{d8-d10}
 8012628:	b0aa      	sub	sp, #168	@ 0xa8
 801262a:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8012830 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 801262e:	9300      	str	r3, [sp, #0]
 8012630:	eef0 8a48 	vmov.f32	s17, s16
 8012634:	6981      	ldr	r1, [r0, #24]
 8012636:	a80d      	add	r0, sp, #52	@ 0x34
 8012638:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801263a:	f011 fb8d 	bl	8023d58 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 801263e:	7f3b      	ldrb	r3, [r7, #28]
 8012640:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8012830 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8012644:	4628      	mov	r0, r5
 8012646:	1e5a      	subs	r2, r3, #1
 8012648:	eeb0 0a60 	vmov.f32	s0, s1
 801264c:	4253      	negs	r3, r2
 801264e:	4153      	adcs	r3, r2
 8012650:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8012654:	f005 fc6f 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012658:	eeb0 9a40 	vmov.f32	s18, s0
 801265c:	eef0 9a60 	vmov.f32	s19, s1
 8012660:	45ca      	cmp	sl, r9
 8012662:	f000 80cd 	beq.w	8012800 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8012666:	f819 3b01 	ldrb.w	r3, [r9], #1
 801266a:	2b06      	cmp	r3, #6
 801266c:	d8f8      	bhi.n	8012660 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801266e:	e8df f003 	tbb	[pc, r3]
 8012672:	0804      	.short	0x0804
 8012674:	58533f2a 	.word	0x58533f2a
 8012678:	8a          	.byte	0x8a
 8012679:	00          	.byte	0x00
 801267a:	a80d      	add	r0, sp, #52	@ 0x34
 801267c:	f011 fbde 	bl	8023e3c <_ZN8touchgfx6Canvas5closeEv>
 8012680:	e7ee      	b.n	8012660 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012682:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8012686:	4628      	mov	r0, r5
 8012688:	ed93 8a01 	vldr	s16, [r3, #4]
 801268c:	edd3 8a00 	vldr	s17, [r3]
 8012690:	eef0 0a48 	vmov.f32	s1, s16
 8012694:	eeb0 0a68 	vmov.f32	s0, s17
 8012698:	f005 fc4d 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801269c:	a80d      	add	r0, sp, #52	@ 0x34
 801269e:	eef0 7a60 	vmov.f32	s15, s1
 80126a2:	eeb0 9a40 	vmov.f32	s18, s0
 80126a6:	eef0 9a60 	vmov.f32	s19, s1
 80126aa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80126ae:	ee17 2a90 	vmov	r2, s15
 80126b2:	eef0 7a40 	vmov.f32	s15, s0
 80126b6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80126ba:	ee17 1a90 	vmov	r1, s15
 80126be:	f011 fc97 	bl	8023ff0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80126c2:	3402      	adds	r4, #2
 80126c4:	e7cc      	b.n	8012660 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80126c6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80126ca:	4628      	mov	r0, r5
 80126cc:	edd3 8a00 	vldr	s17, [r3]
 80126d0:	ed93 8a01 	vldr	s16, [r3, #4]
 80126d4:	eeb0 0a68 	vmov.f32	s0, s17
 80126d8:	eef0 0a48 	vmov.f32	s1, s16
 80126dc:	f005 fc2b 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80126e0:	a80d      	add	r0, sp, #52	@ 0x34
 80126e2:	eeb0 9a40 	vmov.f32	s18, s0
 80126e6:	eef0 9a60 	vmov.f32	s19, s1
 80126ea:	f7ff fe01 	bl	80122f0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80126ee:	e7e8      	b.n	80126c2 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 80126f0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80126f4:	edd3 8a00 	vldr	s17, [r3]
 80126f8:	eef0 0a48 	vmov.f32	s1, s16
 80126fc:	4628      	mov	r0, r5
 80126fe:	eeb0 0a68 	vmov.f32	s0, s17
 8012702:	3401      	adds	r4, #1
 8012704:	f005 fc17 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012708:	a80d      	add	r0, sp, #52	@ 0x34
 801270a:	eef0 9a60 	vmov.f32	s19, s1
 801270e:	eeb0 9a40 	vmov.f32	s18, s0
 8012712:	f7ff fded 	bl	80122f0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8012716:	e7a3      	b.n	8012660 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012718:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801271c:	ed93 8a00 	vldr	s16, [r3]
 8012720:	e7ea      	b.n	80126f8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8012722:	1ca3      	adds	r3, r4, #2
 8012724:	4628      	mov	r0, r5
 8012726:	3404      	adds	r4, #4
 8012728:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801272c:	ed53 0a01 	vldr	s1, [r3, #-4]
 8012730:	ed13 0a02 	vldr	s0, [r3, #-8]
 8012734:	edd3 8a00 	vldr	s17, [r3]
 8012738:	ed93 8a01 	vldr	s16, [r3, #4]
 801273c:	f005 fbfb 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012740:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8012744:	eeb0 0a68 	vmov.f32	s0, s17
 8012748:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801274c:	eef0 0a48 	vmov.f32	s1, s16
 8012750:	4628      	mov	r0, r5
 8012752:	f005 fbf0 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8012756:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 801275a:	eef0 2a60 	vmov.f32	s5, s1
 801275e:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8012762:	eeb0 2a40 	vmov.f32	s4, s0
 8012766:	a80d      	add	r0, sp, #52	@ 0x34
 8012768:	eeb0 aa40 	vmov.f32	s20, s0
 801276c:	eef0 aa60 	vmov.f32	s21, s1
 8012770:	eeb0 0a49 	vmov.f32	s0, s18
 8012774:	eef0 0a69 	vmov.f32	s1, s19
 8012778:	f7ff f9a6 	bl	8011ac8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801277c:	eef0 9a6a 	vmov.f32	s19, s21
 8012780:	eeb0 9a4a 	vmov.f32	s18, s20
 8012784:	e76c      	b.n	8012660 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8012786:	1d26      	adds	r6, r4, #4
 8012788:	4628      	mov	r0, r5
 801278a:	3406      	adds	r4, #6
 801278c:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012790:	ed56 0a03 	vldr	s1, [r6, #-12]
 8012794:	ed16 0a04 	vldr	s0, [r6, #-16]
 8012798:	edd6 8a00 	vldr	s17, [r6]
 801279c:	ed96 8a01 	vldr	s16, [r6, #4]
 80127a0:	f005 fbc9 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80127a4:	ed8d 0a07 	vstr	s0, [sp, #28]
 80127a8:	4628      	mov	r0, r5
 80127aa:	ed16 0a02 	vldr	s0, [r6, #-8]
 80127ae:	edcd 0a08 	vstr	s1, [sp, #32]
 80127b2:	ed56 0a01 	vldr	s1, [r6, #-4]
 80127b6:	f005 fbbe 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80127ba:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80127be:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80127c2:	eeb0 0a68 	vmov.f32	s0, s17
 80127c6:	eef0 0a48 	vmov.f32	s1, s16
 80127ca:	4628      	mov	r0, r5
 80127cc:	f005 fbb3 	bl	8017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80127d0:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 80127d4:	eeb0 3a40 	vmov.f32	s6, s0
 80127d8:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 80127dc:	eef0 3a60 	vmov.f32	s7, s1
 80127e0:	eddd 1a08 	vldr	s3, [sp, #32]
 80127e4:	eeb0 aa40 	vmov.f32	s20, s0
 80127e8:	ed9d 1a07 	vldr	s2, [sp, #28]
 80127ec:	eef0 aa60 	vmov.f32	s21, s1
 80127f0:	a80d      	add	r0, sp, #52	@ 0x34
 80127f2:	eef0 0a69 	vmov.f32	s1, s19
 80127f6:	eeb0 0a49 	vmov.f32	s0, s18
 80127fa:	f7ff f984 	bl	8011b06 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80127fe:	e7bd      	b.n	801277c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8012800:	7f7b      	ldrb	r3, [r7, #29]
 8012802:	a80d      	add	r0, sp, #52	@ 0x34
 8012804:	7fb9      	ldrb	r1, [r7, #30]
 8012806:	4359      	muls	r1, r3
 8012808:	1c4b      	adds	r3, r1, #1
 801280a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801280e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012812:	f011 fb35 	bl	8023e80 <_ZN8touchgfx6Canvas6renderEh>
 8012816:	4b07      	ldr	r3, [pc, #28]	@ (8012834 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8012818:	4604      	mov	r4, r0
 801281a:	a812      	add	r0, sp, #72	@ 0x48
 801281c:	930d      	str	r3, [sp, #52]	@ 0x34
 801281e:	f001 fba6 	bl	8013f6e <_ZN8touchgfx7OutlineD1Ev>
 8012822:	4620      	mov	r0, r4
 8012824:	b02a      	add	sp, #168	@ 0xa8
 8012826:	ecbd 8b06 	vpop	{d8-d10}
 801282a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801282e:	bf00      	nop
 8012830:	00000000 	.word	0x00000000
 8012834:	08029778 	.word	0x08029778

08012838 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8012838:	b410      	push	{r4}
 801283a:	7f04      	ldrb	r4, [r0, #28]
 801283c:	b11c      	cbz	r4, 8012846 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 801283e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012842:	f7ff bee3 	b.w	801260c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8012846:	f85d 4b04 	ldr.w	r4, [sp], #4
 801284a:	f7ff bd6d 	b.w	8012328 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0801284e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 801284e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012852:	4691      	mov	r9, r2
 8012854:	4602      	mov	r2, r0
 8012856:	4606      	mov	r6, r0
 8012858:	4688      	mov	r8, r1
 801285a:	f852 0f26 	ldr.w	r0, [r2, #38]!
 801285e:	469a      	mov	sl, r3
 8012860:	ab02      	add	r3, sp, #8
 8012862:	af02      	add	r7, sp, #8
 8012864:	6851      	ldr	r1, [r2, #4]
 8012866:	c303      	stmia	r3!, {r0, r1}
 8012868:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801286c:	2b00      	cmp	r3, #0
 801286e:	dd2f      	ble.n	80128d0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012870:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8012874:	2c00      	cmp	r4, #0
 8012876:	dd2b      	ble.n	80128d0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8012878:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801287c:	441c      	add	r4, r3
 801287e:	b2a4      	uxth	r4, r4
 8012880:	b225      	sxth	r5, r4
 8012882:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8012886:	42ab      	cmp	r3, r5
 8012888:	da22      	bge.n	80128d0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801288a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801288c:	464a      	mov	r2, r9
 801288e:	9701      	str	r7, [sp, #4]
 8012890:	4641      	mov	r1, r8
 8012892:	9300      	str	r3, [sp, #0]
 8012894:	4630      	mov	r0, r6
 8012896:	4653      	mov	r3, sl
 8012898:	f7ff ffce 	bl	8012838 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801289c:	b940      	cbnz	r0, 80128b0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801289e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d004      	beq.n	80128b0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 80128a6:	3301      	adds	r3, #1
 80128a8:	105b      	asrs	r3, r3, #1
 80128aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80128ae:	e7ec      	b.n	801288a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 80128b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80128b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80128b8:	4413      	add	r3, r2
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	441a      	add	r2, r3
 80128be:	f8ad 300a 	strh.w	r3, [sp, #10]
 80128c2:	b212      	sxth	r2, r2
 80128c4:	4295      	cmp	r5, r2
 80128c6:	dadc      	bge.n	8012882 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80128c8:	1ae3      	subs	r3, r4, r3
 80128ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80128ce:	e7d8      	b.n	8012882 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80128d0:	b004      	add	sp, #16
 80128d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080128d6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80128d6:	0c0b      	lsrs	r3, r1, #16
 80128d8:	60c1      	str	r1, [r0, #12]
 80128da:	7481      	strb	r1, [r0, #18]
 80128dc:	7403      	strb	r3, [r0, #16]
 80128de:	0a0b      	lsrs	r3, r1, #8
 80128e0:	7443      	strb	r3, [r0, #17]
 80128e2:	4770      	bx	lr

080128e4 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80128e4:	f1a0 0008 	sub.w	r0, r0, #8
 80128e8:	e7f5      	b.n	80128d6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

080128ec <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80128ec:	b508      	push	{r3, lr}
 80128ee:	4b05      	ldr	r3, [pc, #20]	@ (8012904 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80128f0:	6818      	ldr	r0, [r3, #0]
 80128f2:	6803      	ldr	r3, [r0, #0]
 80128f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80128f8:	4798      	blx	r3
 80128fa:	1e43      	subs	r3, r0, #1
 80128fc:	4258      	negs	r0, r3
 80128fe:	4158      	adcs	r0, r3
 8012900:	bd08      	pop	{r3, pc}
 8012902:	bf00      	nop
 8012904:	2402641c 	.word	0x2402641c

08012908 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8012908:	4770      	bx	lr

0801290a <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 801290a:	3808      	subs	r0, #8
 801290c:	4770      	bx	lr

0801290e <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801290e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012912:	b410      	push	{r4}
 8012914:	188c      	adds	r4, r1, r2
 8012916:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801291a:	68c2      	ldr	r2, [r0, #12]
 801291c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8012920:	4620      	mov	r0, r4
 8012922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012926:	f7f0 bc57 	b.w	80031d8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0801292a <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 801292a:	f7f0 bc31 	b.w	8003190 <_ZN8touchgfx5paint8tearDownEv>

0801292e <_ZN8touchgfx13PainterRGB888D0Ev>:
 801292e:	b510      	push	{r4, lr}
 8012930:	4604      	mov	r4, r0
 8012932:	2114      	movs	r1, #20
 8012934:	f011 fe71 	bl	802461a <_ZdlPvj>
 8012938:	4620      	mov	r0, r4
 801293a:	bd10      	pop	{r4, pc}

0801293c <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 801293c:	f1a0 0008 	sub.w	r0, r0, #8
 8012940:	e7f5      	b.n	801292e <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08012944 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8012944:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801294c:	4411      	add	r1, r2
 801294e:	7c42      	ldrb	r2, [r0, #17]
 8012950:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8012954:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8012958:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801295c:	2a00      	cmp	r2, #0
 801295e:	f000 8084 	beq.w	8012a6a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8012962:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012966:	ed90 7a08 	vldr	s14, [r0, #32]
 801296a:	42a2      	cmp	r2, r4
 801296c:	68c3      	ldr	r3, [r0, #12]
 801296e:	db20      	blt.n	80129b2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8012970:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012974:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297c:	bfc8      	it	gt
 801297e:	2200      	movgt	r2, #0
 8012980:	589a      	ldr	r2, [r3, r2]
 8012982:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012986:	7c03      	ldrb	r3, [r0, #16]
 8012988:	fa5f fc82 	uxtb.w	ip, r2
 801298c:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012990:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012994:	440e      	add	r6, r1
 8012996:	b36b      	cbz	r3, 80129f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8012998:	2dff      	cmp	r5, #255	@ 0xff
 801299a:	d12b      	bne.n	80129f4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801299c:	42b1      	cmp	r1, r6
 801299e:	f080 8204 	bcs.w	8012daa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80129a2:	f881 c000 	strb.w	ip, [r1]
 80129a6:	3103      	adds	r1, #3
 80129a8:	f801 7c02 	strb.w	r7, [r1, #-2]
 80129ac:	f801 4c01 	strb.w	r4, [r1, #-1]
 80129b0:	e7f4      	b.n	801299c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 80129b2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80129b6:	42a7      	cmp	r7, r4
 80129b8:	dc08      	bgt.n	80129cc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 80129ba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80129be:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80129c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c6:	bfd8      	it	le
 80129c8:	2200      	movle	r2, #0
 80129ca:	e7d9      	b.n	8012980 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80129cc:	1aa2      	subs	r2, r4, r2
 80129ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80129d2:	ee07 2a90 	vmov	s15, r2
 80129d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80129e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129e6:	ee17 2a90 	vmov	r2, s15
 80129ea:	bfd8      	it	le
 80129ec:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 80129f0:	0092      	lsls	r2, r2, #2
 80129f2:	e7c5      	b.n	8012980 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80129f4:	0e12      	lsrs	r2, r2, #24
 80129f6:	4355      	muls	r5, r2
 80129f8:	1c6a      	adds	r2, r5, #1
 80129fa:	eb02 2525 	add.w	r5, r2, r5, asr #8
 80129fe:	122d      	asrs	r5, r5, #8
 8012a00:	43e8      	mvns	r0, r5
 8012a02:	b2ad      	uxth	r5, r5
 8012a04:	fb1c fc05 	smulbb	ip, ip, r5
 8012a08:	b2c0      	uxtb	r0, r0
 8012a0a:	fb17 f705 	smulbb	r7, r7, r5
 8012a0e:	fb14 f505 	smulbb	r5, r4, r5
 8012a12:	fa1f fc8c 	uxth.w	ip, ip
 8012a16:	b2bf      	uxth	r7, r7
 8012a18:	b2ad      	uxth	r5, r5
 8012a1a:	428e      	cmp	r6, r1
 8012a1c:	f101 0303 	add.w	r3, r1, #3
 8012a20:	f240 81c3 	bls.w	8012daa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012a24:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8012a28:	fb02 c200 	mla	r2, r2, r0, ip
 8012a2c:	b292      	uxth	r2, r2
 8012a2e:	1c51      	adds	r1, r2, #1
 8012a30:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012a34:	1212      	asrs	r2, r2, #8
 8012a36:	f803 2c03 	strb.w	r2, [r3, #-3]
 8012a3a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8012a3e:	fb02 7200 	mla	r2, r2, r0, r7
 8012a42:	b292      	uxth	r2, r2
 8012a44:	1c51      	adds	r1, r2, #1
 8012a46:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012a4a:	1212      	asrs	r2, r2, #8
 8012a4c:	f803 2c02 	strb.w	r2, [r3, #-2]
 8012a50:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8012a54:	fb02 5200 	mla	r2, r2, r0, r5
 8012a58:	b292      	uxth	r2, r2
 8012a5a:	1c51      	adds	r1, r2, #1
 8012a5c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012a60:	4619      	mov	r1, r3
 8012a62:	1212      	asrs	r2, r2, #8
 8012a64:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012a68:	e7d7      	b.n	8012a1a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8012a6a:	7c82      	ldrb	r2, [r0, #18]
 8012a6c:	2a00      	cmp	r2, #0
 8012a6e:	d047      	beq.n	8012b00 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8012a70:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012a74:	ee07 2a10 	vmov	s14, r2
 8012a78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012a7c:	ee07 3a90 	vmov	s15, r3
 8012a80:	461a      	mov	r2, r3
 8012a82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012a86:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8e:	f200 808e 	bhi.w	8012bae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8012a92:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012a96:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012a9a:	68c7      	ldr	r7, [r0, #12]
 8012a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012aa0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012aa4:	ee06 6a90 	vmov	s13, r6
 8012aa8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012aac:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab4:	bf4a      	itet	mi
 8012ab6:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 8012aba:	4634      	movpl	r4, r6
 8012abc:	ee17 4a90 	vmovmi	r4, s15
 8012ac0:	edd0 7a08 	vldr	s15, [r0, #32]
 8012ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012ac8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8012acc:	448e      	add	lr, r1
 8012ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad2:	bfc8      	it	gt
 8012ad4:	2200      	movgt	r2, #0
 8012ad6:	58bf      	ldr	r7, [r7, r2]
 8012ad8:	7c02      	ldrb	r2, [r0, #16]
 8012ada:	fa5f f987 	uxtb.w	r9, r7
 8012ade:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8012ae2:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8012ae6:	b31a      	cbz	r2, 8012b30 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012ae8:	2dff      	cmp	r5, #255	@ 0xff
 8012aea:	d121      	bne.n	8012b30 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012aec:	4571      	cmp	r1, lr
 8012aee:	d25d      	bcs.n	8012bac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012af0:	f881 9000 	strb.w	r9, [r1]
 8012af4:	3103      	adds	r1, #3
 8012af6:	f801 8c02 	strb.w	r8, [r1, #-2]
 8012afa:	f801 cc01 	strb.w	ip, [r1, #-1]
 8012afe:	e7f5      	b.n	8012aec <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8012b00:	ee07 4a90 	vmov	s15, r4
 8012b04:	ed90 7a06 	vldr	s14, [r0, #24]
 8012b08:	edd0 6a05 	vldr	s13, [r0, #20]
 8012b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012b18:	edd0 7a08 	vldr	s15, [r0, #32]
 8012b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b24:	bf44      	itt	mi
 8012b26:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8012b2a:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8012b2e:	e7a5      	b.n	8012a7c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8012b30:	0e3f      	lsrs	r7, r7, #24
 8012b32:	436f      	muls	r7, r5
 8012b34:	1c7a      	adds	r2, r7, #1
 8012b36:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8012b3a:	1212      	asrs	r2, r2, #8
 8012b3c:	ea6f 0a02 	mvn.w	sl, r2
 8012b40:	b292      	uxth	r2, r2
 8012b42:	fb19 f902 	smulbb	r9, r9, r2
 8012b46:	fa5f fa8a 	uxtb.w	sl, sl
 8012b4a:	fb18 f802 	smulbb	r8, r8, r2
 8012b4e:	fb1c fc02 	smulbb	ip, ip, r2
 8012b52:	fa1f f989 	uxth.w	r9, r9
 8012b56:	fa1f f888 	uxth.w	r8, r8
 8012b5a:	fa1f fc8c 	uxth.w	ip, ip
 8012b5e:	458e      	cmp	lr, r1
 8012b60:	f101 0203 	add.w	r2, r1, #3
 8012b64:	d922      	bls.n	8012bac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012b66:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8012b6a:	fb01 910a 	mla	r1, r1, sl, r9
 8012b6e:	b289      	uxth	r1, r1
 8012b70:	1c4f      	adds	r7, r1, #1
 8012b72:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012b76:	1209      	asrs	r1, r1, #8
 8012b78:	f802 1c03 	strb.w	r1, [r2, #-3]
 8012b7c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012b80:	fb01 810a 	mla	r1, r1, sl, r8
 8012b84:	b289      	uxth	r1, r1
 8012b86:	1c4f      	adds	r7, r1, #1
 8012b88:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012b8c:	1209      	asrs	r1, r1, #8
 8012b8e:	f802 1c02 	strb.w	r1, [r2, #-2]
 8012b92:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012b96:	fb01 c10a 	mla	r1, r1, sl, ip
 8012b9a:	b289      	uxth	r1, r1
 8012b9c:	1c4f      	adds	r7, r1, #1
 8012b9e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012ba2:	1209      	asrs	r1, r1, #8
 8012ba4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012ba8:	4611      	mov	r1, r2
 8012baa:	e7d8      	b.n	8012b5e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8012bac:	191a      	adds	r2, r3, r4
 8012bae:	4433      	add	r3, r6
 8012bb0:	b21b      	sxth	r3, r3
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	f340 80f9 	ble.w	8012daa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012bb8:	edd0 7a07 	vldr	s15, [r0, #28]
 8012bbc:	ee06 2a90 	vmov	s13, r2
 8012bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012bc8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd0:	f340 80b0 	ble.w	8012d34 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8012bd4:	ee06 3a10 	vmov	s12, r3
 8012bd8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012bdc:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8012db0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8012be0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012be4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012be8:	ed90 6a08 	vldr	s12, [r0, #32]
 8012bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8012bf4:	bfd6      	itet	le
 8012bf6:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8012bfa:	469c      	movgt	ip, r3
 8012bfc:	ee17 ca90 	vmovle	ip, s15
 8012c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c04:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8012db4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8012c08:	ebac 0202 	sub.w	r2, ip, r2
 8012c0c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8012c10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012c14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012c18:	188c      	adds	r4, r1, r2
 8012c1a:	7c02      	ldrb	r2, [r0, #16]
 8012c1c:	b1d2      	cbz	r2, 8012c54 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8012c1e:	2dff      	cmp	r5, #255	@ 0xff
 8012c20:	d118      	bne.n	8012c54 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8012c22:	42a1      	cmp	r1, r4
 8012c24:	d261      	bcs.n	8012cea <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8012c26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012c2a:	68c6      	ldr	r6, [r0, #12]
 8012c2c:	3103      	adds	r1, #3
 8012c2e:	ee17 7a10 	vmov	r7, s14
 8012c32:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8012c36:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8012c3a:	f801 6c03 	strb.w	r6, [r1, #-3]
 8012c3e:	7856      	ldrb	r6, [r2, #1]
 8012c40:	f801 6c02 	strb.w	r6, [r1, #-2]
 8012c44:	7892      	ldrb	r2, [r2, #2]
 8012c46:	f801 2c01 	strb.w	r2, [r1, #-1]
 8012c4a:	ed90 7a08 	vldr	s14, [r0, #32]
 8012c4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012c52:	e7e6      	b.n	8012c22 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8012c54:	68c2      	ldr	r2, [r0, #12]
 8012c56:	428c      	cmp	r4, r1
 8012c58:	f101 0e03 	add.w	lr, r1, #3
 8012c5c:	d945      	bls.n	8012cea <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8012c5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012c62:	ee17 9a10 	vmov	r9, s14
 8012c66:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8012c6a:	f898 7003 	ldrb.w	r7, [r8, #3]
 8012c6e:	fb07 f605 	mul.w	r6, r7, r5
 8012c72:	1c77      	adds	r7, r6, #1
 8012c74:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8012c78:	123f      	asrs	r7, r7, #8
 8012c7a:	b2b9      	uxth	r1, r7
 8012c7c:	43ff      	mvns	r7, r7
 8012c7e:	b2fe      	uxtb	r6, r7
 8012c80:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8012c84:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8012c88:	fb19 f906 	smulbb	r9, r9, r6
 8012c8c:	fb07 9701 	mla	r7, r7, r1, r9
 8012c90:	b2bf      	uxth	r7, r7
 8012c92:	f107 0901 	add.w	r9, r7, #1
 8012c96:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8012c9a:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8012c9e:	fb19 f906 	smulbb	r9, r9, r6
 8012ca2:	123f      	asrs	r7, r7, #8
 8012ca4:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8012ca8:	f898 7001 	ldrb.w	r7, [r8, #1]
 8012cac:	fb07 9701 	mla	r7, r7, r1, r9
 8012cb0:	b2bf      	uxth	r7, r7
 8012cb2:	f107 0901 	add.w	r9, r7, #1
 8012cb6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8012cba:	123f      	asrs	r7, r7, #8
 8012cbc:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8012cc0:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8012cc4:	f898 8002 	ldrb.w	r8, [r8, #2]
 8012cc8:	fb17 f606 	smulbb	r6, r7, r6
 8012ccc:	fb08 6601 	mla	r6, r8, r1, r6
 8012cd0:	b2b6      	uxth	r6, r6
 8012cd2:	1c71      	adds	r1, r6, #1
 8012cd4:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8012cd8:	4671      	mov	r1, lr
 8012cda:	1236      	asrs	r6, r6, #8
 8012cdc:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8012ce0:	ed90 7a08 	vldr	s14, [r0, #32]
 8012ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ce8:	e7b5      	b.n	8012c56 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8012cea:	4563      	cmp	r3, ip
 8012cec:	dd5d      	ble.n	8012daa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012cee:	edd0 7a08 	vldr	s15, [r0, #32]
 8012cf2:	eba3 030c 	sub.w	r3, r3, ip
 8012cf6:	68c4      	ldr	r4, [r0, #12]
 8012cf8:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8012cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012d00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012d04:	7c00      	ldrb	r0, [r0, #16]
 8012d06:	440b      	add	r3, r1
 8012d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d0c:	bfd8      	it	le
 8012d0e:	2200      	movle	r2, #0
 8012d10:	58a2      	ldr	r2, [r4, r2]
 8012d12:	b2d4      	uxtb	r4, r2
 8012d14:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8012d18:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8012d1c:	b160      	cbz	r0, 8012d38 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8012d1e:	2dff      	cmp	r5, #255	@ 0xff
 8012d20:	d10a      	bne.n	8012d38 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8012d22:	4299      	cmp	r1, r3
 8012d24:	d241      	bcs.n	8012daa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012d26:	700c      	strb	r4, [r1, #0]
 8012d28:	3103      	adds	r1, #3
 8012d2a:	f801 cc02 	strb.w	ip, [r1, #-2]
 8012d2e:	f801 7c01 	strb.w	r7, [r1, #-1]
 8012d32:	e7f6      	b.n	8012d22 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8012d34:	4694      	mov	ip, r2
 8012d36:	e7da      	b.n	8012cee <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8012d38:	0e12      	lsrs	r2, r2, #24
 8012d3a:	436a      	muls	r2, r5
 8012d3c:	1c55      	adds	r5, r2, #1
 8012d3e:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8012d42:	122d      	asrs	r5, r5, #8
 8012d44:	43ee      	mvns	r6, r5
 8012d46:	b2ad      	uxth	r5, r5
 8012d48:	fb14 f405 	smulbb	r4, r4, r5
 8012d4c:	b2f6      	uxtb	r6, r6
 8012d4e:	fb1c f005 	smulbb	r0, ip, r5
 8012d52:	fb17 f505 	smulbb	r5, r7, r5
 8012d56:	b2a4      	uxth	r4, r4
 8012d58:	b280      	uxth	r0, r0
 8012d5a:	b2ad      	uxth	r5, r5
 8012d5c:	428b      	cmp	r3, r1
 8012d5e:	f101 0203 	add.w	r2, r1, #3
 8012d62:	d922      	bls.n	8012daa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012d64:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8012d68:	fb01 4106 	mla	r1, r1, r6, r4
 8012d6c:	b289      	uxth	r1, r1
 8012d6e:	1c4f      	adds	r7, r1, #1
 8012d70:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012d74:	1209      	asrs	r1, r1, #8
 8012d76:	f802 1c03 	strb.w	r1, [r2, #-3]
 8012d7a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012d7e:	fb01 0106 	mla	r1, r1, r6, r0
 8012d82:	b289      	uxth	r1, r1
 8012d84:	1c4f      	adds	r7, r1, #1
 8012d86:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012d8a:	1209      	asrs	r1, r1, #8
 8012d8c:	f802 1c02 	strb.w	r1, [r2, #-2]
 8012d90:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012d94:	fb01 5106 	mla	r1, r1, r6, r5
 8012d98:	b289      	uxth	r1, r1
 8012d9a:	1c4f      	adds	r7, r1, #1
 8012d9c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8012da0:	1209      	asrs	r1, r1, #8
 8012da2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012da6:	4611      	mov	r1, r2
 8012da8:	e7d8      	b.n	8012d5c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8012daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dae:	bf00      	nop
 8012db0:	447ffffe 	.word	0x447ffffe
 8012db4:	00000000 	.word	0x00000000

08012db8 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8012db8:	4770      	bx	lr

08012dba <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8012dba:	4770      	bx	lr

08012dbc <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	2124      	movs	r1, #36	@ 0x24
 8012dc2:	f011 fc2a 	bl	802461a <_ZdlPvj>
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	bd10      	pop	{r4, pc}
	...

08012dcc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8012dcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012dce:	6803      	ldr	r3, [r0, #0]
 8012dd0:	460d      	mov	r5, r1
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	4601      	mov	r1, r0
 8012dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012dd8:	a802      	add	r0, sp, #8
 8012dda:	4798      	blx	r3
 8012ddc:	6828      	ldr	r0, [r5, #0]
 8012dde:	6869      	ldr	r1, [r5, #4]
 8012de0:	466b      	mov	r3, sp
 8012de2:	c303      	stmia	r3!, {r0, r1}
 8012de4:	4668      	mov	r0, sp
 8012de6:	4619      	mov	r1, r3
 8012de8:	f7fd fcfc 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 8012dec:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012dee:	b188      	cbz	r0, 8012e14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012df0:	6803      	ldr	r3, [r0, #0]
 8012df2:	1d21      	adds	r1, r4, #4
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	4798      	blx	r3
 8012df8:	b160      	cbz	r0, 8012e14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012dfa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	dd08      	ble.n	8012e14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012e02:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8012e06:	2d00      	cmp	r5, #0
 8012e08:	dd04      	ble.n	8012e14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8012eb8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8012e0c:	7812      	ldrb	r2, [r2, #0]
 8012e0e:	b11a      	cbz	r2, 8012e18 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8012e10:	2a01      	cmp	r2, #1
 8012e12:	d029      	beq.n	8012e68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8012e14:	b004      	add	sp, #16
 8012e16:	bd70      	pop	{r4, r5, r6, pc}
 8012e18:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012e1c:	441d      	add	r5, r3
 8012e1e:	b2ad      	uxth	r5, r5
 8012e20:	b22e      	sxth	r6, r5
 8012e22:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012e26:	42b3      	cmp	r3, r6
 8012e28:	daf4      	bge.n	8012e14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012e2a:	6823      	ldr	r3, [r4, #0]
 8012e2c:	4669      	mov	r1, sp
 8012e2e:	4620      	mov	r0, r4
 8012e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e32:	4798      	blx	r3
 8012e34:	b940      	cbnz	r0, 8012e48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8012e36:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012e3a:	2b01      	cmp	r3, #1
 8012e3c:	d004      	beq.n	8012e48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8012e3e:	3301      	adds	r3, #1
 8012e40:	105b      	asrs	r3, r3, #1
 8012e42:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012e46:	e7f0      	b.n	8012e2a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8012e48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012e4c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012e50:	4413      	add	r3, r2
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	441a      	add	r2, r3
 8012e56:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012e5a:	b212      	sxth	r2, r2
 8012e5c:	4296      	cmp	r6, r2
 8012e5e:	dae0      	bge.n	8012e22 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8012e60:	1aeb      	subs	r3, r5, r3
 8012e62:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012e66:	e7dc      	b.n	8012e22 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8012e68:	f8bd 5000 	ldrh.w	r5, [sp]
 8012e6c:	441d      	add	r5, r3
 8012e6e:	b2ad      	uxth	r5, r5
 8012e70:	b22e      	sxth	r6, r5
 8012e72:	f9bd 3000 	ldrsh.w	r3, [sp]
 8012e76:	42b3      	cmp	r3, r6
 8012e78:	dacc      	bge.n	8012e14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012e7a:	6823      	ldr	r3, [r4, #0]
 8012e7c:	4669      	mov	r1, sp
 8012e7e:	4620      	mov	r0, r4
 8012e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e82:	4798      	blx	r3
 8012e84:	b940      	cbnz	r0, 8012e98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8012e86:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8012e8a:	2b01      	cmp	r3, #1
 8012e8c:	d004      	beq.n	8012e98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8012e8e:	3301      	adds	r3, #1
 8012e90:	105b      	asrs	r3, r3, #1
 8012e92:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012e96:	e7f0      	b.n	8012e7a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8012e98:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012e9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	441a      	add	r2, r3
 8012ea6:	f8ad 3000 	strh.w	r3, [sp]
 8012eaa:	b212      	sxth	r2, r2
 8012eac:	4296      	cmp	r6, r2
 8012eae:	dae0      	bge.n	8012e72 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8012eb0:	1aeb      	subs	r3, r5, r3
 8012eb2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012eb6:	e7dc      	b.n	8012e72 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8012eb8:	24026414 	.word	0x24026414

08012ebc <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8012ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012ebe:	6803      	ldr	r3, [r0, #0]
 8012ec0:	4604      	mov	r4, r0
 8012ec2:	4601      	mov	r1, r0
 8012ec4:	4668      	mov	r0, sp
 8012ec6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ec8:	4798      	blx	r3
 8012eca:	2100      	movs	r1, #0
 8012ecc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8012ed0:	4668      	mov	r0, sp
 8012ed2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012ed6:	9102      	str	r1, [sp, #8]
 8012ed8:	a902      	add	r1, sp, #8
 8012eda:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012ede:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012ee2:	f7fd fc7f 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 8012ee6:	6823      	ldr	r3, [r4, #0]
 8012ee8:	4669      	mov	r1, sp
 8012eea:	4620      	mov	r0, r4
 8012eec:	691b      	ldr	r3, [r3, #16]
 8012eee:	4798      	blx	r3
 8012ef0:	b004      	add	sp, #16
 8012ef2:	bd10      	pop	{r4, pc}

08012ef4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8012ef4:	2101      	movs	r1, #1
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8012efc:	490a      	ldr	r1, [pc, #40]	@ (8012f28 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8012efe:	8082      	strh	r2, [r0, #4]
 8012f00:	6001      	str	r1, [r0, #0]
 8012f02:	21ff      	movs	r1, #255	@ 0xff
 8012f04:	80c2      	strh	r2, [r0, #6]
 8012f06:	8102      	strh	r2, [r0, #8]
 8012f08:	8142      	strh	r2, [r0, #10]
 8012f0a:	8182      	strh	r2, [r0, #12]
 8012f0c:	81c2      	strh	r2, [r0, #14]
 8012f0e:	8202      	strh	r2, [r0, #16]
 8012f10:	8242      	strh	r2, [r0, #18]
 8012f12:	61c2      	str	r2, [r0, #28]
 8012f14:	8402      	strh	r2, [r0, #32]
 8012f16:	8442      	strh	r2, [r0, #34]	@ 0x22
 8012f18:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8012f1c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8012f20:	6282      	str	r2, [r0, #40]	@ 0x28
 8012f22:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012f26:	4770      	bx	lr
 8012f28:	08028f60 	.word	0x08028f60

08012f2c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8012f2c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8012f30:	4770      	bx	lr

08012f32 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8012f32:	b510      	push	{r4, lr}
 8012f34:	4604      	mov	r4, r0
 8012f36:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012f38:	b150      	cbz	r0, 8012f50 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8012f3a:	6803      	ldr	r3, [r0, #0]
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	4798      	blx	r3
 8012f40:	b130      	cbz	r0, 8012f50 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8012f42:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012f44:	4621      	mov	r1, r4
 8012f46:	6803      	ldr	r3, [r0, #0]
 8012f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f4c:	689b      	ldr	r3, [r3, #8]
 8012f4e:	4718      	bx	r3
 8012f50:	bd10      	pop	{r4, pc}

08012f52 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8012f52:	790b      	ldrb	r3, [r1, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	bf0c      	ite	eq
 8012f58:	2301      	moveq	r3, #1
 8012f5a:	2300      	movne	r3, #0
 8012f5c:	b570      	push	{r4, r5, r6, lr}
 8012f5e:	4604      	mov	r4, r0
 8012f60:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012f64:	460e      	mov	r6, r1
 8012f66:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8012f6a:	d109      	bne.n	8012f80 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8012f6c:	b14d      	cbz	r5, 8012f82 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8012f6e:	7933      	ldrb	r3, [r6, #4]
 8012f70:	2b01      	cmp	r3, #1
 8012f72:	d10c      	bne.n	8012f8e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012f74:	6823      	ldr	r3, [r4, #0]
 8012f76:	4620      	mov	r0, r4
 8012f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f7e:	4718      	bx	r3
 8012f80:	b12d      	cbz	r5, 8012f8e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8012f82:	6823      	ldr	r3, [r4, #0]
 8012f84:	4620      	mov	r0, r4
 8012f86:	695b      	ldr	r3, [r3, #20]
 8012f88:	4798      	blx	r3
 8012f8a:	2d00      	cmp	r5, #0
 8012f8c:	d1ef      	bne.n	8012f6e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8012f8e:	bd70      	pop	{r4, r5, r6, pc}

08012f90 <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv>:
 8012f90:	b508      	push	{r3, lr}
 8012f92:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8012f96:	b10b      	cbz	r3, 8012f9c <_ZNK8touchgfx14SnapshotWidget17invalidateContentEv+0xc>
 8012f98:	f7f0 fb99 	bl	80036ce <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012f9c:	bd08      	pop	{r3, pc}

08012f9e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8012f9e:	6803      	ldr	r3, [r0, #0]
 8012fa0:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8012fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012fa6:	4718      	bx	r3

08012fa8 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 8012fa8:	4770      	bx	lr

08012faa <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8012faa:	b510      	push	{r4, lr}
 8012fac:	4604      	mov	r4, r0
 8012fae:	212c      	movs	r1, #44	@ 0x2c
 8012fb0:	f011 fb33 	bl	802461a <_ZdlPvj>
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	bd10      	pop	{r4, pc}

08012fb8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8012fb8:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8012fbc:	2bff      	cmp	r3, #255	@ 0xff
 8012fbe:	b510      	push	{r4, lr}
 8012fc0:	d104      	bne.n	8012fcc <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8012fc2:	8cca      	ldrh	r2, [r1, #38]	@ 0x26
 8012fc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d105      	bne.n	8012fd8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8012fcc:	2300      	movs	r3, #0
 8012fce:	8003      	strh	r3, [r0, #0]
 8012fd0:	8043      	strh	r3, [r0, #2]
 8012fd2:	8083      	strh	r3, [r0, #4]
 8012fd4:	80c3      	strh	r3, [r0, #6]
 8012fd6:	bd10      	pop	{r4, pc}
 8012fd8:	2300      	movs	r3, #0
 8012fda:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8012fde:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8012fe2:	8003      	strh	r3, [r0, #0]
 8012fe4:	8043      	strh	r3, [r0, #2]
 8012fe6:	8084      	strh	r4, [r0, #4]
 8012fe8:	80c2      	strh	r2, [r0, #6]
 8012fea:	e7f4      	b.n	8012fd6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08012fec <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8012fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ff0:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8012ff4:	b087      	sub	sp, #28
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	4689      	mov	r9, r1
 8012ffa:	b363      	cbz	r3, 8013056 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8012ffc:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 8012ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013002:	429a      	cmp	r2, r3
 8013004:	d027      	beq.n	8013056 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8013006:	ad06      	add	r5, sp, #24
 8013008:	2700      	movs	r7, #0
 801300a:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801300e:	4628      	mov	r0, r5
 8013010:	f006 fd40 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013014:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013018:	a904      	add	r1, sp, #16
 801301a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801301e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013022:	4620      	mov	r0, r4
 8013024:	6823      	ldr	r3, [r4, #0]
 8013026:	9704      	str	r7, [sp, #16]
 8013028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801302a:	4798      	blx	r3
 801302c:	f7f1 f954 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8013030:	6803      	ldr	r3, [r0, #0]
 8013032:	4606      	mov	r6, r0
 8013034:	4628      	mov	r0, r5
 8013036:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801303a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 801303c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013040:	f006 fde2 	bl	8019c08 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013044:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013048:	4601      	mov	r1, r0
 801304a:	9701      	str	r7, [sp, #4]
 801304c:	aa04      	add	r2, sp, #16
 801304e:	9300      	str	r3, [sp, #0]
 8013050:	4630      	mov	r0, r6
 8013052:	464b      	mov	r3, r9
 8013054:	47c0      	blx	r8
 8013056:	b007      	add	sp, #28
 8013058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801305c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801305c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801305e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013062:	460d      	mov	r5, r1
 8013064:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8013068:	2100      	movs	r1, #0
 801306a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801306e:	4604      	mov	r4, r0
 8013070:	6803      	ldr	r3, [r0, #0]
 8013072:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013078:	9100      	str	r1, [sp, #0]
 801307a:	4669      	mov	r1, sp
 801307c:	4798      	blx	r3
 801307e:	4621      	mov	r1, r4
 8013080:	a802      	add	r0, sp, #8
 8013082:	f004 fc3d 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013086:	f7f1 f927 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 801308a:	6803      	ldr	r3, [r0, #0]
 801308c:	aa02      	add	r2, sp, #8
 801308e:	4669      	mov	r1, sp
 8013090:	695e      	ldr	r6, [r3, #20]
 8013092:	462b      	mov	r3, r5
 8013094:	47b0      	blx	r6
 8013096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801309a:	2800      	cmp	r0, #0
 801309c:	bf08      	it	eq
 801309e:	461d      	moveq	r5, r3
 80130a0:	84e5      	strh	r5, [r4, #38]	@ 0x26
 80130a2:	b004      	add	sp, #16
 80130a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080130a8 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80130a8:	2200      	movs	r2, #0
 80130aa:	8082      	strh	r2, [r0, #4]
 80130ac:	80c2      	strh	r2, [r0, #6]
 80130ae:	8102      	strh	r2, [r0, #8]
 80130b0:	8142      	strh	r2, [r0, #10]
 80130b2:	8182      	strh	r2, [r0, #12]
 80130b4:	81c2      	strh	r2, [r0, #14]
 80130b6:	8202      	strh	r2, [r0, #16]
 80130b8:	8242      	strh	r2, [r0, #18]
 80130ba:	61c2      	str	r2, [r0, #28]
 80130bc:	8402      	strh	r2, [r0, #32]
 80130be:	8442      	strh	r2, [r0, #34]	@ 0x22
 80130c0:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80130c4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80130c8:	2201      	movs	r2, #1
 80130ca:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 80130ce:	4a04      	ldr	r2, [pc, #16]	@ (80130e0 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 80130d0:	6002      	str	r2, [r0, #0]
 80130d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130d6:	84c2      	strh	r2, [r0, #38]	@ 0x26
 80130d8:	f880 2028 	strb.w	r2, [r0, #40]	@ 0x28
 80130dc:	4770      	bx	lr
 80130de:	bf00      	nop
 80130e0:	08029048 	.word	0x08029048

080130e4 <_ZN8touchgfx8TextArea8setWidthEs>:
 80130e4:	b530      	push	{r4, r5, lr}
 80130e6:	b085      	sub	sp, #20
 80130e8:	6803      	ldr	r3, [r0, #0]
 80130ea:	4604      	mov	r4, r0
 80130ec:	8101      	strh	r1, [r0, #8]
 80130ee:	466d      	mov	r5, sp
 80130f0:	4601      	mov	r1, r0
 80130f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80130f6:	343c      	adds	r4, #60	@ 0x3c
 80130f8:	4628      	mov	r0, r5
 80130fa:	4798      	blx	r3
 80130fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013104:	b005      	add	sp, #20
 8013106:	bd30      	pop	{r4, r5, pc}

08013108 <_ZN8touchgfx8TextArea9setHeightEs>:
 8013108:	b530      	push	{r4, r5, lr}
 801310a:	b085      	sub	sp, #20
 801310c:	6803      	ldr	r3, [r0, #0]
 801310e:	4604      	mov	r4, r0
 8013110:	8141      	strh	r1, [r0, #10]
 8013112:	466d      	mov	r5, sp
 8013114:	4601      	mov	r1, r0
 8013116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801311a:	343c      	adds	r4, #60	@ 0x3c
 801311c:	4628      	mov	r0, r5
 801311e:	4798      	blx	r3
 8013120:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013124:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013128:	b005      	add	sp, #20
 801312a:	bd30      	pop	{r4, r5, pc}

0801312c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801312c:	2200      	movs	r2, #0
 801312e:	8002      	strh	r2, [r0, #0]
 8013130:	8042      	strh	r2, [r0, #2]
 8013132:	8082      	strh	r2, [r0, #4]
 8013134:	80c2      	strh	r2, [r0, #6]
 8013136:	4770      	bx	lr

08013138 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8013138:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
 801313c:	4770      	bx	lr
	...

08013140 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8013140:	b570      	push	{r4, r5, r6, lr}
 8013142:	6803      	ldr	r3, [r0, #0]
 8013144:	4604      	mov	r4, r0
 8013146:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013148:	460d      	mov	r5, r1
 801314a:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 801314c:	4b08      	ldr	r3, [pc, #32]	@ (8013170 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013154:	4b07      	ldr	r3, [pc, #28]	@ (8013174 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801315c:	6803      	ldr	r3, [r0, #0]
 801315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013160:	4798      	blx	r3
 8013162:	1a29      	subs	r1, r5, r0
 8013164:	4633      	mov	r3, r6
 8013166:	4620      	mov	r0, r4
 8013168:	b209      	sxth	r1, r1
 801316a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801316e:	4718      	bx	r3
 8013170:	24026474 	.word	0x24026474
 8013174:	2402647c 	.word	0x2402647c

08013178 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8013178:	b570      	push	{r4, r5, r6, lr}
 801317a:	6803      	ldr	r3, [r0, #0]
 801317c:	4604      	mov	r4, r0
 801317e:	4615      	mov	r5, r2
 8013180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013182:	4798      	blx	r3
 8013184:	6823      	ldr	r3, [r4, #0]
 8013186:	4629      	mov	r1, r5
 8013188:	4620      	mov	r0, r4
 801318a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801318c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013190:	4718      	bx	r3

08013192 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013192:	2000      	movs	r0, #0
 8013194:	4770      	bx	lr

08013196 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8013196:	2000      	movs	r0, #0
 8013198:	4770      	bx	lr
	...

0801319c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801319c:	4b07      	ldr	r3, [pc, #28]	@ (80131bc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801319e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80131a0:	881b      	ldrh	r3, [r3, #0]
 80131a2:	4293      	cmp	r3, r2
 80131a4:	bf81      	itttt	hi
 80131a6:	4b06      	ldrhi	r3, [pc, #24]	@ (80131c0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80131a8:	681b      	ldrhi	r3, [r3, #0]
 80131aa:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80131ae:	7858      	ldrbhi	r0, [r3, #1]
 80131b0:	bf8c      	ite	hi
 80131b2:	f000 0003 	andhi.w	r0, r0, #3
 80131b6:	2000      	movls	r0, #0
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	24026478 	.word	0x24026478
 80131c0:	24026474 	.word	0x24026474

080131c4 <_ZN8touchgfx8TextAreaD1Ev>:
 80131c4:	4770      	bx	lr
	...

080131c8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80131c8:	4b11      	ldr	r3, [pc, #68]	@ (8013210 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80131ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131ce:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80131d0:	4604      	mov	r4, r0
 80131d2:	881b      	ldrh	r3, [r3, #0]
 80131d4:	428b      	cmp	r3, r1
 80131d6:	d918      	bls.n	801320a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80131d8:	6803      	ldr	r3, [r0, #0]
 80131da:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 80131dc:	4b0d      	ldr	r3, [pc, #52]	@ (8013214 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80131de:	6818      	ldr	r0, [r3, #0]
 80131e0:	f7f3 f9b2 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
 80131e4:	6823      	ldr	r3, [r4, #0]
 80131e6:	4606      	mov	r6, r0
 80131e8:	4620      	mov	r0, r4
 80131ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80131ec:	4798      	blx	r3
 80131ee:	6823      	ldr	r3, [r4, #0]
 80131f0:	4607      	mov	r7, r0
 80131f2:	4620      	mov	r0, r4
 80131f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80131f8:	4798      	blx	r3
 80131fa:	463a      	mov	r2, r7
 80131fc:	4603      	mov	r3, r0
 80131fe:	4631      	mov	r1, r6
 8013200:	4620      	mov	r0, r4
 8013202:	46ac      	mov	ip, r5
 8013204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013208:	4760      	bx	ip
 801320a:	2000      	movs	r0, #0
 801320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013210:	24026478 	.word	0x24026478
 8013214:	24026480 	.word	0x24026480

08013218 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013218:	4b18      	ldr	r3, [pc, #96]	@ (801327c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801321a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801321e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8013220:	4604      	mov	r4, r0
 8013222:	881b      	ldrh	r3, [r3, #0]
 8013224:	428b      	cmp	r3, r1
 8013226:	d926      	bls.n	8013276 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013228:	4b15      	ldr	r3, [pc, #84]	@ (8013280 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8013230:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013234:	4b13      	ldr	r3, [pc, #76]	@ (8013284 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013236:	7855      	ldrb	r5, [r2, #1]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801323e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013242:	6833      	ldr	r3, [r6, #0]
 8013244:	69df      	ldr	r7, [r3, #28]
 8013246:	4b10      	ldr	r3, [pc, #64]	@ (8013288 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013248:	6818      	ldr	r0, [r3, #0]
 801324a:	f7f3 f97d 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	4680      	mov	r8, r0
 8013252:	4620      	mov	r0, r4
 8013254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013256:	4798      	blx	r3
 8013258:	6823      	ldr	r3, [r4, #0]
 801325a:	4681      	mov	r9, r0
 801325c:	4620      	mov	r0, r4
 801325e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013262:	4798      	blx	r3
 8013264:	464b      	mov	r3, r9
 8013266:	9000      	str	r0, [sp, #0]
 8013268:	4642      	mov	r2, r8
 801326a:	4629      	mov	r1, r5
 801326c:	4630      	mov	r0, r6
 801326e:	47b8      	blx	r7
 8013270:	b003      	add	sp, #12
 8013272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013276:	2000      	movs	r0, #0
 8013278:	e7fa      	b.n	8013270 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801327a:	bf00      	nop
 801327c:	24026478 	.word	0x24026478
 8013280:	24026474 	.word	0x24026474
 8013284:	2402647c 	.word	0x2402647c
 8013288:	24026480 	.word	0x24026480

0801328c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801328c:	b40e      	push	{r1, r2, r3}
 801328e:	4b30      	ldr	r3, [pc, #192]	@ (8013350 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013294:	881a      	ldrh	r2, [r3, #0]
 8013296:	b09d      	sub	sp, #116	@ 0x74
 8013298:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801329a:	4604      	mov	r4, r0
 801329c:	429a      	cmp	r2, r3
 801329e:	d954      	bls.n	801334a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80132a0:	aa26      	add	r2, sp, #152	@ 0x98
 80132a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8013354 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80132a6:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8013358 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80132aa:	9202      	str	r2, [sp, #8]
 80132ac:	f8d9 2000 	ldr.w	r2, [r9]
 80132b0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80132b4:	f8d8 3000 	ldr.w	r3, [r8]
 80132b8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80132bc:	682b      	ldr	r3, [r5, #0]
 80132be:	4628      	mov	r0, r5
 80132c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132c2:	4798      	blx	r3
 80132c4:	4606      	mov	r6, r0
 80132c6:	b207      	sxth	r7, r0
 80132c8:	a803      	add	r0, sp, #12
 80132ca:	f005 fae7 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 80132ce:	682b      	ldr	r3, [r5, #0]
 80132d0:	4628      	mov	r0, r5
 80132d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132d4:	4798      	blx	r3
 80132d6:	682b      	ldr	r3, [r5, #0]
 80132d8:	4682      	mov	sl, r0
 80132da:	4628      	mov	r0, r5
 80132dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80132de:	4798      	blx	r3
 80132e0:	4653      	mov	r3, sl
 80132e2:	9000      	str	r0, [sp, #0]
 80132e4:	a803      	add	r0, sp, #12
 80132e6:	9a02      	ldr	r2, [sp, #8]
 80132e8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80132ea:	f005 fb32 	bl	8018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80132ee:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80132f0:	f8d9 3000 	ldr.w	r3, [r9]
 80132f4:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 80132f8:	8925      	ldrh	r5, [r4, #8]
 80132fa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80132fe:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8013302:	eba5 050c 	sub.w	r5, r5, ip
 8013306:	784a      	ldrb	r2, [r1, #1]
 8013308:	f8d8 3000 	ldr.w	r3, [r8]
 801330c:	b22d      	sxth	r5, r5
 801330e:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8013312:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013316:	9500      	str	r5, [sp, #0]
 8013318:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801331c:	a803      	add	r0, sp, #12
 801331e:	f002 fcff 	bl	8015d20 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8013322:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8013326:	b203      	sxth	r3, r0
 8013328:	18b9      	adds	r1, r7, r2
 801332a:	2900      	cmp	r1, #0
 801332c:	dd0b      	ble.n	8013346 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801332e:	3b01      	subs	r3, #1
 8013330:	fb13 f302 	smulbb	r3, r3, r2
 8013334:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013338:	b21f      	sxth	r7, r3
 801333a:	4638      	mov	r0, r7
 801333c:	b01d      	add	sp, #116	@ 0x74
 801333e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013342:	b003      	add	sp, #12
 8013344:	4770      	bx	lr
 8013346:	2b00      	cmp	r3, #0
 8013348:	dcf7      	bgt.n	801333a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801334a:	2700      	movs	r7, #0
 801334c:	e7f5      	b.n	801333a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801334e:	bf00      	nop
 8013350:	24026478 	.word	0x24026478
 8013354:	24026474 	.word	0x24026474
 8013358:	2402647c 	.word	0x2402647c

0801335c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801335c:	4bbd      	ldr	r3, [pc, #756]	@ (8013654 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801335e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013362:	460c      	mov	r4, r1
 8013364:	881b      	ldrh	r3, [r3, #0]
 8013366:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8013368:	b0a9      	sub	sp, #164	@ 0xa4
 801336a:	4680      	mov	r8, r0
 801336c:	428b      	cmp	r3, r1
 801336e:	d809      	bhi.n	8013384 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8013370:	2300      	movs	r3, #0
 8013372:	f04f 32ff 	mov.w	r2, #4294967295
 8013376:	6083      	str	r3, [r0, #8]
 8013378:	e9c0 3200 	strd	r3, r2, [r0]
 801337c:	4640      	mov	r0, r8
 801337e:	b029      	add	sp, #164	@ 0xa4
 8013380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013384:	4eb4      	ldr	r6, [pc, #720]	@ (8013658 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8013386:	6833      	ldr	r3, [r6, #0]
 8013388:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801338c:	4bb3      	ldr	r3, [pc, #716]	@ (801365c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013394:	4bb2      	ldr	r3, [pc, #712]	@ (8013660 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013396:	6818      	ldr	r0, [r3, #0]
 8013398:	f7f3 f8d6 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
 801339c:	682b      	ldr	r3, [r5, #0]
 801339e:	4681      	mov	r9, r0
 80133a0:	4628      	mov	r0, r5
 80133a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133a4:	4798      	blx	r3
 80133a6:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 80133a8:	b203      	sxth	r3, r0
 80133aa:	4682      	mov	sl, r0
 80133ac:	4407      	add	r7, r0
 80133ae:	a80f      	add	r0, sp, #60	@ 0x3c
 80133b0:	9304      	str	r3, [sp, #16]
 80133b2:	b2bb      	uxth	r3, r7
 80133b4:	9303      	str	r3, [sp, #12]
 80133b6:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	f040 80a5 	bne.w	801350a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80133c0:	f005 fa6c 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 80133c4:	682b      	ldr	r3, [r5, #0]
 80133c6:	4628      	mov	r0, r5
 80133c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133ca:	4798      	blx	r3
 80133cc:	682b      	ldr	r3, [r5, #0]
 80133ce:	4606      	mov	r6, r0
 80133d0:	4628      	mov	r0, r5
 80133d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133d4:	4798      	blx	r3
 80133d6:	6823      	ldr	r3, [r4, #0]
 80133d8:	4607      	mov	r7, r0
 80133da:	4620      	mov	r0, r4
 80133dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133de:	4798      	blx	r3
 80133e0:	6823      	ldr	r3, [r4, #0]
 80133e2:	4683      	mov	fp, r0
 80133e4:	4620      	mov	r0, r4
 80133e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80133ea:	4798      	blx	r3
 80133ec:	463b      	mov	r3, r7
 80133ee:	4649      	mov	r1, r9
 80133f0:	4632      	mov	r2, r6
 80133f2:	2600      	movs	r6, #0
 80133f4:	e9cd b000 	strd	fp, r0, [sp]
 80133f8:	a80f      	add	r0, sp, #60	@ 0x3c
 80133fa:	4637      	mov	r7, r6
 80133fc:	f005 fabe 	bl	801897c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013400:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013404:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8013658 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8013408:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801340c:	bf0c      	ite	eq
 801340e:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8013412:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8013416:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013418:	4629      	mov	r1, r5
 801341a:	f8db 3000 	ldr.w	r3, [fp]
 801341e:	a80f      	add	r0, sp, #60	@ 0x3c
 8013420:	3701      	adds	r7, #1
 8013422:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013426:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801342a:	b2bf      	uxth	r7, r7
 801342c:	785b      	ldrb	r3, [r3, #1]
 801342e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013432:	f002 f97c 	bl	801572e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013436:	9b03      	ldr	r3, [sp, #12]
 8013438:	4286      	cmp	r6, r0
 801343a:	eba9 0903 	sub.w	r9, r9, r3
 801343e:	bfb8      	it	lt
 8013440:	4606      	movlt	r6, r0
 8013442:	a80f      	add	r0, sp, #60	@ 0x3c
 8013444:	fa0f f989 	sxth.w	r9, r9
 8013448:	b236      	sxth	r6, r6
 801344a:	f005 fa4e 	bl	80188ea <_ZN8touchgfx12TextProvider11endOfStringEv>
 801344e:	b918      	cbnz	r0, 8013458 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013450:	7a2b      	ldrb	r3, [r5, #8]
 8013452:	444b      	add	r3, r9
 8013454:	2b00      	cmp	r3, #0
 8013456:	dcde      	bgt.n	8013416 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8013458:	9b03      	ldr	r3, [sp, #12]
 801345a:	4620      	mov	r0, r4
 801345c:	9a04      	ldr	r2, [sp, #16]
 801345e:	fb13 f707 	smulbb	r7, r3, r7
 8013462:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013464:	f895 9009 	ldrb.w	r9, [r5, #9]
 8013468:	1aff      	subs	r7, r7, r3
 801346a:	b2bf      	uxth	r7, r7
 801346c:	b23b      	sxth	r3, r7
 801346e:	429a      	cmp	r2, r3
 8013470:	bfa8      	it	ge
 8013472:	4657      	movge	r7, sl
 8013474:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013478:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801347c:	6823      	ldr	r3, [r4, #0]
 801347e:	444f      	add	r7, r9
 8013480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013482:	bf08      	it	eq
 8013484:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013488:	fa1f f987 	uxth.w	r9, r7
 801348c:	bf18      	it	ne
 801348e:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8013492:	4798      	blx	r3
 8013494:	2801      	cmp	r0, #1
 8013496:	fa0f f789 	sxth.w	r7, r9
 801349a:	b2b3      	uxth	r3, r6
 801349c:	f000 80e2 	beq.w	8013664 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80134a0:	2802      	cmp	r0, #2
 80134a2:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 80134a6:	f000 80e3 	beq.w	8013670 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80134aa:	7aea      	ldrb	r2, [r5, #11]
 80134ac:	b236      	sxth	r6, r6
 80134ae:	7b2d      	ldrb	r5, [r5, #12]
 80134b0:	1ab6      	subs	r6, r6, r2
 80134b2:	442a      	add	r2, r5
 80134b4:	fa1f fa86 	uxth.w	sl, r6
 80134b8:	4413      	add	r3, r2
 80134ba:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80134be:	fa0f fb8a 	sxth.w	fp, sl
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	2a02      	cmp	r2, #2
 80134c6:	b21e      	sxth	r6, r3
 80134c8:	f000 80d6 	beq.w	8013678 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 80134cc:	2a03      	cmp	r2, #3
 80134ce:	f000 80de 	beq.w	801368e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 80134d2:	2a01      	cmp	r2, #1
 80134d4:	f040 80e6 	bne.w	80136a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 80134d8:	8925      	ldrh	r5, [r4, #8]
 80134da:	4633      	mov	r3, r6
 80134dc:	463e      	mov	r6, r7
 80134de:	eba5 0909 	sub.w	r9, r5, r9
 80134e2:	461f      	mov	r7, r3
 80134e4:	465d      	mov	r5, fp
 80134e6:	fa0f fb89 	sxth.w	fp, r9
 80134ea:	4b5d      	ldr	r3, [pc, #372]	@ (8013660 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80134ec:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80134ee:	6818      	ldr	r0, [r3, #0]
 80134f0:	f7f3 f82a 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
 80134f4:	f8a8 b000 	strh.w	fp, [r8]
 80134f8:	f8a8 5002 	strh.w	r5, [r8, #2]
 80134fc:	f8a8 6004 	strh.w	r6, [r8, #4]
 8013500:	f8a8 7006 	strh.w	r7, [r8, #6]
 8013504:	f8c8 0008 	str.w	r0, [r8, #8]
 8013508:	e738      	b.n	801337c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801350a:	f005 f9c7 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 801350e:	682b      	ldr	r3, [r5, #0]
 8013510:	4628      	mov	r0, r5
 8013512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013514:	4798      	blx	r3
 8013516:	682b      	ldr	r3, [r5, #0]
 8013518:	4607      	mov	r7, r0
 801351a:	4628      	mov	r0, r5
 801351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801351e:	4798      	blx	r3
 8013520:	6823      	ldr	r3, [r4, #0]
 8013522:	4683      	mov	fp, r0
 8013524:	4620      	mov	r0, r4
 8013526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013528:	4798      	blx	r3
 801352a:	6822      	ldr	r2, [r4, #0]
 801352c:	9005      	str	r0, [sp, #20]
 801352e:	4620      	mov	r0, r4
 8013530:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013534:	4790      	blx	r2
 8013536:	9b05      	ldr	r3, [sp, #20]
 8013538:	463a      	mov	r2, r7
 801353a:	4649      	mov	r1, r9
 801353c:	9001      	str	r0, [sp, #4]
 801353e:	a80f      	add	r0, sp, #60	@ 0x3c
 8013540:	9300      	str	r3, [sp, #0]
 8013542:	465b      	mov	r3, fp
 8013544:	f005 fa1a 	bl	801897c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013548:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801354c:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8013550:	af0f      	add	r7, sp, #60	@ 0x3c
 8013552:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013556:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801355a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801355c:	bf0a      	itet	eq
 801355e:	464a      	moveq	r2, r9
 8013560:	461a      	movne	r2, r3
 8013562:	4699      	moveq	r9, r3
 8013564:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8013568:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 801356c:	1ad2      	subs	r2, r2, r3
 801356e:	6833      	ldr	r3, [r6, #0]
 8013570:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8013574:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013578:	7859      	ldrb	r1, [r3, #1]
 801357a:	2300      	movs	r3, #0
 801357c:	9707      	str	r7, [sp, #28]
 801357e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013582:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013586:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801358a:	f88d 1020 	strb.w	r1, [sp, #32]
 801358e:	9509      	str	r5, [sp, #36]	@ 0x24
 8013590:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013594:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8013598:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 801359c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80135a0:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80135a4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80135a8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80135ac:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80135b0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80135b4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80135b8:	b350      	cbz	r0, 8013610 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80135ba:	682b      	ldr	r3, [r5, #0]
 80135bc:	4628      	mov	r0, r5
 80135be:	695b      	ldr	r3, [r3, #20]
 80135c0:	4798      	blx	r3
 80135c2:	4607      	mov	r7, r0
 80135c4:	b320      	cbz	r0, 8013610 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80135c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80135c8:	4639      	mov	r1, r7
 80135ca:	6803      	ldr	r3, [r0, #0]
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	4798      	blx	r3
 80135d0:	4606      	mov	r6, r0
 80135d2:	b1e8      	cbz	r0, 8013610 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80135d4:	7b43      	ldrb	r3, [r0, #13]
 80135d6:	7a82      	ldrb	r2, [r0, #10]
 80135d8:	005b      	lsls	r3, r3, #1
 80135da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80135de:	4313      	orrs	r3, r2
 80135e0:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80135e4:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80135e8:	2b06      	cmp	r3, #6
 80135ea:	d111      	bne.n	8013610 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80135ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80135ee:	4632      	mov	r2, r6
 80135f0:	4639      	mov	r1, r7
 80135f2:	6803      	ldr	r3, [r0, #0]
 80135f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135f6:	4798      	blx	r3
 80135f8:	7b73      	ldrb	r3, [r6, #13]
 80135fa:	005b      	lsls	r3, r3, #1
 80135fc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013600:	7ab3      	ldrb	r3, [r6, #10]
 8013602:	4313      	orrs	r3, r2
 8013604:	4418      	add	r0, r3
 8013606:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801360a:	4418      	add	r0, r3
 801360c:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8013610:	2600      	movs	r6, #0
 8013612:	4637      	mov	r7, r6
 8013614:	a806      	add	r0, sp, #24
 8013616:	3701      	adds	r7, #1
 8013618:	f002 fa7f 	bl	8015b1a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801361c:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8013620:	9b03      	ldr	r3, [sp, #12]
 8013622:	b2bf      	uxth	r7, r7
 8013624:	4286      	cmp	r6, r0
 8013626:	eba9 0903 	sub.w	r9, r9, r3
 801362a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801362e:	bfb8      	it	lt
 8013630:	4606      	movlt	r6, r0
 8013632:	fa0f f989 	sxth.w	r9, r9
 8013636:	b236      	sxth	r6, r6
 8013638:	2b00      	cmp	r3, #0
 801363a:	f43f af0d 	beq.w	8013458 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801363e:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8013642:	2b00      	cmp	r3, #0
 8013644:	f47f af08 	bne.w	8013458 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013648:	7a2b      	ldrb	r3, [r5, #8]
 801364a:	444b      	add	r3, r9
 801364c:	2b00      	cmp	r3, #0
 801364e:	dce1      	bgt.n	8013614 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8013650:	e702      	b.n	8013458 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013652:	bf00      	nop
 8013654:	24026478 	.word	0x24026478
 8013658:	24026474 	.word	0x24026474
 801365c:	2402647c 	.word	0x2402647c
 8013660:	24026480 	.word	0x24026480
 8013664:	ebaa 0606 	sub.w	r6, sl, r6
 8013668:	2002      	movs	r0, #2
 801366a:	fb96 f6f0 	sdiv	r6, r6, r0
 801366e:	e71c      	b.n	80134aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013670:	441e      	add	r6, r3
 8013672:	ebaa 0606 	sub.w	r6, sl, r6
 8013676:	e718      	b.n	80134aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013678:	8925      	ldrh	r5, [r4, #8]
 801367a:	1aed      	subs	r5, r5, r3
 801367c:	eba5 050a 	sub.w	r5, r5, sl
 8013680:	fa0f fb85 	sxth.w	fp, r5
 8013684:	8965      	ldrh	r5, [r4, #10]
 8013686:	eba5 0509 	sub.w	r5, r5, r9
 801368a:	b22d      	sxth	r5, r5
 801368c:	e72d      	b.n	80134ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801368e:	8965      	ldrh	r5, [r4, #10]
 8013690:	f04f 0b00 	mov.w	fp, #0
 8013694:	1aed      	subs	r5, r5, r3
 8013696:	4633      	mov	r3, r6
 8013698:	463e      	mov	r6, r7
 801369a:	eba5 050a 	sub.w	r5, r5, sl
 801369e:	461f      	mov	r7, r3
 80136a0:	b22d      	sxth	r5, r5
 80136a2:	e722      	b.n	80134ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80136a4:	2500      	movs	r5, #0
 80136a6:	e720      	b.n	80134ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

080136a8 <_ZN8touchgfx8TextAreaD0Ev>:
 80136a8:	b510      	push	{r4, lr}
 80136aa:	4604      	mov	r4, r0
 80136ac:	2148      	movs	r1, #72	@ 0x48
 80136ae:	f010 ffb4 	bl	802461a <_ZdlPvj>
 80136b2:	4620      	mov	r0, r4
 80136b4:	bd10      	pop	{r4, pc}
	...

080136b8 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80136b8:	b513      	push	{r0, r1, r4, lr}
 80136ba:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80136be:	4604      	mov	r4, r0
 80136c0:	b1fb      	cbz	r3, 8013702 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80136c2:	4b16      	ldr	r3, [pc, #88]	@ (801371c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80136c4:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80136c6:	881b      	ldrh	r3, [r3, #0]
 80136c8:	428b      	cmp	r3, r1
 80136ca:	d91a      	bls.n	8013702 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80136cc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	dd16      	ble.n	8013702 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80136d4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	dd12      	ble.n	8013702 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80136dc:	4b10      	ldr	r3, [pc, #64]	@ (8013720 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80136de:	6818      	ldr	r0, [r3, #0]
 80136e0:	f7f2 ff32 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
 80136e4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80136e8:	6822      	ldr	r2, [r4, #0]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	db06      	blt.n	80136fc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80136ee:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	db02      	blt.n	80136fc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80136f6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80136f8:	4298      	cmp	r0, r3
 80136fa:	d004      	beq.n	8013706 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80136fc:	6953      	ldr	r3, [r2, #20]
 80136fe:	4620      	mov	r0, r4
 8013700:	4798      	blx	r3
 8013702:	b002      	add	sp, #8
 8013704:	bd10      	pop	{r4, pc}
 8013706:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 801370a:	466b      	mov	r3, sp
 801370c:	6912      	ldr	r2, [r2, #16]
 801370e:	c903      	ldmia	r1, {r0, r1}
 8013710:	e883 0003 	stmia.w	r3, {r0, r1}
 8013714:	4619      	mov	r1, r3
 8013716:	4620      	mov	r0, r4
 8013718:	4790      	blx	r2
 801371a:	e7f2      	b.n	8013702 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801371c:	24026478 	.word	0x24026478
 8013720:	24026480 	.word	0x24026480

08013724 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013724:	4b45      	ldr	r3, [pc, #276]	@ (801383c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801372a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801372c:	b08e      	sub	sp, #56	@ 0x38
 801372e:	881b      	ldrh	r3, [r3, #0]
 8013730:	4604      	mov	r4, r0
 8013732:	4293      	cmp	r3, r2
 8013734:	d97e      	bls.n	8013834 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013736:	6808      	ldr	r0, [r1, #0]
 8013738:	ab05      	add	r3, sp, #20
 801373a:	6849      	ldr	r1, [r1, #4]
 801373c:	4d40      	ldr	r5, [pc, #256]	@ (8013840 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801373e:	c303      	stmia	r3!, {r0, r1}
 8013740:	4611      	mov	r1, r2
 8013742:	6828      	ldr	r0, [r5, #0]
 8013744:	f7f2 ff00 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
 8013748:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 801374c:	2b00      	cmp	r3, #0
 801374e:	db11      	blt.n	8013774 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013750:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8013754:	2b00      	cmp	r3, #0
 8013756:	db0d      	blt.n	8013774 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013758:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801375a:	4298      	cmp	r0, r3
 801375c:	d10a      	bne.n	8013774 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801375e:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8013762:	ab09      	add	r3, sp, #36	@ 0x24
 8013764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013768:	e883 0003 	stmia.w	r3, {r0, r1}
 801376c:	4619      	mov	r1, r3
 801376e:	a805      	add	r0, sp, #20
 8013770:	f7fd f838 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 8013774:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013778:	2b00      	cmp	r3, #0
 801377a:	dd5b      	ble.n	8013834 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801377c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013780:	2b00      	cmp	r3, #0
 8013782:	dd57      	ble.n	8013834 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013784:	4f2f      	ldr	r7, [pc, #188]	@ (8013844 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013786:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801378e:	4b2e      	ldr	r3, [pc, #184]	@ (8013848 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013796:	2e00      	cmp	r6, #0
 8013798:	d04c      	beq.n	8013834 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	4620      	mov	r0, r4
 801379e:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 80137a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137a4:	4798      	blx	r3
 80137a6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 80137ae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80137b2:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 80137b6:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80137ba:	785b      	ldrb	r3, [r3, #1]
 80137bc:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 80137c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80137c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80137c6:	9609      	str	r6, [sp, #36]	@ 0x24
 80137c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80137cc:	4b1f      	ldr	r3, [pc, #124]	@ (801384c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80137ce:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80137d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80137da:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80137de:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80137e2:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80137e6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80137ea:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80137ee:	b10a      	cbz	r2, 80137f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80137f0:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80137f2:	b906      	cbnz	r6, 80137f6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80137f4:	689e      	ldr	r6, [r3, #8]
 80137f6:	af07      	add	r7, sp, #28
 80137f8:	4621      	mov	r1, r4
 80137fa:	4638      	mov	r0, r7
 80137fc:	f004 f880 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013800:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8013802:	6828      	ldr	r0, [r5, #0]
 8013804:	f7f2 fea0 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
 8013808:	6823      	ldr	r3, [r4, #0]
 801380a:	4605      	mov	r5, r0
 801380c:	4620      	mov	r0, r4
 801380e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013810:	4798      	blx	r3
 8013812:	6823      	ldr	r3, [r4, #0]
 8013814:	4680      	mov	r8, r0
 8013816:	4620      	mov	r0, r4
 8013818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801381c:	4798      	blx	r3
 801381e:	ab09      	add	r3, sp, #36	@ 0x24
 8013820:	9501      	str	r5, [sp, #4]
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	ab05      	add	r3, sp, #20
 8013826:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801382a:	4630      	mov	r0, r6
 801382c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013830:	f7f2 fe3c 	bl	80064ac <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013834:	b00e      	add	sp, #56	@ 0x38
 8013836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801383a:	bf00      	nop
 801383c:	24026478 	.word	0x24026478
 8013840:	24026480 	.word	0x24026480
 8013844:	24026474 	.word	0x24026474
 8013848:	2402647c 	.word	0x2402647c
 801384c:	2402641c 	.word	0x2402641c

08013850 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013850:	b538      	push	{r3, r4, r5, lr}
 8013852:	4b0e      	ldr	r3, [pc, #56]	@ (801388c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013854:	4604      	mov	r4, r0
 8013856:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013858:	881b      	ldrh	r3, [r3, #0]
 801385a:	429a      	cmp	r2, r3
 801385c:	d214      	bcs.n	8013888 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801385e:	6803      	ldr	r3, [r0, #0]
 8013860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013862:	4798      	blx	r3
 8013864:	6823      	ldr	r3, [r4, #0]
 8013866:	4605      	mov	r5, r0
 8013868:	4620      	mov	r0, r4
 801386a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801386c:	4798      	blx	r3
 801386e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013872:	b22d      	sxth	r5, r5
 8013874:	4601      	mov	r1, r0
 8013876:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801387a:	bf06      	itte	eq
 801387c:	4602      	moveq	r2, r0
 801387e:	4629      	moveq	r1, r5
 8013880:	462a      	movne	r2, r5
 8013882:	4620      	mov	r0, r4
 8013884:	f7fc fd90 	bl	80103a8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013888:	bd38      	pop	{r3, r4, r5, pc}
 801388a:	bf00      	nop
 801388c:	24026478 	.word	0x24026478

08013890 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013890:	b530      	push	{r4, r5, lr}
 8013892:	888b      	ldrh	r3, [r1, #4]
 8013894:	b085      	sub	sp, #20
 8013896:	4604      	mov	r4, r0
 8013898:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801389a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801389e:	b923      	cbnz	r3, 80138aa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80138a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80138a4:	b90b      	cbnz	r3, 80138aa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80138a6:	f7ff ffd3 	bl	8013850 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80138aa:	6823      	ldr	r3, [r4, #0]
 80138ac:	466d      	mov	r5, sp
 80138ae:	4621      	mov	r1, r4
 80138b0:	343c      	adds	r4, #60	@ 0x3c
 80138b2:	4628      	mov	r0, r5
 80138b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80138b8:	4798      	blx	r3
 80138ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80138be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80138c2:	b005      	add	sp, #20
 80138c4:	bd30      	pop	{r4, r5, pc}

080138c6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80138c6:	2300      	movs	r3, #0
 80138c8:	8083      	strh	r3, [r0, #4]
 80138ca:	80c3      	strh	r3, [r0, #6]
 80138cc:	8003      	strh	r3, [r0, #0]
 80138ce:	8043      	strh	r3, [r0, #2]
 80138d0:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80138d4:	2bff      	cmp	r3, #255	@ 0xff
 80138d6:	bf01      	itttt	eq
 80138d8:	890b      	ldrheq	r3, [r1, #8]
 80138da:	8083      	strheq	r3, [r0, #4]
 80138dc:	894b      	ldrheq	r3, [r1, #10]
 80138de:	80c3      	strheq	r3, [r0, #6]
 80138e0:	4770      	bx	lr
	...

080138e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80138e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138e6:	4604      	mov	r4, r0
 80138e8:	466b      	mov	r3, sp
 80138ea:	6808      	ldr	r0, [r1, #0]
 80138ec:	6849      	ldr	r1, [r1, #4]
 80138ee:	c303      	stmia	r3!, {r0, r1}
 80138f0:	6823      	ldr	r3, [r4, #0]
 80138f2:	4669      	mov	r1, sp
 80138f4:	4620      	mov	r0, r4
 80138f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138f8:	4798      	blx	r3
 80138fa:	4b08      	ldr	r3, [pc, #32]	@ (801391c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013902:	b10a      	cbz	r2, 8013908 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013904:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013906:	b900      	cbnz	r0, 801390a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013908:	6898      	ldr	r0, [r3, #8]
 801390a:	6803      	ldr	r3, [r0, #0]
 801390c:	4669      	mov	r1, sp
 801390e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8013910:	6a1d      	ldr	r5, [r3, #32]
 8013912:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8013916:	47a8      	blx	r5
 8013918:	b003      	add	sp, #12
 801391a:	bd30      	pop	{r4, r5, pc}
 801391c:	2402641c 	.word	0x2402641c

08013920 <_ZN8touchgfx3BoxD1Ev>:
 8013920:	4770      	bx	lr

08013922 <_ZN8touchgfx3BoxD0Ev>:
 8013922:	b510      	push	{r4, lr}
 8013924:	4604      	mov	r4, r0
 8013926:	212c      	movs	r1, #44	@ 0x2c
 8013928:	f010 fe77 	bl	802461a <_ZdlPvj>
 801392c:	4620      	mov	r0, r4
 801392e:	bd10      	pop	{r4, pc}

08013930 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013930:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8013934:	b12a      	cbz	r2, 8013942 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013936:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801393a:	b112      	cbz	r2, 8013942 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801393c:	6803      	ldr	r3, [r0, #0]
 801393e:	695b      	ldr	r3, [r3, #20]
 8013940:	4718      	bx	r3
 8013942:	4770      	bx	lr

08013944 <_ZN8touchgfx6ButtonD1Ev>:
 8013944:	4770      	bx	lr

08013946 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013946:	b570      	push	{r4, r5, r6, lr}
 8013948:	880b      	ldrh	r3, [r1, #0]
 801394a:	4605      	mov	r5, r0
 801394c:	4604      	mov	r4, r0
 801394e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8013950:	8813      	ldrh	r3, [r2, #0]
 8013952:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013956:	4628      	mov	r0, r5
 8013958:	f006 f89c 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801395c:	4606      	mov	r6, r0
 801395e:	4628      	mov	r0, r5
 8013960:	f006 f8cc 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013964:	6823      	ldr	r3, [r4, #0]
 8013966:	4605      	mov	r5, r0
 8013968:	4631      	mov	r1, r6
 801396a:	4620      	mov	r0, r4
 801396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801396e:	4798      	blx	r3
 8013970:	6823      	ldr	r3, [r4, #0]
 8013972:	4629      	mov	r1, r5
 8013974:	4620      	mov	r0, r4
 8013976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801397c:	4718      	bx	r3

0801397e <_ZN8touchgfx6ButtonD0Ev>:
 801397e:	b510      	push	{r4, lr}
 8013980:	4604      	mov	r4, r0
 8013982:	2134      	movs	r1, #52	@ 0x34
 8013984:	f010 fe49 	bl	802461a <_ZdlPvj>
 8013988:	4620      	mov	r0, r4
 801398a:	bd10      	pop	{r4, pc}

0801398c <_ZNK8touchgfx6Button12getSolidRectEv>:
 801398c:	b510      	push	{r4, lr}
 801398e:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8013992:	4604      	mov	r4, r0
 8013994:	2bff      	cmp	r3, #255	@ 0xff
 8013996:	d006      	beq.n	80139a6 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8013998:	2300      	movs	r3, #0
 801399a:	8003      	strh	r3, [r0, #0]
 801399c:	8043      	strh	r3, [r0, #2]
 801399e:	8083      	strh	r3, [r0, #4]
 80139a0:	80c3      	strh	r3, [r0, #6]
 80139a2:	4620      	mov	r0, r4
 80139a4:	bd10      	pop	{r4, pc}
 80139a6:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80139aa:	b11b      	cbz	r3, 80139b4 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80139ac:	3130      	adds	r1, #48	@ 0x30
 80139ae:	f006 f8d9 	bl	8019b64 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80139b2:	e7f6      	b.n	80139a2 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80139b4:	312e      	adds	r1, #46	@ 0x2e
 80139b6:	e7fa      	b.n	80139ae <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080139b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80139b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139bc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80139c0:	b08a      	sub	sp, #40	@ 0x28
 80139c2:	4604      	mov	r4, r0
 80139c4:	4688      	mov	r8, r1
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d066      	beq.n	8013a98 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80139ca:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80139cc:	a805      	add	r0, sp, #20
 80139ce:	f8ad 3014 	strh.w	r3, [sp, #20]
 80139d2:	f006 f85f 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80139d6:	4607      	mov	r7, r0
 80139d8:	a805      	add	r0, sp, #20
 80139da:	f006 f88f 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80139de:	f9b8 6000 	ldrsh.w	r6, [r8]
 80139e2:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80139e6:	2300      	movs	r3, #0
 80139e8:	4432      	add	r2, r6
 80139ea:	9306      	str	r3, [sp, #24]
 80139ec:	b292      	uxth	r2, r2
 80139ee:	fa0f fc82 	sxth.w	ip, r2
 80139f2:	459c      	cmp	ip, r3
 80139f4:	dd52      	ble.n	8013a9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80139f6:	42b7      	cmp	r7, r6
 80139f8:	dd50      	ble.n	8013a9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80139fa:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80139fe:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013a02:	442b      	add	r3, r5
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	b219      	sxth	r1, r3
 8013a08:	2900      	cmp	r1, #0
 8013a0a:	dd47      	ble.n	8013a9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013a0c:	42a8      	cmp	r0, r5
 8013a0e:	dd45      	ble.n	8013a9c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013a10:	4567      	cmp	r7, ip
 8013a12:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8013a16:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8013a1a:	bfb8      	it	lt
 8013a1c:	b2ba      	uxthlt	r2, r7
 8013a1e:	4288      	cmp	r0, r1
 8013a20:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013a24:	bfb8      	it	lt
 8013a26:	b283      	uxthlt	r3, r0
 8013a28:	1b92      	subs	r2, r2, r6
 8013a2a:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013a2e:	1b5b      	subs	r3, r3, r5
 8013a30:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013a34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013a38:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013a3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d026      	beq.n	8013a92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013a44:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	dd22      	ble.n	8013a92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013a4c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	dd1e      	ble.n	8013a92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013a54:	2300      	movs	r3, #0
 8013a56:	a908      	add	r1, sp, #32
 8013a58:	4620      	mov	r0, r4
 8013a5a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013a5e:	6823      	ldr	r3, [r4, #0]
 8013a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a62:	4798      	blx	r3
 8013a64:	4b0f      	ldr	r3, [pc, #60]	@ (8013aa4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013a6c:	b10a      	cbz	r2, 8013a72 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8013a6e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013a70:	b900      	cbnz	r0, 8013a74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8013a72:	6898      	ldr	r0, [r3, #8]
 8013a74:	2501      	movs	r5, #1
 8013a76:	6801      	ldr	r1, [r0, #0]
 8013a78:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8013a7c:	9502      	str	r5, [sp, #8]
 8013a7e:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8013a82:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013a86:	9401      	str	r4, [sp, #4]
 8013a88:	ac06      	add	r4, sp, #24
 8013a8a:	9400      	str	r4, [sp, #0]
 8013a8c:	688c      	ldr	r4, [r1, #8]
 8013a8e:	a905      	add	r1, sp, #20
 8013a90:	47a0      	blx	r4
 8013a92:	b00a      	add	sp, #40	@ 0x28
 8013a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a98:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8013a9a:	e797      	b.n	80139cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	9307      	str	r3, [sp, #28]
 8013aa0:	e7ca      	b.n	8013a38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013aa2:	bf00      	nop
 8013aa4:	2402641c 	.word	0x2402641c

08013aa8 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013aa8:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8013aac:	b12a      	cbz	r2, 8013aba <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013aae:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013ab2:	b112      	cbz	r2, 8013aba <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013ab4:	6803      	ldr	r3, [r0, #0]
 8013ab6:	695b      	ldr	r3, [r3, #20]
 8013ab8:	4718      	bx	r3
 8013aba:	4770      	bx	lr

08013abc <_ZN8touchgfx5ImageD1Ev>:
 8013abc:	4770      	bx	lr

08013abe <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013abe:	b570      	push	{r4, r5, r6, lr}
 8013ac0:	880b      	ldrh	r3, [r1, #0]
 8013ac2:	460d      	mov	r5, r1
 8013ac4:	4604      	mov	r4, r0
 8013ac6:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8013ac8:	4608      	mov	r0, r1
 8013aca:	f005 ffe3 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013ace:	4606      	mov	r6, r0
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	f006 f813 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013ad6:	6823      	ldr	r3, [r4, #0]
 8013ad8:	4605      	mov	r5, r0
 8013ada:	4631      	mov	r1, r6
 8013adc:	4620      	mov	r0, r4
 8013ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ae0:	4798      	blx	r3
 8013ae2:	6823      	ldr	r3, [r4, #0]
 8013ae4:	4629      	mov	r1, r5
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013aee:	4718      	bx	r3

08013af0 <_ZN8touchgfx5ImageD0Ev>:
 8013af0:	b510      	push	{r4, lr}
 8013af2:	4604      	mov	r4, r0
 8013af4:	212c      	movs	r1, #44	@ 0x2c
 8013af6:	f010 fd90 	bl	802461a <_ZdlPvj>
 8013afa:	4620      	mov	r0, r4
 8013afc:	bd10      	pop	{r4, pc}

08013afe <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013afe:	b510      	push	{r4, lr}
 8013b00:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8013b04:	4604      	mov	r4, r0
 8013b06:	2bff      	cmp	r3, #255	@ 0xff
 8013b08:	d006      	beq.n	8013b18 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	8003      	strh	r3, [r0, #0]
 8013b0e:	8043      	strh	r3, [r0, #2]
 8013b10:	8083      	strh	r3, [r0, #4]
 8013b12:	80c3      	strh	r3, [r0, #6]
 8013b14:	4620      	mov	r0, r4
 8013b16:	bd10      	pop	{r4, pc}
 8013b18:	3126      	adds	r1, #38	@ 0x26
 8013b1a:	f006 f823 	bl	8019b64 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013b1e:	e7f9      	b.n	8013b14 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013b20 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013b20:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8013b24:	b12a      	cbz	r2, 8013b32 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013b26:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013b2a:	b112      	cbz	r2, 8013b32 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013b2c:	6803      	ldr	r3, [r0, #0]
 8013b2e:	695b      	ldr	r3, [r3, #20]
 8013b30:	4718      	bx	r3
 8013b32:	4770      	bx	lr

08013b34 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b38:	4604      	mov	r4, r0
 8013b3a:	b088      	sub	sp, #32
 8013b3c:	2500      	movs	r5, #0
 8013b3e:	460f      	mov	r7, r1
 8013b40:	f854 3b26 	ldr.w	r3, [r4], #38
 8013b44:	a904      	add	r1, sp, #16
 8013b46:	4606      	mov	r6, r0
 8013b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013b4e:	4798      	blx	r3
 8013b50:	4620      	mov	r0, r4
 8013b52:	f005 ff9f 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013b56:	4680      	mov	r8, r0
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f005 ffcf 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013b5e:	9506      	str	r5, [sp, #24]
 8013b60:	ad06      	add	r5, sp, #24
 8013b62:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013b66:	4639      	mov	r1, r7
 8013b68:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013b6c:	4628      	mov	r0, r5
 8013b6e:	f7fc fe39 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 8013b72:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	dd19      	ble.n	8013bae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013b7a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	dd15      	ble.n	8013bae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013b82:	4b0c      	ldr	r3, [pc, #48]	@ (8013bb4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013b8a:	b10a      	cbz	r2, 8013b90 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013b8c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013b8e:	b900      	cbnz	r0, 8013b92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013b90:	6898      	ldr	r0, [r3, #8]
 8013b92:	2701      	movs	r7, #1
 8013b94:	6801      	ldr	r1, [r0, #0]
 8013b96:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8013b9a:	9702      	str	r7, [sp, #8]
 8013b9c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8013ba0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013ba4:	e9cd 5600 	strd	r5, r6, [sp]
 8013ba8:	688d      	ldr	r5, [r1, #8]
 8013baa:	4621      	mov	r1, r4
 8013bac:	47a8      	blx	r5
 8013bae:	b008      	add	sp, #32
 8013bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bb4:	2402641c 	.word	0x2402641c

08013bb8 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8013bb8:	4770      	bx	lr

08013bba <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8013bba:	b510      	push	{r4, lr}
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	2148      	movs	r1, #72	@ 0x48
 8013bc0:	f010 fd2b 	bl	802461a <_ZdlPvj>
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	bd10      	pop	{r4, pc}

08013bc8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8013bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bcc:	b08d      	sub	sp, #52	@ 0x34
 8013bce:	4604      	mov	r4, r0
 8013bd0:	460f      	mov	r7, r1
 8013bd2:	f7ff fef1 	bl	80139b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8013bd6:	4a55      	ldr	r2, [pc, #340]	@ (8013d2c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8013bd8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8013bda:	8812      	ldrh	r2, [r2, #0]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	f240 8082 	bls.w	8013ce6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8013be2:	4d53      	ldr	r5, [pc, #332]	@ (8013d30 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8013be4:	682a      	ldr	r2, [r5, #0]
 8013be6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013bea:	4b52      	ldr	r3, [pc, #328]	@ (8013d34 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8013bf8:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013bfc:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8013c00:	2a03      	cmp	r2, #3
 8013c02:	d811      	bhi.n	8013c28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8013c04:	e8df f002 	tbb	[pc, r2]
 8013c08:	89727902 	.word	0x89727902
 8013c0c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8013c10:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013c14:	1ad2      	subs	r2, r2, r3
 8013c16:	2002      	movs	r0, #2
 8013c18:	f8ad 1010 	strh.w	r1, [sp, #16]
 8013c1c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013c20:	fb92 f2f0 	sdiv	r2, r2, r0
 8013c24:	f8ad 200e 	strh.w	r2, [sp, #14]
 8013c28:	f10d 080c 	add.w	r8, sp, #12
 8013c2c:	f10d 0914 	add.w	r9, sp, #20
 8013c30:	e898 0003 	ldmia.w	r8, {r0, r1}
 8013c34:	e889 0003 	stmia.w	r9, {r0, r1}
 8013c38:	4639      	mov	r1, r7
 8013c3a:	4648      	mov	r0, r9
 8013c3c:	f7fc fdd2 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 8013c40:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	dd4e      	ble.n	8013ce6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8013c48:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	dd4a      	ble.n	8013ce6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8013c50:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8013c54:	4641      	mov	r1, r8
 8013c56:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	1a9b      	subs	r3, r3, r2
 8013c5e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8013c62:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013c66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013c6a:	1a9b      	subs	r3, r3, r2
 8013c6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013c70:	6823      	ldr	r3, [r4, #0]
 8013c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c74:	4798      	blx	r3
 8013c76:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d053      	beq.n	8013d26 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8013c7e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8013c80:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8013c82:	682b      	ldr	r3, [r5, #0]
 8013c84:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8013c88:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013c8c:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8013c90:	785b      	ldrb	r3, [r3, #1]
 8013c92:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c94:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8013c98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013c9c:	9607      	str	r6, [sp, #28]
 8013c9e:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	f88d 5020 	strb.w	r5, [sp, #32]
 8013ca8:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8013cac:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8013cb0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013cb4:	4b20      	ldr	r3, [pc, #128]	@ (8013d38 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8013cb6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8013cc0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013cc4:	b10a      	cbz	r2, 8013cca <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8013cc6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013cc8:	b904      	cbnz	r4, 8013ccc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8013cca:	689c      	ldr	r4, [r3, #8]
 8013ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8013d3c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8013cce:	6818      	ldr	r0, [r3, #0]
 8013cd0:	f7f2 fc3a 	bl	8006548 <_ZNK8touchgfx5Texts7getTextEt>
 8013cd4:	ab07      	add	r3, sp, #28
 8013cd6:	9001      	str	r0, [sp, #4]
 8013cd8:	4620      	mov	r0, r4
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	464b      	mov	r3, r9
 8013cde:	e898 0006 	ldmia.w	r8, {r1, r2}
 8013ce2:	f7f2 fbe3 	bl	80064ac <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013ce6:	b00d      	add	sp, #52	@ 0x34
 8013ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cec:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8013cf0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013cf4:	1ad2      	subs	r2, r2, r3
 8013cf6:	3201      	adds	r2, #1
 8013cf8:	e78d      	b.n	8013c16 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8013cfa:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8013cfe:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8013d02:	1ad2      	subs	r2, r2, r3
 8013d04:	3201      	adds	r2, #1
 8013d06:	2002      	movs	r0, #2
 8013d08:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013d0c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013d10:	fb92 f2f0 	sdiv	r2, r2, r0
 8013d14:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013d18:	e786      	b.n	8013c28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8013d1a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8013d1e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8013d22:	1ad2      	subs	r2, r2, r3
 8013d24:	e7ef      	b.n	8013d06 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 8013d26:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8013d28:	e7aa      	b.n	8013c80 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 8013d2a:	bf00      	nop
 8013d2c:	24026478 	.word	0x24026478
 8013d30:	24026474 	.word	0x24026474
 8013d34:	2402647c 	.word	0x2402647c
 8013d38:	2402641c 	.word	0x2402641c
 8013d3c:	24026480 	.word	0x24026480

08013d40 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8013d40:	2101      	movs	r1, #1
 8013d42:	2200      	movs	r2, #0
 8013d44:	b510      	push	{r4, lr}
 8013d46:	4c13      	ldr	r4, [pc, #76]	@ (8013d94 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8013d48:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8013d4c:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8013d50:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013d54:	6004      	str	r4, [r0, #0]
 8013d56:	4c10      	ldr	r4, [pc, #64]	@ (8013d98 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8013d58:	8082      	strh	r2, [r0, #4]
 8013d5a:	80c2      	strh	r2, [r0, #6]
 8013d5c:	8102      	strh	r2, [r0, #8]
 8013d5e:	8142      	strh	r2, [r0, #10]
 8013d60:	8182      	strh	r2, [r0, #12]
 8013d62:	81c2      	strh	r2, [r0, #14]
 8013d64:	8202      	strh	r2, [r0, #16]
 8013d66:	8242      	strh	r2, [r0, #18]
 8013d68:	61c2      	str	r2, [r0, #28]
 8013d6a:	8402      	strh	r2, [r0, #32]
 8013d6c:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013d6e:	6282      	str	r2, [r0, #40]	@ 0x28
 8013d70:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8013d74:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8013d76:	8601      	strh	r1, [r0, #48]	@ 0x30
 8013d78:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8013d7c:	6344      	str	r4, [r0, #52]	@ 0x34
 8013d7e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8013d80:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8013d84:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8013d88:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013d8c:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8013d90:	bd10      	pop	{r4, pc}
 8013d92:	bf00      	nop
 8013d94:	08029290 	.word	0x08029290
 8013d98:	08027a80 	.word	0x08027a80

08013d9c <_ZN8touchgfx11RadioButtonD1Ev>:
 8013d9c:	4770      	bx	lr

08013d9e <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8013d9e:	b570      	push	{r4, r5, r6, lr}
 8013da0:	8809      	ldrh	r1, [r1, #0]
 8013da2:	f100 052e 	add.w	r5, r0, #46	@ 0x2e
 8013da6:	4604      	mov	r4, r0
 8013da8:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8013daa:	8812      	ldrh	r2, [r2, #0]
 8013dac:	8602      	strh	r2, [r0, #48]	@ 0x30
 8013dae:	881b      	ldrh	r3, [r3, #0]
 8013db0:	8643      	strh	r3, [r0, #50]	@ 0x32
 8013db2:	9b04      	ldr	r3, [sp, #16]
 8013db4:	881b      	ldrh	r3, [r3, #0]
 8013db6:	8683      	strh	r3, [r0, #52]	@ 0x34
 8013db8:	4628      	mov	r0, r5
 8013dba:	f005 fe6b 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013dbe:	4606      	mov	r6, r0
 8013dc0:	4628      	mov	r0, r5
 8013dc2:	f005 fe9b 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013dc6:	6823      	ldr	r3, [r4, #0]
 8013dc8:	4605      	mov	r5, r0
 8013dca:	4631      	mov	r1, r6
 8013dcc:	4620      	mov	r0, r4
 8013dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dd0:	4798      	blx	r3
 8013dd2:	6823      	ldr	r3, [r4, #0]
 8013dd4:	4629      	mov	r1, r5
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dde:	4718      	bx	r3

08013de0 <_ZN8touchgfx11RadioButtonD0Ev>:
 8013de0:	b510      	push	{r4, lr}
 8013de2:	4604      	mov	r4, r0
 8013de4:	2140      	movs	r1, #64	@ 0x40
 8013de6:	f010 fc18 	bl	802461a <_ZdlPvj>
 8013dea:	4620      	mov	r0, r4
 8013dec:	bd10      	pop	{r4, pc}

08013dee <_ZNK8touchgfx11RadioButton17invalidateContentEv>:
 8013dee:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 8013df2:	b12a      	cbz	r2, 8013e00 <_ZNK8touchgfx11RadioButton17invalidateContentEv+0x12>
 8013df4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013df8:	b112      	cbz	r2, 8013e00 <_ZNK8touchgfx11RadioButton17invalidateContentEv+0x12>
 8013dfa:	6803      	ldr	r3, [r0, #0]
 8013dfc:	695b      	ldr	r3, [r3, #20]
 8013dfe:	4718      	bx	r3
 8013e00:	4770      	bx	lr

08013e02 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>:
 8013e02:	f890 2037 	ldrb.w	r2, [r0, #55]	@ 0x37
 8013e06:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8013e0a:	b122      	cbz	r2, 8013e16 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x14>
 8013e0c:	b10b      	cbz	r3, 8013e12 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x10>
 8013e0e:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8013e10:	4770      	bx	lr
 8013e12:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
 8013e14:	4770      	bx	lr
 8013e16:	b10b      	cbz	r3, 8013e1c <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x1a>
 8013e18:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 8013e1a:	4770      	bx	lr
 8013e1c:	8dc0      	ldrh	r0, [r0, #46]	@ 0x2e
 8013e1e:	4770      	bx	lr

08013e20 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE>:
 8013e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e22:	b08b      	sub	sp, #44	@ 0x2c
 8013e24:	4604      	mov	r4, r0
 8013e26:	460e      	mov	r6, r1
 8013e28:	f7ff ffeb 	bl	8013e02 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 8013e2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013e30:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013e34:	b280      	uxth	r0, r0
 8013e36:	4298      	cmp	r0, r3
 8013e38:	d036      	beq.n	8013ea8 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 8013e3a:	2500      	movs	r5, #0
 8013e3c:	6823      	ldr	r3, [r4, #0]
 8013e3e:	a906      	add	r1, sp, #24
 8013e40:	4620      	mov	r0, r4
 8013e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e44:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8013e48:	4798      	blx	r3
 8013e4a:	a805      	add	r0, sp, #20
 8013e4c:	f005 fe22 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013e50:	4607      	mov	r7, r0
 8013e52:	a805      	add	r0, sp, #20
 8013e54:	f005 fe52 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013e58:	9508      	str	r5, [sp, #32]
 8013e5a:	ad08      	add	r5, sp, #32
 8013e5c:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8013e60:	4631      	mov	r1, r6
 8013e62:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 8013e66:	4628      	mov	r0, r5
 8013e68:	f7fc fcbc 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 8013e6c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	dd19      	ble.n	8013ea8 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 8013e74:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	dd15      	ble.n	8013ea8 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 8013e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8013eac <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x8c>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013e84:	b10a      	cbz	r2, 8013e8a <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x6a>
 8013e86:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013e88:	b900      	cbnz	r0, 8013e8c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x6c>
 8013e8a:	6898      	ldr	r0, [r3, #8]
 8013e8c:	2601      	movs	r6, #1
 8013e8e:	6801      	ldr	r1, [r0, #0]
 8013e90:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013e94:	9602      	str	r6, [sp, #8]
 8013e96:	f894 4036 	ldrb.w	r4, [r4, #54]	@ 0x36
 8013e9a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8013e9e:	e9cd 5400 	strd	r5, r4, [sp]
 8013ea2:	688c      	ldr	r4, [r1, #8]
 8013ea4:	a905      	add	r1, sp, #20
 8013ea6:	47a0      	blx	r4
 8013ea8:	b00b      	add	sp, #44	@ 0x2c
 8013eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eac:	2402641c 	.word	0x2402641c

08013eb0 <_ZNK8touchgfx11RadioButton12getSolidRectEv>:
 8013eb0:	b513      	push	{r0, r1, r4, lr}
 8013eb2:	f891 3036 	ldrb.w	r3, [r1, #54]	@ 0x36
 8013eb6:	4604      	mov	r4, r0
 8013eb8:	2bff      	cmp	r3, #255	@ 0xff
 8013eba:	d007      	beq.n	8013ecc <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x1c>
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	8003      	strh	r3, [r0, #0]
 8013ec0:	8043      	strh	r3, [r0, #2]
 8013ec2:	8083      	strh	r3, [r0, #4]
 8013ec4:	80c3      	strh	r3, [r0, #6]
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	b002      	add	sp, #8
 8013eca:	bd10      	pop	{r4, pc}
 8013ecc:	4608      	mov	r0, r1
 8013ece:	f7ff ff98 	bl	8013e02 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 8013ed2:	a902      	add	r1, sp, #8
 8013ed4:	f821 0d04 	strh.w	r0, [r1, #-4]!
 8013ed8:	4620      	mov	r0, r4
 8013eda:	f005 fe43 	bl	8019b64 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013ede:	e7f2      	b.n	8013ec6 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x16>

08013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>:
 8013ee0:	b510      	push	{r4, lr}
 8013ee2:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 8013ee6:	4604      	mov	r4, r0
 8013ee8:	f880 1037 	strb.w	r1, [r0, #55]	@ 0x37
 8013eec:	b18b      	cbz	r3, 8013f12 <_ZN8touchgfx11RadioButton11setSelectedEb+0x32>
 8013eee:	b951      	cbnz	r1, 8013f06 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8013ef0:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8013ef2:	b140      	cbz	r0, 8013f06 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8013ef4:	6803      	ldr	r3, [r0, #0]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	4798      	blx	r3
 8013efa:	b120      	cbz	r0, 8013f06 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8013efc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013efe:	4621      	mov	r1, r4
 8013f00:	6803      	ldr	r3, [r0, #0]
 8013f02:	689b      	ldr	r3, [r3, #8]
 8013f04:	4798      	blx	r3
 8013f06:	6823      	ldr	r3, [r4, #0]
 8013f08:	4620      	mov	r0, r4
 8013f0a:	695b      	ldr	r3, [r3, #20]
 8013f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f10:	4718      	bx	r3
 8013f12:	2900      	cmp	r1, #0
 8013f14:	d0f7      	beq.n	8013f06 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8013f16:	6823      	ldr	r3, [r4, #0]
 8013f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013f1a:	4798      	blx	r3
 8013f1c:	e7f3      	b.n	8013f06 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>

08013f1e <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE>:
 8013f1e:	b570      	push	{r4, r5, r6, lr}
 8013f20:	790b      	ldrb	r3, [r1, #4]
 8013f22:	4604      	mov	r4, r0
 8013f24:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013f28:	460e      	mov	r6, r1
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	bf0c      	ite	eq
 8013f2e:	2301      	moveq	r3, #1
 8013f30:	2300      	movne	r3, #0
 8013f32:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8013f36:	d10f      	bne.n	8013f58 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3a>
 8013f38:	b17d      	cbz	r5, 8013f5a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013f3a:	7931      	ldrb	r1, [r6, #4]
 8013f3c:	2901      	cmp	r1, #1
 8013f3e:	d112      	bne.n	8013f66 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8013f40:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8013f44:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8013f48:	b172      	cbz	r2, 8013f68 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8013f4a:	f083 0101 	eor.w	r1, r3, #1
 8013f4e:	4620      	mov	r0, r4
 8013f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f54:	f7ff bfc4 	b.w	8013ee0 <_ZN8touchgfx11RadioButton11setSelectedEb>
 8013f58:	b12d      	cbz	r5, 8013f66 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8013f5a:	6823      	ldr	r3, [r4, #0]
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	695b      	ldr	r3, [r3, #20]
 8013f60:	4798      	blx	r3
 8013f62:	2d00      	cmp	r5, #0
 8013f64:	d1e9      	bne.n	8013f3a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8013f66:	bd70      	pop	{r4, r5, r6, pc}
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d1fc      	bne.n	8013f66 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8013f6c:	e7ef      	b.n	8013f4e <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x30>

08013f6e <_ZN8touchgfx7OutlineD1Ev>:
 8013f6e:	4770      	bx	lr

08013f70 <_ZN8touchgfx7OutlineD0Ev>:
 8013f70:	b510      	push	{r4, lr}
 8013f72:	4604      	mov	r4, r0
 8013f74:	2130      	movs	r1, #48	@ 0x30
 8013f76:	f010 fb50 	bl	802461a <_ZdlPvj>
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	bd10      	pop	{r4, pc}

08013f7e <_ZN8touchgfx7Outline5resetEv>:
 8013f7e:	b510      	push	{r4, lr}
 8013f80:	4604      	mov	r4, r0
 8013f82:	f000 fe71 	bl	8014c68 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8013f86:	60e0      	str	r0, [r4, #12]
 8013f88:	f000 fe74 	bl	8014c74 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8013f8c:	68e3      	ldr	r3, [r4, #12]
 8013f8e:	08c0      	lsrs	r0, r0, #3
 8013f90:	2200      	movs	r2, #0
 8013f92:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8013f96:	6123      	str	r3, [r4, #16]
 8013f98:	3801      	subs	r0, #1
 8013f9a:	60a2      	str	r2, [r4, #8]
 8013f9c:	6060      	str	r0, [r4, #4]
 8013f9e:	8019      	strh	r1, [r3, #0]
 8013fa0:	8059      	strh	r1, [r3, #2]
 8013fa2:	809a      	strh	r2, [r3, #4]
 8013fa4:	80da      	strh	r2, [r3, #6]
 8013fa6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013fa8:	f023 0301 	bic.w	r3, r3, #1
 8013fac:	f043 0302 	orr.w	r3, r3, #2
 8013fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8013fb2:	bd10      	pop	{r4, pc}

08013fb4 <_ZN8touchgfx7OutlineC1Ev>:
 8013fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8013fe0 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8013fb6:	b510      	push	{r4, lr}
 8013fb8:	6003      	str	r3, [r0, #0]
 8013fba:	2300      	movs	r3, #0
 8013fbc:	4604      	mov	r4, r0
 8013fbe:	6243      	str	r3, [r0, #36]	@ 0x24
 8013fc0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8013fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013fc8:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8013fcc:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8013fd0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013fd4:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8013fd8:	f7ff ffd1 	bl	8013f7e <_ZN8touchgfx7Outline5resetEv>
 8013fdc:	4620      	mov	r0, r4
 8013fde:	bd10      	pop	{r4, pc}
 8013fe0:	08029378 	.word	0x08029378

08013fe4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8013fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe8:	b093      	sub	sp, #76	@ 0x4c
 8013fea:	1156      	asrs	r6, r2, #5
 8013fec:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8013fee:	9305      	str	r3, [sp, #20]
 8013ff0:	1153      	asrs	r3, r2, #5
 8013ff2:	f004 051f 	and.w	r5, r4, #31
 8013ff6:	9303      	str	r3, [sp, #12]
 8013ff8:	1163      	asrs	r3, r4, #5
 8013ffa:	9504      	str	r5, [sp, #16]
 8013ffc:	1165      	asrs	r5, r4, #5
 8013ffe:	9306      	str	r3, [sp, #24]
 8014000:	f002 031f 	and.w	r3, r2, #31
 8014004:	42ae      	cmp	r6, r5
 8014006:	f040 80f4 	bne.w	80141f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801400a:	9c04      	ldr	r4, [sp, #16]
 801400c:	9a05      	ldr	r2, [sp, #20]
 801400e:	42a3      	cmp	r3, r4
 8014010:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8014014:	6902      	ldr	r2, [r0, #16]
 8014016:	d125      	bne.n	8014064 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8014018:	f9b2 3000 	ldrsh.w	r3, [r2]
 801401c:	459e      	cmp	lr, r3
 801401e:	d103      	bne.n	8014028 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8014020:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014024:	429e      	cmp	r6, r3
 8014026:	d035      	beq.n	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014028:	88d1      	ldrh	r1, [r2, #6]
 801402a:	8893      	ldrh	r3, [r2, #4]
 801402c:	430b      	orrs	r3, r1
 801402e:	d010      	beq.n	8014052 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014030:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014034:	2b00      	cmp	r3, #0
 8014036:	db0c      	blt.n	8014052 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014038:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801403a:	428b      	cmp	r3, r1
 801403c:	da09      	bge.n	8014052 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801403e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014042:	428b      	cmp	r3, r1
 8014044:	f103 0301 	add.w	r3, r3, #1
 8014048:	bf38      	it	cc
 801404a:	3208      	addcc	r2, #8
 801404c:	6083      	str	r3, [r0, #8]
 801404e:	bf38      	it	cc
 8014050:	6102      	strcc	r2, [r0, #16]
 8014052:	6903      	ldr	r3, [r0, #16]
 8014054:	9a03      	ldr	r2, [sp, #12]
 8014056:	f8a3 e000 	strh.w	lr, [r3]
 801405a:	805a      	strh	r2, [r3, #2]
 801405c:	2200      	movs	r2, #0
 801405e:	809a      	strh	r2, [r3, #4]
 8014060:	80da      	strh	r2, [r3, #6]
 8014062:	e017      	b.n	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014064:	9c05      	ldr	r4, [sp, #20]
 8014066:	114e      	asrs	r6, r1, #5
 8014068:	f001 0c1f 	and.w	ip, r1, #31
 801406c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8014070:	f004 041f 	and.w	r4, r4, #31
 8014074:	4576      	cmp	r6, lr
 8014076:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801407a:	9402      	str	r4, [sp, #8]
 801407c:	9c04      	ldr	r4, [sp, #16]
 801407e:	eba4 0403 	sub.w	r4, r4, r3
 8014082:	d10a      	bne.n	801409a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8014084:	9b02      	ldr	r3, [sp, #8]
 8014086:	44a0      	add	r8, r4
 8014088:	449c      	add	ip, r3
 801408a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801408e:	fb04 a40c 	mla	r4, r4, ip, sl
 8014092:	80d4      	strh	r4, [r2, #6]
 8014094:	b013      	add	sp, #76	@ 0x4c
 8014096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801409a:	9d05      	ldr	r5, [sp, #20]
 801409c:	1a69      	subs	r1, r5, r1
 801409e:	bf51      	iteee	pl
 80140a0:	f1cc 0520 	rsbpl	r5, ip, #32
 80140a4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80140a8:	4249      	negmi	r1, r1
 80140aa:	2500      	movmi	r5, #0
 80140ac:	bf5d      	ittte	pl
 80140ae:	436c      	mulpl	r4, r5
 80140b0:	2520      	movpl	r5, #32
 80140b2:	f04f 0901 	movpl.w	r9, #1
 80140b6:	f04f 39ff 	movmi.w	r9, #4294967295
 80140ba:	9501      	str	r5, [sp, #4]
 80140bc:	9f01      	ldr	r7, [sp, #4]
 80140be:	444e      	add	r6, r9
 80140c0:	fb94 f5f1 	sdiv	r5, r4, r1
 80140c4:	fb01 4415 	mls	r4, r1, r5, r4
 80140c8:	44bc      	add	ip, r7
 80140ca:	2c00      	cmp	r4, #0
 80140cc:	bfbc      	itt	lt
 80140ce:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80140d2:	1864      	addlt	r4, r4, r1
 80140d4:	44a8      	add	r8, r5
 80140d6:	fb05 ac0c 	mla	ip, r5, ip, sl
 80140da:	f8a2 8004 	strh.w	r8, [r2, #4]
 80140de:	f8a2 c006 	strh.w	ip, [r2, #6]
 80140e2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80140e6:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80140ea:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80140ee:	ea58 0202 	orrs.w	r2, r8, r2
 80140f2:	d011      	beq.n	8014118 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80140f4:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80140f8:	f1b8 0f00 	cmp.w	r8, #0
 80140fc:	db0c      	blt.n	8014118 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80140fe:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014100:	4590      	cmp	r8, r2
 8014102:	da09      	bge.n	8014118 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014104:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8014108:	4590      	cmp	r8, r2
 801410a:	bf3c      	itt	cc
 801410c:	f10c 0208 	addcc.w	r2, ip, #8
 8014110:	6102      	strcc	r2, [r0, #16]
 8014112:	f108 0201 	add.w	r2, r8, #1
 8014116:	6082      	str	r2, [r0, #8]
 8014118:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801411c:	2700      	movs	r7, #0
 801411e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014122:	45b6      	cmp	lr, r6
 8014124:	f8ac 6000 	strh.w	r6, [ip]
 8014128:	442b      	add	r3, r5
 801412a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801412e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014132:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014136:	d04b      	beq.n	80141d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8014138:	9f04      	ldr	r7, [sp, #16]
 801413a:	1a64      	subs	r4, r4, r1
 801413c:	f04f 0a00 	mov.w	sl, #0
 8014140:	1aff      	subs	r7, r7, r3
 8014142:	443d      	add	r5, r7
 8014144:	016d      	lsls	r5, r5, #5
 8014146:	fb95 f8f1 	sdiv	r8, r5, r1
 801414a:	fb01 5518 	mls	r5, r1, r8, r5
 801414e:	2d00      	cmp	r5, #0
 8014150:	bfbc      	itt	lt
 8014152:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014156:	186d      	addlt	r5, r5, r1
 8014158:	f108 0701 	add.w	r7, r8, #1
 801415c:	9703      	str	r7, [sp, #12]
 801415e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014162:	1964      	adds	r4, r4, r5
 8014164:	444e      	add	r6, r9
 8014166:	bf54      	ite	pl
 8014168:	9f03      	ldrpl	r7, [sp, #12]
 801416a:	4647      	movmi	r7, r8
 801416c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014170:	bf58      	it	pl
 8014172:	1a64      	subpl	r4, r4, r1
 8014174:	443b      	add	r3, r7
 8014176:	44bb      	add	fp, r7
 8014178:	f8ac b004 	strh.w	fp, [ip, #4]
 801417c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014180:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014184:	f8ac b006 	strh.w	fp, [ip, #6]
 8014188:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801418c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014190:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014194:	ea5b 0707 	orrs.w	r7, fp, r7
 8014198:	d011      	beq.n	80141be <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801419a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801419e:	f1bb 0f00 	cmp.w	fp, #0
 80141a2:	db0c      	blt.n	80141be <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80141a4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80141a6:	45bb      	cmp	fp, r7
 80141a8:	da09      	bge.n	80141be <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80141aa:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80141ae:	45bb      	cmp	fp, r7
 80141b0:	bf3c      	itt	cc
 80141b2:	f10c 0708 	addcc.w	r7, ip, #8
 80141b6:	6107      	strcc	r7, [r0, #16]
 80141b8:	f10b 0701 	add.w	r7, fp, #1
 80141bc:	6087      	str	r7, [r0, #8]
 80141be:	6907      	ldr	r7, [r0, #16]
 80141c0:	45b6      	cmp	lr, r6
 80141c2:	803e      	strh	r6, [r7, #0]
 80141c4:	807a      	strh	r2, [r7, #2]
 80141c6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80141ca:	f8a7 a006 	strh.w	sl, [r7, #6]
 80141ce:	d1c6      	bne.n	801415e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80141d0:	9a04      	ldr	r2, [sp, #16]
 80141d2:	1ad3      	subs	r3, r2, r3
 80141d4:	6902      	ldr	r2, [r0, #16]
 80141d6:	8891      	ldrh	r1, [r2, #4]
 80141d8:	88d6      	ldrh	r6, [r2, #6]
 80141da:	4419      	add	r1, r3
 80141dc:	8091      	strh	r1, [r2, #4]
 80141de:	9902      	ldr	r1, [sp, #8]
 80141e0:	f101 0c20 	add.w	ip, r1, #32
 80141e4:	9901      	ldr	r1, [sp, #4]
 80141e6:	ebac 0c01 	sub.w	ip, ip, r1
 80141ea:	fb03 630c 	mla	r3, r3, ip, r6
 80141ee:	80d3      	strh	r3, [r2, #6]
 80141f0:	e750      	b.n	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80141f2:	9d05      	ldr	r5, [sp, #20]
 80141f4:	1aa2      	subs	r2, r4, r2
 80141f6:	eba5 0501 	sub.w	r5, r5, r1
 80141fa:	9202      	str	r2, [sp, #8]
 80141fc:	9508      	str	r5, [sp, #32]
 80141fe:	f140 8128 	bpl.w	8014452 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8014202:	9a03      	ldr	r2, [sp, #12]
 8014204:	2a00      	cmp	r2, #0
 8014206:	f6ff af45 	blt.w	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801420a:	9a02      	ldr	r2, [sp, #8]
 801420c:	f04f 34ff 	mov.w	r4, #4294967295
 8014210:	4252      	negs	r2, r2
 8014212:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014214:	2400      	movs	r4, #0
 8014216:	9202      	str	r2, [sp, #8]
 8014218:	9a06      	ldr	r2, [sp, #24]
 801421a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801421e:	9206      	str	r2, [sp, #24]
 8014220:	462a      	mov	r2, r5
 8014222:	435a      	muls	r2, r3
 8014224:	9401      	str	r4, [sp, #4]
 8014226:	9c02      	ldr	r4, [sp, #8]
 8014228:	9d02      	ldr	r5, [sp, #8]
 801422a:	fb92 f4f4 	sdiv	r4, r2, r4
 801422e:	fb05 2214 	mls	r2, r5, r4, r2
 8014232:	2a00      	cmp	r2, #0
 8014234:	9207      	str	r2, [sp, #28]
 8014236:	bfbc      	itt	lt
 8014238:	1952      	addlt	r2, r2, r5
 801423a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801423e:	6905      	ldr	r5, [r0, #16]
 8014240:	bfb8      	it	lt
 8014242:	9207      	strlt	r2, [sp, #28]
 8014244:	eb04 0901 	add.w	r9, r4, r1
 8014248:	9a01      	ldr	r2, [sp, #4]
 801424a:	ea4f 1669 	mov.w	r6, r9, asr #5
 801424e:	429a      	cmp	r2, r3
 8014250:	f040 8111 	bne.w	8014476 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8014254:	f9b5 3000 	ldrsh.w	r3, [r5]
 8014258:	429e      	cmp	r6, r3
 801425a:	d104      	bne.n	8014266 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801425c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014260:	9a03      	ldr	r2, [sp, #12]
 8014262:	429a      	cmp	r2, r3
 8014264:	d01b      	beq.n	801429e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014266:	88ea      	ldrh	r2, [r5, #6]
 8014268:	88ab      	ldrh	r3, [r5, #4]
 801426a:	4313      	orrs	r3, r2
 801426c:	d010      	beq.n	8014290 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801426e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014272:	2a00      	cmp	r2, #0
 8014274:	db0c      	blt.n	8014290 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014276:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014278:	429a      	cmp	r2, r3
 801427a:	da09      	bge.n	8014290 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801427c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014280:	429a      	cmp	r2, r3
 8014282:	f102 0201 	add.w	r2, r2, #1
 8014286:	bf38      	it	cc
 8014288:	3508      	addcc	r5, #8
 801428a:	6082      	str	r2, [r0, #8]
 801428c:	bf38      	it	cc
 801428e:	6105      	strcc	r5, [r0, #16]
 8014290:	6903      	ldr	r3, [r0, #16]
 8014292:	9a03      	ldr	r2, [sp, #12]
 8014294:	801e      	strh	r6, [r3, #0]
 8014296:	805a      	strh	r2, [r3, #2]
 8014298:	2200      	movs	r2, #0
 801429a:	809a      	strh	r2, [r3, #4]
 801429c:	80da      	strh	r2, [r3, #6]
 801429e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142a0:	9a03      	ldr	r2, [sp, #12]
 80142a2:	6901      	ldr	r1, [r0, #16]
 80142a4:	441a      	add	r2, r3
 80142a6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80142aa:	42b3      	cmp	r3, r6
 80142ac:	d103      	bne.n	80142b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80142ae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d01a      	beq.n	80142ec <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80142b6:	88cc      	ldrh	r4, [r1, #6]
 80142b8:	888b      	ldrh	r3, [r1, #4]
 80142ba:	4323      	orrs	r3, r4
 80142bc:	d010      	beq.n	80142e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80142be:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80142c2:	2c00      	cmp	r4, #0
 80142c4:	db0c      	blt.n	80142e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80142c6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80142c8:	429c      	cmp	r4, r3
 80142ca:	da09      	bge.n	80142e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80142cc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80142d0:	429c      	cmp	r4, r3
 80142d2:	f104 0401 	add.w	r4, r4, #1
 80142d6:	bf38      	it	cc
 80142d8:	3108      	addcc	r1, #8
 80142da:	6084      	str	r4, [r0, #8]
 80142dc:	bf38      	it	cc
 80142de:	6101      	strcc	r1, [r0, #16]
 80142e0:	6903      	ldr	r3, [r0, #16]
 80142e2:	2100      	movs	r1, #0
 80142e4:	801e      	strh	r6, [r3, #0]
 80142e6:	805a      	strh	r2, [r3, #2]
 80142e8:	8099      	strh	r1, [r3, #4]
 80142ea:	80d9      	strh	r1, [r3, #6]
 80142ec:	9b06      	ldr	r3, [sp, #24]
 80142ee:	4293      	cmp	r3, r2
 80142f0:	f000 8082 	beq.w	80143f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80142f4:	9b08      	ldr	r3, [sp, #32]
 80142f6:	9902      	ldr	r1, [sp, #8]
 80142f8:	015b      	lsls	r3, r3, #5
 80142fa:	9c02      	ldr	r4, [sp, #8]
 80142fc:	fb93 f1f1 	sdiv	r1, r3, r1
 8014300:	fb04 3311 	mls	r3, r4, r1, r3
 8014304:	9103      	str	r1, [sp, #12]
 8014306:	2b00      	cmp	r3, #0
 8014308:	9308      	str	r3, [sp, #32]
 801430a:	da04      	bge.n	8014316 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801430c:	1e4b      	subs	r3, r1, #1
 801430e:	9303      	str	r3, [sp, #12]
 8014310:	9b08      	ldr	r3, [sp, #32]
 8014312:	4423      	add	r3, r4
 8014314:	9308      	str	r3, [sp, #32]
 8014316:	9b07      	ldr	r3, [sp, #28]
 8014318:	464f      	mov	r7, r9
 801431a:	9902      	ldr	r1, [sp, #8]
 801431c:	2600      	movs	r6, #0
 801431e:	1a5b      	subs	r3, r3, r1
 8014320:	9307      	str	r3, [sp, #28]
 8014322:	9b01      	ldr	r3, [sp, #4]
 8014324:	f1c3 0320 	rsb	r3, r3, #32
 8014328:	930e      	str	r3, [sp, #56]	@ 0x38
 801432a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801432c:	9b01      	ldr	r3, [sp, #4]
 801432e:	1a5b      	subs	r3, r3, r1
 8014330:	930a      	str	r3, [sp, #40]	@ 0x28
 8014332:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8014336:	185b      	adds	r3, r3, r1
 8014338:	bf58      	it	pl
 801433a:	9902      	ldrpl	r1, [sp, #8]
 801433c:	9307      	str	r3, [sp, #28]
 801433e:	bf57      	itett	pl
 8014340:	1a5b      	subpl	r3, r3, r1
 8014342:	9903      	ldrmi	r1, [sp, #12]
 8014344:	9307      	strpl	r3, [sp, #28]
 8014346:	9b03      	ldrpl	r3, [sp, #12]
 8014348:	bf58      	it	pl
 801434a:	1c59      	addpl	r1, r3, #1
 801434c:	2a00      	cmp	r2, #0
 801434e:	4489      	add	r9, r1
 8014350:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8014354:	db2e      	blt.n	80143b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014356:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014358:	4293      	cmp	r3, r2
 801435a:	dd2b      	ble.n	80143b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801435c:	9c01      	ldr	r4, [sp, #4]
 801435e:	6905      	ldr	r5, [r0, #16]
 8014360:	46a0      	mov	r8, r4
 8014362:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8014364:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8014368:	45a0      	cmp	r8, r4
 801436a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801436e:	f040 814c 	bne.w	801460a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8014372:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014376:	4551      	cmp	r1, sl
 8014378:	d103      	bne.n	8014382 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801437a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801437e:	4291      	cmp	r1, r2
 8014380:	d018      	beq.n	80143b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014382:	ea5c 010e 	orrs.w	r1, ip, lr
 8014386:	d00f      	beq.n	80143a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014388:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801438c:	2900      	cmp	r1, #0
 801438e:	db0b      	blt.n	80143a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014390:	428b      	cmp	r3, r1
 8014392:	dd09      	ble.n	80143a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014394:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014398:	4299      	cmp	r1, r3
 801439a:	f101 0101 	add.w	r1, r1, #1
 801439e:	bf38      	it	cc
 80143a0:	3508      	addcc	r5, #8
 80143a2:	6081      	str	r1, [r0, #8]
 80143a4:	bf38      	it	cc
 80143a6:	6105      	strcc	r5, [r0, #16]
 80143a8:	6903      	ldr	r3, [r0, #16]
 80143aa:	f8a3 a000 	strh.w	sl, [r3]
 80143ae:	805a      	strh	r2, [r3, #2]
 80143b0:	809e      	strh	r6, [r3, #4]
 80143b2:	80de      	strh	r6, [r3, #6]
 80143b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143b6:	6901      	ldr	r1, [r0, #16]
 80143b8:	441a      	add	r2, r3
 80143ba:	88cc      	ldrh	r4, [r1, #6]
 80143bc:	888b      	ldrh	r3, [r1, #4]
 80143be:	4323      	orrs	r3, r4
 80143c0:	d010      	beq.n	80143e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80143c2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80143c6:	2c00      	cmp	r4, #0
 80143c8:	db0c      	blt.n	80143e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80143ca:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80143cc:	429c      	cmp	r4, r3
 80143ce:	da09      	bge.n	80143e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80143d0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80143d4:	429c      	cmp	r4, r3
 80143d6:	f104 0401 	add.w	r4, r4, #1
 80143da:	bf38      	it	cc
 80143dc:	3108      	addcc	r1, #8
 80143de:	6084      	str	r4, [r0, #8]
 80143e0:	bf38      	it	cc
 80143e2:	6101      	strcc	r1, [r0, #16]
 80143e4:	6903      	ldr	r3, [r0, #16]
 80143e6:	464f      	mov	r7, r9
 80143e8:	f8a3 a000 	strh.w	sl, [r3]
 80143ec:	805a      	strh	r2, [r3, #2]
 80143ee:	809e      	strh	r6, [r3, #4]
 80143f0:	80de      	strh	r6, [r3, #6]
 80143f2:	9b06      	ldr	r3, [sp, #24]
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d19c      	bne.n	8014332 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80143f8:	9b01      	ldr	r3, [sp, #4]
 80143fa:	6907      	ldr	r7, [r0, #16]
 80143fc:	f1c3 0620 	rsb	r6, r3, #32
 8014400:	9b05      	ldr	r3, [sp, #20]
 8014402:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8014406:	9b04      	ldr	r3, [sp, #16]
 8014408:	429e      	cmp	r6, r3
 801440a:	f040 81c7 	bne.w	801479c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801440e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8014412:	459e      	cmp	lr, r3
 8014414:	d104      	bne.n	8014420 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8014416:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801441a:	429a      	cmp	r2, r3
 801441c:	f43f ae3a 	beq.w	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014420:	88f9      	ldrh	r1, [r7, #6]
 8014422:	88bb      	ldrh	r3, [r7, #4]
 8014424:	430b      	orrs	r3, r1
 8014426:	d010      	beq.n	801444a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801442c:	2b00      	cmp	r3, #0
 801442e:	db0c      	blt.n	801444a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014430:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8014432:	428b      	cmp	r3, r1
 8014434:	da09      	bge.n	801444a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014436:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801443a:	428b      	cmp	r3, r1
 801443c:	f103 0301 	add.w	r3, r3, #1
 8014440:	bf38      	it	cc
 8014442:	3708      	addcc	r7, #8
 8014444:	6083      	str	r3, [r0, #8]
 8014446:	bf38      	it	cc
 8014448:	6107      	strcc	r7, [r0, #16]
 801444a:	6903      	ldr	r3, [r0, #16]
 801444c:	f8a3 e000 	strh.w	lr, [r3]
 8014450:	e603      	b.n	801405a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8014452:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014454:	9c03      	ldr	r4, [sp, #12]
 8014456:	42a2      	cmp	r2, r4
 8014458:	f6ff ae1c 	blt.w	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801445c:	9c06      	ldr	r4, [sp, #24]
 801445e:	42a2      	cmp	r2, r4
 8014460:	9c08      	ldr	r4, [sp, #32]
 8014462:	bfbc      	itt	lt
 8014464:	3201      	addlt	r2, #1
 8014466:	9206      	strlt	r2, [sp, #24]
 8014468:	f1c3 0220 	rsb	r2, r3, #32
 801446c:	4362      	muls	r2, r4
 801446e:	2401      	movs	r4, #1
 8014470:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014472:	2420      	movs	r4, #32
 8014474:	e6d6      	b.n	8014224 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8014476:	ea4f 1861 	mov.w	r8, r1, asr #5
 801447a:	f009 021f 	and.w	r2, r9, #31
 801447e:	f001 011f 	and.w	r1, r1, #31
 8014482:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8014486:	920c      	str	r2, [sp, #48]	@ 0x30
 8014488:	45b0      	cmp	r8, r6
 801448a:	9a01      	ldr	r2, [sp, #4]
 801448c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8014490:	eba2 0203 	sub.w	r2, r2, r3
 8014494:	d108      	bne.n	80144a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8014496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014498:	4496      	add	lr, r2
 801449a:	4419      	add	r1, r3
 801449c:	f8a5 e004 	strh.w	lr, [r5, #4]
 80144a0:	fb02 a101 	mla	r1, r2, r1, sl
 80144a4:	80e9      	strh	r1, [r5, #6]
 80144a6:	e6fa      	b.n	801429e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80144a8:	2c00      	cmp	r4, #0
 80144aa:	f2c0 80a7 	blt.w	80145fc <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80144ae:	2701      	movs	r7, #1
 80144b0:	f1c1 0c20 	rsb	ip, r1, #32
 80144b4:	970a      	str	r7, [sp, #40]	@ 0x28
 80144b6:	2720      	movs	r7, #32
 80144b8:	fb02 f20c 	mul.w	r2, r2, ip
 80144bc:	9709      	str	r7, [sp, #36]	@ 0x24
 80144be:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80144c0:	fb92 fcf4 	sdiv	ip, r2, r4
 80144c4:	fb04 221c 	mls	r2, r4, ip, r2
 80144c8:	4439      	add	r1, r7
 80144ca:	2a00      	cmp	r2, #0
 80144cc:	bfbc      	itt	lt
 80144ce:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80144d2:	1912      	addlt	r2, r2, r4
 80144d4:	fb0c a101 	mla	r1, ip, r1, sl
 80144d8:	44e6      	add	lr, ip
 80144da:	80e9      	strh	r1, [r5, #6]
 80144dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80144de:	f8a5 e004 	strh.w	lr, [r5, #4]
 80144e2:	eb08 0501 	add.w	r5, r8, r1
 80144e6:	6901      	ldr	r1, [r0, #16]
 80144e8:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80144ec:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80144f0:	ea58 070e 	orrs.w	r7, r8, lr
 80144f4:	d010      	beq.n	8014518 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80144f6:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80144fa:	f1be 0f00 	cmp.w	lr, #0
 80144fe:	db0b      	blt.n	8014518 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014500:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014502:	45be      	cmp	lr, r7
 8014504:	da08      	bge.n	8014518 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014506:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801450a:	45be      	cmp	lr, r7
 801450c:	bf3c      	itt	cc
 801450e:	3108      	addcc	r1, #8
 8014510:	6101      	strcc	r1, [r0, #16]
 8014512:	f10e 0101 	add.w	r1, lr, #1
 8014516:	6081      	str	r1, [r0, #8]
 8014518:	6901      	ldr	r1, [r0, #16]
 801451a:	f04f 0e00 	mov.w	lr, #0
 801451e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8014522:	42ae      	cmp	r6, r5
 8014524:	800d      	strh	r5, [r1, #0]
 8014526:	4463      	add	r3, ip
 8014528:	f8a1 8002 	strh.w	r8, [r1, #2]
 801452c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8014530:	f8a1 e006 	strh.w	lr, [r1, #6]
 8014534:	d053      	beq.n	80145de <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8014536:	9901      	ldr	r1, [sp, #4]
 8014538:	1b12      	subs	r2, r2, r4
 801453a:	1ac9      	subs	r1, r1, r3
 801453c:	4461      	add	r1, ip
 801453e:	0149      	lsls	r1, r1, #5
 8014540:	fb91 fef4 	sdiv	lr, r1, r4
 8014544:	fb04 111e 	mls	r1, r4, lr, r1
 8014548:	2900      	cmp	r1, #0
 801454a:	bfbc      	itt	lt
 801454c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8014550:	1909      	addlt	r1, r1, r4
 8014552:	f10e 0701 	add.w	r7, lr, #1
 8014556:	970d      	str	r7, [sp, #52]	@ 0x34
 8014558:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801455c:	1852      	adds	r2, r2, r1
 801455e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8014560:	bf54      	ite	pl
 8014562:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8014566:	46f4      	movmi	ip, lr
 8014568:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801456c:	bf58      	it	pl
 801456e:	1b12      	subpl	r2, r2, r4
 8014570:	4463      	add	r3, ip
 8014572:	443d      	add	r5, r7
 8014574:	44e3      	add	fp, ip
 8014576:	f8aa b004 	strh.w	fp, [sl, #4]
 801457a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801457e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8014582:	f8aa b006 	strh.w	fp, [sl, #6]
 8014586:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801458a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801458e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8014592:	ea5b 070a 	orrs.w	r7, fp, sl
 8014596:	d014      	beq.n	80145c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014598:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801459c:	f1ba 0f00 	cmp.w	sl, #0
 80145a0:	db0f      	blt.n	80145c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80145a2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80145a4:	45ba      	cmp	sl, r7
 80145a6:	da0c      	bge.n	80145c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80145a8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80145ac:	45ba      	cmp	sl, r7
 80145ae:	f10a 0a01 	add.w	sl, sl, #1
 80145b2:	bf38      	it	cc
 80145b4:	f10c 0c08 	addcc.w	ip, ip, #8
 80145b8:	f8c0 a008 	str.w	sl, [r0, #8]
 80145bc:	bf38      	it	cc
 80145be:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80145c2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80145c6:	f04f 0700 	mov.w	r7, #0
 80145ca:	42ae      	cmp	r6, r5
 80145cc:	f8ac 5000 	strh.w	r5, [ip]
 80145d0:	f8ac 8002 	strh.w	r8, [ip, #2]
 80145d4:	f8ac 7004 	strh.w	r7, [ip, #4]
 80145d8:	f8ac 7006 	strh.w	r7, [ip, #6]
 80145dc:	d1bc      	bne.n	8014558 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80145de:	6904      	ldr	r4, [r0, #16]
 80145e0:	9a01      	ldr	r2, [sp, #4]
 80145e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80145e4:	1ad3      	subs	r3, r2, r3
 80145e6:	88a2      	ldrh	r2, [r4, #4]
 80145e8:	3120      	adds	r1, #32
 80145ea:	441a      	add	r2, r3
 80145ec:	80a2      	strh	r2, [r4, #4]
 80145ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145f0:	1a89      	subs	r1, r1, r2
 80145f2:	88e2      	ldrh	r2, [r4, #6]
 80145f4:	fb03 2301 	mla	r3, r3, r1, r2
 80145f8:	80e3      	strh	r3, [r4, #6]
 80145fa:	e650      	b.n	801429e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80145fc:	f04f 37ff 	mov.w	r7, #4294967295
 8014600:	434a      	muls	r2, r1
 8014602:	4264      	negs	r4, r4
 8014604:	970a      	str	r7, [sp, #40]	@ 0x28
 8014606:	2700      	movs	r7, #0
 8014608:	e758      	b.n	80144bc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801460a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801460e:	f009 031f 	and.w	r3, r9, #31
 8014612:	f007 071f 	and.w	r7, r7, #31
 8014616:	fa1f fc8c 	uxth.w	ip, ip
 801461a:	45d0      	cmp	r8, sl
 801461c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801461e:	fa1f fe8e 	uxth.w	lr, lr
 8014622:	d10a      	bne.n	801463a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8014624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014626:	449c      	add	ip, r3
 8014628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801462a:	441f      	add	r7, r3
 801462c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801462e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014632:	fb03 e707 	mla	r7, r3, r7, lr
 8014636:	80ef      	strh	r7, [r5, #6]
 8014638:	e6bc      	b.n	80143b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801463a:	2900      	cmp	r1, #0
 801463c:	f2c0 80a6 	blt.w	801478c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8014640:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014642:	f1c7 0320 	rsb	r3, r7, #32
 8014646:	4363      	muls	r3, r4
 8014648:	2401      	movs	r4, #1
 801464a:	940d      	str	r4, [sp, #52]	@ 0x34
 801464c:	2420      	movs	r4, #32
 801464e:	940c      	str	r4, [sp, #48]	@ 0x30
 8014650:	fb93 f4f1 	sdiv	r4, r3, r1
 8014654:	fb01 3b14 	mls	fp, r1, r4, r3
 8014658:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801465a:	f1bb 0f00 	cmp.w	fp, #0
 801465e:	441f      	add	r7, r3
 8014660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014662:	bfbc      	itt	lt
 8014664:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014668:	448b      	addlt	fp, r1
 801466a:	fb04 e707 	mla	r7, r4, r7, lr
 801466e:	44a4      	add	ip, r4
 8014670:	80ef      	strh	r7, [r5, #6]
 8014672:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014676:	eb08 0503 	add.w	r5, r8, r3
 801467a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801467e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8014682:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014686:	ea5e 0307 	orrs.w	r3, lr, r7
 801468a:	d011      	beq.n	80146b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801468c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8014690:	f1be 0f00 	cmp.w	lr, #0
 8014694:	db0c      	blt.n	80146b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014696:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014698:	45be      	cmp	lr, r7
 801469a:	da09      	bge.n	80146b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801469c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80146a0:	45be      	cmp	lr, r7
 80146a2:	bf3c      	itt	cc
 80146a4:	f10c 0708 	addcc.w	r7, ip, #8
 80146a8:	6107      	strcc	r7, [r0, #16]
 80146aa:	f10e 0701 	add.w	r7, lr, #1
 80146ae:	6087      	str	r7, [r0, #8]
 80146b0:	6907      	ldr	r7, [r0, #16]
 80146b2:	b213      	sxth	r3, r2
 80146b4:	4555      	cmp	r5, sl
 80146b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80146b8:	807b      	strh	r3, [r7, #2]
 80146ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80146bc:	803d      	strh	r5, [r7, #0]
 80146be:	80be      	strh	r6, [r7, #4]
 80146c0:	eb04 0c03 	add.w	ip, r4, r3
 80146c4:	80fe      	strh	r6, [r7, #6]
 80146c6:	d050      	beq.n	801476a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80146c8:	9b01      	ldr	r3, [sp, #4]
 80146ca:	eba3 070c 	sub.w	r7, r3, ip
 80146ce:	ebab 0301 	sub.w	r3, fp, r1
 80146d2:	443c      	add	r4, r7
 80146d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80146d6:	0164      	lsls	r4, r4, #5
 80146d8:	fb94 f8f1 	sdiv	r8, r4, r1
 80146dc:	fb01 4418 	mls	r4, r1, r8, r4
 80146e0:	2c00      	cmp	r4, #0
 80146e2:	bfbc      	itt	lt
 80146e4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80146e8:	1864      	addlt	r4, r4, r1
 80146ea:	f108 0701 	add.w	r7, r8, #1
 80146ee:	9711      	str	r7, [sp, #68]	@ 0x44
 80146f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146f2:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80146f6:	191b      	adds	r3, r3, r4
 80146f8:	f8be b004 	ldrh.w	fp, [lr, #4]
 80146fc:	bf54      	ite	pl
 80146fe:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8014700:	4647      	movmi	r7, r8
 8014702:	9309      	str	r3, [sp, #36]	@ 0x24
 8014704:	bf58      	it	pl
 8014706:	1a5b      	subpl	r3, r3, r1
 8014708:	44bb      	add	fp, r7
 801470a:	44bc      	add	ip, r7
 801470c:	bf58      	it	pl
 801470e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8014710:	f8ae b004 	strh.w	fp, [lr, #4]
 8014714:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014718:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801471c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801471e:	f8ae b006 	strh.w	fp, [lr, #6]
 8014722:	443d      	add	r5, r7
 8014724:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014728:	f8be b006 	ldrh.w	fp, [lr, #6]
 801472c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8014730:	ea5b 0307 	orrs.w	r3, fp, r7
 8014734:	d011      	beq.n	801475a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014736:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801473a:	f1bb 0f00 	cmp.w	fp, #0
 801473e:	db0c      	blt.n	801475a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014740:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014742:	45bb      	cmp	fp, r7
 8014744:	da09      	bge.n	801475a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014746:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801474a:	45bb      	cmp	fp, r7
 801474c:	bf3c      	itt	cc
 801474e:	f10e 0708 	addcc.w	r7, lr, #8
 8014752:	6107      	strcc	r7, [r0, #16]
 8014754:	f10b 0701 	add.w	r7, fp, #1
 8014758:	6087      	str	r7, [r0, #8]
 801475a:	6907      	ldr	r7, [r0, #16]
 801475c:	4555      	cmp	r5, sl
 801475e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014760:	803d      	strh	r5, [r7, #0]
 8014762:	807b      	strh	r3, [r7, #2]
 8014764:	80be      	strh	r6, [r7, #4]
 8014766:	80fe      	strh	r6, [r7, #6]
 8014768:	d1c2      	bne.n	80146f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801476a:	9b01      	ldr	r3, [sp, #4]
 801476c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801476e:	eba3 0c0c 	sub.w	ip, r3, ip
 8014772:	6903      	ldr	r3, [r0, #16]
 8014774:	3720      	adds	r7, #32
 8014776:	8899      	ldrh	r1, [r3, #4]
 8014778:	4461      	add	r1, ip
 801477a:	8099      	strh	r1, [r3, #4]
 801477c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801477e:	1a7f      	subs	r7, r7, r1
 8014780:	88d9      	ldrh	r1, [r3, #6]
 8014782:	fb0c 1c07 	mla	ip, ip, r7, r1
 8014786:	f8a3 c006 	strh.w	ip, [r3, #6]
 801478a:	e613      	b.n	80143b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801478c:	f04f 34ff 	mov.w	r4, #4294967295
 8014790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014792:	4249      	negs	r1, r1
 8014794:	940d      	str	r4, [sp, #52]	@ 0x34
 8014796:	2400      	movs	r4, #0
 8014798:	437b      	muls	r3, r7
 801479a:	e758      	b.n	801464e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801479c:	9905      	ldr	r1, [sp, #20]
 801479e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80147a2:	f009 0c1f 	and.w	ip, r9, #31
 80147a6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80147aa:	f001 011f 	and.w	r1, r1, #31
 80147ae:	45f3      	cmp	fp, lr
 80147b0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80147b4:	9102      	str	r1, [sp, #8]
 80147b6:	9904      	ldr	r1, [sp, #16]
 80147b8:	eba1 0406 	sub.w	r4, r1, r6
 80147bc:	d108      	bne.n	80147d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80147be:	9b02      	ldr	r3, [sp, #8]
 80147c0:	44a0      	add	r8, r4
 80147c2:	449c      	add	ip, r3
 80147c4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80147c8:	fb04 a40c 	mla	r4, r4, ip, sl
 80147cc:	80fc      	strh	r4, [r7, #6]
 80147ce:	e461      	b.n	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80147d0:	9905      	ldr	r1, [sp, #20]
 80147d2:	ebb1 0109 	subs.w	r1, r1, r9
 80147d6:	bf51      	iteee	pl
 80147d8:	f1cc 0520 	rsbpl	r5, ip, #32
 80147dc:	fb04 f40c 	mulmi.w	r4, r4, ip
 80147e0:	4249      	negmi	r1, r1
 80147e2:	2500      	movmi	r5, #0
 80147e4:	bf5d      	ittte	pl
 80147e6:	436c      	mulpl	r4, r5
 80147e8:	2520      	movpl	r5, #32
 80147ea:	f04f 0901 	movpl.w	r9, #1
 80147ee:	f04f 39ff 	movmi.w	r9, #4294967295
 80147f2:	9501      	str	r5, [sp, #4]
 80147f4:	9b01      	ldr	r3, [sp, #4]
 80147f6:	fb94 f5f1 	sdiv	r5, r4, r1
 80147fa:	fb01 4415 	mls	r4, r1, r5, r4
 80147fe:	449c      	add	ip, r3
 8014800:	eb0b 0309 	add.w	r3, fp, r9
 8014804:	2c00      	cmp	r4, #0
 8014806:	bfbc      	itt	lt
 8014808:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801480c:	1864      	addlt	r4, r4, r1
 801480e:	44a8      	add	r8, r5
 8014810:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014814:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014818:	f8a7 c006 	strh.w	ip, [r7, #6]
 801481c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014820:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014824:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014828:	ea58 0707 	orrs.w	r7, r8, r7
 801482c:	d011      	beq.n	8014852 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801482e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014832:	f1b8 0f00 	cmp.w	r8, #0
 8014836:	db0c      	blt.n	8014852 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014838:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801483a:	45b8      	cmp	r8, r7
 801483c:	da09      	bge.n	8014852 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801483e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8014842:	45b8      	cmp	r8, r7
 8014844:	bf3c      	itt	cc
 8014846:	f10c 0708 	addcc.w	r7, ip, #8
 801484a:	6107      	strcc	r7, [r0, #16]
 801484c:	f108 0701 	add.w	r7, r8, #1
 8014850:	6087      	str	r7, [r0, #8]
 8014852:	6907      	ldr	r7, [r0, #16]
 8014854:	f04f 0c00 	mov.w	ip, #0
 8014858:	b212      	sxth	r2, r2
 801485a:	459e      	cmp	lr, r3
 801485c:	803b      	strh	r3, [r7, #0]
 801485e:	442e      	add	r6, r5
 8014860:	807a      	strh	r2, [r7, #2]
 8014862:	f8a7 c004 	strh.w	ip, [r7, #4]
 8014866:	f8a7 c006 	strh.w	ip, [r7, #6]
 801486a:	d04b      	beq.n	8014904 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801486c:	9f04      	ldr	r7, [sp, #16]
 801486e:	1a64      	subs	r4, r4, r1
 8014870:	f04f 0a00 	mov.w	sl, #0
 8014874:	1bbf      	subs	r7, r7, r6
 8014876:	443d      	add	r5, r7
 8014878:	016d      	lsls	r5, r5, #5
 801487a:	fb95 f8f1 	sdiv	r8, r5, r1
 801487e:	fb01 5518 	mls	r5, r1, r8, r5
 8014882:	4565      	cmp	r5, ip
 8014884:	bfbc      	itt	lt
 8014886:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801488a:	186d      	addlt	r5, r5, r1
 801488c:	f108 0701 	add.w	r7, r8, #1
 8014890:	9703      	str	r7, [sp, #12]
 8014892:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014896:	1964      	adds	r4, r4, r5
 8014898:	444b      	add	r3, r9
 801489a:	bf54      	ite	pl
 801489c:	9f03      	ldrpl	r7, [sp, #12]
 801489e:	4647      	movmi	r7, r8
 80148a0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80148a4:	bf58      	it	pl
 80148a6:	1a64      	subpl	r4, r4, r1
 80148a8:	443e      	add	r6, r7
 80148aa:	44bb      	add	fp, r7
 80148ac:	f8ac b004 	strh.w	fp, [ip, #4]
 80148b0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80148b4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80148b8:	f8ac b006 	strh.w	fp, [ip, #6]
 80148bc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80148c0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80148c4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80148c8:	ea5b 0707 	orrs.w	r7, fp, r7
 80148cc:	d011      	beq.n	80148f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80148ce:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80148d2:	f1bb 0f00 	cmp.w	fp, #0
 80148d6:	db0c      	blt.n	80148f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80148d8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80148da:	45bb      	cmp	fp, r7
 80148dc:	da09      	bge.n	80148f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80148de:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80148e2:	45bb      	cmp	fp, r7
 80148e4:	bf3c      	itt	cc
 80148e6:	f10c 0708 	addcc.w	r7, ip, #8
 80148ea:	6107      	strcc	r7, [r0, #16]
 80148ec:	f10b 0701 	add.w	r7, fp, #1
 80148f0:	6087      	str	r7, [r0, #8]
 80148f2:	6907      	ldr	r7, [r0, #16]
 80148f4:	459e      	cmp	lr, r3
 80148f6:	803b      	strh	r3, [r7, #0]
 80148f8:	807a      	strh	r2, [r7, #2]
 80148fa:	f8a7 a004 	strh.w	sl, [r7, #4]
 80148fe:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014902:	d1c6      	bne.n	8014892 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8014904:	9b04      	ldr	r3, [sp, #16]
 8014906:	1b9e      	subs	r6, r3, r6
 8014908:	6903      	ldr	r3, [r0, #16]
 801490a:	889a      	ldrh	r2, [r3, #4]
 801490c:	4432      	add	r2, r6
 801490e:	809a      	strh	r2, [r3, #4]
 8014910:	9a02      	ldr	r2, [sp, #8]
 8014912:	f102 0c20 	add.w	ip, r2, #32
 8014916:	9a01      	ldr	r2, [sp, #4]
 8014918:	ebac 0c02 	sub.w	ip, ip, r2
 801491c:	88da      	ldrh	r2, [r3, #6]
 801491e:	fb06 260c 	mla	r6, r6, ip, r2
 8014922:	80de      	strh	r6, [r3, #6]
 8014924:	f7ff bbb6 	b.w	8014094 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08014928 <_ZN8touchgfx7Outline6lineToEii>:
 8014928:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801492a:	079b      	lsls	r3, r3, #30
 801492c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801492e:	460e      	mov	r6, r1
 8014930:	4615      	mov	r5, r2
 8014932:	d511      	bpl.n	8014958 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014934:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8014938:	ea86 0701 	eor.w	r7, r6, r1
 801493c:	ea85 0302 	eor.w	r3, r5, r2
 8014940:	433b      	orrs	r3, r7
 8014942:	d009      	beq.n	8014958 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014944:	4633      	mov	r3, r6
 8014946:	9500      	str	r5, [sp, #0]
 8014948:	f7ff fb4c 	bl	8013fe4 <_ZN8touchgfx7Outline10renderLineEiiii>
 801494c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801494e:	f043 0301 	orr.w	r3, r3, #1
 8014952:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8014956:	6243      	str	r3, [r0, #36]	@ 0x24
 8014958:	b003      	add	sp, #12
 801495a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801495c <_ZN8touchgfx7Outline6moveToEii>:
 801495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801495e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014960:	4615      	mov	r5, r2
 8014962:	4604      	mov	r4, r0
 8014964:	460e      	mov	r6, r1
 8014966:	079a      	lsls	r2, r3, #30
 8014968:	d401      	bmi.n	801496e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801496a:	f7ff fb08 	bl	8013f7e <_ZN8touchgfx7Outline5resetEv>
 801496e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014970:	07db      	lsls	r3, r3, #31
 8014972:	d504      	bpl.n	801497e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014974:	4620      	mov	r0, r4
 8014976:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801497a:	f7ff ffd5 	bl	8014928 <_ZN8touchgfx7Outline6lineToEii>
 801497e:	6923      	ldr	r3, [r4, #16]
 8014980:	1170      	asrs	r0, r6, #5
 8014982:	1169      	asrs	r1, r5, #5
 8014984:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014988:	4290      	cmp	r0, r2
 801498a:	d103      	bne.n	8014994 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801498c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014990:	4291      	cmp	r1, r2
 8014992:	d01a      	beq.n	80149ca <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014994:	88df      	ldrh	r7, [r3, #6]
 8014996:	889a      	ldrh	r2, [r3, #4]
 8014998:	433a      	orrs	r2, r7
 801499a:	d010      	beq.n	80149be <_ZN8touchgfx7Outline6moveToEii+0x62>
 801499c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80149a0:	2a00      	cmp	r2, #0
 80149a2:	db0c      	blt.n	80149be <_ZN8touchgfx7Outline6moveToEii+0x62>
 80149a4:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80149a6:	42ba      	cmp	r2, r7
 80149a8:	da09      	bge.n	80149be <_ZN8touchgfx7Outline6moveToEii+0x62>
 80149aa:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80149ae:	42ba      	cmp	r2, r7
 80149b0:	f102 0201 	add.w	r2, r2, #1
 80149b4:	bf38      	it	cc
 80149b6:	3308      	addcc	r3, #8
 80149b8:	60a2      	str	r2, [r4, #8]
 80149ba:	bf38      	it	cc
 80149bc:	6123      	strcc	r3, [r4, #16]
 80149be:	6923      	ldr	r3, [r4, #16]
 80149c0:	2200      	movs	r2, #0
 80149c2:	8018      	strh	r0, [r3, #0]
 80149c4:	8059      	strh	r1, [r3, #2]
 80149c6:	809a      	strh	r2, [r3, #4]
 80149c8:	80da      	strh	r2, [r3, #6]
 80149ca:	6166      	str	r6, [r4, #20]
 80149cc:	6225      	str	r5, [r4, #32]
 80149ce:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80149d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080149d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80149d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149d8:	b0d0      	sub	sp, #320	@ 0x140
 80149da:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80149de:	466c      	mov	r4, sp
 80149e0:	4627      	mov	r7, r4
 80149e2:	1a0d      	subs	r5, r1, r0
 80149e4:	f100 0308 	add.w	r3, r0, #8
 80149e8:	2d48      	cmp	r5, #72	@ 0x48
 80149ea:	f340 80d5 	ble.w	8014b98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80149ee:	112d      	asrs	r5, r5, #4
 80149f0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80149f4:	f9b0 9000 	ldrsh.w	r9, [r0]
 80149f8:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80149fc:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8014a00:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014a04:	6816      	ldr	r6, [r2, #0]
 8014a06:	6006      	str	r6, [r0, #0]
 8014a08:	6856      	ldr	r6, [r2, #4]
 8014a0a:	6046      	str	r6, [r0, #4]
 8014a0c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014a10:	f8a2 8002 	strh.w	r8, [r2, #2]
 8014a14:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014a18:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014a1c:	f1a1 0208 	sub.w	r2, r1, #8
 8014a20:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014a24:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8014a28:	4565      	cmp	r5, ip
 8014a2a:	db06      	blt.n	8014a3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8014a2c:	d119      	bne.n	8014a62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014a2e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8014a32:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8014a36:	42ae      	cmp	r6, r5
 8014a38:	dd13      	ble.n	8014a62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014a3a:	460e      	mov	r6, r1
 8014a3c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8014a40:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8014a44:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014a48:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8014a4c:	601d      	str	r5, [r3, #0]
 8014a4e:	6875      	ldr	r5, [r6, #4]
 8014a50:	605d      	str	r5, [r3, #4]
 8014a52:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014a56:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014a5a:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014a5e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014a62:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014a66:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8014a6a:	42ae      	cmp	r6, r5
 8014a6c:	db06      	blt.n	8014a7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8014a6e:	d116      	bne.n	8014a9e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014a70:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014a74:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8014a78:	45ac      	cmp	ip, r5
 8014a7a:	da10      	bge.n	8014a9e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014a7c:	681d      	ldr	r5, [r3, #0]
 8014a7e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014a82:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014a86:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014a8a:	6005      	str	r5, [r0, #0]
 8014a8c:	685d      	ldr	r5, [r3, #4]
 8014a8e:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014a92:	6045      	str	r5, [r0, #4]
 8014a94:	8146      	strh	r6, [r0, #10]
 8014a96:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8014a9a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014a9e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014aa2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014aa6:	4565      	cmp	r5, ip
 8014aa8:	db06      	blt.n	8014ab8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8014aaa:	d119      	bne.n	8014ae0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014aac:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8014ab0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014ab4:	42ae      	cmp	r6, r5
 8014ab6:	da13      	bge.n	8014ae0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014ab8:	460e      	mov	r6, r1
 8014aba:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014abe:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8014ac2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014ac6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8014aca:	6005      	str	r5, [r0, #0]
 8014acc:	6875      	ldr	r5, [r6, #4]
 8014ace:	6045      	str	r5, [r0, #4]
 8014ad0:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014ad4:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014ad8:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014adc:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014ae0:	3308      	adds	r3, #8
 8014ae2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014ae6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8014aea:	45e6      	cmp	lr, ip
 8014aec:	dbf8      	blt.n	8014ae0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014aee:	d105      	bne.n	8014afc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014af0:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014af4:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014af8:	42ae      	cmp	r6, r5
 8014afa:	dbf1      	blt.n	8014ae0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014afc:	4615      	mov	r5, r2
 8014afe:	3a08      	subs	r2, #8
 8014b00:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8014b04:	45b4      	cmp	ip, r6
 8014b06:	dbf9      	blt.n	8014afc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014b08:	d105      	bne.n	8014b16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8014b0a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014b0e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014b12:	45b0      	cmp	r8, r6
 8014b14:	dbf2      	blt.n	8014afc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014b16:	4293      	cmp	r3, r2
 8014b18:	f1a5 0608 	sub.w	r6, r5, #8
 8014b1c:	d816      	bhi.n	8014b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8014b1e:	f8d6 c000 	ldr.w	ip, [r6]
 8014b22:	f9b3 a000 	ldrsh.w	sl, [r3]
 8014b26:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8014b2a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8014b2e:	f8c3 c000 	str.w	ip, [r3]
 8014b32:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8014b36:	f8c3 c004 	str.w	ip, [r3, #4]
 8014b3a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014b3e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8014b42:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014b46:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014b4a:	e7c9      	b.n	8014ae0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014b4c:	f8d6 e000 	ldr.w	lr, [r6]
 8014b50:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014b54:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8014b58:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8014b5c:	f8c0 e000 	str.w	lr, [r0]
 8014b60:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8014b64:	1a16      	subs	r6, r2, r0
 8014b66:	f8c0 e004 	str.w	lr, [r0, #4]
 8014b6a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014b6e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8014b72:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014b76:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014b7a:	1acd      	subs	r5, r1, r3
 8014b7c:	10ed      	asrs	r5, r5, #3
 8014b7e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8014b82:	bfb5      	itete	lt
 8014b84:	e9c4 0200 	strdlt	r0, r2, [r4]
 8014b88:	e9c4 3100 	strdge	r3, r1, [r4]
 8014b8c:	460a      	movlt	r2, r1
 8014b8e:	4603      	movge	r3, r0
 8014b90:	3408      	adds	r4, #8
 8014b92:	4618      	mov	r0, r3
 8014b94:	4611      	mov	r1, r2
 8014b96:	e724      	b.n	80149e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014b98:	4299      	cmp	r1, r3
 8014b9a:	d927      	bls.n	8014bec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8014b9c:	f1a3 0210 	sub.w	r2, r3, #16
 8014ba0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8014ba4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8014ba8:	45ac      	cmp	ip, r5
 8014baa:	db06      	blt.n	8014bba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8014bac:	d11c      	bne.n	8014be8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014bae:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8014bb2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8014bb6:	42ae      	cmp	r6, r5
 8014bb8:	da16      	bge.n	8014be8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014bba:	4615      	mov	r5, r2
 8014bbc:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8014bc0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8014bc4:	3a08      	subs	r2, #8
 8014bc6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8014bca:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8014bce:	6196      	str	r6, [r2, #24]
 8014bd0:	42a8      	cmp	r0, r5
 8014bd2:	686e      	ldr	r6, [r5, #4]
 8014bd4:	f8a2 9010 	strh.w	r9, [r2, #16]
 8014bd8:	61d6      	str	r6, [r2, #28]
 8014bda:	f8a2 c012 	strh.w	ip, [r2, #18]
 8014bde:	f8a2 8014 	strh.w	r8, [r2, #20]
 8014be2:	f8a2 e016 	strh.w	lr, [r2, #22]
 8014be6:	d1db      	bne.n	8014ba0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8014be8:	3308      	adds	r3, #8
 8014bea:	e7d5      	b.n	8014b98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014bec:	42bc      	cmp	r4, r7
 8014bee:	d903      	bls.n	8014bf8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8014bf0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8014bf4:	3c08      	subs	r4, #8
 8014bf6:	e6f4      	b.n	80149e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014bf8:	b050      	add	sp, #320	@ 0x140
 8014bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014bfe <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8014bfe:	b510      	push	{r4, lr}
 8014c00:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014c02:	4604      	mov	r4, r0
 8014c04:	07da      	lsls	r2, r3, #31
 8014c06:	d507      	bpl.n	8014c18 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8014c08:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8014c0c:	f7ff fe8c 	bl	8014928 <_ZN8touchgfx7Outline6lineToEii>
 8014c10:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014c12:	f023 0301 	bic.w	r3, r3, #1
 8014c16:	6243      	str	r3, [r0, #36]	@ 0x24
 8014c18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014c1a:	079b      	lsls	r3, r3, #30
 8014c1c:	d521      	bpl.n	8014c62 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8014c1e:	6923      	ldr	r3, [r4, #16]
 8014c20:	88d9      	ldrh	r1, [r3, #6]
 8014c22:	889a      	ldrh	r2, [r3, #4]
 8014c24:	430a      	orrs	r2, r1
 8014c26:	d010      	beq.n	8014c4a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014c28:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014c2c:	2a00      	cmp	r2, #0
 8014c2e:	db0c      	blt.n	8014c4a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014c30:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014c32:	428a      	cmp	r2, r1
 8014c34:	da09      	bge.n	8014c4a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014c36:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8014c3a:	4291      	cmp	r1, r2
 8014c3c:	f102 0201 	add.w	r2, r2, #1
 8014c40:	bf88      	it	hi
 8014c42:	3308      	addhi	r3, #8
 8014c44:	60a2      	str	r2, [r4, #8]
 8014c46:	bf88      	it	hi
 8014c48:	6123      	strhi	r3, [r4, #16]
 8014c4a:	68a1      	ldr	r1, [r4, #8]
 8014c4c:	b129      	cbz	r1, 8014c5a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014c4e:	6863      	ldr	r3, [r4, #4]
 8014c50:	4299      	cmp	r1, r3
 8014c52:	d802      	bhi.n	8014c5a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014c54:	68e0      	ldr	r0, [r4, #12]
 8014c56:	f7ff febd 	bl	80149d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8014c5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014c5c:	f023 0302 	bic.w	r3, r3, #2
 8014c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8014c62:	68e0      	ldr	r0, [r4, #12]
 8014c64:	bd10      	pop	{r4, pc}
	...

08014c68 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014c68:	4b01      	ldr	r3, [pc, #4]	@ (8014c70 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014c6a:	6818      	ldr	r0, [r3, #0]
 8014c6c:	4770      	bx	lr
 8014c6e:	bf00      	nop
 8014c70:	24026424 	.word	0x24026424

08014c74 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8014c74:	4b01      	ldr	r3, [pc, #4]	@ (8014c7c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8014c76:	6818      	ldr	r0, [r3, #0]
 8014c78:	4770      	bx	lr
 8014c7a:	bf00      	nop
 8014c7c:	24026428 	.word	0x24026428

08014c80 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014c80:	b510      	push	{r4, lr}
 8014c82:	6803      	ldr	r3, [r0, #0]
 8014c84:	460c      	mov	r4, r1
 8014c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c88:	4798      	blx	r3
 8014c8a:	1b03      	subs	r3, r0, r4
 8014c8c:	4258      	negs	r0, r3
 8014c8e:	4158      	adcs	r0, r3
 8014c90:	bd10      	pop	{r4, pc}
	...

08014c94 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014c94:	4b01      	ldr	r3, [pc, #4]	@ (8014c9c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8014c96:	6019      	str	r1, [r3, #0]
 8014c98:	4770      	bx	lr
 8014c9a:	bf00      	nop
 8014c9c:	2402642c 	.word	0x2402642c

08014ca0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca4:	4696      	mov	lr, r2
 8014ca6:	b097      	sub	sp, #92	@ 0x5c
 8014ca8:	4605      	mov	r5, r0
 8014caa:	4614      	mov	r4, r2
 8014cac:	460e      	mov	r6, r1
 8014cae:	461f      	mov	r7, r3
 8014cb0:	f10d 0c1c 	add.w	ip, sp, #28
 8014cb4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8014cb8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8014cbc:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8014cc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cc8:	f8de 3000 	ldr.w	r3, [lr]
 8014ccc:	f104 0e14 	add.w	lr, r4, #20
 8014cd0:	f8cc 3000 	str.w	r3, [ip]
 8014cd4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014cd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ce0:	f8de 3000 	ldr.w	r3, [lr]
 8014ce4:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014ce8:	f8cc 3000 	str.w	r3, [ip]
 8014cec:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014cf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cf8:	f8de 3000 	ldr.w	r3, [lr]
 8014cfc:	4631      	mov	r1, r6
 8014cfe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014d00:	4628      	mov	r0, r5
 8014d02:	f8cc 3000 	str.w	r3, [ip]
 8014d06:	682b      	ldr	r3, [r5, #0]
 8014d08:	9201      	str	r2, [sp, #4]
 8014d0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014d0c:	f8cd 8008 	str.w	r8, [sp, #8]
 8014d10:	9200      	str	r2, [sp, #0]
 8014d12:	aa07      	add	r2, sp, #28
 8014d14:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014d18:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8014d1c:	463b      	mov	r3, r7
 8014d1e:	47d8      	blx	fp
 8014d20:	46a6      	mov	lr, r4
 8014d22:	f10d 0c1c 	add.w	ip, sp, #28
 8014d26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d2e:	f8de 3000 	ldr.w	r3, [lr]
 8014d32:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014d36:	343c      	adds	r4, #60	@ 0x3c
 8014d38:	f8cc 3000 	str.w	r3, [ip]
 8014d3c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014d40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d48:	f8de 3000 	ldr.w	r3, [lr]
 8014d4c:	f8cc 3000 	str.w	r3, [ip]
 8014d50:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d5a:	6823      	ldr	r3, [r4, #0]
 8014d5c:	4631      	mov	r1, r6
 8014d5e:	4628      	mov	r0, r5
 8014d60:	f8cc 3000 	str.w	r3, [ip]
 8014d64:	682b      	ldr	r3, [r5, #0]
 8014d66:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014d6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014d6c:	f8cd 8008 	str.w	r8, [sp, #8]
 8014d70:	9201      	str	r2, [sp, #4]
 8014d72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014d74:	9200      	str	r2, [sp, #0]
 8014d76:	aa07      	add	r2, sp, #28
 8014d78:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8014d7a:	463b      	mov	r3, r7
 8014d7c:	47a0      	blx	r4
 8014d7e:	b017      	add	sp, #92	@ 0x5c
 8014d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d84 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d88:	b08d      	sub	sp, #52	@ 0x34
 8014d8a:	4688      	mov	r8, r1
 8014d8c:	f8d3 c000 	ldr.w	ip, [r3]
 8014d90:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8014d92:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8014d96:	680f      	ldr	r7, [r1, #0]
 8014d98:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8014d9c:	eba7 070c 	sub.w	r7, r7, ip
 8014da0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8014da4:	edd3 6a07 	vldr	s13, [r3, #28]
 8014da8:	42bc      	cmp	r4, r7
 8014daa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014dac:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8014db0:	bfa8      	it	ge
 8014db2:	463c      	movge	r4, r7
 8014db4:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014db8:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014dbc:	ee07 4a90 	vmov	s15, r4
 8014dc0:	eb09 0e0c 	add.w	lr, r9, ip
 8014dc4:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8014dc8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014dcc:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8014dd0:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8014dd4:	4571      	cmp	r1, lr
 8014dd6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014dda:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014dde:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014de2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014de6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014dea:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014dee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014df2:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014df6:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014dfa:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014dfe:	f340 808c 	ble.w	8014f1a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8014e02:	eba1 060e 	sub.w	r6, r1, lr
 8014e06:	fb96 f5f4 	sdiv	r5, r6, r4
 8014e0a:	ee07 5a10 	vmov	s14, r5
 8014e0e:	2d00      	cmp	r5, #0
 8014e10:	fb04 6615 	mls	r6, r4, r5, r6
 8014e14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e18:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014e1c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014e20:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014e24:	dd12      	ble.n	8014e4c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014e26:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014e2a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014e2e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014e32:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e3a:	bf14      	ite	ne
 8014e3c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014e40:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014e44:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014e48:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014e4c:	fb05 f204 	mul.w	r2, r5, r4
 8014e50:	1abf      	subs	r7, r7, r2
 8014e52:	4494      	add	ip, r2
 8014e54:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014e58:	4411      	add	r1, r2
 8014e5a:	eb09 020c 	add.w	r2, r9, ip
 8014e5e:	b209      	sxth	r1, r1
 8014e60:	443a      	add	r2, r7
 8014e62:	428a      	cmp	r2, r1
 8014e64:	bfc4      	itt	gt
 8014e66:	eba1 0209 	subgt.w	r2, r1, r9
 8014e6a:	eba2 070c 	subgt.w	r7, r2, ip
 8014e6e:	2f00      	cmp	r7, #0
 8014e70:	dd50      	ble.n	8014f14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014e72:	fb97 f1f4 	sdiv	r1, r7, r4
 8014e76:	fb04 7211 	mls	r2, r4, r1, r7
 8014e7a:	b90a      	cbnz	r2, 8014e80 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014e7c:	3901      	subs	r1, #1
 8014e7e:	4622      	mov	r2, r4
 8014e80:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014e84:	6840      	ldr	r0, [r0, #4]
 8014e86:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8014e8a:	44b6      	add	lr, r6
 8014e8c:	f8d0 a000 	ldr.w	sl, [r0]
 8014e90:	2900      	cmp	r1, #0
 8014e92:	bfcc      	ite	gt
 8014e94:	46a1      	movgt	r9, r4
 8014e96:	4691      	movle	r9, r2
 8014e98:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014e9a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014e9c:	fb04 e505 	mla	r5, r4, r5, lr
 8014ea0:	eef0 6a42 	vmov.f32	s13, s4
 8014ea4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014ea8:	9008      	str	r0, [sp, #32]
 8014eaa:	eeb0 7a61 	vmov.f32	s14, s3
 8014eae:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8014eb0:	695b      	ldr	r3, [r3, #20]
 8014eb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014eb6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014eba:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014ebe:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014ec0:	445b      	add	r3, fp
 8014ec2:	9307      	str	r3, [sp, #28]
 8014ec4:	ee16 3a90 	vmov	r3, s13
 8014ec8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014ecc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014ed0:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014ed4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014ed8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014edc:	ee17 7a90 	vmov	r7, s15
 8014ee0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014ee4:	fb97 f7f4 	sdiv	r7, r7, r4
 8014ee8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014eec:	ee17 ca90 	vmov	ip, s15
 8014ef0:	fb9c fcf4 	sdiv	ip, ip, r4
 8014ef4:	fb0c 3306 	mla	r3, ip, r6, r3
 8014ef8:	9302      	str	r3, [sp, #8]
 8014efa:	ee17 3a10 	vmov	r3, s14
 8014efe:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014f02:	fb07 3706 	mla	r7, r7, r6, r3
 8014f06:	eba9 0306 	sub.w	r3, r9, r6
 8014f0a:	e9cd 4700 	strd	r4, r7, [sp]
 8014f0e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014f12:	47a0      	blx	r4
 8014f14:	b00d      	add	sp, #52	@ 0x34
 8014f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f1a:	2500      	movs	r5, #0
 8014f1c:	462e      	mov	r6, r5
 8014f1e:	e799      	b.n	8014e54 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014f20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f24:	b0db      	sub	sp, #364	@ 0x16c
 8014f26:	461d      	mov	r5, r3
 8014f28:	4614      	mov	r4, r2
 8014f2a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8014f2e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8014f30:	4629      	mov	r1, r5
 8014f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f34:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8014f38:	9009      	str	r0, [sp, #36]	@ 0x24
 8014f3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f3c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8014f40:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8014f44:	9310      	str	r3, [sp, #64]	@ 0x40
 8014f46:	6803      	ldr	r3, [r0, #0]
 8014f48:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8014f4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014f4e:	47b8      	blx	r7
 8014f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f52:	6058      	str	r0, [r3, #4]
 8014f54:	2800      	cmp	r0, #0
 8014f56:	f000 83a1 	beq.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f5a:	682b      	ldr	r3, [r5, #0]
 8014f5c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8014f60:	ed94 7a02 	vldr	s14, [r4, #8]
 8014f64:	9314      	str	r3, [sp, #80]	@ 0x50
 8014f66:	686b      	ldr	r3, [r5, #4]
 8014f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8014f6e:	4bc1      	ldr	r3, [pc, #772]	@ (8015274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014f70:	7819      	ldrb	r1, [r3, #0]
 8014f72:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014f76:	2900      	cmp	r1, #0
 8014f78:	bf16      	itet	ne
 8014f7a:	4619      	movne	r1, r3
 8014f7c:	4611      	moveq	r1, r2
 8014f7e:	4613      	movne	r3, r2
 8014f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f84:	9116      	str	r1, [sp, #88]	@ 0x58
 8014f86:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8014f8a:	f240 8387 	bls.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f8e:	ed94 7a07 	vldr	s14, [r4, #28]
 8014f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f9a:	f240 837f 	bls.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f9e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8014fa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014faa:	f240 8377 	bls.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fae:	6822      	ldr	r2, [r4, #0]
 8014fb0:	4bb1      	ldr	r3, [pc, #708]	@ (8015278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	f2c0 8372 	blt.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fb8:	49b0      	ldr	r1, [pc, #704]	@ (801527c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014fba:	6963      	ldr	r3, [r4, #20]
 8014fbc:	428a      	cmp	r2, r1
 8014fbe:	f300 836d 	bgt.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fc2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8014fc6:	48ae      	ldr	r0, [pc, #696]	@ (8015280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014fc8:	33ff      	adds	r3, #255	@ 0xff
 8014fca:	4283      	cmp	r3, r0
 8014fcc:	f200 8366 	bhi.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fd0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014fd2:	4dac      	ldr	r5, [pc, #688]	@ (8015284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014fd4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8014fd8:	33ff      	adds	r3, #255	@ 0xff
 8014fda:	42ab      	cmp	r3, r5
 8014fdc:	f200 835e 	bhi.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fe0:	6862      	ldr	r2, [r4, #4]
 8014fe2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8014fe6:	33ff      	adds	r3, #255	@ 0xff
 8014fe8:	4283      	cmp	r3, r0
 8014fea:	f200 8357 	bhi.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fee:	69a1      	ldr	r1, [r4, #24]
 8014ff0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8014ff4:	33ff      	adds	r3, #255	@ 0xff
 8014ff6:	4283      	cmp	r3, r0
 8014ff8:	f200 8350 	bhi.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ffc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8014ffe:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8015002:	30ff      	adds	r0, #255	@ 0xff
 8015004:	42a8      	cmp	r0, r5
 8015006:	f200 8349 	bhi.w	801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801500a:	428a      	cmp	r2, r1
 801500c:	f280 8110 	bge.w	8015230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015010:	429a      	cmp	r2, r3
 8015012:	f300 8119 	bgt.w	8015248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015016:	4299      	cmp	r1, r3
 8015018:	f280 811d 	bge.w	8015256 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801501c:	2502      	movs	r5, #2
 801501e:	2701      	movs	r7, #1
 8015020:	46a9      	mov	r9, r5
 8015022:	46b8      	mov	r8, r7
 8015024:	f04f 0a00 	mov.w	sl, #0
 8015028:	4621      	mov	r1, r4
 801502a:	a849      	add	r0, sp, #292	@ 0x124
 801502c:	f004 f9ae 	bl	801938c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015030:	4622      	mov	r2, r4
 8015032:	4653      	mov	r3, sl
 8015034:	a949      	add	r1, sp, #292	@ 0x124
 8015036:	f8cd 9000 	str.w	r9, [sp]
 801503a:	a819      	add	r0, sp, #100	@ 0x64
 801503c:	f004 fad6 	bl	80195ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015040:	4622      	mov	r2, r4
 8015042:	4653      	mov	r3, sl
 8015044:	a949      	add	r1, sp, #292	@ 0x124
 8015046:	f8cd 8000 	str.w	r8, [sp]
 801504a:	a829      	add	r0, sp, #164	@ 0xa4
 801504c:	f004 face 	bl	80195ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015050:	4643      	mov	r3, r8
 8015052:	4622      	mov	r2, r4
 8015054:	a949      	add	r1, sp, #292	@ 0x124
 8015056:	f8cd 9000 	str.w	r9, [sp]
 801505a:	a839      	add	r0, sp, #228	@ 0xe4
 801505c:	f004 fac6 	bl	80195ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015060:	42af      	cmp	r7, r5
 8015062:	af12      	add	r7, sp, #72	@ 0x48
 8015064:	bfb7      	itett	lt
 8015066:	2300      	movlt	r3, #0
 8015068:	2301      	movge	r3, #1
 801506a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801506c:	ac19      	addlt	r4, sp, #100	@ 0x64
 801506e:	bfb1      	iteee	lt
 8015070:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015072:	ad19      	addge	r5, sp, #100	@ 0x64
 8015074:	930e      	strge	r3, [sp, #56]	@ 0x38
 8015076:	ac29      	addge	r4, sp, #164	@ 0xa4
 8015078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801507a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801507e:	e887 0003 	stmia.w	r7, {r0, r1}
 8015082:	b928      	cbnz	r0, 8015090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015084:	4b80      	ldr	r3, [pc, #512]	@ (8015288 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015086:	6818      	ldr	r0, [r3, #0]
 8015088:	6803      	ldr	r3, [r0, #0]
 801508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801508c:	4798      	blx	r3
 801508e:	6038      	str	r0, [r7, #0]
 8015090:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015092:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015096:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801509a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801509c:	930c      	str	r3, [sp, #48]	@ 0x30
 801509e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80150a0:	6963      	ldr	r3, [r4, #20]
 80150a2:	440b      	add	r3, r1
 80150a4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80150a8:	4408      	add	r0, r1
 80150aa:	b200      	sxth	r0, r0
 80150ac:	4283      	cmp	r3, r0
 80150ae:	900d      	str	r0, [sp, #52]	@ 0x34
 80150b0:	f280 80dd 	bge.w	801526e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80150b4:	428b      	cmp	r3, r1
 80150b6:	da08      	bge.n	80150ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80150b8:	2a00      	cmp	r2, #0
 80150ba:	dd06      	ble.n	80150ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80150bc:	1acb      	subs	r3, r1, r3
 80150be:	429a      	cmp	r2, r3
 80150c0:	f2c0 80e4 	blt.w	801528c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f300 80e2 	bgt.w	801528e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80150ca:	6967      	ldr	r7, [r4, #20]
 80150cc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80150d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150d2:	443b      	add	r3, r7
 80150d4:	461f      	mov	r7, r3
 80150d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80150d8:	1bdf      	subs	r7, r3, r7
 80150da:	4297      	cmp	r7, r2
 80150dc:	bfa8      	it	ge
 80150de:	4617      	movge	r7, r2
 80150e0:	2f00      	cmp	r7, #0
 80150e2:	f340 8166 	ble.w	80153b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80150e6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80150e8:	6829      	ldr	r1, [r5, #0]
 80150ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80150ee:	f9bb 3000 	ldrsh.w	r3, [fp]
 80150f2:	4411      	add	r1, r2
 80150f4:	6820      	ldr	r0, [r4, #0]
 80150f6:	4299      	cmp	r1, r3
 80150f8:	dd1a      	ble.n	8015130 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80150fa:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80150fe:	4402      	add	r2, r0
 8015100:	440b      	add	r3, r1
 8015102:	b21b      	sxth	r3, r3
 8015104:	429a      	cmp	r2, r3
 8015106:	dc13      	bgt.n	8015130 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015108:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801510a:	a912      	add	r1, sp, #72	@ 0x48
 801510c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801510e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	9206      	str	r2, [sp, #24]
 8015114:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015116:	9500      	str	r5, [sp, #0]
 8015118:	9205      	str	r2, [sp, #20]
 801511a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801511c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015120:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015122:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015126:	aa49      	add	r2, sp, #292	@ 0x124
 8015128:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801512c:	4623      	mov	r3, r4
 801512e:	47c8      	blx	r9
 8015130:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015134:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015138:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801513c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015140:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015144:	68a1      	ldr	r1, [r4, #8]
 8015146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801514a:	ed94 6a08 	vldr	s12, [r4, #32]
 801514e:	edd4 6a07 	vldr	s13, [r4, #28]
 8015152:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015156:	ee76 6a86 	vadd.f32	s13, s13, s12
 801515a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801515e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015162:	edc4 6a07 	vstr	s13, [r4, #28]
 8015166:	441a      	add	r2, r3
 8015168:	6963      	ldr	r3, [r4, #20]
 801516a:	3301      	adds	r3, #1
 801516c:	6022      	str	r2, [r4, #0]
 801516e:	6163      	str	r3, [r4, #20]
 8015170:	69a3      	ldr	r3, [r4, #24]
 8015172:	3b01      	subs	r3, #1
 8015174:	61a3      	str	r3, [r4, #24]
 8015176:	6923      	ldr	r3, [r4, #16]
 8015178:	440b      	add	r3, r1
 801517a:	68e1      	ldr	r1, [r4, #12]
 801517c:	428b      	cmp	r3, r1
 801517e:	6123      	str	r3, [r4, #16]
 8015180:	db15      	blt.n	80151ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015182:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015186:	3201      	adds	r2, #1
 8015188:	1a5b      	subs	r3, r3, r1
 801518a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801518e:	6022      	str	r2, [r4, #0]
 8015190:	6123      	str	r3, [r4, #16]
 8015192:	edc4 6a07 	vstr	s13, [r4, #28]
 8015196:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801519a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801519e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80151a2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80151a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151aa:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80151ae:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80151b2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80151b6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80151ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80151be:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80151c2:	68a9      	ldr	r1, [r5, #8]
 80151c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80151c8:	ed95 6a08 	vldr	s12, [r5, #32]
 80151cc:	edd5 6a07 	vldr	s13, [r5, #28]
 80151d0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80151d4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80151d8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80151dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151e0:	edc5 6a07 	vstr	s13, [r5, #28]
 80151e4:	441a      	add	r2, r3
 80151e6:	696b      	ldr	r3, [r5, #20]
 80151e8:	3301      	adds	r3, #1
 80151ea:	602a      	str	r2, [r5, #0]
 80151ec:	616b      	str	r3, [r5, #20]
 80151ee:	69ab      	ldr	r3, [r5, #24]
 80151f0:	3b01      	subs	r3, #1
 80151f2:	61ab      	str	r3, [r5, #24]
 80151f4:	692b      	ldr	r3, [r5, #16]
 80151f6:	440b      	add	r3, r1
 80151f8:	68e9      	ldr	r1, [r5, #12]
 80151fa:	428b      	cmp	r3, r1
 80151fc:	612b      	str	r3, [r5, #16]
 80151fe:	db15      	blt.n	801522c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015200:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015204:	3201      	adds	r2, #1
 8015206:	1a5b      	subs	r3, r3, r1
 8015208:	ee76 6a26 	vadd.f32	s13, s12, s13
 801520c:	602a      	str	r2, [r5, #0]
 801520e:	612b      	str	r3, [r5, #16]
 8015210:	edc5 6a07 	vstr	s13, [r5, #28]
 8015214:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015218:	ee36 7a87 	vadd.f32	s14, s13, s14
 801521c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015220:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015228:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801522c:	3f01      	subs	r7, #1
 801522e:	e757      	b.n	80150e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015230:	4299      	cmp	r1, r3
 8015232:	dc13      	bgt.n	801525c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015234:	429a      	cmp	r2, r3
 8015236:	da14      	bge.n	8015262 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015238:	2502      	movs	r5, #2
 801523a:	2703      	movs	r7, #3
 801523c:	f04f 0800 	mov.w	r8, #0
 8015240:	46a9      	mov	r9, r5
 8015242:	f04f 0a01 	mov.w	sl, #1
 8015246:	e6ef      	b.n	8015028 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015248:	2501      	movs	r5, #1
 801524a:	2700      	movs	r7, #0
 801524c:	46a9      	mov	r9, r5
 801524e:	46b8      	mov	r8, r7
 8015250:	f04f 0a02 	mov.w	sl, #2
 8015254:	e6e8      	b.n	8015028 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015256:	2501      	movs	r5, #1
 8015258:	2702      	movs	r7, #2
 801525a:	e6e1      	b.n	8015020 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801525c:	2500      	movs	r5, #0
 801525e:	2701      	movs	r7, #1
 8015260:	e7f4      	b.n	801524c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015262:	2702      	movs	r7, #2
 8015264:	2503      	movs	r5, #3
 8015266:	f04f 0900 	mov.w	r9, #0
 801526a:	46b8      	mov	r8, r7
 801526c:	e7e9      	b.n	8015242 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801526e:	4613      	mov	r3, r2
 8015270:	e728      	b.n	80150c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015272:	bf00      	nop
 8015274:	24026414 	.word	0x24026414
 8015278:	fffd8f01 	.word	0xfffd8f01
 801527c:	00027100 	.word	0x00027100
 8015280:	0004e1ff 	.word	0x0004e1ff
 8015284:	0004e1fe 	.word	0x0004e1fe
 8015288:	2402641c 	.word	0x2402641c
 801528c:	4613      	mov	r3, r2
 801528e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015290:	469e      	mov	lr, r3
 8015292:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015294:	469c      	mov	ip, r3
 8015296:	9111      	str	r1, [sp, #68]	@ 0x44
 8015298:	f04f 0900 	mov.w	r9, #0
 801529c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80152a0:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80152a4:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80152a8:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80152ac:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 80152b0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80152b4:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80152b8:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80152bc:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80152c0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80152c4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80152c8:	f1bc 0f00 	cmp.w	ip, #0
 80152cc:	d147      	bne.n	801535e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80152ce:	eb03 0c07 	add.w	ip, r3, r7
 80152d2:	1ad7      	subs	r7, r2, r3
 80152d4:	f1b9 0f00 	cmp.w	r9, #0
 80152d8:	d009      	beq.n	80152ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80152da:	9029      	str	r0, [sp, #164]	@ 0xa4
 80152dc:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80152e0:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80152e4:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80152e8:	912d      	str	r1, [sp, #180]	@ 0xb4
 80152ea:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80152ee:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80152f0:	f04f 0800 	mov.w	r8, #0
 80152f4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80152f8:	9111      	str	r1, [sp, #68]	@ 0x44
 80152fa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80152fe:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015302:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015306:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801530a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801530e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015312:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015316:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801531a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801531e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015322:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015326:	f1be 0f00 	cmp.w	lr, #0
 801532a:	d031      	beq.n	8015390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801532c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801532e:	4450      	add	r0, sl
 8015330:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015334:	4431      	add	r1, r6
 8015336:	ee37 7a04 	vadd.f32	s14, s14, s8
 801533a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801533e:	4549      	cmp	r1, r9
 8015340:	db08      	blt.n	8015354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015342:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015346:	3001      	adds	r0, #1
 8015348:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801534c:	eba1 0109 	sub.w	r1, r1, r9
 8015350:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015354:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015358:	f04f 0801 	mov.w	r8, #1
 801535c:	e7e3      	b.n	8015326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801535e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015360:	4450      	add	r0, sl
 8015362:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015366:	4431      	add	r1, r6
 8015368:	ee77 7a84 	vadd.f32	s15, s15, s8
 801536c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015370:	4541      	cmp	r1, r8
 8015372:	db08      	blt.n	8015386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015374:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015378:	3001      	adds	r0, #1
 801537a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801537e:	eba1 0108 	sub.w	r1, r1, r8
 8015382:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015386:	f10c 3cff 	add.w	ip, ip, #4294967295
 801538a:	f04f 0901 	mov.w	r9, #1
 801538e:	e79b      	b.n	80152c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015390:	449c      	add	ip, r3
 8015392:	1aff      	subs	r7, r7, r3
 8015394:	f1b8 0f00 	cmp.w	r8, #0
 8015398:	d009      	beq.n	80153ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801539a:	9019      	str	r0, [sp, #100]	@ 0x64
 801539c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80153a0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80153a4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80153a8:	911d      	str	r1, [sp, #116]	@ 0x74
 80153aa:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80153ae:	1ad2      	subs	r2, r2, r3
 80153b0:	e68b      	b.n	80150ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80153b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153b4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	f000 80d1 	beq.w	801555e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80153bc:	ad19      	add	r5, sp, #100	@ 0x64
 80153be:	ac39      	add	r4, sp, #228	@ 0xe4
 80153c0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80153c2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80153c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80153ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80153cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80153ce:	6963      	ldr	r3, [r4, #20]
 80153d0:	440b      	add	r3, r1
 80153d2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80153d6:	4408      	add	r0, r1
 80153d8:	b200      	sxth	r0, r0
 80153da:	4283      	cmp	r3, r0
 80153dc:	900d      	str	r0, [sp, #52]	@ 0x34
 80153de:	f280 80c1 	bge.w	8015564 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80153e2:	428b      	cmp	r3, r1
 80153e4:	da08      	bge.n	80153f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	dd06      	ble.n	80153f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80153ea:	1acb      	subs	r3, r1, r3
 80153ec:	429a      	cmp	r2, r3
 80153ee:	f2c0 80bb 	blt.w	8015568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	f300 80b9 	bgt.w	801556a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80153f8:	6967      	ldr	r7, [r4, #20]
 80153fa:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80153fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015400:	443b      	add	r3, r7
 8015402:	461f      	mov	r7, r3
 8015404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015406:	1bdf      	subs	r7, r3, r7
 8015408:	4297      	cmp	r7, r2
 801540a:	bfa8      	it	ge
 801540c:	4617      	movge	r7, r2
 801540e:	2f00      	cmp	r7, #0
 8015410:	f340 813c 	ble.w	801568c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015414:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015416:	6829      	ldr	r1, [r5, #0]
 8015418:	f9b3 2000 	ldrsh.w	r2, [r3]
 801541c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015420:	4411      	add	r1, r2
 8015422:	6820      	ldr	r0, [r4, #0]
 8015424:	4299      	cmp	r1, r3
 8015426:	dd1a      	ble.n	801545e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015428:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801542c:	4402      	add	r2, r0
 801542e:	440b      	add	r3, r1
 8015430:	b21b      	sxth	r3, r3
 8015432:	429a      	cmp	r2, r3
 8015434:	dc13      	bgt.n	801545e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015436:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015438:	a912      	add	r1, sp, #72	@ 0x48
 801543a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801543c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	9206      	str	r2, [sp, #24]
 8015442:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015444:	9500      	str	r5, [sp, #0]
 8015446:	9205      	str	r2, [sp, #20]
 8015448:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801544a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801544e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015450:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015454:	aa49      	add	r2, sp, #292	@ 0x124
 8015456:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801545a:	4623      	mov	r3, r4
 801545c:	47c8      	blx	r9
 801545e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015462:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015466:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801546a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801546e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015472:	68a1      	ldr	r1, [r4, #8]
 8015474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015478:	ed94 6a08 	vldr	s12, [r4, #32]
 801547c:	edd4 6a07 	vldr	s13, [r4, #28]
 8015480:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015484:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015488:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801548c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015490:	edc4 6a07 	vstr	s13, [r4, #28]
 8015494:	441a      	add	r2, r3
 8015496:	6963      	ldr	r3, [r4, #20]
 8015498:	3301      	adds	r3, #1
 801549a:	6022      	str	r2, [r4, #0]
 801549c:	6163      	str	r3, [r4, #20]
 801549e:	69a3      	ldr	r3, [r4, #24]
 80154a0:	3b01      	subs	r3, #1
 80154a2:	61a3      	str	r3, [r4, #24]
 80154a4:	6923      	ldr	r3, [r4, #16]
 80154a6:	440b      	add	r3, r1
 80154a8:	68e1      	ldr	r1, [r4, #12]
 80154aa:	428b      	cmp	r3, r1
 80154ac:	6123      	str	r3, [r4, #16]
 80154ae:	db15      	blt.n	80154dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80154b0:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80154b4:	3201      	adds	r2, #1
 80154b6:	1a5b      	subs	r3, r3, r1
 80154b8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80154bc:	6022      	str	r2, [r4, #0]
 80154be:	6123      	str	r3, [r4, #16]
 80154c0:	edc4 6a07 	vstr	s13, [r4, #28]
 80154c4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80154c8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80154cc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80154d0:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80154d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154d8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80154dc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80154e0:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80154e4:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80154e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80154ec:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80154f0:	68a9      	ldr	r1, [r5, #8]
 80154f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154f6:	ed95 6a08 	vldr	s12, [r5, #32]
 80154fa:	edd5 6a07 	vldr	s13, [r5, #28]
 80154fe:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015502:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015506:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801550a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801550e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015512:	441a      	add	r2, r3
 8015514:	696b      	ldr	r3, [r5, #20]
 8015516:	3301      	adds	r3, #1
 8015518:	602a      	str	r2, [r5, #0]
 801551a:	616b      	str	r3, [r5, #20]
 801551c:	69ab      	ldr	r3, [r5, #24]
 801551e:	3b01      	subs	r3, #1
 8015520:	61ab      	str	r3, [r5, #24]
 8015522:	692b      	ldr	r3, [r5, #16]
 8015524:	440b      	add	r3, r1
 8015526:	68e9      	ldr	r1, [r5, #12]
 8015528:	428b      	cmp	r3, r1
 801552a:	612b      	str	r3, [r5, #16]
 801552c:	db15      	blt.n	801555a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801552e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015532:	3201      	adds	r2, #1
 8015534:	1a5b      	subs	r3, r3, r1
 8015536:	ee76 6a26 	vadd.f32	s13, s12, s13
 801553a:	602a      	str	r2, [r5, #0]
 801553c:	612b      	str	r3, [r5, #16]
 801553e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015542:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015546:	ee36 7a87 	vadd.f32	s14, s13, s14
 801554a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801554e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015556:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801555a:	3f01      	subs	r7, #1
 801555c:	e757      	b.n	801540e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801555e:	ad39      	add	r5, sp, #228	@ 0xe4
 8015560:	ac19      	add	r4, sp, #100	@ 0x64
 8015562:	e72d      	b.n	80153c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015564:	4613      	mov	r3, r2
 8015566:	e744      	b.n	80153f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015568:	4613      	mov	r3, r2
 801556a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801556c:	469e      	mov	lr, r3
 801556e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8015572:	461f      	mov	r7, r3
 8015574:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8015578:	f04f 0900 	mov.w	r9, #0
 801557c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8015580:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8015584:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8015588:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801558c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8015590:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8015592:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8015596:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801559a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801559e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80155a2:	960e      	str	r6, [sp, #56]	@ 0x38
 80155a4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80155a8:	2f00      	cmp	r7, #0
 80155aa:	d146      	bne.n	801563a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80155ac:	449c      	add	ip, r3
 80155ae:	1ad7      	subs	r7, r2, r3
 80155b0:	f1b9 0f00 	cmp.w	r9, #0
 80155b4:	d009      	beq.n	80155ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80155b6:	9039      	str	r0, [sp, #228]	@ 0xe4
 80155b8:	913d      	str	r1, [sp, #244]	@ 0xf4
 80155ba:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80155be:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80155c2:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80155c6:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80155ca:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80155cc:	f04f 0800 	mov.w	r8, #0
 80155d0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80155d4:	910e      	str	r1, [sp, #56]	@ 0x38
 80155d6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80155da:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80155de:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80155e2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80155e6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80155ea:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80155ee:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80155f2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80155f6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80155fa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80155fe:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015602:	f1be 0f00 	cmp.w	lr, #0
 8015606:	d030      	beq.n	801566a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015608:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801560a:	4450      	add	r0, sl
 801560c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015610:	4431      	add	r1, r6
 8015612:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015616:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801561a:	4549      	cmp	r1, r9
 801561c:	db08      	blt.n	8015630 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801561e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015622:	3001      	adds	r0, #1
 8015624:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015628:	eba1 0109 	sub.w	r1, r1, r9
 801562c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015630:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015634:	f04f 0801 	mov.w	r8, #1
 8015638:	e7e3      	b.n	8015602 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801563a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801563c:	4450      	add	r0, sl
 801563e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015642:	4431      	add	r1, r6
 8015644:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015648:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801564c:	4541      	cmp	r1, r8
 801564e:	db08      	blt.n	8015662 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015650:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015654:	3001      	adds	r0, #1
 8015656:	ee37 7a25 	vadd.f32	s14, s14, s11
 801565a:	eba1 0108 	sub.w	r1, r1, r8
 801565e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015662:	3f01      	subs	r7, #1
 8015664:	f04f 0901 	mov.w	r9, #1
 8015668:	e79e      	b.n	80155a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801566a:	449c      	add	ip, r3
 801566c:	1aff      	subs	r7, r7, r3
 801566e:	f1b8 0f00 	cmp.w	r8, #0
 8015672:	d009      	beq.n	8015688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015674:	9019      	str	r0, [sp, #100]	@ 0x64
 8015676:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801567a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801567e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015682:	911d      	str	r1, [sp, #116]	@ 0x74
 8015684:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015688:	1ad2      	subs	r2, r2, r3
 801568a:	e6b5      	b.n	80153f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801568c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	b923      	cbnz	r3, 801569c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015692:	4b04      	ldr	r3, [pc, #16]	@ (80156a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015694:	6818      	ldr	r0, [r3, #0]
 8015696:	6803      	ldr	r3, [r0, #0]
 8015698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801569a:	4798      	blx	r3
 801569c:	b05b      	add	sp, #364	@ 0x16c
 801569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a2:	bf00      	nop
 80156a4:	2402641c 	.word	0x2402641c

080156a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80156a8:	b570      	push	{r4, r5, r6, lr}
 80156aa:	4604      	mov	r4, r0
 80156ac:	2500      	movs	r5, #0
 80156ae:	9805      	ldr	r0, [sp, #20]
 80156b0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80156b4:	6061      	str	r1, [r4, #4]
 80156b6:	8263      	strh	r3, [r4, #18]
 80156b8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80156bc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80156c0:	8025      	strh	r5, [r4, #0]
 80156c2:	7221      	strb	r1, [r4, #8]
 80156c4:	7266      	strb	r6, [r4, #9]
 80156c6:	60e0      	str	r0, [r4, #12]
 80156c8:	8222      	strh	r2, [r4, #16]
 80156ca:	82a3      	strh	r3, [r4, #20]
 80156cc:	82e5      	strh	r5, [r4, #22]
 80156ce:	8325      	strh	r5, [r4, #24]
 80156d0:	8365      	strh	r5, [r4, #26]
 80156d2:	83a5      	strh	r5, [r4, #28]
 80156d4:	83e5      	strh	r5, [r4, #30]
 80156d6:	8425      	strh	r5, [r4, #32]
 80156d8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 80156dc:	b32e      	cbz	r6, 801572a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156de:	6803      	ldr	r3, [r0, #0]
 80156e0:	695b      	ldr	r3, [r3, #20]
 80156e2:	4798      	blx	r3
 80156e4:	4606      	mov	r6, r0
 80156e6:	b300      	cbz	r0, 801572a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156e8:	68e0      	ldr	r0, [r4, #12]
 80156ea:	4631      	mov	r1, r6
 80156ec:	6803      	ldr	r3, [r0, #0]
 80156ee:	68db      	ldr	r3, [r3, #12]
 80156f0:	4798      	blx	r3
 80156f2:	4605      	mov	r5, r0
 80156f4:	b1c8      	cbz	r0, 801572a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156f6:	7b43      	ldrb	r3, [r0, #13]
 80156f8:	7a82      	ldrb	r2, [r0, #10]
 80156fa:	005b      	lsls	r3, r3, #1
 80156fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015700:	4313      	orrs	r3, r2
 8015702:	8423      	strh	r3, [r4, #32]
 8015704:	7a63      	ldrb	r3, [r4, #9]
 8015706:	2b06      	cmp	r3, #6
 8015708:	d10f      	bne.n	801572a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801570a:	68e0      	ldr	r0, [r4, #12]
 801570c:	462a      	mov	r2, r5
 801570e:	4631      	mov	r1, r6
 8015710:	6803      	ldr	r3, [r0, #0]
 8015712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015714:	4798      	blx	r3
 8015716:	7b6b      	ldrb	r3, [r5, #13]
 8015718:	005b      	lsls	r3, r3, #1
 801571a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801571e:	7aab      	ldrb	r3, [r5, #10]
 8015720:	4313      	orrs	r3, r2
 8015722:	4418      	add	r0, r3
 8015724:	8c23      	ldrh	r3, [r4, #32]
 8015726:	4418      	add	r0, r3
 8015728:	8420      	strh	r0, [r4, #32]
 801572a:	4620      	mov	r0, r4
 801572c:	bd70      	pop	{r4, r5, r6, pc}

0801572e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801572e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015732:	2400      	movs	r4, #0
 8015734:	b085      	sub	sp, #20
 8015736:	4681      	mov	r9, r0
 8015738:	4688      	mov	r8, r1
 801573a:	4692      	mov	sl, r2
 801573c:	469b      	mov	fp, r3
 801573e:	4627      	mov	r7, r4
 8015740:	4625      	mov	r5, r4
 8015742:	4626      	mov	r6, r4
 8015744:	4554      	cmp	r4, sl
 8015746:	da2a      	bge.n	801579e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015748:	2300      	movs	r3, #0
 801574a:	9303      	str	r3, [sp, #12]
 801574c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015750:	429d      	cmp	r5, r3
 8015752:	d004      	beq.n	801575e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015754:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015758:	429d      	cmp	r5, r3
 801575a:	bf18      	it	ne
 801575c:	462f      	movne	r7, r5
 801575e:	ab03      	add	r3, sp, #12
 8015760:	4642      	mov	r2, r8
 8015762:	4659      	mov	r1, fp
 8015764:	4648      	mov	r0, r9
 8015766:	f003 fc27 	bl	8018fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801576a:	4605      	mov	r5, r0
 801576c:	b1b8      	cbz	r0, 801579e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801576e:	280a      	cmp	r0, #10
 8015770:	d015      	beq.n	801579e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015772:	9a03      	ldr	r2, [sp, #12]
 8015774:	b18a      	cbz	r2, 801579a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015776:	7b50      	ldrb	r0, [r2, #13]
 8015778:	4639      	mov	r1, r7
 801577a:	7a93      	ldrb	r3, [r2, #10]
 801577c:	0040      	lsls	r0, r0, #1
 801577e:	8895      	ldrh	r5, [r2, #4]
 8015780:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8015784:	4303      	orrs	r3, r0
 8015786:	4640      	mov	r0, r8
 8015788:	9301      	str	r3, [sp, #4]
 801578a:	f8d8 3000 	ldr.w	r3, [r8]
 801578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015790:	4798      	blx	r3
 8015792:	9b01      	ldr	r3, [sp, #4]
 8015794:	4418      	add	r0, r3
 8015796:	4406      	add	r6, r0
 8015798:	b2b6      	uxth	r6, r6
 801579a:	3401      	adds	r4, #1
 801579c:	e7d2      	b.n	8015744 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801579e:	4630      	mov	r0, r6
 80157a0:	b005      	add	sp, #20
 80157a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80157a6:	2a02      	cmp	r2, #2
 80157a8:	b530      	push	{r4, r5, lr}
 80157aa:	d011      	beq.n	80157d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80157ac:	2a03      	cmp	r2, #3
 80157ae:	d01c      	beq.n	80157ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80157b0:	2a01      	cmp	r2, #1
 80157b2:	d10c      	bne.n	80157ce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80157b4:	888b      	ldrh	r3, [r1, #4]
 80157b6:	8801      	ldrh	r1, [r0, #0]
 80157b8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80157bc:	1a5b      	subs	r3, r3, r1
 80157be:	8844      	ldrh	r4, [r0, #2]
 80157c0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80157c4:	1a9b      	subs	r3, r3, r2
 80157c6:	8004      	strh	r4, [r0, #0]
 80157c8:	8081      	strh	r1, [r0, #4]
 80157ca:	8043      	strh	r3, [r0, #2]
 80157cc:	80c2      	strh	r2, [r0, #6]
 80157ce:	bd30      	pop	{r4, r5, pc}
 80157d0:	88cb      	ldrh	r3, [r1, #6]
 80157d2:	8842      	ldrh	r2, [r0, #2]
 80157d4:	1a9b      	subs	r3, r3, r2
 80157d6:	88c2      	ldrh	r2, [r0, #6]
 80157d8:	1a9b      	subs	r3, r3, r2
 80157da:	888a      	ldrh	r2, [r1, #4]
 80157dc:	8801      	ldrh	r1, [r0, #0]
 80157de:	8043      	strh	r3, [r0, #2]
 80157e0:	1a52      	subs	r2, r2, r1
 80157e2:	8881      	ldrh	r1, [r0, #4]
 80157e4:	1a52      	subs	r2, r2, r1
 80157e6:	8002      	strh	r2, [r0, #0]
 80157e8:	e7f1      	b.n	80157ce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80157ea:	88cb      	ldrh	r3, [r1, #6]
 80157ec:	8841      	ldrh	r1, [r0, #2]
 80157ee:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80157f2:	1a5b      	subs	r3, r3, r1
 80157f4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80157f8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80157fc:	1a9b      	subs	r3, r3, r2
 80157fe:	8045      	strh	r5, [r0, #2]
 8015800:	8082      	strh	r2, [r0, #4]
 8015802:	8003      	strh	r3, [r0, #0]
 8015804:	80c4      	strh	r4, [r0, #6]
 8015806:	e7e2      	b.n	80157ce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015808 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801580c:	b09f      	sub	sp, #124	@ 0x7c
 801580e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015810:	9312      	str	r3, [sp, #72]	@ 0x48
 8015812:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015814:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015816:	8812      	ldrh	r2, [r2, #0]
 8015818:	889b      	ldrh	r3, [r3, #4]
 801581a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801581c:	4413      	add	r3, r2
 801581e:	900e      	str	r0, [sp, #56]	@ 0x38
 8015820:	6828      	ldr	r0, [r5, #0]
 8015822:	b21b      	sxth	r3, r3
 8015824:	9117      	str	r1, [sp, #92]	@ 0x5c
 8015826:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801582a:	9311      	str	r3, [sp, #68]	@ 0x44
 801582c:	6803      	ldr	r3, [r0, #0]
 801582e:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8015832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015834:	4798      	blx	r3
 8015836:	682b      	ldr	r3, [r5, #0]
 8015838:	9013      	str	r0, [sp, #76]	@ 0x4c
 801583a:	7b1a      	ldrb	r2, [r3, #12]
 801583c:	7adb      	ldrb	r3, [r3, #11]
 801583e:	9215      	str	r2, [sp, #84]	@ 0x54
 8015840:	9316      	str	r3, [sp, #88]	@ 0x58
 8015842:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8015846:	2c00      	cmp	r4, #0
 8015848:	d067      	beq.n	801591a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801584a:	7c2b      	ldrb	r3, [r5, #16]
 801584c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801584e:	2b06      	cmp	r3, #6
 8015850:	bf14      	ite	ne
 8015852:	2301      	movne	r3, #1
 8015854:	2302      	moveq	r3, #2
 8015856:	4413      	add	r3, r2
 8015858:	f04f 0900 	mov.w	r9, #0
 801585c:	9310      	str	r3, [sp, #64]	@ 0x40
 801585e:	464c      	mov	r4, r9
 8015860:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8015864:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8015868:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801586a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801586c:	4293      	cmp	r3, r2
 801586e:	f280 808b 	bge.w	8015988 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8015872:	2300      	movs	r3, #0
 8015874:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8015878:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 801587c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015880:	429c      	cmp	r4, r3
 8015882:	d006      	beq.n	8015892 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8015884:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015886:	f242 020b 	movw	r2, #8203	@ 0x200b
 801588a:	4294      	cmp	r4, r2
 801588c:	bf18      	it	ne
 801588e:	4623      	movne	r3, r4
 8015890:	930c      	str	r3, [sp, #48]	@ 0x30
 8015892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015894:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8015896:	682a      	ldr	r2, [r5, #0]
 8015898:	428b      	cmp	r3, r1
 801589a:	db40      	blt.n	801591e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801589c:	6813      	ldr	r3, [r2, #0]
 801589e:	4610      	mov	r0, r2
 80158a0:	695b      	ldr	r3, [r3, #20]
 80158a2:	4798      	blx	r3
 80158a4:	4604      	mov	r4, r0
 80158a6:	6828      	ldr	r0, [r5, #0]
 80158a8:	aa1d      	add	r2, sp, #116	@ 0x74
 80158aa:	4621      	mov	r1, r4
 80158ac:	6803      	ldr	r3, [r0, #0]
 80158ae:	689f      	ldr	r7, [r3, #8]
 80158b0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 80158b4:	47b8      	blx	r7
 80158b6:	901c      	str	r0, [sp, #112]	@ 0x70
 80158b8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80158bc:	429c      	cmp	r4, r3
 80158be:	f000 80eb 	beq.w	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80158c2:	f242 030b 	movw	r3, #8203	@ 0x200b
 80158c6:	429c      	cmp	r4, r3
 80158c8:	f000 80e6 	beq.w	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80158cc:	2c00      	cmp	r4, #0
 80158ce:	f000 810d 	beq.w	8015aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80158d2:	2c0a      	cmp	r4, #10
 80158d4:	d05e      	beq.n	8015994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80158d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80158d8:	b36a      	cbz	r2, 8015936 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80158da:	8894      	ldrh	r4, [r2, #4]
 80158dc:	f1bb 0f00 	cmp.w	fp, #0
 80158e0:	d03a      	beq.n	8015958 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80158e2:	f892 900d 	ldrb.w	r9, [r2, #13]
 80158e6:	f1bb 0f01 	cmp.w	fp, #1
 80158ea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80158ee:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 80158f2:	f892 900a 	ldrb.w	r9, [r2, #10]
 80158f6:	ea49 0903 	orr.w	r9, r9, r3
 80158fa:	d133      	bne.n	8015964 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 80158fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80158fe:	eba6 0609 	sub.w	r6, r6, r9
 8015902:	2b00      	cmp	r3, #0
 8015904:	d14d      	bne.n	80159a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015906:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015908:	eb09 0306 	add.w	r3, r9, r6
 801590c:	4413      	add	r3, r2
 801590e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015910:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015914:	4293      	cmp	r3, r2
 8015916:	da4e      	bge.n	80159b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8015918:	e036      	b.n	8015988 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801591a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801591c:	e79c      	b.n	8015858 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801591e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8015922:	4659      	mov	r1, fp
 8015924:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8015926:	9301      	str	r3, [sp, #4]
 8015928:	ab1d      	add	r3, sp, #116	@ 0x74
 801592a:	9300      	str	r3, [sp, #0]
 801592c:	ab1c      	add	r3, sp, #112	@ 0x70
 801592e:	f003 fb8c 	bl	801904a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015932:	4604      	mov	r4, r0
 8015934:	e7c0      	b.n	80158b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8015936:	6828      	ldr	r0, [r5, #0]
 8015938:	6803      	ldr	r3, [r0, #0]
 801593a:	691b      	ldr	r3, [r3, #16]
 801593c:	4798      	blx	r3
 801593e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015942:	4298      	cmp	r0, r3
 8015944:	f000 80a8 	beq.w	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015948:	f242 030b 	movw	r3, #8203	@ 0x200b
 801594c:	4298      	cmp	r0, r3
 801594e:	f000 80a3 	beq.w	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015952:	f1bb 0f00 	cmp.w	fp, #0
 8015956:	d100      	bne.n	801595a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8015958:	444e      	add	r6, r9
 801595a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801595c:	2a00      	cmp	r2, #0
 801595e:	d1c0      	bne.n	80158e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015960:	4691      	mov	r9, r2
 8015962:	e099      	b.n	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015964:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015966:	2b00      	cmp	r3, #0
 8015968:	f000 80c2 	beq.w	8015af0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 801596c:	f1bb 0f00 	cmp.w	fp, #0
 8015970:	d117      	bne.n	80159a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015972:	6828      	ldr	r0, [r5, #0]
 8015974:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015976:	6803      	ldr	r3, [r0, #0]
 8015978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801597a:	4798      	blx	r3
 801597c:	4406      	add	r6, r0
 801597e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015980:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015982:	1af3      	subs	r3, r6, r3
 8015984:	4293      	cmp	r3, r2
 8015986:	dd16      	ble.n	80159b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8015988:	2c00      	cmp	r4, #0
 801598a:	f000 80af 	beq.w	8015aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801598e:	2c0a      	cmp	r4, #10
 8015990:	f040 809d 	bne.w	8015ace <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8015994:	240a      	movs	r4, #10
 8015996:	fab4 f084 	clz	r0, r4
 801599a:	0940      	lsrs	r0, r0, #5
 801599c:	b01f      	add	sp, #124	@ 0x7c
 801599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a2:	6828      	ldr	r0, [r5, #0]
 80159a4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80159a6:	6803      	ldr	r3, [r0, #0]
 80159a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159aa:	4798      	blx	r3
 80159ac:	f1bb 0f01 	cmp.w	fp, #1
 80159b0:	eba6 0600 	sub.w	r6, r6, r0
 80159b4:	d0a7      	beq.n	8015906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80159b6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80159b8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80159ba:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80159be:	f9b3 8000 	ldrsh.w	r8, [r3]
 80159c2:	7b43      	ldrb	r3, [r0, #13]
 80159c4:	4431      	add	r1, r6
 80159c6:	015b      	lsls	r3, r3, #5
 80159c8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80159cc:	7983      	ldrb	r3, [r0, #6]
 80159ce:	4313      	orrs	r3, r2
 80159d0:	440b      	add	r3, r1
 80159d2:	4543      	cmp	r3, r8
 80159d4:	db60      	blt.n	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80159d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80159d8:	4299      	cmp	r1, r3
 80159da:	da5d      	bge.n	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80159dc:	6828      	ldr	r0, [r5, #0]
 80159de:	45b0      	cmp	r8, r6
 80159e0:	6803      	ldr	r3, [r0, #0]
 80159e2:	bfcc      	ite	gt
 80159e4:	eba8 0806 	subgt.w	r8, r8, r6
 80159e8:	f04f 0800 	movle.w	r8, #0
 80159ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159ee:	bfc8      	it	gt
 80159f0:	fa1f f888 	uxthgt.w	r8, r8
 80159f4:	4798      	blx	r3
 80159f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80159f8:	7b53      	ldrb	r3, [r2, #13]
 80159fa:	00d9      	lsls	r1, r3, #3
 80159fc:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8015a00:	7a11      	ldrb	r1, [r2, #8]
 8015a02:	4339      	orrs	r1, r7
 8015a04:	065f      	lsls	r7, r3, #25
 8015a06:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8015a08:	bf48      	it	mi
 8015a0a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8015a0e:	4407      	add	r7, r0
 8015a10:	bf48      	it	mi
 8015a12:	b209      	sxthmi	r1, r1
 8015a14:	1a7f      	subs	r7, r7, r1
 8015a16:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8015a18:	b2bf      	uxth	r7, r7
 8015a1a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015a1e:	fa0f fa87 	sxth.w	sl, r7
 8015a22:	4551      	cmp	r1, sl
 8015a24:	dd3c      	ble.n	8015aa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8015a26:	011b      	lsls	r3, r3, #4
 8015a28:	79d0      	ldrb	r0, [r2, #7]
 8015a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a2e:	4303      	orrs	r3, r0
 8015a30:	449a      	add	sl, r3
 8015a32:	4551      	cmp	r1, sl
 8015a34:	dc30      	bgt.n	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015a36:	1bcf      	subs	r7, r1, r7
 8015a38:	468a      	mov	sl, r1
 8015a3a:	b23f      	sxth	r7, r7
 8015a3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8015a3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015a40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015a42:	6828      	ldr	r0, [r5, #0]
 8015a44:	2a00      	cmp	r2, #0
 8015a46:	d12d      	bne.n	8015aa4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8015a48:	9318      	str	r3, [sp, #96]	@ 0x60
 8015a4a:	b2bf      	uxth	r7, r7
 8015a4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a4e:	6819      	ldr	r1, [r3, #0]
 8015a50:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8015a52:	6801      	ldr	r1, [r0, #0]
 8015a54:	9314      	str	r3, [sp, #80]	@ 0x50
 8015a56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015a58:	4788      	blx	r1
 8015a5a:	79a9      	ldrb	r1, [r5, #6]
 8015a5c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015a5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015a60:	7ba9      	ldrb	r1, [r5, #14]
 8015a62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015a64:	910a      	str	r1, [sp, #40]	@ 0x28
 8015a66:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8015a6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8015a6c:	68a9      	ldr	r1, [r5, #8]
 8015a6e:	9306      	str	r3, [sp, #24]
 8015a70:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015a72:	9205      	str	r2, [sp, #20]
 8015a74:	9304      	str	r3, [sp, #16]
 8015a76:	f8cd a004 	str.w	sl, [sp, #4]
 8015a7a:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8015a7e:	44b0      	add	r8, r6
 8015a80:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8015a82:	fa0f f388 	sxth.w	r3, r8
 8015a86:	9300      	str	r3, [sp, #0]
 8015a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a8a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015a8e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015a94:	685b      	ldr	r3, [r3, #4]
 8015a96:	47b8      	blx	r7
 8015a98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8015a9e:	e6e3      	b.n	8015868 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8015aa0:	2700      	movs	r7, #0
 8015aa2:	e7cb      	b.n	8015a3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8015aa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015aa6:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8015aaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015aac:	f8dc 1000 	ldr.w	r1, [ip]
 8015ab0:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8015ab4:	79aa      	ldrb	r2, [r5, #6]
 8015ab6:	9203      	str	r2, [sp, #12]
 8015ab8:	7baa      	ldrb	r2, [r5, #14]
 8015aba:	9202      	str	r2, [sp, #8]
 8015abc:	68aa      	ldr	r2, [r5, #8]
 8015abe:	e9cd 0200 	strd	r0, r2, [sp]
 8015ac2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015ac4:	4660      	mov	r0, ip
 8015ac6:	688f      	ldr	r7, [r1, #8]
 8015ac8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015aca:	47b8      	blx	r7
 8015acc:	e7e4      	b.n	8015a98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015ace:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8015ad0:	3501      	adds	r5, #1
 8015ad2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015ad4:	429d      	cmp	r5, r3
 8015ad6:	f6bf af5e 	bge.w	8015996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015ada:	4659      	mov	r1, fp
 8015adc:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8015ade:	f7f0 fca1 	bl	8006424 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015ae2:	4604      	mov	r4, r0
 8015ae4:	b110      	cbz	r0, 8015aec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015ae6:	280a      	cmp	r0, #10
 8015ae8:	d1f2      	bne.n	8015ad0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8015aea:	e753      	b.n	8015994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8015aec:	2400      	movs	r4, #0
 8015aee:	e752      	b.n	8015996 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8015af0:	f1bb 0f00 	cmp.w	fp, #0
 8015af4:	f43f af43 	beq.w	801597e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8015af8:	e75d      	b.n	80159b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08015afa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015afa:	b530      	push	{r4, r5, lr}
 8015afc:	8ac4      	ldrh	r4, [r0, #22]
 8015afe:	8b45      	ldrh	r5, [r0, #26]
 8015b00:	8343      	strh	r3, [r0, #26]
 8015b02:	442c      	add	r4, r5
 8015b04:	1ae4      	subs	r4, r4, r3
 8015b06:	8b83      	ldrh	r3, [r0, #28]
 8015b08:	82c4      	strh	r4, [r0, #22]
 8015b0a:	8b04      	ldrh	r4, [r0, #24]
 8015b0c:	4422      	add	r2, r4
 8015b0e:	440c      	add	r4, r1
 8015b10:	1a59      	subs	r1, r3, r1
 8015b12:	83c2      	strh	r2, [r0, #30]
 8015b14:	8304      	strh	r4, [r0, #24]
 8015b16:	8381      	strh	r1, [r0, #28]
 8015b18:	bd30      	pop	{r4, r5, pc}

08015b1a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8015b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b1e:	4604      	mov	r4, r0
 8015b20:	8a47      	ldrh	r7, [r0, #18]
 8015b22:	68c0      	ldr	r0, [r0, #12]
 8015b24:	b085      	sub	sp, #20
 8015b26:	6803      	ldr	r3, [r0, #0]
 8015b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b2a:	4798      	blx	r3
 8015b2c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8015b30:	7a63      	ldrb	r3, [r4, #9]
 8015b32:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8015b36:	3b01      	subs	r3, #1
 8015b38:	42b7      	cmp	r7, r6
 8015b3a:	bfac      	ite	ge
 8015b3c:	f04f 0900 	movge.w	r9, #0
 8015b40:	f04f 0901 	movlt.w	r9, #1
 8015b44:	2b05      	cmp	r3, #5
 8015b46:	d804      	bhi.n	8015b52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8015b48:	e8df f003 	tbb	[pc, r3]
 8015b4c:	470f0854 	.word	0x470f0854
 8015b50:	4c4c      	.short	0x4c4c
 8015b52:	2500      	movs	r5, #0
 8015b54:	46a9      	mov	r9, r5
 8015b56:	462e      	mov	r6, r5
 8015b58:	462f      	mov	r7, r5
 8015b5a:	e00e      	b.n	8015b7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015b5c:	42b7      	cmp	r7, r6
 8015b5e:	f04f 0500 	mov.w	r5, #0
 8015b62:	bfb4      	ite	lt
 8015b64:	2600      	movlt	r6, #0
 8015b66:	2601      	movge	r6, #1
 8015b68:	e7f6      	b.n	8015b58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015b6a:	42b7      	cmp	r7, r6
 8015b6c:	464d      	mov	r5, r9
 8015b6e:	f04f 0900 	mov.w	r9, #0
 8015b72:	bfb4      	ite	lt
 8015b74:	2600      	movlt	r6, #0
 8015b76:	2601      	movge	r6, #1
 8015b78:	464f      	mov	r7, r9
 8015b7a:	f04f 0800 	mov.w	r8, #0
 8015b7e:	f8a4 8016 	strh.w	r8, [r4, #22]
 8015b82:	f8a4 8018 	strh.w	r8, [r4, #24]
 8015b86:	f8cd 8004 	str.w	r8, [sp, #4]
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	9303      	str	r3, [sp, #12]
 8015b8e:	8823      	ldrh	r3, [r4, #0]
 8015b90:	2b20      	cmp	r3, #32
 8015b92:	d033      	beq.n	8015bfc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8015b94:	f242 010b 	movw	r1, #8203	@ 0x200b
 8015b98:	1a5a      	subs	r2, r3, r1
 8015b9a:	f1d2 0a00 	rsbs	sl, r2, #0
 8015b9e:	eb4a 0a02 	adc.w	sl, sl, r2
 8015ba2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015ba6:	4293      	cmp	r3, r2
 8015ba8:	d008      	beq.n	8015bbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015baa:	428b      	cmp	r3, r1
 8015bac:	9a01      	ldr	r2, [sp, #4]
 8015bae:	bf0e      	itee	eq
 8015bb0:	f04f 0a01 	moveq.w	sl, #1
 8015bb4:	461a      	movne	r2, r3
 8015bb6:	f04f 0a00 	movne.w	sl, #0
 8015bba:	9201      	str	r2, [sp, #4]
 8015bbc:	ab03      	add	r3, sp, #12
 8015bbe:	68e2      	ldr	r2, [r4, #12]
 8015bc0:	7a21      	ldrb	r1, [r4, #8]
 8015bc2:	6860      	ldr	r0, [r4, #4]
 8015bc4:	f003 f9f8 	bl	8018fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015bc8:	8020      	strh	r0, [r4, #0]
 8015bca:	b9d8      	cbnz	r0, 8015c04 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8015bcc:	8ba2      	ldrh	r2, [r4, #28]
 8015bce:	2300      	movs	r3, #0
 8015bd0:	4611      	mov	r1, r2
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f7ff ff91 	bl	8015afa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015bd8:	e06e      	b.n	8015cb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015bda:	2500      	movs	r5, #0
 8015bdc:	2701      	movs	r7, #1
 8015bde:	46a9      	mov	r9, r5
 8015be0:	462e      	mov	r6, r5
 8015be2:	e7ca      	b.n	8015b7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015be4:	42b7      	cmp	r7, r6
 8015be6:	f04f 0500 	mov.w	r5, #0
 8015bea:	bfb4      	ite	lt
 8015bec:	2700      	movlt	r7, #0
 8015bee:	2701      	movge	r7, #1
 8015bf0:	462e      	mov	r6, r5
 8015bf2:	e7c2      	b.n	8015b7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015bf4:	2500      	movs	r5, #0
 8015bf6:	2601      	movs	r6, #1
 8015bf8:	46a9      	mov	r9, r5
 8015bfa:	e7ad      	b.n	8015b58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015bfc:	9301      	str	r3, [sp, #4]
 8015bfe:	f04f 0a01 	mov.w	sl, #1
 8015c02:	e7db      	b.n	8015bbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015c04:	8b63      	ldrh	r3, [r4, #26]
 8015c06:	280a      	cmp	r0, #10
 8015c08:	f103 0301 	add.w	r3, r3, #1
 8015c0c:	8363      	strh	r3, [r4, #26]
 8015c0e:	d0dd      	beq.n	8015bcc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8015c10:	9a03      	ldr	r2, [sp, #12]
 8015c12:	bb62      	cbnz	r2, 8015c6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8015c14:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015c18:	4298      	cmp	r0, r3
 8015c1a:	d003      	beq.n	8015c24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015c1c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015c20:	4298      	cmp	r0, r3
 8015c22:	d1b2      	bne.n	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c24:	8823      	ldrh	r3, [r4, #0]
 8015c26:	8ba1      	ldrh	r1, [r4, #28]
 8015c28:	2b20      	cmp	r3, #32
 8015c2a:	d003      	beq.n	8015c34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8015c2c:	f242 000b 	movw	r0, #8203	@ 0x200b
 8015c30:	4283      	cmp	r3, r0
 8015c32:	d131      	bne.n	8015c98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8015c34:	f1ba 0f00 	cmp.w	sl, #0
 8015c38:	bf0a      	itet	eq
 8015c3a:	4688      	moveq	r8, r1
 8015c3c:	4650      	movne	r0, sl
 8015c3e:	2001      	moveq	r0, #1
 8015c40:	440a      	add	r2, r1
 8015c42:	8b23      	ldrh	r3, [r4, #24]
 8015c44:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015c48:	b292      	uxth	r2, r2
 8015c4a:	83a2      	strh	r2, [r4, #28]
 8015c4c:	4413      	add	r3, r2
 8015c4e:	f1b9 0f00 	cmp.w	r9, #0
 8015c52:	d102      	bne.n	8015c5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8015c54:	2d00      	cmp	r5, #0
 8015c56:	d042      	beq.n	8015cde <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8015c58:	b300      	cbz	r0, 8015c9c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8015c5a:	8c21      	ldrh	r1, [r4, #32]
 8015c5c:	4419      	add	r1, r3
 8015c5e:	458c      	cmp	ip, r1
 8015c60:	da37      	bge.n	8015cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015c62:	8ae1      	ldrh	r1, [r4, #22]
 8015c64:	2900      	cmp	r1, #0
 8015c66:	d034      	beq.n	8015cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015c68:	4563      	cmp	r3, ip
 8015c6a:	dd8e      	ble.n	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c6c:	e01d      	b.n	8015caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8015c6e:	8893      	ldrh	r3, [r2, #4]
 8015c70:	9901      	ldr	r1, [sp, #4]
 8015c72:	8023      	strh	r3, [r4, #0]
 8015c74:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8015c78:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015c7c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8015c80:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8015c84:	ea4b 0b00 	orr.w	fp, fp, r0
 8015c88:	68e0      	ldr	r0, [r4, #12]
 8015c8a:	6803      	ldr	r3, [r0, #0]
 8015c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c8e:	4798      	blx	r3
 8015c90:	eb0b 0200 	add.w	r2, fp, r0
 8015c94:	b292      	uxth	r2, r2
 8015c96:	e7c5      	b.n	8015c24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015c98:	2000      	movs	r0, #0
 8015c9a:	e7d1      	b.n	8015c40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8015c9c:	4563      	cmp	r3, ip
 8015c9e:	f77f af74 	ble.w	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015ca2:	8ae3      	ldrh	r3, [r4, #22]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	f43f af70 	beq.w	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015caa:	2301      	movs	r3, #1
 8015cac:	8c22      	ldrh	r2, [r4, #32]
 8015cae:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8015cb2:	8be3      	ldrh	r3, [r4, #30]
 8015cb4:	4413      	add	r3, r2
 8015cb6:	83e3      	strh	r3, [r4, #30]
 8015cb8:	68e0      	ldr	r0, [r4, #12]
 8015cba:	6803      	ldr	r3, [r0, #0]
 8015cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cbe:	4798      	blx	r3
 8015cc0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8015cc4:	4418      	add	r0, r3
 8015cc6:	8a63      	ldrh	r3, [r4, #18]
 8015cc8:	1a18      	subs	r0, r3, r0
 8015cca:	8260      	strh	r0, [r4, #18]
 8015ccc:	b005      	add	sp, #20
 8015cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	f7ff ff0f 	bl	8015afa <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015cdc:	e755      	b.n	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cde:	4563      	cmp	r3, ip
 8015ce0:	dd14      	ble.n	8015d0c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8015ce2:	b117      	cbz	r7, 8015cea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	460a      	mov	r2, r1
 8015ce8:	e772      	b.n	8015bd0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8015cea:	2e00      	cmp	r6, #0
 8015cec:	f43f af4d 	beq.w	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	f47f af4a 	bne.w	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cf6:	f1ba 0f00 	cmp.w	sl, #0
 8015cfa:	d002      	beq.n	8015d02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8015cfc:	2301      	movs	r3, #1
 8015cfe:	4642      	mov	r2, r8
 8015d00:	e767      	b.n	8015bd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8015d02:	8ae3      	ldrh	r3, [r4, #22]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	f43f af40 	beq.w	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d0a:	e7d5      	b.n	8015cb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	f47f af3c 	bne.w	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d12:	f1ba 0f00 	cmp.w	sl, #0
 8015d16:	f43f af38 	beq.w	8015b8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	4642      	mov	r2, r8
 8015d1e:	e7da      	b.n	8015cd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08015d20 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d22:	4605      	mov	r5, r0
 8015d24:	b08f      	sub	sp, #60	@ 0x3c
 8015d26:	4617      	mov	r7, r2
 8015d28:	461c      	mov	r4, r3
 8015d2a:	460e      	mov	r6, r1
 8015d2c:	b1d1      	cbz	r1, 8015d64 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	4620      	mov	r0, r4
 8015d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d34:	4798      	blx	r3
 8015d36:	4240      	negs	r0, r0
 8015d38:	9603      	str	r6, [sp, #12]
 8015d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d3e:	b200      	sxth	r0, r0
 8015d40:	9700      	str	r7, [sp, #0]
 8015d42:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8015d46:	4629      	mov	r1, r5
 8015d48:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015d4c:	2401      	movs	r4, #1
 8015d4e:	a805      	add	r0, sp, #20
 8015d50:	f7ff fcaa 	bl	80156a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015d54:	a805      	add	r0, sp, #20
 8015d56:	f7ff fee0 	bl	8015b1a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015d5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015d5e:	b163      	cbz	r3, 8015d7a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015d60:	3401      	adds	r4, #1
 8015d62:	e7f7      	b.n	8015d54 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015d64:	2401      	movs	r4, #1
 8015d66:	f003 f9f3 	bl	8019150 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015d6a:	280a      	cmp	r0, #10
 8015d6c:	4628      	mov	r0, r5
 8015d6e:	bf08      	it	eq
 8015d70:	3401      	addeq	r4, #1
 8015d72:	f003 f9ed 	bl	8019150 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	d1f7      	bne.n	8015d6a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8015d7a:	b2a0      	uxth	r0, r4
 8015d7c:	b00f      	add	sp, #60	@ 0x3c
 8015d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d84:	b0e3      	sub	sp, #396	@ 0x18c
 8015d86:	461c      	mov	r4, r3
 8015d88:	4683      	mov	fp, r0
 8015d8a:	4688      	mov	r8, r1
 8015d8c:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	f000 8112 	beq.w	8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015d94:	6823      	ldr	r3, [r4, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f000 810e 	beq.w	8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015d9c:	7ba3      	ldrb	r3, [r4, #14]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	f000 810a 	beq.w	8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015da4:	ad0a      	add	r5, sp, #40	@ 0x28
 8015da6:	6810      	ldr	r0, [r2, #0]
 8015da8:	6851      	ldr	r1, [r2, #4]
 8015daa:	462b      	mov	r3, r5
 8015dac:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015db0:	c303      	stmia	r3!, {r0, r1}
 8015db2:	2100      	movs	r1, #0
 8015db4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015db8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015dbc:	4628      	mov	r0, r5
 8015dbe:	910c      	str	r1, [sp, #48]	@ 0x30
 8015dc0:	a90c      	add	r1, sp, #48	@ 0x30
 8015dc2:	79a2      	ldrb	r2, [r4, #6]
 8015dc4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015dc8:	f7ff fced 	bl	80157a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015dcc:	a90c      	add	r1, sp, #48	@ 0x30
 8015dce:	79a2      	ldrb	r2, [r4, #6]
 8015dd0:	4608      	mov	r0, r1
 8015dd2:	f7ff fce8 	bl	80157a6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015dd6:	a817      	add	r0, sp, #92	@ 0x5c
 8015dd8:	f002 fd60 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 8015ddc:	6820      	ldr	r0, [r4, #0]
 8015dde:	6803      	ldr	r3, [r0, #0]
 8015de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015de2:	4798      	blx	r3
 8015de4:	4606      	mov	r6, r0
 8015de6:	6820      	ldr	r0, [r4, #0]
 8015de8:	6803      	ldr	r3, [r0, #0]
 8015dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015dec:	4798      	blx	r3
 8015dee:	4633      	mov	r3, r6
 8015df0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8015df2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8015df4:	9000      	str	r0, [sp, #0]
 8015df6:	a817      	add	r0, sp, #92	@ 0x5c
 8015df8:	f002 fdab 	bl	8018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015dfc:	6820      	ldr	r0, [r4, #0]
 8015dfe:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015e02:	6803      	ldr	r3, [r0, #0]
 8015e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e06:	4798      	blx	r3
 8015e08:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015e0c:	6823      	ldr	r3, [r4, #0]
 8015e0e:	4607      	mov	r7, r0
 8015e10:	4406      	add	r6, r0
 8015e12:	a830      	add	r0, sp, #192	@ 0xc0
 8015e14:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015e18:	f002 fd40 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 8015e1c:	7c23      	ldrb	r3, [r4, #16]
 8015e1e:	b17b      	cbz	r3, 8015e40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015e20:	6820      	ldr	r0, [r4, #0]
 8015e22:	6803      	ldr	r3, [r0, #0]
 8015e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e26:	4798      	blx	r3
 8015e28:	9009      	str	r0, [sp, #36]	@ 0x24
 8015e2a:	6820      	ldr	r0, [r4, #0]
 8015e2c:	6802      	ldr	r2, [r0, #0]
 8015e2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015e30:	4790      	blx	r2
 8015e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e34:	9000      	str	r0, [sp, #0]
 8015e36:	a830      	add	r0, sp, #192	@ 0xc0
 8015e38:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8015e3a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8015e3c:	f002 fd89 	bl	8018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015e40:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015e44:	a80e      	add	r0, sp, #56	@ 0x38
 8015e46:	7be2      	ldrb	r2, [r4, #15]
 8015e48:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8015e4c:	1a8a      	subs	r2, r1, r2
 8015e4e:	7c21      	ldrb	r1, [r4, #16]
 8015e50:	9103      	str	r1, [sp, #12]
 8015e52:	b292      	uxth	r2, r2
 8015e54:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015e58:	9102      	str	r1, [sp, #8]
 8015e5a:	6821      	ldr	r1, [r4, #0]
 8015e5c:	9101      	str	r1, [sp, #4]
 8015e5e:	7961      	ldrb	r1, [r4, #5]
 8015e60:	9100      	str	r1, [sp, #0]
 8015e62:	a930      	add	r1, sp, #192	@ 0xc0
 8015e64:	f7ff fc20 	bl	80156a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015e68:	2e00      	cmp	r6, #0
 8015e6a:	dc5b      	bgt.n	8015f24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015e6c:	af17      	add	r7, sp, #92	@ 0x5c
 8015e6e:	f04f 0900 	mov.w	r9, #0
 8015e72:	7c23      	ldrb	r3, [r4, #16]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	f000 80b1 	beq.w	8015fdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8015e7a:	a80e      	add	r0, sp, #56	@ 0x38
 8015e7c:	f7ff fe4d 	bl	8015b1a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015e80:	f1ba 0f00 	cmp.w	sl, #0
 8015e84:	f000 80a5 	beq.w	8015fd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015e88:	7c23      	ldrb	r3, [r4, #16]
 8015e8a:	2264      	movs	r2, #100	@ 0x64
 8015e8c:	4639      	mov	r1, r7
 8015e8e:	a849      	add	r0, sp, #292	@ 0x124
 8015e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e92:	f00f fab6 	bl	8025402 <memcpy>
 8015e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	f000 80a7 	beq.w	8015fec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8015e9e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8015ea2:	7922      	ldrb	r2, [r4, #4]
 8015ea4:	2a01      	cmp	r2, #1
 8015ea6:	f040 808a 	bne.w	8015fbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8015eaa:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8015eae:	1ac0      	subs	r0, r0, r3
 8015eb0:	2302      	movs	r3, #2
 8015eb2:	fb90 f0f3 	sdiv	r0, r0, r3
 8015eb6:	b200      	sxth	r0, r0
 8015eb8:	7c23      	ldrb	r3, [r4, #16]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	f000 808b 	beq.w	8015fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015ec0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8015ec4:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8015ec8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015ecc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015ed0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	4410      	add	r0, r2
 8015ed8:	4642      	mov	r2, r8
 8015eda:	b200      	sxth	r0, r0
 8015edc:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015ee0:	9000      	str	r0, [sp, #0]
 8015ee2:	4658      	mov	r0, fp
 8015ee4:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8015ee8:	f7ff fc8e 	bl	8015808 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015eec:	2800      	cmp	r0, #0
 8015eee:	d163      	bne.n	8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015ef0:	b2b2      	uxth	r2, r6
 8015ef2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015ef6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8015efa:	4413      	add	r3, r2
 8015efc:	1a8a      	subs	r2, r1, r2
 8015efe:	b21b      	sxth	r3, r3
 8015f00:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8015f04:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8015f08:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015f0c:	2a00      	cmp	r2, #0
 8015f0e:	d153      	bne.n	8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015f10:	6822      	ldr	r2, [r4, #0]
 8015f12:	8869      	ldrh	r1, [r5, #2]
 8015f14:	7a12      	ldrb	r2, [r2, #8]
 8015f16:	1a9b      	subs	r3, r3, r2
 8015f18:	88ea      	ldrh	r2, [r5, #6]
 8015f1a:	440a      	add	r2, r1
 8015f1c:	b212      	sxth	r2, r2
 8015f1e:	4293      	cmp	r3, r2
 8015f20:	dda7      	ble.n	8015e72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8015f22:	e049      	b.n	8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015f24:	7c23      	ldrb	r3, [r4, #16]
 8015f26:	444f      	add	r7, r9
 8015f28:	b1c3      	cbz	r3, 8015f5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015f2a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8015f2e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015f32:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015f36:	443b      	add	r3, r7
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	da97      	bge.n	8015e6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015f3c:	a80e      	add	r0, sp, #56	@ 0x38
 8015f3e:	f7ff fdec 	bl	8015b1a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015f42:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8015f46:	3b01      	subs	r3, #1
 8015f48:	b29b      	uxth	r3, r3
 8015f4a:	454b      	cmp	r3, r9
 8015f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f4e:	d021      	beq.n	8015f94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015f50:	7961      	ldrb	r1, [r4, #5]
 8015f52:	a817      	add	r0, sp, #92	@ 0x5c
 8015f54:	f7f0 fa66 	bl	8006424 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f5a:	e7f4      	b.n	8015f46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015f5c:	fa1f f986 	uxth.w	r9, r6
 8015f60:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015f64:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015f68:	443b      	add	r3, r7
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	f6bf af7e 	bge.w	8015e6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015f70:	a817      	add	r0, sp, #92	@ 0x5c
 8015f72:	f003 f8ed 	bl	8019150 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015f76:	b1f8      	cbz	r0, 8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015f78:	280a      	cmp	r0, #10
 8015f7a:	d1f1      	bne.n	8015f60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015f7c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015f80:	444b      	add	r3, r9
 8015f82:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015f86:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8015f8a:	eba3 0309 	sub.w	r3, r3, r9
 8015f8e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015f92:	e7e5      	b.n	8015f60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015f94:	b2b3      	uxth	r3, r6
 8015f96:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8015f9a:	441a      	add	r2, r3
 8015f9c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8015fa0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8015fa4:	1ad3      	subs	r3, r2, r3
 8015fa6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015faa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015fae:	b11b      	cbz	r3, 8015fb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015fb0:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d0ba      	beq.n	8015f2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8015fb8:	b063      	add	sp, #396	@ 0x18c
 8015fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fbe:	2a02      	cmp	r2, #2
 8015fc0:	d105      	bne.n	8015fce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8015fc2:	7be2      	ldrb	r2, [r4, #15]
 8015fc4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8015fc8:	1a80      	subs	r0, r0, r2
 8015fca:	1ac0      	subs	r0, r0, r3
 8015fcc:	e773      	b.n	8015eb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015fce:	2000      	movs	r0, #0
 8015fd0:	e772      	b.n	8015eb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015fd2:	7be0      	ldrb	r0, [r4, #15]
 8015fd4:	e770      	b.n	8015eb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015fd6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015fda:	e773      	b.n	8015ec4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015fdc:	f1ba 0f00 	cmp.w	sl, #0
 8015fe0:	d0f7      	beq.n	8015fd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015fe2:	2264      	movs	r2, #100	@ 0x64
 8015fe4:	4639      	mov	r1, r7
 8015fe6:	a849      	add	r0, sp, #292	@ 0x124
 8015fe8:	f00f fa0b 	bl	8025402 <memcpy>
 8015fec:	2300      	movs	r3, #0
 8015fee:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015ff2:	6821      	ldr	r1, [r4, #0]
 8015ff4:	a849      	add	r0, sp, #292	@ 0x124
 8015ff6:	f7ff fb9a 	bl	801572e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015ffa:	b203      	sxth	r3, r0
 8015ffc:	e751      	b.n	8015ea2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08015ffe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015ffe:	2b03      	cmp	r3, #3
 8016000:	d818      	bhi.n	8016034 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016002:	e8df f003 	tbb	[pc, r3]
 8016006:	0602      	.short	0x0602
 8016008:	130d      	.short	0x130d
 801600a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801600e:	1850      	adds	r0, r2, r1
 8016010:	4770      	bx	lr
 8016012:	8803      	ldrh	r3, [r0, #0]
 8016014:	8880      	ldrh	r0, [r0, #4]
 8016016:	4418      	add	r0, r3
 8016018:	b200      	sxth	r0, r0
 801601a:	1a80      	subs	r0, r0, r2
 801601c:	3801      	subs	r0, #1
 801601e:	4770      	bx	lr
 8016020:	8803      	ldrh	r3, [r0, #0]
 8016022:	8880      	ldrh	r0, [r0, #4]
 8016024:	4418      	add	r0, r3
 8016026:	b200      	sxth	r0, r0
 8016028:	1a40      	subs	r0, r0, r1
 801602a:	e7f7      	b.n	801601c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801602c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016030:	4410      	add	r0, r2
 8016032:	4770      	bx	lr
 8016034:	2000      	movs	r0, #0
 8016036:	4770      	bx	lr

08016038 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016038:	2b03      	cmp	r3, #3
 801603a:	d817      	bhi.n	801606c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801603c:	e8df f003 	tbb	[pc, r3]
 8016040:	10090602 	.word	0x10090602
 8016044:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016048:	1850      	adds	r0, r2, r1
 801604a:	4770      	bx	lr
 801604c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016050:	e7fa      	b.n	8016048 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016052:	8843      	ldrh	r3, [r0, #2]
 8016054:	88c0      	ldrh	r0, [r0, #6]
 8016056:	4418      	add	r0, r3
 8016058:	b200      	sxth	r0, r0
 801605a:	1a80      	subs	r0, r0, r2
 801605c:	3801      	subs	r0, #1
 801605e:	4770      	bx	lr
 8016060:	8843      	ldrh	r3, [r0, #2]
 8016062:	88c0      	ldrh	r0, [r0, #6]
 8016064:	4418      	add	r0, r3
 8016066:	b200      	sxth	r0, r0
 8016068:	1a40      	subs	r0, r0, r1
 801606a:	e7f7      	b.n	801605c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801606c:	2000      	movs	r0, #0
 801606e:	4770      	bx	lr

08016070 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016070:	4b01      	ldr	r3, [pc, #4]	@ (8016078 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016072:	2200      	movs	r2, #0
 8016074:	601a      	str	r2, [r3, #0]
 8016076:	4770      	bx	lr
 8016078:	2402642c 	.word	0x2402642c

0801607c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801607c:	4603      	mov	r3, r0
 801607e:	b1c8      	cbz	r0, 80160b4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016080:	0c02      	lsrs	r2, r0, #16
 8016082:	0412      	lsls	r2, r2, #16
 8016084:	b9a2      	cbnz	r2, 80160b0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016086:	0403      	lsls	r3, r0, #16
 8016088:	2010      	movs	r0, #16
 801608a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801608e:	bf04      	itt	eq
 8016090:	021b      	lsleq	r3, r3, #8
 8016092:	3008      	addeq	r0, #8
 8016094:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8016098:	bf04      	itt	eq
 801609a:	011b      	lsleq	r3, r3, #4
 801609c:	3004      	addeq	r0, #4
 801609e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80160a2:	bf04      	itt	eq
 80160a4:	009b      	lsleq	r3, r3, #2
 80160a6:	3002      	addeq	r0, #2
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	db04      	blt.n	80160b6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80160ac:	3001      	adds	r0, #1
 80160ae:	4770      	bx	lr
 80160b0:	2000      	movs	r0, #0
 80160b2:	e7ea      	b.n	801608a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80160b4:	2020      	movs	r0, #32
 80160b6:	4770      	bx	lr

080160b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80160b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160bc:	b087      	sub	sp, #28
 80160be:	460d      	mov	r5, r1
 80160c0:	4616      	mov	r6, r2
 80160c2:	4698      	mov	r8, r3
 80160c4:	4601      	mov	r1, r0
 80160c6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80160ca:	b120      	cbz	r0, 80160d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80160cc:	b11a      	cbz	r2, 80160d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80160ce:	2d1f      	cmp	r5, #31
 80160d0:	d801      	bhi.n	80160d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80160d2:	2b1f      	cmp	r3, #31
 80160d4:	d904      	bls.n	80160e0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80160d6:	2000      	movs	r0, #0
 80160d8:	6038      	str	r0, [r7, #0]
 80160da:	b007      	add	sp, #28
 80160dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160e0:	b97d      	cbnz	r5, 8016102 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80160e2:	b143      	cbz	r3, 80160f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80160e4:	4602      	mov	r2, r0
 80160e6:	462b      	mov	r3, r5
 80160e8:	4641      	mov	r1, r8
 80160ea:	4630      	mov	r0, r6
 80160ec:	e9cd 4700 	strd	r4, r7, [sp]
 80160f0:	f7ff ffe2 	bl	80160b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80160f4:	e7f1      	b.n	80160da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80160f6:	f04f 33ff 	mov.w	r3, #4294967295
 80160fa:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80160fe:	603b      	str	r3, [r7, #0]
 8016100:	e7eb      	b.n	80160da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016102:	fa32 fa05 	lsrs.w	sl, r2, r5
 8016106:	d106      	bne.n	8016116 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8016108:	4346      	muls	r6, r0
 801610a:	fbb6 f0f4 	udiv	r0, r6, r4
 801610e:	fb04 6610 	mls	r6, r4, r0, r6
 8016112:	603e      	str	r6, [r7, #0]
 8016114:	e7e1      	b.n	80160da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016116:	2201      	movs	r2, #1
 8016118:	fa00 fb05 	lsl.w	fp, r0, r5
 801611c:	40aa      	lsls	r2, r5
 801611e:	fbbb f9f4 	udiv	r9, fp, r4
 8016122:	3a01      	subs	r2, #1
 8016124:	fb0a f309 	mul.w	r3, sl, r9
 8016128:	fb04 b919 	mls	r9, r4, r9, fp
 801612c:	4016      	ands	r6, r2
 801612e:	9303      	str	r3, [sp, #12]
 8016130:	4630      	mov	r0, r6
 8016132:	f7ff ffa3 	bl	801607c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016136:	462b      	mov	r3, r5
 8016138:	460a      	mov	r2, r1
 801613a:	4601      	mov	r1, r0
 801613c:	4630      	mov	r0, r6
 801613e:	e9cd 4700 	strd	r4, r7, [sp]
 8016142:	f7ff ffb9 	bl	80160b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016146:	4606      	mov	r6, r0
 8016148:	4648      	mov	r0, r9
 801614a:	eb05 0108 	add.w	r1, r5, r8
 801614e:	f7ff ff95 	bl	801607c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016152:	ab05      	add	r3, sp, #20
 8016154:	464a      	mov	r2, r9
 8016156:	e9cd 4300 	strd	r4, r3, [sp]
 801615a:	4603      	mov	r3, r0
 801615c:	4650      	mov	r0, sl
 801615e:	f7ff ffab 	bl	80160b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016162:	6839      	ldr	r1, [r7, #0]
 8016164:	9a05      	ldr	r2, [sp, #20]
 8016166:	9b03      	ldr	r3, [sp, #12]
 8016168:	4411      	add	r1, r2
 801616a:	fbb1 f2f4 	udiv	r2, r1, r4
 801616e:	18d3      	adds	r3, r2, r3
 8016170:	fb04 1412 	mls	r4, r4, r2, r1
 8016174:	441e      	add	r6, r3
 8016176:	603c      	str	r4, [r7, #0]
 8016178:	4430      	add	r0, r6
 801617a:	e7ae      	b.n	80160da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801617c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801617c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016180:	b085      	sub	sp, #20
 8016182:	f1b0 0900 	subs.w	r9, r0, #0
 8016186:	461d      	mov	r5, r3
 8016188:	4617      	mov	r7, r2
 801618a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801618c:	bfbb      	ittet	lt
 801618e:	f1c9 0900 	rsblt	r9, r9, #0
 8016192:	f04f 36ff 	movlt.w	r6, #4294967295
 8016196:	2601      	movge	r6, #1
 8016198:	6823      	ldrlt	r3, [r4, #0]
 801619a:	bfbc      	itt	lt
 801619c:	425b      	neglt	r3, r3
 801619e:	6023      	strlt	r3, [r4, #0]
 80161a0:	2a00      	cmp	r2, #0
 80161a2:	da04      	bge.n	80161ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80161a4:	6823      	ldr	r3, [r4, #0]
 80161a6:	4257      	negs	r7, r2
 80161a8:	4276      	negs	r6, r6
 80161aa:	425b      	negs	r3, r3
 80161ac:	6023      	str	r3, [r4, #0]
 80161ae:	2d00      	cmp	r5, #0
 80161b0:	4638      	mov	r0, r7
 80161b2:	bfba      	itte	lt
 80161b4:	426d      	neglt	r5, r5
 80161b6:	f04f 38ff 	movlt.w	r8, #4294967295
 80161ba:	f04f 0801 	movge.w	r8, #1
 80161be:	f7ff ff5d 	bl	801607c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80161c2:	ab03      	add	r3, sp, #12
 80161c4:	463a      	mov	r2, r7
 80161c6:	e9cd 5300 	strd	r5, r3, [sp]
 80161ca:	4603      	mov	r3, r0
 80161cc:	4648      	mov	r0, r9
 80161ce:	f7ff ff73 	bl	80160b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80161d2:	6823      	ldr	r3, [r4, #0]
 80161d4:	9a03      	ldr	r2, [sp, #12]
 80161d6:	4546      	cmp	r6, r8
 80161d8:	441a      	add	r2, r3
 80161da:	fb92 f3f5 	sdiv	r3, r2, r5
 80161de:	4418      	add	r0, r3
 80161e0:	fb05 2313 	mls	r3, r5, r3, r2
 80161e4:	bf18      	it	ne
 80161e6:	4240      	negne	r0, r0
 80161e8:	1c72      	adds	r2, r6, #1
 80161ea:	6023      	str	r3, [r4, #0]
 80161ec:	d105      	bne.n	80161fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	f1c3 0200 	rsb	r2, r3, #0
 80161f4:	db0b      	blt.n	801620e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80161f6:	6022      	str	r2, [r4, #0]
 80161f8:	e006      	b.n	8016208 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80161fa:	2e01      	cmp	r6, #1
 80161fc:	d104      	bne.n	8016208 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80161fe:	2b00      	cmp	r3, #0
 8016200:	da02      	bge.n	8016208 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016202:	442b      	add	r3, r5
 8016204:	3801      	subs	r0, #1
 8016206:	6023      	str	r3, [r4, #0]
 8016208:	b005      	add	sp, #20
 801620a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801620e:	3801      	subs	r0, #1
 8016210:	1b52      	subs	r2, r2, r5
 8016212:	e7f0      	b.n	80161f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08016214 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016214:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016218:	4c1c      	ldr	r4, [pc, #112]	@ (801628c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801621a:	4605      	mov	r5, r0
 801621c:	6807      	ldr	r7, [r0, #0]
 801621e:	69a3      	ldr	r3, [r4, #24]
 8016220:	b92b      	cbnz	r3, 801622e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016222:	6840      	ldr	r0, [r0, #4]
 8016224:	e9c5 7000 	strd	r7, r0, [r5]
 8016228:	b004      	add	sp, #16
 801622a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801622e:	f04f 0802 	mov.w	r8, #2
 8016232:	68a2      	ldr	r2, [r4, #8]
 8016234:	ae04      	add	r6, sp, #16
 8016236:	6820      	ldr	r0, [r4, #0]
 8016238:	fb93 f1f8 	sdiv	r1, r3, r8
 801623c:	440a      	add	r2, r1
 801623e:	69e1      	ldr	r1, [r4, #28]
 8016240:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016244:	463a      	mov	r2, r7
 8016246:	9600      	str	r6, [sp, #0]
 8016248:	f7ff ff98 	bl	801617c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801624c:	69a3      	ldr	r3, [r4, #24]
 801624e:	4607      	mov	r7, r0
 8016250:	686a      	ldr	r2, [r5, #4]
 8016252:	6a21      	ldr	r1, [r4, #32]
 8016254:	9600      	str	r6, [sp, #0]
 8016256:	6860      	ldr	r0, [r4, #4]
 8016258:	f7ff ff90 	bl	801617c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801625c:	69a3      	ldr	r3, [r4, #24]
 801625e:	6962      	ldr	r2, [r4, #20]
 8016260:	4407      	add	r7, r0
 8016262:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8016264:	9600      	str	r6, [sp, #0]
 8016266:	68e0      	ldr	r0, [r4, #12]
 8016268:	fb93 f8f8 	sdiv	r8, r3, r8
 801626c:	4442      	add	r2, r8
 801626e:	9203      	str	r2, [sp, #12]
 8016270:	682a      	ldr	r2, [r5, #0]
 8016272:	f7ff ff83 	bl	801617c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016276:	4680      	mov	r8, r0
 8016278:	9600      	str	r6, [sp, #0]
 801627a:	69a3      	ldr	r3, [r4, #24]
 801627c:	686a      	ldr	r2, [r5, #4]
 801627e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8016280:	6920      	ldr	r0, [r4, #16]
 8016282:	f7ff ff7b 	bl	801617c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016286:	4440      	add	r0, r8
 8016288:	e7cc      	b.n	8016224 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801628a:	bf00      	nop
 801628c:	24026430 	.word	0x24026430

08016290 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016290:	4b07      	ldr	r3, [pc, #28]	@ (80162b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	2b01      	cmp	r3, #1
 8016296:	d109      	bne.n	80162ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016298:	f9b1 3000 	ldrsh.w	r3, [r1]
 801629c:	f9b0 2000 	ldrsh.w	r2, [r0]
 80162a0:	8003      	strh	r3, [r0, #0]
 80162a2:	4b04      	ldr	r3, [pc, #16]	@ (80162b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80162a4:	881b      	ldrh	r3, [r3, #0]
 80162a6:	3b01      	subs	r3, #1
 80162a8:	1a9b      	subs	r3, r3, r2
 80162aa:	800b      	strh	r3, [r1, #0]
 80162ac:	4770      	bx	lr
 80162ae:	bf00      	nop
 80162b0:	24026414 	.word	0x24026414
 80162b4:	24026410 	.word	0x24026410

080162b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80162b8:	4b07      	ldr	r3, [pc, #28]	@ (80162d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80162ba:	b510      	push	{r4, lr}
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	2b01      	cmp	r3, #1
 80162c0:	d108      	bne.n	80162d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80162c2:	4b06      	ldr	r3, [pc, #24]	@ (80162dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80162c4:	880c      	ldrh	r4, [r1, #0]
 80162c6:	881b      	ldrh	r3, [r3, #0]
 80162c8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80162cc:	3b01      	subs	r3, #1
 80162ce:	1b1b      	subs	r3, r3, r4
 80162d0:	8003      	strh	r3, [r0, #0]
 80162d2:	800a      	strh	r2, [r1, #0]
 80162d4:	bd10      	pop	{r4, pc}
 80162d6:	bf00      	nop
 80162d8:	24026414 	.word	0x24026414
 80162dc:	24026410 	.word	0x24026410

080162e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80162e0:	4b0a      	ldr	r3, [pc, #40]	@ (801630c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80162e2:	b510      	push	{r4, lr}
 80162e4:	781b      	ldrb	r3, [r3, #0]
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d10e      	bne.n	8016308 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80162ea:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80162ee:	8843      	ldrh	r3, [r0, #2]
 80162f0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80162f4:	18ca      	adds	r2, r1, r3
 80162f6:	4b06      	ldr	r3, [pc, #24]	@ (8016310 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80162f8:	8044      	strh	r4, [r0, #2]
 80162fa:	881b      	ldrh	r3, [r3, #0]
 80162fc:	1a9b      	subs	r3, r3, r2
 80162fe:	8003      	strh	r3, [r0, #0]
 8016300:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016304:	8081      	strh	r1, [r0, #4]
 8016306:	80c3      	strh	r3, [r0, #6]
 8016308:	bd10      	pop	{r4, pc}
 801630a:	bf00      	nop
 801630c:	24026414 	.word	0x24026414
 8016310:	24026410 	.word	0x24026410

08016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016314:	4b08      	ldr	r3, [pc, #32]	@ (8016338 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	2b01      	cmp	r3, #1
 801631a:	d10c      	bne.n	8016336 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801631c:	8803      	ldrh	r3, [r0, #0]
 801631e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016322:	8842      	ldrh	r2, [r0, #2]
 8016324:	8002      	strh	r2, [r0, #0]
 8016326:	185a      	adds	r2, r3, r1
 8016328:	4b04      	ldr	r3, [pc, #16]	@ (801633c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801632a:	881b      	ldrh	r3, [r3, #0]
 801632c:	1a9b      	subs	r3, r3, r2
 801632e:	8043      	strh	r3, [r0, #2]
 8016330:	88c3      	ldrh	r3, [r0, #6]
 8016332:	80c1      	strh	r1, [r0, #6]
 8016334:	8083      	strh	r3, [r0, #4]
 8016336:	4770      	bx	lr
 8016338:	24026414 	.word	0x24026414
 801633c:	24026410 	.word	0x24026410

08016340 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016340:	4b07      	ldr	r3, [pc, #28]	@ (8016360 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016342:	b510      	push	{r4, lr}
 8016344:	781b      	ldrb	r3, [r3, #0]
 8016346:	2b01      	cmp	r3, #1
 8016348:	d108      	bne.n	801635c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801634a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801634e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016352:	8003      	strh	r3, [r0, #0]
 8016354:	8893      	ldrh	r3, [r2, #4]
 8016356:	3b01      	subs	r3, #1
 8016358:	1b1b      	subs	r3, r3, r4
 801635a:	800b      	strh	r3, [r1, #0]
 801635c:	bd10      	pop	{r4, pc}
 801635e:	bf00      	nop
 8016360:	24026414 	.word	0x24026414

08016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016364:	4b0a      	ldr	r3, [pc, #40]	@ (8016390 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016366:	460a      	mov	r2, r1
 8016368:	b510      	push	{r4, lr}
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	2b01      	cmp	r3, #1
 801636e:	d10d      	bne.n	801638c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016370:	8881      	ldrh	r1, [r0, #4]
 8016372:	8803      	ldrh	r3, [r0, #0]
 8016374:	440b      	add	r3, r1
 8016376:	4601      	mov	r1, r0
 8016378:	3b01      	subs	r3, #1
 801637a:	f821 3b02 	strh.w	r3, [r1], #2
 801637e:	f7ff ffdf 	bl	8016340 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016382:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016386:	88c2      	ldrh	r2, [r0, #6]
 8016388:	80c3      	strh	r3, [r0, #6]
 801638a:	8082      	strh	r2, [r0, #4]
 801638c:	bd10      	pop	{r4, pc}
 801638e:	bf00      	nop
 8016390:	24026414 	.word	0x24026414

08016394 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016394:	4b06      	ldr	r3, [pc, #24]	@ (80163b0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016396:	2100      	movs	r1, #0
 8016398:	f9b3 2000 	ldrsh.w	r2, [r3]
 801639c:	4b05      	ldr	r3, [pc, #20]	@ (80163b4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801639e:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80163a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163a6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80163aa:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80163ae:	4770      	bx	lr
 80163b0:	24026410 	.word	0x24026410
 80163b4:	24026412 	.word	0x24026412

080163b8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80163b8:	4b03      	ldr	r3, [pc, #12]	@ (80163c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80163ba:	6818      	ldr	r0, [r3, #0]
 80163bc:	b110      	cbz	r0, 80163c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80163be:	6803      	ldr	r3, [r0, #0]
 80163c0:	699b      	ldr	r3, [r3, #24]
 80163c2:	4718      	bx	r3
 80163c4:	4770      	bx	lr
 80163c6:	bf00      	nop
 80163c8:	24026460 	.word	0x24026460

080163cc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80163cc:	4770      	bx	lr
	...

080163d0 <_ZN8touchgfx11Application4drawEv>:
 80163d0:	4b09      	ldr	r3, [pc, #36]	@ (80163f8 <_ZN8touchgfx11Application4drawEv+0x28>)
 80163d2:	b507      	push	{r0, r1, r2, lr}
 80163d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80163d8:	2100      	movs	r1, #0
 80163da:	4b08      	ldr	r3, [pc, #32]	@ (80163fc <_ZN8touchgfx11Application4drawEv+0x2c>)
 80163dc:	9100      	str	r1, [sp, #0]
 80163de:	4669      	mov	r1, sp
 80163e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80163e4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80163e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80163ec:	6803      	ldr	r3, [r0, #0]
 80163ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80163f0:	4798      	blx	r3
 80163f2:	b003      	add	sp, #12
 80163f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80163f8:	24026410 	.word	0x24026410
 80163fc:	24026412 	.word	0x24026412

08016400 <_ZN8touchgfx11Application10invalidateEv>:
 8016400:	4b09      	ldr	r3, [pc, #36]	@ (8016428 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016402:	b082      	sub	sp, #8
 8016404:	2100      	movs	r1, #0
 8016406:	f9b3 2000 	ldrsh.w	r2, [r3]
 801640a:	4b08      	ldr	r3, [pc, #32]	@ (801642c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801640c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016410:	aa02      	add	r2, sp, #8
 8016412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016416:	9100      	str	r1, [sp, #0]
 8016418:	f8ad 3006 	strh.w	r3, [sp, #6]
 801641c:	6803      	ldr	r3, [r0, #0]
 801641e:	e912 0006 	ldmdb	r2, {r1, r2}
 8016422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016424:	b002      	add	sp, #8
 8016426:	4718      	bx	r3
 8016428:	24026410 	.word	0x24026410
 801642c:	24026412 	.word	0x24026412

08016430 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016430:	4b03      	ldr	r3, [pc, #12]	@ (8016440 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016432:	6818      	ldr	r0, [r3, #0]
 8016434:	b110      	cbz	r0, 801643c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016436:	6803      	ldr	r3, [r0, #0]
 8016438:	69db      	ldr	r3, [r3, #28]
 801643a:	4718      	bx	r3
 801643c:	4770      	bx	lr
 801643e:	bf00      	nop
 8016440:	24026460 	.word	0x24026460

08016444 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016444:	4b03      	ldr	r3, [pc, #12]	@ (8016454 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016446:	6818      	ldr	r0, [r3, #0]
 8016448:	b110      	cbz	r0, 8016450 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801644a:	6803      	ldr	r3, [r0, #0]
 801644c:	6a1b      	ldr	r3, [r3, #32]
 801644e:	4718      	bx	r3
 8016450:	4770      	bx	lr
 8016452:	bf00      	nop
 8016454:	24026460 	.word	0x24026460

08016458 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016458:	2300      	movs	r3, #0
 801645a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801645e:	4770      	bx	lr

08016460 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016460:	4b03      	ldr	r3, [pc, #12]	@ (8016470 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016462:	6818      	ldr	r0, [r3, #0]
 8016464:	b110      	cbz	r0, 801646c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016466:	6803      	ldr	r3, [r0, #0]
 8016468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801646a:	4718      	bx	r3
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop
 8016470:	24026460 	.word	0x24026460

08016474 <_ZN8touchgfx11ApplicationD1Ev>:
 8016474:	4770      	bx	lr

08016476 <_ZN8touchgfx11ApplicationD0Ev>:
 8016476:	b510      	push	{r4, lr}
 8016478:	4604      	mov	r4, r0
 801647a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801647e:	f00e f8cc 	bl	802461a <_ZdlPvj>
 8016482:	4620      	mov	r0, r4
 8016484:	bd10      	pop	{r4, pc}

08016486 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016486:	b510      	push	{r4, lr}
 8016488:	f9b1 4000 	ldrsh.w	r4, [r1]
 801648c:	888a      	ldrh	r2, [r1, #4]
 801648e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016492:	4422      	add	r2, r4
 8016494:	b212      	sxth	r2, r2
 8016496:	4293      	cmp	r3, r2
 8016498:	da15      	bge.n	80164c6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801649a:	8882      	ldrh	r2, [r0, #4]
 801649c:	4413      	add	r3, r2
 801649e:	b21b      	sxth	r3, r3
 80164a0:	429c      	cmp	r4, r3
 80164a2:	da10      	bge.n	80164c6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80164a4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80164a8:	88c9      	ldrh	r1, [r1, #6]
 80164aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80164ae:	4419      	add	r1, r3
 80164b0:	b209      	sxth	r1, r1
 80164b2:	428a      	cmp	r2, r1
 80164b4:	da07      	bge.n	80164c6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80164b6:	88c0      	ldrh	r0, [r0, #6]
 80164b8:	4410      	add	r0, r2
 80164ba:	b200      	sxth	r0, r0
 80164bc:	4283      	cmp	r3, r0
 80164be:	bfac      	ite	ge
 80164c0:	2000      	movge	r0, #0
 80164c2:	2001      	movlt	r0, #1
 80164c4:	bd10      	pop	{r4, pc}
 80164c6:	2000      	movs	r0, #0
 80164c8:	e7fc      	b.n	80164c4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080164ca <_ZN8touchgfx4Rect10restrictToEss>:
 80164ca:	f9b0 3000 	ldrsh.w	r3, [r0]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	b510      	push	{r4, lr}
 80164d2:	da04      	bge.n	80164de <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80164d4:	8884      	ldrh	r4, [r0, #4]
 80164d6:	4423      	add	r3, r4
 80164d8:	8083      	strh	r3, [r0, #4]
 80164da:	2300      	movs	r3, #0
 80164dc:	8003      	strh	r3, [r0, #0]
 80164de:	f9b0 4000 	ldrsh.w	r4, [r0]
 80164e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80164e6:	1b09      	subs	r1, r1, r4
 80164e8:	428b      	cmp	r3, r1
 80164ea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80164ee:	bfc8      	it	gt
 80164f0:	8081      	strhgt	r1, [r0, #4]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	da04      	bge.n	8016500 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80164f6:	88c1      	ldrh	r1, [r0, #6]
 80164f8:	440b      	add	r3, r1
 80164fa:	80c3      	strh	r3, [r0, #6]
 80164fc:	2300      	movs	r3, #0
 80164fe:	8043      	strh	r3, [r0, #2]
 8016500:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016504:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016508:	1a52      	subs	r2, r2, r1
 801650a:	4293      	cmp	r3, r2
 801650c:	bfc8      	it	gt
 801650e:	80c2      	strhgt	r2, [r0, #6]
 8016510:	bd10      	pop	{r4, pc}
	...

08016514 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016514:	4b10      	ldr	r3, [pc, #64]	@ (8016558 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016516:	b510      	push	{r4, lr}
 8016518:	460c      	mov	r4, r1
 801651a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801651e:	4b0f      	ldr	r3, [pc, #60]	@ (801655c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016520:	4620      	mov	r0, r4
 8016522:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016526:	f7ff ffd0 	bl	80164ca <_ZN8touchgfx4Rect10restrictToEss>
 801652a:	4b0d      	ldr	r3, [pc, #52]	@ (8016560 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801652c:	6818      	ldr	r0, [r3, #0]
 801652e:	b190      	cbz	r0, 8016556 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016530:	6803      	ldr	r3, [r0, #0]
 8016532:	4621      	mov	r1, r4
 8016534:	689b      	ldr	r3, [r3, #8]
 8016536:	4798      	blx	r3
 8016538:	4b0a      	ldr	r3, [pc, #40]	@ (8016564 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801653a:	6818      	ldr	r0, [r3, #0]
 801653c:	b118      	cbz	r0, 8016546 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801653e:	6803      	ldr	r3, [r0, #0]
 8016540:	4621      	mov	r1, r4
 8016542:	689b      	ldr	r3, [r3, #8]
 8016544:	4798      	blx	r3
 8016546:	4b08      	ldr	r3, [pc, #32]	@ (8016568 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016548:	4621      	mov	r1, r4
 801654a:	6818      	ldr	r0, [r3, #0]
 801654c:	6803      	ldr	r3, [r0, #0]
 801654e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016552:	69db      	ldr	r3, [r3, #28]
 8016554:	4718      	bx	r3
 8016556:	bd10      	pop	{r4, pc}
 8016558:	24026412 	.word	0x24026412
 801655c:	24026410 	.word	0x24026410
 8016560:	24026460 	.word	0x24026460
 8016564:	2402645c 	.word	0x2402645c
 8016568:	2402641c 	.word	0x2402641c

0801656c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801656e:	4606      	mov	r6, r0
 8016570:	4608      	mov	r0, r1
 8016572:	460f      	mov	r7, r1
 8016574:	f7fa f979 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016578:	b9e8      	cbnz	r0, 80165b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801657a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801657e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016582:	42a5      	cmp	r5, r4
 8016584:	db17      	blt.n	80165b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016586:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801658a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801658e:	429a      	cmp	r2, r3
 8016590:	db11      	blt.n	80165b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016592:	88b9      	ldrh	r1, [r7, #4]
 8016594:	440d      	add	r5, r1
 8016596:	88b1      	ldrh	r1, [r6, #4]
 8016598:	440c      	add	r4, r1
 801659a:	b22d      	sxth	r5, r5
 801659c:	b224      	sxth	r4, r4
 801659e:	42a5      	cmp	r5, r4
 80165a0:	dc09      	bgt.n	80165b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80165a2:	88f8      	ldrh	r0, [r7, #6]
 80165a4:	4410      	add	r0, r2
 80165a6:	88f2      	ldrh	r2, [r6, #6]
 80165a8:	4413      	add	r3, r2
 80165aa:	b200      	sxth	r0, r0
 80165ac:	b21b      	sxth	r3, r3
 80165ae:	4298      	cmp	r0, r3
 80165b0:	bfcc      	ite	gt
 80165b2:	2000      	movgt	r0, #0
 80165b4:	2001      	movle	r0, #1
 80165b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80165b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ba:	4604      	mov	r4, r0
 80165bc:	4608      	mov	r0, r1
 80165be:	460d      	mov	r5, r1
 80165c0:	f7fa f953 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 80165c4:	b978      	cbnz	r0, 80165e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80165c6:	4620      	mov	r0, r4
 80165c8:	f7fa f94f 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 80165cc:	f9b5 6000 	ldrsh.w	r6, [r5]
 80165d0:	b150      	cbz	r0, 80165e8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80165d2:	8026      	strh	r6, [r4, #0]
 80165d4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80165d8:	8063      	strh	r3, [r4, #2]
 80165da:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80165de:	80a3      	strh	r3, [r4, #4]
 80165e0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80165e4:	80e3      	strh	r3, [r4, #6]
 80165e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165e8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80165ec:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80165f0:	42b1      	cmp	r1, r6
 80165f2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80165f6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80165fa:	460f      	mov	r7, r1
 80165fc:	88ed      	ldrh	r5, [r5, #6]
 80165fe:	bfa8      	it	ge
 8016600:	4637      	movge	r7, r6
 8016602:	4293      	cmp	r3, r2
 8016604:	4618      	mov	r0, r3
 8016606:	4466      	add	r6, ip
 8016608:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801660c:	bfa8      	it	ge
 801660e:	4610      	movge	r0, r2
 8016610:	442a      	add	r2, r5
 8016612:	88e5      	ldrh	r5, [r4, #6]
 8016614:	4461      	add	r1, ip
 8016616:	b236      	sxth	r6, r6
 8016618:	8027      	strh	r7, [r4, #0]
 801661a:	442b      	add	r3, r5
 801661c:	b209      	sxth	r1, r1
 801661e:	b212      	sxth	r2, r2
 8016620:	8060      	strh	r0, [r4, #2]
 8016622:	b21b      	sxth	r3, r3
 8016624:	428e      	cmp	r6, r1
 8016626:	bfac      	ite	ge
 8016628:	ebc7 0106 	rsbge	r1, r7, r6
 801662c:	ebc7 0101 	rsblt	r1, r7, r1
 8016630:	429a      	cmp	r2, r3
 8016632:	bfac      	ite	ge
 8016634:	ebc0 0202 	rsbge	r2, r0, r2
 8016638:	ebc0 0203 	rsblt	r2, r0, r3
 801663c:	80a1      	strh	r1, [r4, #4]
 801663e:	80e2      	strh	r2, [r4, #6]
 8016640:	e7d1      	b.n	80165e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016644 <_ZN8touchgfx11Application11getInstanceEv>:
 8016644:	4b01      	ldr	r3, [pc, #4]	@ (801664c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016646:	6818      	ldr	r0, [r3, #0]
 8016648:	4770      	bx	lr
 801664a:	bf00      	nop
 801664c:	24026470 	.word	0x24026470

08016650 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016650:	2300      	movs	r3, #0
 8016652:	b510      	push	{r4, lr}
 8016654:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8016658:	4604      	mov	r4, r0
 801665a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801665e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016662:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016666:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801666a:	429a      	cmp	r2, r3
 801666c:	d90e      	bls.n	801668c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801666e:	18e2      	adds	r2, r4, r3
 8016670:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8016674:	b122      	cbz	r2, 8016680 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016676:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801667a:	6803      	ldr	r3, [r0, #0]
 801667c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801667e:	4798      	blx	r3
 8016680:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016684:	3301      	adds	r3, #1
 8016686:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801668a:	e7ea      	b.n	8016662 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801668c:	bd10      	pop	{r4, pc}

0801668e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801668e:	b530      	push	{r4, r5, lr}
 8016690:	2200      	movs	r2, #0
 8016692:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8016696:	b293      	uxth	r3, r2
 8016698:	429d      	cmp	r5, r3
 801669a:	d90e      	bls.n	80166ba <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801669c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80166a0:	428b      	cmp	r3, r1
 80166a2:	d10b      	bne.n	80166bc <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80166a4:	1884      	adds	r4, r0, r2
 80166a6:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 80166aa:	b13b      	cbz	r3, 80166bc <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 80166ac:	3b01      	subs	r3, #1
 80166ae:	b2db      	uxtb	r3, r3
 80166b0:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 80166b4:	b90b      	cbnz	r3, 80166ba <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80166b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80166ba:	bd30      	pop	{r4, r5, pc}
 80166bc:	3201      	adds	r2, #1
 80166be:	e7ea      	b.n	8016696 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080166c0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80166c0:	2300      	movs	r3, #0
 80166c2:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80166c6:	30a4      	adds	r0, #164	@ 0xa4
 80166c8:	f820 3c24 	strh.w	r3, [r0, #-36]
 80166cc:	f802 3b01 	strb.w	r3, [r2], #1
 80166d0:	4282      	cmp	r2, r0
 80166d2:	d1fb      	bne.n	80166cc <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80166d4:	4770      	bx	lr
	...

080166d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80166d8:	b570      	push	{r4, r5, r6, lr}
 80166da:	4c0b      	ldr	r4, [pc, #44]	@ (8016708 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80166dc:	4605      	mov	r5, r0
 80166de:	460e      	mov	r6, r1
 80166e0:	6820      	ldr	r0, [r4, #0]
 80166e2:	b110      	cbz	r0, 80166ea <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80166e4:	6803      	ldr	r3, [r0, #0]
 80166e6:	695b      	ldr	r3, [r3, #20]
 80166e8:	4798      	blx	r3
 80166ea:	1d28      	adds	r0, r5, #4
 80166ec:	f7ff ffe8 	bl	80166c0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80166f0:	6026      	str	r6, [r4, #0]
 80166f2:	6833      	ldr	r3, [r6, #0]
 80166f4:	4630      	mov	r0, r6
 80166f6:	68db      	ldr	r3, [r3, #12]
 80166f8:	4798      	blx	r3
 80166fa:	682b      	ldr	r3, [r5, #0]
 80166fc:	4628      	mov	r0, r5
 80166fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016704:	4718      	bx	r3
 8016706:	bf00      	nop
 8016708:	24026460 	.word	0x24026460

0801670c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801670c:	2300      	movs	r3, #0
 801670e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8016712:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8016716:	461a      	mov	r2, r3
 8016718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801671a:	461c      	mov	r4, r3
 801671c:	461d      	mov	r5, r3
 801671e:	459c      	cmp	ip, r3
 8016720:	dd1a      	ble.n	8016758 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016722:	18c6      	adds	r6, r0, r3
 8016724:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8016728:	b16e      	cbz	r6, 8016746 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801672a:	429a      	cmp	r2, r3
 801672c:	d008      	beq.n	8016740 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801672e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016732:	fa1f fe82 	uxth.w	lr, r2
 8016736:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801673a:	1887      	adds	r7, r0, r2
 801673c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8016740:	3201      	adds	r2, #1
 8016742:	3301      	adds	r3, #1
 8016744:	e7eb      	b.n	801671e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8016746:	4299      	cmp	r1, r3
 8016748:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801674c:	bfa8      	it	ge
 801674e:	3501      	addge	r5, #1
 8016750:	429e      	cmp	r6, r3
 8016752:	bfc8      	it	gt
 8016754:	3401      	addgt	r4, #1
 8016756:	e7f4      	b.n	8016742 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8016758:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801675c:	1b49      	subs	r1, r1, r5
 801675e:	1b1b      	subs	r3, r3, r4
 8016760:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8016764:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016768:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801676c:	4293      	cmp	r3, r2
 801676e:	dd03      	ble.n	8016778 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8016770:	3b01      	subs	r3, #1
 8016772:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8016776:	e7f7      	b.n	8016768 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801677c <_ZN8touchgfx11Application15handleTickEventEv>:
 801677c:	b570      	push	{r4, r5, r6, lr}
 801677e:	4d16      	ldr	r5, [pc, #88]	@ (80167d8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016780:	4604      	mov	r4, r0
 8016782:	6828      	ldr	r0, [r5, #0]
 8016784:	b140      	cbz	r0, 8016798 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016786:	7a03      	ldrb	r3, [r0, #8]
 8016788:	b933      	cbnz	r3, 8016798 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801678a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801678e:	6803      	ldr	r3, [r0, #0]
 8016790:	689b      	ldr	r3, [r3, #8]
 8016792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016796:	4718      	bx	r3
 8016798:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801679c:	4e0f      	ldr	r6, [pc, #60]	@ (80167dc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801679e:	b973      	cbnz	r3, 80167be <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80167a0:	b168      	cbz	r0, 80167be <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80167a2:	7a03      	ldrb	r3, [r0, #8]
 80167a4:	b15b      	cbz	r3, 80167be <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80167a6:	6830      	ldr	r0, [r6, #0]
 80167a8:	b110      	cbz	r0, 80167b0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80167aa:	6803      	ldr	r3, [r0, #0]
 80167ac:	691b      	ldr	r3, [r3, #16]
 80167ae:	4798      	blx	r3
 80167b0:	6828      	ldr	r0, [r5, #0]
 80167b2:	6803      	ldr	r3, [r0, #0]
 80167b4:	68db      	ldr	r3, [r3, #12]
 80167b6:	4798      	blx	r3
 80167b8:	2301      	movs	r3, #1
 80167ba:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80167be:	3404      	adds	r4, #4
 80167c0:	4620      	mov	r0, r4
 80167c2:	f7ff ff45 	bl	8016650 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80167c6:	4620      	mov	r0, r4
 80167c8:	f7ff ffa0 	bl	801670c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80167cc:	6830      	ldr	r0, [r6, #0]
 80167ce:	b110      	cbz	r0, 80167d6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80167d0:	6803      	ldr	r3, [r0, #0]
 80167d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167d4:	e7dd      	b.n	8016792 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80167d6:	bd70      	pop	{r4, r5, r6, pc}
 80167d8:	24026464 	.word	0x24026464
 80167dc:	24026460 	.word	0x24026460

080167e0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80167e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167e2:	2300      	movs	r3, #0
 80167e4:	4604      	mov	r4, r0
 80167e6:	460d      	mov	r5, r1
 80167e8:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 80167ec:	4618      	mov	r0, r3
 80167ee:	b29a      	uxth	r2, r3
 80167f0:	4291      	cmp	r1, r2
 80167f2:	d912      	bls.n	801681a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 80167f4:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 80167f8:	18e6      	adds	r6, r4, r3
 80167fa:	42af      	cmp	r7, r5
 80167fc:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8016800:	d105      	bne.n	801680e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8016802:	2aff      	cmp	r2, #255	@ 0xff
 8016804:	d002      	beq.n	801680c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8016806:	3201      	adds	r2, #1
 8016808:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801680c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801680e:	2a00      	cmp	r2, #0
 8016810:	f103 0301 	add.w	r3, r3, #1
 8016814:	bf08      	it	eq
 8016816:	2001      	moveq	r0, #1
 8016818:	e7e9      	b.n	80167ee <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801681a:	b120      	cbz	r0, 8016826 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801681c:	2920      	cmp	r1, #32
 801681e:	d102      	bne.n	8016826 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8016820:	4620      	mov	r0, r4
 8016822:	f7ff ff73 	bl	801670c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016826:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801682a:	2b1f      	cmp	r3, #31
 801682c:	d8ee      	bhi.n	801680c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801682e:	18e2      	adds	r2, r4, r3
 8016830:	2101      	movs	r1, #1
 8016832:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8016836:	185a      	adds	r2, r3, r1
 8016838:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801683c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8016840:	e7e4      	b.n	801680c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08016842 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016842:	4603      	mov	r3, r0
 8016844:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8016848:	2200      	movs	r2, #0
 801684a:	801a      	strh	r2, [r3, #0]
 801684c:	3308      	adds	r3, #8
 801684e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016852:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016856:	f823 2c02 	strh.w	r2, [r3, #-2]
 801685a:	428b      	cmp	r3, r1
 801685c:	d1f5      	bne.n	801684a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801685e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016862:	4770      	bx	lr

08016864 <_ZN8touchgfx11ApplicationC1Ev>:
 8016864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016866:	4b1d      	ldr	r3, [pc, #116]	@ (80168dc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016868:	4606      	mov	r6, r0
 801686a:	4604      	mov	r4, r0
 801686c:	2500      	movs	r5, #0
 801686e:	f846 3b04 	str.w	r3, [r6], #4
 8016872:	22a8      	movs	r2, #168	@ 0xa8
 8016874:	2100      	movs	r1, #0
 8016876:	4630      	mov	r0, r6
 8016878:	f00e fce2 	bl	8025240 <memset>
 801687c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8016880:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8016884:	4f16      	ldr	r7, [pc, #88]	@ (80168e0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016886:	f7ff ffdc 	bl	8016842 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801688a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801688e:	f7ff ffd8 	bl	8016842 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016892:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8016896:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801689a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801689e:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80168a2:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80168a6:	490f      	ldr	r1, [pc, #60]	@ (80168e4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80168a8:	480f      	ldr	r0, [pc, #60]	@ (80168e8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80168aa:	f00d f845 	bl	8023938 <CRC_Lock>
 80168ae:	4b0f      	ldr	r3, [pc, #60]	@ (80168ec <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80168b0:	b158      	cbz	r0, 80168ca <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80168b2:	801d      	strh	r5, [r3, #0]
 80168b4:	2300      	movs	r3, #0
 80168b6:	4a0e      	ldr	r2, [pc, #56]	@ (80168f0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80168b8:	4630      	mov	r0, r6
 80168ba:	6013      	str	r3, [r2, #0]
 80168bc:	4a0d      	ldr	r2, [pc, #52]	@ (80168f4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80168be:	603b      	str	r3, [r7, #0]
 80168c0:	6013      	str	r3, [r2, #0]
 80168c2:	f7ff fefd 	bl	80166c0 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80168c6:	4620      	mov	r0, r4
 80168c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80168ce:	2002      	movs	r0, #2
 80168d0:	801a      	strh	r2, [r3, #0]
 80168d2:	6038      	str	r0, [r7, #0]
 80168d4:	f001 fe08 	bl	80184e8 <_ZN8touchgfx6Screen4drawEv>
 80168d8:	e7ec      	b.n	80168b4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80168da:	bf00      	nop
 80168dc:	08029388 	.word	0x08029388
 80168e0:	24026460 	.word	0x24026460
 80168e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80168e8:	f407a5c2 	.word	0xf407a5c2
 80168ec:	2400007c 	.word	0x2400007c
 80168f0:	24026470 	.word	0x24026470
 80168f4:	24026464 	.word	0x24026464

080168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80168f8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80168fc:	3b01      	subs	r3, #1
 80168fe:	b29b      	uxth	r3, r3
 8016900:	428b      	cmp	r3, r1
 8016902:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8016906:	b510      	push	{r4, lr}
 8016908:	d908      	bls.n	801691c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801690a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801690e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016918:	685a      	ldr	r2, [r3, #4]
 801691a:	6062      	str	r2, [r4, #4]
 801691c:	bd10      	pop	{r4, pc}
	...

08016920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016924:	b08f      	sub	sp, #60	@ 0x3c
 8016926:	4b8f      	ldr	r3, [pc, #572]	@ (8016b64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016928:	4683      	mov	fp, r0
 801692a:	ac0a      	add	r4, sp, #40	@ 0x28
 801692c:	e884 0006 	stmia.w	r4, {r1, r2}
 8016930:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016934:	4620      	mov	r0, r4
 8016936:	4b8c      	ldr	r3, [pc, #560]	@ (8016b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016938:	f9b3 1000 	ldrsh.w	r1, [r3]
 801693c:	f7ff fdc5 	bl	80164ca <_ZN8touchgfx4Rect10restrictToEss>
 8016940:	4620      	mov	r0, r4
 8016942:	f7f9 ff92 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016946:	2800      	cmp	r0, #0
 8016948:	d16a      	bne.n	8016a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801694a:	9403      	str	r4, [sp, #12]
 801694c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016950:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016954:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016958:	9301      	str	r3, [sp, #4]
 801695a:	35a4      	adds	r5, #164	@ 0xa4
 801695c:	b15c      	cbz	r4, 8016976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801695e:	4629      	mov	r1, r5
 8016960:	9803      	ldr	r0, [sp, #12]
 8016962:	f7ff fe03 	bl	801656c <_ZNK8touchgfx4Rect8includesERKS0_>
 8016966:	3c01      	subs	r4, #1
 8016968:	b118      	cbz	r0, 8016972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801696a:	b2a1      	uxth	r1, r4
 801696c:	9801      	ldr	r0, [sp, #4]
 801696e:	f7ff ffc3 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016972:	3d08      	subs	r5, #8
 8016974:	e7f2      	b.n	801695c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8016976:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801697a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801697e:	f8cd a010 	str.w	sl, [sp, #16]
 8016982:	9302      	str	r3, [sp, #8]
 8016984:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016988:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801698c:	9306      	str	r3, [sp, #24]
 801698e:	445c      	add	r4, fp
 8016990:	2500      	movs	r5, #0
 8016992:	4626      	mov	r6, r4
 8016994:	f8cd a014 	str.w	sl, [sp, #20]
 8016998:	462f      	mov	r7, r5
 801699a:	9b05      	ldr	r3, [sp, #20]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d073      	beq.n	8016a88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80169a0:	9903      	ldr	r1, [sp, #12]
 80169a2:	4630      	mov	r0, r6
 80169a4:	f7ff fd6f 	bl	8016486 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80169a8:	b350      	cbz	r0, 8016a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80169aa:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80169ae:	f9b6 c000 	ldrsh.w	ip, [r6]
 80169b2:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80169b6:	45e6      	cmp	lr, ip
 80169b8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80169bc:	db33      	blt.n	8016a26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80169be:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80169c2:	88b3      	ldrh	r3, [r6, #4]
 80169c4:	4472      	add	r2, lr
 80169c6:	4463      	add	r3, ip
 80169c8:	b212      	sxth	r2, r2
 80169ca:	b21b      	sxth	r3, r3
 80169cc:	429a      	cmp	r2, r3
 80169ce:	dc2a      	bgt.n	8016a26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80169d0:	fa1f f289 	uxth.w	r2, r9
 80169d4:	88f3      	ldrh	r3, [r6, #6]
 80169d6:	45c8      	cmp	r8, r9
 80169d8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80169dc:	4413      	add	r3, r2
 80169de:	fa1f fc88 	uxth.w	ip, r8
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	fa0f fe83 	sxth.w	lr, r3
 80169e8:	db0f      	blt.n	8016a0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80169ea:	eba3 030c 	sub.w	r3, r3, ip
 80169ee:	1ac9      	subs	r1, r1, r3
 80169f0:	b209      	sxth	r1, r1
 80169f2:	2900      	cmp	r1, #0
 80169f4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80169f8:	dd12      	ble.n	8016a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80169fa:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80169fe:	4605      	mov	r5, r0
 8016a00:	9b05      	ldr	r3, [sp, #20]
 8016a02:	3e08      	subs	r6, #8
 8016a04:	3b01      	subs	r3, #1
 8016a06:	9305      	str	r3, [sp, #20]
 8016a08:	e7c7      	b.n	801699a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016a0a:	4461      	add	r1, ip
 8016a0c:	b209      	sxth	r1, r1
 8016a0e:	4571      	cmp	r1, lr
 8016a10:	dc38      	bgt.n	8016a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a12:	eba2 020c 	sub.w	r2, r2, ip
 8016a16:	b212      	sxth	r2, r2
 8016a18:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8016a1c:	2a00      	cmp	r2, #0
 8016a1e:	dcee      	bgt.n	80169fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016a20:	b00f      	add	sp, #60	@ 0x3c
 8016a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a26:	45c8      	cmp	r8, r9
 8016a28:	db2c      	blt.n	8016a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a2a:	88f3      	ldrh	r3, [r6, #6]
 8016a2c:	4499      	add	r9, r3
 8016a2e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8016a32:	4498      	add	r8, r3
 8016a34:	fa0f f989 	sxth.w	r9, r9
 8016a38:	fa0f f888 	sxth.w	r8, r8
 8016a3c:	45c1      	cmp	r9, r8
 8016a3e:	db21      	blt.n	8016a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a40:	fa1f f28c 	uxth.w	r2, ip
 8016a44:	88b3      	ldrh	r3, [r6, #4]
 8016a46:	45e6      	cmp	lr, ip
 8016a48:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8016a4c:	4413      	add	r3, r2
 8016a4e:	fa1f f88e 	uxth.w	r8, lr
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	fa0f f983 	sxth.w	r9, r3
 8016a58:	db0a      	blt.n	8016a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8016a5a:	eba3 0308 	sub.w	r3, r3, r8
 8016a5e:	1ac9      	subs	r1, r1, r3
 8016a60:	b209      	sxth	r1, r1
 8016a62:	2900      	cmp	r1, #0
 8016a64:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8016a68:	ddda      	ble.n	8016a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016a6a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016a6e:	e7c6      	b.n	80169fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016a70:	4441      	add	r1, r8
 8016a72:	b209      	sxth	r1, r1
 8016a74:	4549      	cmp	r1, r9
 8016a76:	dc05      	bgt.n	8016a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a78:	eba2 0208 	sub.w	r2, r2, r8
 8016a7c:	b212      	sxth	r2, r2
 8016a7e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8016a82:	e7cb      	b.n	8016a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016a84:	4607      	mov	r7, r0
 8016a86:	e7bb      	b.n	8016a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016a88:	2d00      	cmp	r5, #0
 8016a8a:	d181      	bne.n	8016990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016a8c:	2f00      	cmp	r7, #0
 8016a8e:	f000 81dd 	beq.w	8016e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016a92:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8016a96:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8016a9a:	b2b3      	uxth	r3, r6
 8016a9c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8016aa0:	9305      	str	r3, [sp, #20]
 8016aa2:	9a05      	ldr	r2, [sp, #20]
 8016aa4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8016aa8:	4413      	add	r3, r2
 8016aaa:	b2ba      	uxth	r2, r7
 8016aac:	4492      	add	sl, r2
 8016aae:	b29b      	uxth	r3, r3
 8016ab0:	fa1f fa8a 	uxth.w	sl, sl
 8016ab4:	fa0f f883 	sxth.w	r8, r3
 8016ab8:	fa0f f98a 	sxth.w	r9, sl
 8016abc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016ac0:	9b04      	ldr	r3, [sp, #16]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d052      	beq.n	8016b6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016ac6:	9903      	ldr	r1, [sp, #12]
 8016ac8:	4620      	mov	r0, r4
 8016aca:	f7ff fcdc 	bl	8016486 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016ace:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016ad2:	b1c0      	cbz	r0, 8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016ad4:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016ad8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016adc:	4576      	cmp	r6, lr
 8016ade:	dc22      	bgt.n	8016b26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016ae0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016ae4:	44f4      	add	ip, lr
 8016ae6:	fa0f fc8c 	sxth.w	ip, ip
 8016aea:	45e0      	cmp	r8, ip
 8016aec:	db1b      	blt.n	8016b26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016aee:	428f      	cmp	r7, r1
 8016af0:	fa1f fc81 	uxth.w	ip, r1
 8016af4:	88e1      	ldrh	r1, [r4, #6]
 8016af6:	dc0d      	bgt.n	8016b14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8016af8:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016afc:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016b00:	eba1 010c 	sub.w	r1, r1, ip
 8016b04:	80e1      	strh	r1, [r4, #6]
 8016b06:	4628      	mov	r0, r5
 8016b08:	9904      	ldr	r1, [sp, #16]
 8016b0a:	3c08      	subs	r4, #8
 8016b0c:	4605      	mov	r5, r0
 8016b0e:	3901      	subs	r1, #1
 8016b10:	9104      	str	r1, [sp, #16]
 8016b12:	e7d3      	b.n	8016abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8016b14:	4461      	add	r1, ip
 8016b16:	b209      	sxth	r1, r1
 8016b18:	4549      	cmp	r1, r9
 8016b1a:	dcf5      	bgt.n	8016b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b1c:	eba2 0c0c 	sub.w	ip, r2, ip
 8016b20:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016b24:	e7ef      	b.n	8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b26:	428f      	cmp	r7, r1
 8016b28:	dcee      	bgt.n	8016b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b2a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8016b2e:	4461      	add	r1, ip
 8016b30:	b209      	sxth	r1, r1
 8016b32:	4589      	cmp	r9, r1
 8016b34:	dbe8      	blt.n	8016b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b36:	4576      	cmp	r6, lr
 8016b38:	fa1f fc8e 	uxth.w	ip, lr
 8016b3c:	88a1      	ldrh	r1, [r4, #4]
 8016b3e:	dc07      	bgt.n	8016b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8016b40:	eba3 0c0c 	sub.w	ip, r3, ip
 8016b44:	f8a4 8000 	strh.w	r8, [r4]
 8016b48:	eba1 010c 	sub.w	r1, r1, ip
 8016b4c:	80a1      	strh	r1, [r4, #4]
 8016b4e:	e7da      	b.n	8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b50:	4461      	add	r1, ip
 8016b52:	b209      	sxth	r1, r1
 8016b54:	4588      	cmp	r8, r1
 8016b56:	dbd7      	blt.n	8016b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016b58:	9905      	ldr	r1, [sp, #20]
 8016b5a:	eba1 0c0c 	sub.w	ip, r1, ip
 8016b5e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8016b62:	e7d0      	b.n	8016b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b64:	24026412 	.word	0x24026412
 8016b68:	24026410 	.word	0x24026410
 8016b6c:	2d00      	cmp	r5, #0
 8016b6e:	f000 816d 	beq.w	8016e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016b72:	9b06      	ldr	r3, [sp, #24]
 8016b74:	445b      	add	r3, fp
 8016b76:	461c      	mov	r4, r3
 8016b78:	9b02      	ldr	r3, [sp, #8]
 8016b7a:	3301      	adds	r3, #1
 8016b7c:	f000 8166 	beq.w	8016e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016b80:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8016b84:	9803      	ldr	r0, [sp, #12]
 8016b86:	4629      	mov	r1, r5
 8016b88:	f7ff fcf0 	bl	801656c <_ZNK8touchgfx4Rect8includesERKS0_>
 8016b8c:	b120      	cbz	r0, 8016b98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8016b8e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016b92:	9801      	ldr	r0, [sp, #4]
 8016b94:	f7ff feb0 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016b98:	9903      	ldr	r1, [sp, #12]
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	f7ff fc73 	bl	8016486 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016ba0:	2800      	cmp	r0, #0
 8016ba2:	f000 809c 	beq.w	8016cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016ba6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8016baa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016bae:	fa1f f189 	uxth.w	r1, r9
 8016bb2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bb8:	eb01 0c03 	add.w	ip, r1, r3
 8016bbc:	b283      	uxth	r3, r0
 8016bbe:	4548      	cmp	r0, r9
 8016bc0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8016bc4:	fa1f fa8c 	uxth.w	sl, ip
 8016bc8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8016bcc:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8016bd0:	eb03 050c 	add.w	r5, r3, ip
 8016bd4:	b2ad      	uxth	r5, r5
 8016bd6:	9505      	str	r5, [sp, #20]
 8016bd8:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016bdc:	9504      	str	r5, [sp, #16]
 8016bde:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8016be2:	f340 8099 	ble.w	8016d18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8016be6:	1a5b      	subs	r3, r3, r1
 8016be8:	4596      	cmp	lr, r2
 8016bea:	fa0f f08a 	sxth.w	r0, sl
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	b21e      	sxth	r6, r3
 8016bf2:	dd2e      	ble.n	8016c52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8016bf4:	9f02      	ldr	r7, [sp, #8]
 8016bf6:	fa1f fe8e 	uxth.w	lr, lr
 8016bfa:	b292      	uxth	r2, r2
 8016bfc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8016c00:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8016c04:	9f04      	ldr	r7, [sp, #16]
 8016c06:	ebae 0102 	sub.w	r1, lr, r2
 8016c0a:	44a6      	add	lr, r4
 8016c0c:	1a3f      	subs	r7, r7, r0
 8016c0e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8016c12:	b289      	uxth	r1, r1
 8016c14:	4402      	add	r2, r0
 8016c16:	fa0f fe8e 	sxth.w	lr, lr
 8016c1a:	b20d      	sxth	r5, r1
 8016c1c:	b212      	sxth	r2, r2
 8016c1e:	436f      	muls	r7, r5
 8016c20:	ebae 0202 	sub.w	r2, lr, r2
 8016c24:	4372      	muls	r2, r6
 8016c26:	4297      	cmp	r7, r2
 8016c28:	db09      	blt.n	8016c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016c2a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8016c2e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8016c32:	449c      	add	ip, r3
 8016c34:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8016c38:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016c3c:	e686      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c3e:	4421      	add	r1, r4
 8016c40:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8016c44:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8016c48:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016c4c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016c50:	e67c      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c52:	9f04      	ldr	r7, [sp, #16]
 8016c54:	42b8      	cmp	r0, r7
 8016c56:	da27      	bge.n	8016ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8016c58:	9902      	ldr	r1, [sp, #8]
 8016c5a:	1a3f      	subs	r7, r7, r0
 8016c5c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8016c60:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8016c64:	eb05 010e 	add.w	r1, r5, lr
 8016c68:	fa1f f881 	uxth.w	r8, r1
 8016c6c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8016c70:	4411      	add	r1, r2
 8016c72:	fa0f f988 	sxth.w	r9, r8
 8016c76:	eba2 020e 	sub.w	r2, r2, lr
 8016c7a:	eba1 0108 	sub.w	r1, r1, r8
 8016c7e:	4372      	muls	r2, r6
 8016c80:	b289      	uxth	r1, r1
 8016c82:	fa0f f881 	sxth.w	r8, r1
 8016c86:	fb08 f707 	mul.w	r7, r8, r7
 8016c8a:	42ba      	cmp	r2, r7
 8016c8c:	dc06      	bgt.n	8016c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8016c8e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8016c92:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8016c96:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8016c9a:	e7ca      	b.n	8016c32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8016c9c:	4429      	add	r1, r5
 8016c9e:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8016ca2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016ca6:	e651      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016ca8:	9805      	ldr	r0, [sp, #20]
 8016caa:	2d06      	cmp	r5, #6
 8016cac:	ebaa 0000 	sub.w	r0, sl, r0
 8016cb0:	b280      	uxth	r0, r0
 8016cb2:	fa0f fe80 	sxth.w	lr, r0
 8016cb6:	d817      	bhi.n	8016ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8016cb8:	9b04      	ldr	r3, [sp, #16]
 8016cba:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8016cbe:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8016cc2:	1c6b      	adds	r3, r5, #1
 8016cc4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8016cc8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016ccc:	9b01      	ldr	r3, [sp, #4]
 8016cce:	9801      	ldr	r0, [sp, #4]
 8016cd0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016cd4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016cd8:	805a      	strh	r2, [r3, #2]
 8016cda:	809e      	strh	r6, [r3, #4]
 8016cdc:	80d9      	strh	r1, [r3, #6]
 8016cde:	9b02      	ldr	r3, [sp, #8]
 8016ce0:	3c08      	subs	r4, #8
 8016ce2:	3b01      	subs	r3, #1
 8016ce4:	9302      	str	r3, [sp, #8]
 8016ce6:	e747      	b.n	8016b78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016ce8:	9a02      	ldr	r2, [sp, #8]
 8016cea:	45b6      	cmp	lr, r6
 8016cec:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016cf0:	db0d      	blt.n	8016d0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016cf2:	449c      	add	ip, r3
 8016cf4:	445a      	add	r2, fp
 8016cf6:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016cfa:	fa1f fc8c 	uxth.w	ip, ip
 8016cfe:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8016d02:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016d06:	448c      	add	ip, r1
 8016d08:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8016d0c:	e61e      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016d0e:	445a      	add	r2, fp
 8016d10:	4484      	add	ip, r0
 8016d12:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8016d16:	e78f      	b.n	8016c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016d18:	fa1f f18e 	uxth.w	r1, lr
 8016d1c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8016d20:	b293      	uxth	r3, r2
 8016d22:	4596      	cmp	lr, r2
 8016d24:	eb01 0806 	add.w	r8, r1, r6
 8016d28:	9306      	str	r3, [sp, #24]
 8016d2a:	fa1f f888 	uxth.w	r8, r8
 8016d2e:	9f06      	ldr	r7, [sp, #24]
 8016d30:	fa0f f388 	sxth.w	r3, r8
 8016d34:	9307      	str	r3, [sp, #28]
 8016d36:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8016d3a:	443b      	add	r3, r7
 8016d3c:	b29b      	uxth	r3, r3
 8016d3e:	9308      	str	r3, [sp, #32]
 8016d40:	da24      	bge.n	8016d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8016d42:	9905      	ldr	r1, [sp, #20]
 8016d44:	eba3 0308 	sub.w	r3, r3, r8
 8016d48:	eba2 020e 	sub.w	r2, r2, lr
 8016d4c:	eba9 0000 	sub.w	r0, r9, r0
 8016d50:	ebaa 0401 	sub.w	r4, sl, r1
 8016d54:	b29b      	uxth	r3, r3
 8016d56:	b2a4      	uxth	r4, r4
 8016d58:	b219      	sxth	r1, r3
 8016d5a:	b225      	sxth	r5, r4
 8016d5c:	4348      	muls	r0, r1
 8016d5e:	436a      	muls	r2, r5
 8016d60:	4282      	cmp	r2, r0
 8016d62:	9a02      	ldr	r2, [sp, #8]
 8016d64:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016d68:	445a      	add	r2, fp
 8016d6a:	dc06      	bgt.n	8016d7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016d6c:	9b07      	ldr	r3, [sp, #28]
 8016d6e:	44a4      	add	ip, r4
 8016d70:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8016d74:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8016d78:	e75e      	b.n	8016c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016d7a:	9904      	ldr	r1, [sp, #16]
 8016d7c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8016d80:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8016d84:	4433      	add	r3, r6
 8016d86:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8016d8a:	e5df      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016d8c:	9f06      	ldr	r7, [sp, #24]
 8016d8e:	9b04      	ldr	r3, [sp, #16]
 8016d90:	1bc9      	subs	r1, r1, r7
 8016d92:	fa0f f78a 	sxth.w	r7, sl
 8016d96:	b289      	uxth	r1, r1
 8016d98:	429f      	cmp	r7, r3
 8016d9a:	fa0f fe81 	sxth.w	lr, r1
 8016d9e:	dd23      	ble.n	8016de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8016da0:	9a05      	ldr	r2, [sp, #20]
 8016da2:	eba9 0000 	sub.w	r0, r9, r0
 8016da6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016daa:	ebaa 0202 	sub.w	r2, sl, r2
 8016dae:	9d07      	ldr	r5, [sp, #28]
 8016db0:	fb0e f000 	mul.w	r0, lr, r0
 8016db4:	b292      	uxth	r2, r2
 8016db6:	eba5 0a03 	sub.w	sl, r5, r3
 8016dba:	9b02      	ldr	r3, [sp, #8]
 8016dbc:	b214      	sxth	r4, r2
 8016dbe:	00db      	lsls	r3, r3, #3
 8016dc0:	fb04 fa0a 	mul.w	sl, r4, sl
 8016dc4:	445b      	add	r3, fp
 8016dc6:	4550      	cmp	r0, sl
 8016dc8:	db03      	blt.n	8016dd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8016dca:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8016dce:	4494      	add	ip, r2
 8016dd0:	e732      	b.n	8016c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016dd2:	9a04      	ldr	r2, [sp, #16]
 8016dd4:	4431      	add	r1, r6
 8016dd6:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8016dda:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8016dde:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8016de2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016de6:	e75c      	b.n	8016ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016de8:	9b08      	ldr	r3, [sp, #32]
 8016dea:	2d06      	cmp	r5, #6
 8016dec:	eba3 0308 	sub.w	r3, r3, r8
 8016df0:	b29b      	uxth	r3, r3
 8016df2:	b218      	sxth	r0, r3
 8016df4:	d813      	bhi.n	8016e1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8016df6:	9b07      	ldr	r3, [sp, #28]
 8016df8:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8016dfc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8016e00:	1c6b      	adds	r3, r5, #1
 8016e02:	9901      	ldr	r1, [sp, #4]
 8016e04:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016e08:	9b01      	ldr	r3, [sp, #4]
 8016e0a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016e0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016e12:	805a      	strh	r2, [r3, #2]
 8016e14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e16:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016e1a:	809a      	strh	r2, [r3, #4]
 8016e1c:	e75f      	b.n	8016cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016e1e:	9c02      	ldr	r4, [sp, #8]
 8016e20:	4570      	cmp	r0, lr
 8016e22:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016e26:	db0d      	blt.n	8016e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016e28:	4431      	add	r1, r6
 8016e2a:	9b06      	ldr	r3, [sp, #24]
 8016e2c:	445c      	add	r4, fp
 8016e2e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8016e32:	b289      	uxth	r1, r1
 8016e34:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8016e38:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016e3c:	4419      	add	r1, r3
 8016e3e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8016e42:	e583      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016e44:	445c      	add	r4, fp
 8016e46:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8016e4a:	e79b      	b.n	8016d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016e4c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016e50:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8016e54:	1e65      	subs	r5, r4, #1
 8016e56:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8016e5a:	b2ad      	uxth	r5, r5
 8016e5c:	42b5      	cmp	r5, r6
 8016e5e:	d044      	beq.n	8016eea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8016e60:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8016e64:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8016e68:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8016e6c:	4282      	cmp	r2, r0
 8016e6e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8016e72:	d11f      	bne.n	8016eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016e74:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8016e78:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8016e7c:	459c      	cmp	ip, r3
 8016e7e:	d119      	bne.n	8016eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8016e80:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8016e84:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8016e88:	19d8      	adds	r0, r3, r7
 8016e8a:	b200      	sxth	r0, r0
 8016e8c:	4288      	cmp	r0, r1
 8016e8e:	d109      	bne.n	8016ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8016e90:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8016e94:	4413      	add	r3, r2
 8016e96:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8016e9a:	4629      	mov	r1, r5
 8016e9c:	9801      	ldr	r0, [sp, #4]
 8016e9e:	f7ff fd2b 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016ea2:	e003      	b.n	8016eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016ea4:	4411      	add	r1, r2
 8016ea6:	b209      	sxth	r1, r1
 8016ea8:	42b9      	cmp	r1, r7
 8016eaa:	d0f3      	beq.n	8016e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8016eac:	3d01      	subs	r5, #1
 8016eae:	3c08      	subs	r4, #8
 8016eb0:	b2ad      	uxth	r5, r5
 8016eb2:	e7d3      	b.n	8016e5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8016eb4:	42b9      	cmp	r1, r7
 8016eb6:	d1f9      	bne.n	8016eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016eb8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8016ebc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016ec0:	4299      	cmp	r1, r3
 8016ec2:	d1f3      	bne.n	8016eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016ec4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8016ec8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8016ecc:	181f      	adds	r7, r3, r0
 8016ece:	b23f      	sxth	r7, r7
 8016ed0:	42ba      	cmp	r2, r7
 8016ed2:	d105      	bne.n	8016ee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8016ed4:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8016ed8:	440b      	add	r3, r1
 8016eda:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8016ede:	e7dc      	b.n	8016e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8016ee0:	440a      	add	r2, r1
 8016ee2:	b212      	sxth	r2, r2
 8016ee4:	4290      	cmp	r0, r2
 8016ee6:	d1e1      	bne.n	8016eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8016ee8:	e7f6      	b.n	8016ed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8016eea:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8016eee:	2e07      	cmp	r6, #7
 8016ef0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016ef4:	d812      	bhi.n	8016f1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8016ef6:	1c75      	adds	r5, r6, #1
 8016ef8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016efc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8016f00:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8016f04:	9d01      	ldr	r5, [sp, #4]
 8016f06:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8016f0a:	442c      	add	r4, r5
 8016f0c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8016f10:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016f14:	8061      	strh	r1, [r4, #2]
 8016f16:	80a2      	strh	r2, [r4, #4]
 8016f18:	80e3      	strh	r3, [r4, #6]
 8016f1a:	e581      	b.n	8016a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016f1c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016f20:	3e01      	subs	r6, #1
 8016f22:	445c      	add	r4, fp
 8016f24:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8016f28:	f04f 37ff 	mov.w	r7, #4294967295
 8016f2c:	2500      	movs	r5, #0
 8016f2e:	9305      	str	r3, [sp, #20]
 8016f30:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016f34:	1e72      	subs	r2, r6, #1
 8016f36:	9302      	str	r3, [sp, #8]
 8016f38:	4691      	mov	r9, r2
 8016f3a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8016f3e:	9304      	str	r3, [sp, #16]
 8016f40:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8016f44:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016f48:	6818      	ldr	r0, [r3, #0]
 8016f4a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016f4e:	9207      	str	r2, [sp, #28]
 8016f50:	bf16      	itet	ne
 8016f52:	9905      	ldrne	r1, [sp, #20]
 8016f54:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016f58:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016f5c:	9306      	str	r3, [sp, #24]
 8016f5e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016f62:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016f66:	fb18 f801 	smulbb	r8, r8, r1
 8016f6a:	6859      	ldr	r1, [r3, #4]
 8016f6c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016f70:	4671      	mov	r1, lr
 8016f72:	a80c      	add	r0, sp, #48	@ 0x30
 8016f74:	f7ff fb20 	bl	80165b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016f78:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8016f7c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8016f80:	f04f 0c08 	mov.w	ip, #8
 8016f84:	9b04      	ldr	r3, [sp, #16]
 8016f86:	9a02      	ldr	r2, [sp, #8]
 8016f88:	fb10 f001 	smulbb	r0, r0, r1
 8016f8c:	fb02 8803 	mla	r8, r2, r3, r8
 8016f90:	eba0 0108 	sub.w	r1, r0, r8
 8016f94:	fb90 f0fc 	sdiv	r0, r0, ip
 8016f98:	4288      	cmp	r0, r1
 8016f9a:	dc20      	bgt.n	8016fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8016f9c:	4551      	cmp	r1, sl
 8016f9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016fa2:	da03      	bge.n	8016fac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8016fa4:	b1d9      	cbz	r1, 8016fde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8016fa6:	468a      	mov	sl, r1
 8016fa8:	464f      	mov	r7, r9
 8016faa:	4635      	mov	r5, r6
 8016fac:	f109 39ff 	add.w	r9, r9, #4294967295
 8016fb0:	f119 0f02 	cmn.w	r9, #2
 8016fb4:	d1c6      	bne.n	8016f44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8016fb6:	4616      	mov	r6, r2
 8016fb8:	3201      	adds	r2, #1
 8016fba:	f1a4 0408 	sub.w	r4, r4, #8
 8016fbe:	d1b7      	bne.n	8016f30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8016fc0:	9b01      	ldr	r3, [sp, #4]
 8016fc2:	b2ac      	uxth	r4, r5
 8016fc4:	00ed      	lsls	r5, r5, #3
 8016fc6:	1958      	adds	r0, r3, r5
 8016fc8:	1c7b      	adds	r3, r7, #1
 8016fca:	d10b      	bne.n	8016fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8016fcc:	4601      	mov	r1, r0
 8016fce:	9803      	ldr	r0, [sp, #12]
 8016fd0:	f7ff faf2 	bl	80165b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	9801      	ldr	r0, [sp, #4]
 8016fd8:	f7ff fc8e 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016fdc:	e4b6      	b.n	801694c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016fde:	464f      	mov	r7, r9
 8016fe0:	4635      	mov	r5, r6
 8016fe2:	e7ed      	b.n	8016fc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8016fe4:	9b01      	ldr	r3, [sp, #4]
 8016fe6:	00ff      	lsls	r7, r7, #3
 8016fe8:	445d      	add	r5, fp
 8016fea:	19d9      	adds	r1, r3, r7
 8016fec:	445f      	add	r7, fp
 8016fee:	f7ff fae3 	bl	80165b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016ff2:	9b03      	ldr	r3, [sp, #12]
 8016ff4:	cb03      	ldmia	r3!, {r0, r1}
 8016ff6:	9b03      	ldr	r3, [sp, #12]
 8016ff8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8016ffc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8017000:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8017004:	6869      	ldr	r1, [r5, #4]
 8017006:	c303      	stmia	r3!, {r0, r1}
 8017008:	e7e4      	b.n	8016fd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801700a:	bf00      	nop

0801700c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801700c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017010:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8017014:	b09b      	sub	sp, #108	@ 0x6c
 8017016:	4604      	mov	r4, r0
 8017018:	4630      	mov	r0, r6
 801701a:	f7f9 fc26 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 801701e:	4605      	mov	r5, r0
 8017020:	b948      	cbnz	r0, 8017036 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8017022:	6823      	ldr	r3, [r4, #0]
 8017024:	4620      	mov	r0, r4
 8017026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017028:	e896 0006 	ldmia.w	r6, {r1, r2}
 801702c:	4798      	blx	r3
 801702e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017032:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8017036:	4bc5      	ldr	r3, [pc, #788]	@ (801734c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d03f      	beq.n	80170be <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801703e:	4dc4      	ldr	r5, [pc, #784]	@ (8017350 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8017040:	4628      	mov	r0, r5
 8017042:	f7f9 fc12 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017046:	4606      	mov	r6, r0
 8017048:	2800      	cmp	r0, #0
 801704a:	d138      	bne.n	80170be <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801704c:	4628      	mov	r0, r5
 801704e:	f7ff f947 	bl	80162e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017052:	6823      	ldr	r3, [r4, #0]
 8017054:	6829      	ldr	r1, [r5, #0]
 8017056:	4620      	mov	r0, r4
 8017058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801705a:	686a      	ldr	r2, [r5, #4]
 801705c:	4798      	blx	r3
 801705e:	802e      	strh	r6, [r5, #0]
 8017060:	806e      	strh	r6, [r5, #2]
 8017062:	80ae      	strh	r6, [r5, #4]
 8017064:	80ee      	strh	r6, [r5, #6]
 8017066:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801706a:	4dba      	ldr	r5, [pc, #744]	@ (8017354 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801706c:	4640      	mov	r0, r8
 801706e:	f7ff fbe8 	bl	8016842 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017072:	882e      	ldrh	r6, [r5, #0]
 8017074:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8017078:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801707c:	4633      	mov	r3, r6
 801707e:	42bb      	cmp	r3, r7
 8017080:	d224      	bcs.n	80170cc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017082:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8017086:	2907      	cmp	r1, #7
 8017088:	d816      	bhi.n	80170b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801708a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801708e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8017092:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8017096:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801709a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801709e:	1c4a      	adds	r2, r1, #1
 80170a0:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80170a4:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80170a8:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80170ac:	f8a2 a002 	strh.w	sl, [r2, #2]
 80170b0:	f8a2 e004 	strh.w	lr, [r2, #4]
 80170b4:	f8a2 c006 	strh.w	ip, [r2, #6]
 80170b8:	3301      	adds	r3, #1
 80170ba:	b29b      	uxth	r3, r3
 80170bc:	e7df      	b.n	801707e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80170be:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d1cf      	bne.n	8017066 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80170c6:	b01b      	add	sp, #108	@ 0x6c
 80170c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170cc:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 80170d0:	42b3      	cmp	r3, r6
 80170d2:	d90c      	bls.n	80170ee <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80170d4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80170d8:	6822      	ldr	r2, [r4, #0]
 80170da:	3601      	adds	r6, #1
 80170dc:	4620      	mov	r0, r4
 80170de:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 80170e0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80170e4:	b2b6      	uxth	r6, r6
 80170e6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80170ea:	47b8      	blx	r7
 80170ec:	e7ee      	b.n	80170cc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80170ee:	4a9a      	ldr	r2, [pc, #616]	@ (8017358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80170f0:	6813      	ldr	r3, [r2, #0]
 80170f2:	4691      	mov	r9, r2
 80170f4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80170f8:	2b01      	cmp	r3, #1
 80170fa:	f040 80e0 	bne.w	80172be <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80170fe:	8829      	ldrh	r1, [r5, #0]
 8017100:	2600      	movs	r6, #0
 8017102:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8017106:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801710a:	33ae      	adds	r3, #174	@ 0xae
 801710c:	428f      	cmp	r7, r1
 801710e:	f103 0308 	add.w	r3, r3, #8
 8017112:	dd0a      	ble.n	801712a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8017114:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8017118:	3101      	adds	r1, #1
 801711a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801711e:	4402      	add	r2, r0
 8017120:	b212      	sxth	r2, r2
 8017122:	4296      	cmp	r6, r2
 8017124:	bfb8      	it	lt
 8017126:	4616      	movlt	r6, r2
 8017128:	e7f0      	b.n	801710c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801712a:	4b8c      	ldr	r3, [pc, #560]	@ (801735c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801712c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8017358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8017130:	881b      	ldrh	r3, [r3, #0]
 8017132:	2b0f      	cmp	r3, #15
 8017134:	bf8c      	ite	hi
 8017136:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801713a:	f04f 0b01 	movls.w	fp, #1
 801713e:	2300      	movs	r3, #0
 8017140:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017144:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8017148:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801714c:	4b82      	ldr	r3, [pc, #520]	@ (8017358 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801714e:	4438      	add	r0, r7
 8017150:	b207      	sxth	r7, r0
 8017152:	6818      	ldr	r0, [r3, #0]
 8017154:	42b7      	cmp	r7, r6
 8017156:	6803      	ldr	r3, [r0, #0]
 8017158:	f280 8083 	bge.w	8017262 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801715c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017160:	4798      	blx	r3
 8017162:	eb07 030b 	add.w	r3, r7, fp
 8017166:	4298      	cmp	r0, r3
 8017168:	da07      	bge.n	801717a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801716a:	42b0      	cmp	r0, r6
 801716c:	da05      	bge.n	801717a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801716e:	4287      	cmp	r7, r0
 8017170:	dd6c      	ble.n	801724c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017172:	2f00      	cmp	r7, #0
 8017174:	dd6a      	ble.n	801724c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017176:	4630      	mov	r0, r6
 8017178:	e004      	b.n	8017184 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801717a:	4287      	cmp	r7, r0
 801717c:	dcfb      	bgt.n	8017176 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801717e:	42b0      	cmp	r0, r6
 8017180:	bfa8      	it	ge
 8017182:	4630      	movge	r0, r6
 8017184:	4b76      	ldr	r3, [pc, #472]	@ (8017360 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017186:	1bc0      	subs	r0, r0, r7
 8017188:	2200      	movs	r2, #0
 801718a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801718e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017192:	882f      	ldrh	r7, [r5, #0]
 8017194:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017198:	f8ad 3018 	strh.w	r3, [sp, #24]
 801719c:	f8ad 001a 	strh.w	r0, [sp, #26]
 80171a0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80171a4:	42bb      	cmp	r3, r7
 80171a6:	d9cd      	bls.n	8017144 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80171a8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80171ac:	ab07      	add	r3, sp, #28
 80171ae:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80171b2:	6851      	ldr	r1, [r2, #4]
 80171b4:	c303      	stmia	r3!, {r0, r1}
 80171b6:	a905      	add	r1, sp, #20
 80171b8:	a807      	add	r0, sp, #28
 80171ba:	f7ff f964 	bl	8016486 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80171be:	2800      	cmp	r0, #0
 80171c0:	d04c      	beq.n	801725c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80171c2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80171c6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80171ca:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80171ce:	4686      	mov	lr, r0
 80171d0:	4290      	cmp	r0, r2
 80171d2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80171d6:	4450      	add	r0, sl
 80171d8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80171dc:	bfb8      	it	lt
 80171de:	4696      	movlt	lr, r2
 80171e0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80171e4:	4452      	add	r2, sl
 80171e6:	b280      	uxth	r0, r0
 80171e8:	4299      	cmp	r1, r3
 80171ea:	468c      	mov	ip, r1
 80171ec:	b292      	uxth	r2, r2
 80171ee:	9302      	str	r3, [sp, #8]
 80171f0:	bfb8      	it	lt
 80171f2:	469c      	movlt	ip, r3
 80171f4:	b203      	sxth	r3, r0
 80171f6:	fa0f fa82 	sxth.w	sl, r2
 80171fa:	f8ad e01c 	strh.w	lr, [sp, #28]
 80171fe:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017202:	4553      	cmp	r3, sl
 8017204:	bfb8      	it	lt
 8017206:	4602      	movlt	r2, r0
 8017208:	9b02      	ldr	r3, [sp, #8]
 801720a:	eba2 020e 	sub.w	r2, r2, lr
 801720e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017212:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8017216:	4411      	add	r1, r2
 8017218:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801721c:	4413      	add	r3, r2
 801721e:	b289      	uxth	r1, r1
 8017220:	b29b      	uxth	r3, r3
 8017222:	b208      	sxth	r0, r1
 8017224:	b21a      	sxth	r2, r3
 8017226:	4290      	cmp	r0, r2
 8017228:	bfb8      	it	lt
 801722a:	460b      	movlt	r3, r1
 801722c:	eba3 030c 	sub.w	r3, r3, ip
 8017230:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017234:	a807      	add	r0, sp, #28
 8017236:	f7f9 fb18 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 801723a:	b920      	cbnz	r0, 8017246 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801723c:	6823      	ldr	r3, [r4, #0]
 801723e:	a907      	add	r1, sp, #28
 8017240:	4620      	mov	r0, r4
 8017242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017244:	4798      	blx	r3
 8017246:	3701      	adds	r7, #1
 8017248:	b2bf      	uxth	r7, r7
 801724a:	e7a9      	b.n	80171a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801724c:	f8d9 0000 	ldr.w	r0, [r9]
 8017250:	2101      	movs	r1, #1
 8017252:	6803      	ldr	r3, [r0, #0]
 8017254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017258:	4798      	blx	r3
 801725a:	e773      	b.n	8017144 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801725c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017260:	e7e8      	b.n	8017234 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8017262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017264:	4798      	blx	r3
 8017266:	4b3f      	ldr	r3, [pc, #252]	@ (8017364 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	2b00      	cmp	r3, #0
 801726c:	f43f af2b 	beq.w	80170c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017270:	2300      	movs	r3, #0
 8017272:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8017276:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801727a:	882b      	ldrh	r3, [r5, #0]
 801727c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8017280:	42ab      	cmp	r3, r5
 8017282:	f4bf af20 	bcs.w	80170c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017286:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801728a:	2907      	cmp	r1, #7
 801728c:	d814      	bhi.n	80172b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801728e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8017292:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8017296:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801729a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801729e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80172a2:	1c4a      	adds	r2, r1, #1
 80172a4:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80172a8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80172ac:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80172b0:	f8a2 c002 	strh.w	ip, [r2, #2]
 80172b4:	8097      	strh	r7, [r2, #4]
 80172b6:	80d6      	strh	r6, [r2, #6]
 80172b8:	3301      	adds	r3, #1
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	e7e0      	b.n	8017280 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 80172be:	2b02      	cmp	r3, #2
 80172c0:	f040 8133 	bne.w	801752a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80172c4:	4b28      	ldr	r3, [pc, #160]	@ (8017368 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80172c6:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	f000 8098 	beq.w	8017402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80172d2:	882a      	ldrh	r2, [r5, #0]
 80172d4:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80172d8:	3201      	adds	r2, #1
 80172da:	b292      	uxth	r2, r2
 80172dc:	2900      	cmp	r1, #0
 80172de:	d0c2      	beq.n	8017266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80172e0:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80172e4:	4694      	mov	ip, r2
 80172e6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80172ea:	f04f 0900 	mov.w	r9, #0
 80172ee:	441e      	add	r6, r3
 80172f0:	b236      	sxth	r6, r6
 80172f2:	fa1f f38c 	uxth.w	r3, ip
 80172f6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80172fa:	4299      	cmp	r1, r3
 80172fc:	f240 80be 	bls.w	801747c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8017300:	4427      	add	r7, r4
 8017302:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8017306:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801730a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801730e:	4283      	cmp	r3, r0
 8017310:	f340 80a0 	ble.w	8017454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8017314:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8017318:	46e1      	mov	r9, ip
 801731a:	4406      	add	r6, r0
 801731c:	b236      	sxth	r6, r6
 801731e:	429e      	cmp	r6, r3
 8017320:	bfa8      	it	ge
 8017322:	461e      	movge	r6, r3
 8017324:	f10c 0c01 	add.w	ip, ip, #1
 8017328:	e7e3      	b.n	80172f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801732a:	d10a      	bne.n	8017342 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801732c:	4562      	cmp	r2, ip
 801732e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8017332:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8017336:	bfb8      	it	lt
 8017338:	4662      	movlt	r2, ip
 801733a:	4288      	cmp	r0, r1
 801733c:	bfb8      	it	lt
 801733e:	461f      	movlt	r7, r3
 8017340:	e086      	b.n	8017450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8017342:	428a      	cmp	r2, r1
 8017344:	bfb8      	it	lt
 8017346:	460a      	movlt	r2, r1
 8017348:	e082      	b.n	8017450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801734a:	bf00      	nop
 801734c:	2402645c 	.word	0x2402645c
 8017350:	24026468 	.word	0x24026468
 8017354:	2400007c 	.word	0x2400007c
 8017358:	2402641c 	.word	0x2402641c
 801735c:	24026412 	.word	0x24026412
 8017360:	24026410 	.word	0x24026410
 8017364:	2402641a 	.word	0x2402641a
 8017368:	24026414 	.word	0x24026414
 801736c:	19a1      	adds	r1, r4, r6
 801736e:	ab07      	add	r3, sp, #28
 8017370:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8017374:	6849      	ldr	r1, [r1, #4]
 8017376:	c303      	stmia	r3!, {r0, r1}
 8017378:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801737c:	a807      	add	r0, sp, #28
 801737e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017382:	2b13      	cmp	r3, #19
 8017384:	440b      	add	r3, r1
 8017386:	bfd8      	it	le
 8017388:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801738c:	1a9b      	subs	r3, r3, r2
 801738e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017392:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017396:	f7fe ffbd 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801739a:	a807      	add	r0, sp, #28
 801739c:	f7f9 fa65 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 80173a0:	bb78      	cbnz	r0, 8017402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80173a2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 80173a6:	4426      	add	r6, r4
 80173a8:	f8d9 0000 	ldr.w	r0, [r9]
 80173ac:	f1bc 0f14 	cmp.w	ip, #20
 80173b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80173b4:	f8d0 e000 	ldr.w	lr, [r0]
 80173b8:	bfa8      	it	ge
 80173ba:	f04f 0c14 	movge.w	ip, #20
 80173be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80173c2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80173c6:	fa1f fc8c 	uxth.w	ip, ip
 80173ca:	f8cd c000 	str.w	ip, [sp]
 80173ce:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80173d2:	47d8      	blx	fp
 80173d4:	4683      	mov	fp, r0
 80173d6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80173da:	a807      	add	r0, sp, #28
 80173dc:	f7fe ff80 	bl	80162e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80173e0:	6823      	ldr	r3, [r4, #0]
 80173e2:	4620      	mov	r0, r4
 80173e4:	a907      	add	r1, sp, #28
 80173e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80173e8:	4798      	blx	r3
 80173ea:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80173ee:	eba0 000b 	sub.w	r0, r0, fp
 80173f2:	b200      	sxth	r0, r0
 80173f4:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 80173f8:	b918      	cbnz	r0, 8017402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80173fa:	b2b9      	uxth	r1, r7
 80173fc:	4650      	mov	r0, sl
 80173fe:	f7ff fa7b 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017402:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8017406:	f1bb 0f00 	cmp.w	fp, #0
 801740a:	f43f af2c 	beq.w	8017266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801740e:	882b      	ldrh	r3, [r5, #0]
 8017410:	2700      	movs	r7, #0
 8017412:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8017416:	3301      	adds	r3, #1
 8017418:	b29b      	uxth	r3, r3
 801741a:	b299      	uxth	r1, r3
 801741c:	00fe      	lsls	r6, r7, #3
 801741e:	458b      	cmp	fp, r1
 8017420:	d9a4      	bls.n	801736c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8017422:	4426      	add	r6, r4
 8017424:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8017428:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801742c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017430:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8017434:	4408      	add	r0, r1
 8017436:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801743a:	4461      	add	r1, ip
 801743c:	b200      	sxth	r0, r0
 801743e:	b209      	sxth	r1, r1
 8017440:	4288      	cmp	r0, r1
 8017442:	f6bf af72 	bge.w	801732a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8017446:	4584      	cmp	ip, r0
 8017448:	4662      	mov	r2, ip
 801744a:	461f      	mov	r7, r3
 801744c:	bfb8      	it	lt
 801744e:	4602      	movlt	r2, r0
 8017450:	3301      	adds	r3, #1
 8017452:	e7e2      	b.n	801741a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8017454:	d10e      	bne.n	8017474 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8017456:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801745a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801745e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8017462:	4473      	add	r3, lr
 8017464:	b21b      	sxth	r3, r3
 8017466:	429e      	cmp	r6, r3
 8017468:	bfa8      	it	ge
 801746a:	461e      	movge	r6, r3
 801746c:	4287      	cmp	r7, r0
 801746e:	bfb8      	it	lt
 8017470:	46e1      	movlt	r9, ip
 8017472:	e757      	b.n	8017324 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8017474:	4286      	cmp	r6, r0
 8017476:	bfa8      	it	ge
 8017478:	4606      	movge	r6, r0
 801747a:	e753      	b.n	8017324 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801747c:	eb0a 0007 	add.w	r0, sl, r7
 8017480:	4427      	add	r7, r4
 8017482:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8017486:	f1bb 0f13 	cmp.w	fp, #19
 801748a:	bfdc      	itt	le
 801748c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8017490:	445e      	addle	r6, fp
 8017492:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017496:	bfd8      	it	le
 8017498:	b236      	sxthle	r6, r6
 801749a:	f7f9 f9e6 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 801749e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80174a2:	2800      	cmp	r0, #0
 80174a4:	f47f af1a 	bne.w	80172dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 80174a8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80174ac:	fa1f fb8b 	uxth.w	fp, fp
 80174b0:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80174b4:	1ab6      	subs	r6, r6, r2
 80174b6:	4829      	ldr	r0, [pc, #164]	@ (801755c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 80174b8:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80174bc:	2e14      	cmp	r6, #20
 80174be:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80174c2:	6800      	ldr	r0, [r0, #0]
 80174c4:	bfa8      	it	ge
 80174c6:	2614      	movge	r6, #20
 80174c8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80174cc:	f8ad 201e 	strh.w	r2, [sp, #30]
 80174d0:	b289      	uxth	r1, r1
 80174d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80174d6:	b2b6      	uxth	r6, r6
 80174d8:	f8d0 c000 	ldr.w	ip, [r0]
 80174dc:	b292      	uxth	r2, r2
 80174de:	455e      	cmp	r6, fp
 80174e0:	bf94      	ite	ls
 80174e2:	9600      	strls	r6, [sp, #0]
 80174e4:	f8cd b000 	strhi.w	fp, [sp]
 80174e8:	b29b      	uxth	r3, r3
 80174ea:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 80174ee:	47b0      	blx	r6
 80174f0:	6823      	ldr	r3, [r4, #0]
 80174f2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80174f6:	a907      	add	r1, sp, #28
 80174f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80174fa:	4620      	mov	r0, r4
 80174fc:	4798      	blx	r3
 80174fe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8017502:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8017506:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801750a:	1a5b      	subs	r3, r3, r1
 801750c:	440a      	add	r2, r1
 801750e:	b21b      	sxth	r3, r3
 8017510:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8017514:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8017518:	2b00      	cmp	r3, #0
 801751a:	f47f aeda 	bne.w	80172d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801751e:	fa1f f189 	uxth.w	r1, r9
 8017522:	4650      	mov	r0, sl
 8017524:	f7ff f9e8 	bl	80168f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017528:	e6d3      	b.n	80172d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801752a:	882e      	ldrh	r6, [r5, #0]
 801752c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017530:	42b3      	cmp	r3, r6
 8017532:	f67f ae98 	bls.w	8017266 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017536:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801753a:	ab07      	add	r3, sp, #28
 801753c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017540:	6851      	ldr	r1, [r2, #4]
 8017542:	c303      	stmia	r3!, {r0, r1}
 8017544:	a807      	add	r0, sp, #28
 8017546:	f7f9 f990 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 801754a:	b920      	cbnz	r0, 8017556 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801754c:	6823      	ldr	r3, [r4, #0]
 801754e:	a907      	add	r1, sp, #28
 8017550:	4620      	mov	r0, r4
 8017552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017554:	4798      	blx	r3
 8017556:	3601      	adds	r6, #1
 8017558:	b2b6      	uxth	r6, r6
 801755a:	e7e7      	b.n	801752c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801755c:	2402641c 	.word	0x2402641c

08017560 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017560:	4b03      	ldr	r3, [pc, #12]	@ (8017570 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017562:	2200      	movs	r2, #0
 8017564:	801a      	strh	r2, [r3, #0]
 8017566:	805a      	strh	r2, [r3, #2]
 8017568:	809a      	strh	r2, [r3, #4]
 801756a:	80da      	strh	r2, [r3, #6]
 801756c:	4770      	bx	lr
 801756e:	bf00      	nop
 8017570:	24026468 	.word	0x24026468

08017574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017578:	b09d      	sub	sp, #116	@ 0x74
 801757a:	4606      	mov	r6, r0
 801757c:	4614      	mov	r4, r2
 801757e:	468a      	mov	sl, r1
 8017580:	a803      	add	r0, sp, #12
 8017582:	461d      	mov	r5, r3
 8017584:	f001 f98a 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 8017588:	6833      	ldr	r3, [r6, #0]
 801758a:	4630      	mov	r0, r6
 801758c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8017590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017592:	4798      	blx	r3
 8017594:	6833      	ldr	r3, [r6, #0]
 8017596:	4607      	mov	r7, r0
 8017598:	4630      	mov	r0, r6
 801759a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801759c:	4798      	blx	r3
 801759e:	462a      	mov	r2, r5
 80175a0:	2500      	movs	r5, #0
 80175a2:	4621      	mov	r1, r4
 80175a4:	9000      	str	r0, [sp, #0]
 80175a6:	463b      	mov	r3, r7
 80175a8:	462c      	mov	r4, r5
 80175aa:	46a9      	mov	r9, r5
 80175ac:	46a8      	mov	r8, r5
 80175ae:	a803      	add	r0, sp, #12
 80175b0:	f001 f9cf 	bl	8018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80175b4:	2300      	movs	r3, #0
 80175b6:	9302      	str	r3, [sp, #8]
 80175b8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80175bc:	429c      	cmp	r4, r3
 80175be:	d002      	beq.n	80175c6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80175c0:	455c      	cmp	r4, fp
 80175c2:	bf18      	it	ne
 80175c4:	4625      	movne	r5, r4
 80175c6:	ab02      	add	r3, sp, #8
 80175c8:	4632      	mov	r2, r6
 80175ca:	4651      	mov	r1, sl
 80175cc:	a803      	add	r0, sp, #12
 80175ce:	f001 fcf3 	bl	8018fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80175d2:	4604      	mov	r4, r0
 80175d4:	b108      	cbz	r0, 80175da <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80175d6:	280a      	cmp	r0, #10
 80175d8:	d10a      	bne.n	80175f0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80175da:	45c1      	cmp	r9, r8
 80175dc:	bf38      	it	cc
 80175de:	46c1      	movcc	r9, r8
 80175e0:	f04f 0800 	mov.w	r8, #0
 80175e4:	2c00      	cmp	r4, #0
 80175e6:	d1e5      	bne.n	80175b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80175e8:	4648      	mov	r0, r9
 80175ea:	b01d      	add	sp, #116	@ 0x74
 80175ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f0:	9a02      	ldr	r2, [sp, #8]
 80175f2:	2a00      	cmp	r2, #0
 80175f4:	d0de      	beq.n	80175b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80175f6:	7b57      	ldrb	r7, [r2, #13]
 80175f8:	4629      	mov	r1, r5
 80175fa:	6833      	ldr	r3, [r6, #0]
 80175fc:	007f      	lsls	r7, r7, #1
 80175fe:	8894      	ldrh	r4, [r2, #4]
 8017600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017602:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8017606:	7a97      	ldrb	r7, [r2, #10]
 8017608:	4307      	orrs	r7, r0
 801760a:	4630      	mov	r0, r6
 801760c:	4798      	blx	r3
 801760e:	4438      	add	r0, r7
 8017610:	4480      	add	r8, r0
 8017612:	fa1f f888 	uxth.w	r8, r8
 8017616:	e7e5      	b.n	80175e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017618 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017618:	b508      	push	{r3, lr}
 801761a:	6803      	ldr	r3, [r0, #0]
 801761c:	68db      	ldr	r3, [r3, #12]
 801761e:	4798      	blx	r3
 8017620:	b128      	cbz	r0, 801762e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017622:	7b43      	ldrb	r3, [r0, #13]
 8017624:	7a80      	ldrb	r0, [r0, #10]
 8017626:	005b      	lsls	r3, r3, #1
 8017628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801762c:	4318      	orrs	r0, r3
 801762e:	bd08      	pop	{r3, pc}

08017630 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017630:	b40e      	push	{r1, r2, r3}
 8017632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017634:	b09e      	sub	sp, #120	@ 0x78
 8017636:	4605      	mov	r5, r0
 8017638:	ab23      	add	r3, sp, #140	@ 0x8c
 801763a:	a805      	add	r0, sp, #20
 801763c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017640:	9303      	str	r3, [sp, #12]
 8017642:	f001 f92b 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 8017646:	682b      	ldr	r3, [r5, #0]
 8017648:	4628      	mov	r0, r5
 801764a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801764c:	4798      	blx	r3
 801764e:	682b      	ldr	r3, [r5, #0]
 8017650:	4606      	mov	r6, r0
 8017652:	4628      	mov	r0, r5
 8017654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017656:	4798      	blx	r3
 8017658:	4633      	mov	r3, r6
 801765a:	4621      	mov	r1, r4
 801765c:	ae1e      	add	r6, sp, #120	@ 0x78
 801765e:	2400      	movs	r4, #0
 8017660:	9000      	str	r0, [sp, #0]
 8017662:	9a03      	ldr	r2, [sp, #12]
 8017664:	a805      	add	r0, sp, #20
 8017666:	f001 f974 	bl	8018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801766a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801766e:	462a      	mov	r2, r5
 8017670:	4633      	mov	r3, r6
 8017672:	4621      	mov	r1, r4
 8017674:	a805      	add	r0, sp, #20
 8017676:	f001 fc9f 	bl	8018fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801767a:	b300      	cbz	r0, 80176be <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801767c:	280a      	cmp	r0, #10
 801767e:	d01a      	beq.n	80176b6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017680:	9f04      	ldr	r7, [sp, #16]
 8017682:	b1c7      	cbz	r7, 80176b6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017684:	7b78      	ldrb	r0, [r7, #13]
 8017686:	7a3b      	ldrb	r3, [r7, #8]
 8017688:	00c1      	lsls	r1, r0, #3
 801768a:	88ea      	ldrh	r2, [r5, #6]
 801768c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017690:	4319      	orrs	r1, r3
 8017692:	0643      	lsls	r3, r0, #25
 8017694:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017698:	bf48      	it	mi
 801769a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801769e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80176a2:	bf48      	it	mi
 80176a4:	b219      	sxthmi	r1, r3
 80176a6:	79fb      	ldrb	r3, [r7, #7]
 80176a8:	4303      	orrs	r3, r0
 80176aa:	4413      	add	r3, r2
 80176ac:	1a5b      	subs	r3, r3, r1
 80176ae:	b21b      	sxth	r3, r3
 80176b0:	429c      	cmp	r4, r3
 80176b2:	bfb8      	it	lt
 80176b4:	461c      	movlt	r4, r3
 80176b6:	4633      	mov	r3, r6
 80176b8:	462a      	mov	r2, r5
 80176ba:	2100      	movs	r1, #0
 80176bc:	e7da      	b.n	8017674 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80176be:	b2a0      	uxth	r0, r4
 80176c0:	b01e      	add	sp, #120	@ 0x78
 80176c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80176c6:	b003      	add	sp, #12
 80176c8:	4770      	bx	lr

080176ca <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80176ca:	7a43      	ldrb	r3, [r0, #9]
 80176cc:	8880      	ldrh	r0, [r0, #4]
 80176ce:	4418      	add	r0, r3
 80176d0:	b280      	uxth	r0, r0
 80176d2:	4770      	bx	lr

080176d4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80176d4:	6803      	ldr	r3, [r0, #0]
 80176d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80176d8:	4718      	bx	r3

080176da <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80176da:	b40e      	push	{r1, r2, r3}
 80176dc:	b570      	push	{r4, r5, r6, lr}
 80176de:	b09d      	sub	sp, #116	@ 0x74
 80176e0:	4604      	mov	r4, r0
 80176e2:	ab21      	add	r3, sp, #132	@ 0x84
 80176e4:	a803      	add	r0, sp, #12
 80176e6:	f853 5b04 	ldr.w	r5, [r3], #4
 80176ea:	9302      	str	r3, [sp, #8]
 80176ec:	f001 f8d6 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 80176f0:	6823      	ldr	r3, [r4, #0]
 80176f2:	4620      	mov	r0, r4
 80176f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80176f6:	4798      	blx	r3
 80176f8:	6823      	ldr	r3, [r4, #0]
 80176fa:	4606      	mov	r6, r0
 80176fc:	4620      	mov	r0, r4
 80176fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017700:	2401      	movs	r4, #1
 8017702:	4798      	blx	r3
 8017704:	4633      	mov	r3, r6
 8017706:	9000      	str	r0, [sp, #0]
 8017708:	4629      	mov	r1, r5
 801770a:	9a02      	ldr	r2, [sp, #8]
 801770c:	a803      	add	r0, sp, #12
 801770e:	f001 f920 	bl	8018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017712:	a803      	add	r0, sp, #12
 8017714:	f001 fd1c 	bl	8019150 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017718:	b2a3      	uxth	r3, r4
 801771a:	b138      	cbz	r0, 801772c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801771c:	280a      	cmp	r0, #10
 801771e:	a803      	add	r0, sp, #12
 8017720:	bf04      	itt	eq
 8017722:	3301      	addeq	r3, #1
 8017724:	b21c      	sxtheq	r4, r3
 8017726:	f001 fd13 	bl	8019150 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801772a:	e7f5      	b.n	8017718 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801772c:	4618      	mov	r0, r3
 801772e:	b01d      	add	sp, #116	@ 0x74
 8017730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017734:	b003      	add	sp, #12
 8017736:	4770      	bx	lr

08017738 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017738:	b40e      	push	{r1, r2, r3}
 801773a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801773c:	b09e      	sub	sp, #120	@ 0x78
 801773e:	4604      	mov	r4, r0
 8017740:	ab23      	add	r3, sp, #140	@ 0x8c
 8017742:	a805      	add	r0, sp, #20
 8017744:	f853 5b04 	ldr.w	r5, [r3], #4
 8017748:	9303      	str	r3, [sp, #12]
 801774a:	f001 f8a7 	bl	801889c <_ZN8touchgfx12TextProviderC1Ev>
 801774e:	6823      	ldr	r3, [r4, #0]
 8017750:	4620      	mov	r0, r4
 8017752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017754:	4798      	blx	r3
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	4606      	mov	r6, r0
 801775a:	4620      	mov	r0, r4
 801775c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801775e:	4798      	blx	r3
 8017760:	4633      	mov	r3, r6
 8017762:	4629      	mov	r1, r5
 8017764:	9000      	str	r0, [sp, #0]
 8017766:	9a03      	ldr	r2, [sp, #12]
 8017768:	a805      	add	r0, sp, #20
 801776a:	f001 f8f2 	bl	8018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801776e:	ad1e      	add	r5, sp, #120	@ 0x78
 8017770:	2100      	movs	r1, #0
 8017772:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8017776:	4622      	mov	r2, r4
 8017778:	a805      	add	r0, sp, #20
 801777a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801777e:	462b      	mov	r3, r5
 8017780:	f001 fc1a 	bl	8018fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017784:	b1d8      	cbz	r0, 80177be <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017786:	280a      	cmp	r0, #10
 8017788:	d012      	beq.n	80177b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801778a:	9804      	ldr	r0, [sp, #16]
 801778c:	b180      	cbz	r0, 80177b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801778e:	7b47      	ldrb	r7, [r0, #13]
 8017790:	88e2      	ldrh	r2, [r4, #6]
 8017792:	00fb      	lsls	r3, r7, #3
 8017794:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017798:	7a03      	ldrb	r3, [r0, #8]
 801779a:	430b      	orrs	r3, r1
 801779c:	0679      	lsls	r1, r7, #25
 801779e:	bf44      	itt	mi
 80177a0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80177a4:	b21b      	sxthmi	r3, r3
 80177a6:	1ad3      	subs	r3, r2, r3
 80177a8:	b21b      	sxth	r3, r3
 80177aa:	429e      	cmp	r6, r3
 80177ac:	bfa8      	it	ge
 80177ae:	461e      	movge	r6, r3
 80177b0:	462b      	mov	r3, r5
 80177b2:	4622      	mov	r2, r4
 80177b4:	2100      	movs	r1, #0
 80177b6:	a805      	add	r0, sp, #20
 80177b8:	f001 fbfe 	bl	8018fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80177bc:	e7e2      	b.n	8017784 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80177be:	4630      	mov	r0, r6
 80177c0:	b01e      	add	sp, #120	@ 0x78
 80177c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80177c6:	b003      	add	sp, #12
 80177c8:	4770      	bx	lr

080177ca <_ZNK8touchgfx8Drawable10invalidateEv>:
 80177ca:	b513      	push	{r0, r1, r4, lr}
 80177cc:	6803      	ldr	r3, [r0, #0]
 80177ce:	2400      	movs	r4, #0
 80177d0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80177d4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80177d8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80177dc:	4669      	mov	r1, sp
 80177de:	691b      	ldr	r3, [r3, #16]
 80177e0:	9400      	str	r4, [sp, #0]
 80177e2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80177e6:	4798      	blx	r3
 80177e8:	b002      	add	sp, #8
 80177ea:	bd10      	pop	{r4, pc}

080177ec <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80177ec:	b538      	push	{r3, r4, r5, lr}
 80177ee:	680b      	ldr	r3, [r1, #0]
 80177f0:	460c      	mov	r4, r1
 80177f2:	4605      	mov	r5, r0
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	4798      	blx	r3
 80177f8:	6823      	ldr	r3, [r4, #0]
 80177fa:	4620      	mov	r0, r4
 80177fc:	4629      	mov	r1, r5
 80177fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017800:	4798      	blx	r3
 8017802:	4628      	mov	r0, r5
 8017804:	bd38      	pop	{r3, r4, r5, pc}

08017806 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017806:	b410      	push	{r4}
 8017808:	880a      	ldrh	r2, [r1, #0]
 801780a:	8884      	ldrh	r4, [r0, #4]
 801780c:	4422      	add	r2, r4
 801780e:	800a      	strh	r2, [r1, #0]
 8017810:	884a      	ldrh	r2, [r1, #2]
 8017812:	88c4      	ldrh	r4, [r0, #6]
 8017814:	4422      	add	r2, r4
 8017816:	804a      	strh	r2, [r1, #2]
 8017818:	6940      	ldr	r0, [r0, #20]
 801781a:	b120      	cbz	r0, 8017826 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801781c:	6803      	ldr	r3, [r0, #0]
 801781e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017824:	4718      	bx	r3
 8017826:	f85d 4b04 	ldr.w	r4, [sp], #4
 801782a:	4770      	bx	lr

0801782c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801782c:	b570      	push	{r4, r5, r6, lr}
 801782e:	8882      	ldrh	r2, [r0, #4]
 8017830:	460c      	mov	r4, r1
 8017832:	880b      	ldrh	r3, [r1, #0]
 8017834:	4605      	mov	r5, r0
 8017836:	4413      	add	r3, r2
 8017838:	800b      	strh	r3, [r1, #0]
 801783a:	884b      	ldrh	r3, [r1, #2]
 801783c:	88c2      	ldrh	r2, [r0, #6]
 801783e:	4413      	add	r3, r2
 8017840:	804b      	strh	r3, [r1, #2]
 8017842:	1d01      	adds	r1, r0, #4
 8017844:	4620      	mov	r0, r4
 8017846:	f7f8 ffcd 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 801784a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	dd0b      	ble.n	801786a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017852:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017856:	2b00      	cmp	r3, #0
 8017858:	dd07      	ble.n	801786a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801785a:	6968      	ldr	r0, [r5, #20]
 801785c:	b128      	cbz	r0, 801786a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801785e:	6803      	ldr	r3, [r0, #0]
 8017860:	4621      	mov	r1, r4
 8017862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017868:	4718      	bx	r3
 801786a:	bd70      	pop	{r4, r5, r6, pc}

0801786c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801786c:	b570      	push	{r4, r5, r6, lr}
 801786e:	8882      	ldrh	r2, [r0, #4]
 8017870:	460c      	mov	r4, r1
 8017872:	880b      	ldrh	r3, [r1, #0]
 8017874:	4605      	mov	r5, r0
 8017876:	4413      	add	r3, r2
 8017878:	800b      	strh	r3, [r1, #0]
 801787a:	884b      	ldrh	r3, [r1, #2]
 801787c:	88c2      	ldrh	r2, [r0, #6]
 801787e:	4413      	add	r3, r2
 8017880:	804b      	strh	r3, [r1, #2]
 8017882:	1d01      	adds	r1, r0, #4
 8017884:	4620      	mov	r0, r4
 8017886:	f7f8 ffad 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 801788a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801788e:	2b00      	cmp	r3, #0
 8017890:	dd19      	ble.n	80178c6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017892:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017896:	2b00      	cmp	r3, #0
 8017898:	dd15      	ble.n	80178c6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801789a:	6968      	ldr	r0, [r5, #20]
 801789c:	b128      	cbz	r0, 80178aa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801789e:	6803      	ldr	r3, [r0, #0]
 80178a0:	4621      	mov	r1, r4
 80178a2:	691b      	ldr	r3, [r3, #16]
 80178a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178a8:	4718      	bx	r3
 80178aa:	4b07      	ldr	r3, [pc, #28]	@ (80178c8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	3304      	adds	r3, #4
 80178b0:	429d      	cmp	r5, r3
 80178b2:	d108      	bne.n	80178c6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80178b4:	f7fe fec6 	bl	8016644 <_ZN8touchgfx11Application11getInstanceEv>
 80178b8:	6803      	ldr	r3, [r0, #0]
 80178ba:	6821      	ldr	r1, [r4, #0]
 80178bc:	6862      	ldr	r2, [r4, #4]
 80178be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178c4:	4718      	bx	r3
 80178c6:	bd70      	pop	{r4, r5, r6, pc}
 80178c8:	24026460 	.word	0x24026460

080178cc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80178cc:	b570      	push	{r4, r5, r6, lr}
 80178ce:	4604      	mov	r4, r0
 80178d0:	4616      	mov	r6, r2
 80178d2:	460d      	mov	r5, r1
 80178d4:	b901      	cbnz	r1, 80178d8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80178d6:	b192      	cbz	r2, 80178fe <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80178d8:	6823      	ldr	r3, [r4, #0]
 80178da:	4620      	mov	r0, r4
 80178dc:	699b      	ldr	r3, [r3, #24]
 80178de:	4798      	blx	r3
 80178e0:	88e2      	ldrh	r2, [r4, #6]
 80178e2:	88a1      	ldrh	r1, [r4, #4]
 80178e4:	4620      	mov	r0, r4
 80178e6:	4432      	add	r2, r6
 80178e8:	4429      	add	r1, r5
 80178ea:	b212      	sxth	r2, r2
 80178ec:	b209      	sxth	r1, r1
 80178ee:	f7ec fe02 	bl	80044f6 <_ZN8touchgfx8Drawable5setXYEss>
 80178f2:	6823      	ldr	r3, [r4, #0]
 80178f4:	4620      	mov	r0, r4
 80178f6:	699b      	ldr	r3, [r3, #24]
 80178f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178fc:	4718      	bx	r3
 80178fe:	bd70      	pop	{r4, r5, r6, pc}

08017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017900:	b510      	push	{r4, lr}
 8017902:	2300      	movs	r3, #0
 8017904:	4604      	mov	r4, r0
 8017906:	4608      	mov	r0, r1
 8017908:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801790c:	8023      	strh	r3, [r4, #0]
 801790e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017912:	8063      	strh	r3, [r4, #2]
 8017914:	6803      	ldr	r3, [r0, #0]
 8017916:	80a1      	strh	r1, [r4, #4]
 8017918:	4621      	mov	r1, r4
 801791a:	80e2      	strh	r2, [r4, #6]
 801791c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801791e:	4798      	blx	r3
 8017920:	4620      	mov	r0, r4
 8017922:	bd10      	pop	{r4, pc}

08017924 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8017924:	4770      	bx	lr

08017926 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8017926:	b510      	push	{r4, lr}
 8017928:	4604      	mov	r4, r0
 801792a:	211c      	movs	r1, #28
 801792c:	f00c fe75 	bl	802461a <_ZdlPvj>
 8017930:	4620      	mov	r0, r4
 8017932:	bd10      	pop	{r4, pc}

08017934 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8017934:	4a04      	ldr	r2, [pc, #16]	@ (8017948 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8017936:	6002      	str	r2, [r0, #0]
 8017938:	2200      	movs	r2, #0
 801793a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801793e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017942:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017946:	4770      	bx	lr
 8017948:	08029444 	.word	0x08029444

0801794c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 801794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017950:	4604      	mov	r4, r0
 8017952:	b087      	sub	sp, #28
 8017954:	4696      	mov	lr, r2
 8017956:	6880      	ldr	r0, [r0, #8]
 8017958:	8b22      	ldrh	r2, [r4, #24]
 801795a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801795e:	9105      	str	r1, [sp, #20]
 8017960:	1c51      	adds	r1, r2, #1
 8017962:	8321      	strh	r1, [r4, #24]
 8017964:	2101      	movs	r1, #1
 8017966:	5481      	strb	r1, [r0, r2]
 8017968:	4689      	mov	r9, r1
 801796a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801796e:	8b60      	ldrh	r0, [r4, #26]
 8017970:	ee06 2a90 	vmov	s13, r2
 8017974:	68e2      	ldr	r2, [r4, #12]
 8017976:	1845      	adds	r5, r0, r1
 8017978:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801797c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017980:	8365      	strh	r5, [r4, #26]
 8017982:	edc2 6a00 	vstr	s13, [r2]
 8017986:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801798a:	8b60      	ldrh	r0, [r4, #26]
 801798c:	ee07 2a10 	vmov	s14, r2
 8017990:	68e2      	ldr	r2, [r4, #12]
 8017992:	1845      	adds	r5, r0, r1
 8017994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017998:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801799c:	8365      	strh	r5, [r4, #26]
 801799e:	1d18      	adds	r0, r3, #4
 80179a0:	460d      	mov	r5, r1
 80179a2:	ed82 7a00 	vstr	s14, [r2]
 80179a6:	f8be 2000 	ldrh.w	r2, [lr]
 80179aa:	9203      	str	r2, [sp, #12]
 80179ac:	2200      	movs	r2, #0
 80179ae:	4613      	mov	r3, r2
 80179b0:	4694      	mov	ip, r2
 80179b2:	9201      	str	r2, [sp, #4]
 80179b4:	9202      	str	r2, [sp, #8]
 80179b6:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80179ba:	9e05      	ldr	r6, [sp, #20]
 80179bc:	f108 0701 	add.w	r7, r8, #1
 80179c0:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80179c4:	428e      	cmp	r6, r1
 80179c6:	b2bf      	uxth	r7, r7
 80179c8:	eb0a 0b08 	add.w	fp, sl, r8
 80179cc:	f340 80b6 	ble.w	8017b3c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 80179d0:	9b03      	ldr	r3, [sp, #12]
 80179d2:	f9b0 c000 	ldrsh.w	ip, [r0]
 80179d6:	fa43 fb05 	asr.w	fp, r3, r5
 80179da:	f00b 0b01 	and.w	fp, fp, #1
 80179de:	fa5f f38b 	uxtb.w	r3, fp
 80179e2:	9304      	str	r3, [sp, #16]
 80179e4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80179e8:	f1bb 0f00 	cmp.w	fp, #0
 80179ec:	d057      	beq.n	8017a9e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 80179ee:	ee07 ca90 	vmov	s15, ip
 80179f2:	8327      	strh	r7, [r4, #24]
 80179f4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80179f8:	ee07 3a90 	vmov	s15, r3
 80179fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a00:	f1b9 0f00 	cmp.w	r9, #0
 8017a04:	d028      	beq.n	8017a58 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8017a06:	f04f 0602 	mov.w	r6, #2
 8017a0a:	f80a 6008 	strb.w	r6, [sl, r8]
 8017a0e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017a12:	68e7      	ldr	r7, [r4, #12]
 8017a14:	f108 0901 	add.w	r9, r8, #1
 8017a18:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017a1c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017a20:	edc7 5a00 	vstr	s11, [r7]
 8017a24:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017a28:	68e7      	ldr	r7, [r4, #12]
 8017a2a:	f108 0901 	add.w	r9, r8, #1
 8017a2e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017a32:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017a36:	edc7 7a00 	vstr	s15, [r7]
 8017a3a:	3501      	adds	r5, #1
 8017a3c:	2d10      	cmp	r5, #16
 8017a3e:	d106      	bne.n	8017a4e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8017a40:	9d02      	ldr	r5, [sp, #8]
 8017a42:	3501      	adds	r5, #1
 8017a44:	9502      	str	r5, [sp, #8]
 8017a46:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8017a4a:	9503      	str	r5, [sp, #12]
 8017a4c:	2500      	movs	r5, #0
 8017a4e:	3101      	adds	r1, #1
 8017a50:	3004      	adds	r0, #4
 8017a52:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017a56:	e7ae      	b.n	80179b6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8017a58:	f04f 0605 	mov.w	r6, #5
 8017a5c:	ed9d 5a01 	vldr	s10, [sp, #4]
 8017a60:	f80a 6008 	strb.w	r6, [sl, r8]
 8017a64:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017a68:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017a6c:	68e7      	ldr	r7, [r4, #12]
 8017a6e:	f108 0901 	add.w	r9, r8, #1
 8017a72:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017a76:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017a7a:	ed87 5a00 	vstr	s10, [r7]
 8017a7e:	ee05 2a10 	vmov	s10, r2
 8017a82:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017a86:	68e7      	ldr	r7, [r4, #12]
 8017a88:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017a8c:	f108 0901 	add.w	r9, r8, #1
 8017a90:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017a94:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017a98:	ed87 5a00 	vstr	s10, [r7]
 8017a9c:	e7b7      	b.n	8017a0e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8017a9e:	f1b9 0f00 	cmp.w	r9, #0
 8017aa2:	d147      	bne.n	8017b34 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8017aa4:	f04f 0605 	mov.w	r6, #5
 8017aa8:	eddd 7a01 	vldr	s15, [sp, #4]
 8017aac:	8327      	strh	r7, [r4, #24]
 8017aae:	f80a 6008 	strb.w	r6, [sl, r8]
 8017ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ab6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017aba:	68e7      	ldr	r7, [r4, #12]
 8017abc:	f108 0901 	add.w	r9, r8, #1
 8017ac0:	9e01      	ldr	r6, [sp, #4]
 8017ac2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017ac6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017aca:	4466      	add	r6, ip
 8017acc:	edc7 7a00 	vstr	s15, [r7]
 8017ad0:	ee07 2a90 	vmov	s15, r2
 8017ad4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017ad8:	441a      	add	r2, r3
 8017ada:	68e7      	ldr	r7, [r4, #12]
 8017adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ae0:	f108 0901 	add.w	r9, r8, #1
 8017ae4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017ae8:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017aec:	edc7 7a00 	vstr	s15, [r7]
 8017af0:	ee07 6a90 	vmov	s15, r6
 8017af4:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017afc:	68e7      	ldr	r7, [r4, #12]
 8017afe:	f108 0901 	add.w	r9, r8, #1
 8017b02:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017b06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017b0a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017b0e:	edc7 7a00 	vstr	s15, [r7]
 8017b12:	ee07 2a90 	vmov	s15, r2
 8017b16:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b1e:	68e7      	ldr	r7, [r4, #12]
 8017b20:	f108 0901 	add.w	r9, r8, #1
 8017b24:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017b28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017b2c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017b30:	edc7 7a00 	vstr	s15, [r7]
 8017b34:	461a      	mov	r2, r3
 8017b36:	f8cd c004 	str.w	ip, [sp, #4]
 8017b3a:	e77e      	b.n	8017a3a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8017b3c:	f1b9 0f00 	cmp.w	r9, #0
 8017b40:	d028      	beq.n	8017b94 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8017b42:	ee07 ca90 	vmov	s15, ip
 8017b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b4a:	eef4 6a67 	vcmp.f32	s13, s15
 8017b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b52:	d108      	bne.n	8017b66 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8017b54:	ee07 3a90 	vmov	s15, r3
 8017b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8017b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b64:	d016      	beq.n	8017b94 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8017b66:	2302      	movs	r3, #2
 8017b68:	8327      	strh	r7, [r4, #24]
 8017b6a:	f88b 3000 	strb.w	r3, [fp]
 8017b6e:	8b62      	ldrh	r2, [r4, #26]
 8017b70:	68e3      	ldr	r3, [r4, #12]
 8017b72:	1c51      	adds	r1, r2, #1
 8017b74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017b78:	8361      	strh	r1, [r4, #26]
 8017b7a:	edc3 6a00 	vstr	s13, [r3]
 8017b7e:	8b62      	ldrh	r2, [r4, #26]
 8017b80:	68e3      	ldr	r3, [r4, #12]
 8017b82:	1c51      	adds	r1, r2, #1
 8017b84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017b88:	8361      	strh	r1, [r4, #26]
 8017b8a:	ed83 7a00 	vstr	s14, [r3]
 8017b8e:	b007      	add	sp, #28
 8017b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b94:	2305      	movs	r3, #5
 8017b96:	eddd 7a01 	vldr	s15, [sp, #4]
 8017b9a:	8327      	strh	r7, [r4, #24]
 8017b9c:	f88b 3000 	strb.w	r3, [fp]
 8017ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ba4:	8b61      	ldrh	r1, [r4, #26]
 8017ba6:	68e3      	ldr	r3, [r4, #12]
 8017ba8:	1c4d      	adds	r5, r1, #1
 8017baa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8017bae:	8365      	strh	r5, [r4, #26]
 8017bb0:	edc3 7a00 	vstr	s15, [r3]
 8017bb4:	ee07 2a90 	vmov	s15, r2
 8017bb8:	8b61      	ldrh	r1, [r4, #26]
 8017bba:	68e3      	ldr	r3, [r4, #12]
 8017bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017bc0:	1c4d      	adds	r5, r1, #1
 8017bc2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8017bc6:	8365      	strh	r5, [r4, #26]
 8017bc8:	edc3 7a00 	vstr	s15, [r3]
 8017bcc:	e7cf      	b.n	8017b6e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08017bd0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8017bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bd4:	4604      	mov	r4, r0
 8017bd6:	b08e      	sub	sp, #56	@ 0x38
 8017bd8:	4699      	mov	r9, r3
 8017bda:	4688      	mov	r8, r1
 8017bdc:	4615      	mov	r5, r2
 8017bde:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8017be0:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8017be4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017be6:	f7eb ff4b 	bl	8003a80 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8017bea:	6060      	str	r0, [r4, #4]
 8017bec:	f1b9 0f00 	cmp.w	r9, #0
 8017bf0:	f000 80e8 	beq.w	8017dc4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	f000 80e5 	beq.w	8017dc4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8017bfa:	a805      	add	r0, sp, #20
 8017bfc:	f000 f8f9 	bl	8017df2 <_ZN8touchgfx9Matrix3x3C1Ev>
 8017c00:	6833      	ldr	r3, [r6, #0]
 8017c02:	4630      	mov	r0, r6
 8017c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017c06:	4798      	blx	r3
 8017c08:	a805      	add	r0, sp, #20
 8017c0a:	eef0 0a40 	vmov.f32	s1, s0
 8017c0e:	f000 f8f4 	bl	8017dfa <_ZN8touchgfx9Matrix3x35scaleEff>
 8017c12:	6860      	ldr	r0, [r4, #4]
 8017c14:	f1ba 0f03 	cmp.w	sl, #3
 8017c18:	d83b      	bhi.n	8017c92 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8017c1a:	e8df f00a 	tbb	[pc, sl]
 8017c1e:	1002      	.short	0x1002
 8017c20:	9f71      	.short	0x9f71
 8017c22:	6803      	ldr	r3, [r0, #0]
 8017c24:	462a      	mov	r2, r5
 8017c26:	4641      	mov	r1, r8
 8017c28:	689b      	ldr	r3, [r3, #8]
 8017c2a:	4798      	blx	r3
 8017c2c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8017c30:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8017c34:	ee07 7a90 	vmov	s15, r7
 8017c38:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8017c3c:	e026      	b.n	8017c8c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8017c3e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8017c42:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8017c46:	8869      	ldrh	r1, [r5, #2]
 8017c48:	1a9b      	subs	r3, r3, r2
 8017c4a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017c4e:	aa03      	add	r2, sp, #12
 8017c50:	1a5b      	subs	r3, r3, r1
 8017c52:	4641      	mov	r1, r8
 8017c54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c58:	882b      	ldrh	r3, [r5, #0]
 8017c5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c5e:	88ab      	ldrh	r3, [r5, #4]
 8017c60:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017c64:	6803      	ldr	r3, [r0, #0]
 8017c66:	689b      	ldr	r3, [r3, #8]
 8017c68:	4798      	blx	r3
 8017c6a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8017dcc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8017c6e:	a805      	add	r0, sp, #20
 8017c70:	f000 f8e8 	bl	8017e44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8017c74:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8017c78:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017c7a:	ee07 7a90 	vmov	s15, r7
 8017c7e:	1a9b      	subs	r3, r3, r2
 8017c80:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8017c84:	ee00 3a10 	vmov	s0, r3
 8017c88:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8017c8c:	a805      	add	r0, sp, #20
 8017c8e:	f000 f927 	bl	8017ee0 <_ZN8touchgfx9Matrix3x39translateEff>
 8017c92:	6860      	ldr	r0, [r4, #4]
 8017c94:	a905      	add	r1, sp, #20
 8017c96:	2500      	movs	r5, #0
 8017c98:	f109 0602 	add.w	r6, r9, #2
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ca0:	4798      	blx	r3
 8017ca2:	6860      	ldr	r0, [r4, #4]
 8017ca4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8017cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cae:	4798      	blx	r3
 8017cb0:	6860      	ldr	r0, [r4, #4]
 8017cb2:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8017cb6:	6803      	ldr	r3, [r0, #0]
 8017cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017cba:	4798      	blx	r3
 8017cbc:	6860      	ldr	r0, [r4, #4]
 8017cbe:	2101      	movs	r1, #1
 8017cc0:	6803      	ldr	r3, [r0, #0]
 8017cc2:	68db      	ldr	r3, [r3, #12]
 8017cc4:	4798      	blx	r3
 8017cc6:	f8b9 7000 	ldrh.w	r7, [r9]
 8017cca:	f104 0310 	add.w	r3, r4, #16
 8017cce:	61a5      	str	r5, [r4, #24]
 8017cd0:	f104 0208 	add.w	r2, r4, #8
 8017cd4:	f104 0114 	add.w	r1, r4, #20
 8017cd8:	f104 000c 	add.w	r0, r4, #12
 8017cdc:	f7ee fc56 	bl	800658c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8017ce0:	42af      	cmp	r7, r5
 8017ce2:	dd60      	ble.n	8017da6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8017ce4:	8831      	ldrh	r1, [r6, #0]
 8017ce6:	1cb2      	adds	r2, r6, #2
 8017ce8:	4620      	mov	r0, r4
 8017cea:	3501      	adds	r5, #1
 8017cec:	f101 030f 	add.w	r3, r1, #15
 8017cf0:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8017cf4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017cf8:	f7ff fe28 	bl	801794c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8017cfc:	4606      	mov	r6, r0
 8017cfe:	e7ef      	b.n	8017ce0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8017d00:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017d04:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8017d08:	8829      	ldrh	r1, [r5, #0]
 8017d0a:	1a9b      	subs	r3, r3, r2
 8017d0c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017d10:	aa03      	add	r2, sp, #12
 8017d12:	1a5b      	subs	r3, r3, r1
 8017d14:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017d18:	886d      	ldrh	r5, [r5, #2]
 8017d1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017d1e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8017d22:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017d26:	1a5b      	subs	r3, r3, r1
 8017d28:	4641      	mov	r1, r8
 8017d2a:	1b5b      	subs	r3, r3, r5
 8017d2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017d30:	6803      	ldr	r3, [r0, #0]
 8017d32:	689b      	ldr	r3, [r3, #8]
 8017d34:	4798      	blx	r3
 8017d36:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8017dd0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8017d3a:	a805      	add	r0, sp, #20
 8017d3c:	f000 f882 	bl	8017e44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8017d40:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017d44:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017d46:	1a9b      	subs	r3, r3, r2
 8017d48:	ee00 3a90 	vmov	s1, r3
 8017d4c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8017d50:	1bdb      	subs	r3, r3, r7
 8017d52:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017d56:	ee00 3a10 	vmov	s0, r3
 8017d5a:	e795      	b.n	8017c88 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8017d5c:	886b      	ldrh	r3, [r5, #2]
 8017d5e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017d62:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017d66:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8017d6a:	8829      	ldrh	r1, [r5, #0]
 8017d6c:	1a9b      	subs	r3, r3, r2
 8017d6e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017d72:	aa03      	add	r2, sp, #12
 8017d74:	1a5b      	subs	r3, r3, r1
 8017d76:	4641      	mov	r1, r8
 8017d78:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017d7c:	88eb      	ldrh	r3, [r5, #6]
 8017d7e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017d82:	6803      	ldr	r3, [r0, #0]
 8017d84:	689b      	ldr	r3, [r3, #8]
 8017d86:	4798      	blx	r3
 8017d88:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8017dd4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8017d8c:	a805      	add	r0, sp, #20
 8017d8e:	f000 f859 	bl	8017e44 <_ZN8touchgfx9Matrix3x36rotateEf>
 8017d92:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017d96:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8017d9a:	1bdb      	subs	r3, r3, r7
 8017d9c:	ee00 3a90 	vmov	s1, r3
 8017da0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017da4:	e748      	b.n	8017c38 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8017da6:	6860      	ldr	r0, [r4, #4]
 8017da8:	2100      	movs	r1, #0
 8017daa:	8b22      	ldrh	r2, [r4, #24]
 8017dac:	6803      	ldr	r3, [r0, #0]
 8017dae:	9101      	str	r1, [sp, #4]
 8017db0:	8b61      	ldrh	r1, [r4, #26]
 8017db2:	9100      	str	r1, [sp, #0]
 8017db4:	6a1d      	ldr	r5, [r3, #32]
 8017db6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8017dba:	47a8      	blx	r5
 8017dbc:	6860      	ldr	r0, [r4, #4]
 8017dbe:	6803      	ldr	r3, [r0, #0]
 8017dc0:	69db      	ldr	r3, [r3, #28]
 8017dc2:	4798      	blx	r3
 8017dc4:	b00e      	add	sp, #56	@ 0x38
 8017dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dca:	bf00      	nop
 8017dcc:	42b40000 	.word	0x42b40000
 8017dd0:	43340000 	.word	0x43340000
 8017dd4:	43870000 	.word	0x43870000

08017dd8 <_ZN8touchgfx9Matrix3x35resetEv>:
 8017dd8:	2300      	movs	r3, #0
 8017dda:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8017dde:	6043      	str	r3, [r0, #4]
 8017de0:	6002      	str	r2, [r0, #0]
 8017de2:	6083      	str	r3, [r0, #8]
 8017de4:	60c3      	str	r3, [r0, #12]
 8017de6:	6102      	str	r2, [r0, #16]
 8017de8:	6143      	str	r3, [r0, #20]
 8017dea:	6183      	str	r3, [r0, #24]
 8017dec:	61c3      	str	r3, [r0, #28]
 8017dee:	6202      	str	r2, [r0, #32]
 8017df0:	4770      	bx	lr

08017df2 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8017df2:	b508      	push	{r3, lr}
 8017df4:	f7ff fff0 	bl	8017dd8 <_ZN8touchgfx9Matrix3x35resetEv>
 8017df8:	bd08      	pop	{r3, pc}

08017dfa <_ZN8touchgfx9Matrix3x35scaleEff>:
 8017dfa:	edd0 7a00 	vldr	s15, [r0]
 8017dfe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017e02:	edc0 7a00 	vstr	s15, [r0]
 8017e06:	edd0 7a01 	vldr	s15, [r0, #4]
 8017e0a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017e0e:	edc0 7a01 	vstr	s15, [r0, #4]
 8017e12:	edd0 7a02 	vldr	s15, [r0, #8]
 8017e16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017e1a:	edd0 7a03 	vldr	s15, [r0, #12]
 8017e1e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8017e22:	ed80 0a02 	vstr	s0, [r0, #8]
 8017e26:	edc0 7a03 	vstr	s15, [r0, #12]
 8017e2a:	edd0 7a04 	vldr	s15, [r0, #16]
 8017e2e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8017e32:	edc0 7a04 	vstr	s15, [r0, #16]
 8017e36:	edd0 7a05 	vldr	s15, [r0, #20]
 8017e3a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8017e3e:	edc0 0a05 	vstr	s1, [r0, #20]
 8017e42:	4770      	bx	lr

08017e44 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8017e44:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8017ed8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8017e48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017e4c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8017edc <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8017e50:	b510      	push	{r4, lr}
 8017e52:	ed2d 8b02 	vpush	{d8}
 8017e56:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8017e5a:	4604      	mov	r4, r0
 8017e5c:	eeb0 0a68 	vmov.f32	s0, s17
 8017e60:	f00c fd12 	bl	8024888 <cosf>
 8017e64:	eeb0 8a40 	vmov.f32	s16, s0
 8017e68:	eeb0 0a68 	vmov.f32	s0, s17
 8017e6c:	f00c fc48 	bl	8024700 <sinf>
 8017e70:	edd4 6a03 	vldr	s13, [r4, #12]
 8017e74:	edd4 4a00 	vldr	s9, [r4]
 8017e78:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8017e7c:	ed94 7a04 	vldr	s14, [r4, #16]
 8017e80:	ed94 5a01 	vldr	s10, [r4, #4]
 8017e84:	ee66 6a88 	vmul.f32	s13, s13, s16
 8017e88:	edd4 5a02 	vldr	s11, [r4, #8]
 8017e8c:	eee8 7a24 	vfma.f32	s15, s16, s9
 8017e90:	eee0 6a24 	vfma.f32	s13, s0, s9
 8017e94:	edc4 7a00 	vstr	s15, [r4]
 8017e98:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8017e9c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8017ea0:	edc4 6a03 	vstr	s13, [r4, #12]
 8017ea4:	eee8 7a05 	vfma.f32	s15, s16, s10
 8017ea8:	eea0 7a05 	vfma.f32	s14, s0, s10
 8017eac:	edc4 7a01 	vstr	s15, [r4, #4]
 8017eb0:	edd4 7a05 	vldr	s15, [r4, #20]
 8017eb4:	ed84 7a04 	vstr	s14, [r4, #16]
 8017eb8:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8017ebc:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017ec0:	eea8 6a25 	vfma.f32	s12, s16, s11
 8017ec4:	eee0 7a25 	vfma.f32	s15, s0, s11
 8017ec8:	ecbd 8b02 	vpop	{d8}
 8017ecc:	ed84 6a02 	vstr	s12, [r4, #8]
 8017ed0:	edc4 7a05 	vstr	s15, [r4, #20]
 8017ed4:	bd10      	pop	{r4, pc}
 8017ed6:	bf00      	nop
 8017ed8:	40490fdb 	.word	0x40490fdb
 8017edc:	43340000 	.word	0x43340000

08017ee0 <_ZN8touchgfx9Matrix3x39translateEff>:
 8017ee0:	ed90 6a06 	vldr	s12, [r0, #24]
 8017ee4:	edd0 7a00 	vldr	s15, [r0]
 8017ee8:	edd0 6a07 	vldr	s13, [r0, #28]
 8017eec:	eee6 7a00 	vfma.f32	s15, s12, s0
 8017ef0:	ed90 7a08 	vldr	s14, [r0, #32]
 8017ef4:	edc0 7a00 	vstr	s15, [r0]
 8017ef8:	edd0 7a01 	vldr	s15, [r0, #4]
 8017efc:	eee6 7a80 	vfma.f32	s15, s13, s0
 8017f00:	edc0 7a01 	vstr	s15, [r0, #4]
 8017f04:	edd0 7a02 	vldr	s15, [r0, #8]
 8017f08:	eee7 7a00 	vfma.f32	s15, s14, s0
 8017f0c:	edc0 7a02 	vstr	s15, [r0, #8]
 8017f10:	edd0 7a03 	vldr	s15, [r0, #12]
 8017f14:	eee6 7a20 	vfma.f32	s15, s12, s1
 8017f18:	edc0 7a03 	vstr	s15, [r0, #12]
 8017f1c:	edd0 7a04 	vldr	s15, [r0, #16]
 8017f20:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8017f24:	edc0 7a04 	vstr	s15, [r0, #16]
 8017f28:	edd0 7a05 	vldr	s15, [r0, #20]
 8017f2c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8017f30:	edc0 7a05 	vstr	s15, [r0, #20]
 8017f34:	4770      	bx	lr

08017f36 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8017f36:	edd0 6a01 	vldr	s13, [r0, #4]
 8017f3a:	b084      	sub	sp, #16
 8017f3c:	edd0 7a04 	vldr	s15, [r0, #16]
 8017f40:	ed90 7a03 	vldr	s14, [r0, #12]
 8017f44:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8017f48:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8017f4c:	edd0 6a00 	vldr	s13, [r0]
 8017f50:	eee7 7a00 	vfma.f32	s15, s14, s0
 8017f54:	ed90 7a05 	vldr	s14, [r0, #20]
 8017f58:	eee6 0a80 	vfma.f32	s1, s13, s0
 8017f5c:	ed90 0a02 	vldr	s0, [r0, #8]
 8017f60:	ee30 0a80 	vadd.f32	s0, s1, s0
 8017f64:	ee77 0a87 	vadd.f32	s1, s15, s14
 8017f68:	b004      	add	sp, #16
 8017f6a:	4770      	bx	lr

08017f6c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017f6c:	b530      	push	{r4, r5, lr}
 8017f6e:	8083      	strh	r3, [r0, #4]
 8017f70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017f74:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017f78:	80c3      	strh	r3, [r0, #6]
 8017f7a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017f7e:	6141      	str	r1, [r0, #20]
 8017f80:	7203      	strb	r3, [r0, #8]
 8017f82:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017f86:	8302      	strh	r2, [r0, #24]
 8017f88:	7243      	strb	r3, [r0, #9]
 8017f8a:	7a83      	ldrb	r3, [r0, #10]
 8017f8c:	f365 0306 	bfi	r3, r5, #0, #7
 8017f90:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8017f94:	f365 13c7 	bfi	r3, r5, #7, #1
 8017f98:	7283      	strb	r3, [r0, #10]
 8017f9a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017f9e:	72c3      	strb	r3, [r0, #11]
 8017fa0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017fa4:	7303      	strb	r3, [r0, #12]
 8017fa6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017faa:	81c3      	strh	r3, [r0, #14]
 8017fac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8017fb0:	8203      	strh	r3, [r0, #16]
 8017fb2:	4b01      	ldr	r3, [pc, #4]	@ (8017fb8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8017fb4:	6003      	str	r3, [r0, #0]
 8017fb6:	bd30      	pop	{r4, r5, pc}
 8017fb8:	08029458 	.word	0x08029458

08017fbc <_ZNK8touchgfx9ConstFont4findEt>:
 8017fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fbe:	6944      	ldr	r4, [r0, #20]
 8017fc0:	b3bc      	cbz	r4, 8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fc2:	88a3      	ldrh	r3, [r4, #4]
 8017fc4:	8b02      	ldrh	r2, [r0, #24]
 8017fc6:	1acb      	subs	r3, r1, r3
 8017fc8:	f102 32ff 	add.w	r2, r2, #4294967295
 8017fcc:	d431      	bmi.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fce:	4293      	cmp	r3, r2
 8017fd0:	dd0c      	ble.n	8017fec <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017fd2:	230e      	movs	r3, #14
 8017fd4:	fb03 4302 	mla	r3, r3, r2, r4
 8017fd8:	889b      	ldrh	r3, [r3, #4]
 8017fda:	1a5b      	subs	r3, r3, r1
 8017fdc:	1ad3      	subs	r3, r2, r3
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	db27      	blt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	bfbc      	itt	lt
 8017fe6:	2302      	movlt	r3, #2
 8017fe8:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017fec:	2500      	movs	r5, #0
 8017fee:	260e      	movs	r6, #14
 8017ff0:	4295      	cmp	r5, r2
 8017ff2:	dc1e      	bgt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017ff4:	fb06 4003 	mla	r0, r6, r3, r4
 8017ff8:	8887      	ldrh	r7, [r0, #4]
 8017ffa:	42b9      	cmp	r1, r7
 8017ffc:	d01a      	beq.n	8018034 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017ffe:	d20d      	bcs.n	801801c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018000:	1e5a      	subs	r2, r3, #1
 8018002:	4295      	cmp	r5, r2
 8018004:	dc15      	bgt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018006:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801800a:	1a5b      	subs	r3, r3, r1
 801800c:	1ad3      	subs	r3, r2, r3
 801800e:	429a      	cmp	r2, r3
 8018010:	db0f      	blt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018012:	429d      	cmp	r5, r3
 8018014:	ddec      	ble.n	8017ff0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018016:	1953      	adds	r3, r2, r5
 8018018:	105b      	asrs	r3, r3, #1
 801801a:	e7e9      	b.n	8017ff0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801801c:	1c5d      	adds	r5, r3, #1
 801801e:	42aa      	cmp	r2, r5
 8018020:	db07      	blt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018022:	8a43      	ldrh	r3, [r0, #18]
 8018024:	1acb      	subs	r3, r1, r3
 8018026:	442b      	add	r3, r5
 8018028:	429d      	cmp	r5, r3
 801802a:	dc02      	bgt.n	8018032 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801802c:	429a      	cmp	r2, r3
 801802e:	dadf      	bge.n	8017ff0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018030:	e7f1      	b.n	8018016 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018032:	2000      	movs	r0, #0
 8018034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018036 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018038:	4604      	mov	r4, r0
 801803a:	4617      	mov	r7, r2
 801803c:	461e      	mov	r6, r3
 801803e:	b911      	cbnz	r1, 8018046 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018040:	2500      	movs	r5, #0
 8018042:	4628      	mov	r0, r5
 8018044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018046:	290a      	cmp	r1, #10
 8018048:	d0fa      	beq.n	8018040 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801804a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801804e:	4291      	cmp	r1, r2
 8018050:	d0f6      	beq.n	8018040 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018052:	f242 020b 	movw	r2, #8203	@ 0x200b
 8018056:	4291      	cmp	r1, r2
 8018058:	d0f2      	beq.n	8018040 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801805a:	f7ff ffaf 	bl	8017fbc <_ZNK8touchgfx9ConstFont4findEt>
 801805e:	4605      	mov	r5, r0
 8018060:	b950      	cbnz	r0, 8018078 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018062:	6823      	ldr	r3, [r4, #0]
 8018064:	4620      	mov	r0, r4
 8018066:	691b      	ldr	r3, [r3, #16]
 8018068:	4798      	blx	r3
 801806a:	4601      	mov	r1, r0
 801806c:	4620      	mov	r0, r4
 801806e:	f7ff ffa5 	bl	8017fbc <_ZNK8touchgfx9ConstFont4findEt>
 8018072:	4605      	mov	r5, r0
 8018074:	2800      	cmp	r0, #0
 8018076:	d0e3      	beq.n	8018040 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018078:	6823      	ldr	r3, [r4, #0]
 801807a:	4629      	mov	r1, r5
 801807c:	4620      	mov	r0, r4
 801807e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018080:	4798      	blx	r3
 8018082:	6038      	str	r0, [r7, #0]
 8018084:	6823      	ldr	r3, [r4, #0]
 8018086:	4620      	mov	r0, r4
 8018088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801808a:	4798      	blx	r3
 801808c:	7030      	strb	r0, [r6, #0]
 801808e:	e7d8      	b.n	8018042 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018090 <_ZN8touchgfx4clzuEm>:
 8018090:	4603      	mov	r3, r0
 8018092:	b1c8      	cbz	r0, 80180c8 <_ZN8touchgfx4clzuEm+0x38>
 8018094:	0c02      	lsrs	r2, r0, #16
 8018096:	0412      	lsls	r2, r2, #16
 8018098:	b9a2      	cbnz	r2, 80180c4 <_ZN8touchgfx4clzuEm+0x34>
 801809a:	0403      	lsls	r3, r0, #16
 801809c:	2010      	movs	r0, #16
 801809e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80180a2:	bf04      	itt	eq
 80180a4:	021b      	lsleq	r3, r3, #8
 80180a6:	3008      	addeq	r0, #8
 80180a8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80180ac:	bf04      	itt	eq
 80180ae:	011b      	lsleq	r3, r3, #4
 80180b0:	3004      	addeq	r0, #4
 80180b2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80180b6:	bf04      	itt	eq
 80180b8:	009b      	lsleq	r3, r3, #2
 80180ba:	3002      	addeq	r0, #2
 80180bc:	2b00      	cmp	r3, #0
 80180be:	db04      	blt.n	80180ca <_ZN8touchgfx4clzuEm+0x3a>
 80180c0:	3001      	adds	r0, #1
 80180c2:	4770      	bx	lr
 80180c4:	2000      	movs	r0, #0
 80180c6:	e7ea      	b.n	801809e <_ZN8touchgfx4clzuEm+0xe>
 80180c8:	2020      	movs	r0, #32
 80180ca:	4770      	bx	lr

080180cc <_ZN8touchgfx7muldivuEmmmRm>:
 80180cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80180d0:	460f      	mov	r7, r1
 80180d2:	4615      	mov	r5, r2
 80180d4:	461e      	mov	r6, r3
 80180d6:	4601      	mov	r1, r0
 80180d8:	b100      	cbz	r0, 80180dc <_ZN8touchgfx7muldivuEmmmRm+0x10>
 80180da:	b927      	cbnz	r7, 80180e6 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 80180dc:	2000      	movs	r0, #0
 80180de:	6030      	str	r0, [r6, #0]
 80180e0:	b002      	add	sp, #8
 80180e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180e6:	f7ff ffd3 	bl	8018090 <_ZN8touchgfx4clzuEm>
 80180ea:	b980      	cbnz	r0, 801810e <_ZN8touchgfx7muldivuEmmmRm+0x42>
 80180ec:	4638      	mov	r0, r7
 80180ee:	f7ff ffcf 	bl	8018090 <_ZN8touchgfx4clzuEm>
 80180f2:	2800      	cmp	r0, #0
 80180f4:	dd05      	ble.n	8018102 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 80180f6:	4633      	mov	r3, r6
 80180f8:	462a      	mov	r2, r5
 80180fa:	4638      	mov	r0, r7
 80180fc:	f7ff ffe6 	bl	80180cc <_ZN8touchgfx7muldivuEmmmRm>
 8018100:	e7ee      	b.n	80180e0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8018102:	f04f 33ff 	mov.w	r3, #4294967295
 8018106:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801810a:	6033      	str	r3, [r6, #0]
 801810c:	e7e8      	b.n	80180e0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801810e:	fa37 f800 	lsrs.w	r8, r7, r0
 8018112:	fb07 f301 	mul.w	r3, r7, r1
 8018116:	d105      	bne.n	8018124 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8018118:	fbb3 f0f5 	udiv	r0, r3, r5
 801811c:	fb05 3510 	mls	r5, r5, r0, r3
 8018120:	6035      	str	r5, [r6, #0]
 8018122:	e7dd      	b.n	80180e0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8018124:	2301      	movs	r3, #1
 8018126:	fa01 fa00 	lsl.w	sl, r1, r0
 801812a:	462a      	mov	r2, r5
 801812c:	fa03 f000 	lsl.w	r0, r3, r0
 8018130:	4633      	mov	r3, r6
 8018132:	fbba f9f5 	udiv	r9, sl, r5
 8018136:	3801      	subs	r0, #1
 8018138:	fb08 f409 	mul.w	r4, r8, r9
 801813c:	4038      	ands	r0, r7
 801813e:	f7ff ffc5 	bl	80180cc <_ZN8touchgfx7muldivuEmmmRm>
 8018142:	462a      	mov	r2, r5
 8018144:	4607      	mov	r7, r0
 8018146:	ab01      	add	r3, sp, #4
 8018148:	fb05 a119 	mls	r1, r5, r9, sl
 801814c:	4640      	mov	r0, r8
 801814e:	f7ff ffbd 	bl	80180cc <_ZN8touchgfx7muldivuEmmmRm>
 8018152:	9b01      	ldr	r3, [sp, #4]
 8018154:	6832      	ldr	r2, [r6, #0]
 8018156:	441a      	add	r2, r3
 8018158:	fbb2 f3f5 	udiv	r3, r2, r5
 801815c:	441c      	add	r4, r3
 801815e:	fb05 2513 	mls	r5, r5, r3, r2
 8018162:	443c      	add	r4, r7
 8018164:	4420      	add	r0, r4
 8018166:	e7db      	b.n	8018120 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08018168 <_ZN8touchgfx6muldivElllRl>:
 8018168:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801816a:	2800      	cmp	r0, #0
 801816c:	461e      	mov	r6, r3
 801816e:	bfba      	itte	lt
 8018170:	4240      	neglt	r0, r0
 8018172:	f04f 34ff 	movlt.w	r4, #4294967295
 8018176:	2401      	movge	r4, #1
 8018178:	2900      	cmp	r1, #0
 801817a:	bfbc      	itt	lt
 801817c:	4249      	neglt	r1, r1
 801817e:	4264      	neglt	r4, r4
 8018180:	2a00      	cmp	r2, #0
 8018182:	bfb6      	itet	lt
 8018184:	4265      	neglt	r5, r4
 8018186:	4625      	movge	r5, r4
 8018188:	4252      	neglt	r2, r2
 801818a:	4288      	cmp	r0, r1
 801818c:	bfc2      	ittt	gt
 801818e:	4603      	movgt	r3, r0
 8018190:	4608      	movgt	r0, r1
 8018192:	4619      	movgt	r1, r3
 8018194:	ab01      	add	r3, sp, #4
 8018196:	f7ff ff99 	bl	80180cc <_ZN8touchgfx7muldivuEmmmRm>
 801819a:	9b01      	ldr	r3, [sp, #4]
 801819c:	4368      	muls	r0, r5
 801819e:	435c      	muls	r4, r3
 80181a0:	6034      	str	r4, [r6, #0]
 80181a2:	b002      	add	sp, #8
 80181a4:	bd70      	pop	{r4, r5, r6, pc}

080181a6 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80181a6:	2000      	movs	r0, #0
 80181a8:	4770      	bx	lr

080181aa <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80181aa:	2001      	movs	r0, #1
 80181ac:	4770      	bx	lr

080181ae <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80181ae:	2002      	movs	r0, #2
 80181b0:	4770      	bx	lr

080181b2 <_ZN8touchgfx6ScreenD1Ev>:
 80181b2:	4770      	bx	lr

080181b4 <_ZN8touchgfx12GestureEventD1Ev>:
 80181b4:	4770      	bx	lr

080181b6 <_ZN8touchgfx9DragEventD1Ev>:
 80181b6:	4770      	bx	lr

080181b8 <_ZN8touchgfx10ClickEventD1Ev>:
 80181b8:	4770      	bx	lr

080181ba <_ZN8touchgfx10ClickEventD0Ev>:
 80181ba:	b510      	push	{r4, lr}
 80181bc:	4604      	mov	r4, r0
 80181be:	210c      	movs	r1, #12
 80181c0:	f00c fa2b 	bl	802461a <_ZdlPvj>
 80181c4:	4620      	mov	r0, r4
 80181c6:	bd10      	pop	{r4, pc}

080181c8 <_ZN8touchgfx9DragEventD0Ev>:
 80181c8:	b510      	push	{r4, lr}
 80181ca:	4604      	mov	r4, r0
 80181cc:	2110      	movs	r1, #16
 80181ce:	f00c fa24 	bl	802461a <_ZdlPvj>
 80181d2:	4620      	mov	r0, r4
 80181d4:	bd10      	pop	{r4, pc}

080181d6 <_ZN8touchgfx12GestureEventD0Ev>:
 80181d6:	b510      	push	{r4, lr}
 80181d8:	4604      	mov	r4, r0
 80181da:	210c      	movs	r1, #12
 80181dc:	f00c fa1d 	bl	802461a <_ZdlPvj>
 80181e0:	4620      	mov	r0, r4
 80181e2:	bd10      	pop	{r4, pc}

080181e4 <_ZN8touchgfx6ScreenD0Ev>:
 80181e4:	b510      	push	{r4, lr}
 80181e6:	4604      	mov	r4, r0
 80181e8:	213c      	movs	r1, #60	@ 0x3c
 80181ea:	f00c fa16 	bl	802461a <_ZdlPvj>
 80181ee:	4620      	mov	r0, r4
 80181f0:	bd10      	pop	{r4, pc}
	...

080181f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80181f4:	b530      	push	{r4, r5, lr}
 80181f6:	460d      	mov	r5, r1
 80181f8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80181fa:	b087      	sub	sp, #28
 80181fc:	4604      	mov	r4, r0
 80181fe:	b301      	cbz	r1, 8018242 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018200:	a801      	add	r0, sp, #4
 8018202:	f7ff fb7d 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018206:	892a      	ldrh	r2, [r5, #8]
 8018208:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801820c:	7928      	ldrb	r0, [r5, #4]
 801820e:	1ad2      	subs	r2, r2, r3
 8018210:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018212:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018216:	441a      	add	r2, r3
 8018218:	896b      	ldrh	r3, [r5, #10]
 801821a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801821e:	f88d 0010 	strb.w	r0, [sp, #16]
 8018222:	1b5b      	subs	r3, r3, r5
 8018224:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8018226:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018228:	442b      	add	r3, r5
 801822a:	4d07      	ldr	r5, [pc, #28]	@ (8018248 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801822c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018230:	a903      	add	r1, sp, #12
 8018232:	9503      	str	r5, [sp, #12]
 8018234:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018238:	f8ad 3016 	strh.w	r3, [sp, #22]
 801823c:	6803      	ldr	r3, [r0, #0]
 801823e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018240:	4798      	blx	r3
 8018242:	b007      	add	sp, #28
 8018244:	bd30      	pop	{r4, r5, pc}
 8018246:	bf00      	nop
 8018248:	080294e8 	.word	0x080294e8

0801824c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018250:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018252:	b08a      	sub	sp, #40	@ 0x28
 8018254:	4604      	mov	r4, r0
 8018256:	460d      	mov	r5, r1
 8018258:	b113      	cbz	r3, 8018260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801825a:	790b      	ldrb	r3, [r1, #4]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d044      	beq.n	80182ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018260:	f104 0804 	add.w	r8, r4, #4
 8018264:	a803      	add	r0, sp, #12
 8018266:	4641      	mov	r1, r8
 8018268:	f7ff fb4a 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801826c:	792b      	ldrb	r3, [r5, #4]
 801826e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018272:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018276:	b983      	cbnz	r3, 801829a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018278:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801827c:	892a      	ldrh	r2, [r5, #8]
 801827e:	88e9      	ldrh	r1, [r5, #6]
 8018280:	4640      	mov	r0, r8
 8018282:	1b92      	subs	r2, r2, r6
 8018284:	9301      	str	r3, [sp, #4]
 8018286:	1bc9      	subs	r1, r1, r7
 8018288:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801828c:	b212      	sxth	r2, r2
 801828e:	9300      	str	r3, [sp, #0]
 8018290:	b209      	sxth	r1, r1
 8018292:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8018296:	f7f8 f9c3 	bl	8010620 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801829a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801829c:	b329      	cbz	r1, 80182ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801829e:	a805      	add	r0, sp, #20
 80182a0:	f7ff fb2e 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80182a4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80182a8:	792b      	ldrb	r3, [r5, #4]
 80182aa:	a907      	add	r1, sp, #28
 80182ac:	1abf      	subs	r7, r7, r2
 80182ae:	88ea      	ldrh	r2, [r5, #6]
 80182b0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80182b2:	4417      	add	r7, r2
 80182b4:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80182b6:	f88d 3020 	strb.w	r3, [sp, #32]
 80182ba:	4417      	add	r7, r2
 80182bc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80182c0:	1ab6      	subs	r6, r6, r2
 80182c2:	892a      	ldrh	r2, [r5, #8]
 80182c4:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80182c8:	4416      	add	r6, r2
 80182ca:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80182cc:	4416      	add	r6, r2
 80182ce:	4a08      	ldr	r2, [pc, #32]	@ (80182f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80182d0:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80182d4:	2600      	movs	r6, #0
 80182d6:	9207      	str	r2, [sp, #28]
 80182d8:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80182dc:	6803      	ldr	r3, [r0, #0]
 80182de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80182e0:	4798      	blx	r3
 80182e2:	792b      	ldrb	r3, [r5, #4]
 80182e4:	b10b      	cbz	r3, 80182ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80182e6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80182ea:	b00a      	add	sp, #40	@ 0x28
 80182ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182f0:	080294c0 	.word	0x080294c0

080182f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80182f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182f8:	460c      	mov	r4, r1
 80182fa:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80182fc:	b088      	sub	sp, #32
 80182fe:	4605      	mov	r5, r0
 8018300:	2900      	cmp	r1, #0
 8018302:	d06d      	beq.n	80183e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018304:	4668      	mov	r0, sp
 8018306:	f7ff fafb 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801830a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801830c:	88e3      	ldrh	r3, [r4, #6]
 801830e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018312:	440b      	add	r3, r1
 8018314:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018318:	b21b      	sxth	r3, r3
 801831a:	4543      	cmp	r3, r8
 801831c:	db31      	blt.n	8018382 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801831e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018322:	44c4      	add	ip, r8
 8018324:	fa0f fc8c 	sxth.w	ip, ip
 8018328:	4563      	cmp	r3, ip
 801832a:	da2a      	bge.n	8018382 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801832c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801832e:	8926      	ldrh	r6, [r4, #8]
 8018330:	4416      	add	r6, r2
 8018332:	b236      	sxth	r6, r6
 8018334:	42be      	cmp	r6, r7
 8018336:	db24      	blt.n	8018382 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018338:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801833c:	4438      	add	r0, r7
 801833e:	b200      	sxth	r0, r0
 8018340:	4286      	cmp	r6, r0
 8018342:	da1e      	bge.n	8018382 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018344:	8963      	ldrh	r3, [r4, #10]
 8018346:	4419      	add	r1, r3
 8018348:	b209      	sxth	r1, r1
 801834a:	4541      	cmp	r1, r8
 801834c:	db08      	blt.n	8018360 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801834e:	4561      	cmp	r1, ip
 8018350:	da06      	bge.n	8018360 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018352:	89a3      	ldrh	r3, [r4, #12]
 8018354:	441a      	add	r2, r3
 8018356:	b212      	sxth	r2, r2
 8018358:	42ba      	cmp	r2, r7
 801835a:	db01      	blt.n	8018360 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801835c:	4282      	cmp	r2, r0
 801835e:	db10      	blt.n	8018382 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018360:	4b21      	ldr	r3, [pc, #132]	@ (80183e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018362:	a904      	add	r1, sp, #16
 8018364:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018366:	9304      	str	r3, [sp, #16]
 8018368:	2302      	movs	r3, #2
 801836a:	f88d 3014 	strb.w	r3, [sp, #20]
 801836e:	2300      	movs	r3, #0
 8018370:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018374:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018378:	f8ad 301a 	strh.w	r3, [sp, #26]
 801837c:	6803      	ldr	r3, [r0, #0]
 801837e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018380:	4798      	blx	r3
 8018382:	1d29      	adds	r1, r5, #4
 8018384:	a802      	add	r0, sp, #8
 8018386:	f7ff fabb 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801838a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801838e:	88e0      	ldrh	r0, [r4, #6]
 8018390:	eba3 0808 	sub.w	r8, r3, r8
 8018394:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018398:	7921      	ldrb	r1, [r4, #4]
 801839a:	fa1f f888 	uxth.w	r8, r8
 801839e:	1bdf      	subs	r7, r3, r7
 80183a0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 80183a4:	b2bb      	uxth	r3, r7
 80183a6:	4440      	add	r0, r8
 80183a8:	8922      	ldrh	r2, [r4, #8]
 80183aa:	8967      	ldrh	r7, [r4, #10]
 80183ac:	4460      	add	r0, ip
 80183ae:	89a4      	ldrh	r4, [r4, #12]
 80183b0:	441a      	add	r2, r3
 80183b2:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 80183b4:	44b8      	add	r8, r7
 80183b6:	4423      	add	r3, r4
 80183b8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80183bc:	4432      	add	r2, r6
 80183be:	44e0      	add	r8, ip
 80183c0:	4433      	add	r3, r6
 80183c2:	4c0a      	ldr	r4, [pc, #40]	@ (80183ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80183c4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80183c6:	f88d 1014 	strb.w	r1, [sp, #20]
 80183ca:	a904      	add	r1, sp, #16
 80183cc:	9404      	str	r4, [sp, #16]
 80183ce:	f8ad 2018 	strh.w	r2, [sp, #24]
 80183d2:	f8ad 801a 	strh.w	r8, [sp, #26]
 80183d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80183da:	6803      	ldr	r3, [r0, #0]
 80183dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80183de:	4798      	blx	r3
 80183e0:	b008      	add	sp, #32
 80183e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183e6:	bf00      	nop
 80183e8:	080294c0 	.word	0x080294c0
 80183ec:	080294d4 	.word	0x080294d4

080183f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80183f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80183f2:	4604      	mov	r4, r0
 80183f4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80183f8:	3201      	adds	r2, #1
 80183fa:	d112      	bne.n	8018422 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80183fc:	2500      	movs	r5, #0
 80183fe:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018402:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018406:	6803      	ldr	r3, [r0, #0]
 8018408:	9500      	str	r5, [sp, #0]
 801840a:	466d      	mov	r5, sp
 801840c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018410:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018414:	4629      	mov	r1, r5
 8018416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018418:	4798      	blx	r3
 801841a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801841e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018422:	4620      	mov	r0, r4
 8018424:	b003      	add	sp, #12
 8018426:	bd30      	pop	{r4, r5, pc}

08018428 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018428:	b513      	push	{r0, r1, r4, lr}
 801842a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801842e:	4604      	mov	r4, r0
 8018430:	3301      	adds	r3, #1
 8018432:	d109      	bne.n	8018448 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018434:	4601      	mov	r1, r0
 8018436:	4668      	mov	r0, sp
 8018438:	f7ff fa62 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801843c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018440:	8423      	strh	r3, [r4, #32]
 8018442:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018446:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018448:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801844c:	b002      	add	sp, #8
 801844e:	bd10      	pop	{r4, pc}

08018450 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018450:	b513      	push	{r0, r1, r4, lr}
 8018452:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8018456:	4604      	mov	r4, r0
 8018458:	3301      	adds	r3, #1
 801845a:	d109      	bne.n	8018470 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801845c:	4601      	mov	r1, r0
 801845e:	4668      	mov	r0, sp
 8018460:	f7ff fa4e 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018464:	f8bd 3000 	ldrh.w	r3, [sp]
 8018468:	8423      	strh	r3, [r4, #32]
 801846a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801846e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018470:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8018474:	b002      	add	sp, #8
 8018476:	bd10      	pop	{r4, pc}

08018478 <_ZN8touchgfx6ScreenC1Ev>:
 8018478:	b570      	push	{r4, r5, r6, lr}
 801847a:	4b17      	ldr	r3, [pc, #92]	@ (80184d8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801847c:	4605      	mov	r5, r0
 801847e:	4a17      	ldr	r2, [pc, #92]	@ (80184dc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018480:	2101      	movs	r1, #1
 8018482:	f845 3b04 	str.w	r3, [r5], #4
 8018486:	2300      	movs	r3, #0
 8018488:	6042      	str	r2, [r0, #4]
 801848a:	4604      	mov	r4, r0
 801848c:	8103      	strh	r3, [r0, #8]
 801848e:	8143      	strh	r3, [r0, #10]
 8018490:	8183      	strh	r3, [r0, #12]
 8018492:	81c3      	strh	r3, [r0, #14]
 8018494:	8203      	strh	r3, [r0, #16]
 8018496:	8243      	strh	r3, [r0, #18]
 8018498:	8283      	strh	r3, [r0, #20]
 801849a:	82c3      	strh	r3, [r0, #22]
 801849c:	6203      	str	r3, [r0, #32]
 801849e:	8483      	strh	r3, [r0, #36]	@ 0x24
 80184a0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80184a2:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80184a6:	6343      	str	r3, [r0, #52]	@ 0x34
 80184a8:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80184ac:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80184b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80184b4:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80184b8:	4b09      	ldr	r3, [pc, #36]	@ (80184e0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80184ba:	4628      	mov	r0, r5
 80184bc:	f9b3 6000 	ldrsh.w	r6, [r3]
 80184c0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80184c2:	4a08      	ldr	r2, [pc, #32]	@ (80184e4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80184c4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80184c8:	4798      	blx	r3
 80184ca:	6863      	ldr	r3, [r4, #4]
 80184cc:	4628      	mov	r0, r5
 80184ce:	4631      	mov	r1, r6
 80184d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80184d2:	4798      	blx	r3
 80184d4:	4620      	mov	r0, r4
 80184d6:	bd70      	pop	{r4, r5, r6, pc}
 80184d8:	080294fc 	.word	0x080294fc
 80184dc:	08028de8 	.word	0x08028de8
 80184e0:	24026412 	.word	0x24026412
 80184e4:	24026410 	.word	0x24026410

080184e8 <_ZN8touchgfx6Screen4drawEv>:
 80184e8:	4b09      	ldr	r3, [pc, #36]	@ (8018510 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80184ea:	b507      	push	{r0, r1, r2, lr}
 80184ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80184f0:	2100      	movs	r1, #0
 80184f2:	4b08      	ldr	r3, [pc, #32]	@ (8018514 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80184f4:	9100      	str	r1, [sp, #0]
 80184f6:	4669      	mov	r1, sp
 80184f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80184fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018500:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018504:	6803      	ldr	r3, [r0, #0]
 8018506:	689b      	ldr	r3, [r3, #8]
 8018508:	4798      	blx	r3
 801850a:	b003      	add	sp, #12
 801850c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018510:	24026410 	.word	0x24026410
 8018514:	24026412 	.word	0x24026412

08018518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801851c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018520:	b089      	sub	sp, #36	@ 0x24
 8018522:	4680      	mov	r8, r0
 8018524:	460c      	mov	r4, r1
 8018526:	2b00      	cmp	r3, #0
 8018528:	4615      	mov	r5, r2
 801852a:	dd0e      	ble.n	801854a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801852c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018530:	2b00      	cmp	r3, #0
 8018532:	dd0a      	ble.n	801854a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018534:	4628      	mov	r0, r5
 8018536:	f7ff ff5b 	bl	80183f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801853a:	4621      	mov	r1, r4
 801853c:	f7fd ffa3 	bl	8016486 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018540:	69eb      	ldr	r3, [r5, #28]
 8018542:	b928      	cbnz	r0, 8018550 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018544:	461d      	mov	r5, r3
 8018546:	2b00      	cmp	r3, #0
 8018548:	d1f4      	bne.n	8018534 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801854a:	b009      	add	sp, #36	@ 0x24
 801854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018550:	ae04      	add	r6, sp, #16
 8018552:	2b00      	cmp	r3, #0
 8018554:	f000 80b5 	beq.w	80186c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018558:	682b      	ldr	r3, [r5, #0]
 801855a:	4629      	mov	r1, r5
 801855c:	a802      	add	r0, sp, #8
 801855e:	68db      	ldr	r3, [r3, #12]
 8018560:	4798      	blx	r3
 8018562:	4628      	mov	r0, r5
 8018564:	f7ff ff60 	bl	8018428 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018568:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801856c:	4407      	add	r7, r0
 801856e:	4628      	mov	r0, r5
 8018570:	f7ff ff6e 	bl	8018450 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018574:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018578:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801857c:	b23f      	sxth	r7, r7
 801857e:	4418      	add	r0, r3
 8018580:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018584:	4621      	mov	r1, r4
 8018586:	f8ad 2014 	strh.w	r2, [sp, #20]
 801858a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801858e:	4630      	mov	r0, r6
 8018590:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018594:	f8ad 7010 	strh.w	r7, [sp, #16]
 8018598:	f7f8 f924 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 801859c:	4628      	mov	r0, r5
 801859e:	f7ff ff27 	bl	80183f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80185a2:	ab06      	add	r3, sp, #24
 80185a4:	4602      	mov	r2, r0
 80185a6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80185aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80185ae:	4611      	mov	r1, r2
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7f8 f917 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 80185b6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80185ba:	f9b4 1000 	ldrsh.w	r1, [r4]
 80185be:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80185c2:	4299      	cmp	r1, r3
 80185c4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80185c8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80185cc:	d10b      	bne.n	80185e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80185ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80185d2:	4552      	cmp	r2, sl
 80185d4:	d107      	bne.n	80185e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80185d6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80185da:	455a      	cmp	r2, fp
 80185dc:	d103      	bne.n	80185e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80185de:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80185e2:	454a      	cmp	r2, r9
 80185e4:	d06d      	beq.n	80186c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80185e6:	f1bb 0f00 	cmp.w	fp, #0
 80185ea:	dd65      	ble.n	80186b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80185ec:	f1b9 0f00 	cmp.w	r9, #0
 80185f0:	dd62      	ble.n	80186b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80185f2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80185f6:	fa1f f08a 	uxth.w	r0, sl
 80185fa:	4552      	cmp	r2, sl
 80185fc:	9000      	str	r0, [sp, #0]
 80185fe:	da12      	bge.n	8018626 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018600:	9301      	str	r3, [sp, #4]
 8018602:	9b00      	ldr	r3, [sp, #0]
 8018604:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018608:	f8ad 2012 	strh.w	r2, [sp, #18]
 801860c:	1a9a      	subs	r2, r3, r2
 801860e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018612:	4631      	mov	r1, r6
 8018614:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018618:	4640      	mov	r0, r8
 801861a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801861e:	69ea      	ldr	r2, [r5, #28]
 8018620:	f7ff ff7a 	bl	8018518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018624:	9b01      	ldr	r3, [sp, #4]
 8018626:	f9b4 2000 	ldrsh.w	r2, [r4]
 801862a:	b29f      	uxth	r7, r3
 801862c:	429a      	cmp	r2, r3
 801862e:	da0d      	bge.n	801864c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018630:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018634:	1aba      	subs	r2, r7, r2
 8018636:	f8ad a012 	strh.w	sl, [sp, #18]
 801863a:	4631      	mov	r1, r6
 801863c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018640:	4640      	mov	r0, r8
 8018642:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018646:	69ea      	ldr	r2, [r5, #28]
 8018648:	f7ff ff66 	bl	8018518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801864c:	8822      	ldrh	r2, [r4, #0]
 801864e:	445f      	add	r7, fp
 8018650:	88a3      	ldrh	r3, [r4, #4]
 8018652:	b2bf      	uxth	r7, r7
 8018654:	4413      	add	r3, r2
 8018656:	b23a      	sxth	r2, r7
 8018658:	b29b      	uxth	r3, r3
 801865a:	b219      	sxth	r1, r3
 801865c:	4291      	cmp	r1, r2
 801865e:	dd0d      	ble.n	801867c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018660:	1bdb      	subs	r3, r3, r7
 8018662:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018666:	f8ad a012 	strh.w	sl, [sp, #18]
 801866a:	4631      	mov	r1, r6
 801866c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018670:	4640      	mov	r0, r8
 8018672:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018676:	69ea      	ldr	r2, [r5, #28]
 8018678:	f7ff ff4e 	bl	8018518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801867c:	88e2      	ldrh	r2, [r4, #6]
 801867e:	8863      	ldrh	r3, [r4, #2]
 8018680:	4413      	add	r3, r2
 8018682:	9a00      	ldr	r2, [sp, #0]
 8018684:	444a      	add	r2, r9
 8018686:	b29b      	uxth	r3, r3
 8018688:	fa1f f982 	uxth.w	r9, r2
 801868c:	b219      	sxth	r1, r3
 801868e:	fa0f f289 	sxth.w	r2, r9
 8018692:	428a      	cmp	r2, r1
 8018694:	da15      	bge.n	80186c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018696:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801869a:	eba3 0309 	sub.w	r3, r3, r9
 801869e:	f9b4 0000 	ldrsh.w	r0, [r4]
 80186a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80186a6:	4631      	mov	r1, r6
 80186a8:	f8ad 0010 	strh.w	r0, [sp, #16]
 80186ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 80186b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80186b4:	69ea      	ldr	r2, [r5, #28]
 80186b6:	e001      	b.n	80186bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80186b8:	69ea      	ldr	r2, [r5, #28]
 80186ba:	4621      	mov	r1, r4
 80186bc:	4640      	mov	r0, r8
 80186be:	f7ff ff2b 	bl	8018518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80186c2:	4628      	mov	r0, r5
 80186c4:	f7ff fe94 	bl	80183f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80186c8:	6861      	ldr	r1, [r4, #4]
 80186ca:	4602      	mov	r2, r0
 80186cc:	4633      	mov	r3, r6
 80186ce:	6820      	ldr	r0, [r4, #0]
 80186d0:	c303      	stmia	r3!, {r0, r1}
 80186d2:	4611      	mov	r1, r2
 80186d4:	4630      	mov	r0, r6
 80186d6:	f7f8 f885 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 80186da:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	f77f af33 	ble.w	801854a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80186e4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	f77f af2e 	ble.w	801854a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80186ee:	4628      	mov	r0, r5
 80186f0:	f7ff fe9a 	bl	8018428 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80186f4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80186f8:	1a18      	subs	r0, r3, r0
 80186fa:	f8ad 0010 	strh.w	r0, [sp, #16]
 80186fe:	4628      	mov	r0, r5
 8018700:	f7ff fea6 	bl	8018450 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018704:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018708:	4631      	mov	r1, r6
 801870a:	1a18      	subs	r0, r3, r0
 801870c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018710:	4628      	mov	r0, r5
 8018712:	682b      	ldr	r3, [r5, #0]
 8018714:	689b      	ldr	r3, [r3, #8]
 8018716:	4798      	blx	r3
 8018718:	e717      	b.n	801854a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801871a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801871a:	b570      	push	{r4, r5, r6, lr}
 801871c:	1d06      	adds	r6, r0, #4
 801871e:	b086      	sub	sp, #24
 8018720:	460c      	mov	r4, r1
 8018722:	2300      	movs	r3, #0
 8018724:	4631      	mov	r1, r6
 8018726:	4605      	mov	r5, r0
 8018728:	a802      	add	r0, sp, #8
 801872a:	9301      	str	r3, [sp, #4]
 801872c:	f7ff f8e8 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018730:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018734:	8822      	ldrh	r2, [r4, #0]
 8018736:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801873a:	1ad2      	subs	r2, r2, r3
 801873c:	8863      	ldrh	r3, [r4, #2]
 801873e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018742:	1a5b      	subs	r3, r3, r1
 8018744:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018748:	f8ad 2010 	strh.w	r2, [sp, #16]
 801874c:	aa01      	add	r2, sp, #4
 801874e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018752:	4630      	mov	r0, r6
 8018754:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018758:	a904      	add	r1, sp, #16
 801875a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801875e:	f7f8 f919 	bl	8010994 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018762:	9a01      	ldr	r2, [sp, #4]
 8018764:	b11a      	cbz	r2, 801876e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018766:	4621      	mov	r1, r4
 8018768:	4628      	mov	r0, r5
 801876a:	f7ff fed5 	bl	8018518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801876e:	b006      	add	sp, #24
 8018770:	bd70      	pop	{r4, r5, r6, pc}

08018772 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018772:	4602      	mov	r2, r0
 8018774:	b530      	push	{r4, r5, lr}
 8018776:	4604      	mov	r4, r0
 8018778:	b085      	sub	sp, #20
 801877a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801877e:	460d      	mov	r5, r1
 8018780:	466b      	mov	r3, sp
 8018782:	6851      	ldr	r1, [r2, #4]
 8018784:	c303      	stmia	r3!, {r0, r1}
 8018786:	4629      	mov	r1, r5
 8018788:	4668      	mov	r0, sp
 801878a:	f7f8 f82b 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 801878e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018792:	b12b      	cbz	r3, 80187a0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018794:	4669      	mov	r1, sp
 8018796:	4620      	mov	r0, r4
 8018798:	f7ff ffbf 	bl	801871a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801879c:	b005      	add	sp, #20
 801879e:	bd30      	pop	{r4, r5, pc}
 80187a0:	3404      	adds	r4, #4
 80187a2:	a802      	add	r0, sp, #8
 80187a4:	4621      	mov	r1, r4
 80187a6:	f7ff f8ab 	bl	8017900 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80187ae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80187b2:	4669      	mov	r1, sp
 80187b4:	4620      	mov	r0, r4
 80187b6:	1a9b      	subs	r3, r3, r2
 80187b8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80187bc:	f8ad 3000 	strh.w	r3, [sp]
 80187c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80187c4:	1a9b      	subs	r3, r3, r2
 80187c6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80187ca:	f7f8 f8aa 	bl	8010922 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80187ce:	e7e5      	b.n	801879c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080187d0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80187d0:	460b      	mov	r3, r1
 80187d2:	680a      	ldr	r2, [r1, #0]
 80187d4:	1d01      	adds	r1, r0, #4
 80187d6:	6992      	ldr	r2, [r2, #24]
 80187d8:	4618      	mov	r0, r3
 80187da:	4710      	bx	r2

080187dc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 80187dc:	4298      	cmp	r0, r3
 80187de:	d200      	bcs.n	80187e2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 80187e0:	b913      	cbnz	r3, 80187e8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 80187e2:	440a      	add	r2, r1
 80187e4:	b210      	sxth	r0, r2
 80187e6:	4770      	bx	lr
 80187e8:	ee07 0a90 	vmov	s15, r0
 80187ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80187f0:	ee07 3a90 	vmov	s15, r3
 80187f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80187fc:	ee07 2a90 	vmov	s15, r2
 8018800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018804:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018808:	ee07 1a90 	vmov	s15, r1
 801880c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018810:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018814:	ee67 5a07 	vmul.f32	s11, s14, s14
 8018818:	eee5 6a87 	vfma.f32	s13, s11, s14
 801881c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8018820:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018824:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801882c:	bfcc      	ite	gt
 801882e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8018832:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801883a:	ee17 3a90 	vmov	r3, s15
 801883e:	b218      	sxth	r0, r3
 8018840:	4770      	bx	lr

08018842 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8018842:	4298      	cmp	r0, r3
 8018844:	d200      	bcs.n	8018848 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8018846:	b913      	cbnz	r3, 801884e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8018848:	440a      	add	r2, r1
 801884a:	b210      	sxth	r0, r2
 801884c:	4770      	bx	lr
 801884e:	ee07 2a90 	vmov	s15, r2
 8018852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018856:	ee07 0a90 	vmov	s15, r0
 801885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018862:	ee07 3a10 	vmov	s14, r3
 8018866:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801886a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801886e:	ee07 1a90 	vmov	s15, r1
 8018872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018876:	ee77 7a27 	vadd.f32	s15, s14, s15
 801887a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801887e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018886:	bfcc      	ite	gt
 8018888:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801888c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8018890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018894:	ee17 3a90 	vmov	r3, s15
 8018898:	b218      	sxth	r0, r3
 801889a:	4770      	bx	lr

0801889c <_ZN8touchgfx12TextProviderC1Ev>:
 801889c:	b538      	push	{r3, r4, r5, lr}
 801889e:	2500      	movs	r5, #0
 80188a0:	2302      	movs	r3, #2
 80188a2:	4604      	mov	r4, r0
 80188a4:	220e      	movs	r2, #14
 80188a6:	7403      	strb	r3, [r0, #16]
 80188a8:	4629      	mov	r1, r5
 80188aa:	6145      	str	r5, [r0, #20]
 80188ac:	7605      	strb	r5, [r0, #24]
 80188ae:	83c5      	strh	r5, [r0, #30]
 80188b0:	8405      	strh	r5, [r0, #32]
 80188b2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80188b4:	8705      	strh	r5, [r0, #56]	@ 0x38
 80188b6:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80188b8:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80188bc:	e9c0 5500 	strd	r5, r5, [r0]
 80188c0:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80188c4:	304c      	adds	r0, #76	@ 0x4c
 80188c6:	f00c fcbb 	bl	8025240 <memset>
 80188ca:	2301      	movs	r3, #1
 80188cc:	4620      	mov	r0, r4
 80188ce:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80188d2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80188d6:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 80188da:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 80188de:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 80188e2:	f7ed fde1 	bl	80064a8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80188e6:	4620      	mov	r0, r4
 80188e8:	bd38      	pop	{r3, r4, r5, pc}

080188ea <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80188ea:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80188ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80188f0:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80188f2:	fab0 f080 	clz	r0, r0
 80188f6:	0940      	lsrs	r0, r0, #5
 80188f8:	4770      	bx	lr

080188fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80188fa:	b530      	push	{r4, r5, lr}
 80188fc:	2500      	movs	r5, #0
 80188fe:	2401      	movs	r4, #1
 8018900:	6843      	ldr	r3, [r0, #4]
 8018902:	b913      	cbnz	r3, 801890a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018904:	6803      	ldr	r3, [r0, #0]
 8018906:	b313      	cbz	r3, 801894e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018908:	6043      	str	r3, [r0, #4]
 801890a:	7e03      	ldrb	r3, [r0, #24]
 801890c:	b143      	cbz	r3, 8018920 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801890e:	6943      	ldr	r3, [r0, #20]
 8018910:	b12b      	cbz	r3, 801891e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018912:	881a      	ldrh	r2, [r3, #0]
 8018914:	b11a      	cbz	r2, 801891e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018916:	1c9a      	adds	r2, r3, #2
 8018918:	6142      	str	r2, [r0, #20]
 801891a:	8818      	ldrh	r0, [r3, #0]
 801891c:	bd30      	pop	{r4, r5, pc}
 801891e:	7605      	strb	r5, [r0, #24]
 8018920:	6843      	ldr	r3, [r0, #4]
 8018922:	8819      	ldrh	r1, [r3, #0]
 8018924:	b199      	cbz	r1, 801894e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018926:	1c9a      	adds	r2, r3, #2
 8018928:	2902      	cmp	r1, #2
 801892a:	6042      	str	r2, [r0, #4]
 801892c:	d1f5      	bne.n	801891a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801892e:	7c03      	ldrb	r3, [r0, #16]
 8018930:	2b01      	cmp	r3, #1
 8018932:	d8e5      	bhi.n	8018900 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018934:	1c5a      	adds	r2, r3, #1
 8018936:	3302      	adds	r3, #2
 8018938:	7402      	strb	r2, [r0, #16]
 801893a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801893e:	6143      	str	r3, [r0, #20]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d0dd      	beq.n	8018900 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018944:	881b      	ldrh	r3, [r3, #0]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d0da      	beq.n	8018900 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801894a:	7604      	strb	r4, [r0, #24]
 801894c:	e7d8      	b.n	8018900 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801894e:	2000      	movs	r0, #0
 8018950:	e7e4      	b.n	801891c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018952:	6001      	str	r1, [r0, #0]
 8018954:	2100      	movs	r1, #0
 8018956:	b430      	push	{r4, r5}
 8018958:	6041      	str	r1, [r0, #4]
 801895a:	6815      	ldr	r5, [r2, #0]
 801895c:	6085      	str	r5, [r0, #8]
 801895e:	6852      	ldr	r2, [r2, #4]
 8018960:	6443      	str	r3, [r0, #68]	@ 0x44
 8018962:	9b02      	ldr	r3, [sp, #8]
 8018964:	60c2      	str	r2, [r0, #12]
 8018966:	7401      	strb	r1, [r0, #16]
 8018968:	6141      	str	r1, [r0, #20]
 801896a:	7601      	strb	r1, [r0, #24]
 801896c:	8701      	strh	r1, [r0, #56]	@ 0x38
 801896e:	8401      	strh	r1, [r0, #32]
 8018970:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8018974:	6483      	str	r3, [r0, #72]	@ 0x48
 8018976:	bc30      	pop	{r4, r5}
 8018978:	f7ed bd96 	b.w	80064a8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801897c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801897c:	b408      	push	{r3}
 801897e:	b510      	push	{r4, lr}
 8018980:	b085      	sub	sp, #20
 8018982:	ac07      	add	r4, sp, #28
 8018984:	f854 3b04 	ldr.w	r3, [r4], #4
 8018988:	9300      	str	r3, [sp, #0]
 801898a:	4613      	mov	r3, r2
 801898c:	4622      	mov	r2, r4
 801898e:	9403      	str	r4, [sp, #12]
 8018990:	f7ff ffdf 	bl	8018952 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018994:	b005      	add	sp, #20
 8018996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801899a:	b001      	add	sp, #4
 801899c:	4770      	bx	lr

0801899e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801899e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189a0:	4605      	mov	r5, r0
 80189a2:	4608      	mov	r0, r1
 80189a4:	b1f1      	cbz	r1, 80189e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80189a6:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80189aa:	460b      	mov	r3, r1
 80189ac:	f101 0708 	add.w	r7, r1, #8
 80189b0:	4622      	mov	r2, r4
 80189b2:	6818      	ldr	r0, [r3, #0]
 80189b4:	3308      	adds	r3, #8
 80189b6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80189ba:	4626      	mov	r6, r4
 80189bc:	42bb      	cmp	r3, r7
 80189be:	c603      	stmia	r6!, {r0, r1}
 80189c0:	4634      	mov	r4, r6
 80189c2:	d1f6      	bne.n	80189b2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80189c4:	6818      	ldr	r0, [r3, #0]
 80189c6:	6030      	str	r0, [r6, #0]
 80189c8:	4610      	mov	r0, r2
 80189ca:	889b      	ldrh	r3, [r3, #4]
 80189cc:	80b3      	strh	r3, [r6, #4]
 80189ce:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80189d2:	015b      	lsls	r3, r3, #5
 80189d4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80189d8:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80189dc:	430b      	orrs	r3, r1
 80189de:	425b      	negs	r3, r3
 80189e0:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80189e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080189e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80189e6:	b538      	push	{r3, r4, r5, lr}
 80189e8:	460c      	mov	r4, r1
 80189ea:	6811      	ldr	r1, [r2, #0]
 80189ec:	4610      	mov	r0, r2
 80189ee:	68cd      	ldr	r5, [r1, #12]
 80189f0:	4619      	mov	r1, r3
 80189f2:	47a8      	blx	r5
 80189f4:	2800      	cmp	r0, #0
 80189f6:	bf08      	it	eq
 80189f8:	4620      	moveq	r0, r4
 80189fa:	bd38      	pop	{r3, r4, r5, pc}

080189fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80189fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a00:	468c      	mov	ip, r1
 8018a02:	4605      	mov	r5, r0
 8018a04:	4614      	mov	r4, r2
 8018a06:	b942      	cbnz	r2, 8018a1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8018a08:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8018a0c:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8018a10:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8018a14:	4620      	mov	r0, r4
 8018a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a1a:	7b50      	ldrb	r0, [r2, #13]
 8018a1c:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8018a20:	8893      	ldrh	r3, [r2, #4]
 8018a22:	0106      	lsls	r6, r0, #4
 8018a24:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8018a28:	79e6      	ldrb	r6, [r4, #7]
 8018a2a:	4316      	orrs	r6, r2
 8018a2c:	185a      	adds	r2, r3, r1
 8018a2e:	b291      	uxth	r1, r2
 8018a30:	b2b7      	uxth	r7, r6
 8018a32:	291d      	cmp	r1, #29
 8018a34:	d87f      	bhi.n	8018b36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018a36:	2201      	movs	r2, #1
 8018a38:	10f6      	asrs	r6, r6, #3
 8018a3a:	408a      	lsls	r2, r1
 8018a3c:	498b      	ldr	r1, [pc, #556]	@ (8018c6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8018a3e:	420a      	tst	r2, r1
 8018a40:	d12e      	bne.n	8018aa0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8018a42:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8018a46:	d076      	beq.n	8018b36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018a48:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018a4c:	4623      	mov	r3, r4
 8018a4e:	f104 0e08 	add.w	lr, r4, #8
 8018a52:	4614      	mov	r4, r2
 8018a54:	6818      	ldr	r0, [r3, #0]
 8018a56:	3308      	adds	r3, #8
 8018a58:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018a5c:	4694      	mov	ip, r2
 8018a5e:	4573      	cmp	r3, lr
 8018a60:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018a64:	4662      	mov	r2, ip
 8018a66:	d1f5      	bne.n	8018a54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8018a68:	6818      	ldr	r0, [r3, #0]
 8018a6a:	f8cc 0000 	str.w	r0, [ip]
 8018a6e:	889b      	ldrh	r3, [r3, #4]
 8018a70:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018a74:	b2b3      	uxth	r3, r6
 8018a76:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8018a7a:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8018a7e:	1aca      	subs	r2, r1, r3
 8018a80:	1bcf      	subs	r7, r1, r7
 8018a82:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8018a86:	b292      	uxth	r2, r2
 8018a88:	1afb      	subs	r3, r7, r3
 8018a8a:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8018a8e:	10d2      	asrs	r2, r2, #3
 8018a90:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8018a94:	4302      	orrs	r2, r0
 8018a96:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8018a9a:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8018a9e:	e7b9      	b.n	8018a14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8018aa0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018aa4:	4623      	mov	r3, r4
 8018aa6:	f104 0808 	add.w	r8, r4, #8
 8018aaa:	4614      	mov	r4, r2
 8018aac:	6818      	ldr	r0, [r3, #0]
 8018aae:	3308      	adds	r3, #8
 8018ab0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018ab4:	4696      	mov	lr, r2
 8018ab6:	4543      	cmp	r3, r8
 8018ab8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018abc:	4672      	mov	r2, lr
 8018abe:	d1f5      	bne.n	8018aac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8018ac0:	6818      	ldr	r0, [r3, #0]
 8018ac2:	f8ce 0000 	str.w	r0, [lr]
 8018ac6:	889b      	ldrh	r3, [r3, #4]
 8018ac8:	f8ae 3004 	strh.w	r3, [lr, #4]
 8018acc:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8018ace:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8018ad2:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8018ad4:	f640 6333 	movw	r3, #3635	@ 0xe33
 8018ad8:	4299      	cmp	r1, r3
 8018ada:	d111      	bne.n	8018b00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8018adc:	f8dc 3000 	ldr.w	r3, [ip]
 8018ae0:	4660      	mov	r0, ip
 8018ae2:	68db      	ldr	r3, [r3, #12]
 8018ae4:	4798      	blx	r3
 8018ae6:	7b41      	ldrb	r1, [r0, #13]
 8018ae8:	00cb      	lsls	r3, r1, #3
 8018aea:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018aee:	7a03      	ldrb	r3, [r0, #8]
 8018af0:	4313      	orrs	r3, r2
 8018af2:	064a      	lsls	r2, r1, #25
 8018af4:	bf44      	itt	mi
 8018af6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018afa:	b21b      	sxthmi	r3, r3
 8018afc:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018b00:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8018b04:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8018b08:	443b      	add	r3, r7
 8018b0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018b0e:	4433      	add	r3, r6
 8018b10:	b29b      	uxth	r3, r3
 8018b12:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018b16:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8018b1a:	10db      	asrs	r3, r3, #3
 8018b1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018b20:	4313      	orrs	r3, r2
 8018b22:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8018b26:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8018b2a:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8018b2e:	1a9b      	subs	r3, r3, r2
 8018b30:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018b34:	e76e      	b.n	8018a14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8018b36:	f023 0204 	bic.w	r2, r3, #4
 8018b3a:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8018b3e:	428a      	cmp	r2, r1
 8018b40:	d003      	beq.n	8018b4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8018b42:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8018b46:	4293      	cmp	r3, r2
 8018b48:	d138      	bne.n	8018bbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8018b4a:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8018b4e:	4622      	mov	r2, r4
 8018b50:	f104 0808 	add.w	r8, r4, #8
 8018b54:	4634      	mov	r4, r6
 8018b56:	6810      	ldr	r0, [r2, #0]
 8018b58:	3208      	adds	r2, #8
 8018b5a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018b5e:	46b6      	mov	lr, r6
 8018b60:	4542      	cmp	r2, r8
 8018b62:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018b66:	4676      	mov	r6, lr
 8018b68:	d1f5      	bne.n	8018b56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8018b6a:	6810      	ldr	r0, [r2, #0]
 8018b6c:	3b01      	subs	r3, #1
 8018b6e:	4621      	mov	r1, r4
 8018b70:	f8ce 0000 	str.w	r0, [lr]
 8018b74:	b29b      	uxth	r3, r3
 8018b76:	8892      	ldrh	r2, [r2, #4]
 8018b78:	4628      	mov	r0, r5
 8018b7a:	f8ae 2004 	strh.w	r2, [lr, #4]
 8018b7e:	4662      	mov	r2, ip
 8018b80:	f7ff ff31 	bl	80189e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018b84:	7b41      	ldrb	r1, [r0, #13]
 8018b86:	00cb      	lsls	r3, r1, #3
 8018b88:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018b8c:	7a03      	ldrb	r3, [r0, #8]
 8018b8e:	0648      	lsls	r0, r1, #25
 8018b90:	ea43 0302 	orr.w	r3, r3, r2
 8018b94:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8018b98:	bf44      	itt	mi
 8018b9a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018b9e:	b21b      	sxthmi	r3, r3
 8018ba0:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018ba4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018ba8:	005b      	lsls	r3, r3, #1
 8018baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018bae:	4313      	orrs	r3, r2
 8018bb0:	115a      	asrs	r2, r3, #5
 8018bb2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018bb6:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8018bba:	e047      	b.n	8018c4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8018bbc:	00c2      	lsls	r2, r0, #3
 8018bbe:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8018bc2:	7a22      	ldrb	r2, [r4, #8]
 8018bc4:	430a      	orrs	r2, r1
 8018bc6:	0641      	lsls	r1, r0, #25
 8018bc8:	f640 6109 	movw	r1, #3593	@ 0xe09
 8018bcc:	bf44      	itt	mi
 8018bce:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8018bd2:	b212      	sxthmi	r2, r2
 8018bd4:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8018bd8:	f023 0210 	bic.w	r2, r3, #16
 8018bdc:	428a      	cmp	r2, r1
 8018bde:	d003      	beq.n	8018be8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8018be0:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018be4:	4293      	cmp	r3, r2
 8018be6:	d13e      	bne.n	8018c66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8018be8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018bec:	f104 0808 	add.w	r8, r4, #8
 8018bf0:	4696      	mov	lr, r2
 8018bf2:	6820      	ldr	r0, [r4, #0]
 8018bf4:	3408      	adds	r4, #8
 8018bf6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8018bfa:	4616      	mov	r6, r2
 8018bfc:	4544      	cmp	r4, r8
 8018bfe:	c603      	stmia	r6!, {r0, r1}
 8018c00:	4632      	mov	r2, r6
 8018c02:	d1f6      	bne.n	8018bf2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8018c04:	6820      	ldr	r0, [r4, #0]
 8018c06:	6030      	str	r0, [r6, #0]
 8018c08:	4628      	mov	r0, r5
 8018c0a:	88a1      	ldrh	r1, [r4, #4]
 8018c0c:	4674      	mov	r4, lr
 8018c0e:	80b1      	strh	r1, [r6, #4]
 8018c10:	4671      	mov	r1, lr
 8018c12:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8018c16:	0076      	lsls	r6, r6, #1
 8018c18:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8018c1c:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8018c20:	4316      	orrs	r6, r2
 8018c22:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018c26:	4293      	cmp	r3, r2
 8018c28:	4662      	mov	r2, ip
 8018c2a:	bf16      	itet	ne
 8018c2c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018c30:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8018c34:	b29b      	uxthne	r3, r3
 8018c36:	f7ff fed6 	bl	80189e6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018c3a:	7b43      	ldrb	r3, [r0, #13]
 8018c3c:	7a82      	ldrb	r2, [r0, #10]
 8018c3e:	005b      	lsls	r3, r3, #1
 8018c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018c44:	4313      	orrs	r3, r2
 8018c46:	1af6      	subs	r6, r6, r3
 8018c48:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8018c4c:	7b61      	ldrb	r1, [r4, #13]
 8018c4e:	00cb      	lsls	r3, r1, #3
 8018c50:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018c54:	7a23      	ldrb	r3, [r4, #8]
 8018c56:	4313      	orrs	r3, r2
 8018c58:	064a      	lsls	r2, r1, #25
 8018c5a:	bf44      	itt	mi
 8018c5c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018c60:	b21b      	sxthmi	r3, r3
 8018c62:	1bdb      	subs	r3, r3, r7
 8018c64:	e719      	b.n	8018a9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8018c66:	2300      	movs	r3, #0
 8018c68:	e7a5      	b.n	8018bb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8018c6a:	bf00      	nop
 8018c6c:	3fc00079 	.word	0x3fc00079

08018c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c74:	4604      	mov	r4, r0
 8018c76:	b942      	cbnz	r2, 8018c8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018c7c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8018c80:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8018c84:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8018c88:	e047      	b.n	8018d1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018c8a:	7b51      	ldrb	r1, [r2, #13]
 8018c8c:	8893      	ldrh	r3, [r2, #4]
 8018c8e:	010d      	lsls	r5, r1, #4
 8018c90:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8018c94:	79d5      	ldrb	r5, [r2, #7]
 8018c96:	4305      	orrs	r5, r0
 8018c98:	2d04      	cmp	r5, #4
 8018c9a:	bfcc      	ite	gt
 8018c9c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018ca0:	f04f 0e01 	movle.w	lr, #1
 8018ca4:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8018ca8:	f200 80ab 	bhi.w	8018e02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018cac:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8018cb0:	4283      	cmp	r3, r0
 8018cb2:	d216      	bcs.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018cb4:	f240 605b 	movw	r0, #1627	@ 0x65b
 8018cb8:	4283      	cmp	r3, r0
 8018cba:	d859      	bhi.n	8018d70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018cbc:	f240 6057 	movw	r0, #1623	@ 0x657
 8018cc0:	4283      	cmp	r3, r0
 8018cc2:	d20e      	bcs.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018cc4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8018cc8:	d24a      	bcs.n	8018d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018cca:	f240 604e 	movw	r0, #1614	@ 0x64e
 8018cce:	4283      	cmp	r3, r0
 8018cd0:	d207      	bcs.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018cd2:	f240 601a 	movw	r0, #1562	@ 0x61a
 8018cd6:	4283      	cmp	r3, r0
 8018cd8:	d02a      	beq.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018cda:	d821      	bhi.n	8018d20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018cdc:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8018ce0:	d35b      	bcc.n	8018d9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018ce2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8018ce6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018cea:	f040 80d0 	bne.w	8018e8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018cee:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8018cf2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018cf6:	f040 80ca 	bne.w	8018e8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018cfa:	00cb      	lsls	r3, r1, #3
 8018cfc:	0649      	lsls	r1, r1, #25
 8018cfe:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018d02:	7a13      	ldrb	r3, [r2, #8]
 8018d04:	ea43 0300 	orr.w	r3, r3, r0
 8018d08:	bf44      	itt	mi
 8018d0a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018d0e:	b21b      	sxthmi	r3, r3
 8018d10:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018d14:	1b5d      	subs	r5, r3, r5
 8018d16:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018d1a:	4610      	mov	r0, r2
 8018d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d20:	f240 604b 	movw	r0, #1611	@ 0x64b
 8018d24:	4283      	cmp	r3, r0
 8018d26:	d338      	bcc.n	8018d9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018d28:	f240 604c 	movw	r0, #1612	@ 0x64c
 8018d2c:	4283      	cmp	r3, r0
 8018d2e:	d9d8      	bls.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d30:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8018d34:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8018d38:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018d3c:	f040 80f3 	bne.w	8018f26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018d40:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018d44:	f040 80ef 	bne.w	8018f26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018d48:	00cb      	lsls	r3, r1, #3
 8018d4a:	064e      	lsls	r6, r1, #25
 8018d4c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018d50:	7a13      	ldrb	r3, [r2, #8]
 8018d52:	ea43 0300 	orr.w	r3, r3, r0
 8018d56:	bf44      	itt	mi
 8018d58:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018d5c:	b21b      	sxthmi	r3, r3
 8018d5e:	e7d9      	b.n	8018d14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018d60:	f240 6054 	movw	r0, #1620	@ 0x654
 8018d64:	4283      	cmp	r3, r0
 8018d66:	d8e3      	bhi.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018d68:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8018d6c:	d9e0      	bls.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018d6e:	e7b8      	b.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d70:	f240 6074 	movw	r0, #1652	@ 0x674
 8018d74:	4283      	cmp	r3, r0
 8018d76:	d0b4      	beq.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d78:	d82d      	bhi.n	8018dd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018d7a:	f240 605e 	movw	r0, #1630	@ 0x65e
 8018d7e:	4283      	cmp	r3, r0
 8018d80:	d804      	bhi.n	8018d8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018d82:	f240 605d 	movw	r0, #1629	@ 0x65d
 8018d86:	4283      	cmp	r3, r0
 8018d88:	d3d2      	bcc.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018d8a:	e7aa      	b.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d8c:	f240 605f 	movw	r0, #1631	@ 0x65f
 8018d90:	4283      	cmp	r3, r0
 8018d92:	d0cd      	beq.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018d94:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8018d98:	d0a3      	beq.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018d9a:	00cb      	lsls	r3, r1, #3
 8018d9c:	0649      	lsls	r1, r1, #25
 8018d9e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018da2:	7a13      	ldrb	r3, [r2, #8]
 8018da4:	ea43 0300 	orr.w	r3, r3, r0
 8018da8:	bf44      	itt	mi
 8018daa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018dae:	b21b      	sxthmi	r3, r3
 8018db0:	1b5d      	subs	r5, r3, r5
 8018db2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018db6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018dba:	7b53      	ldrb	r3, [r2, #13]
 8018dbc:	015b      	lsls	r3, r3, #5
 8018dbe:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018dc2:	7993      	ldrb	r3, [r2, #6]
 8018dc4:	430b      	orrs	r3, r1
 8018dc6:	2105      	movs	r1, #5
 8018dc8:	005b      	lsls	r3, r3, #1
 8018dca:	fb93 f3f1 	sdiv	r3, r3, r1
 8018dce:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018dd2:	440b      	add	r3, r1
 8018dd4:	e756      	b.n	8018c84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018dd6:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8018dda:	4283      	cmp	r3, r0
 8018ddc:	d809      	bhi.n	8018df2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018dde:	f240 60df 	movw	r0, #1759	@ 0x6df
 8018de2:	4283      	cmp	r3, r0
 8018de4:	f4bf af7d 	bcs.w	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018de8:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8018dec:	2b05      	cmp	r3, #5
 8018dee:	d8d4      	bhi.n	8018d9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018df0:	e777      	b.n	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018df2:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8018df6:	4283      	cmp	r3, r0
 8018df8:	d09a      	beq.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018dfa:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8018dfe:	4283      	cmp	r3, r0
 8018e00:	e7ca      	b.n	8018d98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8018e02:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8018e06:	d22b      	bcs.n	8018e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8018e08:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8018e0c:	4283      	cmp	r3, r0
 8018e0e:	d28f      	bcs.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e10:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018e14:	4283      	cmp	r3, r0
 8018e16:	d816      	bhi.n	8018e46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018e18:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8018e1c:	4283      	cmp	r3, r0
 8018e1e:	f4bf af60 	bcs.w	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018e22:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8018e26:	4283      	cmp	r3, r0
 8018e28:	d80a      	bhi.n	8018e40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8018e2a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8018e2e:	4283      	cmp	r3, r0
 8018e30:	f4bf af57 	bcs.w	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018e34:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8018e38:	4283      	cmp	r3, r0
 8018e3a:	f43f af79 	beq.w	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e3e:	e7ac      	b.n	8018d9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018e40:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8018e44:	e7f8      	b.n	8018e38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018e46:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8018e4a:	4283      	cmp	r3, r0
 8018e4c:	d802      	bhi.n	8018e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018e4e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018e52:	e798      	b.n	8018d86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018e54:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8018e58:	4283      	cmp	r3, r0
 8018e5a:	f47f af42 	bne.w	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018e5e:	e767      	b.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e60:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8018e64:	4283      	cmp	r3, r0
 8018e66:	f43f af63 	beq.w	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e6a:	d802      	bhi.n	8018e72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018e6c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8018e70:	e7f2      	b.n	8018e58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018e72:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8018e76:	4283      	cmp	r3, r0
 8018e78:	d805      	bhi.n	8018e86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018e7a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8018e7e:	4283      	cmp	r3, r0
 8018e80:	f4ff af2f 	bcc.w	8018ce2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018e84:	e754      	b.n	8018d30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018e86:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8018e8a:	4283      	cmp	r3, r0
 8018e8c:	e7af      	b.n	8018dee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018e8e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8018e92:	4617      	mov	r7, r2
 8018e94:	f102 0808 	add.w	r8, r2, #8
 8018e98:	4666      	mov	r6, ip
 8018e9a:	6838      	ldr	r0, [r7, #0]
 8018e9c:	3708      	adds	r7, #8
 8018e9e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018ea2:	46e6      	mov	lr, ip
 8018ea4:	4547      	cmp	r7, r8
 8018ea6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018eaa:	46f4      	mov	ip, lr
 8018eac:	d1f5      	bne.n	8018e9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018eae:	6838      	ldr	r0, [r7, #0]
 8018eb0:	f8ce 0000 	str.w	r0, [lr]
 8018eb4:	88b9      	ldrh	r1, [r7, #4]
 8018eb6:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018eba:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8018ebe:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018ec2:	d009      	beq.n	8018ed8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8018ec4:	7b51      	ldrb	r1, [r2, #13]
 8018ec6:	7992      	ldrb	r2, [r2, #6]
 8018ec8:	0149      	lsls	r1, r1, #5
 8018eca:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018ece:	4311      	orrs	r1, r2
 8018ed0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018ed4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018ed8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018edc:	b2ad      	uxth	r5, r5
 8018ede:	d00d      	beq.n	8018efc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8018ee0:	442b      	add	r3, r5
 8018ee2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8018ee6:	b29b      	uxth	r3, r3
 8018ee8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018eec:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8018ef0:	10db      	asrs	r3, r3, #3
 8018ef2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018ef6:	4313      	orrs	r3, r2
 8018ef8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8018efc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8018f00:	00cb      	lsls	r3, r1, #3
 8018f02:	064f      	lsls	r7, r1, #25
 8018f04:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018f08:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8018f0c:	ea43 0302 	orr.w	r3, r3, r2
 8018f10:	bf44      	itt	mi
 8018f12:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018f16:	b21b      	sxthmi	r3, r3
 8018f18:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018f1c:	1b5b      	subs	r3, r3, r5
 8018f1e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8018f22:	4632      	mov	r2, r6
 8018f24:	e6f9      	b.n	8018d1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018f26:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8018f2a:	4617      	mov	r7, r2
 8018f2c:	f102 0908 	add.w	r9, r2, #8
 8018f30:	4666      	mov	r6, ip
 8018f32:	6838      	ldr	r0, [r7, #0]
 8018f34:	3708      	adds	r7, #8
 8018f36:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018f3a:	46e0      	mov	r8, ip
 8018f3c:	454f      	cmp	r7, r9
 8018f3e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018f42:	46c4      	mov	ip, r8
 8018f44:	d1f5      	bne.n	8018f32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8018f46:	6838      	ldr	r0, [r7, #0]
 8018f48:	f8c8 0000 	str.w	r0, [r8]
 8018f4c:	88b9      	ldrh	r1, [r7, #4]
 8018f4e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018f52:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8018f56:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018f5a:	d009      	beq.n	8018f70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8018f5c:	7b51      	ldrb	r1, [r2, #13]
 8018f5e:	7992      	ldrb	r2, [r2, #6]
 8018f60:	0149      	lsls	r1, r1, #5
 8018f62:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018f66:	4311      	orrs	r1, r2
 8018f68:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018f6c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018f70:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018f74:	d00e      	beq.n	8018f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018f76:	eba3 030e 	sub.w	r3, r3, lr
 8018f7a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8018f7e:	b29b      	uxth	r3, r3
 8018f80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018f84:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8018f88:	10db      	asrs	r3, r3, #3
 8018f8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018f8e:	4313      	orrs	r3, r2
 8018f90:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8018f94:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8018f98:	00cb      	lsls	r3, r1, #3
 8018f9a:	0648      	lsls	r0, r1, #25
 8018f9c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018fa0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8018fa4:	ea43 0302 	orr.w	r3, r3, r2
 8018fa8:	bf44      	itt	mi
 8018faa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018fae:	b21b      	sxthmi	r3, r3
 8018fb0:	1b5d      	subs	r5, r3, r5
 8018fb2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018fb6:	e7b4      	b.n	8018f22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08018fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fbc:	461e      	mov	r6, r3
 8018fbe:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018fc0:	4604      	mov	r4, r0
 8018fc2:	4617      	mov	r7, r2
 8018fc4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018fc8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8018fcc:	f7ed fa2a 	bl	8006424 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018fd0:	4605      	mov	r5, r0
 8018fd2:	b918      	cbnz	r0, 8018fdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018fd4:	6030      	str	r0, [r6, #0]
 8018fd6:	4628      	mov	r0, r5
 8018fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fdc:	683b      	ldr	r3, [r7, #0]
 8018fde:	4601      	mov	r1, r0
 8018fe0:	4638      	mov	r0, r7
 8018fe2:	68db      	ldr	r3, [r3, #12]
 8018fe4:	4798      	blx	r3
 8018fe6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8018fea:	4602      	mov	r2, r0
 8018fec:	6030      	str	r0, [r6, #0]
 8018fee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018ff2:	d213      	bcs.n	801901c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8018ff4:	4643      	mov	r3, r8
 8018ff6:	4639      	mov	r1, r7
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	f7ff fe39 	bl	8018c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018ffe:	6030      	str	r0, [r6, #0]
 8019000:	6833      	ldr	r3, [r6, #0]
 8019002:	b143      	cbz	r3, 8019016 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019004:	7b5a      	ldrb	r2, [r3, #13]
 8019006:	7a9b      	ldrb	r3, [r3, #10]
 8019008:	0052      	lsls	r2, r2, #1
 801900a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801900e:	4313      	orrs	r3, r2
 8019010:	bf0c      	ite	eq
 8019012:	2301      	moveq	r3, #1
 8019014:	2300      	movne	r3, #0
 8019016:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801901a:	e7dc      	b.n	8018fd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801901c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8019020:	b29b      	uxth	r3, r3
 8019022:	2b7f      	cmp	r3, #127	@ 0x7f
 8019024:	d804      	bhi.n	8019030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019026:	4639      	mov	r1, r7
 8019028:	4620      	mov	r0, r4
 801902a:	f7ff fce7 	bl	80189fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801902e:	e7e6      	b.n	8018ffe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019030:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8019034:	2b00      	cmp	r3, #0
 8019036:	d0e3      	beq.n	8019000 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019038:	f640 1302 	movw	r3, #2306	@ 0x902
 801903c:	429d      	cmp	r5, r3
 801903e:	d1df      	bne.n	8019000 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019040:	4601      	mov	r1, r0
 8019042:	4620      	mov	r0, r4
 8019044:	f7ff fcab 	bl	801899e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019048:	e7d9      	b.n	8018ffe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801904a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801904a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801904e:	461e      	mov	r6, r3
 8019050:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019052:	4604      	mov	r4, r0
 8019054:	4617      	mov	r7, r2
 8019056:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801905a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801905e:	f7ed f9e1 	bl	8006424 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019062:	4605      	mov	r5, r0
 8019064:	b918      	cbnz	r0, 801906e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8019066:	6030      	str	r0, [r6, #0]
 8019068:	4628      	mov	r0, r5
 801906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	4601      	mov	r1, r0
 8019072:	4638      	mov	r0, r7
 8019074:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019078:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801907c:	47c8      	blx	r9
 801907e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8019082:	4602      	mov	r2, r0
 8019084:	6030      	str	r0, [r6, #0]
 8019086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801908a:	d213      	bcs.n	80190b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801908c:	4643      	mov	r3, r8
 801908e:	4639      	mov	r1, r7
 8019090:	4620      	mov	r0, r4
 8019092:	f7ff fded 	bl	8018c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019096:	6030      	str	r0, [r6, #0]
 8019098:	6833      	ldr	r3, [r6, #0]
 801909a:	b143      	cbz	r3, 80190ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801909c:	7b5a      	ldrb	r2, [r3, #13]
 801909e:	7a9b      	ldrb	r3, [r3, #10]
 80190a0:	0052      	lsls	r2, r2, #1
 80190a2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80190a6:	4313      	orrs	r3, r2
 80190a8:	bf0c      	ite	eq
 80190aa:	2301      	moveq	r3, #1
 80190ac:	2300      	movne	r3, #0
 80190ae:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80190b2:	e7d9      	b.n	8019068 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80190b4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80190b8:	b29b      	uxth	r3, r3
 80190ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80190bc:	d804      	bhi.n	80190c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80190be:	4639      	mov	r1, r7
 80190c0:	4620      	mov	r0, r4
 80190c2:	f7ff fc9b 	bl	80189fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80190c6:	e7e6      	b.n	8019096 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80190c8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d0e3      	beq.n	8019098 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80190d0:	f640 1302 	movw	r3, #2306	@ 0x902
 80190d4:	429d      	cmp	r5, r3
 80190d6:	d1df      	bne.n	8019098 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80190d8:	4601      	mov	r1, r0
 80190da:	4620      	mov	r0, r4
 80190dc:	f7ff fc5f 	bl	801899e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80190e0:	e7d9      	b.n	8019096 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080190e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80190e2:	b510      	push	{r4, lr}
 80190e4:	4604      	mov	r4, r0
 80190e6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80190ea:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80190ec:	b1e1      	cbz	r1, 8019128 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80190ee:	2b0a      	cmp	r3, #10
 80190f0:	d02d      	beq.n	801914e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80190f2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80190f4:	3901      	subs	r1, #1
 80190f6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80190fa:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80190fc:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8019100:	1c51      	adds	r1, r2, #1
 8019102:	b289      	uxth	r1, r1
 8019104:	2901      	cmp	r1, #1
 8019106:	bf8a      	itet	hi
 8019108:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801910c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801910e:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8019110:	1c5a      	adds	r2, r3, #1
 8019112:	8722      	strh	r2, [r4, #56]	@ 0x38
 8019114:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019116:	4413      	add	r3, r2
 8019118:	b29b      	uxth	r3, r3
 801911a:	2b09      	cmp	r3, #9
 801911c:	bf88      	it	hi
 801911e:	3b0a      	subhi	r3, #10
 8019120:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019124:	8458      	strh	r0, [r3, #34]	@ 0x22
 8019126:	e7de      	b.n	80190e6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019128:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801912a:	2b0a      	cmp	r3, #10
 801912c:	d00f      	beq.n	801914e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801912e:	4620      	mov	r0, r4
 8019130:	f7ff fbe3 	bl	80188fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019134:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8019136:	1c5a      	adds	r2, r3, #1
 8019138:	8722      	strh	r2, [r4, #56]	@ 0x38
 801913a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801913c:	4413      	add	r3, r2
 801913e:	b29b      	uxth	r3, r3
 8019140:	2b09      	cmp	r3, #9
 8019142:	bf88      	it	hi
 8019144:	3b0a      	subhi	r3, #10
 8019146:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801914a:	8458      	strh	r0, [r3, #34]	@ 0x22
 801914c:	e7ec      	b.n	8019128 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801914e:	bd10      	pop	{r4, pc}

08019150 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019150:	b538      	push	{r3, r4, r5, lr}
 8019152:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8019154:	4604      	mov	r4, r0
 8019156:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801915a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801915c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801915e:	3a01      	subs	r2, #1
 8019160:	8702      	strh	r2, [r0, #56]	@ 0x38
 8019162:	1c5a      	adds	r2, r3, #1
 8019164:	b292      	uxth	r2, r2
 8019166:	2a09      	cmp	r2, #9
 8019168:	bf8a      	itet	hi
 801916a:	3b09      	subhi	r3, #9
 801916c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801916e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8019170:	f7ff ffb7 	bl	80190e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019174:	8c23      	ldrh	r3, [r4, #32]
 8019176:	2b01      	cmp	r3, #1
 8019178:	bf9c      	itt	ls
 801917a:	3301      	addls	r3, #1
 801917c:	8423      	strhls	r3, [r4, #32]
 801917e:	8be3      	ldrh	r3, [r4, #30]
 8019180:	b90b      	cbnz	r3, 8019186 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019182:	2302      	movs	r3, #2
 8019184:	83e3      	strh	r3, [r4, #30]
 8019186:	8be3      	ldrh	r3, [r4, #30]
 8019188:	4628      	mov	r0, r5
 801918a:	3b01      	subs	r3, #1
 801918c:	b29b      	uxth	r3, r3
 801918e:	83e3      	strh	r3, [r4, #30]
 8019190:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019194:	8365      	strh	r5, [r4, #26]
 8019196:	bd38      	pop	{r3, r4, r5, pc}

08019198 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019198:	428a      	cmp	r2, r1
 801919a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801919e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80191a0:	d932      	bls.n	8019208 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80191a2:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80191a4:	1a54      	subs	r4, r2, r1
 80191a6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80191aa:	19ee      	adds	r6, r5, r7
 80191ac:	fa1f fe84 	uxth.w	lr, r4
 80191b0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80191b4:	3e01      	subs	r6, #1
 80191b6:	b2b4      	uxth	r4, r6
 80191b8:	eba4 090e 	sub.w	r9, r4, lr
 80191bc:	fa1f f989 	uxth.w	r9, r9
 80191c0:	2c09      	cmp	r4, #9
 80191c2:	4626      	mov	r6, r4
 80191c4:	bf88      	it	hi
 80191c6:	f1a4 060a 	subhi.w	r6, r4, #10
 80191ca:	f1bc 0f00 	cmp.w	ip, #0
 80191ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80191d2:	bf08      	it	eq
 80191d4:	f04f 0c02 	moveq.w	ip, #2
 80191d8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80191dc:	b2a4      	uxth	r4, r4
 80191de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80191e2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 80191e6:	454c      	cmp	r4, r9
 80191e8:	fa1f fc8c 	uxth.w	ip, ip
 80191ec:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80191f0:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80191f4:	d1e4      	bne.n	80191c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80191f6:	eba5 050e 	sub.w	r5, r5, lr
 80191fa:	eb0e 0408 	add.w	r4, lr, r8
 80191fe:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8019202:	8705      	strh	r5, [r0, #56]	@ 0x38
 8019204:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8019208:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801920a:	250a      	movs	r5, #10
 801920c:	1a64      	subs	r4, r4, r1
 801920e:	4439      	add	r1, r7
 8019210:	b289      	uxth	r1, r1
 8019212:	8704      	strh	r4, [r0, #56]	@ 0x38
 8019214:	2909      	cmp	r1, #9
 8019216:	bf88      	it	hi
 8019218:	390a      	subhi	r1, #10
 801921a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801921c:	b18a      	cbz	r2, 8019242 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801921e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8019220:	3a01      	subs	r2, #1
 8019222:	3101      	adds	r1, #1
 8019224:	b292      	uxth	r2, r2
 8019226:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801922a:	8701      	strh	r1, [r0, #56]	@ 0x38
 801922c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801922e:	b901      	cbnz	r1, 8019232 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8019230:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8019232:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8019234:	3901      	subs	r1, #1
 8019236:	b289      	uxth	r1, r1
 8019238:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801923a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801923e:	844c      	strh	r4, [r1, #34]	@ 0x22
 8019240:	e7ec      	b.n	801921c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8019242:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019246:	f7ff bf4c 	b.w	80190e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801924a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801924a:	b570      	push	{r4, r5, r6, lr}
 801924c:	2500      	movs	r5, #0
 801924e:	4295      	cmp	r5, r2
 8019250:	d011      	beq.n	8019276 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019252:	8bc4      	ldrh	r4, [r0, #30]
 8019254:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019258:	4414      	add	r4, r2
 801925a:	3c01      	subs	r4, #1
 801925c:	1b64      	subs	r4, r4, r5
 801925e:	b2a4      	uxth	r4, r4
 8019260:	2c01      	cmp	r4, #1
 8019262:	bf88      	it	hi
 8019264:	3c02      	subhi	r4, #2
 8019266:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801926a:	8b64      	ldrh	r4, [r4, #26]
 801926c:	42b4      	cmp	r4, r6
 801926e:	d117      	bne.n	80192a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019270:	3501      	adds	r5, #1
 8019272:	b2ad      	uxth	r5, r5
 8019274:	e7eb      	b.n	801924e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019276:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801927a:	2400      	movs	r4, #0
 801927c:	4413      	add	r3, r2
 801927e:	b2a2      	uxth	r2, r4
 8019280:	429a      	cmp	r2, r3
 8019282:	da0f      	bge.n	80192a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019284:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8019286:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801928a:	3401      	adds	r4, #1
 801928c:	4432      	add	r2, r6
 801928e:	b292      	uxth	r2, r2
 8019290:	2a09      	cmp	r2, #9
 8019292:	bf88      	it	hi
 8019294:	3a0a      	subhi	r2, #10
 8019296:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801929a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801929c:	42aa      	cmp	r2, r5
 801929e:	d0ee      	beq.n	801927e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80192a0:	2000      	movs	r0, #0
 80192a2:	bd70      	pop	{r4, r5, r6, pc}
 80192a4:	2001      	movs	r0, #1
 80192a6:	e7fc      	b.n	80192a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080192a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80192a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192ac:	4605      	mov	r5, r0
 80192ae:	4616      	mov	r6, r2
 80192b0:	1c8c      	adds	r4, r1, #2
 80192b2:	8809      	ldrh	r1, [r1, #0]
 80192b4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80192b8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80192bc:	42b3      	cmp	r3, r6
 80192be:	d124      	bne.n	801930a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80192c0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80192c4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80192c8:	f001 070f 	and.w	r7, r1, #15
 80192cc:	4652      	mov	r2, sl
 80192ce:	f8cd 8000 	str.w	r8, [sp]
 80192d2:	464b      	mov	r3, r9
 80192d4:	4621      	mov	r1, r4
 80192d6:	4628      	mov	r0, r5
 80192d8:	f7ff ffb7 	bl	801924a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80192dc:	4683      	mov	fp, r0
 80192de:	b168      	cbz	r0, 80192fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80192e0:	eb0a 0109 	add.w	r1, sl, r9
 80192e4:	463a      	mov	r2, r7
 80192e6:	4628      	mov	r0, r5
 80192e8:	4441      	add	r1, r8
 80192ea:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80192ee:	4649      	mov	r1, r9
 80192f0:	f7ff ff52 	bl	8019198 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80192f4:	4658      	mov	r0, fp
 80192f6:	b003      	add	sp, #12
 80192f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192fc:	eb07 010a 	add.w	r1, r7, sl
 8019300:	4449      	add	r1, r9
 8019302:	4441      	add	r1, r8
 8019304:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019308:	e7d2      	b.n	80192b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801930a:	f04f 0b00 	mov.w	fp, #0
 801930e:	e7f1      	b.n	80192f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019310 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019310:	b570      	push	{r4, r5, r6, lr}
 8019312:	8810      	ldrh	r0, [r2, #0]
 8019314:	4298      	cmp	r0, r3
 8019316:	d817      	bhi.n	8019348 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019318:	1e48      	subs	r0, r1, #1
 801931a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801931e:	4298      	cmp	r0, r3
 8019320:	d312      	bcc.n	8019348 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019322:	2400      	movs	r4, #0
 8019324:	428c      	cmp	r4, r1
 8019326:	d20f      	bcs.n	8019348 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019328:	1860      	adds	r0, r4, r1
 801932a:	1040      	asrs	r0, r0, #1
 801932c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019330:	0085      	lsls	r5, r0, #2
 8019332:	42b3      	cmp	r3, r6
 8019334:	d902      	bls.n	801933c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019336:	3001      	adds	r0, #1
 8019338:	b284      	uxth	r4, r0
 801933a:	e7f3      	b.n	8019324 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801933c:	d201      	bcs.n	8019342 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801933e:	b281      	uxth	r1, r0
 8019340:	e7f0      	b.n	8019324 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019342:	442a      	add	r2, r5
 8019344:	8850      	ldrh	r0, [r2, #2]
 8019346:	bd70      	pop	{r4, r5, r6, pc}
 8019348:	2000      	movs	r0, #0
 801934a:	e7fc      	b.n	8019346 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801934c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019350:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8019352:	4604      	mov	r4, r0
 8019354:	260b      	movs	r6, #11
 8019356:	886f      	ldrh	r7, [r5, #2]
 8019358:	087f      	lsrs	r7, r7, #1
 801935a:	3e01      	subs	r6, #1
 801935c:	d013      	beq.n	8019386 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801935e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8019360:	462a      	mov	r2, r5
 8019362:	4639      	mov	r1, r7
 8019364:	4620      	mov	r0, r4
 8019366:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801936a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801936e:	4643      	mov	r3, r8
 8019370:	f7ff ffce 	bl	8019310 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019374:	b138      	cbz	r0, 8019386 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019376:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801937a:	4642      	mov	r2, r8
 801937c:	4620      	mov	r0, r4
 801937e:	f7ff ff93 	bl	80192a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019382:	2800      	cmp	r0, #0
 8019384:	d1e9      	bne.n	801935a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801938c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801938c:	b570      	push	{r4, r5, r6, lr}
 801938e:	694a      	ldr	r2, [r1, #20]
 8019390:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8019392:	684b      	ldr	r3, [r1, #4]
 8019394:	1b54      	subs	r4, r2, r5
 8019396:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8019398:	f000 8106 	beq.w	80195a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801939c:	1b9b      	subs	r3, r3, r6
 801939e:	d003      	beq.n	80193a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80193a0:	4363      	muls	r3, r4
 80193a2:	2210      	movs	r2, #16
 80193a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80193a8:	680c      	ldr	r4, [r1, #0]
 80193aa:	698a      	ldr	r2, [r1, #24]
 80193ac:	1b65      	subs	r5, r4, r5
 80193ae:	f000 80fd 	beq.w	80195ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80193b2:	1b92      	subs	r2, r2, r6
 80193b4:	d003      	beq.n	80193be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80193b6:	436a      	muls	r2, r5
 80193b8:	2410      	movs	r4, #16
 80193ba:	fb92 f2f4 	sdiv	r2, r2, r4
 80193be:	1a9b      	subs	r3, r3, r2
 80193c0:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 80195e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80193c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80193c8:	460a      	mov	r2, r1
 80193ca:	ee07 3a90 	vmov	s15, r3
 80193ce:	f100 040c 	add.w	r4, r0, #12
 80193d2:	4603      	mov	r3, r0
 80193d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80193d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80193dc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80193e0:	eeb1 6a43 	vneg.f32	s12, s6
 80193e4:	edd2 7a02 	vldr	s15, [r2, #8]
 80193e8:	3214      	adds	r2, #20
 80193ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80193ee:	ece3 6a01 	vstmia	r3!, {s13}
 80193f2:	429c      	cmp	r4, r3
 80193f4:	ed52 7a02 	vldr	s15, [r2, #-8]
 80193f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80193fc:	edc3 7a02 	vstr	s15, [r3, #8]
 8019400:	ed52 7a01 	vldr	s15, [r2, #-4]
 8019404:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019408:	edc3 7a05 	vstr	s15, [r3, #20]
 801940c:	d1ea      	bne.n	80193e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801940e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019410:	698b      	ldr	r3, [r1, #24]
 8019412:	edd0 4a02 	vldr	s9, [r0, #8]
 8019416:	1a9b      	subs	r3, r3, r2
 8019418:	edd0 3a00 	vldr	s7, [r0]
 801941c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019420:	ee07 3a90 	vmov	s15, r3
 8019424:	684b      	ldr	r3, [r1, #4]
 8019426:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801942a:	ed90 5a05 	vldr	s10, [r0, #20]
 801942e:	1a9b      	subs	r3, r3, r2
 8019430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019434:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019438:	ed90 2a03 	vldr	s4, [r0, #12]
 801943c:	ee07 3a10 	vmov	s14, r3
 8019440:	edd0 5a04 	vldr	s11, [r0, #16]
 8019444:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019448:	ed90 1a07 	vldr	s2, [r0, #28]
 801944c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019450:	edd0 2a06 	vldr	s5, [r0, #24]
 8019454:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019458:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801945c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019460:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019464:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019468:	ee67 7a83 	vmul.f32	s15, s15, s6
 801946c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8019470:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019472:	694a      	ldr	r2, [r1, #20]
 8019474:	1b13      	subs	r3, r2, r4
 8019476:	ee07 3a10 	vmov	s14, r3
 801947a:	680b      	ldr	r3, [r1, #0]
 801947c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019480:	1b1b      	subs	r3, r3, r4
 8019482:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019486:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801948a:	ee07 3a10 	vmov	s14, r3
 801948e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019492:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019496:	eee6 4a87 	vfma.f32	s9, s13, s14
 801949a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801949e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 80194a2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80194a4:	698b      	ldr	r3, [r1, #24]
 80194a6:	1a9b      	subs	r3, r3, r2
 80194a8:	ee06 3a90 	vmov	s13, r3
 80194ac:	684b      	ldr	r3, [r1, #4]
 80194ae:	1a9b      	subs	r3, r3, r2
 80194b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80194b4:	ee07 3a10 	vmov	s14, r3
 80194b8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80194bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80194c0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80194c4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80194c8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80194cc:	ee66 6a83 	vmul.f32	s13, s13, s6
 80194d0:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80194d4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80194d6:	694a      	ldr	r2, [r1, #20]
 80194d8:	1b13      	subs	r3, r2, r4
 80194da:	ee07 3a10 	vmov	s14, r3
 80194de:	680b      	ldr	r3, [r1, #0]
 80194e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80194e4:	1b1b      	subs	r3, r3, r4
 80194e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80194ea:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80194ee:	ee07 3a10 	vmov	s14, r3
 80194f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80194f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80194fa:	eea5 5a87 	vfma.f32	s10, s11, s14
 80194fe:	edd0 5a08 	vldr	s11, [r0, #32]
 8019502:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019506:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801950a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801950e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8019512:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019514:	698b      	ldr	r3, [r1, #24]
 8019516:	1a9b      	subs	r3, r3, r2
 8019518:	ee07 3a10 	vmov	s14, r3
 801951c:	684b      	ldr	r3, [r1, #4]
 801951e:	1a9b      	subs	r3, r3, r2
 8019520:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019524:	ee01 3a90 	vmov	s3, r3
 8019528:	ee27 7a04 	vmul.f32	s14, s14, s8
 801952c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019530:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019534:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019538:	eea1 7a21 	vfma.f32	s14, s2, s3
 801953c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019540:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019544:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019546:	694a      	ldr	r2, [r1, #20]
 8019548:	1b13      	subs	r3, r2, r4
 801954a:	ee03 3a10 	vmov	s6, r3
 801954e:	680b      	ldr	r3, [r1, #0]
 8019550:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019554:	1b1b      	subs	r3, r3, r4
 8019556:	ee23 3a04 	vmul.f32	s6, s6, s8
 801955a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801955e:	ee03 3a10 	vmov	s6, r3
 8019562:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019566:	ee23 4a04 	vmul.f32	s8, s6, s8
 801956a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801956e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019572:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019576:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801957a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801957e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019586:	dd13      	ble.n	80195b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801958c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019590:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019592:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019596:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801959e:	dd15      	ble.n	80195cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80195a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80195a4:	6403      	str	r3, [r0, #64]	@ 0x40
 80195a6:	bd70      	pop	{r4, r5, r6, pc}
 80195a8:	4623      	mov	r3, r4
 80195aa:	e6fd      	b.n	80193a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80195ac:	462a      	mov	r2, r5
 80195ae:	e706      	b.n	80193be <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80195b0:	d502      	bpl.n	80195b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80195b2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80195b6:	e7e9      	b.n	801958c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80195b8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80195bc:	eea3 2a85 	vfma.f32	s4, s7, s10
 80195c0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80195c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c8:	dade      	bge.n	8019588 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80195ca:	e7f2      	b.n	80195b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80195cc:	d502      	bpl.n	80195d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80195ce:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80195d2:	e7e7      	b.n	80195a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80195d4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80195d8:	eee3 4a86 	vfma.f32	s9, s7, s12
 80195dc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80195e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e4:	dadc      	bge.n	80195a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80195e6:	e7f2      	b.n	80195ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80195e8:	3d800000 	.word	0x3d800000

080195ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80195ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195f0:	2714      	movs	r7, #20
 80195f2:	435f      	muls	r7, r3
 80195f4:	eb02 0c07 	add.w	ip, r2, r7
 80195f8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80195fc:	f115 0e0f 	adds.w	lr, r5, #15
 8019600:	f100 80a2 	bmi.w	8019748 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019604:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019608:	9c08      	ldr	r4, [sp, #32]
 801960a:	2614      	movs	r6, #20
 801960c:	f8c0 e014 	str.w	lr, [r0, #20]
 8019610:	4366      	muls	r6, r4
 8019612:	eb02 0806 	add.w	r8, r2, r6
 8019616:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801961a:	f115 040f 	adds.w	r4, r5, #15
 801961e:	f100 809f 	bmi.w	8019760 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019622:	1124      	asrs	r4, r4, #4
 8019624:	eba4 040e 	sub.w	r4, r4, lr
 8019628:	6184      	str	r4, [r0, #24]
 801962a:	2c00      	cmp	r4, #0
 801962c:	f000 808a 	beq.w	8019744 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019630:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019634:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019638:	5995      	ldr	r5, [r2, r6]
 801963a:	eba4 0809 	sub.w	r8, r4, r9
 801963e:	59d4      	ldr	r4, [r2, r7]
 8019640:	eba5 0a04 	sub.w	sl, r5, r4
 8019644:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019648:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801964c:	fb0e fe05 	mul.w	lr, lr, r5
 8019650:	fb0a ee19 	mls	lr, sl, r9, lr
 8019654:	fb08 e404 	mla	r4, r8, r4, lr
 8019658:	3c01      	subs	r4, #1
 801965a:	19a4      	adds	r4, r4, r6
 801965c:	f100 808c 	bmi.w	8019778 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019660:	fb94 fef6 	sdiv	lr, r4, r6
 8019664:	fb06 441e 	mls	r4, r6, lr, r4
 8019668:	f8c0 e000 	str.w	lr, [r0]
 801966c:	6104      	str	r4, [r0, #16]
 801966e:	2d00      	cmp	r5, #0
 8019670:	f2c0 8095 	blt.w	801979e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019674:	fb95 f4f6 	sdiv	r4, r5, r6
 8019678:	fb06 5514 	mls	r5, r6, r4, r5
 801967c:	6044      	str	r4, [r0, #4]
 801967e:	6085      	str	r5, [r0, #8]
 8019680:	60c6      	str	r6, [r0, #12]
 8019682:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019686:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801968a:	6945      	ldr	r5, [r0, #20]
 801968c:	59d2      	ldr	r2, [r2, r7]
 801968e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019692:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80197c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019696:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801969a:	ee07 4a10 	vmov	s14, r4
 801969e:	6804      	ldr	r4, [r0, #0]
 80196a0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80196a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80196a8:	ee07 2a90 	vmov	s15, r2
 80196ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80196b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80196b8:	edd3 6a00 	vldr	s13, [r3]
 80196bc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80196c0:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80196c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80196c8:	edc0 6a07 	vstr	s13, [r0, #28]
 80196cc:	edd0 6a01 	vldr	s13, [r0, #4]
 80196d0:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80196d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80196d8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80196dc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80196e0:	ed80 6a08 	vstr	s12, [r0, #32]
 80196e4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80196e6:	6242      	str	r2, [r0, #36]	@ 0x24
 80196e8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 80196ec:	ed93 6a03 	vldr	s12, [r3, #12]
 80196f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80196f4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80196f8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80196fc:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8019700:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019704:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8019708:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801970c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8019710:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019712:	6302      	str	r2, [r0, #48]	@ 0x30
 8019714:	ed93 6a06 	vldr	s12, [r3, #24]
 8019718:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801971c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019720:	eeb0 7a46 	vmov.f32	s14, s12
 8019724:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8019728:	eea6 7a27 	vfma.f32	s14, s12, s15
 801972c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019730:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8019734:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8019738:	eee6 7a87 	vfma.f32	s15, s13, s14
 801973c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8019740:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8019742:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019748:	2410      	movs	r4, #16
 801974a:	f1c5 0501 	rsb	r5, r5, #1
 801974e:	fb9e fef4 	sdiv	lr, lr, r4
 8019752:	f015 050f 	ands.w	r5, r5, #15
 8019756:	bf18      	it	ne
 8019758:	2501      	movne	r5, #1
 801975a:	ebae 0e05 	sub.w	lr, lr, r5
 801975e:	e753      	b.n	8019608 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019760:	f04f 0910 	mov.w	r9, #16
 8019764:	f1c5 0501 	rsb	r5, r5, #1
 8019768:	fb94 f4f9 	sdiv	r4, r4, r9
 801976c:	f015 050f 	ands.w	r5, r5, #15
 8019770:	bf18      	it	ne
 8019772:	2501      	movne	r5, #1
 8019774:	1b64      	subs	r4, r4, r5
 8019776:	e755      	b.n	8019624 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8019778:	4264      	negs	r4, r4
 801977a:	fb94 fef6 	sdiv	lr, r4, r6
 801977e:	f1ce 0800 	rsb	r8, lr, #0
 8019782:	fb06 441e 	mls	r4, r6, lr, r4
 8019786:	f8c0 8000 	str.w	r8, [r0]
 801978a:	6104      	str	r4, [r0, #16]
 801978c:	2c00      	cmp	r4, #0
 801978e:	f43f af6e 	beq.w	801966e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019792:	ea6f 0e0e 	mvn.w	lr, lr
 8019796:	1b34      	subs	r4, r6, r4
 8019798:	f8c0 e000 	str.w	lr, [r0]
 801979c:	e766      	b.n	801966c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801979e:	426d      	negs	r5, r5
 80197a0:	fb95 f4f6 	sdiv	r4, r5, r6
 80197a4:	f1c4 0e00 	rsb	lr, r4, #0
 80197a8:	fb06 5514 	mls	r5, r6, r4, r5
 80197ac:	f8c0 e004 	str.w	lr, [r0, #4]
 80197b0:	6085      	str	r5, [r0, #8]
 80197b2:	2d00      	cmp	r5, #0
 80197b4:	f43f af64 	beq.w	8019680 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80197b8:	43e4      	mvns	r4, r4
 80197ba:	1b75      	subs	r5, r6, r5
 80197bc:	6044      	str	r4, [r0, #4]
 80197be:	e75e      	b.n	801967e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80197c0:	3d800000 	.word	0x3d800000

080197c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80197c4:	4b01      	ldr	r3, [pc, #4]	@ (80197cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80197c6:	6018      	str	r0, [r3, #0]
 80197c8:	4770      	bx	lr
 80197ca:	bf00      	nop
 80197cc:	24026484 	.word	0x24026484

080197d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80197d0:	4b06      	ldr	r3, [pc, #24]	@ (80197ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80197d2:	881a      	ldrh	r2, [r3, #0]
 80197d4:	4282      	cmp	r2, r0
 80197d6:	d807      	bhi.n	80197e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80197d8:	4b05      	ldr	r3, [pc, #20]	@ (80197f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80197da:	881b      	ldrh	r3, [r3, #0]
 80197dc:	4413      	add	r3, r2
 80197de:	4298      	cmp	r0, r3
 80197e0:	bfac      	ite	ge
 80197e2:	2000      	movge	r0, #0
 80197e4:	2001      	movlt	r0, #1
 80197e6:	4770      	bx	lr
 80197e8:	2000      	movs	r0, #0
 80197ea:	4770      	bx	lr
 80197ec:	240264a4 	.word	0x240264a4
 80197f0:	240264a8 	.word	0x240264a8

080197f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80197f4:	b508      	push	{r3, lr}
 80197f6:	4601      	mov	r1, r0
 80197f8:	f7ff ffea 	bl	80197d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80197fc:	b118      	cbz	r0, 8019806 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80197fe:	4b02      	ldr	r3, [pc, #8]	@ (8019808 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019806:	bd08      	pop	{r3, pc}
 8019808:	24026488 	.word	0x24026488

0801980c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801980c:	b538      	push	{r3, r4, r5, lr}
 801980e:	4604      	mov	r4, r0
 8019810:	f7ff ffde 	bl	80197d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019814:	b1d8      	cbz	r0, 801984e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8019816:	4b0f      	ldr	r3, [pc, #60]	@ (8019854 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8019818:	881b      	ldrh	r3, [r3, #0]
 801981a:	1ae4      	subs	r4, r4, r3
 801981c:	230e      	movs	r3, #14
 801981e:	4363      	muls	r3, r4
 8019820:	4c0d      	ldr	r4, [pc, #52]	@ (8019858 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8019822:	6825      	ldr	r5, [r4, #0]
 8019824:	18ea      	adds	r2, r5, r3
 8019826:	7b12      	ldrb	r2, [r2, #12]
 8019828:	f012 0220 	ands.w	r2, r2, #32
 801982c:	d010      	beq.n	8019850 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801982e:	f9b1 2000 	ldrsh.w	r2, [r1]
 8019832:	52ea      	strh	r2, [r5, r3]
 8019834:	6822      	ldr	r2, [r4, #0]
 8019836:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801983a:	441a      	add	r2, r3
 801983c:	8055      	strh	r5, [r2, #2]
 801983e:	6822      	ldr	r2, [r4, #0]
 8019840:	4413      	add	r3, r2
 8019842:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8019846:	809a      	strh	r2, [r3, #4]
 8019848:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801984c:	80da      	strh	r2, [r3, #6]
 801984e:	bd38      	pop	{r3, r4, r5, pc}
 8019850:	4610      	mov	r0, r2
 8019852:	e7fc      	b.n	801984e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8019854:	240264a4 	.word	0x240264a4
 8019858:	2402648c 	.word	0x2402648c

0801985c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801985c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019860:	4606      	mov	r6, r0
 8019862:	460c      	mov	r4, r1
 8019864:	f7ff ffb4 	bl	80197d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019868:	b918      	cbnz	r0, 8019872 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801986a:	2000      	movs	r0, #0
 801986c:	b002      	add	sp, #8
 801986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019872:	4608      	mov	r0, r1
 8019874:	f7f6 fff9 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019878:	2800      	cmp	r0, #0
 801987a:	d1f6      	bne.n	801986a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801987c:	4b3f      	ldr	r3, [pc, #252]	@ (801997c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801987e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8019980 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8019882:	881d      	ldrh	r5, [r3, #0]
 8019884:	f8d9 a000 	ldr.w	sl, [r9]
 8019888:	46c8      	mov	r8, r9
 801988a:	1b73      	subs	r3, r6, r5
 801988c:	250e      	movs	r5, #14
 801988e:	435d      	muls	r5, r3
 8019890:	eb0a 0705 	add.w	r7, sl, r5
 8019894:	7b3b      	ldrb	r3, [r7, #12]
 8019896:	f013 0f20 	tst.w	r3, #32
 801989a:	d0e6      	beq.n	801986a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801989c:	4621      	mov	r1, r4
 801989e:	4638      	mov	r0, r7
 80198a0:	f7fc fe64 	bl	801656c <_ZNK8touchgfx4Rect8includesERKS0_>
 80198a4:	2800      	cmp	r0, #0
 80198a6:	d1e1      	bne.n	801986c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80198a8:	4639      	mov	r1, r7
 80198aa:	4620      	mov	r0, r4
 80198ac:	f7fc fe5e 	bl	801656c <_ZNK8touchgfx4Rect8includesERKS0_>
 80198b0:	b108      	cbz	r0, 80198b6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 80198b2:	4621      	mov	r1, r4
 80198b4:	e020      	b.n	80198f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80198b6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80198ba:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80198be:	429a      	cmp	r2, r3
 80198c0:	d11e      	bne.n	8019900 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80198c2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80198c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80198ca:	429a      	cmp	r2, r3
 80198cc:	d118      	bne.n	8019900 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80198ce:	6820      	ldr	r0, [r4, #0]
 80198d0:	466b      	mov	r3, sp
 80198d2:	6861      	ldr	r1, [r4, #4]
 80198d4:	c303      	stmia	r3!, {r0, r1}
 80198d6:	4639      	mov	r1, r7
 80198d8:	4668      	mov	r0, sp
 80198da:	f7fc fe6d 	bl	80165b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80198de:	f8d9 3000 	ldr.w	r3, [r9]
 80198e2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80198e6:	442b      	add	r3, r5
 80198e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80198ec:	4413      	add	r3, r2
 80198ee:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80198f2:	4293      	cmp	r3, r2
 80198f4:	dc04      	bgt.n	8019900 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80198f6:	4669      	mov	r1, sp
 80198f8:	4630      	mov	r0, r6
 80198fa:	f7ff ff87 	bl	801980c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80198fe:	e7b5      	b.n	801986c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019900:	f8d8 3000 	ldr.w	r3, [r8]
 8019904:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019908:	442b      	add	r3, r5
 801990a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801990e:	4291      	cmp	r1, r2
 8019910:	d119      	bne.n	8019946 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8019912:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019916:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801991a:	4291      	cmp	r1, r2
 801991c:	d113      	bne.n	8019946 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801991e:	6820      	ldr	r0, [r4, #0]
 8019920:	466a      	mov	r2, sp
 8019922:	6861      	ldr	r1, [r4, #4]
 8019924:	c203      	stmia	r2!, {r0, r1}
 8019926:	4619      	mov	r1, r3
 8019928:	4668      	mov	r0, sp
 801992a:	f7fc fe45 	bl	80165b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801992e:	f8d8 3000 	ldr.w	r3, [r8]
 8019932:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019936:	442b      	add	r3, r5
 8019938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801993c:	4413      	add	r3, r2
 801993e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019942:	4293      	cmp	r3, r2
 8019944:	ddd7      	ble.n	80198f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8019946:	4620      	mov	r0, r4
 8019948:	f7f6 ff8f 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 801994c:	b990      	cbnz	r0, 8019974 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801994e:	88a7      	ldrh	r7, [r4, #4]
 8019950:	88e3      	ldrh	r3, [r4, #6]
 8019952:	fb17 f703 	smulbb	r7, r7, r3
 8019956:	f8d8 3000 	ldr.w	r3, [r8]
 801995a:	441d      	add	r5, r3
 801995c:	4628      	mov	r0, r5
 801995e:	f7f6 ff84 	bl	801086a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019962:	b948      	cbnz	r0, 8019978 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8019964:	88ab      	ldrh	r3, [r5, #4]
 8019966:	88ea      	ldrh	r2, [r5, #6]
 8019968:	fb13 f302 	smulbb	r3, r3, r2
 801996c:	42bb      	cmp	r3, r7
 801996e:	f6bf af7c 	bge.w	801986a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019972:	e79e      	b.n	80198b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8019974:	2700      	movs	r7, #0
 8019976:	e7ee      	b.n	8019956 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8019978:	2300      	movs	r3, #0
 801997a:	e7f7      	b.n	801996c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801997c:	240264a4 	.word	0x240264a4
 8019980:	2402648c 	.word	0x2402648c

08019984 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019986:	4c24      	ldr	r4, [pc, #144]	@ (8019a18 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019988:	6823      	ldr	r3, [r4, #0]
 801998a:	2b00      	cmp	r3, #0
 801998c:	d042      	beq.n	8019a14 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801998e:	4a23      	ldr	r2, [pc, #140]	@ (8019a1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019990:	4d23      	ldr	r5, [pc, #140]	@ (8019a20 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019992:	8811      	ldrh	r1, [r2, #0]
 8019994:	f8b5 c000 	ldrh.w	ip, [r5]
 8019998:	4822      	ldr	r0, [pc, #136]	@ (8019a24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801999a:	4461      	add	r1, ip
 801999c:	1c4a      	adds	r2, r1, #1
 801999e:	008f      	lsls	r7, r1, #2
 80199a0:	f022 0201 	bic.w	r2, r2, #1
 80199a4:	19de      	adds	r6, r3, r7
 80199a6:	0412      	lsls	r2, r2, #16
 80199a8:	6006      	str	r6, [r0, #0]
 80199aa:	4e1f      	ldr	r6, [pc, #124]	@ (8019a28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80199ac:	0c12      	lsrs	r2, r2, #16
 80199ae:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80199b2:	19da      	adds	r2, r3, r7
 80199b4:	6032      	str	r2, [r6, #0]
 80199b6:	220e      	movs	r2, #14
 80199b8:	fb02 f20c 	mul.w	r2, r2, ip
 80199bc:	3203      	adds	r2, #3
 80199be:	f022 0203 	bic.w	r2, r2, #3
 80199c2:	443a      	add	r2, r7
 80199c4:	4f19      	ldr	r7, [pc, #100]	@ (8019a2c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80199c6:	4413      	add	r3, r2
 80199c8:	603b      	str	r3, [r7, #0]
 80199ca:	2300      	movs	r3, #0
 80199cc:	4f18      	ldr	r7, [pc, #96]	@ (8019a30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80199ce:	469c      	mov	ip, r3
 80199d0:	803b      	strh	r3, [r7, #0]
 80199d2:	4f18      	ldr	r7, [pc, #96]	@ (8019a34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80199d4:	683f      	ldr	r7, [r7, #0]
 80199d6:	1aba      	subs	r2, r7, r2
 80199d8:	4f17      	ldr	r7, [pc, #92]	@ (8019a38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80199da:	603a      	str	r2, [r7, #0]
 80199dc:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80199e0:	4a16      	ldr	r2, [pc, #88]	@ (8019a3c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80199e2:	8013      	strh	r3, [r2, #0]
 80199e4:	428b      	cmp	r3, r1
 80199e6:	d10d      	bne.n	8019a04 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80199e8:	882d      	ldrh	r5, [r5, #0]
 80199ea:	2300      	movs	r3, #0
 80199ec:	6830      	ldr	r0, [r6, #0]
 80199ee:	240e      	movs	r4, #14
 80199f0:	429d      	cmp	r5, r3
 80199f2:	d90f      	bls.n	8019a14 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80199f4:	fb04 0203 	mla	r2, r4, r3, r0
 80199f8:	3301      	adds	r3, #1
 80199fa:	7b11      	ldrb	r1, [r2, #12]
 80199fc:	f36f 1145 	bfc	r1, #5, #1
 8019a00:	7311      	strb	r1, [r2, #12]
 8019a02:	e7f5      	b.n	80199f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019a04:	6822      	ldr	r2, [r4, #0]
 8019a06:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8019a0a:	6802      	ldr	r2, [r0, #0]
 8019a0c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8019a10:	3301      	adds	r3, #1
 8019a12:	e7e7      	b.n	80199e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a16:	bf00      	nop
 8019a18:	24026488 	.word	0x24026488
 8019a1c:	240264a4 	.word	0x240264a4
 8019a20:	240264a8 	.word	0x240264a8
 8019a24:	2402649c 	.word	0x2402649c
 8019a28:	2402648c 	.word	0x2402648c
 8019a2c:	24026494 	.word	0x24026494
 8019a30:	240264a6 	.word	0x240264a6
 8019a34:	24026490 	.word	0x24026490
 8019a38:	240264a0 	.word	0x240264a0
 8019a3c:	24026498 	.word	0x24026498

08019a40 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019a40:	4b06      	ldr	r3, [pc, #24]	@ (8019a5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	b943      	cbnz	r3, 8019a58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019a46:	b139      	cbz	r1, 8019a58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019a48:	4b05      	ldr	r3, [pc, #20]	@ (8019a60 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019a4a:	801a      	strh	r2, [r3, #0]
 8019a4c:	4b05      	ldr	r3, [pc, #20]	@ (8019a64 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019a4e:	6019      	str	r1, [r3, #0]
 8019a50:	4b05      	ldr	r3, [pc, #20]	@ (8019a68 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019a52:	6018      	str	r0, [r3, #0]
 8019a54:	f7ff bf96 	b.w	8019984 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019a58:	4770      	bx	lr
 8019a5a:	bf00      	nop
 8019a5c:	24026494 	.word	0x24026494
 8019a60:	240264a8 	.word	0x240264a8
 8019a64:	24026490 	.word	0x24026490
 8019a68:	24026488 	.word	0x24026488

08019a6c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019a6c:	b470      	push	{r4, r5, r6}
 8019a6e:	4c07      	ldr	r4, [pc, #28]	@ (8019a8c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019a70:	4605      	mov	r5, r0
 8019a72:	4610      	mov	r0, r2
 8019a74:	9a03      	ldr	r2, [sp, #12]
 8019a76:	6826      	ldr	r6, [r4, #0]
 8019a78:	b936      	cbnz	r6, 8019a88 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019a7a:	6025      	str	r5, [r4, #0]
 8019a7c:	4c04      	ldr	r4, [pc, #16]	@ (8019a90 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019a7e:	8021      	strh	r1, [r4, #0]
 8019a80:	4619      	mov	r1, r3
 8019a82:	bc70      	pop	{r4, r5, r6}
 8019a84:	f7ff bfdc 	b.w	8019a40 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019a88:	bc70      	pop	{r4, r5, r6}
 8019a8a:	4770      	bx	lr
 8019a8c:	240264ac 	.word	0x240264ac
 8019a90:	240264a4 	.word	0x240264a4

08019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019a94:	4a12      	ldr	r2, [pc, #72]	@ (8019ae0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019a96:	8803      	ldrh	r3, [r0, #0]
 8019a98:	8812      	ldrh	r2, [r2, #0]
 8019a9a:	4293      	cmp	r3, r2
 8019a9c:	d207      	bcs.n	8019aae <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019a9e:	4a11      	ldr	r2, [pc, #68]	@ (8019ae4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019aa0:	2114      	movs	r1, #20
 8019aa2:	6812      	ldr	r2, [r2, #0]
 8019aa4:	fb01 2303 	mla	r3, r1, r3, r2
 8019aa8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019aac:	4770      	bx	lr
 8019aae:	490e      	ldr	r1, [pc, #56]	@ (8019ae8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019ab0:	8809      	ldrh	r1, [r1, #0]
 8019ab2:	4411      	add	r1, r2
 8019ab4:	428b      	cmp	r3, r1
 8019ab6:	da04      	bge.n	8019ac2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019ab8:	1a9b      	subs	r3, r3, r2
 8019aba:	4a0c      	ldr	r2, [pc, #48]	@ (8019aec <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019abc:	210e      	movs	r1, #14
 8019abe:	6812      	ldr	r2, [r2, #0]
 8019ac0:	e7f0      	b.n	8019aa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019ac2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019ac6:	4293      	cmp	r3, r2
 8019ac8:	d108      	bne.n	8019adc <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8019aca:	4b09      	ldr	r3, [pc, #36]	@ (8019af0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	b91b      	cbnz	r3, 8019ad8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8019ad0:	4b08      	ldr	r3, [pc, #32]	@ (8019af4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019ad2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019ad6:	4770      	bx	lr
 8019ad8:	4b07      	ldr	r3, [pc, #28]	@ (8019af8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019ada:	e7fa      	b.n	8019ad2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8019adc:	2000      	movs	r0, #0
 8019ade:	4770      	bx	lr
 8019ae0:	240264a4 	.word	0x240264a4
 8019ae4:	240264ac 	.word	0x240264ac
 8019ae8:	240264a8 	.word	0x240264a8
 8019aec:	2402648c 	.word	0x2402648c
 8019af0:	24026414 	.word	0x24026414
 8019af4:	24026416 	.word	0x24026416
 8019af8:	24026418 	.word	0x24026418

08019afc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019afc:	4a12      	ldr	r2, [pc, #72]	@ (8019b48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8019afe:	8803      	ldrh	r3, [r0, #0]
 8019b00:	8812      	ldrh	r2, [r2, #0]
 8019b02:	4293      	cmp	r3, r2
 8019b04:	d207      	bcs.n	8019b16 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8019b06:	4a11      	ldr	r2, [pc, #68]	@ (8019b4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019b08:	2114      	movs	r1, #20
 8019b0a:	6812      	ldr	r2, [r2, #0]
 8019b0c:	fb01 2303 	mla	r3, r1, r3, r2
 8019b10:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019b14:	4770      	bx	lr
 8019b16:	490e      	ldr	r1, [pc, #56]	@ (8019b50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019b18:	8809      	ldrh	r1, [r1, #0]
 8019b1a:	4411      	add	r1, r2
 8019b1c:	428b      	cmp	r3, r1
 8019b1e:	da04      	bge.n	8019b2a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8019b20:	1a9b      	subs	r3, r3, r2
 8019b22:	4a0c      	ldr	r2, [pc, #48]	@ (8019b54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019b24:	210e      	movs	r1, #14
 8019b26:	6812      	ldr	r2, [r2, #0]
 8019b28:	e7f0      	b.n	8019b0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019b2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019b2e:	4293      	cmp	r3, r2
 8019b30:	d108      	bne.n	8019b44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8019b32:	4b09      	ldr	r3, [pc, #36]	@ (8019b58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019b34:	781b      	ldrb	r3, [r3, #0]
 8019b36:	b91b      	cbnz	r3, 8019b40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8019b38:	4b08      	ldr	r3, [pc, #32]	@ (8019b5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019b3a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019b3e:	4770      	bx	lr
 8019b40:	4b07      	ldr	r3, [pc, #28]	@ (8019b60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019b42:	e7fa      	b.n	8019b3a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019b44:	2000      	movs	r0, #0
 8019b46:	4770      	bx	lr
 8019b48:	240264a4 	.word	0x240264a4
 8019b4c:	240264ac 	.word	0x240264ac
 8019b50:	240264a8 	.word	0x240264a8
 8019b54:	2402648c 	.word	0x2402648c
 8019b58:	24026414 	.word	0x24026414
 8019b5c:	24026418 	.word	0x24026418
 8019b60:	24026416 	.word	0x24026416

08019b64 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019b64:	4a22      	ldr	r2, [pc, #136]	@ (8019bf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8019b66:	b530      	push	{r4, r5, lr}
 8019b68:	880b      	ldrh	r3, [r1, #0]
 8019b6a:	8812      	ldrh	r2, [r2, #0]
 8019b6c:	4293      	cmp	r3, r2
 8019b6e:	d213      	bcs.n	8019b98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8019b70:	4a20      	ldr	r2, [pc, #128]	@ (8019bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019b72:	2114      	movs	r1, #20
 8019b74:	6812      	ldr	r2, [r2, #0]
 8019b76:	fb01 2303 	mla	r3, r1, r3, r2
 8019b7a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019b7e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019b82:	8a1a      	ldrh	r2, [r3, #16]
 8019b84:	8a5b      	ldrh	r3, [r3, #18]
 8019b86:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019b8a:	8004      	strh	r4, [r0, #0]
 8019b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019b90:	8041      	strh	r1, [r0, #2]
 8019b92:	8082      	strh	r2, [r0, #4]
 8019b94:	80c3      	strh	r3, [r0, #6]
 8019b96:	e024      	b.n	8019be2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8019b98:	4917      	ldr	r1, [pc, #92]	@ (8019bf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019b9a:	8809      	ldrh	r1, [r1, #0]
 8019b9c:	4411      	add	r1, r2
 8019b9e:	428b      	cmp	r3, r1
 8019ba0:	da10      	bge.n	8019bc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8019ba2:	1a9b      	subs	r3, r3, r2
 8019ba4:	220e      	movs	r2, #14
 8019ba6:	4353      	muls	r3, r2
 8019ba8:	4a14      	ldr	r2, [pc, #80]	@ (8019bfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8019baa:	6811      	ldr	r1, [r2, #0]
 8019bac:	18ca      	adds	r2, r1, r3
 8019bae:	5ecd      	ldrsh	r5, [r1, r3]
 8019bb0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8019bb4:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8019bb8:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8019bbc:	8005      	strh	r5, [r0, #0]
 8019bbe:	8044      	strh	r4, [r0, #2]
 8019bc0:	8081      	strh	r1, [r0, #4]
 8019bc2:	e7e7      	b.n	8019b94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8019bc4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	d10b      	bne.n	8019be4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8019bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8019c00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8019bce:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8019c04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019bd4:	8081      	strh	r1, [r0, #4]
 8019bd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019bda:	2300      	movs	r3, #0
 8019bdc:	80c2      	strh	r2, [r0, #6]
 8019bde:	8003      	strh	r3, [r0, #0]
 8019be0:	8043      	strh	r3, [r0, #2]
 8019be2:	bd30      	pop	{r4, r5, pc}
 8019be4:	2300      	movs	r3, #0
 8019be6:	8003      	strh	r3, [r0, #0]
 8019be8:	8043      	strh	r3, [r0, #2]
 8019bea:	8083      	strh	r3, [r0, #4]
 8019bec:	e7d2      	b.n	8019b94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8019bee:	bf00      	nop
 8019bf0:	240264a4 	.word	0x240264a4
 8019bf4:	240264ac 	.word	0x240264ac
 8019bf8:	240264a8 	.word	0x240264a8
 8019bfc:	2402648c 	.word	0x2402648c
 8019c00:	24026410 	.word	0x24026410
 8019c04:	24026412 	.word	0x24026412

08019c08 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019c08:	4a12      	ldr	r2, [pc, #72]	@ (8019c54 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019c0a:	8803      	ldrh	r3, [r0, #0]
 8019c0c:	8811      	ldrh	r1, [r2, #0]
 8019c0e:	428b      	cmp	r3, r1
 8019c10:	d20b      	bcs.n	8019c2a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8019c12:	4a11      	ldr	r2, [pc, #68]	@ (8019c58 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019c14:	6812      	ldr	r2, [r2, #0]
 8019c16:	b112      	cbz	r2, 8019c1e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019c18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019c1c:	b9c0      	cbnz	r0, 8019c50 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8019c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8019c5c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019c20:	6811      	ldr	r1, [r2, #0]
 8019c22:	2214      	movs	r2, #20
 8019c24:	4353      	muls	r3, r2
 8019c26:	58c8      	ldr	r0, [r1, r3]
 8019c28:	4770      	bx	lr
 8019c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8019c60 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019c2c:	8812      	ldrh	r2, [r2, #0]
 8019c2e:	440a      	add	r2, r1
 8019c30:	4293      	cmp	r3, r2
 8019c32:	da04      	bge.n	8019c3e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8019c34:	4a08      	ldr	r2, [pc, #32]	@ (8019c58 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019c36:	6812      	ldr	r2, [r2, #0]
 8019c38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019c3c:	4770      	bx	lr
 8019c3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019c42:	4293      	cmp	r3, r2
 8019c44:	d103      	bne.n	8019c4e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019c46:	4b07      	ldr	r3, [pc, #28]	@ (8019c64 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8019c4c:	4770      	bx	lr
 8019c4e:	2000      	movs	r0, #0
 8019c50:	4770      	bx	lr
 8019c52:	bf00      	nop
 8019c54:	240264a4 	.word	0x240264a4
 8019c58:	24026488 	.word	0x24026488
 8019c5c:	240264ac 	.word	0x240264ac
 8019c60:	240264a8 	.word	0x240264a8
 8019c64:	2402641c 	.word	0x2402641c

08019c68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019c68:	4b24      	ldr	r3, [pc, #144]	@ (8019cfc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019c6a:	8802      	ldrh	r2, [r0, #0]
 8019c6c:	8818      	ldrh	r0, [r3, #0]
 8019c6e:	4282      	cmp	r2, r0
 8019c70:	d221      	bcs.n	8019cb6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8019c72:	4b23      	ldr	r3, [pc, #140]	@ (8019d00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019c74:	6819      	ldr	r1, [r3, #0]
 8019c76:	2314      	movs	r3, #20
 8019c78:	fb03 1302 	mla	r3, r3, r2, r1
 8019c7c:	6858      	ldr	r0, [r3, #4]
 8019c7e:	2800      	cmp	r0, #0
 8019c80:	d03a      	beq.n	8019cf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019c82:	4920      	ldr	r1, [pc, #128]	@ (8019d04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019c84:	6809      	ldr	r1, [r1, #0]
 8019c86:	2900      	cmp	r1, #0
 8019c88:	d036      	beq.n	8019cf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019c8e:	2900      	cmp	r1, #0
 8019c90:	d032      	beq.n	8019cf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019c92:	891a      	ldrh	r2, [r3, #8]
 8019c94:	8958      	ldrh	r0, [r3, #10]
 8019c96:	4350      	muls	r0, r2
 8019c98:	7c5a      	ldrb	r2, [r3, #17]
 8019c9a:	7cdb      	ldrb	r3, [r3, #19]
 8019c9c:	0952      	lsrs	r2, r2, #5
 8019c9e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019ca2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019ca6:	2b0b      	cmp	r3, #11
 8019ca8:	bf18      	it	ne
 8019caa:	0040      	lslne	r0, r0, #1
 8019cac:	3003      	adds	r0, #3
 8019cae:	f020 0003 	bic.w	r0, r0, #3
 8019cb2:	4408      	add	r0, r1
 8019cb4:	4770      	bx	lr
 8019cb6:	4b14      	ldr	r3, [pc, #80]	@ (8019d08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019cb8:	881b      	ldrh	r3, [r3, #0]
 8019cba:	4403      	add	r3, r0
 8019cbc:	429a      	cmp	r2, r3
 8019cbe:	da1a      	bge.n	8019cf6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019cc0:	4b12      	ldr	r3, [pc, #72]	@ (8019d0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019cc2:	1a10      	subs	r0, r2, r0
 8019cc4:	210e      	movs	r1, #14
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	fb01 3000 	mla	r0, r1, r0, r3
 8019ccc:	7b03      	ldrb	r3, [r0, #12]
 8019cce:	f003 031f 	and.w	r3, r3, #31
 8019cd2:	2b0b      	cmp	r3, #11
 8019cd4:	d10b      	bne.n	8019cee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019cd6:	8903      	ldrh	r3, [r0, #8]
 8019cd8:	8940      	ldrh	r0, [r0, #10]
 8019cda:	4358      	muls	r0, r3
 8019cdc:	4b09      	ldr	r3, [pc, #36]	@ (8019d04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019cde:	3003      	adds	r0, #3
 8019ce0:	6819      	ldr	r1, [r3, #0]
 8019ce2:	f020 0303 	bic.w	r3, r0, #3
 8019ce6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019cea:	4418      	add	r0, r3
 8019cec:	4770      	bx	lr
 8019cee:	2b0d      	cmp	r3, #13
 8019cf0:	d101      	bne.n	8019cf6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019cf2:	300d      	adds	r0, #13
 8019cf4:	4770      	bx	lr
 8019cf6:	2000      	movs	r0, #0
 8019cf8:	4770      	bx	lr
 8019cfa:	bf00      	nop
 8019cfc:	240264a4 	.word	0x240264a4
 8019d00:	240264ac 	.word	0x240264ac
 8019d04:	24026488 	.word	0x24026488
 8019d08:	240264a8 	.word	0x240264a8
 8019d0c:	2402648c 	.word	0x2402648c

08019d10 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019d10:	4b1f      	ldr	r3, [pc, #124]	@ (8019d90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8019d12:	b510      	push	{r4, lr}
 8019d14:	8802      	ldrh	r2, [r0, #0]
 8019d16:	881b      	ldrh	r3, [r3, #0]
 8019d18:	429a      	cmp	r2, r3
 8019d1a:	d21a      	bcs.n	8019d52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8019d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8019d94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8019d1e:	2114      	movs	r1, #20
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	fb01 3102 	mla	r1, r1, r2, r3
 8019d26:	7c4b      	ldrb	r3, [r1, #17]
 8019d28:	0958      	lsrs	r0, r3, #5
 8019d2a:	7ccb      	ldrb	r3, [r1, #19]
 8019d2c:	491a      	ldr	r1, [pc, #104]	@ (8019d98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8019d2e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019d32:	6809      	ldr	r1, [r1, #0]
 8019d34:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8019d38:	b2d8      	uxtb	r0, r3
 8019d3a:	b149      	cbz	r1, 8019d50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8019d3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8019d40:	b132      	cbz	r2, 8019d50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8019d42:	2b0e      	cmp	r3, #14
 8019d44:	d021      	beq.n	8019d8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8019d46:	280f      	cmp	r0, #15
 8019d48:	d01d      	beq.n	8019d86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8019d4a:	2810      	cmp	r0, #16
 8019d4c:	bf08      	it	eq
 8019d4e:	2002      	moveq	r0, #2
 8019d50:	bd10      	pop	{r4, pc}
 8019d52:	4912      	ldr	r1, [pc, #72]	@ (8019d9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8019d54:	8809      	ldrh	r1, [r1, #0]
 8019d56:	4419      	add	r1, r3
 8019d58:	428a      	cmp	r2, r1
 8019d5a:	da09      	bge.n	8019d70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8019d5c:	1ad3      	subs	r3, r2, r3
 8019d5e:	4a10      	ldr	r2, [pc, #64]	@ (8019da0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8019d60:	210e      	movs	r1, #14
 8019d62:	6812      	ldr	r2, [r2, #0]
 8019d64:	fb01 2303 	mla	r3, r1, r3, r2
 8019d68:	7b18      	ldrb	r0, [r3, #12]
 8019d6a:	f000 001f 	and.w	r0, r0, #31
 8019d6e:	e7ef      	b.n	8019d50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8019d70:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8019d74:	429a      	cmp	r2, r3
 8019d76:	d108      	bne.n	8019d8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8019d78:	f7ea faae 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8019d7c:	6803      	ldr	r3, [r0, #0]
 8019d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d84:	4718      	bx	r3
 8019d86:	2001      	movs	r0, #1
 8019d88:	e7e2      	b.n	8019d50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8019d8a:	2000      	movs	r0, #0
 8019d8c:	e7e0      	b.n	8019d50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8019d8e:	bf00      	nop
 8019d90:	240264a4 	.word	0x240264a4
 8019d94:	240264ac 	.word	0x240264ac
 8019d98:	24026488 	.word	0x24026488
 8019d9c:	240264a8 	.word	0x240264a8
 8019da0:	2402648c 	.word	0x2402648c

08019da4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019da4:	2018      	movs	r0, #24
 8019da6:	4770      	bx	lr

08019da8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019da8:	2001      	movs	r0, #1
 8019daa:	4770      	bx	lr

08019dac <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8019dac:	4b02      	ldr	r3, [pc, #8]	@ (8019db8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8019dae:	8818      	ldrh	r0, [r3, #0]
 8019db0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019db4:	b280      	uxth	r0, r0
 8019db6:	4770      	bx	lr
 8019db8:	24026416 	.word	0x24026416

08019dbc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019dbc:	2bff      	cmp	r3, #255	@ 0xff
 8019dbe:	d04c      	beq.n	8019e5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019dc0:	2a2c      	cmp	r2, #44	@ 0x2c
 8019dc2:	d030      	beq.n	8019e26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8019dc4:	d80f      	bhi.n	8019de6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8019dc6:	2a08      	cmp	r2, #8
 8019dc8:	d043      	beq.n	8019e52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019dca:	d805      	bhi.n	8019dd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8019dcc:	2a04      	cmp	r2, #4
 8019dce:	d03e      	beq.n	8019e4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019dd0:	2a05      	cmp	r2, #5
 8019dd2:	d03a      	beq.n	8019e4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	e024      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019dd8:	2a0a      	cmp	r2, #10
 8019dda:	d03a      	beq.n	8019e52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8019ddc:	d301      	bcc.n	8019de2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8019dde:	2a0b      	cmp	r2, #11
 8019de0:	d1f8      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019de2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8019de4:	e01d      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019de6:	2a30      	cmp	r2, #48	@ 0x30
 8019de8:	d035      	beq.n	8019e56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019dea:	d80a      	bhi.n	8019e02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 8019dec:	2a2e      	cmp	r2, #46	@ 0x2e
 8019dee:	684b      	ldr	r3, [r1, #4]
 8019df0:	d023      	beq.n	8019e3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019df2:	d90d      	bls.n	8019e10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8019df4:	781a      	ldrb	r2, [r3, #0]
 8019df6:	785b      	ldrb	r3, [r3, #1]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d1eb      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019dfc:	b98a      	cbnz	r2, 8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019dfe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019e00:	e00f      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e02:	2a32      	cmp	r2, #50	@ 0x32
 8019e04:	d027      	beq.n	8019e56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8019e06:	d301      	bcc.n	8019e0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8019e08:	2a33      	cmp	r2, #51	@ 0x33
 8019e0a:	d1e3      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019e0c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8019e0e:	e008      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e10:	781a      	ldrb	r2, [r3, #0]
 8019e12:	785b      	ldrb	r3, [r3, #1]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d1dd      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019e18:	2a00      	cmp	r2, #0
 8019e1a:	d0f0      	beq.n	8019dfe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8019e1c:	2a01      	cmp	r2, #1
 8019e1e:	d1d9      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019e20:	6943      	ldr	r3, [r0, #20]
 8019e22:	4618      	mov	r0, r3
 8019e24:	4770      	bx	lr
 8019e26:	684b      	ldr	r3, [r1, #4]
 8019e28:	781a      	ldrb	r2, [r3, #0]
 8019e2a:	785b      	ldrb	r3, [r3, #1]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d1d1      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019e30:	b14a      	cbz	r2, 8019e46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019e32:	2a01      	cmp	r2, #1
 8019e34:	bf08      	it	eq
 8019e36:	68c3      	ldreq	r3, [r0, #12]
 8019e38:	e7f3      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e3a:	781a      	ldrb	r2, [r3, #0]
 8019e3c:	785b      	ldrb	r3, [r3, #1]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d1c8      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019e42:	2a00      	cmp	r2, #0
 8019e44:	d1ed      	bne.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e46:	69c3      	ldr	r3, [r0, #28]
 8019e48:	e7eb      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e4a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8019e4c:	e7e9      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e4e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019e50:	e7e7      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e52:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8019e54:	e7e5      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e56:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8019e58:	e7e3      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e5a:	2a2c      	cmp	r2, #44	@ 0x2c
 8019e5c:	d030      	beq.n	8019ec0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 8019e5e:	d80f      	bhi.n	8019e80 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8019e60:	2a08      	cmp	r2, #8
 8019e62:	d042      	beq.n	8019eea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019e64:	d805      	bhi.n	8019e72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8019e66:	2a04      	cmp	r2, #4
 8019e68:	d03d      	beq.n	8019ee6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8019e6a:	2a05      	cmp	r2, #5
 8019e6c:	d1b2      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019e6e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8019e70:	e7d7      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e72:	2a0a      	cmp	r2, #10
 8019e74:	d039      	beq.n	8019eea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019e76:	d301      	bcc.n	8019e7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8019e78:	2a0b      	cmp	r2, #11
 8019e7a:	d1ab      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019e7c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8019e7e:	e7d0      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e80:	2a30      	cmp	r2, #48	@ 0x30
 8019e82:	d034      	beq.n	8019eee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019e84:	d80b      	bhi.n	8019e9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8019e86:	2a2e      	cmp	r2, #46	@ 0x2e
 8019e88:	684b      	ldr	r3, [r1, #4]
 8019e8a:	d023      	beq.n	8019ed4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019e8c:	d90e      	bls.n	8019eac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 8019e8e:	781a      	ldrb	r2, [r3, #0]
 8019e90:	785b      	ldrb	r3, [r3, #1]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d19e      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019e96:	2a00      	cmp	r2, #0
 8019e98:	d1c3      	bne.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e9a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8019e9c:	e7c1      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019e9e:	2a32      	cmp	r2, #50	@ 0x32
 8019ea0:	d025      	beq.n	8019eee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019ea2:	d301      	bcc.n	8019ea8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019ea4:	2a33      	cmp	r2, #51	@ 0x33
 8019ea6:	d195      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019ea8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8019eaa:	e7ba      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019eac:	781a      	ldrb	r2, [r3, #0]
 8019eae:	785b      	ldrb	r3, [r3, #1]
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d18f      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019eb4:	2a00      	cmp	r2, #0
 8019eb6:	d0f0      	beq.n	8019e9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8019eb8:	2a01      	cmp	r2, #1
 8019eba:	d18b      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019ebc:	6983      	ldr	r3, [r0, #24]
 8019ebe:	e7b0      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ec0:	684b      	ldr	r3, [r1, #4]
 8019ec2:	781a      	ldrb	r2, [r3, #0]
 8019ec4:	785b      	ldrb	r3, [r3, #1]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d184      	bne.n	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019eca:	b152      	cbz	r2, 8019ee2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8019ecc:	2a01      	cmp	r2, #1
 8019ece:	bf08      	it	eq
 8019ed0:	6903      	ldreq	r3, [r0, #16]
 8019ed2:	e7a6      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ed4:	781a      	ldrb	r2, [r3, #0]
 8019ed6:	785b      	ldrb	r3, [r3, #1]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	f47f af7b 	bne.w	8019dd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019ede:	2a00      	cmp	r2, #0
 8019ee0:	d19f      	bne.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ee2:	6a03      	ldr	r3, [r0, #32]
 8019ee4:	e79d      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ee6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019ee8:	e79b      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019eea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019eec:	e799      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019eee:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019ef0:	e797      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

08019ef2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ef6:	b085      	sub	sp, #20
 8019ef8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8019efa:	9203      	str	r2, [sp, #12]
 8019efc:	6870      	ldr	r0, [r6, #4]
 8019efe:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019f02:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8019f06:	9101      	str	r1, [sp, #4]
 8019f08:	fa1f f885 	uxth.w	r8, r5
 8019f0c:	43ed      	mvns	r5, r5
 8019f0e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8019f12:	b2ed      	uxtb	r5, r5
 8019f14:	fb00 2404 	mla	r4, r0, r4, r2
 8019f18:	6832      	ldr	r2, [r6, #0]
 8019f1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019f1e:	4414      	add	r4, r2
 8019f20:	f8dc 2000 	ldr.w	r2, [ip]
 8019f24:	9202      	str	r2, [sp, #8]
 8019f26:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019f2a:	f102 0e04 	add.w	lr, r2, #4
 8019f2e:	9a01      	ldr	r2, [sp, #4]
 8019f30:	2a00      	cmp	r2, #0
 8019f32:	dc03      	bgt.n	8019f3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019f34:	9a03      	ldr	r2, [sp, #12]
 8019f36:	2a00      	cmp	r2, #0
 8019f38:	f340 8116 	ble.w	801a168 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019f3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019f3e:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8019f42:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019f46:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019f48:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8019f4c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	dd0e      	ble.n	8019f72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019f54:	1406      	asrs	r6, r0, #16
 8019f56:	d405      	bmi.n	8019f64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019f58:	4556      	cmp	r6, sl
 8019f5a:	da03      	bge.n	8019f64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019f5c:	1416      	asrs	r6, r2, #16
 8019f5e:	d401      	bmi.n	8019f64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019f60:	454e      	cmp	r6, r9
 8019f62:	db07      	blt.n	8019f74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019f64:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019f66:	3b01      	subs	r3, #1
 8019f68:	3403      	adds	r4, #3
 8019f6a:	4430      	add	r0, r6
 8019f6c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8019f6e:	4432      	add	r2, r6
 8019f70:	e7ee      	b.n	8019f50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019f72:	d063      	beq.n	801a03c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019f74:	1e5e      	subs	r6, r3, #1
 8019f76:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8019f78:	fb07 0706 	mla	r7, r7, r6, r0
 8019f7c:	143f      	asrs	r7, r7, #16
 8019f7e:	d454      	bmi.n	801a02a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019f80:	4557      	cmp	r7, sl
 8019f82:	da52      	bge.n	801a02a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019f84:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8019f86:	fb07 2606 	mla	r6, r7, r6, r2
 8019f8a:	1436      	asrs	r6, r6, #16
 8019f8c:	d44d      	bmi.n	801a02a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019f8e:	454e      	cmp	r6, r9
 8019f90:	da4b      	bge.n	801a02a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019f92:	1ce6      	adds	r6, r4, #3
 8019f94:	4699      	mov	r9, r3
 8019f96:	f1b9 0f00 	cmp.w	r9, #0
 8019f9a:	f106 0603 	add.w	r6, r6, #3
 8019f9e:	dd48      	ble.n	801a032 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019fa0:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8019fa4:	1417      	asrs	r7, r2, #16
 8019fa6:	9902      	ldr	r1, [sp, #8]
 8019fa8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019fac:	f109 39ff 	add.w	r9, r9, #4294967295
 8019fb0:	fb0b 1707 	mla	r7, fp, r7, r1
 8019fb4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019fb8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019fba:	f817 700a 	ldrb.w	r7, [r7, sl]
 8019fbe:	fb1b fb05 	smulbb	fp, fp, r5
 8019fc2:	4408      	add	r0, r1
 8019fc4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019fc6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019fca:	440a      	add	r2, r1
 8019fcc:	eb0e 0a07 	add.w	sl, lr, r7
 8019fd0:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8019fd4:	fb07 b708 	mla	r7, r7, r8, fp
 8019fd8:	b2bf      	uxth	r7, r7
 8019fda:	f107 0b01 	add.w	fp, r7, #1
 8019fde:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019fe2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019fe6:	fb1b fb05 	smulbb	fp, fp, r5
 8019fea:	123f      	asrs	r7, r7, #8
 8019fec:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019ff0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019ff4:	fb07 b708 	mla	r7, r7, r8, fp
 8019ff8:	b2bf      	uxth	r7, r7
 8019ffa:	f107 0b01 	add.w	fp, r7, #1
 8019ffe:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a002:	123f      	asrs	r7, r7, #8
 801a004:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a008:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a00c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a010:	fb1a fa05 	smulbb	sl, sl, r5
 801a014:	fb07 a708 	mla	r7, r7, r8, sl
 801a018:	b2bf      	uxth	r7, r7
 801a01a:	f107 0a01 	add.w	sl, r7, #1
 801a01e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a022:	123f      	asrs	r7, r7, #8
 801a024:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a028:	e7b5      	b.n	8019f96 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801a02a:	2700      	movs	r7, #0
 801a02c:	1bde      	subs	r6, r3, r7
 801a02e:	2e00      	cmp	r6, #0
 801a030:	dc42      	bgt.n	801a0b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801a032:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a03a:	441c      	add	r4, r3
 801a03c:	9b01      	ldr	r3, [sp, #4]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	f340 8092 	ble.w	801a168 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a04a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a04e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a052:	eef0 6a62 	vmov.f32	s13, s5
 801a056:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a05a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a05e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a062:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801a066:	eef0 6a43 	vmov.f32	s13, s6
 801a06a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a06e:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801a072:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a076:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a07a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a07e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a082:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a086:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a08a:	ee12 2a90 	vmov	r2, s5
 801a08e:	eef0 2a47 	vmov.f32	s5, s14
 801a092:	fb92 f3f3 	sdiv	r3, r2, r3
 801a096:	ee13 2a10 	vmov	r2, s6
 801a09a:	9311      	str	r3, [sp, #68]	@ 0x44
 801a09c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a09e:	eeb0 3a67 	vmov.f32	s6, s15
 801a0a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a0a6:	9312      	str	r3, [sp, #72]	@ 0x48
 801a0a8:	9b01      	ldr	r3, [sp, #4]
 801a0aa:	9a03      	ldr	r2, [sp, #12]
 801a0ac:	3b01      	subs	r3, #1
 801a0ae:	9301      	str	r3, [sp, #4]
 801a0b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a0b2:	bf08      	it	eq
 801a0b4:	4613      	moveq	r3, r2
 801a0b6:	e73a      	b.n	8019f2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a0b8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801a0bc:	d44e      	bmi.n	801a15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a0be:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a0c2:	4556      	cmp	r6, sl
 801a0c4:	dd4a      	ble.n	801a15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a0c6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801a0ca:	d447      	bmi.n	801a15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a0cc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801a0d0:	4559      	cmp	r1, fp
 801a0d2:	dd43      	ble.n	801a15c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801a0d4:	fa0f f986 	sxth.w	r9, r6
 801a0d8:	9902      	ldr	r1, [sp, #8]
 801a0da:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a0de:	fb0b 1909 	mla	r9, fp, r9, r1
 801a0e2:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a0e6:	f819 900a 	ldrb.w	r9, [r9, sl]
 801a0ea:	fb1b fb05 	smulbb	fp, fp, r5
 801a0ee:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a0f2:	eb0e 0a09 	add.w	sl, lr, r9
 801a0f6:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801a0fa:	fb09 b908 	mla	r9, r9, r8, fp
 801a0fe:	fa1f f989 	uxth.w	r9, r9
 801a102:	f109 0b01 	add.w	fp, r9, #1
 801a106:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a10a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a10e:	f804 9006 	strb.w	r9, [r4, r6]
 801a112:	4426      	add	r6, r4
 801a114:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a118:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a11c:	fb1b fb05 	smulbb	fp, fp, r5
 801a120:	fb09 b908 	mla	r9, r9, r8, fp
 801a124:	fa1f f989 	uxth.w	r9, r9
 801a128:	f109 0b01 	add.w	fp, r9, #1
 801a12c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a130:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a134:	f886 9001 	strb.w	r9, [r6, #1]
 801a138:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a13c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a140:	fb1a fa05 	smulbb	sl, sl, r5
 801a144:	fb09 a908 	mla	r9, r9, r8, sl
 801a148:	fa1f f989 	uxth.w	r9, r9
 801a14c:	f109 0a01 	add.w	sl, r9, #1
 801a150:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a154:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a158:	f886 9002 	strb.w	r9, [r6, #2]
 801a15c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a15e:	3701      	adds	r7, #1
 801a160:	4408      	add	r0, r1
 801a162:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a164:	440a      	add	r2, r1
 801a166:	e761      	b.n	801a02c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a168:	b005      	add	sp, #20
 801a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a16e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a16e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a172:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801a174:	4693      	mov	fp, r2
 801a176:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801a178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a17c:	6868      	ldr	r0, [r5, #4]
 801a17e:	6877      	ldr	r7, [r6, #4]
 801a180:	9100      	str	r1, [sp, #0]
 801a182:	3704      	adds	r7, #4
 801a184:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801a188:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801a18c:	fb00 2404 	mla	r4, r0, r4, r2
 801a190:	682a      	ldr	r2, [r5, #0]
 801a192:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a196:	4414      	add	r4, r2
 801a198:	6832      	ldr	r2, [r6, #0]
 801a19a:	9201      	str	r2, [sp, #4]
 801a19c:	9a00      	ldr	r2, [sp, #0]
 801a19e:	2a00      	cmp	r2, #0
 801a1a0:	dc03      	bgt.n	801a1aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a1a2:	f1bb 0f00 	cmp.w	fp, #0
 801a1a6:	f340 80bc 	ble.w	801a322 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801a1aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a1ac:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801a1b0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a1b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a1b6:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801a1ba:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	dd0c      	ble.n	801a1dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801a1c2:	1405      	asrs	r5, r0, #16
 801a1c4:	d405      	bmi.n	801a1d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a1c6:	4555      	cmp	r5, sl
 801a1c8:	da03      	bge.n	801a1d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a1ca:	1415      	asrs	r5, r2, #16
 801a1cc:	d401      	bmi.n	801a1d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801a1ce:	454d      	cmp	r5, r9
 801a1d0:	db05      	blt.n	801a1de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a1d2:	4440      	add	r0, r8
 801a1d4:	4472      	add	r2, lr
 801a1d6:	3b01      	subs	r3, #1
 801a1d8:	3403      	adds	r4, #3
 801a1da:	e7f0      	b.n	801a1be <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a1dc:	d03f      	beq.n	801a25e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801a1de:	1e5d      	subs	r5, r3, #1
 801a1e0:	fb08 0c05 	mla	ip, r8, r5, r0
 801a1e4:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801a1e8:	d42e      	bmi.n	801a248 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a1ea:	45d4      	cmp	ip, sl
 801a1ec:	da2c      	bge.n	801a248 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a1ee:	fb0e 2505 	mla	r5, lr, r5, r2
 801a1f2:	142d      	asrs	r5, r5, #16
 801a1f4:	d428      	bmi.n	801a248 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a1f6:	454d      	cmp	r5, r9
 801a1f8:	da26      	bge.n	801a248 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a1fa:	1ce5      	adds	r5, r4, #3
 801a1fc:	469c      	mov	ip, r3
 801a1fe:	f1bc 0f00 	cmp.w	ip, #0
 801a202:	f105 0503 	add.w	r5, r5, #3
 801a206:	dd25      	ble.n	801a254 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801a208:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801a20c:	ea4f 4922 	mov.w	r9, r2, asr #16
 801a210:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a214:	4472      	add	r2, lr
 801a216:	468a      	mov	sl, r1
 801a218:	9901      	ldr	r1, [sp, #4]
 801a21a:	fb0a 1909 	mla	r9, sl, r9, r1
 801a21e:	1401      	asrs	r1, r0, #16
 801a220:	4440      	add	r0, r8
 801a222:	f819 9001 	ldrb.w	r9, [r9, r1]
 801a226:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a22a:	eb07 0a09 	add.w	sl, r7, r9
 801a22e:	f817 9009 	ldrb.w	r9, [r7, r9]
 801a232:	f805 9c06 	strb.w	r9, [r5, #-6]
 801a236:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a23a:	f805 9c05 	strb.w	r9, [r5, #-5]
 801a23e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a242:	f805 9c04 	strb.w	r9, [r5, #-4]
 801a246:	e7da      	b.n	801a1fe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a248:	2500      	movs	r5, #0
 801a24a:	eba3 0c05 	sub.w	ip, r3, r5
 801a24e:	f1bc 0f00 	cmp.w	ip, #0
 801a252:	dc3b      	bgt.n	801a2cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801a254:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a25c:	441c      	add	r4, r3
 801a25e:	9b00      	ldr	r3, [sp, #0]
 801a260:	2b00      	cmp	r3, #0
 801a262:	dd5e      	ble.n	801a322 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801a264:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a26a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a26e:	eeb0 6a62 	vmov.f32	s12, s5
 801a272:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a276:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a27a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a27e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801a282:	eeb0 6a43 	vmov.f32	s12, s6
 801a286:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a28a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801a28e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a292:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a296:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a29a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a29e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a2a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a2a6:	ee12 2a90 	vmov	r2, s5
 801a2aa:	eef0 2a47 	vmov.f32	s5, s14
 801a2ae:	fb92 f8f3 	sdiv	r8, r2, r3
 801a2b2:	ee13 2a10 	vmov	r2, s6
 801a2b6:	eeb0 3a67 	vmov.f32	s6, s15
 801a2ba:	fb92 fef3 	sdiv	lr, r2, r3
 801a2be:	9b00      	ldr	r3, [sp, #0]
 801a2c0:	3b01      	subs	r3, #1
 801a2c2:	9300      	str	r3, [sp, #0]
 801a2c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2c6:	bf08      	it	eq
 801a2c8:	465b      	moveq	r3, fp
 801a2ca:	e767      	b.n	801a19c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a2cc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a2d0:	d423      	bmi.n	801a31a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a2d2:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801a2d6:	45cc      	cmp	ip, r9
 801a2d8:	dd1f      	ble.n	801a31a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a2da:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a2de:	d41c      	bmi.n	801a31a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a2e0:	68f1      	ldr	r1, [r6, #12]
 801a2e2:	4551      	cmp	r1, sl
 801a2e4:	dd19      	ble.n	801a31a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a2e6:	fa0f fc8c 	sxth.w	ip, ip
 801a2ea:	9901      	ldr	r1, [sp, #4]
 801a2ec:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801a2f0:	f81c c009 	ldrb.w	ip, [ip, r9]
 801a2f4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a2f8:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801a2fc:	eb07 090c 	add.w	r9, r7, ip
 801a300:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801a304:	f804 a00c 	strb.w	sl, [r4, ip]
 801a308:	44a4      	add	ip, r4
 801a30a:	f899 a001 	ldrb.w	sl, [r9, #1]
 801a30e:	f88c a001 	strb.w	sl, [ip, #1]
 801a312:	f899 9002 	ldrb.w	r9, [r9, #2]
 801a316:	f88c 9002 	strb.w	r9, [ip, #2]
 801a31a:	4440      	add	r0, r8
 801a31c:	4472      	add	r2, lr
 801a31e:	3501      	adds	r5, #1
 801a320:	e793      	b.n	801a24a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801a322:	b003      	add	sp, #12
 801a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a328 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a32c:	b085      	sub	sp, #20
 801a32e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a332:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801a334:	9202      	str	r2, [sp, #8]
 801a336:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801a33a:	6860      	ldr	r0, [r4, #4]
 801a33c:	9203      	str	r2, [sp, #12]
 801a33e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801a342:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801a346:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801a34a:	fb00 2505 	mla	r5, r0, r5, r2
 801a34e:	6822      	ldr	r2, [r4, #0]
 801a350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a354:	4415      	add	r5, r2
 801a356:	f8dc 2000 	ldr.w	r2, [ip]
 801a35a:	9200      	str	r2, [sp, #0]
 801a35c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a360:	3204      	adds	r2, #4
 801a362:	9201      	str	r2, [sp, #4]
 801a364:	2900      	cmp	r1, #0
 801a366:	dc03      	bgt.n	801a370 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a368:	9a02      	ldr	r2, [sp, #8]
 801a36a:	2a00      	cmp	r2, #0
 801a36c:	f340 8127 	ble.w	801a5be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a370:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a372:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a376:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801a37a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a37c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a380:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a384:	2b00      	cmp	r3, #0
 801a386:	dd0d      	ble.n	801a3a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a388:	1422      	asrs	r2, r4, #16
 801a38a:	d405      	bmi.n	801a398 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a38c:	4542      	cmp	r2, r8
 801a38e:	da03      	bge.n	801a398 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a390:	1402      	asrs	r2, r0, #16
 801a392:	d401      	bmi.n	801a398 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a394:	42ba      	cmp	r2, r7
 801a396:	db06      	blt.n	801a3a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a398:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a39a:	4474      	add	r4, lr
 801a39c:	3b01      	subs	r3, #1
 801a39e:	3503      	adds	r5, #3
 801a3a0:	4410      	add	r0, r2
 801a3a2:	e7ef      	b.n	801a384 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a3a4:	d075      	beq.n	801a492 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a3a6:	1e5a      	subs	r2, r3, #1
 801a3a8:	fb0e 4602 	mla	r6, lr, r2, r4
 801a3ac:	1436      	asrs	r6, r6, #16
 801a3ae:	d465      	bmi.n	801a47c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a3b0:	4546      	cmp	r6, r8
 801a3b2:	da63      	bge.n	801a47c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a3b4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a3b6:	fb06 0202 	mla	r2, r6, r2, r0
 801a3ba:	1412      	asrs	r2, r2, #16
 801a3bc:	d45e      	bmi.n	801a47c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a3be:	42ba      	cmp	r2, r7
 801a3c0:	da5c      	bge.n	801a47c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a3c2:	1cef      	adds	r7, r5, #3
 801a3c4:	4699      	mov	r9, r3
 801a3c6:	f1b9 0f00 	cmp.w	r9, #0
 801a3ca:	dd5d      	ble.n	801a488 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801a3cc:	1402      	asrs	r2, r0, #16
 801a3ce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a3d2:	1426      	asrs	r6, r4, #16
 801a3d4:	4692      	mov	sl, r2
 801a3d6:	9a00      	ldr	r2, [sp, #0]
 801a3d8:	fb08 220a 	mla	r2, r8, sl, r2
 801a3dc:	5d92      	ldrb	r2, [r2, r6]
 801a3de:	9e01      	ldr	r6, [sp, #4]
 801a3e0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a3e4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801a3e8:	d041      	beq.n	801a46e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a3ea:	9a03      	ldr	r2, [sp, #12]
 801a3ec:	fa5f fb86 	uxtb.w	fp, r6
 801a3f0:	fb02 f808 	mul.w	r8, r2, r8
 801a3f4:	f108 0201 	add.w	r2, r8, #1
 801a3f8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801a3fc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801a400:	1212      	asrs	r2, r2, #8
 801a402:	fa1f fa82 	uxth.w	sl, r2
 801a406:	43d2      	mvns	r2, r2
 801a408:	fb1b fb0a 	smulbb	fp, fp, sl
 801a40c:	b2d2      	uxtb	r2, r2
 801a40e:	fb08 b802 	mla	r8, r8, r2, fp
 801a412:	fa1f f888 	uxth.w	r8, r8
 801a416:	f108 0b01 	add.w	fp, r8, #1
 801a41a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a41e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a422:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a426:	fb1b fb0a 	smulbb	fp, fp, sl
 801a42a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a42e:	fb16 fa0a 	smulbb	sl, r6, sl
 801a432:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a436:	f807 8c03 	strb.w	r8, [r7, #-3]
 801a43a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801a43e:	fb06 aa02 	mla	sl, r6, r2, sl
 801a442:	fb08 b802 	mla	r8, r8, r2, fp
 801a446:	fa1f fa8a 	uxth.w	sl, sl
 801a44a:	fa1f f888 	uxth.w	r8, r8
 801a44e:	f10a 0601 	add.w	r6, sl, #1
 801a452:	f108 0b01 	add.w	fp, r8, #1
 801a456:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a45a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a45e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a462:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a466:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a46a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801a46e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a470:	4474      	add	r4, lr
 801a472:	3703      	adds	r7, #3
 801a474:	f109 39ff 	add.w	r9, r9, #4294967295
 801a478:	4410      	add	r0, r2
 801a47a:	e7a4      	b.n	801a3c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a47c:	f04f 0800 	mov.w	r8, #0
 801a480:	eba3 0208 	sub.w	r2, r3, r8
 801a484:	2a00      	cmp	r2, #0
 801a486:	dc3b      	bgt.n	801a500 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801a488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a48c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a490:	441d      	add	r5, r3
 801a492:	2900      	cmp	r1, #0
 801a494:	f340 8093 	ble.w	801a5be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a498:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a49e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4a2:	3901      	subs	r1, #1
 801a4a4:	eeb0 6a62 	vmov.f32	s12, s5
 801a4a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a4ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4b4:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a4b8:	eeb0 6a43 	vmov.f32	s12, s6
 801a4bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4c0:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a4c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a4cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a4d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a4d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a4d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a4dc:	ee12 2a90 	vmov	r2, s5
 801a4e0:	eef0 2a47 	vmov.f32	s5, s14
 801a4e4:	fb92 fef3 	sdiv	lr, r2, r3
 801a4e8:	ee13 2a10 	vmov	r2, s6
 801a4ec:	eeb0 3a67 	vmov.f32	s6, s15
 801a4f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a4f4:	9a02      	ldr	r2, [sp, #8]
 801a4f6:	9312      	str	r3, [sp, #72]	@ 0x48
 801a4f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a4fa:	bf08      	it	eq
 801a4fc:	4613      	moveq	r3, r2
 801a4fe:	e731      	b.n	801a364 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a500:	1427      	asrs	r7, r4, #16
 801a502:	d456      	bmi.n	801a5b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a504:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a508:	42be      	cmp	r6, r7
 801a50a:	dd52      	ble.n	801a5b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a50c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a510:	d44f      	bmi.n	801a5b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a512:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a516:	454a      	cmp	r2, r9
 801a518:	dd4b      	ble.n	801a5b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a51a:	9a00      	ldr	r2, [sp, #0]
 801a51c:	b236      	sxth	r6, r6
 801a51e:	fb09 2606 	mla	r6, r9, r6, r2
 801a522:	5df2      	ldrb	r2, [r6, r7]
 801a524:	9e01      	ldr	r6, [sp, #4]
 801a526:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a52a:	0e3a      	lsrs	r2, r7, #24
 801a52c:	d041      	beq.n	801a5b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a52e:	9e03      	ldr	r6, [sp, #12]
 801a530:	fa5f fb87 	uxtb.w	fp, r7
 801a534:	4372      	muls	r2, r6
 801a536:	1c56      	adds	r6, r2, #1
 801a538:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a53c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801a540:	1212      	asrs	r2, r2, #8
 801a542:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a546:	fa1f fa82 	uxth.w	sl, r2
 801a54a:	43d2      	mvns	r2, r2
 801a54c:	fb1b fb0a 	smulbb	fp, fp, sl
 801a550:	b2d2      	uxtb	r2, r2
 801a552:	fb09 b902 	mla	r9, r9, r2, fp
 801a556:	fa1f f989 	uxth.w	r9, r9
 801a55a:	f109 0b01 	add.w	fp, r9, #1
 801a55e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a562:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a566:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a56a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a56e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a572:	fb17 fa0a 	smulbb	sl, r7, sl
 801a576:	f805 9006 	strb.w	r9, [r5, r6]
 801a57a:	442e      	add	r6, r5
 801a57c:	78b7      	ldrb	r7, [r6, #2]
 801a57e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a582:	fb07 aa02 	mla	sl, r7, r2, sl
 801a586:	fb09 b902 	mla	r9, r9, r2, fp
 801a58a:	fa1f fa8a 	uxth.w	sl, sl
 801a58e:	fa1f f989 	uxth.w	r9, r9
 801a592:	f10a 0701 	add.w	r7, sl, #1
 801a596:	f109 0b01 	add.w	fp, r9, #1
 801a59a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a59e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a5a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a5a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a5aa:	f886 a002 	strb.w	sl, [r6, #2]
 801a5ae:	f886 9001 	strb.w	r9, [r6, #1]
 801a5b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a5b4:	4474      	add	r4, lr
 801a5b6:	f108 0801 	add.w	r8, r8, #1
 801a5ba:	4410      	add	r0, r2
 801a5bc:	e760      	b.n	801a480 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801a5be:	b005      	add	sp, #20
 801a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a5c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5c8:	b085      	sub	sp, #20
 801a5ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a5ce:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a5d0:	9203      	str	r2, [sp, #12]
 801a5d2:	6868      	ldr	r0, [r5, #4]
 801a5d4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801a5d8:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801a5dc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801a5e0:	fb00 2404 	mla	r4, r0, r4, r2
 801a5e4:	682a      	ldr	r2, [r5, #0]
 801a5e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a5ea:	4414      	add	r4, r2
 801a5ec:	f8dc 2000 	ldr.w	r2, [ip]
 801a5f0:	9201      	str	r2, [sp, #4]
 801a5f2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a5f6:	3204      	adds	r2, #4
 801a5f8:	9202      	str	r2, [sp, #8]
 801a5fa:	2900      	cmp	r1, #0
 801a5fc:	dc03      	bgt.n	801a606 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801a5fe:	9a03      	ldr	r2, [sp, #12]
 801a600:	2a00      	cmp	r2, #0
 801a602:	f340 8137 	ble.w	801a874 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a606:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a608:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a60c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a610:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a612:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a616:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	dd0d      	ble.n	801a63a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a61e:	1405      	asrs	r5, r0, #16
 801a620:	d405      	bmi.n	801a62e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a622:	4545      	cmp	r5, r8
 801a624:	da03      	bge.n	801a62e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a626:	1415      	asrs	r5, r2, #16
 801a628:	d401      	bmi.n	801a62e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a62a:	42bd      	cmp	r5, r7
 801a62c:	db06      	blt.n	801a63c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a62e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801a630:	4470      	add	r0, lr
 801a632:	3b01      	subs	r3, #1
 801a634:	3403      	adds	r4, #3
 801a636:	442a      	add	r2, r5
 801a638:	e7ef      	b.n	801a61a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801a63a:	d070      	beq.n	801a71e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801a63c:	1e5d      	subs	r5, r3, #1
 801a63e:	fb0e 0605 	mla	r6, lr, r5, r0
 801a642:	1436      	asrs	r6, r6, #16
 801a644:	d462      	bmi.n	801a70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a646:	4546      	cmp	r6, r8
 801a648:	da60      	bge.n	801a70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a64a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a64c:	fb06 2505 	mla	r5, r6, r5, r2
 801a650:	142d      	asrs	r5, r5, #16
 801a652:	d45b      	bmi.n	801a70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a654:	42bd      	cmp	r5, r7
 801a656:	da59      	bge.n	801a70c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a658:	1ce5      	adds	r5, r4, #3
 801a65a:	469a      	mov	sl, r3
 801a65c:	f1ba 0f00 	cmp.w	sl, #0
 801a660:	dd58      	ble.n	801a714 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801a662:	1416      	asrs	r6, r2, #16
 801a664:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a668:	1407      	asrs	r7, r0, #16
 801a66a:	46b1      	mov	r9, r6
 801a66c:	9e01      	ldr	r6, [sp, #4]
 801a66e:	fb08 6609 	mla	r6, r8, r9, r6
 801a672:	5df6      	ldrb	r6, [r6, r7]
 801a674:	9f02      	ldr	r7, [sp, #8]
 801a676:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801a67a:	0e37      	lsrs	r7, r6, #24
 801a67c:	2fff      	cmp	r7, #255	@ 0xff
 801a67e:	f000 80f0 	beq.w	801a862 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a682:	fa5f f887 	uxtb.w	r8, r7
 801a686:	b3d7      	cbz	r7, 801a6fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a688:	fa1f f788 	uxth.w	r7, r8
 801a68c:	ea6f 0808 	mvn.w	r8, r8
 801a690:	fa5f fb86 	uxtb.w	fp, r6
 801a694:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801a698:	fa5f f888 	uxtb.w	r8, r8
 801a69c:	fb1b fb07 	smulbb	fp, fp, r7
 801a6a0:	fb09 b908 	mla	r9, r9, r8, fp
 801a6a4:	fa1f f989 	uxth.w	r9, r9
 801a6a8:	f109 0b01 	add.w	fp, r9, #1
 801a6ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a6b0:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801a6b4:	fb1b fb08 	smulbb	fp, fp, r8
 801a6b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a6bc:	f805 9c03 	strb.w	r9, [r5, #-3]
 801a6c0:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801a6c4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a6c8:	fb09 b907 	mla	r9, r9, r7, fp
 801a6cc:	fa1f f989 	uxth.w	r9, r9
 801a6d0:	f109 0b01 	add.w	fp, r9, #1
 801a6d4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a6d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a6dc:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a6e0:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801a6e4:	fb19 f808 	smulbb	r8, r9, r8
 801a6e8:	fb06 8607 	mla	r6, r6, r7, r8
 801a6ec:	b2b6      	uxth	r6, r6
 801a6ee:	f106 0801 	add.w	r8, r6, #1
 801a6f2:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801a6f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a6fa:	f805 8c01 	strb.w	r8, [r5, #-1]
 801a6fe:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a700:	4470      	add	r0, lr
 801a702:	3503      	adds	r5, #3
 801a704:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a708:	4432      	add	r2, r6
 801a70a:	e7a7      	b.n	801a65c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a70c:	2600      	movs	r6, #0
 801a70e:	1b9d      	subs	r5, r3, r6
 801a710:	2d00      	cmp	r5, #0
 801a712:	dc3b      	bgt.n	801a78c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a714:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a71c:	441c      	add	r4, r3
 801a71e:	2900      	cmp	r1, #0
 801a720:	f340 80a8 	ble.w	801a874 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a724:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a72a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a72e:	3901      	subs	r1, #1
 801a730:	eeb0 6a62 	vmov.f32	s12, s5
 801a734:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a738:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a73c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a740:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a744:	eeb0 6a43 	vmov.f32	s12, s6
 801a748:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a74c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a750:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a754:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a758:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a75c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a760:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a764:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a768:	ee12 2a90 	vmov	r2, s5
 801a76c:	eef0 2a47 	vmov.f32	s5, s14
 801a770:	fb92 fef3 	sdiv	lr, r2, r3
 801a774:	ee13 2a10 	vmov	r2, s6
 801a778:	eeb0 3a67 	vmov.f32	s6, s15
 801a77c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a780:	9a03      	ldr	r2, [sp, #12]
 801a782:	9312      	str	r3, [sp, #72]	@ 0x48
 801a784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a786:	bf08      	it	eq
 801a788:	4613      	moveq	r3, r2
 801a78a:	e736      	b.n	801a5fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a78c:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a790:	d457      	bmi.n	801a842 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a792:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801a796:	4547      	cmp	r7, r8
 801a798:	dd53      	ble.n	801a842 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a79a:	ea5f 4922 	movs.w	r9, r2, asr #16
 801a79e:	d450      	bmi.n	801a842 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a7a0:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801a7a4:	454d      	cmp	r5, r9
 801a7a6:	dd4c      	ble.n	801a842 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a7a8:	9d01      	ldr	r5, [sp, #4]
 801a7aa:	b23f      	sxth	r7, r7
 801a7ac:	fb09 5707 	mla	r7, r9, r7, r5
 801a7b0:	f817 5008 	ldrb.w	r5, [r7, r8]
 801a7b4:	9f02      	ldr	r7, [sp, #8]
 801a7b6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801a7ba:	0e2f      	lsrs	r7, r5, #24
 801a7bc:	2fff      	cmp	r7, #255	@ 0xff
 801a7be:	d045      	beq.n	801a84c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a7c0:	fa5f f987 	uxtb.w	r9, r7
 801a7c4:	b3ef      	cbz	r7, 801a842 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a7c6:	fa1f f889 	uxth.w	r8, r9
 801a7ca:	ea6f 0909 	mvn.w	r9, r9
 801a7ce:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a7d2:	fa5f fb85 	uxtb.w	fp, r5
 801a7d6:	f814 a007 	ldrb.w	sl, [r4, r7]
 801a7da:	fa5f f989 	uxtb.w	r9, r9
 801a7de:	fb1b fb08 	smulbb	fp, fp, r8
 801a7e2:	fb0a ba09 	mla	sl, sl, r9, fp
 801a7e6:	fa1f fa8a 	uxth.w	sl, sl
 801a7ea:	f10a 0b01 	add.w	fp, sl, #1
 801a7ee:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a7f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a7f6:	f804 a007 	strb.w	sl, [r4, r7]
 801a7fa:	4427      	add	r7, r4
 801a7fc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a800:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801a804:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a808:	fb1b fb09 	smulbb	fp, fp, r9
 801a80c:	fb0a ba08 	mla	sl, sl, r8, fp
 801a810:	fa1f fa8a 	uxth.w	sl, sl
 801a814:	f10a 0b01 	add.w	fp, sl, #1
 801a818:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a81c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a820:	f887 a001 	strb.w	sl, [r7, #1]
 801a824:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a828:	fb1a f909 	smulbb	r9, sl, r9
 801a82c:	fb05 9508 	mla	r5, r5, r8, r9
 801a830:	b2ad      	uxth	r5, r5
 801a832:	f105 0901 	add.w	r9, r5, #1
 801a836:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801a83a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a83e:	f887 9002 	strb.w	r9, [r7, #2]
 801a842:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801a844:	4470      	add	r0, lr
 801a846:	3601      	adds	r6, #1
 801a848:	442a      	add	r2, r5
 801a84a:	e760      	b.n	801a70e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a84c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a850:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801a854:	55e5      	strb	r5, [r4, r7]
 801a856:	4427      	add	r7, r4
 801a858:	0c2d      	lsrs	r5, r5, #16
 801a85a:	f887 8001 	strb.w	r8, [r7, #1]
 801a85e:	70bd      	strb	r5, [r7, #2]
 801a860:	e7ef      	b.n	801a842 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a862:	0a37      	lsrs	r7, r6, #8
 801a864:	f805 6c03 	strb.w	r6, [r5, #-3]
 801a868:	0c36      	lsrs	r6, r6, #16
 801a86a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801a86e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801a872:	e744      	b.n	801a6fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a874:	b005      	add	sp, #20
 801a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a87a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a87a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a87e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a880:	9201      	str	r2, [sp, #4]
 801a882:	6870      	ldr	r0, [r6, #4]
 801a884:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801a888:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801a88c:	fa1f fe85 	uxth.w	lr, r5
 801a890:	43ed      	mvns	r5, r5
 801a892:	f8dc 8000 	ldr.w	r8, [ip]
 801a896:	b2ed      	uxtb	r5, r5
 801a898:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801a89c:	fb00 2404 	mla	r4, r0, r4, r2
 801a8a0:	6832      	ldr	r2, [r6, #0]
 801a8a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a8a6:	4414      	add	r4, r2
 801a8a8:	2900      	cmp	r1, #0
 801a8aa:	dc03      	bgt.n	801a8b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a8ac:	9a01      	ldr	r2, [sp, #4]
 801a8ae:	2a00      	cmp	r2, #0
 801a8b0:	f340 810d 	ble.w	801aace <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a8b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a8b6:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801a8ba:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a8be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a8c0:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801a8c4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	dd0e      	ble.n	801a8ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a8cc:	1406      	asrs	r6, r0, #16
 801a8ce:	d405      	bmi.n	801a8dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a8d0:	4556      	cmp	r6, sl
 801a8d2:	da03      	bge.n	801a8dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a8d4:	1416      	asrs	r6, r2, #16
 801a8d6:	d401      	bmi.n	801a8dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a8d8:	454e      	cmp	r6, r9
 801a8da:	db07      	blt.n	801a8ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a8dc:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801a8de:	3b01      	subs	r3, #1
 801a8e0:	3403      	adds	r4, #3
 801a8e2:	4430      	add	r0, r6
 801a8e4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801a8e6:	4432      	add	r2, r6
 801a8e8:	e7ee      	b.n	801a8c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801a8ea:	d060      	beq.n	801a9ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801a8ec:	1e5e      	subs	r6, r3, #1
 801a8ee:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a8f0:	fb07 0706 	mla	r7, r7, r6, r0
 801a8f4:	143f      	asrs	r7, r7, #16
 801a8f6:	d451      	bmi.n	801a99c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a8f8:	4557      	cmp	r7, sl
 801a8fa:	da4f      	bge.n	801a99c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a8fc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a8fe:	fb07 2606 	mla	r6, r7, r6, r2
 801a902:	1436      	asrs	r6, r6, #16
 801a904:	d44a      	bmi.n	801a99c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a906:	454e      	cmp	r6, r9
 801a908:	da48      	bge.n	801a99c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a90a:	1ce6      	adds	r6, r4, #3
 801a90c:	4699      	mov	r9, r3
 801a90e:	f1b9 0f00 	cmp.w	r9, #0
 801a912:	f106 0603 	add.w	r6, r6, #3
 801a916:	dd45      	ble.n	801a9a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801a918:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801a91c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a920:	1417      	asrs	r7, r2, #16
 801a922:	f109 39ff 	add.w	r9, r9, #4294967295
 801a926:	fb0b a707 	mla	r7, fp, r7, sl
 801a92a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a92e:	fb1b fb05 	smulbb	fp, fp, r5
 801a932:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a936:	eb08 0a07 	add.w	sl, r8, r7
 801a93a:	f818 7007 	ldrb.w	r7, [r8, r7]
 801a93e:	fb07 b70e 	mla	r7, r7, lr, fp
 801a942:	b2bf      	uxth	r7, r7
 801a944:	f107 0b01 	add.w	fp, r7, #1
 801a948:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a94c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a950:	fb1b fb05 	smulbb	fp, fp, r5
 801a954:	123f      	asrs	r7, r7, #8
 801a956:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a95a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a95e:	fb07 b70e 	mla	r7, r7, lr, fp
 801a962:	b2bf      	uxth	r7, r7
 801a964:	f107 0b01 	add.w	fp, r7, #1
 801a968:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a96c:	123f      	asrs	r7, r7, #8
 801a96e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a972:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a976:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a97a:	fb1a fa05 	smulbb	sl, sl, r5
 801a97e:	fb07 a70e 	mla	r7, r7, lr, sl
 801a982:	b2bf      	uxth	r7, r7
 801a984:	f107 0a01 	add.w	sl, r7, #1
 801a988:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a98c:	123f      	asrs	r7, r7, #8
 801a98e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a992:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a994:	4438      	add	r0, r7
 801a996:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a998:	443a      	add	r2, r7
 801a99a:	e7b8      	b.n	801a90e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a99c:	2700      	movs	r7, #0
 801a99e:	1bde      	subs	r6, r3, r7
 801a9a0:	2e00      	cmp	r6, #0
 801a9a2:	dc3f      	bgt.n	801aa24 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801a9a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a9a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9ac:	441c      	add	r4, r3
 801a9ae:	2900      	cmp	r1, #0
 801a9b0:	f340 808d 	ble.w	801aace <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a9b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a9b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a9ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a9be:	3901      	subs	r1, #1
 801a9c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a9c4:	eef0 6a62 	vmov.f32	s13, s5
 801a9c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a9cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a9d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9d4:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801a9d8:	eef0 6a43 	vmov.f32	s13, s6
 801a9dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9e0:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801a9e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a9e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a9ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a9f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a9f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a9f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a9fc:	ee12 2a90 	vmov	r2, s5
 801aa00:	eef0 2a47 	vmov.f32	s5, s14
 801aa04:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa08:	ee13 2a10 	vmov	r2, s6
 801aa0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aa0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa10:	eeb0 3a67 	vmov.f32	s6, s15
 801aa14:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa18:	9a01      	ldr	r2, [sp, #4]
 801aa1a:	9310      	str	r3, [sp, #64]	@ 0x40
 801aa1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa1e:	bf08      	it	eq
 801aa20:	4613      	moveq	r3, r2
 801aa22:	e741      	b.n	801a8a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801aa24:	ea5f 4920 	movs.w	r9, r0, asr #16
 801aa28:	d44b      	bmi.n	801aac2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801aa2a:	f8dc b008 	ldr.w	fp, [ip, #8]
 801aa2e:	45cb      	cmp	fp, r9
 801aa30:	dd47      	ble.n	801aac2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801aa32:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801aa36:	d444      	bmi.n	801aac2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801aa38:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801aa3c:	4556      	cmp	r6, sl
 801aa3e:	dd40      	ble.n	801aac2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801aa40:	fa0f f68b 	sxth.w	r6, fp
 801aa44:	fb0a 9906 	mla	r9, sl, r6, r9
 801aa48:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801aa4c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801aa50:	f814 b006 	ldrb.w	fp, [r4, r6]
 801aa54:	fb1b fb05 	smulbb	fp, fp, r5
 801aa58:	eb08 0a09 	add.w	sl, r8, r9
 801aa5c:	f818 9009 	ldrb.w	r9, [r8, r9]
 801aa60:	fb09 b90e 	mla	r9, r9, lr, fp
 801aa64:	fa1f f989 	uxth.w	r9, r9
 801aa68:	f109 0b01 	add.w	fp, r9, #1
 801aa6c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aa70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa74:	f804 9006 	strb.w	r9, [r4, r6]
 801aa78:	4426      	add	r6, r4
 801aa7a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801aa7e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801aa82:	fb1b fb05 	smulbb	fp, fp, r5
 801aa86:	fb09 b90e 	mla	r9, r9, lr, fp
 801aa8a:	fa1f f989 	uxth.w	r9, r9
 801aa8e:	f109 0b01 	add.w	fp, r9, #1
 801aa92:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aa96:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa9a:	f886 9001 	strb.w	r9, [r6, #1]
 801aa9e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801aaa2:	f896 a002 	ldrb.w	sl, [r6, #2]
 801aaa6:	fb1a fa05 	smulbb	sl, sl, r5
 801aaaa:	fb09 a90e 	mla	r9, r9, lr, sl
 801aaae:	fa1f f989 	uxth.w	r9, r9
 801aab2:	f109 0a01 	add.w	sl, r9, #1
 801aab6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801aaba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aabe:	f886 9002 	strb.w	r9, [r6, #2]
 801aac2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801aac4:	3701      	adds	r7, #1
 801aac6:	4430      	add	r0, r6
 801aac8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801aaca:	4432      	add	r2, r6
 801aacc:	e767      	b.n	801a99e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801aace:	b003      	add	sp, #12
 801aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aad4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801aada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801aade:	9201      	str	r2, [sp, #4]
 801aae0:	6868      	ldr	r0, [r5, #4]
 801aae2:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801aae4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801aae8:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801aaec:	fb00 2404 	mla	r4, r0, r4, r2
 801aaf0:	682a      	ldr	r2, [r5, #0]
 801aaf2:	f8d7 8000 	ldr.w	r8, [r7]
 801aaf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aafa:	4414      	add	r4, r2
 801aafc:	2900      	cmp	r1, #0
 801aafe:	dc03      	bgt.n	801ab08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ab00:	9a01      	ldr	r2, [sp, #4]
 801ab02:	2a00      	cmp	r2, #0
 801ab04:	f340 80af 	ble.w	801ac66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ab08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ab0a:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ab0e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ab12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ab14:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801ab18:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	dd0c      	ble.n	801ab3a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ab20:	1405      	asrs	r5, r0, #16
 801ab22:	d405      	bmi.n	801ab30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ab24:	4555      	cmp	r5, sl
 801ab26:	da03      	bge.n	801ab30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ab28:	1415      	asrs	r5, r2, #16
 801ab2a:	d401      	bmi.n	801ab30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ab2c:	454d      	cmp	r5, r9
 801ab2e:	db05      	blt.n	801ab3c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ab30:	4470      	add	r0, lr
 801ab32:	4462      	add	r2, ip
 801ab34:	3b01      	subs	r3, #1
 801ab36:	3403      	adds	r4, #3
 801ab38:	e7f0      	b.n	801ab1c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ab3a:	d038      	beq.n	801abae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ab3c:	1e5d      	subs	r5, r3, #1
 801ab3e:	fb0e 0605 	mla	r6, lr, r5, r0
 801ab42:	1436      	asrs	r6, r6, #16
 801ab44:	d42a      	bmi.n	801ab9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ab46:	4556      	cmp	r6, sl
 801ab48:	da28      	bge.n	801ab9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ab4a:	fb0c 2505 	mla	r5, ip, r5, r2
 801ab4e:	142d      	asrs	r5, r5, #16
 801ab50:	d424      	bmi.n	801ab9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ab52:	454d      	cmp	r5, r9
 801ab54:	da22      	bge.n	801ab9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ab56:	1ce6      	adds	r6, r4, #3
 801ab58:	4699      	mov	r9, r3
 801ab5a:	f1b9 0f00 	cmp.w	r9, #0
 801ab5e:	f106 0603 	add.w	r6, r6, #3
 801ab62:	dd1f      	ble.n	801aba4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801ab64:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ab68:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ab6c:	1415      	asrs	r5, r2, #16
 801ab6e:	4470      	add	r0, lr
 801ab70:	4462      	add	r2, ip
 801ab72:	f109 39ff 	add.w	r9, r9, #4294967295
 801ab76:	fb0b a505 	mla	r5, fp, r5, sl
 801ab7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab7e:	eb08 0a05 	add.w	sl, r8, r5
 801ab82:	f818 5005 	ldrb.w	r5, [r8, r5]
 801ab86:	f806 5c06 	strb.w	r5, [r6, #-6]
 801ab8a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ab8e:	f806 5c05 	strb.w	r5, [r6, #-5]
 801ab92:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801ab96:	f806 5c04 	strb.w	r5, [r6, #-4]
 801ab9a:	e7de      	b.n	801ab5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ab9c:	2600      	movs	r6, #0
 801ab9e:	1b9d      	subs	r5, r3, r6
 801aba0:	2d00      	cmp	r5, #0
 801aba2:	dc38      	bgt.n	801ac16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801aba4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aba8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abac:	441c      	add	r4, r3
 801abae:	2900      	cmp	r1, #0
 801abb0:	dd59      	ble.n	801ac66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801abb2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801abb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801abb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801abbc:	3901      	subs	r1, #1
 801abbe:	eeb0 6a62 	vmov.f32	s12, s5
 801abc2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801abc6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801abca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abce:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801abd2:	eeb0 6a43 	vmov.f32	s12, s6
 801abd6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801abda:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801abde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801abe2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801abe6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801abea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801abee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801abf2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801abf6:	ee12 2a90 	vmov	r2, s5
 801abfa:	eef0 2a47 	vmov.f32	s5, s14
 801abfe:	fb92 fef3 	sdiv	lr, r2, r3
 801ac02:	ee13 2a10 	vmov	r2, s6
 801ac06:	eeb0 3a67 	vmov.f32	s6, s15
 801ac0a:	fb92 fcf3 	sdiv	ip, r2, r3
 801ac0e:	9a01      	ldr	r2, [sp, #4]
 801ac10:	bf08      	it	eq
 801ac12:	4613      	moveq	r3, r2
 801ac14:	e772      	b.n	801aafc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ac16:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ac1a:	d420      	bmi.n	801ac5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ac1c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ac20:	45cb      	cmp	fp, r9
 801ac22:	dd1c      	ble.n	801ac5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ac24:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ac28:	d419      	bmi.n	801ac5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ac2a:	68fd      	ldr	r5, [r7, #12]
 801ac2c:	4555      	cmp	r5, sl
 801ac2e:	dd16      	ble.n	801ac5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ac30:	fa0f f58b 	sxth.w	r5, fp
 801ac34:	fb0a 9505 	mla	r5, sl, r5, r9
 801ac38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac3c:	f818 9005 	ldrb.w	r9, [r8, r5]
 801ac40:	eb08 0b05 	add.w	fp, r8, r5
 801ac44:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801ac48:	f804 9005 	strb.w	r9, [r4, r5]
 801ac4c:	4425      	add	r5, r4
 801ac4e:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ac52:	f885 9001 	strb.w	r9, [r5, #1]
 801ac56:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ac5a:	f885 9002 	strb.w	r9, [r5, #2]
 801ac5e:	4470      	add	r0, lr
 801ac60:	4462      	add	r2, ip
 801ac62:	3601      	adds	r6, #1
 801ac64:	e79b      	b.n	801ab9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801ac66:	b003      	add	sp, #12
 801ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac70:	b085      	sub	sp, #20
 801ac72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ac76:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ac78:	9202      	str	r2, [sp, #8]
 801ac7a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801ac7e:	6860      	ldr	r0, [r4, #4]
 801ac80:	9203      	str	r2, [sp, #12]
 801ac82:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ac86:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801ac8a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801ac8e:	fb00 2505 	mla	r5, r0, r5, r2
 801ac92:	6822      	ldr	r2, [r4, #0]
 801ac94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac98:	4415      	add	r5, r2
 801ac9a:	f8dc 2000 	ldr.w	r2, [ip]
 801ac9e:	9201      	str	r2, [sp, #4]
 801aca0:	2900      	cmp	r1, #0
 801aca2:	dc03      	bgt.n	801acac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801aca4:	9a02      	ldr	r2, [sp, #8]
 801aca6:	2a00      	cmp	r2, #0
 801aca8:	f340 8122 	ble.w	801aef0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801acac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801acae:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801acb2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801acb6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801acb8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801acbc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	dd0d      	ble.n	801ace0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801acc4:	1422      	asrs	r2, r4, #16
 801acc6:	d405      	bmi.n	801acd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801acc8:	4542      	cmp	r2, r8
 801acca:	da03      	bge.n	801acd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801accc:	1402      	asrs	r2, r0, #16
 801acce:	d401      	bmi.n	801acd4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801acd0:	42ba      	cmp	r2, r7
 801acd2:	db06      	blt.n	801ace2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801acd4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801acd6:	4474      	add	r4, lr
 801acd8:	3b01      	subs	r3, #1
 801acda:	3503      	adds	r5, #3
 801acdc:	4410      	add	r0, r2
 801acde:	e7ef      	b.n	801acc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ace0:	d072      	beq.n	801adc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801ace2:	1e5a      	subs	r2, r3, #1
 801ace4:	fb0e 4602 	mla	r6, lr, r2, r4
 801ace8:	1436      	asrs	r6, r6, #16
 801acea:	d462      	bmi.n	801adb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801acec:	4546      	cmp	r6, r8
 801acee:	da60      	bge.n	801adb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801acf0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801acf2:	fb06 0202 	mla	r2, r6, r2, r0
 801acf6:	1412      	asrs	r2, r2, #16
 801acf8:	d45b      	bmi.n	801adb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801acfa:	42ba      	cmp	r2, r7
 801acfc:	da59      	bge.n	801adb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801acfe:	1cef      	adds	r7, r5, #3
 801ad00:	4699      	mov	r9, r3
 801ad02:	f1b9 0f00 	cmp.w	r9, #0
 801ad06:	dd5a      	ble.n	801adbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad08:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ad0c:	1426      	asrs	r6, r4, #16
 801ad0e:	1402      	asrs	r2, r0, #16
 801ad10:	fb08 6202 	mla	r2, r8, r2, r6
 801ad14:	9e01      	ldr	r6, [sp, #4]
 801ad16:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ad1a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801ad1e:	d041      	beq.n	801ada4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801ad20:	9a03      	ldr	r2, [sp, #12]
 801ad22:	fa5f fb86 	uxtb.w	fp, r6
 801ad26:	fb02 f808 	mul.w	r8, r2, r8
 801ad2a:	f108 0201 	add.w	r2, r8, #1
 801ad2e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801ad32:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801ad36:	1212      	asrs	r2, r2, #8
 801ad38:	fa1f fa82 	uxth.w	sl, r2
 801ad3c:	43d2      	mvns	r2, r2
 801ad3e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ad42:	b2d2      	uxtb	r2, r2
 801ad44:	fb08 b802 	mla	r8, r8, r2, fp
 801ad48:	fa1f f888 	uxth.w	r8, r8
 801ad4c:	f108 0b01 	add.w	fp, r8, #1
 801ad50:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ad54:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ad58:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ad5c:	fb1b fb0a 	smulbb	fp, fp, sl
 801ad60:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ad64:	fb16 fa0a 	smulbb	sl, r6, sl
 801ad68:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ad6c:	f807 8c03 	strb.w	r8, [r7, #-3]
 801ad70:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801ad74:	fb06 aa02 	mla	sl, r6, r2, sl
 801ad78:	fb08 b802 	mla	r8, r8, r2, fp
 801ad7c:	fa1f fa8a 	uxth.w	sl, sl
 801ad80:	fa1f f888 	uxth.w	r8, r8
 801ad84:	f10a 0601 	add.w	r6, sl, #1
 801ad88:	f108 0b01 	add.w	fp, r8, #1
 801ad8c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ad90:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ad94:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ad98:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ad9c:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ada0:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ada4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ada6:	4474      	add	r4, lr
 801ada8:	3703      	adds	r7, #3
 801adaa:	f109 39ff 	add.w	r9, r9, #4294967295
 801adae:	4410      	add	r0, r2
 801adb0:	e7a7      	b.n	801ad02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801adb2:	f04f 0800 	mov.w	r8, #0
 801adb6:	eba3 0208 	sub.w	r2, r3, r8
 801adba:	2a00      	cmp	r2, #0
 801adbc:	dc3b      	bgt.n	801ae36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801adbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801adc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801adc6:	441d      	add	r5, r3
 801adc8:	2900      	cmp	r1, #0
 801adca:	f340 8091 	ble.w	801aef0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801adce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801add2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801add4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801add8:	3901      	subs	r1, #1
 801adda:	eeb0 6a62 	vmov.f32	s12, s5
 801adde:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ade2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ade6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801adea:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801adee:	eeb0 6a43 	vmov.f32	s12, s6
 801adf2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801adf6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801adfa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801adfe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ae02:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ae06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae12:	ee12 2a90 	vmov	r2, s5
 801ae16:	eef0 2a47 	vmov.f32	s5, s14
 801ae1a:	fb92 fef3 	sdiv	lr, r2, r3
 801ae1e:	ee13 2a10 	vmov	r2, s6
 801ae22:	eeb0 3a67 	vmov.f32	s6, s15
 801ae26:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae2a:	9a02      	ldr	r2, [sp, #8]
 801ae2c:	9312      	str	r3, [sp, #72]	@ 0x48
 801ae2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae30:	bf08      	it	eq
 801ae32:	4613      	moveq	r3, r2
 801ae34:	e734      	b.n	801aca0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ae36:	1427      	asrs	r7, r4, #16
 801ae38:	d454      	bmi.n	801aee4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ae3a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ae3e:	42be      	cmp	r6, r7
 801ae40:	dd50      	ble.n	801aee4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ae42:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ae46:	d44d      	bmi.n	801aee4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ae48:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ae4c:	454a      	cmp	r2, r9
 801ae4e:	dd49      	ble.n	801aee4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ae50:	b236      	sxth	r6, r6
 801ae52:	9a01      	ldr	r2, [sp, #4]
 801ae54:	fb09 7606 	mla	r6, r9, r6, r7
 801ae58:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801ae5c:	0e3a      	lsrs	r2, r7, #24
 801ae5e:	d041      	beq.n	801aee4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801ae60:	9e03      	ldr	r6, [sp, #12]
 801ae62:	fa5f fb87 	uxtb.w	fp, r7
 801ae66:	4372      	muls	r2, r6
 801ae68:	1c56      	adds	r6, r2, #1
 801ae6a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ae6e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801ae72:	1212      	asrs	r2, r2, #8
 801ae74:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ae78:	fa1f fa82 	uxth.w	sl, r2
 801ae7c:	43d2      	mvns	r2, r2
 801ae7e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ae82:	b2d2      	uxtb	r2, r2
 801ae84:	fb09 b902 	mla	r9, r9, r2, fp
 801ae88:	fa1f f989 	uxth.w	r9, r9
 801ae8c:	f109 0b01 	add.w	fp, r9, #1
 801ae90:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ae94:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ae98:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ae9c:	fb1b fb0a 	smulbb	fp, fp, sl
 801aea0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aea4:	fb17 fa0a 	smulbb	sl, r7, sl
 801aea8:	f805 9006 	strb.w	r9, [r5, r6]
 801aeac:	442e      	add	r6, r5
 801aeae:	78b7      	ldrb	r7, [r6, #2]
 801aeb0:	f896 9001 	ldrb.w	r9, [r6, #1]
 801aeb4:	fb07 aa02 	mla	sl, r7, r2, sl
 801aeb8:	fb09 b902 	mla	r9, r9, r2, fp
 801aebc:	fa1f fa8a 	uxth.w	sl, sl
 801aec0:	fa1f f989 	uxth.w	r9, r9
 801aec4:	f10a 0701 	add.w	r7, sl, #1
 801aec8:	f109 0b01 	add.w	fp, r9, #1
 801aecc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aed0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aed4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aed8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aedc:	f886 a002 	strb.w	sl, [r6, #2]
 801aee0:	f886 9001 	strb.w	r9, [r6, #1]
 801aee4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aee6:	4474      	add	r4, lr
 801aee8:	f108 0801 	add.w	r8, r8, #1
 801aeec:	4410      	add	r0, r2
 801aeee:	e762      	b.n	801adb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801aef0:	b005      	add	sp, #20
 801aef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aef6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aef6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aefa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801aefc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801af00:	9201      	str	r2, [sp, #4]
 801af02:	6860      	ldr	r0, [r4, #4]
 801af04:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801af08:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801af0c:	fb00 2505 	mla	r5, r0, r5, r2
 801af10:	6822      	ldr	r2, [r4, #0]
 801af12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801af16:	4415      	add	r5, r2
 801af18:	f8dc 2000 	ldr.w	r2, [ip]
 801af1c:	9200      	str	r2, [sp, #0]
 801af1e:	2900      	cmp	r1, #0
 801af20:	dc03      	bgt.n	801af2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801af22:	9a01      	ldr	r2, [sp, #4]
 801af24:	2a00      	cmp	r2, #0
 801af26:	f340 812b 	ble.w	801b180 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801af2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801af2c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801af30:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801af34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801af36:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801af3a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801af3e:	2b00      	cmp	r3, #0
 801af40:	dd0e      	ble.n	801af60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801af42:	1422      	asrs	r2, r4, #16
 801af44:	d405      	bmi.n	801af52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801af46:	4572      	cmp	r2, lr
 801af48:	da03      	bge.n	801af52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801af4a:	1402      	asrs	r2, r0, #16
 801af4c:	d401      	bmi.n	801af52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801af4e:	42ba      	cmp	r2, r7
 801af50:	db07      	blt.n	801af62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801af52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801af54:	3b01      	subs	r3, #1
 801af56:	3503      	adds	r5, #3
 801af58:	4414      	add	r4, r2
 801af5a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801af5c:	4410      	add	r0, r2
 801af5e:	e7ee      	b.n	801af3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801af60:	d06f      	beq.n	801b042 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801af62:	1e5a      	subs	r2, r3, #1
 801af64:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801af66:	fb06 4602 	mla	r6, r6, r2, r4
 801af6a:	1436      	asrs	r6, r6, #16
 801af6c:	d45e      	bmi.n	801b02c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801af6e:	4576      	cmp	r6, lr
 801af70:	da5c      	bge.n	801b02c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801af72:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801af74:	fb06 0202 	mla	r2, r6, r2, r0
 801af78:	1412      	asrs	r2, r2, #16
 801af7a:	d457      	bmi.n	801b02c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801af7c:	42ba      	cmp	r2, r7
 801af7e:	da55      	bge.n	801b02c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801af80:	1cee      	adds	r6, r5, #3
 801af82:	469a      	mov	sl, r3
 801af84:	f1ba 0f00 	cmp.w	sl, #0
 801af88:	dd56      	ble.n	801b038 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801af8a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801af8e:	1427      	asrs	r7, r4, #16
 801af90:	1402      	asrs	r2, r0, #16
 801af92:	fb0e 7202 	mla	r2, lr, r2, r7
 801af96:	9f00      	ldr	r7, [sp, #0]
 801af98:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801af9c:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801afa0:	d03c      	beq.n	801b01c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801afa2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801afa6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801afaa:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801afae:	fa5f f28e 	uxtb.w	r2, lr
 801afb2:	b2ff      	uxtb	r7, r7
 801afb4:	f000 80dd 	beq.w	801b172 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801afb8:	fa1f f882 	uxth.w	r8, r2
 801afbc:	43d2      	mvns	r2, r2
 801afbe:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801afc2:	fb17 f708 	smulbb	r7, r7, r8
 801afc6:	b2d2      	uxtb	r2, r2
 801afc8:	fb19 f908 	smulbb	r9, r9, r8
 801afcc:	fb0e 7702 	mla	r7, lr, r2, r7
 801afd0:	fb1b f808 	smulbb	r8, fp, r8
 801afd4:	b2bf      	uxth	r7, r7
 801afd6:	f107 0e01 	add.w	lr, r7, #1
 801afda:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801afde:	123f      	asrs	r7, r7, #8
 801afe0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801afe4:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801afe8:	fb07 9902 	mla	r9, r7, r2, r9
 801afec:	fa1f f989 	uxth.w	r9, r9
 801aff0:	f109 0701 	add.w	r7, r9, #1
 801aff4:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801aff8:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801affc:	fb07 8802 	mla	r8, r7, r2, r8
 801b000:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b004:	fa1f f888 	uxth.w	r8, r8
 801b008:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b00c:	f108 0201 	add.w	r2, r8, #1
 801b010:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b014:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b018:	f806 8c01 	strb.w	r8, [r6, #-1]
 801b01c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b01e:	3603      	adds	r6, #3
 801b020:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b024:	4414      	add	r4, r2
 801b026:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b028:	4410      	add	r0, r2
 801b02a:	e7ab      	b.n	801af84 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b02c:	f04f 0e00 	mov.w	lr, #0
 801b030:	eba3 020e 	sub.w	r2, r3, lr
 801b034:	2a00      	cmp	r2, #0
 801b036:	dc3d      	bgt.n	801b0b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801b038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b03c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b040:	441d      	add	r5, r3
 801b042:	2900      	cmp	r1, #0
 801b044:	f340 809c 	ble.w	801b180 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b048:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b04c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b04e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b052:	3901      	subs	r1, #1
 801b054:	eeb0 6a62 	vmov.f32	s12, s5
 801b058:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b05c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b060:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b064:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801b068:	eeb0 6a43 	vmov.f32	s12, s6
 801b06c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b070:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801b074:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b078:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b07c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b080:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b084:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b088:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b08c:	ee12 2a90 	vmov	r2, s5
 801b090:	eef0 2a47 	vmov.f32	s5, s14
 801b094:	fb92 f3f3 	sdiv	r3, r2, r3
 801b098:	ee13 2a10 	vmov	r2, s6
 801b09c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b09e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0a0:	eeb0 3a67 	vmov.f32	s6, s15
 801b0a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0a8:	9a01      	ldr	r2, [sp, #4]
 801b0aa:	9310      	str	r3, [sp, #64]	@ 0x40
 801b0ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0ae:	bf08      	it	eq
 801b0b0:	4613      	moveq	r3, r2
 801b0b2:	e734      	b.n	801af1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801b0b4:	1427      	asrs	r7, r4, #16
 801b0b6:	d44d      	bmi.n	801b154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b0b8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b0bc:	42be      	cmp	r6, r7
 801b0be:	dd49      	ble.n	801b154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b0c0:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b0c4:	d446      	bmi.n	801b154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b0c6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b0ca:	4542      	cmp	r2, r8
 801b0cc:	dd42      	ble.n	801b154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b0ce:	b236      	sxth	r6, r6
 801b0d0:	9a00      	ldr	r2, [sp, #0]
 801b0d2:	fb08 7606 	mla	r6, r8, r6, r7
 801b0d6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801b0da:	0e3a      	lsrs	r2, r7, #24
 801b0dc:	d03a      	beq.n	801b154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b0de:	2aff      	cmp	r2, #255	@ 0xff
 801b0e0:	b2d6      	uxtb	r6, r2
 801b0e2:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b0e6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801b0ea:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801b0ee:	b2ff      	uxtb	r7, r7
 801b0f0:	d037      	beq.n	801b162 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801b0f2:	fa1f f986 	uxth.w	r9, r6
 801b0f6:	4472      	add	r2, lr
 801b0f8:	43f6      	mvns	r6, r6
 801b0fa:	f815 8002 	ldrb.w	r8, [r5, r2]
 801b0fe:	fb17 f709 	smulbb	r7, r7, r9
 801b102:	fb1a fa09 	smulbb	sl, sl, r9
 801b106:	b2f6      	uxtb	r6, r6
 801b108:	fb1b f909 	smulbb	r9, fp, r9
 801b10c:	fb08 7706 	mla	r7, r8, r6, r7
 801b110:	b2bf      	uxth	r7, r7
 801b112:	f107 0801 	add.w	r8, r7, #1
 801b116:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801b11a:	123f      	asrs	r7, r7, #8
 801b11c:	54af      	strb	r7, [r5, r2]
 801b11e:	442a      	add	r2, r5
 801b120:	7857      	ldrb	r7, [r2, #1]
 801b122:	fb07 aa06 	mla	sl, r7, r6, sl
 801b126:	fa1f fa8a 	uxth.w	sl, sl
 801b12a:	f10a 0701 	add.w	r7, sl, #1
 801b12e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b132:	7897      	ldrb	r7, [r2, #2]
 801b134:	fb07 9906 	mla	r9, r7, r6, r9
 801b138:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b13c:	fa1f f989 	uxth.w	r9, r9
 801b140:	f882 a001 	strb.w	sl, [r2, #1]
 801b144:	f109 0601 	add.w	r6, r9, #1
 801b148:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801b14c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b150:	f882 9002 	strb.w	r9, [r2, #2]
 801b154:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b156:	f10e 0e01 	add.w	lr, lr, #1
 801b15a:	4414      	add	r4, r2
 801b15c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b15e:	4410      	add	r0, r2
 801b160:	e766      	b.n	801b030 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b162:	4472      	add	r2, lr
 801b164:	54af      	strb	r7, [r5, r2]
 801b166:	442a      	add	r2, r5
 801b168:	f882 a001 	strb.w	sl, [r2, #1]
 801b16c:	f882 b002 	strb.w	fp, [r2, #2]
 801b170:	e7f0      	b.n	801b154 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801b172:	f806 7c03 	strb.w	r7, [r6, #-3]
 801b176:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b17a:	f806 bc01 	strb.w	fp, [r6, #-1]
 801b17e:	e74d      	b.n	801b01c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b180:	b003      	add	sp, #12
 801b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b188 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b18c:	b087      	sub	sp, #28
 801b18e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b192:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b194:	9204      	str	r2, [sp, #16]
 801b196:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b19a:	6860      	ldr	r0, [r4, #4]
 801b19c:	9205      	str	r2, [sp, #20]
 801b19e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801b1a2:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801b1a6:	9101      	str	r1, [sp, #4]
 801b1a8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801b1ac:	fb00 2505 	mla	r5, r0, r5, r2
 801b1b0:	6822      	ldr	r2, [r4, #0]
 801b1b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b1b6:	4415      	add	r5, r2
 801b1b8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b1bc:	3201      	adds	r2, #1
 801b1be:	f022 0201 	bic.w	r2, r2, #1
 801b1c2:	9202      	str	r2, [sp, #8]
 801b1c4:	f8dc 2000 	ldr.w	r2, [ip]
 801b1c8:	9203      	str	r2, [sp, #12]
 801b1ca:	9a01      	ldr	r2, [sp, #4]
 801b1cc:	2a00      	cmp	r2, #0
 801b1ce:	dc03      	bgt.n	801b1d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b1d0:	9a04      	ldr	r2, [sp, #16]
 801b1d2:	2a00      	cmp	r2, #0
 801b1d4:	f340 8135 	ble.w	801b442 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b1d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b1da:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b1de:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b1e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b1e4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b1e8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	dd0d      	ble.n	801b20c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b1f0:	1422      	asrs	r2, r4, #16
 801b1f2:	d405      	bmi.n	801b200 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b1f4:	4542      	cmp	r2, r8
 801b1f6:	da03      	bge.n	801b200 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b1f8:	1402      	asrs	r2, r0, #16
 801b1fa:	d401      	bmi.n	801b200 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b1fc:	42ba      	cmp	r2, r7
 801b1fe:	db06      	blt.n	801b20e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b200:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b202:	4474      	add	r4, lr
 801b204:	3b01      	subs	r3, #1
 801b206:	3503      	adds	r5, #3
 801b208:	4410      	add	r0, r2
 801b20a:	e7ef      	b.n	801b1ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b20c:	d077      	beq.n	801b2fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801b20e:	1e5a      	subs	r2, r3, #1
 801b210:	fb0e 4602 	mla	r6, lr, r2, r4
 801b214:	1436      	asrs	r6, r6, #16
 801b216:	d469      	bmi.n	801b2ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b218:	4546      	cmp	r6, r8
 801b21a:	da67      	bge.n	801b2ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b21c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b21e:	fb06 0202 	mla	r2, r6, r2, r0
 801b222:	1412      	asrs	r2, r2, #16
 801b224:	d462      	bmi.n	801b2ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b226:	42ba      	cmp	r2, r7
 801b228:	da60      	bge.n	801b2ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b22a:	1cee      	adds	r6, r5, #3
 801b22c:	4699      	mov	r9, r3
 801b22e:	f1b9 0f00 	cmp.w	r9, #0
 801b232:	dd5f      	ble.n	801b2f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801b234:	1422      	asrs	r2, r4, #16
 801b236:	9902      	ldr	r1, [sp, #8]
 801b238:	1407      	asrs	r7, r0, #16
 801b23a:	fb01 2707 	mla	r7, r1, r7, r2
 801b23e:	9903      	ldr	r1, [sp, #12]
 801b240:	087a      	lsrs	r2, r7, #1
 801b242:	5c8a      	ldrb	r2, [r1, r2]
 801b244:	07f9      	lsls	r1, r7, #31
 801b246:	bf54      	ite	pl
 801b248:	f002 020f 	andpl.w	r2, r2, #15
 801b24c:	1112      	asrmi	r2, r2, #4
 801b24e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b252:	b2d2      	uxtb	r2, r2
 801b254:	2a00      	cmp	r2, #0
 801b256:	d042      	beq.n	801b2de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801b258:	497b      	ldr	r1, [pc, #492]	@ (801b448 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801b25a:	680f      	ldr	r7, [r1, #0]
 801b25c:	9905      	ldr	r1, [sp, #20]
 801b25e:	fa5f fb87 	uxtb.w	fp, r7
 801b262:	434a      	muls	r2, r1
 801b264:	f102 0801 	add.w	r8, r2, #1
 801b268:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801b26c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801b270:	1212      	asrs	r2, r2, #8
 801b272:	fa1f fa82 	uxth.w	sl, r2
 801b276:	43d2      	mvns	r2, r2
 801b278:	fb1b fb0a 	smulbb	fp, fp, sl
 801b27c:	b2d2      	uxtb	r2, r2
 801b27e:	fb08 b802 	mla	r8, r8, r2, fp
 801b282:	fa1f f888 	uxth.w	r8, r8
 801b286:	f108 0b01 	add.w	fp, r8, #1
 801b28a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b28e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b292:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b296:	fb1b fb0a 	smulbb	fp, fp, sl
 801b29a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b29e:	fb17 fa0a 	smulbb	sl, r7, sl
 801b2a2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b2a6:	f806 8c03 	strb.w	r8, [r6, #-3]
 801b2aa:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801b2ae:	fb07 aa02 	mla	sl, r7, r2, sl
 801b2b2:	fb08 b802 	mla	r8, r8, r2, fp
 801b2b6:	fa1f fa8a 	uxth.w	sl, sl
 801b2ba:	fa1f f888 	uxth.w	r8, r8
 801b2be:	f10a 0701 	add.w	r7, sl, #1
 801b2c2:	f108 0b01 	add.w	fp, r8, #1
 801b2c6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b2ca:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b2ce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b2d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b2d6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801b2da:	f806 8c02 	strb.w	r8, [r6, #-2]
 801b2de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b2e0:	4474      	add	r4, lr
 801b2e2:	3603      	adds	r6, #3
 801b2e4:	f109 39ff 	add.w	r9, r9, #4294967295
 801b2e8:	4410      	add	r0, r2
 801b2ea:	e7a0      	b.n	801b22e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b2ec:	2700      	movs	r7, #0
 801b2ee:	1bda      	subs	r2, r3, r7
 801b2f0:	2a00      	cmp	r2, #0
 801b2f2:	dc3e      	bgt.n	801b372 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b2f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b2f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2fc:	441d      	add	r5, r3
 801b2fe:	9b01      	ldr	r3, [sp, #4]
 801b300:	2b00      	cmp	r3, #0
 801b302:	f340 809e 	ble.w	801b442 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b306:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b30a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b30c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b310:	eeb0 6a62 	vmov.f32	s12, s5
 801b314:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b318:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b31c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b320:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801b324:	eeb0 6a43 	vmov.f32	s12, s6
 801b328:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b32c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801b330:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b334:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b338:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b33c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b340:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b344:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b348:	ee12 2a90 	vmov	r2, s5
 801b34c:	eef0 2a47 	vmov.f32	s5, s14
 801b350:	fb92 fef3 	sdiv	lr, r2, r3
 801b354:	ee13 2a10 	vmov	r2, s6
 801b358:	eeb0 3a67 	vmov.f32	s6, s15
 801b35c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b360:	9314      	str	r3, [sp, #80]	@ 0x50
 801b362:	9b01      	ldr	r3, [sp, #4]
 801b364:	9a04      	ldr	r2, [sp, #16]
 801b366:	3b01      	subs	r3, #1
 801b368:	9301      	str	r3, [sp, #4]
 801b36a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b36c:	bf08      	it	eq
 801b36e:	4613      	moveq	r3, r2
 801b370:	e72b      	b.n	801b1ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b372:	1426      	asrs	r6, r4, #16
 801b374:	d460      	bmi.n	801b438 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b376:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b37a:	42b2      	cmp	r2, r6
 801b37c:	dd5c      	ble.n	801b438 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b37e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b382:	d459      	bmi.n	801b438 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b384:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b388:	4542      	cmp	r2, r8
 801b38a:	dd55      	ble.n	801b438 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b38c:	9a02      	ldr	r2, [sp, #8]
 801b38e:	9903      	ldr	r1, [sp, #12]
 801b390:	fb08 6602 	mla	r6, r8, r2, r6
 801b394:	0872      	lsrs	r2, r6, #1
 801b396:	07f6      	lsls	r6, r6, #31
 801b398:	5c8a      	ldrb	r2, [r1, r2]
 801b39a:	bf54      	ite	pl
 801b39c:	f002 020f 	andpl.w	r2, r2, #15
 801b3a0:	1112      	asrmi	r2, r2, #4
 801b3a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b3a6:	b2d2      	uxtb	r2, r2
 801b3a8:	2a00      	cmp	r2, #0
 801b3aa:	d045      	beq.n	801b438 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b3ac:	4926      	ldr	r1, [pc, #152]	@ (801b448 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801b3ae:	f8d1 8000 	ldr.w	r8, [r1]
 801b3b2:	9905      	ldr	r1, [sp, #20]
 801b3b4:	fa5f fb88 	uxtb.w	fp, r8
 801b3b8:	434a      	muls	r2, r1
 801b3ba:	1c56      	adds	r6, r2, #1
 801b3bc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b3c0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b3c4:	1212      	asrs	r2, r2, #8
 801b3c6:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b3ca:	fa1f fa82 	uxth.w	sl, r2
 801b3ce:	43d2      	mvns	r2, r2
 801b3d0:	fb1b fb0a 	smulbb	fp, fp, sl
 801b3d4:	b2d2      	uxtb	r2, r2
 801b3d6:	fb09 b902 	mla	r9, r9, r2, fp
 801b3da:	fa1f f989 	uxth.w	r9, r9
 801b3de:	f109 0b01 	add.w	fp, r9, #1
 801b3e2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b3e6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801b3ea:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801b3ee:	fb1b fb0a 	smulbb	fp, fp, sl
 801b3f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b3f6:	fb18 fa0a 	smulbb	sl, r8, sl
 801b3fa:	f805 9006 	strb.w	r9, [r5, r6]
 801b3fe:	442e      	add	r6, r5
 801b400:	f896 8002 	ldrb.w	r8, [r6, #2]
 801b404:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b408:	fb08 aa02 	mla	sl, r8, r2, sl
 801b40c:	fb09 b902 	mla	r9, r9, r2, fp
 801b410:	fa1f fa8a 	uxth.w	sl, sl
 801b414:	fa1f f989 	uxth.w	r9, r9
 801b418:	f10a 0801 	add.w	r8, sl, #1
 801b41c:	f109 0b01 	add.w	fp, r9, #1
 801b420:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801b424:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b428:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b42c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b430:	f886 a002 	strb.w	sl, [r6, #2]
 801b434:	f886 9001 	strb.w	r9, [r6, #1]
 801b438:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b43a:	4474      	add	r4, lr
 801b43c:	3701      	adds	r7, #1
 801b43e:	4410      	add	r0, r2
 801b440:	e755      	b.n	801b2ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801b442:	b007      	add	sp, #28
 801b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b448:	2402642c 	.word	0x2402642c

0801b44c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b450:	b085      	sub	sp, #20
 801b452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b456:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b458:	9203      	str	r2, [sp, #12]
 801b45a:	6860      	ldr	r0, [r4, #4]
 801b45c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b460:	9100      	str	r1, [sp, #0]
 801b462:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801b466:	fb00 2606 	mla	r6, r0, r6, r2
 801b46a:	6822      	ldr	r2, [r4, #0]
 801b46c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b470:	4416      	add	r6, r2
 801b472:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b476:	3201      	adds	r2, #1
 801b478:	f022 0201 	bic.w	r2, r2, #1
 801b47c:	9201      	str	r2, [sp, #4]
 801b47e:	f8dc 2000 	ldr.w	r2, [ip]
 801b482:	9202      	str	r2, [sp, #8]
 801b484:	9a00      	ldr	r2, [sp, #0]
 801b486:	2a00      	cmp	r2, #0
 801b488:	dc03      	bgt.n	801b492 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b48a:	9a03      	ldr	r2, [sp, #12]
 801b48c:	2a00      	cmp	r2, #0
 801b48e:	f340 8140 	ble.w	801b712 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b492:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b494:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b498:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801b49c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b49e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b4a2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	dd0e      	ble.n	801b4c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b4aa:	142a      	asrs	r2, r5, #16
 801b4ac:	d405      	bmi.n	801b4ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b4ae:	4572      	cmp	r2, lr
 801b4b0:	da03      	bge.n	801b4ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b4b2:	1422      	asrs	r2, r4, #16
 801b4b4:	d401      	bmi.n	801b4ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b4b6:	42ba      	cmp	r2, r7
 801b4b8:	db07      	blt.n	801b4ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b4ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b4bc:	3b01      	subs	r3, #1
 801b4be:	3603      	adds	r6, #3
 801b4c0:	4415      	add	r5, r2
 801b4c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b4c4:	4414      	add	r4, r2
 801b4c6:	e7ee      	b.n	801b4a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b4c8:	d072      	beq.n	801b5b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b4ca:	1e5a      	subs	r2, r3, #1
 801b4cc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b4ce:	fb00 5002 	mla	r0, r0, r2, r5
 801b4d2:	1400      	asrs	r0, r0, #16
 801b4d4:	d463      	bmi.n	801b59e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b4d6:	4570      	cmp	r0, lr
 801b4d8:	da61      	bge.n	801b59e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b4da:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b4dc:	fb00 4202 	mla	r2, r0, r2, r4
 801b4e0:	1412      	asrs	r2, r2, #16
 801b4e2:	d45c      	bmi.n	801b59e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b4e4:	42ba      	cmp	r2, r7
 801b4e6:	da5a      	bge.n	801b59e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b4e8:	1cf0      	adds	r0, r6, #3
 801b4ea:	469a      	mov	sl, r3
 801b4ec:	f1ba 0f00 	cmp.w	sl, #0
 801b4f0:	dd59      	ble.n	801b5a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b4f2:	142a      	asrs	r2, r5, #16
 801b4f4:	9901      	ldr	r1, [sp, #4]
 801b4f6:	1427      	asrs	r7, r4, #16
 801b4f8:	fb01 2707 	mla	r7, r1, r7, r2
 801b4fc:	9902      	ldr	r1, [sp, #8]
 801b4fe:	087a      	lsrs	r2, r7, #1
 801b500:	5c8a      	ldrb	r2, [r1, r2]
 801b502:	07f9      	lsls	r1, r7, #31
 801b504:	bf54      	ite	pl
 801b506:	f002 020f 	andpl.w	r2, r2, #15
 801b50a:	1112      	asrmi	r2, r2, #4
 801b50c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b510:	b2d2      	uxtb	r2, r2
 801b512:	2a00      	cmp	r2, #0
 801b514:	d03b      	beq.n	801b58e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b516:	4980      	ldr	r1, [pc, #512]	@ (801b718 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b518:	2aff      	cmp	r2, #255	@ 0xff
 801b51a:	680f      	ldr	r7, [r1, #0]
 801b51c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b520:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b524:	b2ff      	uxtb	r7, r7
 801b526:	f000 80ed 	beq.w	801b704 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801b52a:	fa1f f882 	uxth.w	r8, r2
 801b52e:	43d2      	mvns	r2, r2
 801b530:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801b534:	fb17 f708 	smulbb	r7, r7, r8
 801b538:	b2d2      	uxtb	r2, r2
 801b53a:	fb19 f908 	smulbb	r9, r9, r8
 801b53e:	fb0e 7702 	mla	r7, lr, r2, r7
 801b542:	fb1b f808 	smulbb	r8, fp, r8
 801b546:	b2bf      	uxth	r7, r7
 801b548:	f107 0e01 	add.w	lr, r7, #1
 801b54c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b550:	123f      	asrs	r7, r7, #8
 801b552:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b556:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801b55a:	fb07 9902 	mla	r9, r7, r2, r9
 801b55e:	fa1f f989 	uxth.w	r9, r9
 801b562:	f109 0701 	add.w	r7, r9, #1
 801b566:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b56a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801b56e:	fb07 8802 	mla	r8, r7, r2, r8
 801b572:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b576:	fa1f f888 	uxth.w	r8, r8
 801b57a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b57e:	f108 0201 	add.w	r2, r8, #1
 801b582:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b586:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b58a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801b58e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b590:	3003      	adds	r0, #3
 801b592:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b596:	4415      	add	r5, r2
 801b598:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b59a:	4414      	add	r4, r2
 801b59c:	e7a6      	b.n	801b4ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b59e:	2700      	movs	r7, #0
 801b5a0:	1bda      	subs	r2, r3, r7
 801b5a2:	2a00      	cmp	r2, #0
 801b5a4:	dc40      	bgt.n	801b628 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b5a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b5aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5ae:	441e      	add	r6, r3
 801b5b0:	9b00      	ldr	r3, [sp, #0]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	f340 80ad 	ble.w	801b712 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b5b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b5c2:	eeb0 6a62 	vmov.f32	s12, s5
 801b5c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b5ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b5ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b5d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b5d6:	eeb0 6a43 	vmov.f32	s12, s6
 801b5da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b5de:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b5e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b5e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b5ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b5ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b5f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b5f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b5fa:	ee12 2a90 	vmov	r2, s5
 801b5fe:	eef0 2a47 	vmov.f32	s5, s14
 801b602:	fb92 f3f3 	sdiv	r3, r2, r3
 801b606:	ee13 2a10 	vmov	r2, s6
 801b60a:	9311      	str	r3, [sp, #68]	@ 0x44
 801b60c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b60e:	eeb0 3a67 	vmov.f32	s6, s15
 801b612:	fb92 f3f3 	sdiv	r3, r2, r3
 801b616:	9312      	str	r3, [sp, #72]	@ 0x48
 801b618:	9b00      	ldr	r3, [sp, #0]
 801b61a:	9a03      	ldr	r2, [sp, #12]
 801b61c:	3b01      	subs	r3, #1
 801b61e:	9300      	str	r3, [sp, #0]
 801b620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b622:	bf08      	it	eq
 801b624:	4613      	moveq	r3, r2
 801b626:	e72d      	b.n	801b484 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b628:	1428      	asrs	r0, r5, #16
 801b62a:	d45c      	bmi.n	801b6e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b62c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b630:	4282      	cmp	r2, r0
 801b632:	dd58      	ble.n	801b6e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b634:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801b638:	d455      	bmi.n	801b6e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b63a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b63e:	4572      	cmp	r2, lr
 801b640:	dd51      	ble.n	801b6e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b642:	9a01      	ldr	r2, [sp, #4]
 801b644:	9902      	ldr	r1, [sp, #8]
 801b646:	fb0e 0002 	mla	r0, lr, r2, r0
 801b64a:	0842      	lsrs	r2, r0, #1
 801b64c:	07c0      	lsls	r0, r0, #31
 801b64e:	5c8a      	ldrb	r2, [r1, r2]
 801b650:	bf54      	ite	pl
 801b652:	f002 020f 	andpl.w	r2, r2, #15
 801b656:	1112      	asrmi	r2, r2, #4
 801b658:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b65c:	b2d2      	uxtb	r2, r2
 801b65e:	2a00      	cmp	r2, #0
 801b660:	d041      	beq.n	801b6e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b662:	492d      	ldr	r1, [pc, #180]	@ (801b718 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b664:	2aff      	cmp	r2, #255	@ 0xff
 801b666:	6808      	ldr	r0, [r1, #0]
 801b668:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801b66c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b670:	fa5f fe80 	uxtb.w	lr, r0
 801b674:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801b678:	d03b      	beq.n	801b6f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801b67a:	fa1f f982 	uxth.w	r9, r2
 801b67e:	4438      	add	r0, r7
 801b680:	43d2      	mvns	r2, r2
 801b682:	f816 8000 	ldrb.w	r8, [r6, r0]
 801b686:	fb1e fe09 	smulbb	lr, lr, r9
 801b68a:	fb1a fa09 	smulbb	sl, sl, r9
 801b68e:	b2d2      	uxtb	r2, r2
 801b690:	fb1b f909 	smulbb	r9, fp, r9
 801b694:	fb08 ee02 	mla	lr, r8, r2, lr
 801b698:	fa1f fe8e 	uxth.w	lr, lr
 801b69c:	f10e 0801 	add.w	r8, lr, #1
 801b6a0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801b6a4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b6a8:	f806 e000 	strb.w	lr, [r6, r0]
 801b6ac:	4430      	add	r0, r6
 801b6ae:	f890 e001 	ldrb.w	lr, [r0, #1]
 801b6b2:	fb0e aa02 	mla	sl, lr, r2, sl
 801b6b6:	fa1f fa8a 	uxth.w	sl, sl
 801b6ba:	f10a 0e01 	add.w	lr, sl, #1
 801b6be:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801b6c2:	f890 e002 	ldrb.w	lr, [r0, #2]
 801b6c6:	fb0e 9902 	mla	r9, lr, r2, r9
 801b6ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b6ce:	fa1f f989 	uxth.w	r9, r9
 801b6d2:	f880 a001 	strb.w	sl, [r0, #1]
 801b6d6:	f109 0201 	add.w	r2, r9, #1
 801b6da:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801b6de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6e2:	f880 9002 	strb.w	r9, [r0, #2]
 801b6e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b6e8:	3701      	adds	r7, #1
 801b6ea:	4415      	add	r5, r2
 801b6ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b6ee:	4414      	add	r4, r2
 801b6f0:	e756      	b.n	801b5a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b6f2:	4438      	add	r0, r7
 801b6f4:	f806 e000 	strb.w	lr, [r6, r0]
 801b6f8:	4430      	add	r0, r6
 801b6fa:	f880 a001 	strb.w	sl, [r0, #1]
 801b6fe:	f880 b002 	strb.w	fp, [r0, #2]
 801b702:	e7f0      	b.n	801b6e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b704:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b708:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b70c:	f800 bc01 	strb.w	fp, [r0, #-1]
 801b710:	e73d      	b.n	801b58e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b712:	b005      	add	sp, #20
 801b714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b718:	2402642c 	.word	0x2402642c

0801b71c <_ZN8touchgfx8LCD24bppD1Ev>:
 801b71c:	4770      	bx	lr

0801b71e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801b71e:	4770      	bx	lr

0801b720 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801b720:	4770      	bx	lr

0801b722 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801b722:	4770      	bx	lr

0801b724 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801b724:	4770      	bx	lr

0801b726 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b726:	4770      	bx	lr

0801b728 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b728:	4770      	bx	lr

0801b72a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b72a:	4770      	bx	lr

0801b72c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b72c:	4770      	bx	lr

0801b72e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b72e:	4770      	bx	lr

0801b730 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b730:	4770      	bx	lr

0801b732 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b732:	4770      	bx	lr

0801b734 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b734:	4770      	bx	lr

0801b736 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b736:	4770      	bx	lr

0801b738 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b738:	4770      	bx	lr

0801b73a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b73a:	4770      	bx	lr

0801b73c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b73c:	4770      	bx	lr

0801b73e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b73e:	4770      	bx	lr

0801b740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b740:	4770      	bx	lr

0801b742 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b742:	4770      	bx	lr

0801b744 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b744:	4770      	bx	lr

0801b746 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b746:	4770      	bx	lr

0801b748 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b748:	4770      	bx	lr

0801b74a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b74a:	4770      	bx	lr

0801b74c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b74c:	4770      	bx	lr
	...

0801b750 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801b750:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b752:	4606      	mov	r6, r0
 801b754:	b087      	sub	sp, #28
 801b756:	4615      	mov	r5, r2
 801b758:	461f      	mov	r7, r3
 801b75a:	b353      	cbz	r3, 801b7b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b75c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b760:	2b00      	cmp	r3, #0
 801b762:	dd26      	ble.n	801b7b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b764:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	dd22      	ble.n	801b7b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b76c:	6808      	ldr	r0, [r1, #0]
 801b76e:	aa04      	add	r2, sp, #16
 801b770:	6849      	ldr	r1, [r1, #4]
 801b772:	4c1b      	ldr	r4, [pc, #108]	@ (801b7e0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801b774:	c203      	stmia	r2!, {r0, r1}
 801b776:	a804      	add	r0, sp, #16
 801b778:	f7fa fdcc 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b77c:	6820      	ldr	r0, [r4, #0]
 801b77e:	6803      	ldr	r3, [r0, #0]
 801b780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b782:	4798      	blx	r3
 801b784:	2fff      	cmp	r7, #255	@ 0xff
 801b786:	d016      	beq.n	801b7b6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801b788:	f010 0f08 	tst.w	r0, #8
 801b78c:	6820      	ldr	r0, [r4, #0]
 801b78e:	d015      	beq.n	801b7bc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801b790:	2400      	movs	r4, #0
 801b792:	6801      	ldr	r1, [r0, #0]
 801b794:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b798:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b79c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801b7a0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801b7a4:	9401      	str	r4, [sp, #4]
 801b7a6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801b7aa:	9400      	str	r4, [sp, #0]
 801b7ac:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801b7ae:	4629      	mov	r1, r5
 801b7b0:	47a0      	blx	r4
 801b7b2:	b007      	add	sp, #28
 801b7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7b6:	f010 0f02 	tst.w	r0, #2
 801b7ba:	e7e7      	b.n	801b78c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801b7bc:	6803      	ldr	r3, [r0, #0]
 801b7be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b7c0:	4798      	blx	r3
 801b7c2:	4b08      	ldr	r3, [pc, #32]	@ (801b7e4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801b7c4:	4601      	mov	r1, r0
 801b7c6:	4630      	mov	r0, r6
 801b7c8:	881a      	ldrh	r2, [r3, #0]
 801b7ca:	6833      	ldr	r3, [r6, #0]
 801b7cc:	e9cd 5700 	strd	r5, r7, [sp]
 801b7d0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801b7d2:	ab04      	add	r3, sp, #16
 801b7d4:	47a8      	blx	r5
 801b7d6:	6820      	ldr	r0, [r4, #0]
 801b7d8:	6803      	ldr	r3, [r0, #0]
 801b7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b7dc:	4798      	blx	r3
 801b7de:	e7e8      	b.n	801b7b2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b7e0:	2402641c 	.word	0x2402641c
 801b7e4:	24026416 	.word	0x24026416

0801b7e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b7e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b7ec:	b08b      	sub	sp, #44	@ 0x2c
 801b7ee:	460d      	mov	r5, r1
 801b7f0:	4616      	mov	r6, r2
 801b7f2:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801b7f6:	f1b8 0f00 	cmp.w	r8, #0
 801b7fa:	d047      	beq.n	801b88c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b7fc:	6810      	ldr	r0, [r2, #0]
 801b7fe:	ac06      	add	r4, sp, #24
 801b800:	6851      	ldr	r1, [r2, #4]
 801b802:	4f51      	ldr	r7, [pc, #324]	@ (801b948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801b804:	c403      	stmia	r4!, {r0, r1}
 801b806:	6818      	ldr	r0, [r3, #0]
 801b808:	ac08      	add	r4, sp, #32
 801b80a:	6859      	ldr	r1, [r3, #4]
 801b80c:	c403      	stmia	r4!, {r0, r1}
 801b80e:	a806      	add	r0, sp, #24
 801b810:	f7fa fd80 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b814:	4631      	mov	r1, r6
 801b816:	a808      	add	r0, sp, #32
 801b818:	f7fa fda4 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b81c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b820:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801b824:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b828:	6838      	ldr	r0, [r7, #0]
 801b82a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b82e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801b832:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801b836:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b83a:	440d      	add	r5, r1
 801b83c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b840:	440a      	add	r2, r1
 801b842:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b846:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b84a:	4413      	add	r3, r2
 801b84c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801b850:	6803      	ldr	r3, [r0, #0]
 801b852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b854:	4798      	blx	r3
 801b856:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801b85a:	d01a      	beq.n	801b892 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801b85c:	f010 0f04 	tst.w	r0, #4
 801b860:	6838      	ldr	r0, [r7, #0]
 801b862:	d019      	beq.n	801b898 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801b864:	2100      	movs	r1, #0
 801b866:	6807      	ldr	r7, [r0, #0]
 801b868:	b2a4      	uxth	r4, r4
 801b86a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b86e:	b2b6      	uxth	r6, r6
 801b870:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801b874:	9401      	str	r4, [sp, #4]
 801b876:	9600      	str	r6, [sp, #0]
 801b878:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b87c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801b880:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b884:	9102      	str	r1, [sp, #8]
 801b886:	4629      	mov	r1, r5
 801b888:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b88a:	47a0      	blx	r4
 801b88c:	b00b      	add	sp, #44	@ 0x2c
 801b88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b892:	f010 0f01 	tst.w	r0, #1
 801b896:	e7e3      	b.n	801b860 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801b898:	6803      	ldr	r3, [r0, #0]
 801b89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b89c:	4798      	blx	r3
 801b89e:	4a2b      	ldr	r2, [pc, #172]	@ (801b94c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801b8a0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801b8a4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801b8a8:	8813      	ldrh	r3, [r2, #0]
 801b8aa:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801b8ae:	fb03 f404 	mul.w	r4, r3, r4
 801b8b2:	fb03 c101 	mla	r1, r3, r1, ip
 801b8b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b8ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b8be:	4408      	add	r0, r1
 801b8c0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801b8c4:	4404      	add	r4, r0
 801b8c6:	d02e      	beq.n	801b926 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801b8c8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b8cc:	1b9b      	subs	r3, r3, r6
 801b8ce:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801b8d2:	1b96      	subs	r6, r2, r6
 801b8d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8d8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b8dc:	42a0      	cmp	r0, r4
 801b8de:	d22d      	bcs.n	801b93c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b8e0:	eb00 0e01 	add.w	lr, r0, r1
 801b8e4:	4570      	cmp	r0, lr
 801b8e6:	d210      	bcs.n	801b90a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801b8e8:	f890 9000 	ldrb.w	r9, [r0]
 801b8ec:	f815 2b01 	ldrb.w	r2, [r5], #1
 801b8f0:	fb19 f90c 	smulbb	r9, r9, ip
 801b8f4:	fb02 9208 	mla	r2, r2, r8, r9
 801b8f8:	b292      	uxth	r2, r2
 801b8fa:	f102 0901 	add.w	r9, r2, #1
 801b8fe:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801b902:	1212      	asrs	r2, r2, #8
 801b904:	f800 2b01 	strb.w	r2, [r0], #1
 801b908:	e7ec      	b.n	801b8e4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801b90a:	4418      	add	r0, r3
 801b90c:	4435      	add	r5, r6
 801b90e:	e7e5      	b.n	801b8dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801b910:	8813      	ldrh	r3, [r2, #0]
 801b912:	1b9b      	subs	r3, r3, r6
 801b914:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b918:	4418      	add	r0, r3
 801b91a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b91e:	1b9b      	subs	r3, r3, r6
 801b920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b924:	441d      	add	r5, r3
 801b926:	42a0      	cmp	r0, r4
 801b928:	d208      	bcs.n	801b93c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b92a:	eb00 0c01 	add.w	ip, r0, r1
 801b92e:	4560      	cmp	r0, ip
 801b930:	d2ee      	bcs.n	801b910 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801b932:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b936:	f800 3b01 	strb.w	r3, [r0], #1
 801b93a:	e7f8      	b.n	801b92e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801b93c:	6838      	ldr	r0, [r7, #0]
 801b93e:	6803      	ldr	r3, [r0, #0]
 801b940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b942:	4798      	blx	r3
 801b944:	e7a2      	b.n	801b88c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b946:	bf00      	nop
 801b948:	2402641c 	.word	0x2402641c
 801b94c:	24026416 	.word	0x24026416

0801b950 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b950:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b952:	2300      	movs	r3, #0
 801b954:	b085      	sub	sp, #20
 801b956:	9300      	str	r3, [sp, #0]
 801b958:	4b41      	ldr	r3, [pc, #260]	@ (801ba60 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801b95a:	781b      	ldrb	r3, [r3, #0]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d136      	bne.n	801b9ce <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801b960:	4a40      	ldr	r2, [pc, #256]	@ (801ba64 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b962:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b966:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d131      	bne.n	801b9d2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801b96e:	4b3e      	ldr	r3, [pc, #248]	@ (801ba68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b970:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b974:	ac02      	add	r4, sp, #8
 801b976:	6808      	ldr	r0, [r1, #0]
 801b978:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b97c:	ab02      	add	r3, sp, #8
 801b97e:	6849      	ldr	r1, [r1, #4]
 801b980:	4d3a      	ldr	r5, [pc, #232]	@ (801ba6c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801b982:	c303      	stmia	r3!, {r0, r1}
 801b984:	4669      	mov	r1, sp
 801b986:	4620      	mov	r0, r4
 801b988:	f7fa fcec 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b98c:	4668      	mov	r0, sp
 801b98e:	f7fa fcc1 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b992:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b996:	f8bd 2000 	ldrh.w	r2, [sp]
 801b99a:	462e      	mov	r6, r5
 801b99c:	6828      	ldr	r0, [r5, #0]
 801b99e:	4413      	add	r3, r2
 801b9a0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b9a4:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b9a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b9ac:	4413      	add	r3, r2
 801b9ae:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b9b2:	6803      	ldr	r3, [r0, #0]
 801b9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b9b6:	4798      	blx	r3
 801b9b8:	f010 0f01 	tst.w	r0, #1
 801b9bc:	d00b      	beq.n	801b9d6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801b9be:	6828      	ldr	r0, [r5, #0]
 801b9c0:	6803      	ldr	r3, [r0, #0]
 801b9c2:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b9c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b9c8:	4798      	blx	r3
 801b9ca:	b005      	add	sp, #20
 801b9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9ce:	4a26      	ldr	r2, [pc, #152]	@ (801ba68 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b9d0:	e7c7      	b.n	801b962 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b9d2:	4b24      	ldr	r3, [pc, #144]	@ (801ba64 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b9d4:	e7cc      	b.n	801b970 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b9d6:	6830      	ldr	r0, [r6, #0]
 801b9d8:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801b9dc:	6803      	ldr	r3, [r0, #0]
 801b9de:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801b9e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b9e4:	4798      	blx	r3
 801b9e6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b9ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b9ee:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801b9f2:	fb14 3402 	smlabb	r4, r4, r2, r3
 801b9f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b9fa:	4404      	add	r4, r0
 801b9fc:	6830      	ldr	r0, [r6, #0]
 801b9fe:	6803      	ldr	r3, [r0, #0]
 801ba00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba02:	4798      	blx	r3
 801ba04:	4917      	ldr	r1, [pc, #92]	@ (801ba64 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801ba06:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801ba0a:	880b      	ldrh	r3, [r1, #0]
 801ba0c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801ba10:	fb03 c202 	mla	r2, r3, r2, ip
 801ba14:	437b      	muls	r3, r7
 801ba16:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801ba1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ba1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba22:	4410      	add	r0, r2
 801ba24:	18c2      	adds	r2, r0, r3
 801ba26:	4290      	cmp	r0, r2
 801ba28:	d214      	bcs.n	801ba54 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801ba2a:	eb00 0c07 	add.w	ip, r0, r7
 801ba2e:	4560      	cmp	r0, ip
 801ba30:	d204      	bcs.n	801ba3c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801ba32:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ba36:	f800 3b01 	strb.w	r3, [r0], #1
 801ba3a:	e7f8      	b.n	801ba2e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801ba3c:	880b      	ldrh	r3, [r1, #0]
 801ba3e:	1b5b      	subs	r3, r3, r5
 801ba40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba44:	4418      	add	r0, r3
 801ba46:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801ba4a:	1b5b      	subs	r3, r3, r5
 801ba4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba50:	441c      	add	r4, r3
 801ba52:	e7e8      	b.n	801ba26 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801ba54:	6830      	ldr	r0, [r6, #0]
 801ba56:	6803      	ldr	r3, [r0, #0]
 801ba58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba5a:	4798      	blx	r3
 801ba5c:	e7b5      	b.n	801b9ca <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801ba5e:	bf00      	nop
 801ba60:	24026414 	.word	0x24026414
 801ba64:	24026416 	.word	0x24026416
 801ba68:	24026418 	.word	0x24026418
 801ba6c:	2402641c 	.word	0x2402641c

0801ba70 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba74:	b08f      	sub	sp, #60	@ 0x3c
 801ba76:	461c      	mov	r4, r3
 801ba78:	9203      	str	r2, [sp, #12]
 801ba7a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ba7e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ba80:	6820      	ldr	r0, [r4, #0]
 801ba82:	9100      	str	r1, [sp, #0]
 801ba84:	9204      	str	r2, [sp, #16]
 801ba86:	aa0a      	add	r2, sp, #40	@ 0x28
 801ba88:	6861      	ldr	r1, [r4, #4]
 801ba8a:	c203      	stmia	r2!, {r0, r1}
 801ba8c:	6818      	ldr	r0, [r3, #0]
 801ba8e:	aa0c      	add	r2, sp, #48	@ 0x30
 801ba90:	6859      	ldr	r1, [r3, #4]
 801ba92:	c203      	stmia	r2!, {r0, r1}
 801ba94:	a80a      	add	r0, sp, #40	@ 0x28
 801ba96:	f7fa fc3d 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ba9a:	4621      	mov	r1, r4
 801ba9c:	a80c      	add	r0, sp, #48	@ 0x30
 801ba9e:	f7fa fc61 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801baa2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801baa6:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801baaa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801baae:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801bab2:	bfdb      	ittet	le
 801bab4:	b2b3      	uxthle	r3, r6
 801bab6:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801baba:	2301      	movgt	r3, #1
 801babc:	fb92 f3f3 	sdivle	r3, r2, r3
 801bac0:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bac4:	441d      	add	r5, r3
 801bac6:	fb92 f1f3 	sdiv	r1, r2, r3
 801baca:	fa1f fc81 	uxth.w	ip, r1
 801bace:	3d01      	subs	r5, #1
 801bad0:	fb0c 2413 	mls	r4, ip, r3, r2
 801bad4:	4661      	mov	r1, ip
 801bad6:	fb14 f406 	smulbb	r4, r4, r6
 801bada:	4404      	add	r4, r0
 801badc:	fb95 f5f3 	sdiv	r5, r5, r3
 801bae0:	b2a4      	uxth	r4, r4
 801bae2:	b131      	cbz	r1, 801baf2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801bae4:	9b03      	ldr	r3, [sp, #12]
 801bae6:	9900      	ldr	r1, [sp, #0]
 801bae8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801baec:	ba1b      	rev	r3, r3
 801baee:	4419      	add	r1, r3
 801baf0:	9100      	str	r1, [sp, #0]
 801baf2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801baf6:	b2ad      	uxth	r5, r5
 801baf8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801bafc:	4418      	add	r0, r3
 801bafe:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801bb02:	00ad      	lsls	r5, r5, #2
 801bb04:	441a      	add	r2, r3
 801bb06:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801bb0a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801bb0e:	9301      	str	r3, [sp, #4]
 801bb10:	4b79      	ldr	r3, [pc, #484]	@ (801bcf8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801bb12:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801bb16:	6818      	ldr	r0, [r3, #0]
 801bb18:	6803      	ldr	r3, [r0, #0]
 801bb1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bb1c:	4798      	blx	r3
 801bb1e:	4a77      	ldr	r2, [pc, #476]	@ (801bcfc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801bb20:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801bb24:	2c00      	cmp	r4, #0
 801bb26:	8813      	ldrh	r3, [r2, #0]
 801bb28:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801bb2c:	9209      	str	r2, [sp, #36]	@ 0x24
 801bb2e:	fb03 c101 	mla	r1, r3, r1, ip
 801bb32:	fb06 f303 	mul.w	r3, r6, r3
 801bb36:	bf18      	it	ne
 801bb38:	2600      	movne	r6, #0
 801bb3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bb3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb42:	4408      	add	r0, r1
 801bb44:	4403      	add	r3, r0
 801bb46:	9306      	str	r3, [sp, #24]
 801bb48:	f105 0304 	add.w	r3, r5, #4
 801bb4c:	9305      	str	r3, [sp, #20]
 801bb4e:	9b01      	ldr	r3, [sp, #4]
 801bb50:	bf08      	it	eq
 801bb52:	461e      	moveq	r6, r3
 801bb54:	2300      	movs	r3, #0
 801bb56:	b2b6      	uxth	r6, r6
 801bb58:	9302      	str	r3, [sp, #8]
 801bb5a:	9a06      	ldr	r2, [sp, #24]
 801bb5c:	4290      	cmp	r0, r2
 801bb5e:	f080 80c2 	bcs.w	801bce6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801bb62:	b963      	cbnz	r3, 801bb7e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801bb64:	9b00      	ldr	r3, [sp, #0]
 801bb66:	781a      	ldrb	r2, [r3, #0]
 801bb68:	0993      	lsrs	r3, r2, #6
 801bb6a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801bb6e:	9202      	str	r2, [sp, #8]
 801bb70:	1e5a      	subs	r2, r3, #1
 801bb72:	2a02      	cmp	r2, #2
 801bb74:	d815      	bhi.n	801bba2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801bb76:	9a00      	ldr	r2, [sp, #0]
 801bb78:	b29b      	uxth	r3, r3
 801bb7a:	3201      	adds	r2, #1
 801bb7c:	9200      	str	r2, [sp, #0]
 801bb7e:	b1b4      	cbz	r4, 801bbae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801bb80:	429c      	cmp	r4, r3
 801bb82:	bf91      	iteee	ls
 801bb84:	1b1c      	subls	r4, r3, r4
 801bb86:	1ae4      	subhi	r4, r4, r3
 801bb88:	4635      	movhi	r5, r6
 801bb8a:	f04f 0e00 	movhi.w	lr, #0
 801bb8e:	bf9b      	ittet	ls
 801bb90:	fa1f fe84 	uxthls.w	lr, r4
 801bb94:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801bb98:	b2a4      	uxthhi	r4, r4
 801bb9a:	2400      	movls	r4, #0
 801bb9c:	4673      	mov	r3, lr
 801bb9e:	462e      	mov	r6, r5
 801bba0:	e7db      	b.n	801bb5a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801bba2:	9a00      	ldr	r2, [sp, #0]
 801bba4:	9b00      	ldr	r3, [sp, #0]
 801bba6:	3202      	adds	r2, #2
 801bba8:	785b      	ldrb	r3, [r3, #1]
 801bbaa:	9200      	str	r2, [sp, #0]
 801bbac:	e7e7      	b.n	801bb7e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801bbae:	2204      	movs	r2, #4
 801bbb0:	9905      	ldr	r1, [sp, #20]
 801bbb2:	429e      	cmp	r6, r3
 801bbb4:	4615      	mov	r5, r2
 801bbb6:	9a02      	ldr	r2, [sp, #8]
 801bbb8:	bf94      	ite	ls
 801bbba:	eba3 0e06 	subls.w	lr, r3, r6
 801bbbe:	46a6      	movhi	lr, r4
 801bbc0:	fb15 1202 	smlabb	r2, r5, r2, r1
 801bbc4:	9903      	ldr	r1, [sp, #12]
 801bbc6:	bf8c      	ite	hi
 801bbc8:	1af5      	subhi	r5, r6, r3
 801bbca:	fa1f fe8e 	uxthls.w	lr, lr
 801bbce:	f851 c002 	ldr.w	ip, [r1, r2]
 801bbd2:	bf9a      	itte	ls
 801bbd4:	4625      	movls	r5, r4
 801bbd6:	4632      	movls	r2, r6
 801bbd8:	b2ad      	uxthhi	r5, r5
 801bbda:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801bbde:	bf88      	it	hi
 801bbe0:	461a      	movhi	r2, r3
 801bbe2:	b179      	cbz	r1, 801bc04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801bbe4:	29ff      	cmp	r1, #255	@ 0xff
 801bbe6:	fa5f f98c 	uxtb.w	r9, ip
 801bbea:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801bbee:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801bbf2:	d126      	bne.n	801bc42 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801bbf4:	9f04      	ldr	r7, [sp, #16]
 801bbf6:	2fff      	cmp	r7, #255	@ 0xff
 801bbf8:	d123      	bne.n	801bc42 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801bbfa:	4682      	mov	sl, r0
 801bbfc:	4611      	mov	r1, r2
 801bbfe:	f10a 0a03 	add.w	sl, sl, #3
 801bc02:	b9a9      	cbnz	r1, 801bc30 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801bc04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc08:	429e      	cmp	r6, r3
 801bc0a:	4410      	add	r0, r2
 801bc0c:	d8c6      	bhi.n	801bb9c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801bc0e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801bc12:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801bc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc18:	1b64      	subs	r4, r4, r5
 801bc1a:	9a01      	ldr	r2, [sp, #4]
 801bc1c:	881b      	ldrh	r3, [r3, #0]
 801bc1e:	b2a4      	uxth	r4, r4
 801bc20:	1a9b      	subs	r3, r3, r2
 801bc22:	2c00      	cmp	r4, #0
 801bc24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc28:	bf18      	it	ne
 801bc2a:	2500      	movne	r5, #0
 801bc2c:	4418      	add	r0, r3
 801bc2e:	e7b5      	b.n	801bb9c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801bc30:	3901      	subs	r1, #1
 801bc32:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801bc36:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801bc3a:	f80a cc01 	strb.w	ip, [sl, #-1]
 801bc3e:	b289      	uxth	r1, r1
 801bc40:	e7dd      	b.n	801bbfe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801bc42:	9f04      	ldr	r7, [sp, #16]
 801bc44:	fb07 fa01 	mul.w	sl, r7, r1
 801bc48:	f10a 0101 	add.w	r1, sl, #1
 801bc4c:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801bc50:	1209      	asrs	r1, r1, #8
 801bc52:	ea6f 0a01 	mvn.w	sl, r1
 801bc56:	b289      	uxth	r1, r1
 801bc58:	fb19 f901 	smulbb	r9, r9, r1
 801bc5c:	fa5f fa8a 	uxtb.w	sl, sl
 801bc60:	fb18 f801 	smulbb	r8, r8, r1
 801bc64:	fb1c f101 	smulbb	r1, ip, r1
 801bc68:	fa1f f789 	uxth.w	r7, r9
 801bc6c:	4684      	mov	ip, r0
 801bc6e:	4691      	mov	r9, r2
 801bc70:	9707      	str	r7, [sp, #28]
 801bc72:	b289      	uxth	r1, r1
 801bc74:	fa1f f788 	uxth.w	r7, r8
 801bc78:	9708      	str	r7, [sp, #32]
 801bc7a:	f10c 0c03 	add.w	ip, ip, #3
 801bc7e:	f1b9 0f00 	cmp.w	r9, #0
 801bc82:	d0bf      	beq.n	801bc04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801bc84:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801bc88:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc8c:	9f07      	ldr	r7, [sp, #28]
 801bc8e:	fa1f f989 	uxth.w	r9, r9
 801bc92:	fb08 780a 	mla	r8, r8, sl, r7
 801bc96:	9f08      	ldr	r7, [sp, #32]
 801bc98:	fa1f f888 	uxth.w	r8, r8
 801bc9c:	f108 0b01 	add.w	fp, r8, #1
 801bca0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bca4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bca8:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801bcac:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801bcb0:	fb08 780a 	mla	r8, r8, sl, r7
 801bcb4:	fa1f f888 	uxth.w	r8, r8
 801bcb8:	f108 0b01 	add.w	fp, r8, #1
 801bcbc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bcc0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bcc4:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801bcc8:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801bccc:	fb08 180a 	mla	r8, r8, sl, r1
 801bcd0:	fa1f f888 	uxth.w	r8, r8
 801bcd4:	f108 0b01 	add.w	fp, r8, #1
 801bcd8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bcdc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bce0:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801bce4:	e7c9      	b.n	801bc7a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801bce6:	4b04      	ldr	r3, [pc, #16]	@ (801bcf8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801bce8:	6818      	ldr	r0, [r3, #0]
 801bcea:	6803      	ldr	r3, [r0, #0]
 801bcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcee:	4798      	blx	r3
 801bcf0:	b00f      	add	sp, #60	@ 0x3c
 801bcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcf6:	bf00      	nop
 801bcf8:	2402641c 	.word	0x2402641c
 801bcfc:	24026416 	.word	0x24026416

0801bd00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd04:	b089      	sub	sp, #36	@ 0x24
 801bd06:	4607      	mov	r7, r0
 801bd08:	4689      	mov	r9, r1
 801bd0a:	4692      	mov	sl, r2
 801bd0c:	ac08      	add	r4, sp, #32
 801bd0e:	461e      	mov	r6, r3
 801bd10:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801bd14:	4620      	mov	r0, r4
 801bd16:	f7fd ff77 	bl	8019c08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	4605      	mov	r5, r0
 801bd1e:	4620      	mov	r0, r4
 801bd20:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801bd24:	f7fd feb6 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bd28:	4683      	mov	fp, r0
 801bd2a:	4620      	mov	r0, r4
 801bd2c:	f7fd fee6 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bd30:	4653      	mov	r3, sl
 801bd32:	464a      	mov	r2, r9
 801bd34:	4639      	mov	r1, r7
 801bd36:	9500      	str	r5, [sp, #0]
 801bd38:	e9cd b001 	strd	fp, r0, [sp, #4]
 801bd3c:	a806      	add	r0, sp, #24
 801bd3e:	47c0      	blx	r8
 801bd40:	a906      	add	r1, sp, #24
 801bd42:	4630      	mov	r0, r6
 801bd44:	f7fd fd8a 	bl	801985c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801bd48:	4628      	mov	r0, r5
 801bd4a:	b009      	add	sp, #36	@ 0x24
 801bd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd50 <_ZN8touchgfx8LCD24bppD0Ev>:
 801bd50:	b510      	push	{r4, lr}
 801bd52:	4604      	mov	r4, r0
 801bd54:	216c      	movs	r1, #108	@ 0x6c
 801bd56:	f008 fc60 	bl	802461a <_ZdlPvj>
 801bd5a:	4620      	mov	r0, r4
 801bd5c:	bd10      	pop	{r4, pc}

0801bd5e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801bd5e:	b510      	push	{r4, lr}
 801bd60:	4604      	mov	r4, r0
 801bd62:	2104      	movs	r1, #4
 801bd64:	f008 fc59 	bl	802461a <_ZdlPvj>
 801bd68:	4620      	mov	r0, r4
 801bd6a:	bd10      	pop	{r4, pc}

0801bd6c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801bd6c:	b510      	push	{r4, lr}
 801bd6e:	4604      	mov	r4, r0
 801bd70:	2104      	movs	r1, #4
 801bd72:	f008 fc52 	bl	802461a <_ZdlPvj>
 801bd76:	4620      	mov	r0, r4
 801bd78:	bd10      	pop	{r4, pc}

0801bd7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801bd7a:	b510      	push	{r4, lr}
 801bd7c:	4604      	mov	r4, r0
 801bd7e:	f640 0144 	movw	r1, #2116	@ 0x844
 801bd82:	f008 fc4a 	bl	802461a <_ZdlPvj>
 801bd86:	4620      	mov	r0, r4
 801bd88:	bd10      	pop	{r4, pc}

0801bd8a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801bd8a:	b510      	push	{r4, lr}
 801bd8c:	4604      	mov	r4, r0
 801bd8e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801bd92:	f008 fc42 	bl	802461a <_ZdlPvj>
 801bd96:	4620      	mov	r0, r4
 801bd98:	bd10      	pop	{r4, pc}

0801bd9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801bd9a:	b510      	push	{r4, lr}
 801bd9c:	4604      	mov	r4, r0
 801bd9e:	2104      	movs	r1, #4
 801bda0:	f008 fc3b 	bl	802461a <_ZdlPvj>
 801bda4:	4620      	mov	r0, r4
 801bda6:	bd10      	pop	{r4, pc}

0801bda8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801bda8:	b510      	push	{r4, lr}
 801bdaa:	4604      	mov	r4, r0
 801bdac:	2104      	movs	r1, #4
 801bdae:	f008 fc34 	bl	802461a <_ZdlPvj>
 801bdb2:	4620      	mov	r0, r4
 801bdb4:	bd10      	pop	{r4, pc}

0801bdb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801bdb6:	b510      	push	{r4, lr}
 801bdb8:	4604      	mov	r4, r0
 801bdba:	2104      	movs	r1, #4
 801bdbc:	f008 fc2d 	bl	802461a <_ZdlPvj>
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	bd10      	pop	{r4, pc}

0801bdc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801bdc4:	b510      	push	{r4, lr}
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	2104      	movs	r1, #4
 801bdca:	f008 fc26 	bl	802461a <_ZdlPvj>
 801bdce:	4620      	mov	r0, r4
 801bdd0:	bd10      	pop	{r4, pc}

0801bdd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801bdd2:	b510      	push	{r4, lr}
 801bdd4:	4604      	mov	r4, r0
 801bdd6:	2104      	movs	r1, #4
 801bdd8:	f008 fc1f 	bl	802461a <_ZdlPvj>
 801bddc:	4620      	mov	r0, r4
 801bdde:	bd10      	pop	{r4, pc}

0801bde0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801bde0:	b510      	push	{r4, lr}
 801bde2:	4604      	mov	r4, r0
 801bde4:	2104      	movs	r1, #4
 801bde6:	f008 fc18 	bl	802461a <_ZdlPvj>
 801bdea:	4620      	mov	r0, r4
 801bdec:	bd10      	pop	{r4, pc}

0801bdee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801bdee:	b510      	push	{r4, lr}
 801bdf0:	4604      	mov	r4, r0
 801bdf2:	2104      	movs	r1, #4
 801bdf4:	f008 fc11 	bl	802461a <_ZdlPvj>
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	bd10      	pop	{r4, pc}

0801bdfc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801bdfc:	b510      	push	{r4, lr}
 801bdfe:	4604      	mov	r4, r0
 801be00:	2104      	movs	r1, #4
 801be02:	f008 fc0a 	bl	802461a <_ZdlPvj>
 801be06:	4620      	mov	r0, r4
 801be08:	bd10      	pop	{r4, pc}

0801be0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801be0a:	b510      	push	{r4, lr}
 801be0c:	4604      	mov	r4, r0
 801be0e:	2104      	movs	r1, #4
 801be10:	f008 fc03 	bl	802461a <_ZdlPvj>
 801be14:	4620      	mov	r0, r4
 801be16:	bd10      	pop	{r4, pc}

0801be18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801be18:	b510      	push	{r4, lr}
 801be1a:	4604      	mov	r4, r0
 801be1c:	2104      	movs	r1, #4
 801be1e:	f008 fbfc 	bl	802461a <_ZdlPvj>
 801be22:	4620      	mov	r0, r4
 801be24:	bd10      	pop	{r4, pc}

0801be26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801be26:	b510      	push	{r4, lr}
 801be28:	4604      	mov	r4, r0
 801be2a:	2104      	movs	r1, #4
 801be2c:	f008 fbf5 	bl	802461a <_ZdlPvj>
 801be30:	4620      	mov	r0, r4
 801be32:	bd10      	pop	{r4, pc}

0801be34 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801be34:	b510      	push	{r4, lr}
 801be36:	4604      	mov	r4, r0
 801be38:	2104      	movs	r1, #4
 801be3a:	f008 fbee 	bl	802461a <_ZdlPvj>
 801be3e:	4620      	mov	r0, r4
 801be40:	bd10      	pop	{r4, pc}

0801be42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801be42:	b510      	push	{r4, lr}
 801be44:	4604      	mov	r4, r0
 801be46:	2104      	movs	r1, #4
 801be48:	f008 fbe7 	bl	802461a <_ZdlPvj>
 801be4c:	4620      	mov	r0, r4
 801be4e:	bd10      	pop	{r4, pc}

0801be50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801be50:	b510      	push	{r4, lr}
 801be52:	4604      	mov	r4, r0
 801be54:	2104      	movs	r1, #4
 801be56:	f008 fbe0 	bl	802461a <_ZdlPvj>
 801be5a:	4620      	mov	r0, r4
 801be5c:	bd10      	pop	{r4, pc}

0801be5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801be5e:	b510      	push	{r4, lr}
 801be60:	4604      	mov	r4, r0
 801be62:	2104      	movs	r1, #4
 801be64:	f008 fbd9 	bl	802461a <_ZdlPvj>
 801be68:	4620      	mov	r0, r4
 801be6a:	bd10      	pop	{r4, pc}

0801be6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801be6c:	b510      	push	{r4, lr}
 801be6e:	4604      	mov	r4, r0
 801be70:	2104      	movs	r1, #4
 801be72:	f008 fbd2 	bl	802461a <_ZdlPvj>
 801be76:	4620      	mov	r0, r4
 801be78:	bd10      	pop	{r4, pc}

0801be7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801be7a:	b510      	push	{r4, lr}
 801be7c:	4604      	mov	r4, r0
 801be7e:	2104      	movs	r1, #4
 801be80:	f008 fbcb 	bl	802461a <_ZdlPvj>
 801be84:	4620      	mov	r0, r4
 801be86:	bd10      	pop	{r4, pc}

0801be88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801be88:	b510      	push	{r4, lr}
 801be8a:	4604      	mov	r4, r0
 801be8c:	2104      	movs	r1, #4
 801be8e:	f008 fbc4 	bl	802461a <_ZdlPvj>
 801be92:	4620      	mov	r0, r4
 801be94:	bd10      	pop	{r4, pc}

0801be96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801be96:	b510      	push	{r4, lr}
 801be98:	4604      	mov	r4, r0
 801be9a:	2104      	movs	r1, #4
 801be9c:	f008 fbbd 	bl	802461a <_ZdlPvj>
 801bea0:	4620      	mov	r0, r4
 801bea2:	bd10      	pop	{r4, pc}

0801bea4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801bea4:	b510      	push	{r4, lr}
 801bea6:	4604      	mov	r4, r0
 801bea8:	2104      	movs	r1, #4
 801beaa:	f008 fbb6 	bl	802461a <_ZdlPvj>
 801beae:	4620      	mov	r0, r4
 801beb0:	bd10      	pop	{r4, pc}
	...

0801beb4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801beb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beb8:	b08f      	sub	sp, #60	@ 0x3c
 801beba:	461c      	mov	r4, r3
 801bebc:	460e      	mov	r6, r1
 801bebe:	9206      	str	r2, [sp, #24]
 801bec0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801bec4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bec6:	9202      	str	r2, [sp, #8]
 801bec8:	2a00      	cmp	r2, #0
 801beca:	f000 8128 	beq.w	801c11e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801bece:	6820      	ldr	r0, [r4, #0]
 801bed0:	aa0a      	add	r2, sp, #40	@ 0x28
 801bed2:	6861      	ldr	r1, [r4, #4]
 801bed4:	c203      	stmia	r2!, {r0, r1}
 801bed6:	6818      	ldr	r0, [r3, #0]
 801bed8:	aa0c      	add	r2, sp, #48	@ 0x30
 801beda:	6859      	ldr	r1, [r3, #4]
 801bedc:	c203      	stmia	r2!, {r0, r1}
 801bede:	a80a      	add	r0, sp, #40	@ 0x28
 801bee0:	f7fa fa18 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bee4:	4621      	mov	r1, r4
 801bee6:	a80c      	add	r0, sp, #48	@ 0x30
 801bee8:	f7fa fa3c 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801beec:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801bef0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801bef4:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801bef8:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801befc:	bfdb      	ittet	le
 801befe:	b2bb      	uxthle	r3, r7
 801bf00:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801bf04:	2301      	movgt	r3, #1
 801bf06:	fb92 f3f3 	sdivle	r3, r2, r3
 801bf0a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bf0e:	441d      	add	r5, r3
 801bf10:	fb92 f1f3 	sdiv	r1, r2, r3
 801bf14:	fa1f fc81 	uxth.w	ip, r1
 801bf18:	3d01      	subs	r5, #1
 801bf1a:	fb0c 2413 	mls	r4, ip, r3, r2
 801bf1e:	4661      	mov	r1, ip
 801bf20:	fb14 f407 	smulbb	r4, r4, r7
 801bf24:	4404      	add	r4, r0
 801bf26:	fb95 f5f3 	sdiv	r5, r5, r3
 801bf2a:	b2a4      	uxth	r4, r4
 801bf2c:	b121      	cbz	r1, 801bf38 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801bf2e:	9b06      	ldr	r3, [sp, #24]
 801bf30:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bf34:	ba1b      	rev	r3, r3
 801bf36:	441e      	add	r6, r3
 801bf38:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801bf3c:	b2ad      	uxth	r5, r5
 801bf3e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801bf42:	4418      	add	r0, r3
 801bf44:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801bf48:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801bf4c:	00ad      	lsls	r5, r5, #2
 801bf4e:	441a      	add	r2, r3
 801bf50:	4b74      	ldr	r3, [pc, #464]	@ (801c124 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801bf52:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801bf56:	6818      	ldr	r0, [r3, #0]
 801bf58:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801bf5c:	6803      	ldr	r3, [r0, #0]
 801bf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bf60:	4798      	blx	r3
 801bf62:	4a71      	ldr	r2, [pc, #452]	@ (801c128 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801bf64:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801bf68:	2c00      	cmp	r4, #0
 801bf6a:	8813      	ldrh	r3, [r2, #0]
 801bf6c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801bf70:	9209      	str	r2, [sp, #36]	@ 0x24
 801bf72:	fb03 c101 	mla	r1, r3, r1, ip
 801bf76:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bf7a:	fb03 f307 	mul.w	r3, r3, r7
 801bf7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bf82:	9204      	str	r2, [sp, #16]
 801bf84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf88:	9a02      	ldr	r2, [sp, #8]
 801bf8a:	4408      	add	r0, r1
 801bf8c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801bf90:	4403      	add	r3, r0
 801bf92:	b292      	uxth	r2, r2
 801bf94:	9307      	str	r3, [sp, #28]
 801bf96:	f105 0304 	add.w	r3, r5, #4
 801bf9a:	bf0c      	ite	eq
 801bf9c:	4645      	moveq	r5, r8
 801bf9e:	2500      	movne	r5, #0
 801bfa0:	9308      	str	r3, [sp, #32]
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	b2ad      	uxth	r5, r5
 801bfa6:	9205      	str	r2, [sp, #20]
 801bfa8:	9303      	str	r3, [sp, #12]
 801bfaa:	9a07      	ldr	r2, [sp, #28]
 801bfac:	4282      	cmp	r2, r0
 801bfae:	f240 80b1 	bls.w	801c114 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801bfb2:	b95b      	cbnz	r3, 801bfcc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801bfb4:	7832      	ldrb	r2, [r6, #0]
 801bfb6:	0993      	lsrs	r3, r2, #6
 801bfb8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801bfbc:	9203      	str	r2, [sp, #12]
 801bfbe:	1e5a      	subs	r2, r3, #1
 801bfc0:	2a02      	cmp	r2, #2
 801bfc2:	bf8d      	iteet	hi
 801bfc4:	7873      	ldrbhi	r3, [r6, #1]
 801bfc6:	3601      	addls	r6, #1
 801bfc8:	b29b      	uxthls	r3, r3
 801bfca:	3602      	addhi	r6, #2
 801bfcc:	b184      	cbz	r4, 801bff0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801bfce:	429c      	cmp	r4, r3
 801bfd0:	bf91      	iteee	ls
 801bfd2:	1b1c      	subls	r4, r3, r4
 801bfd4:	1ae4      	subhi	r4, r4, r3
 801bfd6:	4629      	movhi	r1, r5
 801bfd8:	f04f 0e00 	movhi.w	lr, #0
 801bfdc:	bf9b      	ittet	ls
 801bfde:	fa1f fe84 	uxthls.w	lr, r4
 801bfe2:	2400      	movls	r4, #0
 801bfe4:	b2a4      	uxthhi	r4, r4
 801bfe6:	fa1f f188 	uxthls.w	r1, r8
 801bfea:	4673      	mov	r3, lr
 801bfec:	460d      	mov	r5, r1
 801bfee:	e7dc      	b.n	801bfaa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801bff0:	2203      	movs	r2, #3
 801bff2:	9908      	ldr	r1, [sp, #32]
 801bff4:	42ab      	cmp	r3, r5
 801bff6:	4617      	mov	r7, r2
 801bff8:	9a03      	ldr	r2, [sp, #12]
 801bffa:	bf24      	itt	cs
 801bffc:	eba3 0e05 	subcs.w	lr, r3, r5
 801c000:	9501      	strcs	r5, [sp, #4]
 801c002:	fb17 1702 	smlabb	r7, r7, r2, r1
 801c006:	9a06      	ldr	r2, [sp, #24]
 801c008:	bf34      	ite	cc
 801c00a:	1ae9      	subcc	r1, r5, r3
 801c00c:	fa1f fe8e 	uxthcs.w	lr, lr
 801c010:	4417      	add	r7, r2
 801c012:	9a02      	ldr	r2, [sp, #8]
 801c014:	bf2f      	iteee	cs
 801c016:	4621      	movcs	r1, r4
 801c018:	b289      	uxthcc	r1, r1
 801c01a:	9301      	strcc	r3, [sp, #4]
 801c01c:	46a6      	movcc	lr, r4
 801c01e:	2aff      	cmp	r2, #255	@ 0xff
 801c020:	d11e      	bne.n	801c060 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801c022:	4681      	mov	r9, r0
 801c024:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c028:	f109 0903 	add.w	r9, r9, #3
 801c02c:	f1bc 0f00 	cmp.w	ip, #0
 801c030:	d15f      	bne.n	801c0f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801c032:	9a01      	ldr	r2, [sp, #4]
 801c034:	42ab      	cmp	r3, r5
 801c036:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c03a:	4410      	add	r0, r2
 801c03c:	d3d5      	bcc.n	801bfea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801c03e:	fa1f f188 	uxth.w	r1, r8
 801c042:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801c046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c048:	1a64      	subs	r4, r4, r1
 801c04a:	881b      	ldrh	r3, [r3, #0]
 801c04c:	b2a4      	uxth	r4, r4
 801c04e:	eba3 0308 	sub.w	r3, r3, r8
 801c052:	2c00      	cmp	r4, #0
 801c054:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c058:	bf18      	it	ne
 801c05a:	2100      	movne	r1, #0
 801c05c:	4418      	add	r0, r3
 801c05e:	e7c4      	b.n	801bfea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801c060:	4684      	mov	ip, r0
 801c062:	f8dd a004 	ldr.w	sl, [sp, #4]
 801c066:	f10c 0c03 	add.w	ip, ip, #3
 801c06a:	f1ba 0f00 	cmp.w	sl, #0
 801c06e:	d0e0      	beq.n	801c032 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801c070:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801c074:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c078:	9a05      	ldr	r2, [sp, #20]
 801c07a:	f897 9000 	ldrb.w	r9, [r7]
 801c07e:	fa1f fa8a 	uxth.w	sl, sl
 801c082:	fb1b fb02 	smulbb	fp, fp, r2
 801c086:	9a04      	ldr	r2, [sp, #16]
 801c088:	fb09 b902 	mla	r9, r9, r2, fp
 801c08c:	9a05      	ldr	r2, [sp, #20]
 801c08e:	fa1f f989 	uxth.w	r9, r9
 801c092:	f109 0b01 	add.w	fp, r9, #1
 801c096:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c09a:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801c09e:	fb1b fb02 	smulbb	fp, fp, r2
 801c0a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0a6:	9a04      	ldr	r2, [sp, #16]
 801c0a8:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801c0ac:	f897 9001 	ldrb.w	r9, [r7, #1]
 801c0b0:	fb09 b902 	mla	r9, r9, r2, fp
 801c0b4:	9a05      	ldr	r2, [sp, #20]
 801c0b6:	fa1f f989 	uxth.w	r9, r9
 801c0ba:	f109 0b01 	add.w	fp, r9, #1
 801c0be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c0c2:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801c0c6:	fb1b fb02 	smulbb	fp, fp, r2
 801c0ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0ce:	9a04      	ldr	r2, [sp, #16]
 801c0d0:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801c0d4:	f897 9002 	ldrb.w	r9, [r7, #2]
 801c0d8:	fb09 b902 	mla	r9, r9, r2, fp
 801c0dc:	fa1f f989 	uxth.w	r9, r9
 801c0e0:	f109 0b01 	add.w	fp, r9, #1
 801c0e4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c0e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0ec:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801c0f0:	e7b9      	b.n	801c066 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801c0f2:	f897 a000 	ldrb.w	sl, [r7]
 801c0f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c0fa:	f809 ac03 	strb.w	sl, [r9, #-3]
 801c0fe:	fa1f fc8c 	uxth.w	ip, ip
 801c102:	f897 a001 	ldrb.w	sl, [r7, #1]
 801c106:	f809 ac02 	strb.w	sl, [r9, #-2]
 801c10a:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c10e:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c112:	e789      	b.n	801c028 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801c114:	4b03      	ldr	r3, [pc, #12]	@ (801c124 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801c116:	6818      	ldr	r0, [r3, #0]
 801c118:	6803      	ldr	r3, [r0, #0]
 801c11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c11c:	4798      	blx	r3
 801c11e:	b00f      	add	sp, #60	@ 0x3c
 801c120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c124:	2402641c 	.word	0x2402641c
 801c128:	24026416 	.word	0x24026416

0801c12c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c130:	b09b      	sub	sp, #108	@ 0x6c
 801c132:	461d      	mov	r5, r3
 801c134:	4604      	mov	r4, r0
 801c136:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c138:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801c13c:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801c140:	9208      	str	r2, [sp, #32]
 801c142:	2a00      	cmp	r2, #0
 801c144:	f000 81f3 	beq.w	801c52e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801c148:	6828      	ldr	r0, [r5, #0]
 801c14a:	aa16      	add	r2, sp, #88	@ 0x58
 801c14c:	6869      	ldr	r1, [r5, #4]
 801c14e:	c203      	stmia	r2!, {r0, r1}
 801c150:	6818      	ldr	r0, [r3, #0]
 801c152:	aa18      	add	r2, sp, #96	@ 0x60
 801c154:	6859      	ldr	r1, [r3, #4]
 801c156:	c203      	stmia	r2!, {r0, r1}
 801c158:	a816      	add	r0, sp, #88	@ 0x58
 801c15a:	f7fa f8db 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c15e:	4629      	mov	r1, r5
 801c160:	a818      	add	r0, sp, #96	@ 0x60
 801c162:	f7fa f8ff 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c166:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801c16a:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801c16e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c172:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801c176:	bfdb      	ittet	le
 801c178:	b29a      	uxthle	r2, r3
 801c17a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801c17e:	f04f 0a01 	movgt.w	sl, #1
 801c182:	fb91 faf2 	sdivle	sl, r1, r2
 801c186:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801c18a:	4456      	add	r6, sl
 801c18c:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801c190:	3e01      	subs	r6, #1
 801c192:	fb92 f0fa 	sdiv	r0, r2, sl
 801c196:	b280      	uxth	r0, r0
 801c198:	fb00 281a 	mls	r8, r0, sl, r2
 801c19c:	900e      	str	r0, [sp, #56]	@ 0x38
 801c19e:	fb18 f803 	smulbb	r8, r8, r3
 801c1a2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801c1a6:	4488      	add	r8, r1
 801c1a8:	4419      	add	r1, r3
 801c1aa:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801c1ae:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801c1b2:	fa1f f888 	uxth.w	r8, r8
 801c1b6:	441a      	add	r2, r3
 801c1b8:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801c1bc:	9303      	str	r3, [sp, #12]
 801c1be:	4b9c      	ldr	r3, [pc, #624]	@ (801c430 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801c1c0:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801c1c4:	6818      	ldr	r0, [r3, #0]
 801c1c6:	6803      	ldr	r3, [r0, #0]
 801c1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1ca:	4798      	blx	r3
 801c1cc:	4b99      	ldr	r3, [pc, #612]	@ (801c434 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801c1ce:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801c1d2:	f1b8 0f00 	cmp.w	r8, #0
 801c1d6:	881a      	ldrh	r2, [r3, #0]
 801c1d8:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801c1dc:	fb02 f505 	mul.w	r5, r2, r5
 801c1e0:	fb02 7101 	mla	r1, r2, r1, r7
 801c1e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1e8:	9314      	str	r3, [sp, #80]	@ 0x50
 801c1ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c1ee:	9b08      	ldr	r3, [sp, #32]
 801c1f0:	fb96 f6fa 	sdiv	r6, r6, sl
 801c1f4:	4408      	add	r0, r1
 801c1f6:	f106 0601 	add.w	r6, r6, #1
 801c1fa:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801c1fe:	f04f 0100 	mov.w	r1, #0
 801c202:	eb00 0205 	add.w	r2, r0, r5
 801c206:	b2b6      	uxth	r6, r6
 801c208:	b29b      	uxth	r3, r3
 801c20a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c20c:	9209      	str	r2, [sp, #36]	@ 0x24
 801c20e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c210:	930d      	str	r3, [sp, #52]	@ 0x34
 801c212:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c216:	4b88      	ldr	r3, [pc, #544]	@ (801c438 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801c218:	f106 0204 	add.w	r2, r6, #4
 801c21c:	eba3 0304 	sub.w	r3, r3, r4
 801c220:	9205      	str	r2, [sp, #20]
 801c222:	9a03      	ldr	r2, [sp, #12]
 801c224:	bf18      	it	ne
 801c226:	2200      	movne	r2, #0
 801c228:	9315      	str	r3, [sp, #84]	@ 0x54
 801c22a:	b292      	uxth	r2, r2
 801c22c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c230:	fa11 f383 	uxtah	r3, r1, r3
 801c234:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c236:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c23a:	3304      	adds	r3, #4
 801c23c:	9306      	str	r3, [sp, #24]
 801c23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c240:	4283      	cmp	r3, r0
 801c242:	f240 816f 	bls.w	801c524 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801c246:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801c24a:	f04f 0900 	mov.w	r9, #0
 801c24e:	9d06      	ldr	r5, [sp, #24]
 801c250:	fbb8 f3f3 	udiv	r3, r8, r3
 801c254:	ebaa 0303 	sub.w	r3, sl, r3
 801c258:	782d      	ldrb	r5, [r5, #0]
 801c25a:	b29b      	uxth	r3, r3
 801c25c:	950f      	str	r5, [sp, #60]	@ 0x3c
 801c25e:	3501      	adds	r5, #1
 801c260:	9312      	str	r3, [sp, #72]	@ 0x48
 801c262:	9b06      	ldr	r3, [sp, #24]
 801c264:	9504      	str	r5, [sp, #16]
 801c266:	7859      	ldrb	r1, [r3, #1]
 801c268:	789b      	ldrb	r3, [r3, #2]
 801c26a:	021b      	lsls	r3, r3, #8
 801c26c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801c270:	9906      	ldr	r1, [sp, #24]
 801c272:	78c9      	ldrb	r1, [r1, #3]
 801c274:	430b      	orrs	r3, r1
 801c276:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801c278:	4419      	add	r1, r3
 801c27a:	1c4d      	adds	r5, r1, #1
 801c27c:	7849      	ldrb	r1, [r1, #1]
 801c27e:	9502      	str	r5, [sp, #8]
 801c280:	0209      	lsls	r1, r1, #8
 801c282:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801c284:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801c288:	5ceb      	ldrb	r3, [r5, r3]
 801c28a:	4319      	orrs	r1, r3
 801c28c:	b28b      	uxth	r3, r1
 801c28e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801c292:	930a      	str	r3, [sp, #40]	@ 0x28
 801c294:	2300      	movs	r3, #0
 801c296:	9307      	str	r3, [sp, #28]
 801c298:	2301      	movs	r3, #1
 801c29a:	e9cd 3300 	strd	r3, r3, [sp]
 801c29e:	469c      	mov	ip, r3
 801c2a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c2a4:	930c      	str	r3, [sp, #48]	@ 0x30
 801c2a6:	f1b8 0f00 	cmp.w	r8, #0
 801c2aa:	f000 8082 	beq.w	801c3b2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801c2ae:	45c4      	cmp	ip, r8
 801c2b0:	d270      	bcs.n	801c394 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801c2b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2b4:	eba8 080c 	sub.w	r8, r8, ip
 801c2b8:	4611      	mov	r1, r2
 801c2ba:	4283      	cmp	r3, r0
 801c2bc:	fa1f f888 	uxth.w	r8, r8
 801c2c0:	d802      	bhi.n	801c2c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801c2c2:	e074      	b.n	801c3ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d15f      	bne.n	801c388 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801c2c8:	9b02      	ldr	r3, [sp, #8]
 801c2ca:	9a01      	ldr	r2, [sp, #4]
 801c2cc:	785b      	ldrb	r3, [r3, #1]
 801c2ce:	f1c2 0207 	rsb	r2, r2, #7
 801c2d2:	9d01      	ldr	r5, [sp, #4]
 801c2d4:	4093      	lsls	r3, r2
 801c2d6:	005b      	lsls	r3, r3, #1
 801c2d8:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801c2dc:	9b02      	ldr	r3, [sp, #8]
 801c2de:	781b      	ldrb	r3, [r3, #0]
 801c2e0:	412b      	asrs	r3, r5
 801c2e2:	b2db      	uxtb	r3, r3
 801c2e4:	4313      	orrs	r3, r2
 801c2e6:	462a      	mov	r2, r5
 801c2e8:	3201      	adds	r2, #1
 801c2ea:	b29e      	uxth	r6, r3
 801c2ec:	b2d2      	uxtb	r2, r2
 801c2ee:	2a08      	cmp	r2, #8
 801c2f0:	9201      	str	r2, [sp, #4]
 801c2f2:	9a02      	ldr	r2, [sp, #8]
 801c2f4:	bf09      	itett	eq
 801c2f6:	3202      	addeq	r2, #2
 801c2f8:	3201      	addne	r2, #1
 801c2fa:	9202      	streq	r2, [sp, #8]
 801c2fc:	2200      	moveq	r2, #0
 801c2fe:	bf14      	ite	ne
 801c300:	9202      	strne	r2, [sp, #8]
 801c302:	9201      	streq	r2, [sp, #4]
 801c304:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c306:	42b2      	cmp	r2, r6
 801c308:	d309      	bcc.n	801c31e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801c30a:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801c30e:	2301      	movs	r3, #1
 801c310:	9a04      	ldr	r2, [sp, #16]
 801c312:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801c316:	d30e      	bcc.n	801c336 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c318:	9300      	str	r3, [sp, #0]
 801c31a:	2500      	movs	r5, #0
 801c31c:	e035      	b.n	801c38a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c31e:	9b04      	ldr	r3, [sp, #16]
 801c320:	429e      	cmp	r6, r3
 801c322:	d318      	bcc.n	801c356 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801c324:	9b00      	ldr	r3, [sp, #0]
 801c326:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801c32a:	18e3      	adds	r3, r4, r3
 801c32c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801c330:	9b00      	ldr	r3, [sp, #0]
 801c332:	3301      	adds	r3, #1
 801c334:	b29b      	uxth	r3, r3
 801c336:	9a04      	ldr	r2, [sp, #16]
 801c338:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801c33c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c340:	9f00      	ldr	r7, [sp, #0]
 801c342:	7115      	strb	r5, [r2, #4]
 801c344:	3701      	adds	r7, #1
 801c346:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c348:	7157      	strb	r7, [r2, #5]
 801c34a:	80d5      	strh	r5, [r2, #6]
 801c34c:	9a04      	ldr	r2, [sp, #16]
 801c34e:	3201      	adds	r2, #1
 801c350:	b292      	uxth	r2, r2
 801c352:	9204      	str	r2, [sp, #16]
 801c354:	e7e0      	b.n	801c318 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801c356:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801c35a:	4632      	mov	r2, r6
 801c35c:	795b      	ldrb	r3, [r3, #5]
 801c35e:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801c362:	4425      	add	r5, r4
 801c364:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801c366:	eb07 0c05 	add.w	ip, r7, r5
 801c36a:	f1bc 0f00 	cmp.w	ip, #0
 801c36e:	dd07      	ble.n	801c380 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801c370:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c374:	f892 c004 	ldrb.w	ip, [r2, #4]
 801c378:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801c37c:	88d2      	ldrh	r2, [r2, #6]
 801c37e:	e7f1      	b.n	801c364 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801c380:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801c384:	b29b      	uxth	r3, r3
 801c386:	e7c3      	b.n	801c310 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801c388:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c38a:	460a      	mov	r2, r1
 801c38c:	960a      	str	r6, [sp, #40]	@ 0x28
 801c38e:	46a9      	mov	r9, r5
 801c390:	469c      	mov	ip, r3
 801c392:	e788      	b.n	801c2a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801c394:	ebac 0308 	sub.w	r3, ip, r8
 801c398:	eb09 0508 	add.w	r5, r9, r8
 801c39c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c3a0:	b29b      	uxth	r3, r3
 801c3a2:	b2ad      	uxth	r5, r5
 801c3a4:	f04f 0800 	mov.w	r8, #0
 801c3a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c3aa:	4282      	cmp	r2, r0
 801c3ac:	d88a      	bhi.n	801c2c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801c3ae:	460a      	mov	r2, r1
 801c3b0:	e745      	b.n	801c23e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801c3b2:	4594      	cmp	ip, r2
 801c3b4:	9d08      	ldr	r5, [sp, #32]
 801c3b6:	4686      	mov	lr, r0
 801c3b8:	bf27      	ittee	cs
 801c3ba:	ebac 0302 	subcs.w	r3, ip, r2
 801c3be:	4616      	movcs	r6, r2
 801c3c0:	eba2 010c 	subcc.w	r1, r2, ip
 801c3c4:	4666      	movcc	r6, ip
 801c3c6:	bf27      	ittee	cs
 801c3c8:	b29b      	uxthcs	r3, r3
 801c3ca:	4641      	movcs	r1, r8
 801c3cc:	b289      	uxthcc	r1, r1
 801c3ce:	4643      	movcc	r3, r8
 801c3d0:	2dff      	cmp	r5, #255	@ 0xff
 801c3d2:	eb09 0506 	add.w	r5, r9, r6
 801c3d6:	b2ad      	uxth	r5, r5
 801c3d8:	d130      	bne.n	801c43c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801c3da:	45a9      	cmp	r9, r5
 801c3dc:	f10e 0e03 	add.w	lr, lr, #3
 801c3e0:	d17a      	bne.n	801c4d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801c3e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c3e6:	4594      	cmp	ip, r2
 801c3e8:	4430      	add	r0, r6
 801c3ea:	d3db      	bcc.n	801c3a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801c3ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c3ee:	9903      	ldr	r1, [sp, #12]
 801c3f0:	8812      	ldrh	r2, [r2, #0]
 801c3f2:	1a52      	subs	r2, r2, r1
 801c3f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c3f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c3fa:	4410      	add	r0, r2
 801c3fc:	9a07      	ldr	r2, [sp, #28]
 801c3fe:	3201      	adds	r2, #1
 801c400:	428a      	cmp	r2, r1
 801c402:	9207      	str	r2, [sp, #28]
 801c404:	f040 8081 	bne.w	801c50a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801c408:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801c40c:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801c410:	9b03      	ldr	r3, [sp, #12]
 801c412:	eba8 080c 	sub.w	r8, r8, ip
 801c416:	fa1f f888 	uxth.w	r8, r8
 801c41a:	f1b8 0f00 	cmp.w	r8, #0
 801c41e:	bf08      	it	eq
 801c420:	461a      	moveq	r2, r3
 801c422:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c424:	bf18      	it	ne
 801c426:	2200      	movne	r2, #0
 801c428:	3301      	adds	r3, #1
 801c42a:	b292      	uxth	r2, r2
 801c42c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c42e:	e6fd      	b.n	801c22c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801c430:	2402641c 	.word	0x2402641c
 801c434:	24026416 	.word	0x24026416
 801c438:	fffff7fb 	.word	0xfffff7fb
 801c43c:	45a9      	cmp	r9, r5
 801c43e:	f10e 0e03 	add.w	lr, lr, #3
 801c442:	d0ce      	beq.n	801c3e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801c444:	f109 0701 	add.w	r7, r9, #1
 801c448:	44a1      	add	r9, r4
 801c44a:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801c44e:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801c452:	9713      	str	r7, [sp, #76]	@ 0x4c
 801c454:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c458:	9f05      	ldr	r7, [sp, #20]
 801c45a:	eb07 0908 	add.w	r9, r7, r8
 801c45e:	f817 8008 	ldrb.w	r8, [r7, r8]
 801c462:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c464:	fb1b fb07 	smulbb	fp, fp, r7
 801c468:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c46a:	fb08 b807 	mla	r8, r8, r7, fp
 801c46e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c470:	fa1f f888 	uxth.w	r8, r8
 801c474:	f108 0b01 	add.w	fp, r8, #1
 801c478:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c47c:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801c480:	fb1b fb07 	smulbb	fp, fp, r7
 801c484:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c488:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c48a:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801c48e:	f899 8001 	ldrb.w	r8, [r9, #1]
 801c492:	fb08 b807 	mla	r8, r8, r7, fp
 801c496:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c498:	fa1f f888 	uxth.w	r8, r8
 801c49c:	f108 0b01 	add.w	fp, r8, #1
 801c4a0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c4a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c4a8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801c4ac:	f899 8002 	ldrb.w	r8, [r9, #2]
 801c4b0:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801c4b4:	fb19 f907 	smulbb	r9, r9, r7
 801c4b8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c4ba:	fb08 9807 	mla	r8, r8, r7, r9
 801c4be:	fa1f f888 	uxth.w	r8, r8
 801c4c2:	f108 0901 	add.w	r9, r8, #1
 801c4c6:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801c4ca:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801c4ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c4d2:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801c4d6:	e7b1      	b.n	801c43c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801c4d8:	f109 0b01 	add.w	fp, r9, #1
 801c4dc:	44a1      	add	r9, r4
 801c4de:	9f05      	ldr	r7, [sp, #20]
 801c4e0:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801c4e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c4e8:	eb07 0908 	add.w	r9, r7, r8
 801c4ec:	f817 8008 	ldrb.w	r8, [r7, r8]
 801c4f0:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801c4f4:	f899 8001 	ldrb.w	r8, [r9, #1]
 801c4f8:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801c4fc:	f899 8002 	ldrb.w	r8, [r9, #2]
 801c500:	fa1f f98b 	uxth.w	r9, fp
 801c504:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801c508:	e767      	b.n	801c3da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801c50a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c50e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801c512:	eba8 0801 	sub.w	r8, r8, r1
 801c516:	fa1f f888 	uxth.w	r8, r8
 801c51a:	f1b8 0f00 	cmp.w	r8, #0
 801c51e:	bf18      	it	ne
 801c520:	2100      	movne	r1, #0
 801c522:	e741      	b.n	801c3a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801c524:	4b03      	ldr	r3, [pc, #12]	@ (801c534 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801c526:	6818      	ldr	r0, [r3, #0]
 801c528:	6803      	ldr	r3, [r0, #0]
 801c52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c52c:	4798      	blx	r3
 801c52e:	b01b      	add	sp, #108	@ 0x6c
 801c530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c534:	2402641c 	.word	0x2402641c

0801c538 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c53c:	b09d      	sub	sp, #116	@ 0x74
 801c53e:	461d      	mov	r5, r3
 801c540:	4604      	mov	r4, r0
 801c542:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c544:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801c548:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801c54c:	920c      	str	r2, [sp, #48]	@ 0x30
 801c54e:	2a00      	cmp	r2, #0
 801c550:	f000 81de 	beq.w	801c910 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801c554:	6828      	ldr	r0, [r5, #0]
 801c556:	aa18      	add	r2, sp, #96	@ 0x60
 801c558:	6869      	ldr	r1, [r5, #4]
 801c55a:	c203      	stmia	r2!, {r0, r1}
 801c55c:	6818      	ldr	r0, [r3, #0]
 801c55e:	aa1a      	add	r2, sp, #104	@ 0x68
 801c560:	6859      	ldr	r1, [r3, #4]
 801c562:	c203      	stmia	r2!, {r0, r1}
 801c564:	a818      	add	r0, sp, #96	@ 0x60
 801c566:	f7f9 fed5 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c56a:	4629      	mov	r1, r5
 801c56c:	a81a      	add	r0, sp, #104	@ 0x68
 801c56e:	f7f9 fef9 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c572:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801c576:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801c57a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c57e:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801c582:	bfdb      	ittet	le
 801c584:	b29a      	uxthle	r2, r3
 801c586:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801c58a:	2201      	movgt	r2, #1
 801c58c:	fb91 f2f2 	sdivle	r2, r1, r2
 801c590:	9201      	str	r2, [sp, #4]
 801c592:	9801      	ldr	r0, [sp, #4]
 801c594:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801c598:	9901      	ldr	r1, [sp, #4]
 801c59a:	fb92 f0f0 	sdiv	r0, r2, r0
 801c59e:	b280      	uxth	r0, r0
 801c5a0:	440f      	add	r7, r1
 801c5a2:	900d      	str	r0, [sp, #52]	@ 0x34
 801c5a4:	3f01      	subs	r7, #1
 801c5a6:	9801      	ldr	r0, [sp, #4]
 801c5a8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c5aa:	fb05 2510 	mls	r5, r5, r0, r2
 801c5ae:	fb97 f7f1 	sdiv	r7, r7, r1
 801c5b2:	fb15 f503 	smulbb	r5, r5, r3
 801c5b6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801c5ba:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801c5be:	3701      	adds	r7, #1
 801c5c0:	440d      	add	r5, r1
 801c5c2:	4419      	add	r1, r3
 801c5c4:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801c5c8:	b2bf      	uxth	r7, r7
 801c5ca:	441a      	add	r2, r3
 801c5cc:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801c5d0:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801c5d4:	00bf      	lsls	r7, r7, #2
 801c5d6:	9304      	str	r3, [sp, #16]
 801c5d8:	b2ad      	uxth	r5, r5
 801c5da:	4bb0      	ldr	r3, [pc, #704]	@ (801c89c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801c5dc:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801c5e0:	6818      	ldr	r0, [r3, #0]
 801c5e2:	6803      	ldr	r3, [r0, #0]
 801c5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c5e6:	4798      	blx	r3
 801c5e8:	4bad      	ldr	r3, [pc, #692]	@ (801c8a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801c5ea:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801c5ee:	2d00      	cmp	r5, #0
 801c5f0:	881a      	ldrh	r2, [r3, #0]
 801c5f2:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801c5f6:	fb02 f606 	mul.w	r6, r2, r6
 801c5fa:	fb02 c101 	mla	r1, r2, r1, ip
 801c5fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c602:	9316      	str	r3, [sp, #88]	@ 0x58
 801c604:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c608:	4ba6      	ldr	r3, [pc, #664]	@ (801c8a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801c60a:	eb00 0801 	add.w	r8, r0, r1
 801c60e:	bf18      	it	ne
 801c610:	2100      	movne	r1, #0
 801c612:	eba3 0304 	sub.w	r3, r3, r4
 801c616:	eb08 0206 	add.w	r2, r8, r6
 801c61a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c61c:	9208      	str	r2, [sp, #32]
 801c61e:	f107 0204 	add.w	r2, r7, #4
 801c622:	9211      	str	r2, [sp, #68]	@ 0x44
 801c624:	9a04      	ldr	r2, [sp, #16]
 801c626:	bf08      	it	eq
 801c628:	4611      	moveq	r1, r2
 801c62a:	2200      	movs	r2, #0
 801c62c:	b289      	uxth	r1, r1
 801c62e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c630:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c634:	fa12 f383 	uxtah	r3, r2, r3
 801c638:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c63a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c63e:	3304      	adds	r3, #4
 801c640:	9306      	str	r3, [sp, #24]
 801c642:	9b08      	ldr	r3, [sp, #32]
 801c644:	4543      	cmp	r3, r8
 801c646:	f240 815e 	bls.w	801c906 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801c64a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801c64e:	f04f 0b01 	mov.w	fp, #1
 801c652:	9a01      	ldr	r2, [sp, #4]
 801c654:	9806      	ldr	r0, [sp, #24]
 801c656:	465e      	mov	r6, fp
 801c658:	f8cd b008 	str.w	fp, [sp, #8]
 801c65c:	7800      	ldrb	r0, [r0, #0]
 801c65e:	fbb5 f3f3 	udiv	r3, r5, r3
 801c662:	1ad3      	subs	r3, r2, r3
 801c664:	900e      	str	r0, [sp, #56]	@ 0x38
 801c666:	3001      	adds	r0, #1
 801c668:	b29b      	uxth	r3, r3
 801c66a:	9005      	str	r0, [sp, #20]
 801c66c:	9312      	str	r3, [sp, #72]	@ 0x48
 801c66e:	9b06      	ldr	r3, [sp, #24]
 801c670:	785a      	ldrb	r2, [r3, #1]
 801c672:	789b      	ldrb	r3, [r3, #2]
 801c674:	021b      	lsls	r3, r3, #8
 801c676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c67a:	9a06      	ldr	r2, [sp, #24]
 801c67c:	78d2      	ldrb	r2, [r2, #3]
 801c67e:	4313      	orrs	r3, r2
 801c680:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c682:	441a      	add	r2, r3
 801c684:	1c50      	adds	r0, r2, #1
 801c686:	7852      	ldrb	r2, [r2, #1]
 801c688:	9003      	str	r0, [sp, #12]
 801c68a:	0212      	lsls	r2, r2, #8
 801c68c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c68e:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801c692:	5cc3      	ldrb	r3, [r0, r3]
 801c694:	431a      	orrs	r2, r3
 801c696:	b293      	uxth	r3, r2
 801c698:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801c69c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c69e:	2300      	movs	r3, #0
 801c6a0:	461a      	mov	r2, r3
 801c6a2:	9307      	str	r3, [sp, #28]
 801c6a4:	2d00      	cmp	r5, #0
 801c6a6:	d07c      	beq.n	801c7a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801c6a8:	42ae      	cmp	r6, r5
 801c6aa:	d26c      	bcs.n	801c786 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801c6ac:	9b08      	ldr	r3, [sp, #32]
 801c6ae:	1bad      	subs	r5, r5, r6
 801c6b0:	4608      	mov	r0, r1
 801c6b2:	4543      	cmp	r3, r8
 801c6b4:	b2ad      	uxth	r5, r5
 801c6b6:	d802      	bhi.n	801c6be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801c6b8:	e071      	b.n	801c79e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d15d      	bne.n	801c77a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801c6be:	9b03      	ldr	r3, [sp, #12]
 801c6c0:	9a02      	ldr	r2, [sp, #8]
 801c6c2:	785b      	ldrb	r3, [r3, #1]
 801c6c4:	f1c2 0207 	rsb	r2, r2, #7
 801c6c8:	9902      	ldr	r1, [sp, #8]
 801c6ca:	4093      	lsls	r3, r2
 801c6cc:	005b      	lsls	r3, r3, #1
 801c6ce:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801c6d2:	9b03      	ldr	r3, [sp, #12]
 801c6d4:	781b      	ldrb	r3, [r3, #0]
 801c6d6:	410b      	asrs	r3, r1
 801c6d8:	3101      	adds	r1, #1
 801c6da:	b2c9      	uxtb	r1, r1
 801c6dc:	b2db      	uxtb	r3, r3
 801c6de:	2908      	cmp	r1, #8
 801c6e0:	9102      	str	r1, [sp, #8]
 801c6e2:	9903      	ldr	r1, [sp, #12]
 801c6e4:	ea43 0302 	orr.w	r3, r3, r2
 801c6e8:	bf0c      	ite	eq
 801c6ea:	3102      	addeq	r1, #2
 801c6ec:	3101      	addne	r1, #1
 801c6ee:	b29a      	uxth	r2, r3
 801c6f0:	bf05      	ittet	eq
 801c6f2:	9103      	streq	r1, [sp, #12]
 801c6f4:	2100      	moveq	r1, #0
 801c6f6:	9103      	strne	r1, [sp, #12]
 801c6f8:	9102      	streq	r1, [sp, #8]
 801c6fa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c6fc:	4291      	cmp	r1, r2
 801c6fe:	d30a      	bcc.n	801c716 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801c700:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801c704:	2301      	movs	r3, #1
 801c706:	9905      	ldr	r1, [sp, #20]
 801c708:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801c70c:	d30f      	bcc.n	801c72e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801c70e:	469b      	mov	fp, r3
 801c710:	f04f 0c00 	mov.w	ip, #0
 801c714:	e032      	b.n	801c77c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801c716:	9b05      	ldr	r3, [sp, #20]
 801c718:	429a      	cmp	r2, r3
 801c71a:	d318      	bcc.n	801c74e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801c71c:	eb04 030b 	add.w	r3, r4, fp
 801c720:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801c724:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801c728:	f10b 0301 	add.w	r3, fp, #1
 801c72c:	b29b      	uxth	r3, r3
 801c72e:	9905      	ldr	r1, [sp, #20]
 801c730:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801c734:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c738:	710e      	strb	r6, [r1, #4]
 801c73a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c73c:	80ce      	strh	r6, [r1, #6]
 801c73e:	f10b 0601 	add.w	r6, fp, #1
 801c742:	714e      	strb	r6, [r1, #5]
 801c744:	9905      	ldr	r1, [sp, #20]
 801c746:	3101      	adds	r1, #1
 801c748:	b289      	uxth	r1, r1
 801c74a:	9105      	str	r1, [sp, #20]
 801c74c:	e7df      	b.n	801c70e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801c74e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c752:	4611      	mov	r1, r2
 801c754:	795b      	ldrb	r3, [r3, #5]
 801c756:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801c75a:	4426      	add	r6, r4
 801c75c:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801c75e:	4437      	add	r7, r6
 801c760:	2f00      	cmp	r7, #0
 801c762:	dd06      	ble.n	801c772 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801c764:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c768:	790f      	ldrb	r7, [r1, #4]
 801c76a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c76e:	88c9      	ldrh	r1, [r1, #6]
 801c770:	e7f4      	b.n	801c75c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801c772:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801c776:	b29b      	uxth	r3, r3
 801c778:	e7c5      	b.n	801c706 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801c77a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c77c:	920a      	str	r2, [sp, #40]	@ 0x28
 801c77e:	4601      	mov	r1, r0
 801c780:	4662      	mov	r2, ip
 801c782:	461e      	mov	r6, r3
 801c784:	e78e      	b.n	801c6a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801c786:	1b73      	subs	r3, r6, r5
 801c788:	eb02 0c05 	add.w	ip, r2, r5
 801c78c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801c790:	b29b      	uxth	r3, r3
 801c792:	fa1f fc8c 	uxth.w	ip, ip
 801c796:	2500      	movs	r5, #0
 801c798:	9a08      	ldr	r2, [sp, #32]
 801c79a:	4542      	cmp	r2, r8
 801c79c:	d88d      	bhi.n	801c6ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801c79e:	4601      	mov	r1, r0
 801c7a0:	e74f      	b.n	801c642 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801c7a2:	428e      	cmp	r6, r1
 801c7a4:	bf2b      	itete	cs
 801c7a6:	468e      	movcs	lr, r1
 801c7a8:	46b6      	movcc	lr, r6
 801c7aa:	1a73      	subcs	r3, r6, r1
 801c7ac:	1b88      	subcc	r0, r1, r6
 801c7ae:	eb02 0c0e 	add.w	ip, r2, lr
 801c7b2:	bf2b      	itete	cs
 801c7b4:	4628      	movcs	r0, r5
 801c7b6:	462b      	movcc	r3, r5
 801c7b8:	b29b      	uxthcs	r3, r3
 801c7ba:	b280      	uxthcc	r0, r0
 801c7bc:	f108 0503 	add.w	r5, r8, #3
 801c7c0:	fa1f fc8c 	uxth.w	ip, ip
 801c7c4:	4562      	cmp	r2, ip
 801c7c6:	d06f      	beq.n	801c8a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801c7c8:	1c57      	adds	r7, r2, #1
 801c7ca:	4422      	add	r2, r4
 801c7cc:	b2bf      	uxth	r7, r7
 801c7ce:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801c7d2:	9713      	str	r7, [sp, #76]	@ 0x4c
 801c7d4:	2704      	movs	r7, #4
 801c7d6:	46b9      	mov	r9, r7
 801c7d8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801c7da:	fb19 7202 	smlabb	r2, r9, r2, r7
 801c7de:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c7e0:	58bf      	ldr	r7, [r7, r2]
 801c7e2:	0e3a      	lsrs	r2, r7, #24
 801c7e4:	9209      	str	r2, [sp, #36]	@ 0x24
 801c7e6:	d016      	beq.n	801c816 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801c7e8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c7ec:	fa5f fa87 	uxtb.w	sl, r7
 801c7f0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c7f4:	fa5f f289 	uxtb.w	r2, r9
 801c7f8:	9214      	str	r2, [sp, #80]	@ 0x50
 801c7fa:	b2fa      	uxtb	r2, r7
 801c7fc:	9215      	str	r2, [sp, #84]	@ 0x54
 801c7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c800:	2aff      	cmp	r2, #255	@ 0xff
 801c802:	d10b      	bne.n	801c81c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801c804:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c806:	2aff      	cmp	r2, #255	@ 0xff
 801c808:	d108      	bne.n	801c81c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801c80a:	f805 ac03 	strb.w	sl, [r5, #-3]
 801c80e:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c812:	f805 7c01 	strb.w	r7, [r5, #-1]
 801c816:	3503      	adds	r5, #3
 801c818:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c81a:	e7d3      	b.n	801c7c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801c81c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c81e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c820:	437a      	muls	r2, r7
 801c822:	1c57      	adds	r7, r2, #1
 801c824:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801c828:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801c82c:	1212      	asrs	r2, r2, #8
 801c82e:	fa1f f982 	uxth.w	r9, r2
 801c832:	43d2      	mvns	r2, r2
 801c834:	fb1a fa09 	smulbb	sl, sl, r9
 801c838:	b2d2      	uxtb	r2, r2
 801c83a:	fb07 a702 	mla	r7, r7, r2, sl
 801c83e:	9209      	str	r2, [sp, #36]	@ 0x24
 801c840:	b2bf      	uxth	r7, r7
 801c842:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c844:	f107 0a01 	add.w	sl, r7, #1
 801c848:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c84c:	fb12 fa09 	smulbb	sl, r2, r9
 801c850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c852:	123f      	asrs	r7, r7, #8
 801c854:	f805 7c03 	strb.w	r7, [r5, #-3]
 801c858:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801c85c:	fb07 aa02 	mla	sl, r7, r2, sl
 801c860:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c862:	fb12 f909 	smulbb	r9, r2, r9
 801c866:	fa1f fa8a 	uxth.w	sl, sl
 801c86a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c86c:	f10a 0701 	add.w	r7, sl, #1
 801c870:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c874:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801c878:	fb07 9902 	mla	r9, r7, r2, r9
 801c87c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c880:	fa1f f989 	uxth.w	r9, r9
 801c884:	f805 ac02 	strb.w	sl, [r5, #-2]
 801c888:	f109 0201 	add.w	r2, r9, #1
 801c88c:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c890:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c894:	f805 9c01 	strb.w	r9, [r5, #-1]
 801c898:	e7bd      	b.n	801c816 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801c89a:	bf00      	nop
 801c89c:	2402641c 	.word	0x2402641c
 801c8a0:	24026416 	.word	0x24026416
 801c8a4:	fffff7fb 	.word	0xfffff7fb
 801c8a8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c8ac:	428e      	cmp	r6, r1
 801c8ae:	44f0      	add	r8, lr
 801c8b0:	f4ff af71 	bcc.w	801c796 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c8b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c8b6:	9904      	ldr	r1, [sp, #16]
 801c8b8:	8812      	ldrh	r2, [r2, #0]
 801c8ba:	1a52      	subs	r2, r2, r1
 801c8bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c8be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c8c2:	4490      	add	r8, r2
 801c8c4:	9a07      	ldr	r2, [sp, #28]
 801c8c6:	3201      	adds	r2, #1
 801c8c8:	428a      	cmp	r2, r1
 801c8ca:	9207      	str	r2, [sp, #28]
 801c8cc:	d111      	bne.n	801c8f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801c8ce:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801c8d2:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801c8d6:	9b04      	ldr	r3, [sp, #16]
 801c8d8:	eba5 050c 	sub.w	r5, r5, ip
 801c8dc:	b2ad      	uxth	r5, r5
 801c8de:	2d00      	cmp	r5, #0
 801c8e0:	bf08      	it	eq
 801c8e2:	4619      	moveq	r1, r3
 801c8e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c8e6:	bf18      	it	ne
 801c8e8:	2100      	movne	r1, #0
 801c8ea:	3301      	adds	r3, #1
 801c8ec:	b289      	uxth	r1, r1
 801c8ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c8f0:	e69e      	b.n	801c630 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801c8f2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801c8f6:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801c8fa:	1a2d      	subs	r5, r5, r0
 801c8fc:	b2ad      	uxth	r5, r5
 801c8fe:	2d00      	cmp	r5, #0
 801c900:	bf18      	it	ne
 801c902:	2000      	movne	r0, #0
 801c904:	e748      	b.n	801c798 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801c906:	4b04      	ldr	r3, [pc, #16]	@ (801c918 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801c908:	6818      	ldr	r0, [r3, #0]
 801c90a:	6803      	ldr	r3, [r0, #0]
 801c90c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c90e:	4798      	blx	r3
 801c910:	b01d      	add	sp, #116	@ 0x74
 801c912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c916:	bf00      	nop
 801c918:	2402641c 	.word	0x2402641c

0801c91c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c920:	b08f      	sub	sp, #60	@ 0x3c
 801c922:	4616      	mov	r6, r2
 801c924:	4681      	mov	r9, r0
 801c926:	460d      	mov	r5, r1
 801c928:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801c92c:	9205      	str	r2, [sp, #20]
 801c92e:	2a00      	cmp	r2, #0
 801c930:	f000 82a8 	beq.w	801ce84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801c934:	6830      	ldr	r0, [r6, #0]
 801c936:	ac0a      	add	r4, sp, #40	@ 0x28
 801c938:	6871      	ldr	r1, [r6, #4]
 801c93a:	c403      	stmia	r4!, {r0, r1}
 801c93c:	6818      	ldr	r0, [r3, #0]
 801c93e:	ac0c      	add	r4, sp, #48	@ 0x30
 801c940:	6859      	ldr	r1, [r3, #4]
 801c942:	c403      	stmia	r4!, {r0, r1}
 801c944:	a80a      	add	r0, sp, #40	@ 0x28
 801c946:	f7f9 fce5 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c94a:	4631      	mov	r1, r6
 801c94c:	a80c      	add	r0, sp, #48	@ 0x30
 801c94e:	f7f9 fd09 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c952:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801c956:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801c95a:	bfdb      	ittet	le
 801c95c:	b293      	uxthle	r3, r2
 801c95e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801c962:	2301      	movgt	r3, #1
 801c964:	fb91 f3f3 	sdivle	r3, r1, r3
 801c968:	9300      	str	r3, [sp, #0]
 801c96a:	f105 0308 	add.w	r3, r5, #8
 801c96e:	9900      	ldr	r1, [sp, #0]
 801c970:	9306      	str	r3, [sp, #24]
 801c972:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801c976:	440b      	add	r3, r1
 801c978:	3b01      	subs	r3, #1
 801c97a:	fb93 f3f1 	sdiv	r3, r3, r1
 801c97e:	3b01      	subs	r3, #1
 801c980:	9906      	ldr	r1, [sp, #24]
 801c982:	b29b      	uxth	r3, r3
 801c984:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c988:	9900      	ldr	r1, [sp, #0]
 801c98a:	9307      	str	r3, [sp, #28]
 801c98c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801c990:	fb93 f0f1 	sdiv	r0, r3, r1
 801c994:	b284      	uxth	r4, r0
 801c996:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801c99a:	b280      	uxth	r0, r0
 801c99c:	9402      	str	r4, [sp, #8]
 801c99e:	9d02      	ldr	r5, [sp, #8]
 801c9a0:	9c00      	ldr	r4, [sp, #0]
 801c9a2:	fb05 3514 	mls	r5, r5, r4, r3
 801c9a6:	fb15 f502 	smulbb	r5, r5, r2
 801c9aa:	440d      	add	r5, r1
 801c9ac:	b2ad      	uxth	r5, r5
 801c9ae:	2800      	cmp	r0, #0
 801c9b0:	d071      	beq.n	801ca96 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801c9b2:	1e42      	subs	r2, r0, #1
 801c9b4:	9806      	ldr	r0, [sp, #24]
 801c9b6:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801c9ba:	9a07      	ldr	r2, [sp, #28]
 801c9bc:	fa98 f888 	rev.w	r8, r8
 801c9c0:	4490      	add	r8, r2
 801c9c2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801c9c6:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801c9ca:	4411      	add	r1, r2
 801c9cc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801c9d0:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801cd1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801c9d4:	4413      	add	r3, r2
 801c9d6:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801c9da:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801c9de:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801c9e2:	9301      	str	r3, [sp, #4]
 801c9e4:	4bcb      	ldr	r3, [pc, #812]	@ (801cd14 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801c9e6:	6818      	ldr	r0, [r3, #0]
 801c9e8:	6803      	ldr	r3, [r0, #0]
 801c9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c9ec:	4798      	blx	r3
 801c9ee:	4bca      	ldr	r3, [pc, #808]	@ (801cd18 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801c9f0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801c9f4:	881b      	ldrh	r3, [r3, #0]
 801c9f6:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801c9fa:	fb03 2707 	mla	r7, r3, r7, r2
 801c9fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ca02:	4363      	muls	r3, r4
 801ca04:	2400      	movs	r4, #0
 801ca06:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ca0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca0e:	4621      	mov	r1, r4
 801ca10:	4407      	add	r7, r0
 801ca12:	18fb      	adds	r3, r7, r3
 801ca14:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca16:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801ca1a:	fb95 f3f3 	sdiv	r3, r5, r3
 801ca1e:	9304      	str	r3, [sp, #16]
 801ca20:	f109 0304 	add.w	r3, r9, #4
 801ca24:	4618      	mov	r0, r3
 801ca26:	9308      	str	r3, [sp, #32]
 801ca28:	f008 fc0a 	bl	8025240 <memset>
 801ca2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca2e:	42bb      	cmp	r3, r7
 801ca30:	f240 8223 	bls.w	801ce7a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801ca34:	2003      	movs	r0, #3
 801ca36:	f04f 0c07 	mov.w	ip, #7
 801ca3a:	f04f 0e0b 	mov.w	lr, #11
 801ca3e:	2d00      	cmp	r5, #0
 801ca40:	f000 813c 	beq.w	801ccbc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801ca44:	f898 3000 	ldrb.w	r3, [r8]
 801ca48:	b2db      	uxtb	r3, r3
 801ca4a:	2bfe      	cmp	r3, #254	@ 0xfe
 801ca4c:	d126      	bne.n	801ca9c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801ca4e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ca52:	f108 0604 	add.w	r6, r8, #4
 801ca56:	f898 2002 	ldrb.w	r2, [r8, #2]
 801ca5a:	3d01      	subs	r5, #1
 801ca5c:	b2c9      	uxtb	r1, r1
 801ca5e:	f898 8003 	ldrb.w	r8, [r8, #3]
 801ca62:	b2d2      	uxtb	r2, r2
 801ca64:	f361 0407 	bfi	r4, r1, #0, #8
 801ca68:	fa5f f888 	uxtb.w	r8, r8
 801ca6c:	b2ad      	uxth	r5, r5
 801ca6e:	f362 240f 	bfi	r4, r2, #8, #8
 801ca72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ca76:	fb10 2208 	smlabb	r2, r0, r8, r2
 801ca7a:	f368 4417 	bfi	r4, r8, #16, #8
 801ca7e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801ca82:	0e23      	lsrs	r3, r4, #24
 801ca84:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801ca88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ca8c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ca90:	605c      	str	r4, [r3, #4]
 801ca92:	46b0      	mov	r8, r6
 801ca94:	e7d3      	b.n	801ca3e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801ca96:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ca9a:	e792      	b.n	801c9c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801ca9c:	2bff      	cmp	r3, #255	@ 0xff
 801ca9e:	d127      	bne.n	801caf0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801caa0:	f898 2001 	ldrb.w	r2, [r8, #1]
 801caa4:	f108 0605 	add.w	r6, r8, #5
 801caa8:	f898 3002 	ldrb.w	r3, [r8, #2]
 801caac:	3d01      	subs	r5, #1
 801caae:	b2d2      	uxtb	r2, r2
 801cab0:	f898 1003 	ldrb.w	r1, [r8, #3]
 801cab4:	b2db      	uxtb	r3, r3
 801cab6:	f898 8004 	ldrb.w	r8, [r8, #4]
 801caba:	f362 0407 	bfi	r4, r2, #0, #8
 801cabe:	b2c9      	uxtb	r1, r1
 801cac0:	fa5f f888 	uxtb.w	r8, r8
 801cac4:	f363 240f 	bfi	r4, r3, #8, #8
 801cac8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cacc:	b2ad      	uxth	r5, r5
 801cace:	fb10 3301 	smlabb	r3, r0, r1, r3
 801cad2:	f361 4417 	bfi	r4, r1, #16, #8
 801cad6:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801cada:	f368 641f 	bfi	r4, r8, #24, #8
 801cade:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801cae2:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801cae6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801caea:	f8c8 4004 	str.w	r4, [r8, #4]
 801caee:	e7d0      	b.n	801ca92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801caf0:	119a      	asrs	r2, r3, #6
 801caf2:	f108 0601 	add.w	r6, r8, #1
 801caf6:	d107      	bne.n	801cb08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801caf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cafc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801cb00:	685c      	ldr	r4, [r3, #4]
 801cb02:	3d01      	subs	r5, #1
 801cb04:	b2ad      	uxth	r5, r5
 801cb06:	e7c4      	b.n	801ca92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801cb08:	2a01      	cmp	r2, #1
 801cb0a:	d129      	bne.n	801cb60 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801cb0c:	f003 0203 	and.w	r2, r3, #3
 801cb10:	1ea1      	subs	r1, r4, #2
 801cb12:	4411      	add	r1, r2
 801cb14:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801cb18:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801cb1c:	b2c9      	uxtb	r1, r1
 801cb1e:	3a02      	subs	r2, #2
 801cb20:	3b02      	subs	r3, #2
 801cb22:	f361 0407 	bfi	r4, r1, #0, #8
 801cb26:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cb2a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801cb2e:	f362 240f 	bfi	r4, r2, #8, #8
 801cb32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cb36:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801cb3a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801cb3e:	fb10 2203 	smlabb	r2, r0, r3, r2
 801cb42:	f363 4417 	bfi	r4, r3, #16, #8
 801cb46:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801cb4a:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801cb4e:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801cb52:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801cb56:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801cb5a:	f8c8 4004 	str.w	r4, [r8, #4]
 801cb5e:	e7d0      	b.n	801cb02 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801cb60:	2a02      	cmp	r2, #2
 801cb62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cb66:	d12e      	bne.n	801cbc6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801cb68:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cb6c:	f1a3 0a20 	sub.w	sl, r3, #32
 801cb70:	f108 0602 	add.w	r6, r8, #2
 801cb74:	b2d2      	uxtb	r2, r2
 801cb76:	f002 010f 	and.w	r1, r2, #15
 801cb7a:	1112      	asrs	r2, r2, #4
 801cb7c:	3908      	subs	r1, #8
 801cb7e:	3a08      	subs	r2, #8
 801cb80:	4451      	add	r1, sl
 801cb82:	4492      	add	sl, r2
 801cb84:	4421      	add	r1, r4
 801cb86:	b2c9      	uxtb	r1, r1
 801cb88:	f361 0407 	bfi	r4, r1, #0, #8
 801cb8c:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801cb90:	f1a8 0820 	sub.w	r8, r8, #32
 801cb94:	4443      	add	r3, r8
 801cb96:	b2db      	uxtb	r3, r3
 801cb98:	f363 240f 	bfi	r4, r3, #8, #8
 801cb9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cba0:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801cba4:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801cba8:	fb10 330a 	smlabb	r3, r0, sl, r3
 801cbac:	f36a 4417 	bfi	r4, sl, #16, #8
 801cbb0:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801cbb4:	0e22      	lsrs	r2, r4, #24
 801cbb6:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801cbba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801cbbe:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801cbc2:	6054      	str	r4, [r2, #4]
 801cbc4:	e79d      	b.n	801cb02 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801cbc6:	3301      	adds	r3, #1
 801cbc8:	42ab      	cmp	r3, r5
 801cbca:	dd59      	ble.n	801cc80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801cbcc:	1b5d      	subs	r5, r3, r5
 801cbce:	2d00      	cmp	r5, #0
 801cbd0:	dc58      	bgt.n	801cc84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801cbd2:	f8dd a004 	ldr.w	sl, [sp, #4]
 801cbd6:	f04f 0800 	mov.w	r8, #0
 801cbda:	f1ba 0f00 	cmp.w	sl, #0
 801cbde:	f340 8108 	ble.w	801cdf2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801cbe2:	1c73      	adds	r3, r6, #1
 801cbe4:	9303      	str	r3, [sp, #12]
 801cbe6:	7833      	ldrb	r3, [r6, #0]
 801cbe8:	b2db      	uxtb	r3, r3
 801cbea:	2bfe      	cmp	r3, #254	@ 0xfe
 801cbec:	d16a      	bne.n	801ccc4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801cbee:	7871      	ldrb	r1, [r6, #1]
 801cbf0:	1d33      	adds	r3, r6, #4
 801cbf2:	78b2      	ldrb	r2, [r6, #2]
 801cbf4:	b2c9      	uxtb	r1, r1
 801cbf6:	78f0      	ldrb	r0, [r6, #3]
 801cbf8:	b2d2      	uxtb	r2, r2
 801cbfa:	9303      	str	r3, [sp, #12]
 801cbfc:	f361 0407 	bfi	r4, r1, #0, #8
 801cc00:	b2c0      	uxtb	r0, r0
 801cc02:	2303      	movs	r3, #3
 801cc04:	f362 240f 	bfi	r4, r2, #8, #8
 801cc08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cc0c:	fb13 2200 	smlabb	r2, r3, r0, r2
 801cc10:	f360 4417 	bfi	r4, r0, #16, #8
 801cc14:	2307      	movs	r3, #7
 801cc16:	0e25      	lsrs	r5, r4, #24
 801cc18:	fb13 2101 	smlabb	r1, r3, r1, r2
 801cc1c:	230b      	movs	r3, #11
 801cc1e:	fb13 1305 	smlabb	r3, r3, r5, r1
 801cc22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cc26:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801cc2a:	605c      	str	r4, [r3, #4]
 801cc2c:	2501      	movs	r5, #1
 801cc2e:	462e      	mov	r6, r5
 801cc30:	eb06 0308 	add.w	r3, r6, r8
 801cc34:	ebaa 0a06 	sub.w	sl, sl, r6
 801cc38:	1bad      	subs	r5, r5, r6
 801cc3a:	2b40      	cmp	r3, #64	@ 0x40
 801cc3c:	dd16      	ble.n	801cc6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801cc3e:	4658      	mov	r0, fp
 801cc40:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801cc44:	f7e6 faae 	bl	80031a4 <_ZN8touchgfx5paint9flushLineEPmi>
 801cc48:	4659      	mov	r1, fp
 801cc4a:	9b05      	ldr	r3, [sp, #20]
 801cc4c:	4642      	mov	r2, r8
 801cc4e:	4638      	mov	r0, r7
 801cc50:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cc54:	f7e6 fb0e 	bl	8003274 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801cc58:	4b30      	ldr	r3, [pc, #192]	@ (801cd1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801cc5a:	4447      	add	r7, r8
 801cc5c:	f04f 0800 	mov.w	r8, #0
 801cc60:	459b      	cmp	fp, r3
 801cc62:	bf0c      	ite	eq
 801cc64:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801cd20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801cc68:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801cd1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801cc6c:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801cc70:	4633      	mov	r3, r6
 801cc72:	3b01      	subs	r3, #1
 801cc74:	f842 4b04 	str.w	r4, [r2], #4
 801cc78:	d1fb      	bne.n	801cc72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801cc7a:	44b0      	add	r8, r6
 801cc7c:	9e03      	ldr	r6, [sp, #12]
 801cc7e:	e7ac      	b.n	801cbda <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801cc80:	1aed      	subs	r5, r5, r3
 801cc82:	e73f      	b.n	801cb04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801cc84:	9b01      	ldr	r3, [sp, #4]
 801cc86:	42ab      	cmp	r3, r5
 801cc88:	bfa8      	it	ge
 801cc8a:	462b      	movge	r3, r5
 801cc8c:	4698      	mov	r8, r3
 801cc8e:	9b01      	ldr	r3, [sp, #4]
 801cc90:	eba3 0a08 	sub.w	sl, r3, r8
 801cc94:	0e23      	lsrs	r3, r4, #24
 801cc96:	eba5 0508 	sub.w	r5, r5, r8
 801cc9a:	d00b      	beq.n	801ccb4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801cc9c:	9a05      	ldr	r2, [sp, #20]
 801cc9e:	4641      	mov	r1, r8
 801cca0:	4638      	mov	r0, r7
 801cca2:	4353      	muls	r3, r2
 801cca4:	1c5a      	adds	r2, r3, #1
 801cca6:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801ccaa:	4622      	mov	r2, r4
 801ccac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ccb0:	f7e6 fa92 	bl	80031d8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801ccb4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ccb8:	4447      	add	r7, r8
 801ccba:	e78c      	b.n	801cbd6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801ccbc:	f8dd a004 	ldr.w	sl, [sp, #4]
 801ccc0:	4646      	mov	r6, r8
 801ccc2:	e788      	b.n	801cbd6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801ccc4:	2bff      	cmp	r3, #255	@ 0xff
 801ccc6:	d11d      	bne.n	801cd04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801ccc8:	7870      	ldrb	r0, [r6, #1]
 801ccca:	1d73      	adds	r3, r6, #5
 801cccc:	78b2      	ldrb	r2, [r6, #2]
 801ccce:	b2c0      	uxtb	r0, r0
 801ccd0:	78f5      	ldrb	r5, [r6, #3]
 801ccd2:	b2d2      	uxtb	r2, r2
 801ccd4:	9303      	str	r3, [sp, #12]
 801ccd6:	f360 0407 	bfi	r4, r0, #0, #8
 801ccda:	7933      	ldrb	r3, [r6, #4]
 801ccdc:	b2ed      	uxtb	r5, r5
 801ccde:	b2d9      	uxtb	r1, r3
 801cce0:	f362 240f 	bfi	r4, r2, #8, #8
 801cce4:	2303      	movs	r3, #3
 801cce6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ccea:	f365 4417 	bfi	r4, r5, #16, #8
 801ccee:	fb13 2205 	smlabb	r2, r3, r5, r2
 801ccf2:	2307      	movs	r3, #7
 801ccf4:	f361 641f 	bfi	r4, r1, #24, #8
 801ccf8:	fb13 2000 	smlabb	r0, r3, r0, r2
 801ccfc:	230b      	movs	r3, #11
 801ccfe:	fb13 0301 	smlabb	r3, r3, r1, r0
 801cd02:	e78e      	b.n	801cc22 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801cd04:	119d      	asrs	r5, r3, #6
 801cd06:	d10d      	bne.n	801cd24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801cd08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cd0c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801cd10:	685c      	ldr	r4, [r3, #4]
 801cd12:	e78b      	b.n	801cc2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801cd14:	2402641c 	.word	0x2402641c
 801cd18:	24026416 	.word	0x24026416
 801cd1c:	24000140 	.word	0x24000140
 801cd20:	24000240 	.word	0x24000240
 801cd24:	2d01      	cmp	r5, #1
 801cd26:	d12a      	bne.n	801cd7e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801cd28:	f003 0203 	and.w	r2, r3, #3
 801cd2c:	1ea1      	subs	r1, r4, #2
 801cd2e:	2603      	movs	r6, #3
 801cd30:	4411      	add	r1, r2
 801cd32:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801cd36:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801cd3a:	b2c9      	uxtb	r1, r1
 801cd3c:	3a02      	subs	r2, #2
 801cd3e:	3b02      	subs	r3, #2
 801cd40:	f361 0407 	bfi	r4, r1, #0, #8
 801cd44:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cd48:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801cd4c:	f362 240f 	bfi	r4, r2, #8, #8
 801cd50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cd54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801cd58:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801cd5c:	fb16 2203 	smlabb	r2, r6, r3, r2
 801cd60:	f363 4417 	bfi	r4, r3, #16, #8
 801cd64:	2307      	movs	r3, #7
 801cd66:	0e20      	lsrs	r0, r4, #24
 801cd68:	fb13 2101 	smlabb	r1, r3, r1, r2
 801cd6c:	230b      	movs	r3, #11
 801cd6e:	fb13 1300 	smlabb	r3, r3, r0, r1
 801cd72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cd76:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801cd7a:	605c      	str	r4, [r3, #4]
 801cd7c:	e757      	b.n	801cc2e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801cd7e:	2d02      	cmp	r5, #2
 801cd80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cd84:	d12f      	bne.n	801cde6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801cd86:	1cb2      	adds	r2, r6, #2
 801cd88:	f1a3 0020 	sub.w	r0, r3, #32
 801cd8c:	9203      	str	r2, [sp, #12]
 801cd8e:	7872      	ldrb	r2, [r6, #1]
 801cd90:	b2d2      	uxtb	r2, r2
 801cd92:	f002 010f 	and.w	r1, r2, #15
 801cd96:	1112      	asrs	r2, r2, #4
 801cd98:	3908      	subs	r1, #8
 801cd9a:	3a08      	subs	r2, #8
 801cd9c:	4401      	add	r1, r0
 801cd9e:	4402      	add	r2, r0
 801cda0:	4421      	add	r1, r4
 801cda2:	b2c9      	uxtb	r1, r1
 801cda4:	f361 0407 	bfi	r4, r1, #0, #8
 801cda8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801cdac:	3d20      	subs	r5, #32
 801cdae:	442b      	add	r3, r5
 801cdb0:	2503      	movs	r5, #3
 801cdb2:	b2db      	uxtb	r3, r3
 801cdb4:	f363 240f 	bfi	r4, r3, #8, #8
 801cdb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cdbc:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801cdc0:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801cdc4:	fb15 3302 	smlabb	r3, r5, r2, r3
 801cdc8:	f362 4417 	bfi	r4, r2, #16, #8
 801cdcc:	2207      	movs	r2, #7
 801cdce:	0e20      	lsrs	r0, r4, #24
 801cdd0:	fb12 3201 	smlabb	r2, r2, r1, r3
 801cdd4:	210b      	movs	r1, #11
 801cdd6:	fb11 2100 	smlabb	r1, r1, r0, r2
 801cdda:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801cdde:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801cde2:	604c      	str	r4, [r1, #4]
 801cde4:	e722      	b.n	801cc2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801cde6:	1c5d      	adds	r5, r3, #1
 801cde8:	4656      	mov	r6, sl
 801cdea:	45aa      	cmp	sl, r5
 801cdec:	bfa8      	it	ge
 801cdee:	462e      	movge	r6, r5
 801cdf0:	e71e      	b.n	801cc30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801cdf2:	f1b8 0f00 	cmp.w	r8, #0
 801cdf6:	d00d      	beq.n	801ce14 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801cdf8:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801cdfc:	4658      	mov	r0, fp
 801cdfe:	f7e6 f9d1 	bl	80031a4 <_ZN8touchgfx5paint9flushLineEPmi>
 801ce02:	4642      	mov	r2, r8
 801ce04:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ce08:	4638      	mov	r0, r7
 801ce0a:	9b05      	ldr	r3, [sp, #20]
 801ce0c:	4659      	mov	r1, fp
 801ce0e:	4447      	add	r7, r8
 801ce10:	f7e6 fa30 	bl	8003274 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801ce14:	4b1d      	ldr	r3, [pc, #116]	@ (801ce8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801ce16:	9a01      	ldr	r2, [sp, #4]
 801ce18:	881b      	ldrh	r3, [r3, #0]
 801ce1a:	1a9b      	subs	r3, r3, r2
 801ce1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce20:	441f      	add	r7, r3
 801ce22:	9b04      	ldr	r3, [sp, #16]
 801ce24:	3301      	adds	r3, #1
 801ce26:	9304      	str	r3, [sp, #16]
 801ce28:	9a04      	ldr	r2, [sp, #16]
 801ce2a:	9b00      	ldr	r3, [sp, #0]
 801ce2c:	4293      	cmp	r3, r2
 801ce2e:	d11d      	bne.n	801ce6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801ce30:	9b02      	ldr	r3, [sp, #8]
 801ce32:	2400      	movs	r4, #0
 801ce34:	9a02      	ldr	r2, [sp, #8]
 801ce36:	f103 0801 	add.w	r8, r3, #1
 801ce3a:	9b06      	ldr	r3, [sp, #24]
 801ce3c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801ce40:	4621      	mov	r1, r4
 801ce42:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ce46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ce4a:	9b07      	ldr	r3, [sp, #28]
 801ce4c:	ba36      	rev	r6, r6
 801ce4e:	9808      	ldr	r0, [sp, #32]
 801ce50:	441e      	add	r6, r3
 801ce52:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ce56:	1aed      	subs	r5, r5, r3
 801ce58:	f008 f9f2 	bl	8025240 <memset>
 801ce5c:	f8cd 8008 	str.w	r8, [sp, #8]
 801ce60:	b2ad      	uxth	r5, r5
 801ce62:	9404      	str	r4, [sp, #16]
 801ce64:	f7e6 f994 	bl	8003190 <_ZN8touchgfx5paint8tearDownEv>
 801ce68:	46b0      	mov	r8, r6
 801ce6a:	e5df      	b.n	801ca2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801ce6c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801ce70:	9a01      	ldr	r2, [sp, #4]
 801ce72:	1a9b      	subs	r3, r3, r2
 801ce74:	1b5d      	subs	r5, r3, r5
 801ce76:	b2ad      	uxth	r5, r5
 801ce78:	e7f4      	b.n	801ce64 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801ce7a:	4b05      	ldr	r3, [pc, #20]	@ (801ce90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801ce7c:	6818      	ldr	r0, [r3, #0]
 801ce7e:	6803      	ldr	r3, [r0, #0]
 801ce80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce82:	4798      	blx	r3
 801ce84:	b00f      	add	sp, #60	@ 0x3c
 801ce86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce8a:	bf00      	nop
 801ce8c:	24026416 	.word	0x24026416
 801ce90:	2402641c 	.word	0x2402641c

0801ce94 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801ce94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce98:	b093      	sub	sp, #76	@ 0x4c
 801ce9a:	460d      	mov	r5, r1
 801ce9c:	4616      	mov	r6, r2
 801ce9e:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801cea2:	9000      	str	r0, [sp, #0]
 801cea4:	f1bb 0f00 	cmp.w	fp, #0
 801cea8:	f000 82ac 	beq.w	801d404 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801ceac:	6810      	ldr	r0, [r2, #0]
 801ceae:	ac0e      	add	r4, sp, #56	@ 0x38
 801ceb0:	6851      	ldr	r1, [r2, #4]
 801ceb2:	c403      	stmia	r4!, {r0, r1}
 801ceb4:	6818      	ldr	r0, [r3, #0]
 801ceb6:	ac10      	add	r4, sp, #64	@ 0x40
 801ceb8:	6859      	ldr	r1, [r3, #4]
 801ceba:	c403      	stmia	r4!, {r0, r1}
 801cebc:	a80e      	add	r0, sp, #56	@ 0x38
 801cebe:	f7f9 fa29 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cec2:	4631      	mov	r1, r6
 801cec4:	a810      	add	r0, sp, #64	@ 0x40
 801cec6:	f7f9 fa4d 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ceca:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801cece:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ced2:	bfdb      	ittet	le
 801ced4:	b293      	uxthle	r3, r2
 801ced6:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ceda:	2301      	movgt	r3, #1
 801cedc:	fb91 f3f3 	sdivle	r3, r1, r3
 801cee0:	9301      	str	r3, [sp, #4]
 801cee2:	f105 0308 	add.w	r3, r5, #8
 801cee6:	9901      	ldr	r1, [sp, #4]
 801cee8:	9305      	str	r3, [sp, #20]
 801ceea:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801ceee:	440b      	add	r3, r1
 801cef0:	3b01      	subs	r3, #1
 801cef2:	fb93 f3f1 	sdiv	r3, r3, r1
 801cef6:	3b01      	subs	r3, #1
 801cef8:	9905      	ldr	r1, [sp, #20]
 801cefa:	b29b      	uxth	r3, r3
 801cefc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801cf00:	9901      	ldr	r1, [sp, #4]
 801cf02:	9306      	str	r3, [sp, #24]
 801cf04:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801cf08:	fb93 f0f1 	sdiv	r0, r3, r1
 801cf0c:	b284      	uxth	r4, r0
 801cf0e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801cf12:	9403      	str	r4, [sp, #12]
 801cf14:	9d03      	ldr	r5, [sp, #12]
 801cf16:	9c01      	ldr	r4, [sp, #4]
 801cf18:	fb05 3714 	mls	r7, r5, r4, r3
 801cf1c:	fb17 f702 	smulbb	r7, r7, r2
 801cf20:	440f      	add	r7, r1
 801cf22:	b2bf      	uxth	r7, r7
 801cf24:	2d00      	cmp	r5, #0
 801cf26:	d06b      	beq.n	801d000 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801cf28:	1e6a      	subs	r2, r5, #1
 801cf2a:	9805      	ldr	r0, [sp, #20]
 801cf2c:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801cf30:	9a06      	ldr	r2, [sp, #24]
 801cf32:	fa99 f989 	rev.w	r9, r9
 801cf36:	4491      	add	r9, r2
 801cf38:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801cf3c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801cf40:	4411      	add	r1, r2
 801cf42:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801cf46:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801d2a4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801cf4a:	4413      	add	r3, r2
 801cf4c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801cf50:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801cf54:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801cf58:	9302      	str	r3, [sp, #8]
 801cf5a:	4bd0      	ldr	r3, [pc, #832]	@ (801d29c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801cf5c:	6818      	ldr	r0, [r3, #0]
 801cf5e:	6803      	ldr	r3, [r0, #0]
 801cf60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf62:	4798      	blx	r3
 801cf64:	4bce      	ldr	r3, [pc, #824]	@ (801d2a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801cf66:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801cf6a:	881b      	ldrh	r3, [r3, #0]
 801cf6c:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801cf70:	fb03 2404 	mla	r4, r3, r4, r2
 801cf74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cf78:	436b      	muls	r3, r5
 801cf7a:	2500      	movs	r5, #0
 801cf7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cf80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf84:	4629      	mov	r1, r5
 801cf86:	4404      	add	r4, r0
 801cf88:	18e3      	adds	r3, r4, r3
 801cf8a:	930d      	str	r3, [sp, #52]	@ 0x34
 801cf8c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801cf90:	fb97 f3f3 	sdiv	r3, r7, r3
 801cf94:	9304      	str	r3, [sp, #16]
 801cf96:	9b00      	ldr	r3, [sp, #0]
 801cf98:	3304      	adds	r3, #4
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf9e:	f008 f94f 	bl	8025240 <memset>
 801cfa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cfa4:	42a3      	cmp	r3, r4
 801cfa6:	f240 8228 	bls.w	801d3fa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801cfaa:	2003      	movs	r0, #3
 801cfac:	2607      	movs	r6, #7
 801cfae:	2f00      	cmp	r7, #0
 801cfb0:	f000 80cb 	beq.w	801d14a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801cfb4:	f899 3000 	ldrb.w	r3, [r9]
 801cfb8:	b2db      	uxtb	r3, r3
 801cfba:	2bfe      	cmp	r3, #254	@ 0xfe
 801cfbc:	d123      	bne.n	801d006 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801cfbe:	f899 3001 	ldrb.w	r3, [r9, #1]
 801cfc2:	3f01      	subs	r7, #1
 801cfc4:	f899 2002 	ldrb.w	r2, [r9, #2]
 801cfc8:	f109 0804 	add.w	r8, r9, #4
 801cfcc:	b2db      	uxtb	r3, r3
 801cfce:	f899 1003 	ldrb.w	r1, [r9, #3]
 801cfd2:	b2d2      	uxtb	r2, r2
 801cfd4:	f363 0507 	bfi	r5, r3, #0, #8
 801cfd8:	b2c9      	uxtb	r1, r1
 801cfda:	b2bf      	uxth	r7, r7
 801cfdc:	f362 250f 	bfi	r5, r2, #8, #8
 801cfe0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cfe4:	fb10 2201 	smlabb	r2, r0, r1, r2
 801cfe8:	f361 4517 	bfi	r5, r1, #16, #8
 801cfec:	fb16 2303 	smlabb	r3, r6, r3, r2
 801cff0:	9a00      	ldr	r2, [sp, #0]
 801cff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cff6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cffa:	605d      	str	r5, [r3, #4]
 801cffc:	46c1      	mov	r9, r8
 801cffe:	e7d6      	b.n	801cfae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801d000:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d004:	e798      	b.n	801cf38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801d006:	119a      	asrs	r2, r3, #6
 801d008:	f109 0801 	add.w	r8, r9, #1
 801d00c:	d108      	bne.n	801d020 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801d00e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d012:	9a00      	ldr	r2, [sp, #0]
 801d014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d018:	685d      	ldr	r5, [r3, #4]
 801d01a:	3f01      	subs	r7, #1
 801d01c:	b2bf      	uxth	r7, r7
 801d01e:	e7ed      	b.n	801cffc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801d020:	2a01      	cmp	r2, #1
 801d022:	d125      	bne.n	801d070 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801d024:	f003 0103 	and.w	r1, r3, #3
 801d028:	1eaa      	subs	r2, r5, #2
 801d02a:	440a      	add	r2, r1
 801d02c:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801d030:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d034:	b2d2      	uxtb	r2, r2
 801d036:	3902      	subs	r1, #2
 801d038:	3b02      	subs	r3, #2
 801d03a:	f362 0507 	bfi	r5, r2, #0, #8
 801d03e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801d042:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801d046:	f361 250f 	bfi	r5, r1, #8, #8
 801d04a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801d04e:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801d052:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d056:	fb10 1103 	smlabb	r1, r0, r3, r1
 801d05a:	f363 4517 	bfi	r5, r3, #16, #8
 801d05e:	9b00      	ldr	r3, [sp, #0]
 801d060:	fb16 1202 	smlabb	r2, r6, r2, r1
 801d064:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d068:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801d06c:	6055      	str	r5, [r2, #4]
 801d06e:	e7d4      	b.n	801d01a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801d070:	2a02      	cmp	r2, #2
 801d072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d076:	d12c      	bne.n	801d0d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801d078:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d07c:	f1a3 0c20 	sub.w	ip, r3, #32
 801d080:	f109 0802 	add.w	r8, r9, #2
 801d084:	b2d2      	uxtb	r2, r2
 801d086:	f002 010f 	and.w	r1, r2, #15
 801d08a:	1112      	asrs	r2, r2, #4
 801d08c:	3908      	subs	r1, #8
 801d08e:	3a08      	subs	r2, #8
 801d090:	4461      	add	r1, ip
 801d092:	4494      	add	ip, r2
 801d094:	4429      	add	r1, r5
 801d096:	b2c9      	uxtb	r1, r1
 801d098:	f361 0507 	bfi	r5, r1, #0, #8
 801d09c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801d0a0:	f1ae 0e20 	sub.w	lr, lr, #32
 801d0a4:	4473      	add	r3, lr
 801d0a6:	b2db      	uxtb	r3, r3
 801d0a8:	f363 250f 	bfi	r5, r3, #8, #8
 801d0ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d0b0:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801d0b4:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801d0b8:	fb10 330c 	smlabb	r3, r0, ip, r3
 801d0bc:	f36c 4517 	bfi	r5, ip, #16, #8
 801d0c0:	fb16 3101 	smlabb	r1, r6, r1, r3
 801d0c4:	9b00      	ldr	r3, [sp, #0]
 801d0c6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801d0ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801d0ce:	604d      	str	r5, [r1, #4]
 801d0d0:	e7a3      	b.n	801d01a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801d0d2:	3301      	adds	r3, #1
 801d0d4:	42bb      	cmp	r3, r7
 801d0d6:	dd23      	ble.n	801d120 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801d0d8:	eba3 0907 	sub.w	r9, r3, r7
 801d0dc:	f1b9 0f00 	cmp.w	r9, #0
 801d0e0:	dc20      	bgt.n	801d124 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801d0e2:	9e02      	ldr	r6, [sp, #8]
 801d0e4:	2700      	movs	r7, #0
 801d0e6:	2e00      	cmp	r6, #0
 801d0e8:	f340 8142 	ble.w	801d370 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801d0ec:	f108 0301 	add.w	r3, r8, #1
 801d0f0:	9307      	str	r3, [sp, #28]
 801d0f2:	f898 3000 	ldrb.w	r3, [r8]
 801d0f6:	b2db      	uxtb	r3, r3
 801d0f8:	119a      	asrs	r2, r3, #6
 801d0fa:	d12a      	bne.n	801d152 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801d0fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d100:	9a00      	ldr	r2, [sp, #0]
 801d102:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d10a:	685d      	ldr	r5, [r3, #4]
 801d10c:	f040 811f 	bne.w	801d34e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d110:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d114:	7025      	strb	r5, [r4, #0]
 801d116:	7063      	strb	r3, [r4, #1]
 801d118:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d11c:	70a3      	strb	r3, [r4, #2]
 801d11e:	e04e      	b.n	801d1be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d120:	1aff      	subs	r7, r7, r3
 801d122:	e77b      	b.n	801d01c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801d124:	9b02      	ldr	r3, [sp, #8]
 801d126:	4620      	mov	r0, r4
 801d128:	462a      	mov	r2, r5
 801d12a:	454b      	cmp	r3, r9
 801d12c:	bfa8      	it	ge
 801d12e:	464b      	movge	r3, r9
 801d130:	461f      	mov	r7, r3
 801d132:	9b02      	ldr	r3, [sp, #8]
 801d134:	4639      	mov	r1, r7
 801d136:	1bde      	subs	r6, r3, r7
 801d138:	eba9 0907 	sub.w	r9, r9, r7
 801d13c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d140:	465b      	mov	r3, fp
 801d142:	f7e6 f849 	bl	80031d8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801d146:	443c      	add	r4, r7
 801d148:	e7cc      	b.n	801d0e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801d14a:	46c8      	mov	r8, r9
 801d14c:	9e02      	ldr	r6, [sp, #8]
 801d14e:	46b9      	mov	r9, r7
 801d150:	e7c8      	b.n	801d0e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801d152:	2a01      	cmp	r2, #1
 801d154:	d136      	bne.n	801d1c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801d156:	f003 0103 	and.w	r1, r3, #3
 801d15a:	1ea8      	subs	r0, r5, #2
 801d15c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d160:	4408      	add	r0, r1
 801d162:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801d166:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d16a:	b2c0      	uxtb	r0, r0
 801d16c:	f1a1 0102 	sub.w	r1, r1, #2
 801d170:	f1a3 0302 	sub.w	r3, r3, #2
 801d174:	f360 0507 	bfi	r5, r0, #0, #8
 801d178:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801d17c:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801d180:	f361 250f 	bfi	r5, r1, #8, #8
 801d184:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801d188:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801d18c:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801d190:	f04f 0303 	mov.w	r3, #3
 801d194:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801d198:	f04f 0c07 	mov.w	ip, #7
 801d19c:	9b00      	ldr	r3, [sp, #0]
 801d19e:	f368 4517 	bfi	r5, r8, #16, #8
 801d1a2:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801d1a6:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801d1aa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801d1ae:	f8cc 5004 	str.w	r5, [ip, #4]
 801d1b2:	f040 80cd 	bne.w	801d350 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801d1b6:	7020      	strb	r0, [r4, #0]
 801d1b8:	7061      	strb	r1, [r4, #1]
 801d1ba:	f884 8002 	strb.w	r8, [r4, #2]
 801d1be:	3e01      	subs	r6, #1
 801d1c0:	3403      	adds	r4, #3
 801d1c2:	e0c1      	b.n	801d348 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801d1c4:	2a02      	cmp	r2, #2
 801d1c6:	d13d      	bne.n	801d244 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801d1c8:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d1cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d1d0:	f108 0202 	add.w	r2, r8, #2
 801d1d4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d1d8:	b2c9      	uxtb	r1, r1
 801d1da:	f1a3 0c20 	sub.w	ip, r3, #32
 801d1de:	9207      	str	r2, [sp, #28]
 801d1e0:	f001 000f 	and.w	r0, r1, #15
 801d1e4:	f1a0 0008 	sub.w	r0, r0, #8
 801d1e8:	4460      	add	r0, ip
 801d1ea:	4428      	add	r0, r5
 801d1ec:	b2c0      	uxtb	r0, r0
 801d1ee:	f360 0507 	bfi	r5, r0, #0, #8
 801d1f2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801d1f6:	f1a2 0220 	sub.w	r2, r2, #32
 801d1fa:	4413      	add	r3, r2
 801d1fc:	ea4f 1221 	mov.w	r2, r1, asr #4
 801d200:	b2db      	uxtb	r3, r3
 801d202:	f1a2 0208 	sub.w	r2, r2, #8
 801d206:	f363 250f 	bfi	r5, r3, #8, #8
 801d20a:	4462      	add	r2, ip
 801d20c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801d210:	f04f 0c03 	mov.w	ip, #3
 801d214:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801d218:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d21c:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801d220:	f04f 0107 	mov.w	r1, #7
 801d224:	f362 4517 	bfi	r5, r2, #16, #8
 801d228:	fb11 c100 	smlabb	r1, r1, r0, ip
 801d22c:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801d230:	9900      	ldr	r1, [sp, #0]
 801d232:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801d236:	604d      	str	r5, [r1, #4]
 801d238:	f040 8089 	bne.w	801d34e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d23c:	7020      	strb	r0, [r4, #0]
 801d23e:	7063      	strb	r3, [r4, #1]
 801d240:	70a2      	strb	r2, [r4, #2]
 801d242:	e7bc      	b.n	801d1be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d244:	2bfe      	cmp	r3, #254	@ 0xfe
 801d246:	d12f      	bne.n	801d2a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801d248:	f898 0001 	ldrb.w	r0, [r8, #1]
 801d24c:	f108 0304 	add.w	r3, r8, #4
 801d250:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d254:	f04f 0c03 	mov.w	ip, #3
 801d258:	f898 1003 	ldrb.w	r1, [r8, #3]
 801d25c:	b2c0      	uxtb	r0, r0
 801d25e:	b2d2      	uxtb	r2, r2
 801d260:	9307      	str	r3, [sp, #28]
 801d262:	b2c9      	uxtb	r1, r1
 801d264:	f360 0507 	bfi	r5, r0, #0, #8
 801d268:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801d26c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d270:	f362 250f 	bfi	r5, r2, #8, #8
 801d274:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801d278:	f04f 0307 	mov.w	r3, #7
 801d27c:	f361 4517 	bfi	r5, r1, #16, #8
 801d280:	fb13 c300 	smlabb	r3, r3, r0, ip
 801d284:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801d288:	9b00      	ldr	r3, [sp, #0]
 801d28a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801d28e:	605d      	str	r5, [r3, #4]
 801d290:	d15d      	bne.n	801d34e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801d292:	7020      	strb	r0, [r4, #0]
 801d294:	7062      	strb	r2, [r4, #1]
 801d296:	70a1      	strb	r1, [r4, #2]
 801d298:	e791      	b.n	801d1be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801d29a:	bf00      	nop
 801d29c:	2402641c 	.word	0x2402641c
 801d2a0:	24026416 	.word	0x24026416
 801d2a4:	24000140 	.word	0x24000140
 801d2a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d2ac:	1c5a      	adds	r2, r3, #1
 801d2ae:	b94b      	cbnz	r3, 801d2c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801d2b0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d2b4:	d14c      	bne.n	801d350 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801d2b6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801d2ba:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d2be:	7025      	strb	r5, [r4, #0]
 801d2c0:	7062      	strb	r2, [r4, #1]
 801d2c2:	e72b      	b.n	801d11c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801d2c4:	4296      	cmp	r6, r2
 801d2c6:	46b0      	mov	r8, r6
 801d2c8:	bfa8      	it	ge
 801d2ca:	4690      	movge	r8, r2
 801d2cc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d2d0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d2d4:	eba6 0608 	sub.w	r6, r6, r8
 801d2d8:	eba2 0908 	sub.w	r9, r2, r8
 801d2dc:	9308      	str	r3, [sp, #32]
 801d2de:	b2eb      	uxtb	r3, r5
 801d2e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801d2e2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801d2e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d2e8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801d2ec:	930a      	str	r3, [sp, #40]	@ 0x28
 801d2ee:	9b08      	ldr	r3, [sp, #32]
 801d2f0:	d030      	beq.n	801d354 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801d2f2:	18fb      	adds	r3, r7, r3
 801d2f4:	2bc0      	cmp	r3, #192	@ 0xc0
 801d2f6:	dd15      	ble.n	801d324 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801d2f8:	4650      	mov	r0, sl
 801d2fa:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801d2fe:	f7e5 ff51 	bl	80031a4 <_ZN8touchgfx5paint9flushLineEPmi>
 801d302:	2203      	movs	r2, #3
 801d304:	4651      	mov	r1, sl
 801d306:	465b      	mov	r3, fp
 801d308:	4620      	mov	r0, r4
 801d30a:	443c      	add	r4, r7
 801d30c:	fb97 f2f2 	sdiv	r2, r7, r2
 801d310:	f7e5 ff8c 	bl	800322c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801d314:	4b3d      	ldr	r3, [pc, #244]	@ (801d40c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801d316:	2700      	movs	r7, #0
 801d318:	459a      	cmp	sl, r3
 801d31a:	bf0c      	ite	eq
 801d31c:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801d418 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801d320:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801d40c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801d324:	eb0a 0307 	add.w	r3, sl, r7
 801d328:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d32a:	f1b8 0801 	subs.w	r8, r8, #1
 801d32e:	f103 0303 	add.w	r3, r3, #3
 801d332:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d336:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d338:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d33c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d33e:	f803 2c01 	strb.w	r2, [r3, #-1]
 801d342:	d1f1      	bne.n	801d328 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801d344:	9b08      	ldr	r3, [sp, #32]
 801d346:	441f      	add	r7, r3
 801d348:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d34c:	e6cb      	b.n	801d0e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801d34e:	2201      	movs	r2, #1
 801d350:	4690      	mov	r8, r2
 801d352:	e7bb      	b.n	801d2cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801d354:	4423      	add	r3, r4
 801d356:	42a3      	cmp	r3, r4
 801d358:	d9f6      	bls.n	801d348 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801d35a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d35c:	3403      	adds	r4, #3
 801d35e:	f804 2c03 	strb.w	r2, [r4, #-3]
 801d362:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d364:	f804 2c02 	strb.w	r2, [r4, #-2]
 801d368:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d36a:	f804 2c01 	strb.w	r2, [r4, #-1]
 801d36e:	e7f2      	b.n	801d356 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801d370:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d374:	d00e      	beq.n	801d394 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801d376:	b16f      	cbz	r7, 801d394 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801d378:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801d37c:	4650      	mov	r0, sl
 801d37e:	f7e5 ff11 	bl	80031a4 <_ZN8touchgfx5paint9flushLineEPmi>
 801d382:	2203      	movs	r2, #3
 801d384:	4620      	mov	r0, r4
 801d386:	443c      	add	r4, r7
 801d388:	465b      	mov	r3, fp
 801d38a:	4651      	mov	r1, sl
 801d38c:	fb97 f2f2 	sdiv	r2, r7, r2
 801d390:	f7e5 ff4c 	bl	800322c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801d394:	4b1e      	ldr	r3, [pc, #120]	@ (801d410 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801d396:	9a02      	ldr	r2, [sp, #8]
 801d398:	881b      	ldrh	r3, [r3, #0]
 801d39a:	1a9b      	subs	r3, r3, r2
 801d39c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3a0:	441c      	add	r4, r3
 801d3a2:	9b04      	ldr	r3, [sp, #16]
 801d3a4:	3301      	adds	r3, #1
 801d3a6:	9304      	str	r3, [sp, #16]
 801d3a8:	9a04      	ldr	r2, [sp, #16]
 801d3aa:	9b01      	ldr	r3, [sp, #4]
 801d3ac:	4293      	cmp	r3, r2
 801d3ae:	d11c      	bne.n	801d3ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801d3b0:	9b03      	ldr	r3, [sp, #12]
 801d3b2:	2500      	movs	r5, #0
 801d3b4:	9a03      	ldr	r2, [sp, #12]
 801d3b6:	1c5e      	adds	r6, r3, #1
 801d3b8:	9b05      	ldr	r3, [sp, #20]
 801d3ba:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801d3be:	4629      	mov	r1, r5
 801d3c0:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801d3c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d3c8:	9b06      	ldr	r3, [sp, #24]
 801d3ca:	fa98 f888 	rev.w	r8, r8
 801d3ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d3d0:	4498      	add	r8, r3
 801d3d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d3d6:	1aff      	subs	r7, r7, r3
 801d3d8:	f007 ff32 	bl	8025240 <memset>
 801d3dc:	b2bf      	uxth	r7, r7
 801d3de:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801d3e2:	f7e5 fed5 	bl	8003190 <_ZN8touchgfx5paint8tearDownEv>
 801d3e6:	46c1      	mov	r9, r8
 801d3e8:	e5db      	b.n	801cfa2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801d3ea:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801d3ee:	9b02      	ldr	r3, [sp, #8]
 801d3f0:	1aff      	subs	r7, r7, r3
 801d3f2:	eba7 0709 	sub.w	r7, r7, r9
 801d3f6:	b2bf      	uxth	r7, r7
 801d3f8:	e7f3      	b.n	801d3e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801d3fa:	4b06      	ldr	r3, [pc, #24]	@ (801d414 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801d3fc:	6818      	ldr	r0, [r3, #0]
 801d3fe:	6803      	ldr	r3, [r0, #0]
 801d400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d402:	4798      	blx	r3
 801d404:	b013      	add	sp, #76	@ 0x4c
 801d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d40a:	bf00      	nop
 801d40c:	24000140 	.word	0x24000140
 801d410:	24026416 	.word	0x24026416
 801d414:	2402641c 	.word	0x2402641c
 801d418:	24000240 	.word	0x24000240

0801d41c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d420:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801d424:	9c06      	ldr	r4, [sp, #24]
 801d426:	2800      	cmp	r0, #0
 801d428:	d06e      	beq.n	801d508 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d42a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801d42e:	2d00      	cmp	r5, #0
 801d430:	dd6a      	ble.n	801d508 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d432:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801d436:	f1bc 0f00 	cmp.w	ip, #0
 801d43a:	dd65      	ble.n	801d508 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d43c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801d440:	28ff      	cmp	r0, #255	@ 0xff
 801d442:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d446:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801d44a:	fb02 3306 	mla	r3, r2, r6, r3
 801d44e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801d452:	b2e4      	uxtb	r4, r4
 801d454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d458:	4419      	add	r1, r3
 801d45a:	fb02 f30c 	mul.w	r3, r2, ip
 801d45e:	eba2 0205 	sub.w	r2, r2, r5
 801d462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d466:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d46a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d46e:	440b      	add	r3, r1
 801d470:	d03e      	beq.n	801d4f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801d472:	fa1f fc80 	uxth.w	ip, r0
 801d476:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801d47a:	fb06 f60c 	mul.w	r6, r6, ip
 801d47e:	b280      	uxth	r0, r0
 801d480:	fb07 f70c 	mul.w	r7, r7, ip
 801d484:	fb04 f40c 	mul.w	r4, r4, ip
 801d488:	4299      	cmp	r1, r3
 801d48a:	d23d      	bcs.n	801d508 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d48c:	eb01 0c05 	add.w	ip, r1, r5
 801d490:	458c      	cmp	ip, r1
 801d492:	f101 0e03 	add.w	lr, r1, #3
 801d496:	d928      	bls.n	801d4ea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801d498:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d49c:	fb11 f100 	smulbb	r1, r1, r0
 801d4a0:	4421      	add	r1, r4
 801d4a2:	b289      	uxth	r1, r1
 801d4a4:	f101 0801 	add.w	r8, r1, #1
 801d4a8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d4ac:	1209      	asrs	r1, r1, #8
 801d4ae:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d4b2:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801d4b6:	fb11 f100 	smulbb	r1, r1, r0
 801d4ba:	4439      	add	r1, r7
 801d4bc:	b289      	uxth	r1, r1
 801d4be:	f101 0801 	add.w	r8, r1, #1
 801d4c2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d4c6:	1209      	asrs	r1, r1, #8
 801d4c8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d4cc:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d4d0:	fb11 f100 	smulbb	r1, r1, r0
 801d4d4:	4431      	add	r1, r6
 801d4d6:	b289      	uxth	r1, r1
 801d4d8:	f101 0801 	add.w	r8, r1, #1
 801d4dc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d4e0:	1209      	asrs	r1, r1, #8
 801d4e2:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801d4e6:	4671      	mov	r1, lr
 801d4e8:	e7d2      	b.n	801d490 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801d4ea:	4411      	add	r1, r2
 801d4ec:	e7cc      	b.n	801d488 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801d4ee:	4411      	add	r1, r2
 801d4f0:	4299      	cmp	r1, r3
 801d4f2:	d209      	bcs.n	801d508 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d4f4:	1948      	adds	r0, r1, r5
 801d4f6:	4281      	cmp	r1, r0
 801d4f8:	d2f9      	bcs.n	801d4ee <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801d4fa:	700c      	strb	r4, [r1, #0]
 801d4fc:	3103      	adds	r1, #3
 801d4fe:	f801 7c02 	strb.w	r7, [r1, #-2]
 801d502:	f801 6c01 	strb.w	r6, [r1, #-1]
 801d506:	e7f6      	b.n	801d4f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801d508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d50c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801d50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d510:	b093      	sub	sp, #76	@ 0x4c
 801d512:	4699      	mov	r9, r3
 801d514:	4617      	mov	r7, r2
 801d516:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d51a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801d51e:	4604      	mov	r4, r0
 801d520:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d524:	a80c      	add	r0, sp, #48	@ 0x30
 801d526:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801d52a:	460d      	mov	r5, r1
 801d52c:	4649      	mov	r1, r9
 801d52e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801d532:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d536:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801d53a:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801d53e:	f7f3 f951 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 801d542:	4639      	mov	r1, r7
 801d544:	a80c      	add	r0, sp, #48	@ 0x30
 801d546:	f7f3 f94d 	bl	80107e4 <_ZN8touchgfx4RectaNERKS0_>
 801d54a:	4b78      	ldr	r3, [pc, #480]	@ (801d72c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801d54c:	8818      	ldrh	r0, [r3, #0]
 801d54e:	4b78      	ldr	r3, [pc, #480]	@ (801d730 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801d550:	b202      	sxth	r2, r0
 801d552:	8819      	ldrh	r1, [r3, #0]
 801d554:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801d558:	b20f      	sxth	r7, r1
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	da07      	bge.n	801d56e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801d55e:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801d562:	4463      	add	r3, ip
 801d564:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801d568:	2300      	movs	r3, #0
 801d56a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801d56e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801d572:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801d576:	1ad2      	subs	r2, r2, r3
 801d578:	4594      	cmp	ip, r2
 801d57a:	bfc4      	itt	gt
 801d57c:	1ac2      	subgt	r2, r0, r3
 801d57e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801d582:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d586:	2a00      	cmp	r2, #0
 801d588:	da07      	bge.n	801d59a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801d58a:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801d58e:	4462      	add	r2, ip
 801d590:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801d594:	2200      	movs	r2, #0
 801d596:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801d59a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d59e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801d5a2:	1abf      	subs	r7, r7, r2
 801d5a4:	45bc      	cmp	ip, r7
 801d5a6:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801d738 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801d5aa:	bfc8      	it	gt
 801d5ac:	1a8f      	subgt	r7, r1, r2
 801d5ae:	f89c c000 	ldrb.w	ip, [ip]
 801d5b2:	bfc8      	it	gt
 801d5b4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801d5b8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801d5bc:	f1bc 0f00 	cmp.w	ip, #0
 801d5c0:	d176      	bne.n	801d6b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801d5c2:	4287      	cmp	r7, r0
 801d5c4:	bf14      	ite	ne
 801d5c6:	2100      	movne	r1, #0
 801d5c8:	2101      	moveq	r1, #1
 801d5ca:	2f00      	cmp	r7, #0
 801d5cc:	9107      	str	r1, [sp, #28]
 801d5ce:	dd73      	ble.n	801d6b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801d5d0:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801d5d4:	2900      	cmp	r1, #0
 801d5d6:	9104      	str	r1, [sp, #16]
 801d5d8:	dd6e      	ble.n	801d6b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801d5da:	f8b9 1000 	ldrh.w	r1, [r9]
 801d5de:	a80e      	add	r0, sp, #56	@ 0x38
 801d5e0:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801d5e4:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801d5e8:	1a5b      	subs	r3, r3, r1
 801d5ea:	a910      	add	r1, sp, #64	@ 0x40
 801d5ec:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801d5f0:	b21b      	sxth	r3, r3
 801d5f2:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801d5f6:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801d73c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801d5fa:	9305      	str	r3, [sp, #20]
 801d5fc:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801d600:	1ad2      	subs	r2, r2, r3
 801d602:	b213      	sxth	r3, r2
 801d604:	9306      	str	r3, [sp, #24]
 801d606:	9b05      	ldr	r3, [sp, #20]
 801d608:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801d60c:	9b06      	ldr	r3, [sp, #24]
 801d60e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d612:	9b04      	ldr	r3, [sp, #16]
 801d614:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801d618:	2300      	movs	r3, #0
 801d61a:	9310      	str	r3, [sp, #64]	@ 0x40
 801d61c:	f7f8 fea2 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d620:	4640      	mov	r0, r8
 801d622:	f7f8 fe77 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d626:	a810      	add	r0, sp, #64	@ 0x40
 801d628:	f7f8 fe74 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d62c:	4b41      	ldr	r3, [pc, #260]	@ (801d734 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801d62e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801d632:	4628      	mov	r0, r5
 801d634:	881b      	ldrh	r3, [r3, #0]
 801d636:	9308      	str	r3, [sp, #32]
 801d638:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d63c:	b21b      	sxth	r3, r3
 801d63e:	9303      	str	r3, [sp, #12]
 801d640:	682b      	ldr	r3, [r5, #0]
 801d642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d644:	4798      	blx	r3
 801d646:	9a03      	ldr	r2, [sp, #12]
 801d648:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801d64c:	4681      	mov	r9, r0
 801d64e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801d652:	fb13 f302 	smulbb	r3, r3, r2
 801d656:	2203      	movs	r2, #3
 801d658:	f8da 0000 	ldr.w	r0, [sl]
 801d65c:	fb15 3302 	smlabb	r3, r5, r2, r3
 801d660:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801d662:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d664:	441d      	add	r5, r3
 801d666:	6803      	ldr	r3, [r0, #0]
 801d668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d66a:	4798      	blx	r3
 801d66c:	9009      	str	r0, [sp, #36]	@ 0x24
 801d66e:	f8da 0000 	ldr.w	r0, [sl]
 801d672:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801d676:	6803      	ldr	r3, [r0, #0]
 801d678:	910a      	str	r1, [sp, #40]	@ 0x28
 801d67a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d67c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801d680:	4798      	blx	r3
 801d682:	f010 0f01 	tst.w	r0, #1
 801d686:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801d68a:	d01e      	beq.n	801d6ca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801d68c:	f8da 0000 	ldr.w	r0, [sl]
 801d690:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801d694:	6803      	ldr	r3, [r0, #0]
 801d696:	9200      	str	r2, [sp, #0]
 801d698:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801d69a:	462b      	mov	r3, r5
 801d69c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801d6a0:	47b0      	blx	r6
 801d6a2:	9b05      	ldr	r3, [sp, #20]
 801d6a4:	80a7      	strh	r7, [r4, #4]
 801d6a6:	8023      	strh	r3, [r4, #0]
 801d6a8:	9b06      	ldr	r3, [sp, #24]
 801d6aa:	8063      	strh	r3, [r4, #2]
 801d6ac:	9b04      	ldr	r3, [sp, #16]
 801d6ae:	e007      	b.n	801d6c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801d6b0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801d6b4:	4288      	cmp	r0, r1
 801d6b6:	e785      	b.n	801d5c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	8023      	strh	r3, [r4, #0]
 801d6bc:	8063      	strh	r3, [r4, #2]
 801d6be:	80a3      	strh	r3, [r4, #4]
 801d6c0:	4620      	mov	r0, r4
 801d6c2:	80e3      	strh	r3, [r4, #6]
 801d6c4:	b013      	add	sp, #76	@ 0x4c
 801d6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6ca:	fb09 f606 	mul.w	r6, r9, r6
 801d6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6d0:	fb11 6602 	smlabb	r6, r1, r2, r6
 801d6d4:	9a07      	ldr	r2, [sp, #28]
 801d6d6:	4433      	add	r3, r6
 801d6d8:	461e      	mov	r6, r3
 801d6da:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801d6de:	b16a      	cbz	r2, 801d6fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801d6e0:	9a08      	ldr	r2, [sp, #32]
 801d6e2:	4593      	cmp	fp, r2
 801d6e4:	d10a      	bne.n	801d6fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801d6e6:	f8da 0000 	ldr.w	r0, [sl]
 801d6ea:	fb09 f303 	mul.w	r3, r9, r3
 801d6ee:	4629      	mov	r1, r5
 801d6f0:	6802      	ldr	r2, [r0, #0]
 801d6f2:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801d6f6:	4632      	mov	r2, r6
 801d6f8:	47d0      	blx	sl
 801d6fa:	e7d2      	b.n	801d6a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801d6fc:	9a03      	ldr	r2, [sp, #12]
 801d6fe:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801d73c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801d702:	fb02 5803 	mla	r8, r2, r3, r5
 801d706:	4545      	cmp	r5, r8
 801d708:	d2cb      	bcs.n	801d6a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801d70a:	f8db 0000 	ldr.w	r0, [fp]
 801d70e:	4629      	mov	r1, r5
 801d710:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801d714:	6802      	ldr	r2, [r0, #0]
 801d716:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d71a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801d71e:	4632      	mov	r2, r6
 801d720:	47d0      	blx	sl
 801d722:	9b03      	ldr	r3, [sp, #12]
 801d724:	444e      	add	r6, r9
 801d726:	441d      	add	r5, r3
 801d728:	e7ed      	b.n	801d706 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801d72a:	bf00      	nop
 801d72c:	24026410 	.word	0x24026410
 801d730:	24026412 	.word	0x24026412
 801d734:	24026416 	.word	0x24026416
 801d738:	24026414 	.word	0x24026414
 801d73c:	2402641c 	.word	0x2402641c

0801d740 <_ZN8touchgfx8LCD24bppC1Ev>:
 801d740:	2200      	movs	r2, #0
 801d742:	490e      	ldr	r1, [pc, #56]	@ (801d77c <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801d744:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801d748:	6001      	str	r1, [r0, #0]
 801d74a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801d74e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801d752:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801d756:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801d75a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801d75e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801d762:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801d766:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801d76a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801d76e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801d772:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801d776:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801d77a:	4770      	bx	lr
 801d77c:	08029720 	.word	0x08029720

0801d780 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d784:	b091      	sub	sp, #68	@ 0x44
 801d786:	4607      	mov	r7, r0
 801d788:	4688      	mov	r8, r1
 801d78a:	6810      	ldr	r0, [r2, #0]
 801d78c:	6851      	ldr	r1, [r2, #4]
 801d78e:	ac0c      	add	r4, sp, #48	@ 0x30
 801d790:	4616      	mov	r6, r2
 801d792:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801d796:	4d64      	ldr	r5, [pc, #400]	@ (801d928 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d798:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801d92c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d79c:	c403      	stmia	r4!, {r0, r1}
 801d79e:	6818      	ldr	r0, [r3, #0]
 801d7a0:	ac0e      	add	r4, sp, #56	@ 0x38
 801d7a2:	6859      	ldr	r1, [r3, #4]
 801d7a4:	c403      	stmia	r4!, {r0, r1}
 801d7a6:	a80c      	add	r0, sp, #48	@ 0x30
 801d7a8:	f7f8 fdb4 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d7ac:	4631      	mov	r1, r6
 801d7ae:	a80e      	add	r0, sp, #56	@ 0x38
 801d7b0:	f7f8 fdd8 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d7b4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801d7b8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d7bc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801d7c0:	6828      	ldr	r0, [r5, #0]
 801d7c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d7c6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801d7ca:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801d7ce:	440f      	add	r7, r1
 801d7d0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d7d4:	440a      	add	r2, r1
 801d7d6:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801d7da:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801d7de:	4413      	add	r3, r2
 801d7e0:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d7e4:	6803      	ldr	r3, [r0, #0]
 801d7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d7e8:	4798      	blx	r3
 801d7ea:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801d7ee:	6828      	ldr	r0, [r5, #0]
 801d7f0:	d01f      	beq.n	801d832 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801d7f2:	2201      	movs	r2, #1
 801d7f4:	2500      	movs	r5, #0
 801d7f6:	6801      	ldr	r1, [r0, #0]
 801d7f8:	b2a4      	uxth	r4, r4
 801d7fa:	b2b6      	uxth	r6, r6
 801d7fc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d800:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801d804:	250b      	movs	r5, #11
 801d806:	9507      	str	r5, [sp, #28]
 801d808:	f8ba 5000 	ldrh.w	r5, [sl]
 801d80c:	f8cd 9010 	str.w	r9, [sp, #16]
 801d810:	9602      	str	r6, [sp, #8]
 801d812:	9401      	str	r4, [sp, #4]
 801d814:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801d818:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801d81c:	9203      	str	r2, [sp, #12]
 801d81e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801d822:	9200      	str	r2, [sp, #0]
 801d824:	4642      	mov	r2, r8
 801d826:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801d828:	4639      	mov	r1, r7
 801d82a:	47a0      	blx	r4
 801d82c:	b011      	add	sp, #68	@ 0x44
 801d82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d832:	6803      	ldr	r3, [r0, #0]
 801d834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d836:	4798      	blx	r3
 801d838:	f8ba 5000 	ldrh.w	r5, [sl]
 801d83c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801d840:	f04f 0e04 	mov.w	lr, #4
 801d844:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d848:	436e      	muls	r6, r5
 801d84a:	fb05 2303 	mla	r3, r5, r3, r2
 801d84e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d852:	1b2d      	subs	r5, r5, r4
 801d854:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d85c:	4418      	add	r0, r3
 801d85e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d862:	1982      	adds	r2, r0, r6
 801d864:	1b1b      	subs	r3, r3, r4
 801d866:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d86a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d86c:	4290      	cmp	r0, r2
 801d86e:	d254      	bcs.n	801d91a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d870:	eb00 0a04 	add.w	sl, r0, r4
 801d874:	4550      	cmp	r0, sl
 801d876:	d24c      	bcs.n	801d912 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801d878:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d87c:	fb1e e101 	smlabb	r1, lr, r1, lr
 801d880:	eb08 0c01 	add.w	ip, r8, r1
 801d884:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801d888:	b173      	cbz	r3, 801d8a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d88a:	2bff      	cmp	r3, #255	@ 0xff
 801d88c:	f818 b001 	ldrb.w	fp, [r8, r1]
 801d890:	d10c      	bne.n	801d8ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d892:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801d896:	d109      	bne.n	801d8ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d898:	f880 b000 	strb.w	fp, [r0]
 801d89c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d8a0:	7043      	strb	r3, [r0, #1]
 801d8a2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801d8a6:	7083      	strb	r3, [r0, #2]
 801d8a8:	3003      	adds	r0, #3
 801d8aa:	e7e3      	b.n	801d874 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d8ac:	fb09 f103 	mul.w	r1, r9, r3
 801d8b0:	1c4b      	adds	r3, r1, #1
 801d8b2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d8b6:	7801      	ldrb	r1, [r0, #0]
 801d8b8:	121b      	asrs	r3, r3, #8
 801d8ba:	b29e      	uxth	r6, r3
 801d8bc:	43db      	mvns	r3, r3
 801d8be:	fb1b fb06 	smulbb	fp, fp, r6
 801d8c2:	b2db      	uxtb	r3, r3
 801d8c4:	fb01 b103 	mla	r1, r1, r3, fp
 801d8c8:	b289      	uxth	r1, r1
 801d8ca:	f101 0b01 	add.w	fp, r1, #1
 801d8ce:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d8d2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d8d6:	fb1b fb03 	smulbb	fp, fp, r3
 801d8da:	1209      	asrs	r1, r1, #8
 801d8dc:	7001      	strb	r1, [r0, #0]
 801d8de:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d8e2:	fb01 b106 	mla	r1, r1, r6, fp
 801d8e6:	b289      	uxth	r1, r1
 801d8e8:	f101 0b01 	add.w	fp, r1, #1
 801d8ec:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d8f0:	1209      	asrs	r1, r1, #8
 801d8f2:	7041      	strb	r1, [r0, #1]
 801d8f4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801d8f8:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d8fc:	fb1c f303 	smulbb	r3, ip, r3
 801d900:	fb01 3606 	mla	r6, r1, r6, r3
 801d904:	b2b6      	uxth	r6, r6
 801d906:	1c73      	adds	r3, r6, #1
 801d908:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d90c:	1236      	asrs	r6, r6, #8
 801d90e:	7086      	strb	r6, [r0, #2]
 801d910:	e7ca      	b.n	801d8a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d914:	4428      	add	r0, r5
 801d916:	441f      	add	r7, r3
 801d918:	e7a8      	b.n	801d86c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801d91a:	4b03      	ldr	r3, [pc, #12]	@ (801d928 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d91c:	6818      	ldr	r0, [r3, #0]
 801d91e:	6803      	ldr	r3, [r0, #0]
 801d920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d922:	4798      	blx	r3
 801d924:	e782      	b.n	801d82c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d926:	bf00      	nop
 801d928:	2402641c 	.word	0x2402641c
 801d92c:	24026416 	.word	0x24026416

0801d930 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d934:	b091      	sub	sp, #68	@ 0x44
 801d936:	4680      	mov	r8, r0
 801d938:	460e      	mov	r6, r1
 801d93a:	6810      	ldr	r0, [r2, #0]
 801d93c:	6851      	ldr	r1, [r2, #4]
 801d93e:	ad0c      	add	r5, sp, #48	@ 0x30
 801d940:	4614      	mov	r4, r2
 801d942:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801d946:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801dae0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801d94a:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801dae4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d94e:	c503      	stmia	r5!, {r0, r1}
 801d950:	6818      	ldr	r0, [r3, #0]
 801d952:	ad0e      	add	r5, sp, #56	@ 0x38
 801d954:	6859      	ldr	r1, [r3, #4]
 801d956:	c503      	stmia	r5!, {r0, r1}
 801d958:	a80c      	add	r0, sp, #48	@ 0x30
 801d95a:	f7f8 fcdb 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d95e:	4621      	mov	r1, r4
 801d960:	a80e      	add	r0, sp, #56	@ 0x38
 801d962:	f7f8 fcff 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d966:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801d96a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d96e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801d972:	f8d9 0000 	ldr.w	r0, [r9]
 801d976:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d97a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801d97e:	eb08 0401 	add.w	r4, r8, r1
 801d982:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d986:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801d98a:	440a      	add	r2, r1
 801d98c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801d990:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801d994:	4413      	add	r3, r2
 801d996:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d99a:	6803      	ldr	r3, [r0, #0]
 801d99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d99e:	4798      	blx	r3
 801d9a0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801d9a4:	f8d9 0000 	ldr.w	r0, [r9]
 801d9a8:	d022      	beq.n	801d9f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801d9aa:	2200      	movs	r2, #0
 801d9ac:	f04f 0c01 	mov.w	ip, #1
 801d9b0:	6801      	ldr	r1, [r0, #0]
 801d9b2:	b2ad      	uxth	r5, r5
 801d9b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d9b8:	e9cd c208 	strd	ip, r2, [sp, #32]
 801d9bc:	f04f 0c0b 	mov.w	ip, #11
 801d9c0:	f8cd c01c 	str.w	ip, [sp, #28]
 801d9c4:	f8ba c000 	ldrh.w	ip, [sl]
 801d9c8:	9704      	str	r7, [sp, #16]
 801d9ca:	9502      	str	r5, [sp, #8]
 801d9cc:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801d9d0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801d9d4:	9203      	str	r2, [sp, #12]
 801d9d6:	fa1f f288 	uxth.w	r2, r8
 801d9da:	9201      	str	r2, [sp, #4]
 801d9dc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801d9e0:	9200      	str	r2, [sp, #0]
 801d9e2:	4632      	mov	r2, r6
 801d9e4:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801d9e6:	4621      	mov	r1, r4
 801d9e8:	47a8      	blx	r5
 801d9ea:	b011      	add	sp, #68	@ 0x44
 801d9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9f0:	6803      	ldr	r3, [r0, #0]
 801d9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9f4:	4798      	blx	r3
 801d9f6:	f8ba 2000 	ldrh.w	r2, [sl]
 801d9fa:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d9fe:	f04f 0e03 	mov.w	lr, #3
 801da02:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801da06:	4355      	muls	r5, r2
 801da08:	fa1f fc87 	uxth.w	ip, r7
 801da0c:	fb02 1303 	mla	r3, r2, r3, r1
 801da10:	eba2 0208 	sub.w	r2, r2, r8
 801da14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801da18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801da20:	4418      	add	r0, r3
 801da22:	920b      	str	r2, [sp, #44]	@ 0x2c
 801da24:	1943      	adds	r3, r0, r5
 801da26:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801da2a:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801da2e:	eba2 0208 	sub.w	r2, r2, r8
 801da32:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801da36:	b2ad      	uxth	r5, r5
 801da38:	4298      	cmp	r0, r3
 801da3a:	d24a      	bcs.n	801dad2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801da3c:	eb00 0908 	add.w	r9, r0, r8
 801da40:	4621      	mov	r1, r4
 801da42:	4548      	cmp	r0, r9
 801da44:	460c      	mov	r4, r1
 801da46:	d240      	bcs.n	801daca <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801da48:	f04f 0a04 	mov.w	sl, #4
 801da4c:	7824      	ldrb	r4, [r4, #0]
 801da4e:	2fff      	cmp	r7, #255	@ 0xff
 801da50:	f101 0101 	add.w	r1, r1, #1
 801da54:	fb1e a404 	smlabb	r4, lr, r4, sl
 801da58:	eb06 0a04 	add.w	sl, r6, r4
 801da5c:	f816 b004 	ldrb.w	fp, [r6, r4]
 801da60:	d02b      	beq.n	801daba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801da62:	7804      	ldrb	r4, [r0, #0]
 801da64:	fb14 f405 	smulbb	r4, r4, r5
 801da68:	fb0b 440c 	mla	r4, fp, ip, r4
 801da6c:	b2a4      	uxth	r4, r4
 801da6e:	f104 0b01 	add.w	fp, r4, #1
 801da72:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801da76:	f890 b001 	ldrb.w	fp, [r0, #1]
 801da7a:	fb1b fb05 	smulbb	fp, fp, r5
 801da7e:	1224      	asrs	r4, r4, #8
 801da80:	7004      	strb	r4, [r0, #0]
 801da82:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801da86:	fb04 b40c 	mla	r4, r4, ip, fp
 801da8a:	b2a4      	uxth	r4, r4
 801da8c:	f104 0b01 	add.w	fp, r4, #1
 801da90:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801da94:	1224      	asrs	r4, r4, #8
 801da96:	7044      	strb	r4, [r0, #1]
 801da98:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801da9c:	f890 a002 	ldrb.w	sl, [r0, #2]
 801daa0:	fb1a fa05 	smulbb	sl, sl, r5
 801daa4:	fb04 a40c 	mla	r4, r4, ip, sl
 801daa8:	b2a4      	uxth	r4, r4
 801daaa:	f104 0a01 	add.w	sl, r4, #1
 801daae:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801dab2:	1224      	asrs	r4, r4, #8
 801dab4:	7084      	strb	r4, [r0, #2]
 801dab6:	3003      	adds	r0, #3
 801dab8:	e7c3      	b.n	801da42 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801daba:	f880 b000 	strb.w	fp, [r0]
 801dabe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801dac2:	7044      	strb	r4, [r0, #1]
 801dac4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801dac8:	e7f4      	b.n	801dab4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801daca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dacc:	4420      	add	r0, r4
 801dace:	188c      	adds	r4, r1, r2
 801dad0:	e7b2      	b.n	801da38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801dad2:	4b03      	ldr	r3, [pc, #12]	@ (801dae0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801dad4:	6818      	ldr	r0, [r3, #0]
 801dad6:	6803      	ldr	r3, [r0, #0]
 801dad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dada:	4798      	blx	r3
 801dadc:	e785      	b.n	801d9ea <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801dade:	bf00      	nop
 801dae0:	2402641c 	.word	0x2402641c
 801dae4:	24026416 	.word	0x24026416

0801dae8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801dae8:	b4f0      	push	{r4, r5, r6, r7}
 801daea:	460c      	mov	r4, r1
 801daec:	4611      	mov	r1, r2
 801daee:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801daf2:	461a      	mov	r2, r3
 801daf4:	780f      	ldrb	r7, [r1, #0]
 801daf6:	9b04      	ldr	r3, [sp, #16]
 801daf8:	784e      	ldrb	r6, [r1, #1]
 801dafa:	b11f      	cbz	r7, 801db04 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801dafc:	2f01      	cmp	r7, #1
 801dafe:	d01d      	beq.n	801db3c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801db00:	bcf0      	pop	{r4, r5, r6, r7}
 801db02:	4770      	bx	lr
 801db04:	2e03      	cmp	r6, #3
 801db06:	d8fb      	bhi.n	801db00 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801db08:	e8df f006 	tbb	[pc, r6]
 801db0c:	16140702 	.word	0x16140702
 801db10:	9504      	str	r5, [sp, #16]
 801db12:	4620      	mov	r0, r4
 801db14:	bcf0      	pop	{r4, r5, r6, r7}
 801db16:	f7ff be33 	b.w	801d780 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801db1a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801db1c:	2800      	cmp	r0, #0
 801db1e:	d0ef      	beq.n	801db00 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801db20:	6806      	ldr	r6, [r0, #0]
 801db22:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801db26:	68f5      	ldr	r5, [r6, #12]
 801db28:	4613      	mov	r3, r2
 801db2a:	46ac      	mov	ip, r5
 801db2c:	460a      	mov	r2, r1
 801db2e:	4621      	mov	r1, r4
 801db30:	bcf0      	pop	{r4, r5, r6, r7}
 801db32:	4760      	bx	ip
 801db34:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801db36:	e7f1      	b.n	801db1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801db38:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801db3a:	e7ef      	b.n	801db1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801db3c:	2e03      	cmp	r6, #3
 801db3e:	d8df      	bhi.n	801db00 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801db40:	e8df f006 	tbb	[pc, r6]
 801db44:	110f0702 	.word	0x110f0702
 801db48:	9504      	str	r5, [sp, #16]
 801db4a:	4620      	mov	r0, r4
 801db4c:	bcf0      	pop	{r4, r5, r6, r7}
 801db4e:	f7ff beef 	b.w	801d930 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801db52:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801db54:	2800      	cmp	r0, #0
 801db56:	d0d3      	beq.n	801db00 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801db58:	6806      	ldr	r6, [r0, #0]
 801db5a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801db5e:	68b5      	ldr	r5, [r6, #8]
 801db60:	e7e2      	b.n	801db28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801db62:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801db64:	e7f6      	b.n	801db54 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801db66:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801db68:	e7f4      	b.n	801db54 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801db6c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801db6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801db70:	4605      	mov	r5, r0
 801db72:	b08f      	sub	sp, #60	@ 0x3c
 801db74:	460c      	mov	r4, r1
 801db76:	461f      	mov	r7, r3
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d052      	beq.n	801dc22 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801db7c:	6808      	ldr	r0, [r1, #0]
 801db7e:	ab0a      	add	r3, sp, #40	@ 0x28
 801db80:	6849      	ldr	r1, [r1, #4]
 801db82:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801dd4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801db86:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801dd50 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801db8a:	c303      	stmia	r3!, {r0, r1}
 801db8c:	6810      	ldr	r0, [r2, #0]
 801db8e:	ab0c      	add	r3, sp, #48	@ 0x30
 801db90:	6851      	ldr	r1, [r2, #4]
 801db92:	c303      	stmia	r3!, {r0, r1}
 801db94:	a80a      	add	r0, sp, #40	@ 0x28
 801db96:	f7f8 fbbd 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db9a:	4621      	mov	r1, r4
 801db9c:	a80c      	add	r0, sp, #48	@ 0x30
 801db9e:	f7f8 fbe1 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dba2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801dba6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801dbaa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801dbae:	f8d8 0000 	ldr.w	r0, [r8]
 801dbb2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dbb6:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801dbba:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801dbbe:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801dbc2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801dbc6:	440a      	add	r2, r1
 801dbc8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801dbcc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801dbd0:	4413      	add	r3, r2
 801dbd2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801dbd6:	6803      	ldr	r3, [r0, #0]
 801dbd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dbda:	4798      	blx	r3
 801dbdc:	2fff      	cmp	r7, #255	@ 0xff
 801dbde:	d023      	beq.n	801dc28 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801dbe0:	f010 0f04 	tst.w	r0, #4
 801dbe4:	f8d8 0000 	ldr.w	r0, [r8]
 801dbe8:	d021      	beq.n	801dc2e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801dbea:	2100      	movs	r1, #0
 801dbec:	f04f 0e01 	mov.w	lr, #1
 801dbf0:	f8d0 c000 	ldr.w	ip, [r0]
 801dbf4:	b2a4      	uxth	r4, r4
 801dbf6:	9106      	str	r1, [sp, #24]
 801dbf8:	b2b6      	uxth	r6, r6
 801dbfa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801dbfe:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801dc02:	e9cd e107 	strd	lr, r1, [sp, #28]
 801dc06:	f8b9 e000 	ldrh.w	lr, [r9]
 801dc0a:	9703      	str	r7, [sp, #12]
 801dc0c:	9401      	str	r4, [sp, #4]
 801dc0e:	9600      	str	r6, [sp, #0]
 801dc10:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801dc14:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801dc18:	9102      	str	r1, [sp, #8]
 801dc1a:	4629      	mov	r1, r5
 801dc1c:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801dc20:	47a0      	blx	r4
 801dc22:	b00f      	add	sp, #60	@ 0x3c
 801dc24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc28:	f010 0f01 	tst.w	r0, #1
 801dc2c:	e7da      	b.n	801dbe4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801dc2e:	6803      	ldr	r3, [r0, #0]
 801dc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc32:	4798      	blx	r3
 801dc34:	f8b9 1000 	ldrh.w	r1, [r9]
 801dc38:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801dc3c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801dc40:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801dc44:	434c      	muls	r4, r1
 801dc46:	2fff      	cmp	r7, #255	@ 0xff
 801dc48:	fb01 2303 	mla	r3, r1, r3, r2
 801dc4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dc50:	eba1 0106 	sub.w	r1, r1, r6
 801dc54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dc5c:	4418      	add	r0, r3
 801dc5e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801dc62:	eba3 0606 	sub.w	r6, r3, r6
 801dc66:	4404      	add	r4, r0
 801dc68:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801dc6c:	d04a      	beq.n	801dd04 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801dc6e:	43fa      	mvns	r2, r7
 801dc70:	b2bb      	uxth	r3, r7
 801dc72:	b2d7      	uxtb	r7, r2
 801dc74:	42a0      	cmp	r0, r4
 801dc76:	d263      	bcs.n	801dd40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801dc78:	eb00 0e0c 	add.w	lr, r0, ip
 801dc7c:	4586      	cmp	lr, r0
 801dc7e:	f100 0803 	add.w	r8, r0, #3
 801dc82:	d93a      	bls.n	801dcfa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801dc84:	f835 2b02 	ldrh.w	r2, [r5], #2
 801dc88:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801dc8c:	00d0      	lsls	r0, r2, #3
 801dc8e:	fb19 f907 	smulbb	r9, r9, r7
 801dc92:	b2c0      	uxtb	r0, r0
 801dc94:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801dc98:	fb00 9003 	mla	r0, r0, r3, r9
 801dc9c:	b280      	uxth	r0, r0
 801dc9e:	f100 0901 	add.w	r9, r0, #1
 801dca2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801dca6:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801dcaa:	fb19 f907 	smulbb	r9, r9, r7
 801dcae:	1200      	asrs	r0, r0, #8
 801dcb0:	f808 0c03 	strb.w	r0, [r8, #-3]
 801dcb4:	10d0      	asrs	r0, r2, #3
 801dcb6:	1212      	asrs	r2, r2, #8
 801dcb8:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801dcbc:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801dcc0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801dcc4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801dcc8:	fb00 9003 	mla	r0, r0, r3, r9
 801dccc:	b280      	uxth	r0, r0
 801dcce:	f100 0901 	add.w	r9, r0, #1
 801dcd2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801dcd6:	1200      	asrs	r0, r0, #8
 801dcd8:	f808 0c02 	strb.w	r0, [r8, #-2]
 801dcdc:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801dce0:	fb10 f007 	smulbb	r0, r0, r7
 801dce4:	fb02 0203 	mla	r2, r2, r3, r0
 801dce8:	b292      	uxth	r2, r2
 801dcea:	1c50      	adds	r0, r2, #1
 801dcec:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801dcf0:	4640      	mov	r0, r8
 801dcf2:	1212      	asrs	r2, r2, #8
 801dcf4:	f808 2c01 	strb.w	r2, [r8, #-1]
 801dcf8:	e7c0      	b.n	801dc7c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801dcfa:	4408      	add	r0, r1
 801dcfc:	4435      	add	r5, r6
 801dcfe:	e7b9      	b.n	801dc74 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801dd00:	4408      	add	r0, r1
 801dd02:	4435      	add	r5, r6
 801dd04:	42a0      	cmp	r0, r4
 801dd06:	d21b      	bcs.n	801dd40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801dd08:	eb00 070c 	add.w	r7, r0, ip
 801dd0c:	42b8      	cmp	r0, r7
 801dd0e:	d2f7      	bcs.n	801dd00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801dd10:	f835 3b02 	ldrh.w	r3, [r5], #2
 801dd14:	3003      	adds	r0, #3
 801dd16:	00da      	lsls	r2, r3, #3
 801dd18:	b2d2      	uxtb	r2, r2
 801dd1a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801dd1e:	f800 2c03 	strb.w	r2, [r0, #-3]
 801dd22:	10da      	asrs	r2, r3, #3
 801dd24:	121b      	asrs	r3, r3, #8
 801dd26:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801dd2a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801dd2e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801dd32:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801dd36:	f800 2c02 	strb.w	r2, [r0, #-2]
 801dd3a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801dd3e:	e7e5      	b.n	801dd0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801dd40:	4b02      	ldr	r3, [pc, #8]	@ (801dd4c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801dd42:	6818      	ldr	r0, [r3, #0]
 801dd44:	6803      	ldr	r3, [r0, #0]
 801dd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd48:	4798      	blx	r3
 801dd4a:	e76a      	b.n	801dc22 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801dd4c:	2402641c 	.word	0x2402641c
 801dd50:	24026416 	.word	0x24026416

0801dd54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801dd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd58:	b08a      	sub	sp, #40	@ 0x28
 801dd5a:	460d      	mov	r5, r1
 801dd5c:	4604      	mov	r4, r0
 801dd5e:	461e      	mov	r6, r3
 801dd60:	6808      	ldr	r0, [r1, #0]
 801dd62:	ab06      	add	r3, sp, #24
 801dd64:	6849      	ldr	r1, [r1, #4]
 801dd66:	4f5d      	ldr	r7, [pc, #372]	@ (801dedc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801dd68:	c303      	stmia	r3!, {r0, r1}
 801dd6a:	6810      	ldr	r0, [r2, #0]
 801dd6c:	ab08      	add	r3, sp, #32
 801dd6e:	6851      	ldr	r1, [r2, #4]
 801dd70:	c303      	stmia	r3!, {r0, r1}
 801dd72:	a806      	add	r0, sp, #24
 801dd74:	f7f8 face 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dd78:	4629      	mov	r1, r5
 801dd7a:	a808      	add	r0, sp, #32
 801dd7c:	f7f8 faf2 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dd80:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dd84:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801dd88:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dd8c:	6838      	ldr	r0, [r7, #0]
 801dd8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801dd92:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801dd96:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801dd9a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801dd9e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801dda2:	440a      	add	r2, r1
 801dda4:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dda8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ddac:	4413      	add	r3, r2
 801ddae:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801ddb2:	6803      	ldr	r3, [r0, #0]
 801ddb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ddb6:	4798      	blx	r3
 801ddb8:	2eff      	cmp	r6, #255	@ 0xff
 801ddba:	d119      	bne.n	801ddf0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801ddbc:	f010 0f20 	tst.w	r0, #32
 801ddc0:	6838      	ldr	r0, [r7, #0]
 801ddc2:	d018      	beq.n	801ddf6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801ddc4:	b2ad      	uxth	r5, r5
 801ddc6:	2700      	movs	r7, #0
 801ddc8:	6801      	ldr	r1, [r0, #0]
 801ddca:	9501      	str	r5, [sp, #4]
 801ddcc:	fa1f f588 	uxth.w	r5, r8
 801ddd0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801ddd4:	9500      	str	r5, [sp, #0]
 801ddd6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ddda:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801ddde:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801dde2:	9602      	str	r6, [sp, #8]
 801dde4:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801dde6:	4621      	mov	r1, r4
 801dde8:	47a8      	blx	r5
 801ddea:	b00a      	add	sp, #40	@ 0x28
 801ddec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ddf0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801ddf4:	e7e4      	b.n	801ddc0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801ddf6:	6803      	ldr	r3, [r0, #0]
 801ddf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ddfa:	4798      	blx	r3
 801ddfc:	4b38      	ldr	r3, [pc, #224]	@ (801dee0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801ddfe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801de02:	f8b3 c000 	ldrh.w	ip, [r3]
 801de06:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801de0a:	fb0c f505 	mul.w	r5, ip, r5
 801de0e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801de12:	fb0c 2303 	mla	r3, ip, r3, r2
 801de16:	ebac 0c08 	sub.w	ip, ip, r8
 801de1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801de1e:	ebae 0e08 	sub.w	lr, lr, r8
 801de22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de26:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801de2a:	4418      	add	r0, r3
 801de2c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801de30:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801de34:	4405      	add	r5, r0
 801de36:	42a8      	cmp	r0, r5
 801de38:	d24a      	bcs.n	801ded0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801de3a:	eb00 0803 	add.w	r8, r0, r3
 801de3e:	4540      	cmp	r0, r8
 801de40:	d243      	bcs.n	801deca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801de42:	78e2      	ldrb	r2, [r4, #3]
 801de44:	b15a      	cbz	r2, 801de5e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801de46:	2aff      	cmp	r2, #255	@ 0xff
 801de48:	f894 9000 	ldrb.w	r9, [r4]
 801de4c:	d10a      	bne.n	801de64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801de4e:	2eff      	cmp	r6, #255	@ 0xff
 801de50:	d108      	bne.n	801de64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801de52:	f880 9000 	strb.w	r9, [r0]
 801de56:	7862      	ldrb	r2, [r4, #1]
 801de58:	7042      	strb	r2, [r0, #1]
 801de5a:	78a2      	ldrb	r2, [r4, #2]
 801de5c:	7082      	strb	r2, [r0, #2]
 801de5e:	3003      	adds	r0, #3
 801de60:	3404      	adds	r4, #4
 801de62:	e7ec      	b.n	801de3e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801de64:	4372      	muls	r2, r6
 801de66:	1c51      	adds	r1, r2, #1
 801de68:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801de6c:	1209      	asrs	r1, r1, #8
 801de6e:	fa1f fa81 	uxth.w	sl, r1
 801de72:	43c9      	mvns	r1, r1
 801de74:	fb19 f90a 	smulbb	r9, r9, sl
 801de78:	b2ca      	uxtb	r2, r1
 801de7a:	7801      	ldrb	r1, [r0, #0]
 801de7c:	fb01 9902 	mla	r9, r1, r2, r9
 801de80:	fa1f f989 	uxth.w	r9, r9
 801de84:	f109 0101 	add.w	r1, r9, #1
 801de88:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801de8c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801de90:	f880 9000 	strb.w	r9, [r0]
 801de94:	f890 9001 	ldrb.w	r9, [r0, #1]
 801de98:	7861      	ldrb	r1, [r4, #1]
 801de9a:	fb19 f902 	smulbb	r9, r9, r2
 801de9e:	fb01 910a 	mla	r1, r1, sl, r9
 801dea2:	b289      	uxth	r1, r1
 801dea4:	f101 0901 	add.w	r9, r1, #1
 801dea8:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801deac:	1209      	asrs	r1, r1, #8
 801deae:	7041      	strb	r1, [r0, #1]
 801deb0:	7881      	ldrb	r1, [r0, #2]
 801deb2:	f894 9002 	ldrb.w	r9, [r4, #2]
 801deb6:	fb11 f202 	smulbb	r2, r1, r2
 801deba:	fb09 220a 	mla	r2, r9, sl, r2
 801debe:	b292      	uxth	r2, r2
 801dec0:	1c51      	adds	r1, r2, #1
 801dec2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801dec6:	1212      	asrs	r2, r2, #8
 801dec8:	e7c8      	b.n	801de5c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801deca:	4460      	add	r0, ip
 801decc:	4474      	add	r4, lr
 801dece:	e7b2      	b.n	801de36 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801ded0:	6838      	ldr	r0, [r7, #0]
 801ded2:	6803      	ldr	r3, [r0, #0]
 801ded4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ded6:	4798      	blx	r3
 801ded8:	e787      	b.n	801ddea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801deda:	bf00      	nop
 801dedc:	2402641c 	.word	0x2402641c
 801dee0:	24026416 	.word	0x24026416

0801dee4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dee8:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801deec:	4607      	mov	r7, r0
 801deee:	460c      	mov	r4, r1
 801def0:	4692      	mov	sl, r2
 801def2:	4699      	mov	r9, r3
 801def4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801def6:	b335      	cbz	r5, 801df46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801def8:	4608      	mov	r0, r1
 801defa:	f7fb fdcb 	bl	8019a94 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801defe:	4680      	mov	r8, r0
 801df00:	4620      	mov	r0, r4
 801df02:	f7fb fdfb 	bl	8019afc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801df06:	f8ad 000e 	strh.w	r0, [sp, #14]
 801df0a:	4620      	mov	r0, r4
 801df0c:	f8ad a008 	strh.w	sl, [sp, #8]
 801df10:	f8ad 900a 	strh.w	r9, [sp, #10]
 801df14:	f8ad 800c 	strh.w	r8, [sp, #12]
 801df18:	f7fb fefa 	bl	8019d10 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801df1c:	2810      	cmp	r0, #16
 801df1e:	d812      	bhi.n	801df46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801df20:	e8df f000 	tbb	[pc, r0]
 801df24:	11092d24 	.word	0x11092d24
 801df28:	11111111 	.word	0x11111111
 801df2c:	14111111 	.word	0x14111111
 801df30:	4c111111 	.word	0x4c111111
 801df34:	3c          	.byte	0x3c
 801df35:	00          	.byte	0x00
 801df36:	4620      	mov	r0, r4
 801df38:	f7fb fe66 	bl	8019c08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801df3c:	462b      	mov	r3, r5
 801df3e:	4632      	mov	r2, r6
 801df40:	a902      	add	r1, sp, #8
 801df42:	f7ff ff07 	bl	801dd54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801df46:	b004      	add	sp, #16
 801df48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df4c:	4620      	mov	r0, r4
 801df4e:	f7fb fe5b 	bl	8019c08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801df52:	4680      	mov	r8, r0
 801df54:	4620      	mov	r0, r4
 801df56:	f7fb fe87 	bl	8019c68 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801df5a:	ab02      	add	r3, sp, #8
 801df5c:	4602      	mov	r2, r0
 801df5e:	4641      	mov	r1, r8
 801df60:	4638      	mov	r0, r7
 801df62:	e9cd 6500 	strd	r6, r5, [sp]
 801df66:	f7ff fdbf 	bl	801dae8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801df6a:	e7ec      	b.n	801df46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801df6c:	4620      	mov	r0, r4
 801df6e:	f7fb fe4b 	bl	8019c08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801df72:	462b      	mov	r3, r5
 801df74:	4632      	mov	r2, r6
 801df76:	a902      	add	r1, sp, #8
 801df78:	f7ff fdf8 	bl	801db6c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801df7c:	e7e3      	b.n	801df46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801df7e:	683b      	ldr	r3, [r7, #0]
 801df80:	4620      	mov	r0, r4
 801df82:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801df86:	f7fb fe3f 	bl	8019c08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801df8a:	2300      	movs	r3, #0
 801df8c:	4601      	mov	r1, r0
 801df8e:	aa02      	add	r2, sp, #8
 801df90:	4638      	mov	r0, r7
 801df92:	e9cd 5300 	strd	r5, r3, [sp]
 801df96:	4633      	mov	r3, r6
 801df98:	47c0      	blx	r8
 801df9a:	e7d4      	b.n	801df46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801df9c:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801df9e:	2f00      	cmp	r7, #0
 801dfa0:	d0d1      	beq.n	801df46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801dfa2:	683b      	ldr	r3, [r7, #0]
 801dfa4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801dfa8:	4620      	mov	r0, r4
 801dfaa:	f7fb fe2d 	bl	8019c08 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dfae:	9500      	str	r5, [sp, #0]
 801dfb0:	4601      	mov	r1, r0
 801dfb2:	4633      	mov	r3, r6
 801dfb4:	aa02      	add	r2, sp, #8
 801dfb6:	4638      	mov	r0, r7
 801dfb8:	47c0      	blx	r8
 801dfba:	e7c4      	b.n	801df46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801dfbc:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801dfbe:	2f00      	cmp	r7, #0
 801dfc0:	d0c1      	beq.n	801df46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801dfc2:	683b      	ldr	r3, [r7, #0]
 801dfc4:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801dfc8:	e7ee      	b.n	801dfa8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801dfca <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dfca:	b4f0      	push	{r4, r5, r6, r7}
 801dfcc:	4616      	mov	r6, r2
 801dfce:	461c      	mov	r4, r3
 801dfd0:	460d      	mov	r5, r1
 801dfd2:	9a04      	ldr	r2, [sp, #16]
 801dfd4:	2e01      	cmp	r6, #1
 801dfd6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dfda:	d00e      	beq.n	801dffa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801dfdc:	d303      	bcc.n	801dfe6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801dfde:	2e02      	cmp	r6, #2
 801dfe0:	d006      	beq.n	801dff0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801dfe2:	bcf0      	pop	{r4, r5, r6, r7}
 801dfe4:	4770      	bx	lr
 801dfe6:	4621      	mov	r1, r4
 801dfe8:	4628      	mov	r0, r5
 801dfea:	bcf0      	pop	{r4, r5, r6, r7}
 801dfec:	f7ff bdbe 	b.w	801db6c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801dff0:	4621      	mov	r1, r4
 801dff2:	4628      	mov	r0, r5
 801dff4:	bcf0      	pop	{r4, r5, r6, r7}
 801dff6:	f7ff bead 	b.w	801dd54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dffa:	6805      	ldr	r5, [r0, #0]
 801dffc:	2600      	movs	r6, #0
 801dffe:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801e002:	68ed      	ldr	r5, [r5, #12]
 801e004:	4613      	mov	r3, r2
 801e006:	4622      	mov	r2, r4
 801e008:	46ac      	mov	ip, r5
 801e00a:	bcf0      	pop	{r4, r5, r6, r7}
 801e00c:	4760      	bx	ip
	...

0801e010 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801e010:	b160      	cbz	r0, 801e02c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801e012:	2903      	cmp	r1, #3
 801e014:	d818      	bhi.n	801e048 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801e016:	e8df f001 	tbb	[pc, r1]
 801e01a:	1902      	.short	0x1902
 801e01c:	1b06      	.short	0x1b06
 801e01e:	4b0e      	ldr	r3, [pc, #56]	@ (801e058 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801e020:	8818      	ldrh	r0, [r3, #0]
 801e022:	4240      	negs	r0, r0
 801e024:	4770      	bx	lr
 801e026:	4b0c      	ldr	r3, [pc, #48]	@ (801e058 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801e028:	8818      	ldrh	r0, [r3, #0]
 801e02a:	4770      	bx	lr
 801e02c:	2903      	cmp	r1, #3
 801e02e:	d80b      	bhi.n	801e048 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801e030:	a301      	add	r3, pc, #4	@ (adr r3, 801e038 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801e032:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e036:	bf00      	nop
 801e038:	0801e04d 	.word	0x0801e04d
 801e03c:	0801e027 	.word	0x0801e027
 801e040:	0801e051 	.word	0x0801e051
 801e044:	0801e01f 	.word	0x0801e01f
 801e048:	2000      	movs	r0, #0
 801e04a:	4770      	bx	lr
 801e04c:	2001      	movs	r0, #1
 801e04e:	4770      	bx	lr
 801e050:	f04f 30ff 	mov.w	r0, #4294967295
 801e054:	4770      	bx	lr
 801e056:	bf00      	nop
 801e058:	24026416 	.word	0x24026416

0801e05c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801e05c:	b160      	cbz	r0, 801e078 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801e05e:	2903      	cmp	r1, #3
 801e060:	d818      	bhi.n	801e094 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801e062:	e8df f001 	tbb	[pc, r1]
 801e066:	0219      	.short	0x0219
 801e068:	051b      	.short	0x051b
 801e06a:	4b0e      	ldr	r3, [pc, #56]	@ (801e0a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801e06c:	8818      	ldrh	r0, [r3, #0]
 801e06e:	4770      	bx	lr
 801e070:	4b0c      	ldr	r3, [pc, #48]	@ (801e0a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801e072:	8818      	ldrh	r0, [r3, #0]
 801e074:	4240      	negs	r0, r0
 801e076:	4770      	bx	lr
 801e078:	2903      	cmp	r1, #3
 801e07a:	d80b      	bhi.n	801e094 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801e07c:	a301      	add	r3, pc, #4	@ (adr r3, 801e084 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801e07e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801e082:	bf00      	nop
 801e084:	0801e06b 	.word	0x0801e06b
 801e088:	0801e09d 	.word	0x0801e09d
 801e08c:	0801e071 	.word	0x0801e071
 801e090:	0801e099 	.word	0x0801e099
 801e094:	2000      	movs	r0, #0
 801e096:	4770      	bx	lr
 801e098:	2001      	movs	r0, #1
 801e09a:	4770      	bx	lr
 801e09c:	f04f 30ff 	mov.w	r0, #4294967295
 801e0a0:	4770      	bx	lr
 801e0a2:	bf00      	nop
 801e0a4:	24026416 	.word	0x24026416

0801e0a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0ac:	b097      	sub	sp, #92	@ 0x5c
 801e0ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e0b0:	a912      	add	r1, sp, #72	@ 0x48
 801e0b2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801e0b6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801e0ba:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801e0be:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801e0c2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801e0c6:	e881 000c 	stmia.w	r1, {r2, r3}
 801e0ca:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801e0ce:	930a      	str	r3, [sp, #40]	@ 0x28
 801e0d0:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801e0d4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801e0d8:	9311      	str	r3, [sp, #68]	@ 0x44
 801e0da:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801e0de:	798d      	ldrb	r5, [r1, #6]
 801e0e0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e0e2:	7b4b      	ldrb	r3, [r1, #13]
 801e0e4:	0158      	lsls	r0, r3, #5
 801e0e6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801e0ea:	4328      	orrs	r0, r5
 801e0ec:	9009      	str	r0, [sp, #36]	@ 0x24
 801e0ee:	f000 817c 	beq.w	801e3ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e0f2:	011b      	lsls	r3, r3, #4
 801e0f4:	79c8      	ldrb	r0, [r1, #7]
 801e0f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e0fa:	4303      	orrs	r3, r0
 801e0fc:	930e      	str	r3, [sp, #56]	@ 0x38
 801e0fe:	f000 8174 	beq.w	801e3ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e102:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801e106:	b29b      	uxth	r3, r3
 801e108:	2f00      	cmp	r7, #0
 801e10a:	f000 8116 	beq.w	801e33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801e10e:	1aff      	subs	r7, r7, r3
 801e110:	b2bf      	uxth	r7, r7
 801e112:	043b      	lsls	r3, r7, #16
 801e114:	d502      	bpl.n	801e11c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e116:	1bf6      	subs	r6, r6, r7
 801e118:	2700      	movs	r7, #0
 801e11a:	b236      	sxth	r6, r6
 801e11c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e120:	a812      	add	r0, sp, #72	@ 0x48
 801e122:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801e126:	428e      	cmp	r6, r1
 801e128:	b28b      	uxth	r3, r1
 801e12a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801e12e:	bfbf      	itttt	lt
 801e130:	18ff      	addlt	r7, r7, r3
 801e132:	1bbe      	sublt	r6, r7, r6
 801e134:	b2b7      	uxthlt	r7, r6
 801e136:	460e      	movlt	r6, r1
 801e138:	8891      	ldrh	r1, [r2, #4]
 801e13a:	440b      	add	r3, r1
 801e13c:	4631      	mov	r1, r6
 801e13e:	b21b      	sxth	r3, r3
 801e140:	9310      	str	r3, [sp, #64]	@ 0x40
 801e142:	88d3      	ldrh	r3, [r2, #6]
 801e144:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e146:	449a      	add	sl, r3
 801e148:	fa0f f38a 	sxth.w	r3, sl
 801e14c:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801e150:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e152:	4bb5      	ldr	r3, [pc, #724]	@ (801e428 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801e154:	f893 b000 	ldrb.w	fp, [r3]
 801e158:	f10b 3cff 	add.w	ip, fp, #4294967295
 801e15c:	f1dc 0300 	rsbs	r3, ip, #0
 801e160:	eb43 030c 	adc.w	r3, r3, ip
 801e164:	930d      	str	r3, [sp, #52]	@ 0x34
 801e166:	464b      	mov	r3, r9
 801e168:	f7f7 ff49 	bl	8015ffe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e16c:	4631      	mov	r1, r6
 801e16e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801e172:	464b      	mov	r3, r9
 801e174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e176:	a812      	add	r0, sp, #72	@ 0x48
 801e178:	f7f7 ff5e 	bl	8016038 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e17c:	a916      	add	r1, sp, #88	@ 0x58
 801e17e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801e182:	a815      	add	r0, sp, #84	@ 0x54
 801e184:	f7f8 f884 	bl	8016290 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e188:	f1b9 0f00 	cmp.w	r9, #0
 801e18c:	f040 80d8 	bne.w	801e340 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801e190:	f1bb 0f01 	cmp.w	fp, #1
 801e194:	f040 80dc 	bne.w	801e350 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801e198:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e19a:	b153      	cbz	r3, 801e1b2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801e19c:	2508      	movs	r5, #8
 801e19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e1a0:	fb95 f3f8 	sdiv	r3, r5, r8
 801e1a4:	1e5d      	subs	r5, r3, #1
 801e1a6:	4415      	add	r5, r2
 801e1a8:	fb95 f5f3 	sdiv	r5, r5, r3
 801e1ac:	fb15 f503 	smulbb	r5, r5, r3
 801e1b0:	b2ad      	uxth	r5, r5
 801e1b2:	b907      	cbnz	r7, 801e1b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801e1b4:	b16c      	cbz	r4, 801e1d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801e1b6:	fb04 7305 	mla	r3, r4, r5, r7
 801e1ba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801e1bc:	ebaa 0a04 	sub.w	sl, sl, r4
 801e1c0:	fb08 f303 	mul.w	r3, r8, r3
 801e1c4:	fa1f fa8a 	uxth.w	sl, sl
 801e1c8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801e1cc:	f003 0407 	and.w	r4, r3, #7
 801e1d0:	9226      	str	r2, [sp, #152]	@ 0x98
 801e1d2:	4649      	mov	r1, r9
 801e1d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e1d6:	f7ff ff1b 	bl	801e010 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801e1da:	4683      	mov	fp, r0
 801e1dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e1de:	f7ff ff3d 	bl	801e05c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801e1e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e1e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e1e6:	4681      	mov	r9, r0
 801e1e8:	1a9b      	subs	r3, r3, r2
 801e1ea:	459a      	cmp	sl, r3
 801e1ec:	bfa8      	it	ge
 801e1ee:	469a      	movge	sl, r3
 801e1f0:	f1ba 0f00 	cmp.w	sl, #0
 801e1f4:	f340 80f9 	ble.w	801e3ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e1f8:	1bf6      	subs	r6, r6, r7
 801e1fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e1fc:	1b9e      	subs	r6, r3, r6
 801e1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e200:	429e      	cmp	r6, r3
 801e202:	bfd4      	ite	le
 801e204:	ebc7 0706 	rsble	r7, r7, r6
 801e208:	ebc7 0703 	rsbgt	r7, r7, r3
 801e20c:	2f00      	cmp	r7, #0
 801e20e:	f340 80ec 	ble.w	801e3ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e212:	1bed      	subs	r5, r5, r7
 801e214:	fb08 f305 	mul.w	r3, r8, r5
 801e218:	930d      	str	r3, [sp, #52]	@ 0x34
 801e21a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e21c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e220:	930e      	str	r3, [sp, #56]	@ 0x38
 801e222:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e224:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e228:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e22a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e22c:	b2db      	uxtb	r3, r3
 801e22e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e232:	2b00      	cmp	r3, #0
 801e234:	f040 80de 	bne.w	801e3f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801e238:	4b7c      	ldr	r3, [pc, #496]	@ (801e42c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801e23a:	6818      	ldr	r0, [r3, #0]
 801e23c:	6803      	ldr	r3, [r0, #0]
 801e23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e240:	4798      	blx	r3
 801e242:	2301      	movs	r3, #1
 801e244:	4a7a      	ldr	r2, [pc, #488]	@ (801e430 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801e246:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801e24a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801e24e:	fa03 f308 	lsl.w	r3, r3, r8
 801e252:	8811      	ldrh	r1, [r2, #0]
 801e254:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801e258:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801e25c:	3b01      	subs	r3, #1
 801e25e:	fb06 bb07 	mla	fp, r6, r7, fp
 801e262:	b2db      	uxtb	r3, r3
 801e264:	930a      	str	r3, [sp, #40]	@ 0x28
 801e266:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801e26a:	fb01 2303 	mla	r3, r1, r3, r2
 801e26e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e272:	18c3      	adds	r3, r0, r3
 801e274:	9309      	str	r3, [sp, #36]	@ 0x24
 801e276:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e278:	781a      	ldrb	r2, [r3, #0]
 801e27a:	4122      	asrs	r2, r4
 801e27c:	b2d2      	uxtb	r2, r2
 801e27e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801e282:	f0c0 80d7 	bcc.w	801e434 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801e286:	46be      	mov	lr, r7
 801e288:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e28a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801e28e:	f0c0 80ba 	bcc.w	801e406 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801e292:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e294:	4013      	ands	r3, r2
 801e296:	d041      	beq.n	801e31c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801e298:	20ff      	movs	r0, #255	@ 0xff
 801e29a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e29c:	fb90 f5f5 	sdiv	r5, r0, r5
 801e2a0:	436b      	muls	r3, r5
 801e2a2:	2bfe      	cmp	r3, #254	@ 0xfe
 801e2a4:	dd03      	ble.n	801e2ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801e2a6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e2a8:	4285      	cmp	r5, r0
 801e2aa:	f000 80a5 	beq.w	801e3f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801e2ae:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e2b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e2b2:	fb15 f303 	smulbb	r3, r5, r3
 801e2b6:	b29b      	uxth	r3, r3
 801e2b8:	1c5d      	adds	r5, r3, #1
 801e2ba:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e2be:	780d      	ldrb	r5, [r1, #0]
 801e2c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e2c4:	fa1f fc83 	uxth.w	ip, r3
 801e2c8:	43db      	mvns	r3, r3
 801e2ca:	fb10 f90c 	smulbb	r9, r0, ip
 801e2ce:	b2db      	uxtb	r3, r3
 801e2d0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e2d2:	fb05 9503 	mla	r5, r5, r3, r9
 801e2d6:	b2ad      	uxth	r5, r5
 801e2d8:	f105 0901 	add.w	r9, r5, #1
 801e2dc:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e2e0:	fb10 f90c 	smulbb	r9, r0, ip
 801e2e4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e2e6:	122d      	asrs	r5, r5, #8
 801e2e8:	fb10 fc0c 	smulbb	ip, r0, ip
 801e2ec:	700d      	strb	r5, [r1, #0]
 801e2ee:	784d      	ldrb	r5, [r1, #1]
 801e2f0:	fb05 9503 	mla	r5, r5, r3, r9
 801e2f4:	b2ad      	uxth	r5, r5
 801e2f6:	f105 0901 	add.w	r9, r5, #1
 801e2fa:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e2fe:	122d      	asrs	r5, r5, #8
 801e300:	704d      	strb	r5, [r1, #1]
 801e302:	788d      	ldrb	r5, [r1, #2]
 801e304:	fb05 cc03 	mla	ip, r5, r3, ip
 801e308:	fa1f fc8c 	uxth.w	ip, ip
 801e30c:	f10c 0301 	add.w	r3, ip, #1
 801e310:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e314:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e318:	f881 c002 	strb.w	ip, [r1, #2]
 801e31c:	4444      	add	r4, r8
 801e31e:	4431      	add	r1, r6
 801e320:	b2a4      	uxth	r4, r4
 801e322:	2c07      	cmp	r4, #7
 801e324:	bf89      	itett	hi
 801e326:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801e328:	fa42 f208 	asrls.w	r2, r2, r8
 801e32c:	2400      	movhi	r4, #0
 801e32e:	785a      	ldrbhi	r2, [r3, #1]
 801e330:	bf8a      	itet	hi
 801e332:	3301      	addhi	r3, #1
 801e334:	b2d2      	uxtbls	r2, r2
 801e336:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801e338:	e7a7      	b.n	801e28a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801e33a:	441e      	add	r6, r3
 801e33c:	b236      	sxth	r6, r6
 801e33e:	e6ed      	b.n	801e11c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e340:	f1b9 0f01 	cmp.w	r9, #1
 801e344:	f47f af28 	bne.w	801e198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e348:	f1bb 0f01 	cmp.w	fp, #1
 801e34c:	f47f af24 	bne.w	801e198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e350:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801e42c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801e354:	f8db 0000 	ldr.w	r0, [fp]
 801e358:	6803      	ldr	r3, [r0, #0]
 801e35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e35c:	4798      	blx	r3
 801e35e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801e362:	465a      	mov	r2, fp
 801e364:	d006      	beq.n	801e374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e366:	f1b8 0f04 	cmp.w	r8, #4
 801e36a:	d141      	bne.n	801e3f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801e36c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e36e:	3300      	adds	r3, #0
 801e370:	bf18      	it	ne
 801e372:	2301      	movne	r3, #1
 801e374:	0580      	lsls	r0, r0, #22
 801e376:	d566      	bpl.n	801e446 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e378:	f1b8 0f08 	cmp.w	r8, #8
 801e37c:	d163      	bne.n	801e446 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e37e:	2b00      	cmp	r3, #0
 801e380:	bf0c      	ite	eq
 801e382:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801e386:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801e38a:	2f00      	cmp	r7, #0
 801e38c:	f47f af04 	bne.w	801e198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e390:	2c00      	cmp	r4, #0
 801e392:	f47f af01 	bne.w	801e198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e398:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e39a:	18f3      	adds	r3, r6, r3
 801e39c:	4283      	cmp	r3, r0
 801e39e:	f73f aefb 	bgt.w	801e198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e3a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801e3a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3a6:	4403      	add	r3, r0
 801e3a8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e3aa:	4283      	cmp	r3, r0
 801e3ac:	f73f aef4 	bgt.w	801e198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e3b0:	f1b8 0f08 	cmp.w	r8, #8
 801e3b4:	6810      	ldr	r0, [r2, #0]
 801e3b6:	f04f 0600 	mov.w	r6, #0
 801e3ba:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801e3be:	bf18      	it	ne
 801e3c0:	3501      	addne	r5, #1
 801e3c2:	6804      	ldr	r4, [r0, #0]
 801e3c4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801e3c8:	bf18      	it	ne
 801e3ca:	f025 0501 	bicne.w	r5, r5, #1
 801e3ce:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801e3d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e3d4:	bf18      	it	ne
 801e3d6:	b2ad      	uxthne	r5, r5
 801e3d8:	9104      	str	r1, [sp, #16]
 801e3da:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e3dc:	e9cd 5a00 	strd	r5, sl, [sp]
 801e3e0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801e3e4:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801e3e6:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801e3e8:	47a0      	blx	r4
 801e3ea:	b017      	add	sp, #92	@ 0x5c
 801e3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	e7bf      	b.n	801e374 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e3f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801e3f6:	e724      	b.n	801e242 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801e3f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3fa:	700b      	strb	r3, [r1, #0]
 801e3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3fe:	704b      	strb	r3, [r1, #1]
 801e400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e402:	708b      	strb	r3, [r1, #2]
 801e404:	e78a      	b.n	801e31c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801e406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e408:	b153      	cbz	r3, 801e420 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e40a:	441c      	add	r4, r3
 801e40c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e40e:	b2a4      	uxth	r4, r4
 801e410:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e414:	f004 0407 	and.w	r4, r4, #7
 801e418:	781a      	ldrb	r2, [r3, #0]
 801e41a:	9326      	str	r3, [sp, #152]	@ 0x98
 801e41c:	4122      	asrs	r2, r4
 801e41e:	b2d2      	uxtb	r2, r2
 801e420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e422:	445b      	add	r3, fp
 801e424:	9309      	str	r3, [sp, #36]	@ 0x24
 801e426:	e72a      	b.n	801e27e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801e428:	24026414 	.word	0x24026414
 801e42c:	2402641c 	.word	0x2402641c
 801e430:	24026416 	.word	0x24026416
 801e434:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e436:	2b00      	cmp	r3, #0
 801e438:	d1d7      	bne.n	801e3ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e43a:	4b06      	ldr	r3, [pc, #24]	@ (801e454 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801e43c:	6818      	ldr	r0, [r3, #0]
 801e43e:	6803      	ldr	r3, [r0, #0]
 801e440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e442:	4798      	blx	r3
 801e444:	e7d1      	b.n	801e3ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e446:	2b00      	cmp	r3, #0
 801e448:	f43f aea6 	beq.w	801e198 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e44c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e450:	e79b      	b.n	801e38a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801e452:	bf00      	nop
 801e454:	2402641c 	.word	0x2402641c

0801e458 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e458:	b538      	push	{r3, r4, r5, lr}
 801e45a:	4c15      	ldr	r4, [pc, #84]	@ (801e4b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e45c:	4605      	mov	r5, r0
 801e45e:	7823      	ldrb	r3, [r4, #0]
 801e460:	f3bf 8f5b 	dmb	ish
 801e464:	07da      	lsls	r2, r3, #31
 801e466:	d40b      	bmi.n	801e480 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e468:	4620      	mov	r0, r4
 801e46a:	f006 f8d8 	bl	802461e <__cxa_guard_acquire>
 801e46e:	b138      	cbz	r0, 801e480 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e470:	4620      	mov	r0, r4
 801e472:	f006 f8e0 	bl	8024636 <__cxa_guard_release>
 801e476:	4a0f      	ldr	r2, [pc, #60]	@ (801e4b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e478:	490f      	ldr	r1, [pc, #60]	@ (801e4b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e47a:	4810      	ldr	r0, [pc, #64]	@ (801e4bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e47c:	f006 f8c8 	bl	8024610 <__aeabi_atexit>
 801e480:	4c0f      	ldr	r4, [pc, #60]	@ (801e4c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e482:	7823      	ldrb	r3, [r4, #0]
 801e484:	f3bf 8f5b 	dmb	ish
 801e488:	07db      	lsls	r3, r3, #31
 801e48a:	d40b      	bmi.n	801e4a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e48c:	4620      	mov	r0, r4
 801e48e:	f006 f8c6 	bl	802461e <__cxa_guard_acquire>
 801e492:	b138      	cbz	r0, 801e4a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e494:	4620      	mov	r0, r4
 801e496:	f006 f8ce 	bl	8024636 <__cxa_guard_release>
 801e49a:	4a06      	ldr	r2, [pc, #24]	@ (801e4b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e49c:	4909      	ldr	r1, [pc, #36]	@ (801e4c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e49e:	480a      	ldr	r0, [pc, #40]	@ (801e4c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e4a0:	f006 f8b6 	bl	8024610 <__aeabi_atexit>
 801e4a4:	4b05      	ldr	r3, [pc, #20]	@ (801e4bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e4a6:	616b      	str	r3, [r5, #20]
 801e4a8:	4b07      	ldr	r3, [pc, #28]	@ (801e4c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e4aa:	61ab      	str	r3, [r5, #24]
 801e4ac:	bd38      	pop	{r3, r4, r5, pc}
 801e4ae:	bf00      	nop
 801e4b0:	24026500 	.word	0x24026500
 801e4b4:	24000000 	.word	0x24000000
 801e4b8:	0801b749 	.word	0x0801b749
 801e4bc:	240000c8 	.word	0x240000c8
 801e4c0:	24026504 	.word	0x24026504
 801e4c4:	0801b747 	.word	0x0801b747
 801e4c8:	240000cc 	.word	0x240000cc

0801e4cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e4cc:	b538      	push	{r3, r4, r5, lr}
 801e4ce:	4c15      	ldr	r4, [pc, #84]	@ (801e524 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e4d0:	4605      	mov	r5, r0
 801e4d2:	7823      	ldrb	r3, [r4, #0]
 801e4d4:	f3bf 8f5b 	dmb	ish
 801e4d8:	07da      	lsls	r2, r3, #31
 801e4da:	d40b      	bmi.n	801e4f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e4dc:	4620      	mov	r0, r4
 801e4de:	f006 f89e 	bl	802461e <__cxa_guard_acquire>
 801e4e2:	b138      	cbz	r0, 801e4f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e4e4:	4620      	mov	r0, r4
 801e4e6:	f006 f8a6 	bl	8024636 <__cxa_guard_release>
 801e4ea:	4a0f      	ldr	r2, [pc, #60]	@ (801e528 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e4ec:	490f      	ldr	r1, [pc, #60]	@ (801e52c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e4ee:	4810      	ldr	r0, [pc, #64]	@ (801e530 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e4f0:	f006 f88e 	bl	8024610 <__aeabi_atexit>
 801e4f4:	4c0f      	ldr	r4, [pc, #60]	@ (801e534 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e4f6:	7823      	ldrb	r3, [r4, #0]
 801e4f8:	f3bf 8f5b 	dmb	ish
 801e4fc:	07db      	lsls	r3, r3, #31
 801e4fe:	d40b      	bmi.n	801e518 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e500:	4620      	mov	r0, r4
 801e502:	f006 f88c 	bl	802461e <__cxa_guard_acquire>
 801e506:	b138      	cbz	r0, 801e518 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e508:	4620      	mov	r0, r4
 801e50a:	f006 f894 	bl	8024636 <__cxa_guard_release>
 801e50e:	4a06      	ldr	r2, [pc, #24]	@ (801e528 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e510:	4909      	ldr	r1, [pc, #36]	@ (801e538 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e512:	480a      	ldr	r0, [pc, #40]	@ (801e53c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e514:	f006 f87c 	bl	8024610 <__aeabi_atexit>
 801e518:	4b05      	ldr	r3, [pc, #20]	@ (801e530 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e51a:	60eb      	str	r3, [r5, #12]
 801e51c:	4b07      	ldr	r3, [pc, #28]	@ (801e53c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e51e:	612b      	str	r3, [r5, #16]
 801e520:	bd38      	pop	{r3, r4, r5, pc}
 801e522:	bf00      	nop
 801e524:	240264e0 	.word	0x240264e0
 801e528:	24000000 	.word	0x24000000
 801e52c:	0801b74d 	.word	0x0801b74d
 801e530:	240000a8 	.word	0x240000a8
 801e534:	240264e4 	.word	0x240264e4
 801e538:	0801b74b 	.word	0x0801b74b
 801e53c:	240000ac 	.word	0x240000ac

0801e540 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e540:	b510      	push	{r4, lr}
 801e542:	4604      	mov	r4, r0
 801e544:	f7ff ff88 	bl	801e458 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e548:	4620      	mov	r0, r4
 801e54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e54e:	f7ff bfbd 	b.w	801e4cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e554 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e554:	b538      	push	{r3, r4, r5, lr}
 801e556:	4c15      	ldr	r4, [pc, #84]	@ (801e5ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e558:	4605      	mov	r5, r0
 801e55a:	7823      	ldrb	r3, [r4, #0]
 801e55c:	f3bf 8f5b 	dmb	ish
 801e560:	07da      	lsls	r2, r3, #31
 801e562:	d40b      	bmi.n	801e57c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e564:	4620      	mov	r0, r4
 801e566:	f006 f85a 	bl	802461e <__cxa_guard_acquire>
 801e56a:	b138      	cbz	r0, 801e57c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e56c:	4620      	mov	r0, r4
 801e56e:	f006 f862 	bl	8024636 <__cxa_guard_release>
 801e572:	4a0f      	ldr	r2, [pc, #60]	@ (801e5b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e574:	490f      	ldr	r1, [pc, #60]	@ (801e5b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e576:	4810      	ldr	r0, [pc, #64]	@ (801e5b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e578:	f006 f84a 	bl	8024610 <__aeabi_atexit>
 801e57c:	4c0f      	ldr	r4, [pc, #60]	@ (801e5bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e57e:	7823      	ldrb	r3, [r4, #0]
 801e580:	f3bf 8f5b 	dmb	ish
 801e584:	07db      	lsls	r3, r3, #31
 801e586:	d40b      	bmi.n	801e5a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e588:	4620      	mov	r0, r4
 801e58a:	f006 f848 	bl	802461e <__cxa_guard_acquire>
 801e58e:	b138      	cbz	r0, 801e5a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e590:	4620      	mov	r0, r4
 801e592:	f006 f850 	bl	8024636 <__cxa_guard_release>
 801e596:	4a06      	ldr	r2, [pc, #24]	@ (801e5b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e598:	4909      	ldr	r1, [pc, #36]	@ (801e5c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e59a:	480a      	ldr	r0, [pc, #40]	@ (801e5c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e59c:	f006 f838 	bl	8024610 <__aeabi_atexit>
 801e5a0:	4b05      	ldr	r3, [pc, #20]	@ (801e5b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e5a2:	626b      	str	r3, [r5, #36]	@ 0x24
 801e5a4:	4b07      	ldr	r3, [pc, #28]	@ (801e5c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e5a6:	62ab      	str	r3, [r5, #40]	@ 0x28
 801e5a8:	bd38      	pop	{r3, r4, r5, pc}
 801e5aa:	bf00      	nop
 801e5ac:	24026508 	.word	0x24026508
 801e5b0:	24000000 	.word	0x24000000
 801e5b4:	0801b741 	.word	0x0801b741
 801e5b8:	240000d0 	.word	0x240000d0
 801e5bc:	2402650c 	.word	0x2402650c
 801e5c0:	0801b73f 	.word	0x0801b73f
 801e5c4:	240000d4 	.word	0x240000d4

0801e5c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e5c8:	b538      	push	{r3, r4, r5, lr}
 801e5ca:	4c15      	ldr	r4, [pc, #84]	@ (801e620 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e5cc:	4605      	mov	r5, r0
 801e5ce:	7823      	ldrb	r3, [r4, #0]
 801e5d0:	f3bf 8f5b 	dmb	ish
 801e5d4:	07da      	lsls	r2, r3, #31
 801e5d6:	d40b      	bmi.n	801e5f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e5d8:	4620      	mov	r0, r4
 801e5da:	f006 f820 	bl	802461e <__cxa_guard_acquire>
 801e5de:	b138      	cbz	r0, 801e5f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f006 f828 	bl	8024636 <__cxa_guard_release>
 801e5e6:	4a0f      	ldr	r2, [pc, #60]	@ (801e624 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e5e8:	490f      	ldr	r1, [pc, #60]	@ (801e628 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e5ea:	4810      	ldr	r0, [pc, #64]	@ (801e62c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e5ec:	f006 f810 	bl	8024610 <__aeabi_atexit>
 801e5f0:	4c0f      	ldr	r4, [pc, #60]	@ (801e630 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e5f2:	7823      	ldrb	r3, [r4, #0]
 801e5f4:	f3bf 8f5b 	dmb	ish
 801e5f8:	07db      	lsls	r3, r3, #31
 801e5fa:	d40b      	bmi.n	801e614 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e5fc:	4620      	mov	r0, r4
 801e5fe:	f006 f80e 	bl	802461e <__cxa_guard_acquire>
 801e602:	b138      	cbz	r0, 801e614 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e604:	4620      	mov	r0, r4
 801e606:	f006 f816 	bl	8024636 <__cxa_guard_release>
 801e60a:	4a06      	ldr	r2, [pc, #24]	@ (801e624 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e60c:	4909      	ldr	r1, [pc, #36]	@ (801e634 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e60e:	480a      	ldr	r0, [pc, #40]	@ (801e638 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e610:	f005 fffe 	bl	8024610 <__aeabi_atexit>
 801e614:	4b05      	ldr	r3, [pc, #20]	@ (801e62c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e616:	61eb      	str	r3, [r5, #28]
 801e618:	4b07      	ldr	r3, [pc, #28]	@ (801e638 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e61a:	622b      	str	r3, [r5, #32]
 801e61c:	bd38      	pop	{r3, r4, r5, pc}
 801e61e:	bf00      	nop
 801e620:	240264e8 	.word	0x240264e8
 801e624:	24000000 	.word	0x24000000
 801e628:	0801b745 	.word	0x0801b745
 801e62c:	240000b0 	.word	0x240000b0
 801e630:	240264ec 	.word	0x240264ec
 801e634:	0801b743 	.word	0x0801b743
 801e638:	240000b4 	.word	0x240000b4

0801e63c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e63c:	b510      	push	{r4, lr}
 801e63e:	4604      	mov	r4, r0
 801e640:	f7ff ff88 	bl	801e554 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e644:	4620      	mov	r0, r4
 801e646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e64a:	f7ff bfbd 	b.w	801e5c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e650 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e650:	b538      	push	{r3, r4, r5, lr}
 801e652:	4c15      	ldr	r4, [pc, #84]	@ (801e6a8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e654:	4605      	mov	r5, r0
 801e656:	7823      	ldrb	r3, [r4, #0]
 801e658:	f3bf 8f5b 	dmb	ish
 801e65c:	07da      	lsls	r2, r3, #31
 801e65e:	d40b      	bmi.n	801e678 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e660:	4620      	mov	r0, r4
 801e662:	f005 ffdc 	bl	802461e <__cxa_guard_acquire>
 801e666:	b138      	cbz	r0, 801e678 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e668:	4620      	mov	r0, r4
 801e66a:	f005 ffe4 	bl	8024636 <__cxa_guard_release>
 801e66e:	4a0f      	ldr	r2, [pc, #60]	@ (801e6ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e670:	490f      	ldr	r1, [pc, #60]	@ (801e6b0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e672:	4810      	ldr	r0, [pc, #64]	@ (801e6b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e674:	f005 ffcc 	bl	8024610 <__aeabi_atexit>
 801e678:	4c0f      	ldr	r4, [pc, #60]	@ (801e6b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e67a:	7823      	ldrb	r3, [r4, #0]
 801e67c:	f3bf 8f5b 	dmb	ish
 801e680:	07db      	lsls	r3, r3, #31
 801e682:	d40b      	bmi.n	801e69c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e684:	4620      	mov	r0, r4
 801e686:	f005 ffca 	bl	802461e <__cxa_guard_acquire>
 801e68a:	b138      	cbz	r0, 801e69c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e68c:	4620      	mov	r0, r4
 801e68e:	f005 ffd2 	bl	8024636 <__cxa_guard_release>
 801e692:	4a06      	ldr	r2, [pc, #24]	@ (801e6ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e694:	4909      	ldr	r1, [pc, #36]	@ (801e6bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e696:	480a      	ldr	r0, [pc, #40]	@ (801e6c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e698:	f005 ffba 	bl	8024610 <__aeabi_atexit>
 801e69c:	4b05      	ldr	r3, [pc, #20]	@ (801e6b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e69e:	636b      	str	r3, [r5, #52]	@ 0x34
 801e6a0:	4b07      	ldr	r3, [pc, #28]	@ (801e6c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e6a2:	63ab      	str	r3, [r5, #56]	@ 0x38
 801e6a4:	bd38      	pop	{r3, r4, r5, pc}
 801e6a6:	bf00      	nop
 801e6a8:	240264f0 	.word	0x240264f0
 801e6ac:	24000000 	.word	0x24000000
 801e6b0:	0801b739 	.word	0x0801b739
 801e6b4:	240000b8 	.word	0x240000b8
 801e6b8:	240264f4 	.word	0x240264f4
 801e6bc:	0801b737 	.word	0x0801b737
 801e6c0:	240000bc 	.word	0x240000bc

0801e6c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e6c4:	b538      	push	{r3, r4, r5, lr}
 801e6c6:	4c15      	ldr	r4, [pc, #84]	@ (801e71c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e6c8:	4605      	mov	r5, r0
 801e6ca:	7823      	ldrb	r3, [r4, #0]
 801e6cc:	f3bf 8f5b 	dmb	ish
 801e6d0:	07da      	lsls	r2, r3, #31
 801e6d2:	d40b      	bmi.n	801e6ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e6d4:	4620      	mov	r0, r4
 801e6d6:	f005 ffa2 	bl	802461e <__cxa_guard_acquire>
 801e6da:	b138      	cbz	r0, 801e6ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e6dc:	4620      	mov	r0, r4
 801e6de:	f005 ffaa 	bl	8024636 <__cxa_guard_release>
 801e6e2:	4a0f      	ldr	r2, [pc, #60]	@ (801e720 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e6e4:	490f      	ldr	r1, [pc, #60]	@ (801e724 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e6e6:	4810      	ldr	r0, [pc, #64]	@ (801e728 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e6e8:	f005 ff92 	bl	8024610 <__aeabi_atexit>
 801e6ec:	4c0f      	ldr	r4, [pc, #60]	@ (801e72c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e6ee:	7823      	ldrb	r3, [r4, #0]
 801e6f0:	f3bf 8f5b 	dmb	ish
 801e6f4:	07db      	lsls	r3, r3, #31
 801e6f6:	d40b      	bmi.n	801e710 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e6f8:	4620      	mov	r0, r4
 801e6fa:	f005 ff90 	bl	802461e <__cxa_guard_acquire>
 801e6fe:	b138      	cbz	r0, 801e710 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e700:	4620      	mov	r0, r4
 801e702:	f005 ff98 	bl	8024636 <__cxa_guard_release>
 801e706:	4a06      	ldr	r2, [pc, #24]	@ (801e720 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e708:	4909      	ldr	r1, [pc, #36]	@ (801e730 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e70a:	480a      	ldr	r0, [pc, #40]	@ (801e734 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e70c:	f005 ff80 	bl	8024610 <__aeabi_atexit>
 801e710:	4b05      	ldr	r3, [pc, #20]	@ (801e728 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e712:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801e714:	4b07      	ldr	r3, [pc, #28]	@ (801e734 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e716:	632b      	str	r3, [r5, #48]	@ 0x30
 801e718:	bd38      	pop	{r3, r4, r5, pc}
 801e71a:	bf00      	nop
 801e71c:	240264c8 	.word	0x240264c8
 801e720:	24000000 	.word	0x24000000
 801e724:	0801b73d 	.word	0x0801b73d
 801e728:	24000090 	.word	0x24000090
 801e72c:	240264cc 	.word	0x240264cc
 801e730:	0801b73b 	.word	0x0801b73b
 801e734:	24000094 	.word	0x24000094

0801e738 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e738:	b510      	push	{r4, lr}
 801e73a:	4604      	mov	r4, r0
 801e73c:	f7ff ff88 	bl	801e650 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e740:	4620      	mov	r0, r4
 801e742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e746:	f7ff bfbd 	b.w	801e6c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e74c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e74c:	b538      	push	{r3, r4, r5, lr}
 801e74e:	4c15      	ldr	r4, [pc, #84]	@ (801e7a4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e750:	4605      	mov	r5, r0
 801e752:	7823      	ldrb	r3, [r4, #0]
 801e754:	f3bf 8f5b 	dmb	ish
 801e758:	07da      	lsls	r2, r3, #31
 801e75a:	d40b      	bmi.n	801e774 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e75c:	4620      	mov	r0, r4
 801e75e:	f005 ff5e 	bl	802461e <__cxa_guard_acquire>
 801e762:	b138      	cbz	r0, 801e774 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e764:	4620      	mov	r0, r4
 801e766:	f005 ff66 	bl	8024636 <__cxa_guard_release>
 801e76a:	4a0f      	ldr	r2, [pc, #60]	@ (801e7a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e76c:	490f      	ldr	r1, [pc, #60]	@ (801e7ac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e76e:	4810      	ldr	r0, [pc, #64]	@ (801e7b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e770:	f005 ff4e 	bl	8024610 <__aeabi_atexit>
 801e774:	4c0f      	ldr	r4, [pc, #60]	@ (801e7b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e776:	7823      	ldrb	r3, [r4, #0]
 801e778:	f3bf 8f5b 	dmb	ish
 801e77c:	07db      	lsls	r3, r3, #31
 801e77e:	d40b      	bmi.n	801e798 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e780:	4620      	mov	r0, r4
 801e782:	f005 ff4c 	bl	802461e <__cxa_guard_acquire>
 801e786:	b138      	cbz	r0, 801e798 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e788:	4620      	mov	r0, r4
 801e78a:	f005 ff54 	bl	8024636 <__cxa_guard_release>
 801e78e:	4a06      	ldr	r2, [pc, #24]	@ (801e7a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e790:	4909      	ldr	r1, [pc, #36]	@ (801e7b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e792:	480a      	ldr	r0, [pc, #40]	@ (801e7bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e794:	f005 ff3c 	bl	8024610 <__aeabi_atexit>
 801e798:	4b05      	ldr	r3, [pc, #20]	@ (801e7b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e79a:	646b      	str	r3, [r5, #68]	@ 0x44
 801e79c:	4b07      	ldr	r3, [pc, #28]	@ (801e7bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e79e:	64ab      	str	r3, [r5, #72]	@ 0x48
 801e7a0:	bd38      	pop	{r3, r4, r5, pc}
 801e7a2:	bf00      	nop
 801e7a4:	240264f8 	.word	0x240264f8
 801e7a8:	24000000 	.word	0x24000000
 801e7ac:	0801b731 	.word	0x0801b731
 801e7b0:	240000c0 	.word	0x240000c0
 801e7b4:	240264fc 	.word	0x240264fc
 801e7b8:	0801b72f 	.word	0x0801b72f
 801e7bc:	240000c4 	.word	0x240000c4

0801e7c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e7c0:	b538      	push	{r3, r4, r5, lr}
 801e7c2:	4c15      	ldr	r4, [pc, #84]	@ (801e818 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e7c4:	4605      	mov	r5, r0
 801e7c6:	7823      	ldrb	r3, [r4, #0]
 801e7c8:	f3bf 8f5b 	dmb	ish
 801e7cc:	07da      	lsls	r2, r3, #31
 801e7ce:	d40b      	bmi.n	801e7e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	f005 ff24 	bl	802461e <__cxa_guard_acquire>
 801e7d6:	b138      	cbz	r0, 801e7e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e7d8:	4620      	mov	r0, r4
 801e7da:	f005 ff2c 	bl	8024636 <__cxa_guard_release>
 801e7de:	4a0f      	ldr	r2, [pc, #60]	@ (801e81c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e7e0:	490f      	ldr	r1, [pc, #60]	@ (801e820 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e7e2:	4810      	ldr	r0, [pc, #64]	@ (801e824 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e7e4:	f005 ff14 	bl	8024610 <__aeabi_atexit>
 801e7e8:	4c0f      	ldr	r4, [pc, #60]	@ (801e828 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e7ea:	7823      	ldrb	r3, [r4, #0]
 801e7ec:	f3bf 8f5b 	dmb	ish
 801e7f0:	07db      	lsls	r3, r3, #31
 801e7f2:	d40b      	bmi.n	801e80c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e7f4:	4620      	mov	r0, r4
 801e7f6:	f005 ff12 	bl	802461e <__cxa_guard_acquire>
 801e7fa:	b138      	cbz	r0, 801e80c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e7fc:	4620      	mov	r0, r4
 801e7fe:	f005 ff1a 	bl	8024636 <__cxa_guard_release>
 801e802:	4a06      	ldr	r2, [pc, #24]	@ (801e81c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e804:	4909      	ldr	r1, [pc, #36]	@ (801e82c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e806:	480a      	ldr	r0, [pc, #40]	@ (801e830 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e808:	f005 ff02 	bl	8024610 <__aeabi_atexit>
 801e80c:	4b05      	ldr	r3, [pc, #20]	@ (801e824 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e80e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801e810:	4b07      	ldr	r3, [pc, #28]	@ (801e830 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e812:	642b      	str	r3, [r5, #64]	@ 0x40
 801e814:	bd38      	pop	{r3, r4, r5, pc}
 801e816:	bf00      	nop
 801e818:	240264d8 	.word	0x240264d8
 801e81c:	24000000 	.word	0x24000000
 801e820:	0801b735 	.word	0x0801b735
 801e824:	240000a0 	.word	0x240000a0
 801e828:	240264dc 	.word	0x240264dc
 801e82c:	0801b733 	.word	0x0801b733
 801e830:	240000a4 	.word	0x240000a4

0801e834 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e834:	b510      	push	{r4, lr}
 801e836:	4604      	mov	r4, r0
 801e838:	f7ff ff88 	bl	801e74c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e83c:	4620      	mov	r0, r4
 801e83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e842:	f7ff bfbd 	b.w	801e7c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e848 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e848:	b538      	push	{r3, r4, r5, lr}
 801e84a:	4c15      	ldr	r4, [pc, #84]	@ (801e8a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e84c:	4605      	mov	r5, r0
 801e84e:	7823      	ldrb	r3, [r4, #0]
 801e850:	f3bf 8f5b 	dmb	ish
 801e854:	07da      	lsls	r2, r3, #31
 801e856:	d40b      	bmi.n	801e870 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e858:	4620      	mov	r0, r4
 801e85a:	f005 fee0 	bl	802461e <__cxa_guard_acquire>
 801e85e:	b138      	cbz	r0, 801e870 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e860:	4620      	mov	r0, r4
 801e862:	f005 fee8 	bl	8024636 <__cxa_guard_release>
 801e866:	4a0f      	ldr	r2, [pc, #60]	@ (801e8a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e868:	490f      	ldr	r1, [pc, #60]	@ (801e8a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e86a:	4810      	ldr	r0, [pc, #64]	@ (801e8ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e86c:	f005 fed0 	bl	8024610 <__aeabi_atexit>
 801e870:	4c0f      	ldr	r4, [pc, #60]	@ (801e8b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e872:	7823      	ldrb	r3, [r4, #0]
 801e874:	f3bf 8f5b 	dmb	ish
 801e878:	07db      	lsls	r3, r3, #31
 801e87a:	d40b      	bmi.n	801e894 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e87c:	4620      	mov	r0, r4
 801e87e:	f005 fece 	bl	802461e <__cxa_guard_acquire>
 801e882:	b138      	cbz	r0, 801e894 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e884:	4620      	mov	r0, r4
 801e886:	f005 fed6 	bl	8024636 <__cxa_guard_release>
 801e88a:	4a06      	ldr	r2, [pc, #24]	@ (801e8a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e88c:	4909      	ldr	r1, [pc, #36]	@ (801e8b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e88e:	480a      	ldr	r0, [pc, #40]	@ (801e8b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e890:	f005 febe 	bl	8024610 <__aeabi_atexit>
 801e894:	4b05      	ldr	r3, [pc, #20]	@ (801e8ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e896:	656b      	str	r3, [r5, #84]	@ 0x54
 801e898:	4b07      	ldr	r3, [pc, #28]	@ (801e8b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e89a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801e89c:	bd38      	pop	{r3, r4, r5, pc}
 801e89e:	bf00      	nop
 801e8a0:	240264d0 	.word	0x240264d0
 801e8a4:	24000000 	.word	0x24000000
 801e8a8:	0801b729 	.word	0x0801b729
 801e8ac:	24000098 	.word	0x24000098
 801e8b0:	240264d4 	.word	0x240264d4
 801e8b4:	0801b727 	.word	0x0801b727
 801e8b8:	2400009c 	.word	0x2400009c

0801e8bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e8bc:	b538      	push	{r3, r4, r5, lr}
 801e8be:	4c15      	ldr	r4, [pc, #84]	@ (801e914 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e8c0:	4605      	mov	r5, r0
 801e8c2:	7823      	ldrb	r3, [r4, #0]
 801e8c4:	f3bf 8f5b 	dmb	ish
 801e8c8:	07da      	lsls	r2, r3, #31
 801e8ca:	d40b      	bmi.n	801e8e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e8cc:	4620      	mov	r0, r4
 801e8ce:	f005 fea6 	bl	802461e <__cxa_guard_acquire>
 801e8d2:	b138      	cbz	r0, 801e8e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e8d4:	4620      	mov	r0, r4
 801e8d6:	f005 feae 	bl	8024636 <__cxa_guard_release>
 801e8da:	4a0f      	ldr	r2, [pc, #60]	@ (801e918 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e8dc:	490f      	ldr	r1, [pc, #60]	@ (801e91c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e8de:	4810      	ldr	r0, [pc, #64]	@ (801e920 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e8e0:	f005 fe96 	bl	8024610 <__aeabi_atexit>
 801e8e4:	4c0f      	ldr	r4, [pc, #60]	@ (801e924 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e8e6:	7823      	ldrb	r3, [r4, #0]
 801e8e8:	f3bf 8f5b 	dmb	ish
 801e8ec:	07db      	lsls	r3, r3, #31
 801e8ee:	d40b      	bmi.n	801e908 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	f005 fe94 	bl	802461e <__cxa_guard_acquire>
 801e8f6:	b138      	cbz	r0, 801e908 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e8f8:	4620      	mov	r0, r4
 801e8fa:	f005 fe9c 	bl	8024636 <__cxa_guard_release>
 801e8fe:	4a06      	ldr	r2, [pc, #24]	@ (801e918 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e900:	4909      	ldr	r1, [pc, #36]	@ (801e928 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e902:	480a      	ldr	r0, [pc, #40]	@ (801e92c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e904:	f005 fe84 	bl	8024610 <__aeabi_atexit>
 801e908:	4b05      	ldr	r3, [pc, #20]	@ (801e920 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e90a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801e90c:	4b07      	ldr	r3, [pc, #28]	@ (801e92c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e90e:	652b      	str	r3, [r5, #80]	@ 0x50
 801e910:	bd38      	pop	{r3, r4, r5, pc}
 801e912:	bf00      	nop
 801e914:	240264c0 	.word	0x240264c0
 801e918:	24000000 	.word	0x24000000
 801e91c:	0801b72d 	.word	0x0801b72d
 801e920:	24000088 	.word	0x24000088
 801e924:	240264c4 	.word	0x240264c4
 801e928:	0801b72b 	.word	0x0801b72b
 801e92c:	2400008c 	.word	0x2400008c

0801e930 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e930:	b510      	push	{r4, lr}
 801e932:	4604      	mov	r4, r0
 801e934:	f7ff ff88 	bl	801e848 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e938:	4620      	mov	r0, r4
 801e93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e93e:	f7ff bfbd 	b.w	801e8bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e942 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e942:	b510      	push	{r4, lr}
 801e944:	4604      	mov	r4, r0
 801e946:	f7ff fff3 	bl	801e930 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e94a:	4620      	mov	r0, r4
 801e94c:	f7ff ff72 	bl	801e834 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e950:	4620      	mov	r0, r4
 801e952:	f7ff fe73 	bl	801e63c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e956:	4620      	mov	r0, r4
 801e958:	f7ff fdf2 	bl	801e540 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e95c:	4620      	mov	r0, r4
 801e95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e962:	f7ff bee9 	b.w	801e738 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e968 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801e968:	b538      	push	{r3, r4, r5, lr}
 801e96a:	4c0b      	ldr	r4, [pc, #44]	@ (801e998 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801e96c:	4605      	mov	r5, r0
 801e96e:	7823      	ldrb	r3, [r4, #0]
 801e970:	f3bf 8f5b 	dmb	ish
 801e974:	07db      	lsls	r3, r3, #31
 801e976:	d40b      	bmi.n	801e990 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801e978:	4620      	mov	r0, r4
 801e97a:	f005 fe50 	bl	802461e <__cxa_guard_acquire>
 801e97e:	b138      	cbz	r0, 801e990 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801e980:	4620      	mov	r0, r4
 801e982:	f005 fe58 	bl	8024636 <__cxa_guard_release>
 801e986:	4a05      	ldr	r2, [pc, #20]	@ (801e99c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801e988:	4905      	ldr	r1, [pc, #20]	@ (801e9a0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801e98a:	4806      	ldr	r0, [pc, #24]	@ (801e9a4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801e98c:	f005 fe40 	bl	8024610 <__aeabi_atexit>
 801e990:	4b04      	ldr	r3, [pc, #16]	@ (801e9a4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801e992:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801e994:	bd38      	pop	{r3, r4, r5, pc}
 801e996:	bf00      	nop
 801e998:	240264b4 	.word	0x240264b4
 801e99c:	24000000 	.word	0x24000000
 801e9a0:	0801b725 	.word	0x0801b725
 801e9a4:	24000080 	.word	0x24000080

0801e9a8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801e9a8:	b538      	push	{r3, r4, r5, lr}
 801e9aa:	4c0b      	ldr	r4, [pc, #44]	@ (801e9d8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801e9ac:	4605      	mov	r5, r0
 801e9ae:	7823      	ldrb	r3, [r4, #0]
 801e9b0:	f3bf 8f5b 	dmb	ish
 801e9b4:	07db      	lsls	r3, r3, #31
 801e9b6:	d40b      	bmi.n	801e9d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801e9b8:	4620      	mov	r0, r4
 801e9ba:	f005 fe30 	bl	802461e <__cxa_guard_acquire>
 801e9be:	b138      	cbz	r0, 801e9d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	f005 fe38 	bl	8024636 <__cxa_guard_release>
 801e9c6:	4a05      	ldr	r2, [pc, #20]	@ (801e9dc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801e9c8:	4905      	ldr	r1, [pc, #20]	@ (801e9e0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801e9ca:	4806      	ldr	r0, [pc, #24]	@ (801e9e4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801e9cc:	f005 fe20 	bl	8024610 <__aeabi_atexit>
 801e9d0:	4b04      	ldr	r3, [pc, #16]	@ (801e9e4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801e9d2:	662b      	str	r3, [r5, #96]	@ 0x60
 801e9d4:	bd38      	pop	{r3, r4, r5, pc}
 801e9d6:	bf00      	nop
 801e9d8:	240264b8 	.word	0x240264b8
 801e9dc:	24000000 	.word	0x24000000
 801e9e0:	0801b723 	.word	0x0801b723
 801e9e4:	24000084 	.word	0x24000084

0801e9e8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801e9e8:	b570      	push	{r4, r5, r6, lr}
 801e9ea:	4d0c      	ldr	r5, [pc, #48]	@ (801ea1c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801e9ec:	4606      	mov	r6, r0
 801e9ee:	4c0c      	ldr	r4, [pc, #48]	@ (801ea20 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801e9f0:	782b      	ldrb	r3, [r5, #0]
 801e9f2:	f3bf 8f5b 	dmb	ish
 801e9f6:	f013 0f01 	tst.w	r3, #1
 801e9fa:	d10d      	bne.n	801ea18 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801e9fc:	4628      	mov	r0, r5
 801e9fe:	f005 fe0e 	bl	802461e <__cxa_guard_acquire>
 801ea02:	b148      	cbz	r0, 801ea18 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801ea04:	4b07      	ldr	r3, [pc, #28]	@ (801ea24 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801ea06:	4628      	mov	r0, r5
 801ea08:	6023      	str	r3, [r4, #0]
 801ea0a:	f005 fe14 	bl	8024636 <__cxa_guard_release>
 801ea0e:	4a06      	ldr	r2, [pc, #24]	@ (801ea28 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801ea10:	4620      	mov	r0, r4
 801ea12:	4906      	ldr	r1, [pc, #24]	@ (801ea2c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801ea14:	f005 fdfc 	bl	8024610 <__aeabi_atexit>
 801ea18:	6674      	str	r4, [r6, #100]	@ 0x64
 801ea1a:	bd70      	pop	{r4, r5, r6, pc}
 801ea1c:	240264bc 	.word	0x240264bc
 801ea20:	24026614 	.word	0x24026614
 801ea24:	08029560 	.word	0x08029560
 801ea28:	24000000 	.word	0x24000000
 801ea2c:	0801b721 	.word	0x0801b721

0801ea30 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801ea30:	b510      	push	{r4, lr}
 801ea32:	4604      	mov	r4, r0
 801ea34:	f7ff ff98 	bl	801e968 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801ea38:	4620      	mov	r0, r4
 801ea3a:	f7ff ffb5 	bl	801e9a8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801ea3e:	4620      	mov	r0, r4
 801ea40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ea44:	f7ff bfd0 	b.w	801e9e8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801ea48 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801ea48:	b570      	push	{r4, r5, r6, lr}
 801ea4a:	4d0c      	ldr	r5, [pc, #48]	@ (801ea7c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801ea4c:	4606      	mov	r6, r0
 801ea4e:	4c0c      	ldr	r4, [pc, #48]	@ (801ea80 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801ea50:	782b      	ldrb	r3, [r5, #0]
 801ea52:	f3bf 8f5b 	dmb	ish
 801ea56:	f013 0f01 	tst.w	r3, #1
 801ea5a:	d10d      	bne.n	801ea78 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801ea5c:	4628      	mov	r0, r5
 801ea5e:	f005 fdde 	bl	802461e <__cxa_guard_acquire>
 801ea62:	b148      	cbz	r0, 801ea78 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801ea64:	4b07      	ldr	r3, [pc, #28]	@ (801ea84 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801ea66:	4628      	mov	r0, r5
 801ea68:	6023      	str	r3, [r4, #0]
 801ea6a:	f005 fde4 	bl	8024636 <__cxa_guard_release>
 801ea6e:	4a06      	ldr	r2, [pc, #24]	@ (801ea88 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801ea70:	4620      	mov	r0, r4
 801ea72:	4906      	ldr	r1, [pc, #24]	@ (801ea8c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801ea74:	f005 fdcc 	bl	8024610 <__aeabi_atexit>
 801ea78:	66b4      	str	r4, [r6, #104]	@ 0x68
 801ea7a:	bd70      	pop	{r4, r5, r6, pc}
 801ea7c:	240264b0 	.word	0x240264b0
 801ea80:	24026510 	.word	0x24026510
 801ea84:	08029578 	.word	0x08029578
 801ea88:	24000000 	.word	0x24000000
 801ea8c:	0801b71f 	.word	0x0801b71f

0801ea90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea94:	b087      	sub	sp, #28
 801ea96:	788d      	ldrb	r5, [r1, #2]
 801ea98:	f891 9000 	ldrb.w	r9, [r1]
 801ea9c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801eaa0:	9501      	str	r5, [sp, #4]
 801eaa2:	784d      	ldrb	r5, [r1, #1]
 801eaa4:	9203      	str	r2, [sp, #12]
 801eaa6:	9502      	str	r5, [sp, #8]
 801eaa8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801eaac:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801eab0:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801eab4:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801eab8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801eabc:	fb06 0708 	mla	r7, r6, r8, r0
 801eac0:	2e00      	cmp	r6, #0
 801eac2:	eb02 0a07 	add.w	sl, r2, r7
 801eac6:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801eaca:	9d01      	ldr	r5, [sp, #4]
 801eacc:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801ead0:	ea45 0509 	orr.w	r5, r5, r9
 801ead4:	9505      	str	r5, [sp, #20]
 801ead6:	f2c0 80b2 	blt.w	801ec3e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801eada:	45b3      	cmp	fp, r6
 801eadc:	f340 80af 	ble.w	801ec3e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801eae0:	2800      	cmp	r0, #0
 801eae2:	f2c0 80aa 	blt.w	801ec3a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801eae6:	4580      	cmp	r8, r0
 801eae8:	f340 80a7 	ble.w	801ec3a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801eaec:	9a03      	ldr	r2, [sp, #12]
 801eaee:	5dd7      	ldrb	r7, [r2, r7]
 801eaf0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801eaf4:	441f      	add	r7, r3
 801eaf6:	1c42      	adds	r2, r0, #1
 801eaf8:	f100 80a4 	bmi.w	801ec44 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801eafc:	4590      	cmp	r8, r2
 801eafe:	f340 80a1 	ble.w	801ec44 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801eb02:	2c00      	cmp	r4, #0
 801eb04:	f000 809e 	beq.w	801ec44 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801eb08:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801eb0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb10:	441d      	add	r5, r3
 801eb12:	3601      	adds	r6, #1
 801eb14:	f100 809a 	bmi.w	801ec4c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801eb18:	45b3      	cmp	fp, r6
 801eb1a:	f340 8097 	ble.w	801ec4c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801eb1e:	f1bc 0f00 	cmp.w	ip, #0
 801eb22:	f000 8093 	beq.w	801ec4c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801eb26:	2800      	cmp	r0, #0
 801eb28:	f2c0 808e 	blt.w	801ec48 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801eb2c:	4580      	cmp	r8, r0
 801eb2e:	f340 808b 	ble.w	801ec48 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801eb32:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801eb36:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eb3a:	441e      	add	r6, r3
 801eb3c:	3001      	adds	r0, #1
 801eb3e:	f100 8088 	bmi.w	801ec52 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801eb42:	4580      	cmp	r8, r0
 801eb44:	f340 8085 	ble.w	801ec52 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801eb48:	2c00      	cmp	r4, #0
 801eb4a:	f000 8082 	beq.w	801ec52 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801eb4e:	44d0      	add	r8, sl
 801eb50:	f898 2001 	ldrb.w	r2, [r8, #1]
 801eb54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb58:	4413      	add	r3, r2
 801eb5a:	b2a4      	uxth	r4, r4
 801eb5c:	f895 a000 	ldrb.w	sl, [r5]
 801eb60:	fa1f fc8c 	uxth.w	ip, ip
 801eb64:	fb04 fb0c 	mul.w	fp, r4, ip
 801eb68:	0124      	lsls	r4, r4, #4
 801eb6a:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801eb6e:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801eb72:	eba4 040b 	sub.w	r4, r4, fp
 801eb76:	fa1f f08c 	uxth.w	r0, ip
 801eb7a:	b2a2      	uxth	r2, r4
 801eb7c:	783c      	ldrb	r4, [r7, #0]
 801eb7e:	eba8 0800 	sub.w	r8, r8, r0
 801eb82:	fa1f fc8e 	uxth.w	ip, lr
 801eb86:	fb02 fa0a 	mul.w	sl, r2, sl
 801eb8a:	ea6f 0e0e 	mvn.w	lr, lr
 801eb8e:	fa1f f888 	uxth.w	r8, r8
 801eb92:	fa5f fe8e 	uxtb.w	lr, lr
 801eb96:	fb08 aa04 	mla	sl, r8, r4, sl
 801eb9a:	7834      	ldrb	r4, [r6, #0]
 801eb9c:	fb19 f90e 	smulbb	r9, r9, lr
 801eba0:	fb00 aa04 	mla	sl, r0, r4, sl
 801eba4:	781c      	ldrb	r4, [r3, #0]
 801eba6:	fb0b a404 	mla	r4, fp, r4, sl
 801ebaa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ebae:	fb04 990c 	mla	r9, r4, ip, r9
 801ebb2:	fa1f f989 	uxth.w	r9, r9
 801ebb6:	f109 0401 	add.w	r4, r9, #1
 801ebba:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ebbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ebc2:	f881 9000 	strb.w	r9, [r1]
 801ebc6:	f895 9001 	ldrb.w	r9, [r5, #1]
 801ebca:	787c      	ldrb	r4, [r7, #1]
 801ebcc:	fb02 f909 	mul.w	r9, r2, r9
 801ebd0:	fb08 9904 	mla	r9, r8, r4, r9
 801ebd4:	7874      	ldrb	r4, [r6, #1]
 801ebd6:	fb00 9904 	mla	r9, r0, r4, r9
 801ebda:	785c      	ldrb	r4, [r3, #1]
 801ebdc:	fb0b 9404 	mla	r4, fp, r4, r9
 801ebe0:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801ebe4:	9c02      	ldr	r4, [sp, #8]
 801ebe6:	fb14 f90e 	smulbb	r9, r4, lr
 801ebea:	fb0a 940c 	mla	r4, sl, ip, r9
 801ebee:	b2a4      	uxth	r4, r4
 801ebf0:	f104 0901 	add.w	r9, r4, #1
 801ebf4:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801ebf8:	1224      	asrs	r4, r4, #8
 801ebfa:	704c      	strb	r4, [r1, #1]
 801ebfc:	78ad      	ldrb	r5, [r5, #2]
 801ebfe:	78bc      	ldrb	r4, [r7, #2]
 801ec00:	436a      	muls	r2, r5
 801ec02:	789b      	ldrb	r3, [r3, #2]
 801ec04:	fb08 2204 	mla	r2, r8, r4, r2
 801ec08:	78b4      	ldrb	r4, [r6, #2]
 801ec0a:	fb00 2004 	mla	r0, r0, r4, r2
 801ec0e:	fb0b 0b03 	mla	fp, fp, r3, r0
 801ec12:	9b01      	ldr	r3, [sp, #4]
 801ec14:	fb13 fe0e 	smulbb	lr, r3, lr
 801ec18:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801ec1c:	fb0b ec0c 	mla	ip, fp, ip, lr
 801ec20:	fa1f fc8c 	uxth.w	ip, ip
 801ec24:	f10c 0e01 	add.w	lr, ip, #1
 801ec28:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ec2c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ec30:	f881 c002 	strb.w	ip, [r1, #2]
 801ec34:	b007      	add	sp, #28
 801ec36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec3a:	af05      	add	r7, sp, #20
 801ec3c:	e75b      	b.n	801eaf6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801ec3e:	ad05      	add	r5, sp, #20
 801ec40:	462f      	mov	r7, r5
 801ec42:	e766      	b.n	801eb12 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ec44:	ad05      	add	r5, sp, #20
 801ec46:	e764      	b.n	801eb12 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ec48:	ae05      	add	r6, sp, #20
 801ec4a:	e777      	b.n	801eb3c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801ec4c:	ab05      	add	r3, sp, #20
 801ec4e:	461e      	mov	r6, r3
 801ec50:	e783      	b.n	801eb5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801ec52:	ab05      	add	r3, sp, #20
 801ec54:	e781      	b.n	801eb5a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801ec56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec5a:	b093      	sub	sp, #76	@ 0x4c
 801ec5c:	9210      	str	r2, [sp, #64]	@ 0x40
 801ec5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ec62:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801ec66:	9011      	str	r0, [sp, #68]	@ 0x44
 801ec68:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec6a:	6850      	ldr	r0, [r2, #4]
 801ec6c:	910d      	str	r1, [sp, #52]	@ 0x34
 801ec6e:	6812      	ldr	r2, [r2, #0]
 801ec70:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ec74:	fb00 1303 	mla	r3, r0, r3, r1
 801ec78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec7c:	18d3      	adds	r3, r2, r3
 801ec7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec80:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec82:	681b      	ldr	r3, [r3, #0]
 801ec84:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec88:	685c      	ldr	r4, [r3, #4]
 801ec8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec8c:	3404      	adds	r4, #4
 801ec8e:	43db      	mvns	r3, r3
 801ec90:	b2db      	uxtb	r3, r3
 801ec92:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	dc03      	bgt.n	801eca2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ec9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	f340 8250 	ble.w	801f142 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801eca2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eca4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eca8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ecac:	1e48      	subs	r0, r1, #1
 801ecae:	1e55      	subs	r5, r2, #1
 801ecb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	f340 80ee 	ble.w	801ee94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801ecb8:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801ecba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ecbc:	1436      	asrs	r6, r6, #16
 801ecbe:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ecc2:	d406      	bmi.n	801ecd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ecc4:	4286      	cmp	r6, r0
 801ecc6:	da04      	bge.n	801ecd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	db02      	blt.n	801ecd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eccc:	42ab      	cmp	r3, r5
 801ecce:	f2c0 80e2 	blt.w	801ee96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ecd2:	3601      	adds	r6, #1
 801ecd4:	f100 80cf 	bmi.w	801ee76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ecd8:	42b1      	cmp	r1, r6
 801ecda:	f2c0 80cc 	blt.w	801ee76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ecde:	3301      	adds	r3, #1
 801ece0:	f100 80c9 	bmi.w	801ee76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ece4:	429a      	cmp	r2, r3
 801ece6:	f2c0 80c6 	blt.w	801ee76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ecea:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801ecee:	f1bb 0f00 	cmp.w	fp, #0
 801ecf2:	f340 80f1 	ble.w	801eed8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801ecf6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ecf8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ecfa:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801ecfc:	141d      	asrs	r5, r3, #16
 801ecfe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed00:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ed04:	68c7      	ldr	r7, [r0, #12]
 801ed06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ed08:	1418      	asrs	r0, r3, #16
 801ed0a:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801ed0e:	6892      	ldr	r2, [r2, #8]
 801ed10:	f100 8137 	bmi.w	801ef82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ed14:	f102 3cff 	add.w	ip, r2, #4294967295
 801ed18:	4560      	cmp	r0, ip
 801ed1a:	f280 8132 	bge.w	801ef82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ed1e:	2d00      	cmp	r5, #0
 801ed20:	f2c0 812f 	blt.w	801ef82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ed24:	f107 3cff 	add.w	ip, r7, #4294967295
 801ed28:	4565      	cmp	r5, ip
 801ed2a:	f280 812a 	bge.w	801ef82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ed2e:	b212      	sxth	r2, r2
 801ed30:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ed32:	fb05 0002 	mla	r0, r5, r2, r0
 801ed36:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ed38:	f817 c000 	ldrb.w	ip, [r7, r0]
 801ed3c:	4405      	add	r5, r0
 801ed3e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ed42:	eb04 0e0c 	add.w	lr, r4, ip
 801ed46:	f1b8 0f00 	cmp.w	r8, #0
 801ed4a:	f000 810c 	beq.w	801ef66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801ed4e:	786f      	ldrb	r7, [r5, #1]
 801ed50:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ed54:	4427      	add	r7, r4
 801ed56:	2900      	cmp	r1, #0
 801ed58:	f000 810d 	beq.w	801ef76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801ed5c:	18a8      	adds	r0, r5, r2
 801ed5e:	5caa      	ldrb	r2, [r5, r2]
 801ed60:	7840      	ldrb	r0, [r0, #1]
 801ed62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ed6a:	4422      	add	r2, r4
 801ed6c:	4420      	add	r0, r4
 801ed6e:	fa1f f388 	uxth.w	r3, r8
 801ed72:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801ed76:	b289      	uxth	r1, r1
 801ed78:	f897 c000 	ldrb.w	ip, [r7]
 801ed7c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801ed80:	fb03 f901 	mul.w	r9, r3, r1
 801ed84:	011b      	lsls	r3, r3, #4
 801ed86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ed8a:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801ed8e:	eba3 0309 	sub.w	r3, r3, r9
 801ed92:	b289      	uxth	r1, r1
 801ed94:	b29b      	uxth	r3, r3
 801ed96:	eba8 0801 	sub.w	r8, r8, r1
 801ed9a:	fb03 fc0c 	mul.w	ip, r3, ip
 801ed9e:	fa1f f888 	uxth.w	r8, r8
 801eda2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eda4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eda6:	fb08 cc0a 	mla	ip, r8, sl, ip
 801edaa:	f892 a000 	ldrb.w	sl, [r2]
 801edae:	fb01 cc0a 	mla	ip, r1, sl, ip
 801edb2:	f890 a000 	ldrb.w	sl, [r0]
 801edb6:	fb09 cc0a 	mla	ip, r9, sl, ip
 801edba:	f896 a000 	ldrb.w	sl, [r6]
 801edbe:	fb1a fa03 	smulbb	sl, sl, r3
 801edc2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801edc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801edc8:	fb0c ac05 	mla	ip, ip, r5, sl
 801edcc:	fa1f fc8c 	uxth.w	ip, ip
 801edd0:	f10c 0a01 	add.w	sl, ip, #1
 801edd4:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801edd8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801eddc:	f886 a000 	strb.w	sl, [r6]
 801ede0:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ede4:	f89e a001 	ldrb.w	sl, [lr, #1]
 801ede8:	fb03 fc0c 	mul.w	ip, r3, ip
 801edec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801edee:	fb08 cc0a 	mla	ip, r8, sl, ip
 801edf2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801edf6:	fb01 cc0a 	mla	ip, r1, sl, ip
 801edfa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801edfe:	fb09 cc0a 	mla	ip, r9, sl, ip
 801ee02:	f896 a001 	ldrb.w	sl, [r6, #1]
 801ee06:	fb1a fa03 	smulbb	sl, sl, r3
 801ee0a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ee0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ee10:	fb0c ac05 	mla	ip, ip, r5, sl
 801ee14:	fa1f fc8c 	uxth.w	ip, ip
 801ee18:	f10c 0a01 	add.w	sl, ip, #1
 801ee1c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ee20:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee24:	f886 c001 	strb.w	ip, [r6, #1]
 801ee28:	78bf      	ldrb	r7, [r7, #2]
 801ee2a:	f89e c002 	ldrb.w	ip, [lr, #2]
 801ee2e:	437b      	muls	r3, r7
 801ee30:	fb08 330c 	mla	r3, r8, ip, r3
 801ee34:	f892 c002 	ldrb.w	ip, [r2, #2]
 801ee38:	7882      	ldrb	r2, [r0, #2]
 801ee3a:	fb01 310c 	mla	r1, r1, ip, r3
 801ee3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ee40:	fb09 1902 	mla	r9, r9, r2, r1
 801ee44:	78b1      	ldrb	r1, [r6, #2]
 801ee46:	fb11 f103 	smulbb	r1, r1, r3
 801ee4a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ee4e:	fb09 1505 	mla	r5, r9, r5, r1
 801ee52:	b2ad      	uxth	r5, r5
 801ee54:	1c6b      	adds	r3, r5, #1
 801ee56:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ee5a:	122d      	asrs	r5, r5, #8
 801ee5c:	70b5      	strb	r5, [r6, #2]
 801ee5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee60:	3603      	adds	r6, #3
 801ee62:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801ee64:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ee68:	4413      	add	r3, r2
 801ee6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ee6c:	931d      	str	r3, [sp, #116]	@ 0x74
 801ee6e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ee70:	4413      	add	r3, r2
 801ee72:	931e      	str	r3, [sp, #120]	@ 0x78
 801ee74:	e73b      	b.n	801ecee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ee76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee78:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801ee7a:	4433      	add	r3, r6
 801ee7c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ee7e:	931d      	str	r3, [sp, #116]	@ 0x74
 801ee80:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ee82:	4433      	add	r3, r6
 801ee84:	931e      	str	r3, [sp, #120]	@ 0x78
 801ee86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee88:	3b01      	subs	r3, #1
 801ee8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ee8e:	3303      	adds	r3, #3
 801ee90:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee92:	e70d      	b.n	801ecb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ee94:	d028      	beq.n	801eee8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ee96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee98:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801ee9a:	3b01      	subs	r3, #1
 801ee9c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801ee9e:	fb00 5003 	mla	r0, r0, r3, r5
 801eea2:	1400      	asrs	r0, r0, #16
 801eea4:	f53f af21 	bmi.w	801ecea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eea8:	3901      	subs	r1, #1
 801eeaa:	4288      	cmp	r0, r1
 801eeac:	f6bf af1d 	bge.w	801ecea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eeb0:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801eeb2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801eeb4:	fb01 0303 	mla	r3, r1, r3, r0
 801eeb8:	141b      	asrs	r3, r3, #16
 801eeba:	f53f af16 	bmi.w	801ecea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eebe:	3a01      	subs	r2, #1
 801eec0:	4293      	cmp	r3, r2
 801eec2:	f6bf af12 	bge.w	801ecea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eec8:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801eecc:	1cdf      	adds	r7, r3, #3
 801eece:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801eed2:	f1b9 0f00 	cmp.w	r9, #0
 801eed6:	dc73      	bgt.n	801efc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801eed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eeda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eedc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eee4:	441a      	add	r2, r3
 801eee6:	920a      	str	r2, [sp, #40]	@ 0x28
 801eee8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	f340 8129 	ble.w	801f142 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801eef0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eef4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801eef6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eefa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eefe:	eef0 6a62 	vmov.f32	s13, s5
 801ef02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ef06:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef0e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801ef12:	eef0 6a43 	vmov.f32	s13, s6
 801ef16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ef1a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801ef1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef22:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef26:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef2e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef36:	ee12 2a90 	vmov	r2, s5
 801ef3a:	eef0 2a47 	vmov.f32	s5, s14
 801ef3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef42:	ee13 2a10 	vmov	r2, s6
 801ef46:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ef48:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ef4a:	eeb0 3a67 	vmov.f32	s6, s15
 801ef4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef52:	9320      	str	r3, [sp, #128]	@ 0x80
 801ef54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef56:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ef58:	3b01      	subs	r3, #1
 801ef5a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ef5c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ef5e:	bf08      	it	eq
 801ef60:	4613      	moveq	r3, r2
 801ef62:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef64:	e696      	b.n	801ec94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ef66:	b149      	cbz	r1, 801ef7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ef68:	5caa      	ldrb	r2, [r5, r2]
 801ef6a:	4670      	mov	r0, lr
 801ef6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef70:	4422      	add	r2, r4
 801ef72:	4677      	mov	r7, lr
 801ef74:	e6fb      	b.n	801ed6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ef76:	4670      	mov	r0, lr
 801ef78:	4672      	mov	r2, lr
 801ef7a:	e6f8      	b.n	801ed6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ef7c:	4670      	mov	r0, lr
 801ef7e:	4672      	mov	r2, lr
 801ef80:	e7f7      	b.n	801ef72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ef82:	f110 0c01 	adds.w	ip, r0, #1
 801ef86:	f53f af6a 	bmi.w	801ee5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ef8a:	4562      	cmp	r2, ip
 801ef8c:	f6ff af67 	blt.w	801ee5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ef90:	f115 0c01 	adds.w	ip, r5, #1
 801ef94:	f53f af63 	bmi.w	801ee5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ef98:	4567      	cmp	r7, ip
 801ef9a:	f6ff af60 	blt.w	801ee5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ef9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efa0:	b23f      	sxth	r7, r7
 801efa2:	b212      	sxth	r2, r2
 801efa4:	9002      	str	r0, [sp, #8]
 801efa6:	9701      	str	r7, [sp, #4]
 801efa8:	9200      	str	r2, [sp, #0]
 801efaa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801efac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801efae:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801efb2:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801efb6:	4623      	mov	r3, r4
 801efb8:	4631      	mov	r1, r6
 801efba:	f7ff fd69 	bl	801ea90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801efbe:	e74e      	b.n	801ee5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801efc0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801efc2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801efc4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801efc8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801efca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801efcc:	1400      	asrs	r0, r0, #16
 801efce:	142d      	asrs	r5, r5, #16
 801efd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801efd2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801efd6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801efda:	fb02 5000 	mla	r0, r2, r0, r5
 801efde:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801efe0:	f815 e000 	ldrb.w	lr, [r5, r0]
 801efe4:	eb05 0c00 	add.w	ip, r5, r0
 801efe8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801efec:	eb04 060e 	add.w	r6, r4, lr
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	f000 8097 	beq.w	801f124 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801eff6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801effa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801effe:	4425      	add	r5, r4
 801f000:	2900      	cmp	r1, #0
 801f002:	f000 8098 	beq.w	801f136 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801f006:	eb0c 0002 	add.w	r0, ip, r2
 801f00a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f00e:	7840      	ldrb	r0, [r0, #1]
 801f010:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f014:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f018:	4422      	add	r2, r4
 801f01a:	4420      	add	r0, r4
 801f01c:	b29b      	uxth	r3, r3
 801f01e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f022:	b289      	uxth	r1, r1
 801f024:	f895 e000 	ldrb.w	lr, [r5]
 801f028:	3703      	adds	r7, #3
 801f02a:	f109 39ff 	add.w	r9, r9, #4294967295
 801f02e:	fb03 f801 	mul.w	r8, r3, r1
 801f032:	011b      	lsls	r3, r3, #4
 801f034:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f038:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801f03c:	eba3 0308 	sub.w	r3, r3, r8
 801f040:	b289      	uxth	r1, r1
 801f042:	b29b      	uxth	r3, r3
 801f044:	ebac 0c01 	sub.w	ip, ip, r1
 801f048:	fb03 fe0e 	mul.w	lr, r3, lr
 801f04c:	fa1f fc8c 	uxth.w	ip, ip
 801f050:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f054:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f058:	f892 b000 	ldrb.w	fp, [r2]
 801f05c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f060:	f890 b000 	ldrb.w	fp, [r0]
 801f064:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f068:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801f06c:	fb1b fb03 	smulbb	fp, fp, r3
 801f070:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f076:	fb0e be0a 	mla	lr, lr, sl, fp
 801f07a:	fa1f fe8e 	uxth.w	lr, lr
 801f07e:	f10e 0b01 	add.w	fp, lr, #1
 801f082:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f086:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f08a:	f807 ec06 	strb.w	lr, [r7, #-6]
 801f08e:	f895 e001 	ldrb.w	lr, [r5, #1]
 801f092:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f096:	fb03 fe0e 	mul.w	lr, r3, lr
 801f09a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f09c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f0a0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f0a4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f0a8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f0ac:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f0b0:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801f0b4:	fb1b fb03 	smulbb	fp, fp, r3
 801f0b8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f0be:	fb0e be0a 	mla	lr, lr, sl, fp
 801f0c2:	fa1f fe8e 	uxth.w	lr, lr
 801f0c6:	f10e 0b01 	add.w	fp, lr, #1
 801f0ca:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f0ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0d2:	f807 ec05 	strb.w	lr, [r7, #-5]
 801f0d6:	78ad      	ldrb	r5, [r5, #2]
 801f0d8:	78b6      	ldrb	r6, [r6, #2]
 801f0da:	436b      	muls	r3, r5
 801f0dc:	7895      	ldrb	r5, [r2, #2]
 801f0de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f0e0:	fb0c 3306 	mla	r3, ip, r6, r3
 801f0e4:	fb01 3305 	mla	r3, r1, r5, r3
 801f0e8:	7885      	ldrb	r5, [r0, #2]
 801f0ea:	fb08 3805 	mla	r8, r8, r5, r3
 801f0ee:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801f0f2:	fb13 f302 	smulbb	r3, r3, r2
 801f0f6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f0fa:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f0fc:	fb08 380a 	mla	r8, r8, sl, r3
 801f100:	fa1f f888 	uxth.w	r8, r8
 801f104:	f108 0301 	add.w	r3, r8, #1
 801f108:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801f10c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f10e:	4413      	add	r3, r2
 801f110:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f112:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f116:	931d      	str	r3, [sp, #116]	@ 0x74
 801f118:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f11a:	f807 8c04 	strb.w	r8, [r7, #-4]
 801f11e:	4413      	add	r3, r2
 801f120:	931e      	str	r3, [sp, #120]	@ 0x78
 801f122:	e6d6      	b.n	801eed2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f124:	b151      	cbz	r1, 801f13c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801f126:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f12a:	4630      	mov	r0, r6
 801f12c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f130:	4422      	add	r2, r4
 801f132:	4635      	mov	r5, r6
 801f134:	e772      	b.n	801f01c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801f136:	4630      	mov	r0, r6
 801f138:	4632      	mov	r2, r6
 801f13a:	e76f      	b.n	801f01c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801f13c:	4630      	mov	r0, r6
 801f13e:	4632      	mov	r2, r6
 801f140:	e7f7      	b.n	801f132 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801f142:	b013      	add	sp, #76	@ 0x4c
 801f144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f148 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801f148:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f14c:	784c      	ldrb	r4, [r1, #1]
 801f14e:	f891 a002 	ldrb.w	sl, [r1, #2]
 801f152:	0224      	lsls	r4, r4, #8
 801f154:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801f158:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801f15c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801f160:	f891 a000 	ldrb.w	sl, [r1]
 801f164:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801f168:	ea44 040a 	orr.w	r4, r4, sl
 801f16c:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801f170:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801f174:	9401      	str	r4, [sp, #4]
 801f176:	fb05 c70e 	mla	r7, r5, lr, ip
 801f17a:	2d00      	cmp	r5, #0
 801f17c:	eb02 0807 	add.w	r8, r2, r7
 801f180:	db72      	blt.n	801f268 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801f182:	45a9      	cmp	r9, r5
 801f184:	dd70      	ble.n	801f268 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801f186:	f1bc 0f00 	cmp.w	ip, #0
 801f18a:	db6b      	blt.n	801f264 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801f18c:	45e6      	cmp	lr, ip
 801f18e:	dd69      	ble.n	801f264 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801f190:	5dd7      	ldrb	r7, [r2, r7]
 801f192:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f196:	441f      	add	r7, r3
 801f198:	f11c 0201 	adds.w	r2, ip, #1
 801f19c:	d467      	bmi.n	801f26e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f19e:	4596      	cmp	lr, r2
 801f1a0:	dd65      	ble.n	801f26e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f1a2:	2800      	cmp	r0, #0
 801f1a4:	d063      	beq.n	801f26e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801f1a6:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f1aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f1ae:	441c      	add	r4, r3
 801f1b0:	3501      	adds	r5, #1
 801f1b2:	d460      	bmi.n	801f276 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f1b4:	45a9      	cmp	r9, r5
 801f1b6:	dd5e      	ble.n	801f276 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f1b8:	2e00      	cmp	r6, #0
 801f1ba:	d05c      	beq.n	801f276 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801f1bc:	f1bc 0f00 	cmp.w	ip, #0
 801f1c0:	db57      	blt.n	801f272 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801f1c2:	45e6      	cmp	lr, ip
 801f1c4:	dd55      	ble.n	801f272 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801f1c6:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f1ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f1ce:	441d      	add	r5, r3
 801f1d0:	f11c 0201 	adds.w	r2, ip, #1
 801f1d4:	d452      	bmi.n	801f27c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f1d6:	4596      	cmp	lr, r2
 801f1d8:	dd50      	ble.n	801f27c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f1da:	2800      	cmp	r0, #0
 801f1dc:	d04e      	beq.n	801f27c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801f1de:	44c6      	add	lr, r8
 801f1e0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f1e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1e8:	4413      	add	r3, r2
 801f1ea:	b280      	uxth	r0, r0
 801f1ec:	f897 8000 	ldrb.w	r8, [r7]
 801f1f0:	b2b2      	uxth	r2, r6
 801f1f2:	fb00 f602 	mul.w	r6, r0, r2
 801f1f6:	0100      	lsls	r0, r0, #4
 801f1f8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801f1fc:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801f200:	1b80      	subs	r0, r0, r6
 801f202:	fa1f fc82 	uxth.w	ip, r2
 801f206:	b282      	uxth	r2, r0
 801f208:	7820      	ldrb	r0, [r4, #0]
 801f20a:	ebae 0e0c 	sub.w	lr, lr, ip
 801f20e:	4350      	muls	r0, r2
 801f210:	fa1f fe8e 	uxth.w	lr, lr
 801f214:	fb0e 0808 	mla	r8, lr, r8, r0
 801f218:	7828      	ldrb	r0, [r5, #0]
 801f21a:	fb0c 8800 	mla	r8, ip, r0, r8
 801f21e:	7818      	ldrb	r0, [r3, #0]
 801f220:	fb06 8000 	mla	r0, r6, r0, r8
 801f224:	1200      	asrs	r0, r0, #8
 801f226:	7008      	strb	r0, [r1, #0]
 801f228:	7860      	ldrb	r0, [r4, #1]
 801f22a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f22e:	4350      	muls	r0, r2
 801f230:	fb0e 0808 	mla	r8, lr, r8, r0
 801f234:	7868      	ldrb	r0, [r5, #1]
 801f236:	fb0c 8800 	mla	r8, ip, r0, r8
 801f23a:	7858      	ldrb	r0, [r3, #1]
 801f23c:	fb06 8000 	mla	r0, r6, r0, r8
 801f240:	1200      	asrs	r0, r0, #8
 801f242:	7048      	strb	r0, [r1, #1]
 801f244:	78a0      	ldrb	r0, [r4, #2]
 801f246:	78bf      	ldrb	r7, [r7, #2]
 801f248:	4350      	muls	r0, r2
 801f24a:	78aa      	ldrb	r2, [r5, #2]
 801f24c:	fb0e 0007 	mla	r0, lr, r7, r0
 801f250:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f254:	789a      	ldrb	r2, [r3, #2]
 801f256:	fb06 c202 	mla	r2, r6, r2, ip
 801f25a:	1212      	asrs	r2, r2, #8
 801f25c:	708a      	strb	r2, [r1, #2]
 801f25e:	b002      	add	sp, #8
 801f260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f264:	af01      	add	r7, sp, #4
 801f266:	e797      	b.n	801f198 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801f268:	ac01      	add	r4, sp, #4
 801f26a:	4627      	mov	r7, r4
 801f26c:	e7a0      	b.n	801f1b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f26e:	ac01      	add	r4, sp, #4
 801f270:	e79e      	b.n	801f1b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801f272:	ad01      	add	r5, sp, #4
 801f274:	e7ac      	b.n	801f1d0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801f276:	ab01      	add	r3, sp, #4
 801f278:	461d      	mov	r5, r3
 801f27a:	e7b6      	b.n	801f1ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801f27c:	ab01      	add	r3, sp, #4
 801f27e:	e7b4      	b.n	801f1ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801f280 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f284:	b08d      	sub	sp, #52	@ 0x34
 801f286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f28a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801f28e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f290:	900b      	str	r0, [sp, #44]	@ 0x2c
 801f292:	9306      	str	r3, [sp, #24]
 801f294:	6850      	ldr	r0, [r2, #4]
 801f296:	6812      	ldr	r2, [r2, #0]
 801f298:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801f29a:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801f29e:	fb00 1303 	mla	r3, r0, r3, r1
 801f2a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f2a6:	18d3      	adds	r3, r2, r3
 801f2a8:	9307      	str	r3, [sp, #28]
 801f2aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	9308      	str	r3, [sp, #32]
 801f2b0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f2b2:	685d      	ldr	r5, [r3, #4]
 801f2b4:	3504      	adds	r5, #4
 801f2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	dc03      	bgt.n	801f2c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f2bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f2be:	2b00      	cmp	r3, #0
 801f2c0:	f340 81e6 	ble.w	801f690 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f2c4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f2c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f2ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f2ce:	1e48      	subs	r0, r1, #1
 801f2d0:	1e56      	subs	r6, r2, #1
 801f2d2:	9b06      	ldr	r3, [sp, #24]
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	f340 80bd 	ble.w	801f454 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f2da:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f2dc:	1427      	asrs	r7, r4, #16
 801f2de:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f2e2:	d406      	bmi.n	801f2f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f2e4:	4287      	cmp	r7, r0
 801f2e6:	da04      	bge.n	801f2f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	db02      	blt.n	801f2f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f2ec:	42b3      	cmp	r3, r6
 801f2ee:	f2c0 80b2 	blt.w	801f456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801f2f2:	3701      	adds	r7, #1
 801f2f4:	f100 80a1 	bmi.w	801f43a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f2f8:	42b9      	cmp	r1, r7
 801f2fa:	f2c0 809e 	blt.w	801f43a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f2fe:	3301      	adds	r3, #1
 801f300:	f100 809b 	bmi.w	801f43a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f304:	429a      	cmp	r2, r3
 801f306:	f2c0 8098 	blt.w	801f43a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f30a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801f30e:	f1bb 0f00 	cmp.w	fp, #0
 801f312:	f340 80bf 	ble.w	801f494 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f316:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f318:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f31a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f31c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f320:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801f324:	1420      	asrs	r0, r4, #16
 801f326:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f328:	ea4f 4723 	mov.w	r7, r3, asr #16
 801f32c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f330:	6892      	ldr	r2, [r2, #8]
 801f332:	f100 8103 	bmi.w	801f53c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f336:	f102 3eff 	add.w	lr, r2, #4294967295
 801f33a:	4570      	cmp	r0, lr
 801f33c:	f280 80fe 	bge.w	801f53c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f340:	2f00      	cmp	r7, #0
 801f342:	f2c0 80fb 	blt.w	801f53c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f346:	f10c 3eff 	add.w	lr, ip, #4294967295
 801f34a:	4577      	cmp	r7, lr
 801f34c:	f280 80f6 	bge.w	801f53c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801f350:	b212      	sxth	r2, r2
 801f352:	fb07 0002 	mla	r0, r7, r2, r0
 801f356:	9f08      	ldr	r7, [sp, #32]
 801f358:	f817 8000 	ldrb.w	r8, [r7, r0]
 801f35c:	eb07 0e00 	add.w	lr, r7, r0
 801f360:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f364:	eb05 0c08 	add.w	ip, r5, r8
 801f368:	2b00      	cmp	r3, #0
 801f36a:	f000 80d8 	beq.w	801f51e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801f36e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801f372:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f376:	442f      	add	r7, r5
 801f378:	2900      	cmp	r1, #0
 801f37a:	f000 80d9 	beq.w	801f530 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f37e:	eb0e 0002 	add.w	r0, lr, r2
 801f382:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f386:	7840      	ldrb	r0, [r0, #1]
 801f388:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f38c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f390:	442a      	add	r2, r5
 801f392:	4428      	add	r0, r5
 801f394:	b29b      	uxth	r3, r3
 801f396:	f815 a008 	ldrb.w	sl, [r5, r8]
 801f39a:	b289      	uxth	r1, r1
 801f39c:	f897 8000 	ldrb.w	r8, [r7]
 801f3a0:	fb03 f901 	mul.w	r9, r3, r1
 801f3a4:	011b      	lsls	r3, r3, #4
 801f3a6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f3aa:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801f3ae:	eba3 0309 	sub.w	r3, r3, r9
 801f3b2:	b289      	uxth	r1, r1
 801f3b4:	b29b      	uxth	r3, r3
 801f3b6:	ebae 0e01 	sub.w	lr, lr, r1
 801f3ba:	fb03 f808 	mul.w	r8, r3, r8
 801f3be:	fa1f fe8e 	uxth.w	lr, lr
 801f3c2:	fb0e 880a 	mla	r8, lr, sl, r8
 801f3c6:	f892 a000 	ldrb.w	sl, [r2]
 801f3ca:	fb01 880a 	mla	r8, r1, sl, r8
 801f3ce:	f890 a000 	ldrb.w	sl, [r0]
 801f3d2:	fb09 880a 	mla	r8, r9, sl, r8
 801f3d6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f3da:	f886 8000 	strb.w	r8, [r6]
 801f3de:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f3e2:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f3e6:	fb03 f808 	mul.w	r8, r3, r8
 801f3ea:	fb0e 880a 	mla	r8, lr, sl, r8
 801f3ee:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f3f2:	fb01 880a 	mla	r8, r1, sl, r8
 801f3f6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f3fa:	fb09 880a 	mla	r8, r9, sl, r8
 801f3fe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f402:	f886 8001 	strb.w	r8, [r6, #1]
 801f406:	78bf      	ldrb	r7, [r7, #2]
 801f408:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f40c:	437b      	muls	r3, r7
 801f40e:	7892      	ldrb	r2, [r2, #2]
 801f410:	fb0e 330c 	mla	r3, lr, ip, r3
 801f414:	fb01 3102 	mla	r1, r1, r2, r3
 801f418:	7882      	ldrb	r2, [r0, #2]
 801f41a:	fb09 1902 	mla	r9, r9, r2, r1
 801f41e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f422:	f886 9002 	strb.w	r9, [r6, #2]
 801f426:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f428:	3603      	adds	r6, #3
 801f42a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f42c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f430:	441c      	add	r4, r3
 801f432:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f434:	4413      	add	r3, r2
 801f436:	9318      	str	r3, [sp, #96]	@ 0x60
 801f438:	e769      	b.n	801f30e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f43a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f43c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801f43e:	441c      	add	r4, r3
 801f440:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f442:	443b      	add	r3, r7
 801f444:	9318      	str	r3, [sp, #96]	@ 0x60
 801f446:	9b06      	ldr	r3, [sp, #24]
 801f448:	3b01      	subs	r3, #1
 801f44a:	9306      	str	r3, [sp, #24]
 801f44c:	9b07      	ldr	r3, [sp, #28]
 801f44e:	3303      	adds	r3, #3
 801f450:	9307      	str	r3, [sp, #28]
 801f452:	e73e      	b.n	801f2d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f454:	d026      	beq.n	801f4a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f456:	9b06      	ldr	r3, [sp, #24]
 801f458:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f45a:	3b01      	subs	r3, #1
 801f45c:	fb00 4003 	mla	r0, r0, r3, r4
 801f460:	1400      	asrs	r0, r0, #16
 801f462:	f53f af52 	bmi.w	801f30a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f466:	3901      	subs	r1, #1
 801f468:	4288      	cmp	r0, r1
 801f46a:	f6bf af4e 	bge.w	801f30a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f46e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f470:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801f472:	fb01 0303 	mla	r3, r1, r3, r0
 801f476:	141b      	asrs	r3, r3, #16
 801f478:	f53f af47 	bmi.w	801f30a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f47c:	3a01      	subs	r2, #1
 801f47e:	4293      	cmp	r3, r2
 801f480:	f6bf af43 	bge.w	801f30a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f484:	9b07      	ldr	r3, [sp, #28]
 801f486:	f8dd a018 	ldr.w	sl, [sp, #24]
 801f48a:	f103 0803 	add.w	r8, r3, #3
 801f48e:	f1ba 0f00 	cmp.w	sl, #0
 801f492:	dc71      	bgt.n	801f578 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f494:	9b06      	ldr	r3, [sp, #24]
 801f496:	9a07      	ldr	r2, [sp, #28]
 801f498:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f49c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4a0:	441a      	add	r2, r3
 801f4a2:	9207      	str	r2, [sp, #28]
 801f4a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	f340 80f2 	ble.w	801f690 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f4ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f4b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4b6:	eeb0 6a62 	vmov.f32	s12, s5
 801f4ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f4be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f4c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f4c6:	ee16 4a10 	vmov	r4, s12
 801f4ca:	eeb0 6a43 	vmov.f32	s12, s6
 801f4ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f4d2:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801f4d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f4da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f4de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f4e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f4e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f4ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f4ee:	ee12 2a90 	vmov	r2, s5
 801f4f2:	eef0 2a47 	vmov.f32	s5, s14
 801f4f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4fa:	ee13 2a10 	vmov	r2, s6
 801f4fe:	9319      	str	r3, [sp, #100]	@ 0x64
 801f500:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f502:	eeb0 3a67 	vmov.f32	s6, s15
 801f506:	fb92 f3f3 	sdiv	r3, r2, r3
 801f50a:	931a      	str	r3, [sp, #104]	@ 0x68
 801f50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f50e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f510:	3b01      	subs	r3, #1
 801f512:	9309      	str	r3, [sp, #36]	@ 0x24
 801f514:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f516:	bf08      	it	eq
 801f518:	4613      	moveq	r3, r2
 801f51a:	9306      	str	r3, [sp, #24]
 801f51c:	e6cb      	b.n	801f2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f51e:	b151      	cbz	r1, 801f536 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f520:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f524:	4660      	mov	r0, ip
 801f526:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f52a:	442a      	add	r2, r5
 801f52c:	4667      	mov	r7, ip
 801f52e:	e731      	b.n	801f394 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f530:	4660      	mov	r0, ip
 801f532:	4662      	mov	r2, ip
 801f534:	e72e      	b.n	801f394 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f536:	4660      	mov	r0, ip
 801f538:	4662      	mov	r2, ip
 801f53a:	e7f7      	b.n	801f52c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f53c:	f110 0e01 	adds.w	lr, r0, #1
 801f540:	f53f af71 	bmi.w	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f544:	4572      	cmp	r2, lr
 801f546:	f6ff af6e 	blt.w	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f54a:	f117 0e01 	adds.w	lr, r7, #1
 801f54e:	f53f af6a 	bmi.w	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f552:	45f4      	cmp	ip, lr
 801f554:	f6ff af67 	blt.w	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f558:	b212      	sxth	r2, r2
 801f55a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f55e:	fa0f f38c 	sxth.w	r3, ip
 801f562:	9200      	str	r2, [sp, #0]
 801f564:	4631      	mov	r1, r6
 801f566:	9a08      	ldr	r2, [sp, #32]
 801f568:	9301      	str	r3, [sp, #4]
 801f56a:	462b      	mov	r3, r5
 801f56c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801f570:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f572:	f7ff fde9 	bl	801f148 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f576:	e756      	b.n	801f426 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f578:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f57a:	1426      	asrs	r6, r4, #16
 801f57c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801f57e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f582:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f586:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f588:	1400      	asrs	r0, r0, #16
 801f58a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f58e:	fb02 6000 	mla	r0, r2, r0, r6
 801f592:	9e08      	ldr	r6, [sp, #32]
 801f594:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f598:	eb06 0c00 	add.w	ip, r6, r0
 801f59c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f5a0:	eb05 070e 	add.w	r7, r5, lr
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	d064      	beq.n	801f672 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801f5a8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801f5ac:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f5b0:	442e      	add	r6, r5
 801f5b2:	2900      	cmp	r1, #0
 801f5b4:	d066      	beq.n	801f684 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801f5b6:	eb0c 0002 	add.w	r0, ip, r2
 801f5ba:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f5be:	7840      	ldrb	r0, [r0, #1]
 801f5c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f5c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f5c8:	442a      	add	r2, r5
 801f5ca:	4428      	add	r0, r5
 801f5cc:	b29b      	uxth	r3, r3
 801f5ce:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801f5d2:	b289      	uxth	r1, r1
 801f5d4:	f896 e000 	ldrb.w	lr, [r6]
 801f5d8:	f108 0803 	add.w	r8, r8, #3
 801f5dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f5e0:	fb03 f901 	mul.w	r9, r3, r1
 801f5e4:	011b      	lsls	r3, r3, #4
 801f5e6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f5ea:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801f5ee:	eba3 0309 	sub.w	r3, r3, r9
 801f5f2:	b289      	uxth	r1, r1
 801f5f4:	b29b      	uxth	r3, r3
 801f5f6:	ebac 0c01 	sub.w	ip, ip, r1
 801f5fa:	fb03 fe0e 	mul.w	lr, r3, lr
 801f5fe:	fa1f fc8c 	uxth.w	ip, ip
 801f602:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f606:	f892 b000 	ldrb.w	fp, [r2]
 801f60a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f60e:	f890 b000 	ldrb.w	fp, [r0]
 801f612:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f616:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f61a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f61e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f622:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f626:	fb03 fe0e 	mul.w	lr, r3, lr
 801f62a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f62e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f632:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f636:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f63a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f63e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f642:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f646:	78b6      	ldrb	r6, [r6, #2]
 801f648:	78bf      	ldrb	r7, [r7, #2]
 801f64a:	4373      	muls	r3, r6
 801f64c:	7896      	ldrb	r6, [r2, #2]
 801f64e:	7882      	ldrb	r2, [r0, #2]
 801f650:	fb0c 3307 	mla	r3, ip, r7, r3
 801f654:	fb01 3306 	mla	r3, r1, r6, r3
 801f658:	fb09 3902 	mla	r9, r9, r2, r3
 801f65c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f65e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f660:	441c      	add	r4, r3
 801f662:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f664:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f668:	4413      	add	r3, r2
 801f66a:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f66e:	9318      	str	r3, [sp, #96]	@ 0x60
 801f670:	e70d      	b.n	801f48e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801f672:	b151      	cbz	r1, 801f68a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801f674:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f678:	4638      	mov	r0, r7
 801f67a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f67e:	442a      	add	r2, r5
 801f680:	463e      	mov	r6, r7
 801f682:	e7a3      	b.n	801f5cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f684:	4638      	mov	r0, r7
 801f686:	463a      	mov	r2, r7
 801f688:	e7a0      	b.n	801f5cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f68a:	4638      	mov	r0, r7
 801f68c:	463a      	mov	r2, r7
 801f68e:	e7f7      	b.n	801f680 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801f690:	b00d      	add	sp, #52	@ 0x34
 801f692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f696 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f696:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f69a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801f69e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801f6a2:	2d00      	cmp	r5, #0
 801f6a4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801f6a8:	fb05 700c 	mla	r0, r5, ip, r7
 801f6ac:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801f6b0:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801f6b4:	eb02 0800 	add.w	r8, r2, r0
 801f6b8:	f2c0 8118 	blt.w	801f8ec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801f6bc:	45a9      	cmp	r9, r5
 801f6be:	f340 8115 	ble.w	801f8ec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801f6c2:	2f00      	cmp	r7, #0
 801f6c4:	f2c0 8110 	blt.w	801f8e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801f6c8:	45bc      	cmp	ip, r7
 801f6ca:	f340 810d 	ble.w	801f8e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801f6ce:	5c12      	ldrb	r2, [r2, r0]
 801f6d0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f6d4:	1c7a      	adds	r2, r7, #1
 801f6d6:	f100 810c 	bmi.w	801f8f2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801f6da:	4594      	cmp	ip, r2
 801f6dc:	f340 8109 	ble.w	801f8f2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801f6e0:	2c00      	cmp	r4, #0
 801f6e2:	f000 8108 	beq.w	801f8f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801f6e6:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f6ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f6ee:	3501      	adds	r5, #1
 801f6f0:	f100 8105 	bmi.w	801f8fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801f6f4:	45a9      	cmp	r9, r5
 801f6f6:	f340 8102 	ble.w	801f8fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801f6fa:	f1be 0f00 	cmp.w	lr, #0
 801f6fe:	f000 8101 	beq.w	801f904 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801f702:	2f00      	cmp	r7, #0
 801f704:	f2c0 80f9 	blt.w	801f8fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801f708:	45bc      	cmp	ip, r7
 801f70a:	f340 80f6 	ble.w	801f8fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801f70e:	f818 200c 	ldrb.w	r2, [r8, ip]
 801f712:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f716:	3701      	adds	r7, #1
 801f718:	f100 80f7 	bmi.w	801f90a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801f71c:	45bc      	cmp	ip, r7
 801f71e:	f340 80f4 	ble.w	801f90a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801f722:	2c00      	cmp	r4, #0
 801f724:	f000 80f3 	beq.w	801f90e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801f728:	44c4      	add	ip, r8
 801f72a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f72e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f732:	fa1f fc84 	uxth.w	ip, r4
 801f736:	fa1f f48e 	uxth.w	r4, lr
 801f73a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f73e:	fb04 fe0c 	mul.w	lr, r4, ip
 801f742:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f746:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f74a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801f74e:	ebac 070e 	sub.w	r7, ip, lr
 801f752:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801f756:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f75a:	b2a4      	uxth	r4, r4
 801f75c:	b2bf      	uxth	r7, r7
 801f75e:	1b1b      	subs	r3, r3, r4
 801f760:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f764:	fb07 fc0a 	mul.w	ip, r7, sl
 801f768:	b29b      	uxth	r3, r3
 801f76a:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f76e:	9300      	str	r3, [sp, #0]
 801f770:	fb04 cc09 	mla	ip, r4, r9, ip
 801f774:	fb0e cc08 	mla	ip, lr, r8, ip
 801f778:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f77c:	9301      	str	r3, [sp, #4]
 801f77e:	2b00      	cmp	r3, #0
 801f780:	f000 80af 	beq.w	801f8e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801f784:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801f788:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f78c:	fb0b fc0c 	mul.w	ip, fp, ip
 801f790:	fb0b f606 	mul.w	r6, fp, r6
 801f794:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f798:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f79c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801f7a0:	44dc      	add	ip, fp
 801f7a2:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801f7a6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f7aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7ae:	fb0a fb0b 	mul.w	fp, sl, fp
 801f7b2:	fb0a fa00 	mul.w	sl, sl, r0
 801f7b6:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801f7ba:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801f7be:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801f7c2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f7c6:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f7ca:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f7ce:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801f7d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f7d6:	0a36      	lsrs	r6, r6, #8
 801f7d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7dc:	44dc      	add	ip, fp
 801f7de:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801f7e2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f7e6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f7ea:	fb09 fb0b 	mul.w	fp, r9, fp
 801f7ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7f2:	fb09 f905 	mul.w	r9, r9, r5
 801f7f6:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801f7fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f7fe:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801f802:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f806:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f80a:	fb0c fc07 	mul.w	ip, ip, r7
 801f80e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f812:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801f816:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f81a:	4458      	add	r0, fp
 801f81c:	fb08 f505 	mul.w	r5, r8, r5
 801f820:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f824:	fb08 f802 	mul.w	r8, r8, r2
 801f828:	0a00      	lsrs	r0, r0, #8
 801f82a:	0a2a      	lsrs	r2, r5, #8
 801f82c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801f830:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f834:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f838:	4415      	add	r5, r2
 801f83a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801f83e:	0a2d      	lsrs	r5, r5, #8
 801f840:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f844:	9a00      	ldr	r2, [sp, #0]
 801f846:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801f84a:	fb03 cc02 	mla	ip, r3, r2, ip
 801f84e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f852:	9b01      	ldr	r3, [sp, #4]
 801f854:	fb05 c50e 	mla	r5, r5, lr, ip
 801f858:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801f85c:	fb00 5004 	mla	r0, r0, r4, r5
 801f860:	0a00      	lsrs	r0, r0, #8
 801f862:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801f866:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801f86a:	4378      	muls	r0, r7
 801f86c:	fb02 0006 	mla	r0, r2, r6, r0
 801f870:	fb0e 0e08 	mla	lr, lr, r8, r0
 801f874:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801f878:	fb04 e000 	mla	r0, r4, r0, lr
 801f87c:	0a00      	lsrs	r0, r0, #8
 801f87e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f882:	4328      	orrs	r0, r5
 801f884:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801f888:	b2ad      	uxth	r5, r5
 801f88a:	b2c4      	uxtb	r4, r0
 801f88c:	436b      	muls	r3, r5
 801f88e:	fb14 f405 	smulbb	r4, r4, r5
 801f892:	1c5a      	adds	r2, r3, #1
 801f894:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f898:	780b      	ldrb	r3, [r1, #0]
 801f89a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801f89e:	b2d2      	uxtb	r2, r2
 801f8a0:	fb03 4302 	mla	r3, r3, r2, r4
 801f8a4:	b29b      	uxth	r3, r3
 801f8a6:	1c5c      	adds	r4, r3, #1
 801f8a8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f8ac:	784c      	ldrb	r4, [r1, #1]
 801f8ae:	fb14 f402 	smulbb	r4, r4, r2
 801f8b2:	121b      	asrs	r3, r3, #8
 801f8b4:	700b      	strb	r3, [r1, #0]
 801f8b6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801f8ba:	fb03 4305 	mla	r3, r3, r5, r4
 801f8be:	b29b      	uxth	r3, r3
 801f8c0:	1c5c      	adds	r4, r3, #1
 801f8c2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f8c6:	0c04      	lsrs	r4, r0, #16
 801f8c8:	7888      	ldrb	r0, [r1, #2]
 801f8ca:	121b      	asrs	r3, r3, #8
 801f8cc:	fb10 f002 	smulbb	r0, r0, r2
 801f8d0:	704b      	strb	r3, [r1, #1]
 801f8d2:	fb04 0005 	mla	r0, r4, r5, r0
 801f8d6:	b280      	uxth	r0, r0
 801f8d8:	1c43      	adds	r3, r0, #1
 801f8da:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f8de:	1200      	asrs	r0, r0, #8
 801f8e0:	7088      	strb	r0, [r1, #2]
 801f8e2:	b003      	add	sp, #12
 801f8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8e8:	2600      	movs	r6, #0
 801f8ea:	e6f3      	b.n	801f6d4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801f8ec:	2000      	movs	r0, #0
 801f8ee:	4606      	mov	r6, r0
 801f8f0:	e6fd      	b.n	801f6ee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f8f2:	2000      	movs	r0, #0
 801f8f4:	e6fb      	b.n	801f6ee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f8f6:	4620      	mov	r0, r4
 801f8f8:	e6f9      	b.n	801f6ee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f8fa:	2500      	movs	r5, #0
 801f8fc:	e70b      	b.n	801f716 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801f8fe:	2200      	movs	r2, #0
 801f900:	4615      	mov	r5, r2
 801f902:	e716      	b.n	801f732 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f904:	4672      	mov	r2, lr
 801f906:	4675      	mov	r5, lr
 801f908:	e713      	b.n	801f732 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f90a:	2200      	movs	r2, #0
 801f90c:	e711      	b.n	801f732 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f90e:	4622      	mov	r2, r4
 801f910:	e70f      	b.n	801f732 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801f912 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f916:	b09f      	sub	sp, #124	@ 0x7c
 801f918:	921b      	str	r2, [sp, #108]	@ 0x6c
 801f91a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f91c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801f91e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801f922:	901d      	str	r0, [sp, #116]	@ 0x74
 801f924:	931c      	str	r3, [sp, #112]	@ 0x70
 801f926:	6850      	ldr	r0, [r2, #4]
 801f928:	9119      	str	r1, [sp, #100]	@ 0x64
 801f92a:	6812      	ldr	r2, [r2, #0]
 801f92c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801f92e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801f932:	fb00 1303 	mla	r3, r0, r3, r1
 801f936:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f93a:	18d3      	adds	r3, r2, r3
 801f93c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f93e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f940:	681b      	ldr	r3, [r3, #0]
 801f942:	9312      	str	r3, [sp, #72]	@ 0x48
 801f944:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f946:	685e      	ldr	r6, [r3, #4]
 801f948:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801f94c:	3604      	adds	r6, #4
 801f94e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f950:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f952:	2b00      	cmp	r3, #0
 801f954:	dc03      	bgt.n	801f95e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f956:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f958:	2b00      	cmp	r3, #0
 801f95a:	f340 8378 	ble.w	802004e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f95e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f960:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f964:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f968:	1e48      	subs	r0, r1, #1
 801f96a:	1e57      	subs	r7, r2, #1
 801f96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f96e:	2b00      	cmp	r3, #0
 801f970:	f340 818c 	ble.w	801fc8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f974:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801f976:	142b      	asrs	r3, r5, #16
 801f978:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f97c:	d406      	bmi.n	801f98c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f97e:	4584      	cmp	ip, r0
 801f980:	da04      	bge.n	801f98c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f982:	2b00      	cmp	r3, #0
 801f984:	db02      	blt.n	801f98c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f986:	42bb      	cmp	r3, r7
 801f988:	f2c0 8181 	blt.w	801fc8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f98c:	f11c 0c01 	adds.w	ip, ip, #1
 801f990:	f100 816f 	bmi.w	801fc72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f994:	4561      	cmp	r1, ip
 801f996:	f2c0 816c 	blt.w	801fc72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f99a:	3301      	adds	r3, #1
 801f99c:	f100 8169 	bmi.w	801fc72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f9a0:	429a      	cmp	r2, r3
 801f9a2:	f2c0 8166 	blt.w	801fc72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9a8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f9aa:	931a      	str	r3, [sp, #104]	@ 0x68
 801f9ac:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	f340 818c 	ble.w	801fccc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f9b4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f9b6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f9ba:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f9be:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f9c2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f9c4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f9c8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f9ca:	141b      	asrs	r3, r3, #16
 801f9cc:	f100 81d0 	bmi.w	801fd70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f9d0:	f100 38ff 	add.w	r8, r0, #4294967295
 801f9d4:	4543      	cmp	r3, r8
 801f9d6:	f280 81cb 	bge.w	801fd70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f9da:	f1bc 0f00 	cmp.w	ip, #0
 801f9de:	f2c0 81c7 	blt.w	801fd70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f9e2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f9e6:	45c4      	cmp	ip, r8
 801f9e8:	f280 81c2 	bge.w	801fd70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f9ec:	b200      	sxth	r0, r0
 801f9ee:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f9f0:	fb0c 3300 	mla	r3, ip, r0, r3
 801f9f4:	eb04 0803 	add.w	r8, r4, r3
 801f9f8:	5ce3      	ldrb	r3, [r4, r3]
 801f9fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f9fe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fa02:	2a00      	cmp	r2, #0
 801fa04:	f000 81a9 	beq.w	801fd5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801fa08:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fa0c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801fa10:	940e      	str	r4, [sp, #56]	@ 0x38
 801fa12:	0e24      	lsrs	r4, r4, #24
 801fa14:	9415      	str	r4, [sp, #84]	@ 0x54
 801fa16:	b179      	cbz	r1, 801fa38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801fa18:	eb08 0c00 	add.w	ip, r8, r0
 801fa1c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fa20:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fa24:	900a      	str	r0, [sp, #40]	@ 0x28
 801fa26:	0e00      	lsrs	r0, r0, #24
 801fa28:	9013      	str	r0, [sp, #76]	@ 0x4c
 801fa2a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fa2e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fa32:	900f      	str	r0, [sp, #60]	@ 0x3c
 801fa34:	0e00      	lsrs	r0, r0, #24
 801fa36:	9016      	str	r0, [sp, #88]	@ 0x58
 801fa38:	b292      	uxth	r2, r2
 801fa3a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801fa3c:	b289      	uxth	r1, r1
 801fa3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fa40:	fb02 f901 	mul.w	r9, r2, r1
 801fa44:	0112      	lsls	r2, r2, #4
 801fa46:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fa4a:	eba2 0809 	sub.w	r8, r2, r9
 801fa4e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801fa52:	b289      	uxth	r1, r1
 801fa54:	fa1f f888 	uxth.w	r8, r8
 801fa58:	1a52      	subs	r2, r2, r1
 801fa5a:	fb08 f000 	mul.w	r0, r8, r0
 801fa5e:	b292      	uxth	r2, r2
 801fa60:	fb02 000e 	mla	r0, r2, lr, r0
 801fa64:	fb01 0004 	mla	r0, r1, r4, r0
 801fa68:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fa6a:	fb09 0004 	mla	r0, r9, r4, r0
 801fa6e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fa72:	2800      	cmp	r0, #0
 801fa74:	f000 80f2 	beq.w	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fa78:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801fa7c:	d01b      	beq.n	801fab6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fa7e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fa82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fa86:	fb0e fa0a 	mul.w	sl, lr, sl
 801fa8a:	fb0e fe03 	mul.w	lr, lr, r3
 801fa8e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fa92:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fa96:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801fa9a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fa9e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801faa2:	4453      	add	r3, sl
 801faa4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faa8:	0a1b      	lsrs	r3, r3, #8
 801faaa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801faae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fab2:	ea43 030c 	orr.w	r3, r3, ip
 801fab6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fab8:	2cff      	cmp	r4, #255	@ 0xff
 801faba:	d021      	beq.n	801fb00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801fabc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fabe:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fac2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fac4:	fb04 fb0b 	mul.w	fp, r4, fp
 801fac8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801faca:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801face:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fad0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fad4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fad8:	fb04 fa0a 	mul.w	sl, r4, sl
 801fadc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fae0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fae4:	44de      	add	lr, fp
 801fae6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801faea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801faee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801faf2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801faf6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fafa:	ea4e 040a 	orr.w	r4, lr, sl
 801fafe:	940e      	str	r4, [sp, #56]	@ 0x38
 801fb00:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fb02:	2cff      	cmp	r4, #255	@ 0xff
 801fb04:	d021      	beq.n	801fb4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801fb06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fb08:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb0c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fb0e:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fb14:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb18:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fb1a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb1e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb22:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb26:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb2a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb2e:	44de      	add	lr, fp
 801fb30:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb3c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb40:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb44:	ea4e 040a 	orr.w	r4, lr, sl
 801fb48:	940a      	str	r4, [sp, #40]	@ 0x28
 801fb4a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fb4c:	2cff      	cmp	r4, #255	@ 0xff
 801fb4e:	d021      	beq.n	801fb94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801fb50:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fb52:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb56:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fb58:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb5c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fb5e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb62:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fb64:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb68:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb6c:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb70:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb74:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb78:	44de      	add	lr, fp
 801fb7a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb86:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb8a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb8e:	ea4e 040a 	orr.w	r4, lr, sl
 801fb92:	940f      	str	r4, [sp, #60]	@ 0x3c
 801fb94:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fb96:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801fb9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fb9e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fba2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fba4:	fb08 fc0c 	mul.w	ip, r8, ip
 801fba8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fbac:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fbb0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fbb2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fbb6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fbba:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fbbc:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fbc0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fbc4:	fb08 f80e 	mul.w	r8, r8, lr
 801fbc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbcc:	fb02 8303 	mla	r3, r2, r3, r8
 801fbd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fbd2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fbd6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801fbda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fbdc:	fb01 330a 	mla	r3, r1, sl, r3
 801fbe0:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801fbe4:	fb09 3901 	mla	r9, r9, r1, r3
 801fbe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fbea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801fbec:	4343      	muls	r3, r0
 801fbee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fbf2:	1c58      	adds	r0, r3, #1
 801fbf4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801fbf8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fbfc:	ea4c 0c09 	orr.w	ip, ip, r9
 801fc00:	783b      	ldrb	r3, [r7, #0]
 801fc02:	fa5f f28c 	uxtb.w	r2, ip
 801fc06:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fc0a:	fb12 f201 	smulbb	r2, r2, r1
 801fc0e:	b2c0      	uxtb	r0, r0
 801fc10:	fb03 2300 	mla	r3, r3, r0, r2
 801fc14:	b29b      	uxth	r3, r3
 801fc16:	1c5a      	adds	r2, r3, #1
 801fc18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc1c:	787a      	ldrb	r2, [r7, #1]
 801fc1e:	fb12 f200 	smulbb	r2, r2, r0
 801fc22:	121b      	asrs	r3, r3, #8
 801fc24:	703b      	strb	r3, [r7, #0]
 801fc26:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fc2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fc2e:	fb03 2301 	mla	r3, r3, r1, r2
 801fc32:	b29b      	uxth	r3, r3
 801fc34:	1c5a      	adds	r2, r3, #1
 801fc36:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc3a:	121b      	asrs	r3, r3, #8
 801fc3c:	707b      	strb	r3, [r7, #1]
 801fc3e:	78bb      	ldrb	r3, [r7, #2]
 801fc40:	fb13 f000 	smulbb	r0, r3, r0
 801fc44:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fc48:	fa1f fc8c 	uxth.w	ip, ip
 801fc4c:	f10c 0301 	add.w	r3, ip, #1
 801fc50:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fc54:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fc58:	f887 c002 	strb.w	ip, [r7, #2]
 801fc5c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801fc5e:	3703      	adds	r7, #3
 801fc60:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801fc62:	441a      	add	r2, r3
 801fc64:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fc66:	441d      	add	r5, r3
 801fc68:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fc6a:	9229      	str	r2, [sp, #164]	@ 0xa4
 801fc6c:	3b01      	subs	r3, #1
 801fc6e:	931a      	str	r3, [sp, #104]	@ 0x68
 801fc70:	e69c      	b.n	801f9ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801fc72:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801fc74:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801fc76:	441c      	add	r4, r3
 801fc78:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fc7a:	441d      	add	r5, r3
 801fc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc7e:	9429      	str	r4, [sp, #164]	@ 0xa4
 801fc80:	3b01      	subs	r3, #1
 801fc82:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc86:	3303      	adds	r3, #3
 801fc88:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc8a:	e66f      	b.n	801f96c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fc8c:	d026      	beq.n	801fcdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801fc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc90:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801fc92:	3b01      	subs	r3, #1
 801fc94:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801fc96:	fb00 4003 	mla	r0, r0, r3, r4
 801fc9a:	1400      	asrs	r0, r0, #16
 801fc9c:	f53f ae83 	bmi.w	801f9a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fca0:	3901      	subs	r1, #1
 801fca2:	4288      	cmp	r0, r1
 801fca4:	f6bf ae7f 	bge.w	801f9a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fca8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801fcaa:	fb01 5303 	mla	r3, r1, r3, r5
 801fcae:	141b      	asrs	r3, r3, #16
 801fcb0:	f53f ae79 	bmi.w	801f9a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fcb4:	3a01      	subs	r2, #1
 801fcb6:	4293      	cmp	r3, r2
 801fcb8:	f6bf ae75 	bge.w	801f9a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fcbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fcbe:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801fcc2:	f103 0e03 	add.w	lr, r3, #3
 801fcc6:	f1bb 0f00 	cmp.w	fp, #0
 801fcca:	dc71      	bgt.n	801fdb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcce:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fcd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcd8:	4423      	add	r3, r4
 801fcda:	930c      	str	r3, [sp, #48]	@ 0x30
 801fcdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	f340 81b5 	ble.w	802004e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801fce4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fce8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fcea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcf2:	eef0 6a62 	vmov.f32	s13, s5
 801fcf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fcfa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fcfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd02:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801fd06:	eef0 6a43 	vmov.f32	s13, s6
 801fd0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd0e:	ee16 5a90 	vmov	r5, s13
 801fd12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd16:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd2a:	ee12 2a90 	vmov	r2, s5
 801fd2e:	eef0 2a47 	vmov.f32	s5, s14
 801fd32:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd36:	ee13 2a10 	vmov	r2, s6
 801fd3a:	932b      	str	r3, [sp, #172]	@ 0xac
 801fd3c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fd3e:	eeb0 3a67 	vmov.f32	s6, s15
 801fd42:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd46:	932c      	str	r3, [sp, #176]	@ 0xb0
 801fd48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fd4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801fd4c:	3b01      	subs	r3, #1
 801fd4e:	9319      	str	r3, [sp, #100]	@ 0x64
 801fd50:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801fd52:	bf08      	it	eq
 801fd54:	4613      	moveq	r3, r2
 801fd56:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd58:	e5fa      	b.n	801f950 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fd5a:	2900      	cmp	r1, #0
 801fd5c:	f43f ae6c 	beq.w	801fa38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801fd60:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fd64:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801fd68:	900a      	str	r0, [sp, #40]	@ 0x28
 801fd6a:	0e00      	lsrs	r0, r0, #24
 801fd6c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801fd6e:	e663      	b.n	801fa38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801fd70:	f113 0801 	adds.w	r8, r3, #1
 801fd74:	f53f af72 	bmi.w	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fd78:	4540      	cmp	r0, r8
 801fd7a:	f6ff af6f 	blt.w	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fd7e:	f11c 0801 	adds.w	r8, ip, #1
 801fd82:	f53f af6b 	bmi.w	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fd86:	45c6      	cmp	lr, r8
 801fd88:	f6ff af68 	blt.w	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fd8c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801fd8e:	b200      	sxth	r0, r0
 801fd90:	9302      	str	r3, [sp, #8]
 801fd92:	fa0f f38e 	sxth.w	r3, lr
 801fd96:	9000      	str	r0, [sp, #0]
 801fd98:	9301      	str	r3, [sp, #4]
 801fd9a:	4633      	mov	r3, r6
 801fd9c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801fd9e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801fda2:	e9cd c203 	strd	ip, r2, [sp, #12]
 801fda6:	4639      	mov	r1, r7
 801fda8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fdaa:	f7ff fc74 	bl	801f696 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801fdae:	e755      	b.n	801fc5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fdb0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fdb2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fdb6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801fdb8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fdbc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801fdbe:	1427      	asrs	r7, r4, #16
 801fdc0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fdc2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fdc6:	142b      	asrs	r3, r5, #16
 801fdc8:	fb01 7303 	mla	r3, r1, r3, r7
 801fdcc:	18e7      	adds	r7, r4, r3
 801fdce:	5ce3      	ldrb	r3, [r4, r3]
 801fdd0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fdd4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fdd8:	2a00      	cmp	r2, #0
 801fdda:	f000 812e 	beq.w	802003a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801fdde:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fde2:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801fde6:	9410      	str	r4, [sp, #64]	@ 0x40
 801fde8:	0e24      	lsrs	r4, r4, #24
 801fdea:	9417      	str	r4, [sp, #92]	@ 0x5c
 801fdec:	b170      	cbz	r0, 801fe0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801fdee:	eb07 0801 	add.w	r8, r7, r1
 801fdf2:	5c79      	ldrb	r1, [r7, r1]
 801fdf4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fdf8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fdfa:	0e09      	lsrs	r1, r1, #24
 801fdfc:	9114      	str	r1, [sp, #80]	@ 0x50
 801fdfe:	f898 1001 	ldrb.w	r1, [r8, #1]
 801fe02:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe06:	9111      	str	r1, [sp, #68]	@ 0x44
 801fe08:	0e09      	lsrs	r1, r1, #24
 801fe0a:	9118      	str	r1, [sp, #96]	@ 0x60
 801fe0c:	b292      	uxth	r2, r2
 801fe0e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801fe10:	b280      	uxth	r0, r0
 801fe12:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fe14:	fb02 f900 	mul.w	r9, r2, r0
 801fe18:	0112      	lsls	r2, r2, #4
 801fe1a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fe1e:	eba2 0809 	sub.w	r8, r2, r9
 801fe22:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801fe26:	b280      	uxth	r0, r0
 801fe28:	fa1f f888 	uxth.w	r8, r8
 801fe2c:	1a12      	subs	r2, r2, r0
 801fe2e:	fb08 f101 	mul.w	r1, r8, r1
 801fe32:	b292      	uxth	r2, r2
 801fe34:	fb02 110c 	mla	r1, r2, ip, r1
 801fe38:	fb00 1104 	mla	r1, r0, r4, r1
 801fe3c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801fe3e:	fb09 1104 	mla	r1, r9, r4, r1
 801fe42:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fe46:	2900      	cmp	r1, #0
 801fe48:	f000 80ec 	beq.w	8020024 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801fe4c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801fe50:	d019      	beq.n	801fe86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801fe52:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fe56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fe5a:	fb0c fa0a 	mul.w	sl, ip, sl
 801fe5e:	fb0c fc03 	mul.w	ip, ip, r3
 801fe62:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fe66:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fe6a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801fe6e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fe72:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fe76:	4453      	add	r3, sl
 801fe78:	0a3f      	lsrs	r7, r7, #8
 801fe7a:	0a1b      	lsrs	r3, r3, #8
 801fe7c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801fe80:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fe84:	433b      	orrs	r3, r7
 801fe86:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801fe88:	2cff      	cmp	r4, #255	@ 0xff
 801fe8a:	d020      	beq.n	801fece <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801fe8c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fe8e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fe92:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801fe94:	4367      	muls	r7, r4
 801fe96:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fe98:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fe9c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fea0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801fea2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fea6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801feaa:	fb04 fa0a 	mul.w	sl, r4, sl
 801feae:	44bc      	add	ip, r7
 801feb0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801feb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801feb8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801febc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fec0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fec4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fec8:	ea4c 040a 	orr.w	r4, ip, sl
 801fecc:	9410      	str	r4, [sp, #64]	@ 0x40
 801fece:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fed0:	2cff      	cmp	r4, #255	@ 0xff
 801fed2:	d020      	beq.n	801ff16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801fed4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fed6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801feda:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fedc:	4367      	muls	r7, r4
 801fede:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fee0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fee4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fee8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801feea:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801feee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fef2:	fb04 fa0a 	mul.w	sl, r4, sl
 801fef6:	44bc      	add	ip, r7
 801fef8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fefc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff00:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff04:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff0c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff10:	ea4c 040a 	orr.w	r4, ip, sl
 801ff14:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ff16:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801ff18:	2cff      	cmp	r4, #255	@ 0xff
 801ff1a:	d020      	beq.n	801ff5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801ff1c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ff1e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff22:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801ff24:	4367      	muls	r7, r4
 801ff26:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ff28:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff2c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff30:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801ff32:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ff36:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff3a:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff3e:	44bc      	add	ip, r7
 801ff40:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ff44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff48:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff4c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff54:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff58:	ea4c 040a 	orr.w	r4, ip, sl
 801ff5c:	9411      	str	r4, [sp, #68]	@ 0x44
 801ff5e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ff60:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ff64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ff68:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff6c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ff6e:	fb08 f707 	mul.w	r7, r8, r7
 801ff72:	fb02 770c 	mla	r7, r2, ip, r7
 801ff76:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff7a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ff7c:	fb00 770c 	mla	r7, r0, ip, r7
 801ff80:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff84:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ff86:	fb09 770c 	mla	r7, r9, ip, r7
 801ff8a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ff8e:	fb08 f80c 	mul.w	r8, r8, ip
 801ff92:	0a3f      	lsrs	r7, r7, #8
 801ff94:	fb02 8303 	mla	r3, r2, r3, r8
 801ff98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ff9a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ff9e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ffa2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ffa4:	fb00 330a 	mla	r3, r0, sl, r3
 801ffa8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801ffac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ffae:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ffb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ffb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffb8:	434b      	muls	r3, r1
 801ffba:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ffbe:	1c59      	adds	r1, r3, #1
 801ffc0:	ea47 070c 	orr.w	r7, r7, ip
 801ffc4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ffc8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ffcc:	b2fa      	uxtb	r2, r7
 801ffce:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ffd2:	fb12 f200 	smulbb	r2, r2, r0
 801ffd6:	b2c9      	uxtb	r1, r1
 801ffd8:	fb03 2301 	mla	r3, r3, r1, r2
 801ffdc:	b29b      	uxth	r3, r3
 801ffde:	1c5a      	adds	r2, r3, #1
 801ffe0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ffe4:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ffe8:	fb12 f201 	smulbb	r2, r2, r1
 801ffec:	121b      	asrs	r3, r3, #8
 801ffee:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fff2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801fff6:	0c3f      	lsrs	r7, r7, #16
 801fff8:	fb03 2300 	mla	r3, r3, r0, r2
 801fffc:	b29b      	uxth	r3, r3
 801fffe:	1c5a      	adds	r2, r3, #1
 8020000:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020004:	121b      	asrs	r3, r3, #8
 8020006:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802000a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802000e:	fb13 f101 	smulbb	r1, r3, r1
 8020012:	fb07 1700 	mla	r7, r7, r0, r1
 8020016:	b2bf      	uxth	r7, r7
 8020018:	1c7b      	adds	r3, r7, #1
 802001a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802001e:	123f      	asrs	r7, r7, #8
 8020020:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020024:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020026:	f10e 0e03 	add.w	lr, lr, #3
 802002a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802002c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020030:	441a      	add	r2, r3
 8020032:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020034:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020036:	441d      	add	r5, r3
 8020038:	e645      	b.n	801fcc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802003a:	2800      	cmp	r0, #0
 802003c:	f43f aee6 	beq.w	801fe0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020040:	5c79      	ldrb	r1, [r7, r1]
 8020042:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020046:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020048:	0e09      	lsrs	r1, r1, #24
 802004a:	9114      	str	r1, [sp, #80]	@ 0x50
 802004c:	e6de      	b.n	801fe0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802004e:	b01f      	add	sp, #124	@ 0x7c
 8020050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020054 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020058:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 802005c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8020060:	2d00      	cmp	r5, #0
 8020062:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020066:	fb05 700e 	mla	r0, r5, lr, r7
 802006a:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 802006e:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8020072:	eb02 0800 	add.w	r8, r2, r0
 8020076:	f2c0 8105 	blt.w	8020284 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 802007a:	45a9      	cmp	r9, r5
 802007c:	f340 8102 	ble.w	8020284 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8020080:	2f00      	cmp	r7, #0
 8020082:	f2c0 80fd 	blt.w	8020280 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8020086:	45be      	cmp	lr, r7
 8020088:	f340 80fa 	ble.w	8020280 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 802008c:	5c12      	ldrb	r2, [r2, r0]
 802008e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020092:	1c7a      	adds	r2, r7, #1
 8020094:	f100 80f9 	bmi.w	802028a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8020098:	4596      	cmp	lr, r2
 802009a:	f340 80f6 	ble.w	802028a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 802009e:	2c00      	cmp	r4, #0
 80200a0:	f000 80f5 	beq.w	802028e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 80200a4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80200a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80200ac:	3501      	adds	r5, #1
 80200ae:	f100 80f2 	bmi.w	8020296 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80200b2:	45a9      	cmp	r9, r5
 80200b4:	f340 80ef 	ble.w	8020296 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80200b8:	f1bc 0f00 	cmp.w	ip, #0
 80200bc:	f000 80ee 	beq.w	802029c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 80200c0:	2f00      	cmp	r7, #0
 80200c2:	f2c0 80e6 	blt.w	8020292 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80200c6:	45be      	cmp	lr, r7
 80200c8:	f340 80e3 	ble.w	8020292 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 80200cc:	f818 200e 	ldrb.w	r2, [r8, lr]
 80200d0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80200d4:	3701      	adds	r7, #1
 80200d6:	f100 80e4 	bmi.w	80202a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80200da:	45be      	cmp	lr, r7
 80200dc:	f340 80e1 	ble.w	80202a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80200e0:	2c00      	cmp	r4, #0
 80200e2:	f000 80e0 	beq.w	80202a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80200e6:	44c6      	add	lr, r8
 80200e8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80200ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80200f0:	b2a3      	uxth	r3, r4
 80200f2:	fa1f fc8c 	uxth.w	ip, ip
 80200f6:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80200fa:	fb0c fe03 	mul.w	lr, ip, r3
 80200fe:	011b      	lsls	r3, r3, #4
 8020100:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020104:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8020108:	eba3 070e 	sub.w	r7, r3, lr
 802010c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8020110:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020114:	fa1f f48c 	uxth.w	r4, ip
 8020118:	b2bf      	uxth	r7, r7
 802011a:	1b1b      	subs	r3, r3, r4
 802011c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020120:	fb07 fc0a 	mul.w	ip, r7, sl
 8020124:	b29b      	uxth	r3, r3
 8020126:	fb03 cc0b 	mla	ip, r3, fp, ip
 802012a:	9300      	str	r3, [sp, #0]
 802012c:	fb04 cc09 	mla	ip, r4, r9, ip
 8020130:	fb0e cc08 	mla	ip, lr, r8, ip
 8020134:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020138:	9301      	str	r3, [sp, #4]
 802013a:	2b00      	cmp	r3, #0
 802013c:	f000 809d 	beq.w	802027a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8020140:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8020144:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020148:	fb0b fc0c 	mul.w	ip, fp, ip
 802014c:	fb0b f606 	mul.w	r6, fp, r6
 8020150:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020154:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020158:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802015c:	44dc      	add	ip, fp
 802015e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8020162:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020166:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802016a:	fb0a fb0b 	mul.w	fp, sl, fp
 802016e:	fb0a fa00 	mul.w	sl, sl, r0
 8020172:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8020176:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802017a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802017e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020182:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020186:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802018a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802018e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020192:	0a36      	lsrs	r6, r6, #8
 8020194:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020198:	44dc      	add	ip, fp
 802019a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802019e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80201a2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80201a6:	fb09 fb0b 	mul.w	fp, r9, fp
 80201aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201ae:	fb09 f905 	mul.w	r9, r9, r5
 80201b2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80201b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80201ba:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 80201be:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80201c2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80201c6:	fb0c fc07 	mul.w	ip, ip, r7
 80201ca:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80201ce:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 80201d2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80201d6:	4458      	add	r0, fp
 80201d8:	fb08 f505 	mul.w	r5, r8, r5
 80201dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80201e0:	fb08 f802 	mul.w	r8, r8, r2
 80201e4:	0a00      	lsrs	r0, r0, #8
 80201e6:	0a2a      	lsrs	r2, r5, #8
 80201e8:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 80201ec:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80201f0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80201f4:	4415      	add	r5, r2
 80201f6:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 80201fa:	0a2d      	lsrs	r5, r5, #8
 80201fc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020200:	9a00      	ldr	r2, [sp, #0]
 8020202:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020206:	fb03 cc02 	mla	ip, r3, r2, ip
 802020a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802020e:	9b01      	ldr	r3, [sp, #4]
 8020210:	fb05 c50e 	mla	r5, r5, lr, ip
 8020214:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8020218:	43db      	mvns	r3, r3
 802021a:	fb00 5004 	mla	r0, r0, r4, r5
 802021e:	b2db      	uxtb	r3, r3
 8020220:	0a00      	lsrs	r0, r0, #8
 8020222:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8020226:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802022a:	4378      	muls	r0, r7
 802022c:	fb02 0006 	mla	r0, r2, r6, r0
 8020230:	780a      	ldrb	r2, [r1, #0]
 8020232:	fb0e 0e08 	mla	lr, lr, r8, r0
 8020236:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 802023a:	fb04 e000 	mla	r0, r4, r0, lr
 802023e:	fb02 f403 	mul.w	r4, r2, r3
 8020242:	0a00      	lsrs	r0, r0, #8
 8020244:	1c62      	adds	r2, r4, #1
 8020246:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802024a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802024e:	4328      	orrs	r0, r5
 8020250:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020254:	700a      	strb	r2, [r1, #0]
 8020256:	784a      	ldrb	r2, [r1, #1]
 8020258:	435a      	muls	r2, r3
 802025a:	1c54      	adds	r4, r2, #1
 802025c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020260:	0a02      	lsrs	r2, r0, #8
 8020262:	0c00      	lsrs	r0, r0, #16
 8020264:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020268:	704a      	strb	r2, [r1, #1]
 802026a:	788a      	ldrb	r2, [r1, #2]
 802026c:	4353      	muls	r3, r2
 802026e:	1c5a      	adds	r2, r3, #1
 8020270:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020274:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020278:	7088      	strb	r0, [r1, #2]
 802027a:	b003      	add	sp, #12
 802027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020280:	2600      	movs	r6, #0
 8020282:	e706      	b.n	8020092 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8020284:	2000      	movs	r0, #0
 8020286:	4606      	mov	r6, r0
 8020288:	e710      	b.n	80200ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802028a:	2000      	movs	r0, #0
 802028c:	e70e      	b.n	80200ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 802028e:	4620      	mov	r0, r4
 8020290:	e70c      	b.n	80200ac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8020292:	2500      	movs	r5, #0
 8020294:	e71e      	b.n	80200d4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8020296:	2200      	movs	r2, #0
 8020298:	4615      	mov	r5, r2
 802029a:	e729      	b.n	80200f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802029c:	4662      	mov	r2, ip
 802029e:	4665      	mov	r5, ip
 80202a0:	e726      	b.n	80200f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80202a2:	2200      	movs	r2, #0
 80202a4:	e724      	b.n	80200f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80202a6:	4622      	mov	r2, r4
 80202a8:	e722      	b.n	80200f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080202aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202ae:	b09b      	sub	sp, #108	@ 0x6c
 80202b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80202b4:	9218      	str	r2, [sp, #96]	@ 0x60
 80202b6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80202b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80202ba:	9116      	str	r1, [sp, #88]	@ 0x58
 80202bc:	6850      	ldr	r0, [r2, #4]
 80202be:	9307      	str	r3, [sp, #28]
 80202c0:	6812      	ldr	r2, [r2, #0]
 80202c2:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80202c4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80202c8:	fb00 1303 	mla	r3, r0, r3, r1
 80202cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202d0:	18d3      	adds	r3, r2, r3
 80202d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80202d4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80202d6:	681b      	ldr	r3, [r3, #0]
 80202d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80202da:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80202dc:	685e      	ldr	r6, [r3, #4]
 80202de:	3604      	adds	r6, #4
 80202e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	dc03      	bgt.n	80202ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80202e6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	f340 834f 	ble.w	802098c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80202ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80202f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80202f8:	1e48      	subs	r0, r1, #1
 80202fa:	1e57      	subs	r7, r2, #1
 80202fc:	9b07      	ldr	r3, [sp, #28]
 80202fe:	2b00      	cmp	r3, #0
 8020300:	f340 8178 	ble.w	80205f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020304:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020306:	142b      	asrs	r3, r5, #16
 8020308:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802030c:	d406      	bmi.n	802031c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802030e:	4584      	cmp	ip, r0
 8020310:	da04      	bge.n	802031c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020312:	2b00      	cmp	r3, #0
 8020314:	db02      	blt.n	802031c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020316:	42bb      	cmp	r3, r7
 8020318:	f2c0 816d 	blt.w	80205f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802031c:	f11c 0c01 	adds.w	ip, ip, #1
 8020320:	f100 815b 	bmi.w	80205da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020324:	4561      	cmp	r1, ip
 8020326:	f2c0 8158 	blt.w	80205da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802032a:	3301      	adds	r3, #1
 802032c:	f100 8155 	bmi.w	80205da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020330:	429a      	cmp	r2, r3
 8020332:	f2c0 8152 	blt.w	80205da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020336:	9b07      	ldr	r3, [sp, #28]
 8020338:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802033a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802033c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802033e:	2b00      	cmp	r3, #0
 8020340:	f340 8178 	ble.w	8020634 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020344:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020346:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802034a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802034e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020352:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020354:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020358:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802035a:	141b      	asrs	r3, r3, #16
 802035c:	f100 81ba 	bmi.w	80206d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020360:	f101 38ff 	add.w	r8, r1, #4294967295
 8020364:	4543      	cmp	r3, r8
 8020366:	f280 81b5 	bge.w	80206d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802036a:	f1bc 0f00 	cmp.w	ip, #0
 802036e:	f2c0 81b1 	blt.w	80206d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020372:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020376:	45c4      	cmp	ip, r8
 8020378:	f280 81ac 	bge.w	80206d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802037c:	b209      	sxth	r1, r1
 802037e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020380:	fb0c 3301 	mla	r3, ip, r1, r3
 8020384:	eb04 0803 	add.w	r8, r4, r3
 8020388:	5ce3      	ldrb	r3, [r4, r3]
 802038a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802038e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020392:	2a00      	cmp	r2, #0
 8020394:	f000 8193 	beq.w	80206be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8020398:	f898 c001 	ldrb.w	ip, [r8, #1]
 802039c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80203a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80203a2:	0e24      	lsrs	r4, r4, #24
 80203a4:	9412      	str	r4, [sp, #72]	@ 0x48
 80203a6:	b178      	cbz	r0, 80203c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80203a8:	eb08 0c01 	add.w	ip, r8, r1
 80203ac:	f818 1001 	ldrb.w	r1, [r8, r1]
 80203b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80203b4:	9108      	str	r1, [sp, #32]
 80203b6:	0e09      	lsrs	r1, r1, #24
 80203b8:	9110      	str	r1, [sp, #64]	@ 0x40
 80203ba:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80203be:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80203c2:	910c      	str	r1, [sp, #48]	@ 0x30
 80203c4:	0e09      	lsrs	r1, r1, #24
 80203c6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80203c8:	b292      	uxth	r2, r2
 80203ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80203cc:	b280      	uxth	r0, r0
 80203ce:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80203d0:	fb02 f900 	mul.w	r9, r2, r0
 80203d4:	0112      	lsls	r2, r2, #4
 80203d6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80203da:	eba2 0809 	sub.w	r8, r2, r9
 80203de:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80203e2:	b280      	uxth	r0, r0
 80203e4:	fa1f f888 	uxth.w	r8, r8
 80203e8:	1a12      	subs	r2, r2, r0
 80203ea:	fb08 f101 	mul.w	r1, r8, r1
 80203ee:	b292      	uxth	r2, r2
 80203f0:	fb02 110e 	mla	r1, r2, lr, r1
 80203f4:	fb00 1104 	mla	r1, r0, r4, r1
 80203f8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80203fa:	fb09 1104 	mla	r1, r9, r4, r1
 80203fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020402:	2900      	cmp	r1, #0
 8020404:	f000 80de 	beq.w	80205c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020408:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802040c:	d01b      	beq.n	8020446 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802040e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020412:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020416:	fb0e fa0a 	mul.w	sl, lr, sl
 802041a:	fb0e fe03 	mul.w	lr, lr, r3
 802041e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020422:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020426:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802042a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802042e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020432:	4453      	add	r3, sl
 8020434:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020438:	0a1b      	lsrs	r3, r3, #8
 802043a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802043e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020442:	ea43 030c 	orr.w	r3, r3, ip
 8020446:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020448:	2cff      	cmp	r4, #255	@ 0xff
 802044a:	d021      	beq.n	8020490 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802044c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802044e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020452:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020454:	fb04 fb0b 	mul.w	fp, r4, fp
 8020458:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802045a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802045e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020460:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020464:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020468:	fb04 fa0a 	mul.w	sl, r4, sl
 802046c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020470:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020474:	44de      	add	lr, fp
 8020476:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802047a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802047e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020482:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020486:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802048a:	ea4e 040a 	orr.w	r4, lr, sl
 802048e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020490:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020492:	2cff      	cmp	r4, #255	@ 0xff
 8020494:	d021      	beq.n	80204da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020496:	9c08      	ldr	r4, [sp, #32]
 8020498:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802049c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802049e:	fb04 fb0b 	mul.w	fp, r4, fp
 80204a2:	9c08      	ldr	r4, [sp, #32]
 80204a4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80204a8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80204aa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80204ae:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80204b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80204b6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204ba:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80204be:	44de      	add	lr, fp
 80204c0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80204c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204cc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204d0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80204d4:	ea4e 040a 	orr.w	r4, lr, sl
 80204d8:	9408      	str	r4, [sp, #32]
 80204da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80204dc:	2cff      	cmp	r4, #255	@ 0xff
 80204de:	d021      	beq.n	8020524 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80204e0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80204e2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80204e6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80204e8:	fb04 fb0b 	mul.w	fp, r4, fp
 80204ec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80204ee:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80204f2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80204f4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80204f8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80204fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8020500:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020504:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020508:	44de      	add	lr, fp
 802050a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802050e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020512:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020516:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802051a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802051e:	ea4e 040a 	orr.w	r4, lr, sl
 8020522:	940c      	str	r4, [sp, #48]	@ 0x30
 8020524:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020526:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802052a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802052e:	43c9      	mvns	r1, r1
 8020530:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020534:	9c08      	ldr	r4, [sp, #32]
 8020536:	b2c9      	uxtb	r1, r1
 8020538:	fb08 fc0c 	mul.w	ip, r8, ip
 802053c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020540:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020544:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020546:	fb00 cc0e 	mla	ip, r0, lr, ip
 802054a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802054e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020550:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020554:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020558:	fb08 f80e 	mul.w	r8, r8, lr
 802055c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020560:	fb02 8303 	mla	r3, r2, r3, r8
 8020564:	9a08      	ldr	r2, [sp, #32]
 8020566:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802056a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802056e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020570:	fb00 330a 	mla	r3, r0, sl, r3
 8020574:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8020578:	fb09 3900 	mla	r9, r9, r0, r3
 802057c:	783b      	ldrb	r3, [r7, #0]
 802057e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020582:	fb03 f201 	mul.w	r2, r3, r1
 8020586:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802058a:	1c53      	adds	r3, r2, #1
 802058c:	ea4c 0c09 	orr.w	ip, ip, r9
 8020590:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020594:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020598:	703b      	strb	r3, [r7, #0]
 802059a:	787b      	ldrb	r3, [r7, #1]
 802059c:	434b      	muls	r3, r1
 802059e:	1c5a      	adds	r2, r3, #1
 80205a0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80205a4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80205a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80205ac:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80205b0:	707b      	strb	r3, [r7, #1]
 80205b2:	78bb      	ldrb	r3, [r7, #2]
 80205b4:	4359      	muls	r1, r3
 80205b6:	1c4b      	adds	r3, r1, #1
 80205b8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80205bc:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80205c0:	f887 c002 	strb.w	ip, [r7, #2]
 80205c4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80205c6:	3703      	adds	r7, #3
 80205c8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80205ca:	441a      	add	r2, r3
 80205cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80205ce:	441d      	add	r5, r3
 80205d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80205d2:	9225      	str	r2, [sp, #148]	@ 0x94
 80205d4:	3b01      	subs	r3, #1
 80205d6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80205d8:	e6b0      	b.n	802033c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80205da:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80205dc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80205de:	441c      	add	r4, r3
 80205e0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80205e2:	441d      	add	r5, r3
 80205e4:	9b07      	ldr	r3, [sp, #28]
 80205e6:	9425      	str	r4, [sp, #148]	@ 0x94
 80205e8:	3b01      	subs	r3, #1
 80205ea:	9307      	str	r3, [sp, #28]
 80205ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80205ee:	3303      	adds	r3, #3
 80205f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80205f2:	e683      	b.n	80202fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80205f4:	d026      	beq.n	8020644 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80205f6:	9b07      	ldr	r3, [sp, #28]
 80205f8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80205fa:	3b01      	subs	r3, #1
 80205fc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80205fe:	fb00 4003 	mla	r0, r0, r3, r4
 8020602:	1400      	asrs	r0, r0, #16
 8020604:	f53f ae97 	bmi.w	8020336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020608:	3901      	subs	r1, #1
 802060a:	4288      	cmp	r0, r1
 802060c:	f6bf ae93 	bge.w	8020336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020610:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8020612:	fb01 5303 	mla	r3, r1, r3, r5
 8020616:	141b      	asrs	r3, r3, #16
 8020618:	f53f ae8d 	bmi.w	8020336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802061c:	3a01      	subs	r2, #1
 802061e:	4293      	cmp	r3, r2
 8020620:	f6bf ae89 	bge.w	8020336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020626:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802062a:	f103 0e03 	add.w	lr, r3, #3
 802062e:	f1bb 0f00 	cmp.w	fp, #0
 8020632:	dc6d      	bgt.n	8020710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8020634:	9b07      	ldr	r3, [sp, #28]
 8020636:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802063a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802063c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020640:	4423      	add	r3, r4
 8020642:	930a      	str	r3, [sp, #40]	@ 0x28
 8020644:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020646:	2b00      	cmp	r3, #0
 8020648:	f340 81a0 	ble.w	802098c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802064c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020650:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020652:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020656:	eeb0 6a62 	vmov.f32	s12, s5
 802065a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802065e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020662:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020666:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 802066a:	eeb0 6a43 	vmov.f32	s12, s6
 802066e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020672:	ee16 5a10 	vmov	r5, s12
 8020676:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802067a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802067e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020682:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020686:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802068a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802068e:	ee12 2a90 	vmov	r2, s5
 8020692:	eef0 2a47 	vmov.f32	s5, s14
 8020696:	fb92 f3f3 	sdiv	r3, r2, r3
 802069a:	ee13 2a10 	vmov	r2, s6
 802069e:	9327      	str	r3, [sp, #156]	@ 0x9c
 80206a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80206a2:	eeb0 3a67 	vmov.f32	s6, s15
 80206a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80206aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80206ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80206ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80206b0:	3b01      	subs	r3, #1
 80206b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80206b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80206b6:	bf08      	it	eq
 80206b8:	4613      	moveq	r3, r2
 80206ba:	9307      	str	r3, [sp, #28]
 80206bc:	e610      	b.n	80202e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80206be:	2800      	cmp	r0, #0
 80206c0:	f43f ae82 	beq.w	80203c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80206c4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80206c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80206cc:	9108      	str	r1, [sp, #32]
 80206ce:	0e09      	lsrs	r1, r1, #24
 80206d0:	9110      	str	r1, [sp, #64]	@ 0x40
 80206d2:	e679      	b.n	80203c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80206d4:	f113 0801 	adds.w	r8, r3, #1
 80206d8:	f53f af74 	bmi.w	80205c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80206dc:	4541      	cmp	r1, r8
 80206de:	f6ff af71 	blt.w	80205c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80206e2:	f11c 0801 	adds.w	r8, ip, #1
 80206e6:	f53f af6d 	bmi.w	80205c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80206ea:	45c6      	cmp	lr, r8
 80206ec:	f6ff af6a 	blt.w	80205c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80206f0:	b209      	sxth	r1, r1
 80206f2:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80206f6:	fa0f f38e 	sxth.w	r3, lr
 80206fa:	9100      	str	r1, [sp, #0]
 80206fc:	4639      	mov	r1, r7
 80206fe:	9301      	str	r3, [sp, #4]
 8020700:	4633      	mov	r3, r6
 8020702:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020706:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020708:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802070a:	f7ff fca3 	bl	8020054 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802070e:	e759      	b.n	80205c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020710:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020712:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020716:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020718:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802071c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802071e:	1427      	asrs	r7, r4, #16
 8020720:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020722:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020726:	142b      	asrs	r3, r5, #16
 8020728:	fb01 7303 	mla	r3, r1, r3, r7
 802072c:	18e7      	adds	r7, r4, r3
 802072e:	5ce3      	ldrb	r3, [r4, r3]
 8020730:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020734:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020738:	2a00      	cmp	r2, #0
 802073a:	f000 811d 	beq.w	8020978 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 802073e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020742:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020746:	940d      	str	r4, [sp, #52]	@ 0x34
 8020748:	0e24      	lsrs	r4, r4, #24
 802074a:	9414      	str	r4, [sp, #80]	@ 0x50
 802074c:	b170      	cbz	r0, 802076c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802074e:	eb07 0801 	add.w	r8, r7, r1
 8020752:	5c79      	ldrb	r1, [r7, r1]
 8020754:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020758:	9109      	str	r1, [sp, #36]	@ 0x24
 802075a:	0e09      	lsrs	r1, r1, #24
 802075c:	9111      	str	r1, [sp, #68]	@ 0x44
 802075e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020762:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020766:	910e      	str	r1, [sp, #56]	@ 0x38
 8020768:	0e09      	lsrs	r1, r1, #24
 802076a:	9115      	str	r1, [sp, #84]	@ 0x54
 802076c:	b292      	uxth	r2, r2
 802076e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020770:	b280      	uxth	r0, r0
 8020772:	fb02 f900 	mul.w	r9, r2, r0
 8020776:	0112      	lsls	r2, r2, #4
 8020778:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802077c:	eba2 0809 	sub.w	r8, r2, r9
 8020780:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020784:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020786:	b280      	uxth	r0, r0
 8020788:	fa1f f888 	uxth.w	r8, r8
 802078c:	1a09      	subs	r1, r1, r0
 802078e:	fb08 f202 	mul.w	r2, r8, r2
 8020792:	b289      	uxth	r1, r1
 8020794:	fb01 220c 	mla	r2, r1, ip, r2
 8020798:	fb00 2204 	mla	r2, r0, r4, r2
 802079c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802079e:	fb09 2204 	mla	r2, r9, r4, r2
 80207a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80207a6:	2a00      	cmp	r2, #0
 80207a8:	f000 80db 	beq.w	8020962 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80207ac:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80207b0:	d019      	beq.n	80207e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80207b2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80207b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80207ba:	fb0c fa0a 	mul.w	sl, ip, sl
 80207be:	fb0c fc03 	mul.w	ip, ip, r3
 80207c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80207c6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80207ca:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80207ce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80207d2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80207d6:	4453      	add	r3, sl
 80207d8:	0a3f      	lsrs	r7, r7, #8
 80207da:	0a1b      	lsrs	r3, r3, #8
 80207dc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80207e0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80207e4:	433b      	orrs	r3, r7
 80207e6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80207e8:	2cff      	cmp	r4, #255	@ 0xff
 80207ea:	d020      	beq.n	802082e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 80207ec:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80207ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80207f2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80207f4:	4367      	muls	r7, r4
 80207f6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80207f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80207fc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020800:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020802:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020806:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802080a:	fb04 fa0a 	mul.w	sl, r4, sl
 802080e:	44bc      	add	ip, r7
 8020810:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020814:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020818:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802081c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020820:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020824:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020828:	ea4c 040a 	orr.w	r4, ip, sl
 802082c:	940d      	str	r4, [sp, #52]	@ 0x34
 802082e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020830:	2cff      	cmp	r4, #255	@ 0xff
 8020832:	d020      	beq.n	8020876 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8020834:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020836:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802083a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802083c:	4367      	muls	r7, r4
 802083e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020840:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020844:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020848:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802084a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802084e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020852:	fb04 fa0a 	mul.w	sl, r4, sl
 8020856:	44bc      	add	ip, r7
 8020858:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802085c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020860:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020864:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020868:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802086c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020870:	ea4c 040a 	orr.w	r4, ip, sl
 8020874:	9409      	str	r4, [sp, #36]	@ 0x24
 8020876:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020878:	2cff      	cmp	r4, #255	@ 0xff
 802087a:	d020      	beq.n	80208be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 802087c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802087e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020882:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020884:	4367      	muls	r7, r4
 8020886:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020888:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802088c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020890:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020892:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020896:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802089a:	fb04 fa0a 	mul.w	sl, r4, sl
 802089e:	44bc      	add	ip, r7
 80208a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80208a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80208ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80208b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80208b8:	ea4c 040a 	orr.w	r4, ip, sl
 80208bc:	940e      	str	r4, [sp, #56]	@ 0x38
 80208be:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80208c0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80208c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80208c8:	43d2      	mvns	r2, r2
 80208ca:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80208ce:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80208d0:	b2d2      	uxtb	r2, r2
 80208d2:	fb08 f707 	mul.w	r7, r8, r7
 80208d6:	fb01 770c 	mla	r7, r1, ip, r7
 80208da:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80208de:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80208e0:	fb00 770c 	mla	r7, r0, ip, r7
 80208e4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80208e8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80208ea:	fb09 770c 	mla	r7, r9, ip, r7
 80208ee:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80208f2:	fb08 f80c 	mul.w	r8, r8, ip
 80208f6:	0a3f      	lsrs	r7, r7, #8
 80208f8:	fb01 8303 	mla	r3, r1, r3, r8
 80208fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80208fe:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8020902:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8020906:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020908:	fb00 330a 	mla	r3, r0, sl, r3
 802090c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8020910:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020914:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020918:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802091c:	fb03 f102 	mul.w	r1, r3, r2
 8020920:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020924:	1c4b      	adds	r3, r1, #1
 8020926:	ea47 070c 	orr.w	r7, r7, ip
 802092a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802092e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8020932:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020936:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 802093a:	4353      	muls	r3, r2
 802093c:	1c59      	adds	r1, r3, #1
 802093e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020942:	0a3b      	lsrs	r3, r7, #8
 8020944:	0c3f      	lsrs	r7, r7, #16
 8020946:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802094a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802094e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020952:	435a      	muls	r2, r3
 8020954:	1c53      	adds	r3, r2, #1
 8020956:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802095a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802095e:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020962:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020964:	f10e 0e03 	add.w	lr, lr, #3
 8020968:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802096a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802096e:	441a      	add	r2, r3
 8020970:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020972:	9225      	str	r2, [sp, #148]	@ 0x94
 8020974:	441d      	add	r5, r3
 8020976:	e65a      	b.n	802062e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020978:	2800      	cmp	r0, #0
 802097a:	f43f aef7 	beq.w	802076c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802097e:	5c79      	ldrb	r1, [r7, r1]
 8020980:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020984:	9109      	str	r1, [sp, #36]	@ 0x24
 8020986:	0e09      	lsrs	r1, r1, #24
 8020988:	9111      	str	r1, [sp, #68]	@ 0x44
 802098a:	e6ef      	b.n	802076c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802098c:	b01b      	add	sp, #108	@ 0x6c
 802098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020992 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020996:	b08d      	sub	sp, #52	@ 0x34
 8020998:	468b      	mov	fp, r1
 802099a:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 802099e:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 80209a2:	fb0c 5703 	mla	r7, ip, r3, r5
 80209a6:	f1bc 0f00 	cmp.w	ip, #0
 80209aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80209ac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80209b0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 80209b4:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 80209b8:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 80209bc:	eb02 0607 	add.w	r6, r2, r7
 80209c0:	f89b 4000 	ldrb.w	r4, [fp]
 80209c4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80209c8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80209cc:	f2c0 80c1 	blt.w	8020b52 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80209d0:	45e6      	cmp	lr, ip
 80209d2:	f340 80be 	ble.w	8020b52 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80209d6:	2d00      	cmp	r5, #0
 80209d8:	f2c0 80b7 	blt.w	8020b4a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80209dc:	42ab      	cmp	r3, r5
 80209de:	f340 80b4 	ble.w	8020b4a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80209e2:	5dd2      	ldrb	r2, [r2, r7]
 80209e4:	9205      	str	r2, [sp, #20]
 80209e6:	7872      	ldrb	r2, [r6, #1]
 80209e8:	9206      	str	r2, [sp, #24]
 80209ea:	78b2      	ldrb	r2, [r6, #2]
 80209ec:	9207      	str	r2, [sp, #28]
 80209ee:	1c6a      	adds	r2, r5, #1
 80209f0:	f100 80b6 	bmi.w	8020b60 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80209f4:	4293      	cmp	r3, r2
 80209f6:	f340 80b3 	ble.w	8020b60 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80209fa:	f1b8 0f00 	cmp.w	r8, #0
 80209fe:	f000 80af 	beq.w	8020b60 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8020a02:	78f2      	ldrb	r2, [r6, #3]
 8020a04:	9201      	str	r2, [sp, #4]
 8020a06:	7932      	ldrb	r2, [r6, #4]
 8020a08:	9202      	str	r2, [sp, #8]
 8020a0a:	7972      	ldrb	r2, [r6, #5]
 8020a0c:	9203      	str	r2, [sp, #12]
 8020a0e:	f11c 0c01 	adds.w	ip, ip, #1
 8020a12:	f100 80ad 	bmi.w	8020b70 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020a16:	45e6      	cmp	lr, ip
 8020a18:	f340 80aa 	ble.w	8020b70 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020a1c:	f1ba 0f00 	cmp.w	sl, #0
 8020a20:	f000 80a6 	beq.w	8020b70 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020a24:	2d00      	cmp	r5, #0
 8020a26:	f2c0 809f 	blt.w	8020b68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8020a2a:	42ab      	cmp	r3, r5
 8020a2c:	f340 809c 	ble.w	8020b68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8020a30:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020a34:	f816 9002 	ldrb.w	r9, [r6, r2]
 8020a38:	2203      	movs	r2, #3
 8020a3a:	fb03 6c02 	mla	ip, r3, r2, r6
 8020a3e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8020a42:	f89c e002 	ldrb.w	lr, [ip, #2]
 8020a46:	9704      	str	r7, [sp, #16]
 8020a48:	3501      	adds	r5, #1
 8020a4a:	f100 8098 	bmi.w	8020b7e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020a4e:	42ab      	cmp	r3, r5
 8020a50:	f340 8095 	ble.w	8020b7e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020a54:	f1b8 0f00 	cmp.w	r8, #0
 8020a58:	f000 8091 	beq.w	8020b7e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020a5c:	f04f 0c03 	mov.w	ip, #3
 8020a60:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8020a64:	5cb5      	ldrb	r5, [r6, r2]
 8020a66:	fb03 620c 	mla	r2, r3, ip, r6
 8020a6a:	fb03 630c 	mla	r3, r3, ip, r6
 8020a6e:	7912      	ldrb	r2, [r2, #4]
 8020a70:	795e      	ldrb	r6, [r3, #5]
 8020a72:	fa1f f388 	uxth.w	r3, r8
 8020a76:	fa1f fc8a 	uxth.w	ip, sl
 8020a7a:	fb03 f70c 	mul.w	r7, r3, ip
 8020a7e:	011b      	lsls	r3, r3, #4
 8020a80:	9708      	str	r7, [sp, #32]
 8020a82:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020a86:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8020a8a:	1bdb      	subs	r3, r3, r7
 8020a8c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8020a90:	fa1f fc8c 	uxth.w	ip, ip
 8020a94:	b29b      	uxth	r3, r3
 8020a96:	9709      	str	r7, [sp, #36]	@ 0x24
 8020a98:	ebaa 0a0c 	sub.w	sl, sl, ip
 8020a9c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020aa0:	fa1f fa8a 	uxth.w	sl, sl
 8020aa4:	ea6f 0807 	mvn.w	r8, r7
 8020aa8:	9f01      	ldr	r7, [sp, #4]
 8020aaa:	435f      	muls	r7, r3
 8020aac:	9b05      	ldr	r3, [sp, #20]
 8020aae:	fa5f f888 	uxtb.w	r8, r8
 8020ab2:	fb0a 7703 	mla	r7, sl, r3, r7
 8020ab6:	9b08      	ldr	r3, [sp, #32]
 8020ab8:	fb14 f408 	smulbb	r4, r4, r8
 8020abc:	fb0c 7709 	mla	r7, ip, r9, r7
 8020ac0:	fb10 f008 	smulbb	r0, r0, r8
 8020ac4:	fb11 f108 	smulbb	r1, r1, r8
 8020ac8:	fb03 7705 	mla	r7, r3, r5, r7
 8020acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ace:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020ad2:	fb07 4703 	mla	r7, r7, r3, r4
 8020ad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020ad8:	b2bf      	uxth	r7, r7
 8020ada:	1c7c      	adds	r4, r7, #1
 8020adc:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8020ae0:	1224      	asrs	r4, r4, #8
 8020ae2:	f88b 4000 	strb.w	r4, [fp]
 8020ae6:	9c02      	ldr	r4, [sp, #8]
 8020ae8:	435c      	muls	r4, r3
 8020aea:	9b06      	ldr	r3, [sp, #24]
 8020aec:	fb0a 4403 	mla	r4, sl, r3, r4
 8020af0:	9b04      	ldr	r3, [sp, #16]
 8020af2:	fb0c 4403 	mla	r4, ip, r3, r4
 8020af6:	9b08      	ldr	r3, [sp, #32]
 8020af8:	fb03 4402 	mla	r4, r3, r2, r4
 8020afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020afe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020b00:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020b04:	fb04 0403 	mla	r4, r4, r3, r0
 8020b08:	9b03      	ldr	r3, [sp, #12]
 8020b0a:	435a      	muls	r2, r3
 8020b0c:	b2a4      	uxth	r4, r4
 8020b0e:	4613      	mov	r3, r2
 8020b10:	9a07      	ldr	r2, [sp, #28]
 8020b12:	1c60      	adds	r0, r4, #1
 8020b14:	fb0a 3a02 	mla	sl, sl, r2, r3
 8020b18:	9b08      	ldr	r3, [sp, #32]
 8020b1a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8020b1e:	fb0c ac0e 	mla	ip, ip, lr, sl
 8020b22:	1224      	asrs	r4, r4, #8
 8020b24:	fb03 c606 	mla	r6, r3, r6, ip
 8020b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b2a:	f88b 4001 	strb.w	r4, [fp, #1]
 8020b2e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020b32:	fb06 1103 	mla	r1, r6, r3, r1
 8020b36:	b289      	uxth	r1, r1
 8020b38:	1c4e      	adds	r6, r1, #1
 8020b3a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8020b3e:	1209      	asrs	r1, r1, #8
 8020b40:	f88b 1002 	strb.w	r1, [fp, #2]
 8020b44:	b00d      	add	sp, #52	@ 0x34
 8020b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020b4e:	9405      	str	r4, [sp, #20]
 8020b50:	e74d      	b.n	80209ee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8020b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020b56:	9401      	str	r4, [sp, #4]
 8020b58:	9405      	str	r4, [sp, #20]
 8020b5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020b5e:	e756      	b.n	8020a0e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8020b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020b64:	9401      	str	r4, [sp, #4]
 8020b66:	e752      	b.n	8020a0e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8020b68:	468e      	mov	lr, r1
 8020b6a:	9004      	str	r0, [sp, #16]
 8020b6c:	46a1      	mov	r9, r4
 8020b6e:	e76b      	b.n	8020a48 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8020b70:	460e      	mov	r6, r1
 8020b72:	4602      	mov	r2, r0
 8020b74:	4625      	mov	r5, r4
 8020b76:	468e      	mov	lr, r1
 8020b78:	9004      	str	r0, [sp, #16]
 8020b7a:	46a1      	mov	r9, r4
 8020b7c:	e779      	b.n	8020a72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8020b7e:	460e      	mov	r6, r1
 8020b80:	4602      	mov	r2, r0
 8020b82:	4625      	mov	r5, r4
 8020b84:	e775      	b.n	8020a72 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08020b86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b8a:	b09f      	sub	sp, #124	@ 0x7c
 8020b8c:	920e      	str	r2, [sp, #56]	@ 0x38
 8020b8e:	9307      	str	r3, [sp, #28]
 8020b90:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8020b92:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8020b96:	901d      	str	r0, [sp, #116]	@ 0x74
 8020b98:	930c      	str	r3, [sp, #48]	@ 0x30
 8020b9a:	6850      	ldr	r0, [r2, #4]
 8020b9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020b9e:	6812      	ldr	r2, [r2, #0]
 8020ba0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8020ba4:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8020ba8:	fb00 1303 	mla	r3, r0, r3, r1
 8020bac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020bb0:	18d3      	adds	r3, r2, r3
 8020bb2:	9308      	str	r3, [sp, #32]
 8020bb4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8020bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020bbc:	43db      	mvns	r3, r3
 8020bbe:	b2db      	uxtb	r3, r3
 8020bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8020bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	dc03      	bgt.n	8020bd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	f340 81f5 	ble.w	8020fba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020bd0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020bd2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020bd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020bda:	1e48      	subs	r0, r1, #1
 8020bdc:	1e54      	subs	r4, r2, #1
 8020bde:	9b07      	ldr	r3, [sp, #28]
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	f340 80d5 	ble.w	8020d90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020be6:	ea5f 452a 	movs.w	r5, sl, asr #16
 8020bea:	ea4f 4328 	mov.w	r3, r8, asr #16
 8020bee:	d406      	bmi.n	8020bfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020bf0:	4285      	cmp	r5, r0
 8020bf2:	da04      	bge.n	8020bfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	db02      	blt.n	8020bfe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020bf8:	42a3      	cmp	r3, r4
 8020bfa:	f2c0 80ca 	blt.w	8020d92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020bfe:	3501      	adds	r5, #1
 8020c00:	f100 80bb 	bmi.w	8020d7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020c04:	42a9      	cmp	r1, r5
 8020c06:	f2c0 80b8 	blt.w	8020d7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020c0a:	3301      	adds	r3, #1
 8020c0c:	f100 80b5 	bmi.w	8020d7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020c10:	429a      	cmp	r2, r3
 8020c12:	f2c0 80b2 	blt.w	8020d7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020c16:	9b07      	ldr	r3, [sp, #28]
 8020c18:	9d08      	ldr	r5, [sp, #32]
 8020c1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	f340 80d6 	ble.w	8020dd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8020c24:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8020c26:	ea4f 4428 	mov.w	r4, r8, asr #16
 8020c2a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020c2c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8020c30:	68c6      	ldr	r6, [r0, #12]
 8020c32:	ea5f 402a 	movs.w	r0, sl, asr #16
 8020c36:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8020c3a:	689b      	ldr	r3, [r3, #8]
 8020c3c:	f100 810f 	bmi.w	8020e5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020c40:	1e5f      	subs	r7, r3, #1
 8020c42:	42b8      	cmp	r0, r7
 8020c44:	f280 810b 	bge.w	8020e5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020c48:	2c00      	cmp	r4, #0
 8020c4a:	f2c0 8108 	blt.w	8020e5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020c4e:	1e77      	subs	r7, r6, #1
 8020c50:	42bc      	cmp	r4, r7
 8020c52:	f280 8104 	bge.w	8020e5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020c56:	b21b      	sxth	r3, r3
 8020c58:	fb04 0003 	mla	r0, r4, r3, r0
 8020c5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020c5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020c62:	1826      	adds	r6, r4, r0
 8020c64:	5c24      	ldrb	r4, [r4, r0]
 8020c66:	78b7      	ldrb	r7, [r6, #2]
 8020c68:	7870      	ldrb	r0, [r6, #1]
 8020c6a:	970f      	str	r7, [sp, #60]	@ 0x3c
 8020c6c:	7977      	ldrb	r7, [r6, #5]
 8020c6e:	f896 e003 	ldrb.w	lr, [r6, #3]
 8020c72:	f896 c004 	ldrb.w	ip, [r6, #4]
 8020c76:	9710      	str	r7, [sp, #64]	@ 0x40
 8020c78:	b1c9      	cbz	r1, 8020cae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020c7a:	f04f 0b03 	mov.w	fp, #3
 8020c7e:	f06f 0904 	mvn.w	r9, #4
 8020c82:	3605      	adds	r6, #5
 8020c84:	fb13 930b 	smlabb	r3, r3, fp, r9
 8020c88:	eb06 0b03 	add.w	fp, r6, r3
 8020c8c:	5cf3      	ldrb	r3, [r6, r3]
 8020c8e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020c90:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8020c94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020c96:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020c9a:	9315      	str	r3, [sp, #84]	@ 0x54
 8020c9c:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8020ca0:	9312      	str	r3, [sp, #72]	@ 0x48
 8020ca2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8020ca6:	9314      	str	r3, [sp, #80]	@ 0x50
 8020ca8:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8020cac:	9316      	str	r3, [sp, #88]	@ 0x58
 8020cae:	b292      	uxth	r2, r2
 8020cb0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8020cb2:	b289      	uxth	r1, r1
 8020cb4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8020cb8:	fb02 f601 	mul.w	r6, r2, r1
 8020cbc:	0112      	lsls	r2, r2, #4
 8020cbe:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8020cc2:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8020cc6:	1b92      	subs	r2, r2, r6
 8020cc8:	b289      	uxth	r1, r1
 8020cca:	b292      	uxth	r2, r2
 8020ccc:	eba9 0901 	sub.w	r9, r9, r1
 8020cd0:	fb02 fe0e 	mul.w	lr, r2, lr
 8020cd4:	fa1f f989 	uxth.w	r9, r9
 8020cd8:	fb02 fc0c 	mul.w	ip, r2, ip
 8020cdc:	fb09 e404 	mla	r4, r9, r4, lr
 8020ce0:	f895 e000 	ldrb.w	lr, [r5]
 8020ce4:	fb09 c000 	mla	r0, r9, r0, ip
 8020ce8:	fb01 4407 	mla	r4, r1, r7, r4
 8020cec:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8020cee:	fb06 4407 	mla	r4, r6, r7, r4
 8020cf2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020cf4:	fb1e fe07 	smulbb	lr, lr, r7
 8020cf8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020cfc:	fb04 e403 	mla	r4, r4, r3, lr
 8020d00:	b2a4      	uxth	r4, r4
 8020d02:	f104 0e01 	add.w	lr, r4, #1
 8020d06:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8020d0a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020d0c:	fb01 0004 	mla	r0, r1, r4, r0
 8020d10:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020d12:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020d16:	fb06 0004 	mla	r0, r6, r4, r0
 8020d1a:	786c      	ldrb	r4, [r5, #1]
 8020d1c:	f885 e000 	strb.w	lr, [r5]
 8020d20:	fb14 f407 	smulbb	r4, r4, r7
 8020d24:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020d28:	fb00 4003 	mla	r0, r0, r3, r4
 8020d2c:	b280      	uxth	r0, r0
 8020d2e:	1c44      	adds	r4, r0, #1
 8020d30:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020d34:	1200      	asrs	r0, r0, #8
 8020d36:	7068      	strb	r0, [r5, #1]
 8020d38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020d3a:	4342      	muls	r2, r0
 8020d3c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8020d3e:	fb09 2200 	mla	r2, r9, r0, r2
 8020d42:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020d44:	fb01 2100 	mla	r1, r1, r0, r2
 8020d48:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020d4a:	fb06 1602 	mla	r6, r6, r2, r1
 8020d4e:	78a9      	ldrb	r1, [r5, #2]
 8020d50:	fb11 f107 	smulbb	r1, r1, r7
 8020d54:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020d58:	fb06 1303 	mla	r3, r6, r3, r1
 8020d5c:	b29b      	uxth	r3, r3
 8020d5e:	1c5e      	adds	r6, r3, #1
 8020d60:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020d64:	121b      	asrs	r3, r3, #8
 8020d66:	70ab      	strb	r3, [r5, #2]
 8020d68:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020d6a:	3503      	adds	r5, #3
 8020d6c:	449a      	add	sl, r3
 8020d6e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020d70:	4498      	add	r8, r3
 8020d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d74:	3b01      	subs	r3, #1
 8020d76:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d78:	e750      	b.n	8020c1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d7a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020d7c:	449a      	add	sl, r3
 8020d7e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020d80:	4498      	add	r8, r3
 8020d82:	9b07      	ldr	r3, [sp, #28]
 8020d84:	3b01      	subs	r3, #1
 8020d86:	9307      	str	r3, [sp, #28]
 8020d88:	9b08      	ldr	r3, [sp, #32]
 8020d8a:	3303      	adds	r3, #3
 8020d8c:	9308      	str	r3, [sp, #32]
 8020d8e:	e726      	b.n	8020bde <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020d90:	d026      	beq.n	8020de0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8020d92:	9b07      	ldr	r3, [sp, #28]
 8020d94:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8020d96:	3b01      	subs	r3, #1
 8020d98:	fb00 a003 	mla	r0, r0, r3, sl
 8020d9c:	1400      	asrs	r0, r0, #16
 8020d9e:	f53f af3a 	bmi.w	8020c16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020da2:	3901      	subs	r1, #1
 8020da4:	4288      	cmp	r0, r1
 8020da6:	f6bf af36 	bge.w	8020c16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020daa:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8020dac:	fb01 8303 	mla	r3, r1, r3, r8
 8020db0:	141b      	asrs	r3, r3, #16
 8020db2:	f53f af30 	bmi.w	8020c16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020db6:	3a01      	subs	r2, #1
 8020db8:	4293      	cmp	r3, r2
 8020dba:	f6bf af2c 	bge.w	8020c16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020dbe:	9b08      	ldr	r3, [sp, #32]
 8020dc0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020dc4:	1cdd      	adds	r5, r3, #3
 8020dc6:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 8020dca:	f1bc 0f00 	cmp.w	ip, #0
 8020dce:	dc5f      	bgt.n	8020e90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8020dd0:	9b07      	ldr	r3, [sp, #28]
 8020dd2:	9a08      	ldr	r2, [sp, #32]
 8020dd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020ddc:	441a      	add	r2, r3
 8020dde:	9208      	str	r2, [sp, #32]
 8020de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	f340 80e9 	ble.w	8020fba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020dec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020dee:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020df2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020df6:	eef0 6a62 	vmov.f32	s13, s5
 8020dfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020dfe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e06:	ee16 aa90 	vmov	sl, s13
 8020e0a:	eef0 6a43 	vmov.f32	s13, s6
 8020e0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e12:	ee16 8a90 	vmov	r8, s13
 8020e16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e2e:	ee12 2a90 	vmov	r2, s5
 8020e32:	eef0 2a47 	vmov.f32	s5, s14
 8020e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e3a:	ee13 2a10 	vmov	r2, s6
 8020e3e:	932b      	str	r3, [sp, #172]	@ 0xac
 8020e40:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020e42:	eeb0 3a67 	vmov.f32	s6, s15
 8020e46:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e4a:	932c      	str	r3, [sp, #176]	@ 0xb0
 8020e4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e50:	3b01      	subs	r3, #1
 8020e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020e54:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020e56:	bf08      	it	eq
 8020e58:	4613      	moveq	r3, r2
 8020e5a:	9307      	str	r3, [sp, #28]
 8020e5c:	e6b1      	b.n	8020bc2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020e5e:	1c47      	adds	r7, r0, #1
 8020e60:	d482      	bmi.n	8020d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020e62:	42bb      	cmp	r3, r7
 8020e64:	db80      	blt.n	8020d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020e66:	1c67      	adds	r7, r4, #1
 8020e68:	f53f af7e 	bmi.w	8020d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020e6c:	42be      	cmp	r6, r7
 8020e6e:	f6ff af7b 	blt.w	8020d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020e72:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020e74:	b236      	sxth	r6, r6
 8020e76:	9001      	str	r0, [sp, #4]
 8020e78:	b21b      	sxth	r3, r3
 8020e7a:	9600      	str	r6, [sp, #0]
 8020e7c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020e7e:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8020e82:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8020e86:	4629      	mov	r1, r5
 8020e88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020e8a:	f7ff fd82 	bl	8020992 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020e8e:	e76b      	b.n	8020d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020e90:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8020e92:	ea4f 402a 	mov.w	r0, sl, asr #16
 8020e96:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8020e9a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8020e9e:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8020ea2:	ea4f 4128 	mov.w	r1, r8, asr #16
 8020ea6:	fb07 0101 	mla	r1, r7, r1, r0
 8020eaa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020eac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020eb0:	1844      	adds	r4, r0, r1
 8020eb2:	5c40      	ldrb	r0, [r0, r1]
 8020eb4:	78a6      	ldrb	r6, [r4, #2]
 8020eb6:	7861      	ldrb	r1, [r4, #1]
 8020eb8:	960f      	str	r6, [sp, #60]	@ 0x3c
 8020eba:	78e6      	ldrb	r6, [r4, #3]
 8020ebc:	910d      	str	r1, [sp, #52]	@ 0x34
 8020ebe:	9610      	str	r6, [sp, #64]	@ 0x40
 8020ec0:	f894 9004 	ldrb.w	r9, [r4, #4]
 8020ec4:	f894 b005 	ldrb.w	fp, [r4, #5]
 8020ec8:	b192      	cbz	r2, 8020ef0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8020eca:	f06f 0604 	mvn.w	r6, #4
 8020ece:	2103      	movs	r1, #3
 8020ed0:	3405      	adds	r4, #5
 8020ed2:	fb17 6701 	smlabb	r7, r7, r1, r6
 8020ed6:	19e6      	adds	r6, r4, r7
 8020ed8:	5de4      	ldrb	r4, [r4, r7]
 8020eda:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020edc:	7874      	ldrb	r4, [r6, #1]
 8020ede:	9419      	str	r4, [sp, #100]	@ 0x64
 8020ee0:	78b4      	ldrb	r4, [r6, #2]
 8020ee2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8020ee4:	78f4      	ldrb	r4, [r6, #3]
 8020ee6:	9418      	str	r4, [sp, #96]	@ 0x60
 8020ee8:	7934      	ldrb	r4, [r6, #4]
 8020eea:	941a      	str	r4, [sp, #104]	@ 0x68
 8020eec:	7974      	ldrb	r4, [r6, #5]
 8020eee:	941c      	str	r4, [sp, #112]	@ 0x70
 8020ef0:	b29b      	uxth	r3, r3
 8020ef2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020ef4:	b292      	uxth	r2, r2
 8020ef6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020ef8:	3503      	adds	r5, #3
 8020efa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020efe:	fb03 f402 	mul.w	r4, r3, r2
 8020f02:	011b      	lsls	r3, r3, #4
 8020f04:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8020f08:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8020f0c:	1b1b      	subs	r3, r3, r4
 8020f0e:	b292      	uxth	r2, r2
 8020f10:	b29b      	uxth	r3, r3
 8020f12:	1ab6      	subs	r6, r6, r2
 8020f14:	435f      	muls	r7, r3
 8020f16:	b2b6      	uxth	r6, r6
 8020f18:	fb03 f909 	mul.w	r9, r3, r9
 8020f1c:	fb03 fb0b 	mul.w	fp, r3, fp
 8020f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f22:	fb06 7000 	mla	r0, r6, r0, r7
 8020f26:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8020f28:	fb06 bb03 	mla	fp, r6, r3, fp
 8020f2c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020f2e:	fb02 0007 	mla	r0, r2, r7, r0
 8020f32:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8020f34:	fb02 bb03 	mla	fp, r2, r3, fp
 8020f38:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020f3a:	fb04 0007 	mla	r0, r4, r7, r0
 8020f3e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8020f42:	fb17 f701 	smulbb	r7, r7, r1
 8020f46:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020f4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020f4c:	fb00 700e 	mla	r0, r0, lr, r7
 8020f50:	fb06 9101 	mla	r1, r6, r1, r9
 8020f54:	b280      	uxth	r0, r0
 8020f56:	1c47      	adds	r7, r0, #1
 8020f58:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8020f5c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020f5e:	1200      	asrs	r0, r0, #8
 8020f60:	f805 0c06 	strb.w	r0, [r5, #-6]
 8020f64:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020f66:	fb02 1100 	mla	r1, r2, r0, r1
 8020f6a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8020f6c:	fb04 1100 	mla	r1, r4, r0, r1
 8020f70:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8020f74:	fb04 b403 	mla	r4, r4, r3, fp
 8020f78:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8020f7c:	fb10 f007 	smulbb	r0, r0, r7
 8020f80:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f84:	fb13 f307 	smulbb	r3, r3, r7
 8020f88:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020f8c:	fb01 010e 	mla	r1, r1, lr, r0
 8020f90:	fb04 340e 	mla	r4, r4, lr, r3
 8020f94:	b289      	uxth	r1, r1
 8020f96:	b2a4      	uxth	r4, r4
 8020f98:	1c48      	adds	r0, r1, #1
 8020f9a:	1c63      	adds	r3, r4, #1
 8020f9c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020fa0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020fa4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020fa6:	1209      	asrs	r1, r1, #8
 8020fa8:	1224      	asrs	r4, r4, #8
 8020faa:	449a      	add	sl, r3
 8020fac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020fae:	f805 1c05 	strb.w	r1, [r5, #-5]
 8020fb2:	f805 4c04 	strb.w	r4, [r5, #-4]
 8020fb6:	4498      	add	r8, r3
 8020fb8:	e707      	b.n	8020dca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8020fba:	b01f      	add	sp, #124	@ 0x7c
 8020fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020fc0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fc4:	b087      	sub	sp, #28
 8020fc6:	780d      	ldrb	r5, [r1, #0]
 8020fc8:	784c      	ldrb	r4, [r1, #1]
 8020fca:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8020fce:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8020fd2:	9004      	str	r0, [sp, #16]
 8020fd4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8020fd8:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8020fdc:	9005      	str	r0, [sp, #20]
 8020fde:	fb06 bc03 	mla	ip, r6, r3, fp
 8020fe2:	2e00      	cmp	r6, #0
 8020fe4:	7888      	ldrb	r0, [r1, #2]
 8020fe6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020fea:	eb02 090c 	add.w	r9, r2, ip
 8020fee:	f2c0 8084 	blt.w	80210fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020ff2:	42b7      	cmp	r7, r6
 8020ff4:	f340 8081 	ble.w	80210fa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020ff8:	f1bb 0f00 	cmp.w	fp, #0
 8020ffc:	db79      	blt.n	80210f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8020ffe:	455b      	cmp	r3, fp
 8021000:	dd77      	ble.n	80210f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021002:	f812 200c 	ldrb.w	r2, [r2, ip]
 8021006:	9201      	str	r2, [sp, #4]
 8021008:	f899 2001 	ldrb.w	r2, [r9, #1]
 802100c:	9202      	str	r2, [sp, #8]
 802100e:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021012:	9203      	str	r2, [sp, #12]
 8021014:	f11b 0201 	adds.w	r2, fp, #1
 8021018:	d476      	bmi.n	8021108 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802101a:	4293      	cmp	r3, r2
 802101c:	dd74      	ble.n	8021108 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802101e:	9a04      	ldr	r2, [sp, #16]
 8021020:	2a00      	cmp	r2, #0
 8021022:	d071      	beq.n	8021108 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021024:	f899 8003 	ldrb.w	r8, [r9, #3]
 8021028:	f899 c004 	ldrb.w	ip, [r9, #4]
 802102c:	f899 a005 	ldrb.w	sl, [r9, #5]
 8021030:	3601      	adds	r6, #1
 8021032:	d471      	bmi.n	8021118 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021034:	42b7      	cmp	r7, r6
 8021036:	dd6f      	ble.n	8021118 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021038:	9a05      	ldr	r2, [sp, #20]
 802103a:	2a00      	cmp	r2, #0
 802103c:	d06c      	beq.n	8021118 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802103e:	f1bb 0f00 	cmp.w	fp, #0
 8021042:	db65      	blt.n	8021110 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021044:	455b      	cmp	r3, fp
 8021046:	dd63      	ble.n	8021110 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021048:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802104c:	f819 e002 	ldrb.w	lr, [r9, r2]
 8021050:	2203      	movs	r2, #3
 8021052:	fb03 9602 	mla	r6, r3, r2, r9
 8021056:	7877      	ldrb	r7, [r6, #1]
 8021058:	78b6      	ldrb	r6, [r6, #2]
 802105a:	f11b 0b01 	adds.w	fp, fp, #1
 802105e:	d40c      	bmi.n	802107a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021060:	455b      	cmp	r3, fp
 8021062:	dd0a      	ble.n	802107a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021064:	9a04      	ldr	r2, [sp, #16]
 8021066:	b142      	cbz	r2, 802107a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021068:	2203      	movs	r2, #3
 802106a:	fb13 2002 	smlabb	r0, r3, r2, r2
 802106e:	f819 5000 	ldrb.w	r5, [r9, r0]
 8021072:	fb03 9002 	mla	r0, r3, r2, r9
 8021076:	7904      	ldrb	r4, [r0, #4]
 8021078:	7940      	ldrb	r0, [r0, #5]
 802107a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802107e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8021082:	fb03 fb02 	mul.w	fp, r3, r2
 8021086:	011b      	lsls	r3, r3, #4
 8021088:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802108c:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8021090:	eba3 030b 	sub.w	r3, r3, fp
 8021094:	b292      	uxth	r2, r2
 8021096:	b29b      	uxth	r3, r3
 8021098:	eba9 0902 	sub.w	r9, r9, r2
 802109c:	9304      	str	r3, [sp, #16]
 802109e:	fa1f f989 	uxth.w	r9, r9
 80210a2:	fb03 f808 	mul.w	r8, r3, r8
 80210a6:	9b01      	ldr	r3, [sp, #4]
 80210a8:	fb09 8803 	mla	r8, r9, r3, r8
 80210ac:	9b04      	ldr	r3, [sp, #16]
 80210ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80210b2:	9b02      	ldr	r3, [sp, #8]
 80210b4:	fb02 880e 	mla	r8, r2, lr, r8
 80210b8:	fb09 cc03 	mla	ip, r9, r3, ip
 80210bc:	9b04      	ldr	r3, [sp, #16]
 80210be:	fb0b 8805 	mla	r8, fp, r5, r8
 80210c2:	fb02 c707 	mla	r7, r2, r7, ip
 80210c6:	fb03 f30a 	mul.w	r3, r3, sl
 80210ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 80210ce:	fb0b 7404 	mla	r4, fp, r4, r7
 80210d2:	f881 8000 	strb.w	r8, [r1]
 80210d6:	1224      	asrs	r4, r4, #8
 80210d8:	704c      	strb	r4, [r1, #1]
 80210da:	9c03      	ldr	r4, [sp, #12]
 80210dc:	fb09 3904 	mla	r9, r9, r4, r3
 80210e0:	fb02 9206 	mla	r2, r2, r6, r9
 80210e4:	fb0b 2000 	mla	r0, fp, r0, r2
 80210e8:	1200      	asrs	r0, r0, #8
 80210ea:	7088      	strb	r0, [r1, #2]
 80210ec:	b007      	add	sp, #28
 80210ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210f2:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80210f6:	9501      	str	r5, [sp, #4]
 80210f8:	e78c      	b.n	8021014 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 80210fa:	4682      	mov	sl, r0
 80210fc:	46a4      	mov	ip, r4
 80210fe:	46a8      	mov	r8, r5
 8021100:	9501      	str	r5, [sp, #4]
 8021102:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8021106:	e793      	b.n	8021030 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8021108:	4682      	mov	sl, r0
 802110a:	46a4      	mov	ip, r4
 802110c:	46a8      	mov	r8, r5
 802110e:	e78f      	b.n	8021030 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8021110:	4606      	mov	r6, r0
 8021112:	4627      	mov	r7, r4
 8021114:	46ae      	mov	lr, r5
 8021116:	e7a0      	b.n	802105a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021118:	4606      	mov	r6, r0
 802111a:	4627      	mov	r7, r4
 802111c:	46ae      	mov	lr, r5
 802111e:	e7ac      	b.n	802107a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08021120 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021124:	b09b      	sub	sp, #108	@ 0x6c
 8021126:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021128:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802112a:	9019      	str	r0, [sp, #100]	@ 0x64
 802112c:	9109      	str	r1, [sp, #36]	@ 0x24
 802112e:	6850      	ldr	r0, [r2, #4]
 8021130:	9306      	str	r3, [sp, #24]
 8021132:	6812      	ldr	r2, [r2, #0]
 8021134:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8021138:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 802113c:	fb00 1303 	mla	r3, r0, r3, r1
 8021140:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021144:	18d3      	adds	r3, r2, r3
 8021146:	9307      	str	r3, [sp, #28]
 8021148:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	9308      	str	r3, [sp, #32]
 802114e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021150:	2b00      	cmp	r3, #0
 8021152:	dc03      	bgt.n	802115c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021156:	2b00      	cmp	r3, #0
 8021158:	f340 81ab 	ble.w	80214b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802115c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802115e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021162:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021166:	1e48      	subs	r0, r1, #1
 8021168:	1e55      	subs	r5, r2, #1
 802116a:	9b06      	ldr	r3, [sp, #24]
 802116c:	2b00      	cmp	r3, #0
 802116e:	f340 80b1 	ble.w	80212d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021172:	ea5f 462b 	movs.w	r6, fp, asr #16
 8021176:	ea4f 4324 	mov.w	r3, r4, asr #16
 802117a:	d406      	bmi.n	802118a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802117c:	4286      	cmp	r6, r0
 802117e:	da04      	bge.n	802118a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021180:	2b00      	cmp	r3, #0
 8021182:	db02      	blt.n	802118a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021184:	42ab      	cmp	r3, r5
 8021186:	f2c0 80a6 	blt.w	80212d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802118a:	3601      	adds	r6, #1
 802118c:	f100 8097 	bmi.w	80212be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021190:	42b1      	cmp	r1, r6
 8021192:	f2c0 8094 	blt.w	80212be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021196:	3301      	adds	r3, #1
 8021198:	f100 8091 	bmi.w	80212be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802119c:	429a      	cmp	r2, r3
 802119e:	f2c0 808e 	blt.w	80212be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80211a2:	9b06      	ldr	r3, [sp, #24]
 80211a4:	9e07      	ldr	r6, [sp, #28]
 80211a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80211a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	f340 80b0 	ble.w	8021310 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80211b0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80211b2:	1425      	asrs	r5, r4, #16
 80211b4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80211b6:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80211ba:	68c7      	ldr	r7, [r0, #12]
 80211bc:	ea5f 402b 	movs.w	r0, fp, asr #16
 80211c0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80211c4:	689b      	ldr	r3, [r3, #8]
 80211c6:	f100 80ea 	bmi.w	802139e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80211ca:	f103 3cff 	add.w	ip, r3, #4294967295
 80211ce:	4560      	cmp	r0, ip
 80211d0:	f280 80e5 	bge.w	802139e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80211d4:	2d00      	cmp	r5, #0
 80211d6:	f2c0 80e2 	blt.w	802139e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80211da:	f107 3cff 	add.w	ip, r7, #4294967295
 80211de:	4565      	cmp	r5, ip
 80211e0:	f280 80dd 	bge.w	802139e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80211e4:	b21b      	sxth	r3, r3
 80211e6:	fb05 0003 	mla	r0, r5, r3, r0
 80211ea:	9d08      	ldr	r5, [sp, #32]
 80211ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80211f0:	182f      	adds	r7, r5, r0
 80211f2:	5c2d      	ldrb	r5, [r5, r0]
 80211f4:	7878      	ldrb	r0, [r7, #1]
 80211f6:	f897 e002 	ldrb.w	lr, [r7, #2]
 80211fa:	900c      	str	r0, [sp, #48]	@ 0x30
 80211fc:	f897 9003 	ldrb.w	r9, [r7, #3]
 8021200:	f897 8004 	ldrb.w	r8, [r7, #4]
 8021204:	f897 a005 	ldrb.w	sl, [r7, #5]
 8021208:	b1c9      	cbz	r1, 802123e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802120a:	f04f 0c03 	mov.w	ip, #3
 802120e:	f06f 0004 	mvn.w	r0, #4
 8021212:	3705      	adds	r7, #5
 8021214:	fb13 030c 	smlabb	r3, r3, ip, r0
 8021218:	eb07 0c03 	add.w	ip, r7, r3
 802121c:	5cfb      	ldrb	r3, [r7, r3]
 802121e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021220:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021224:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021226:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802122a:	9311      	str	r3, [sp, #68]	@ 0x44
 802122c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021230:	930e      	str	r3, [sp, #56]	@ 0x38
 8021232:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8021236:	9310      	str	r3, [sp, #64]	@ 0x40
 8021238:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802123c:	9312      	str	r3, [sp, #72]	@ 0x48
 802123e:	b292      	uxth	r2, r2
 8021240:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021242:	b289      	uxth	r1, r1
 8021244:	fb02 f301 	mul.w	r3, r2, r1
 8021248:	0112      	lsls	r2, r2, #4
 802124a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802124e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8021252:	1ad2      	subs	r2, r2, r3
 8021254:	b289      	uxth	r1, r1
 8021256:	b292      	uxth	r2, r2
 8021258:	1a7f      	subs	r7, r7, r1
 802125a:	fb02 f909 	mul.w	r9, r2, r9
 802125e:	b2bf      	uxth	r7, r7
 8021260:	fb02 f808 	mul.w	r8, r2, r8
 8021264:	fb02 fa0a 	mul.w	sl, r2, sl
 8021268:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802126a:	fb07 9905 	mla	r9, r7, r5, r9
 802126e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021270:	fb07 8800 	mla	r8, r7, r0, r8
 8021274:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021276:	fb07 aa0e 	mla	sl, r7, lr, sl
 802127a:	fb01 9905 	mla	r9, r1, r5, r9
 802127e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021280:	fb01 8800 	mla	r8, r1, r0, r8
 8021284:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021286:	fb01 a102 	mla	r1, r1, r2, sl
 802128a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802128c:	fb03 9905 	mla	r9, r3, r5, r9
 8021290:	fb03 8800 	mla	r8, r3, r0, r8
 8021294:	fb03 1302 	mla	r3, r3, r2, r1
 8021298:	ea4f 2929 	mov.w	r9, r9, asr #8
 802129c:	ea4f 2828 	mov.w	r8, r8, asr #8
 80212a0:	121b      	asrs	r3, r3, #8
 80212a2:	f886 9000 	strb.w	r9, [r6]
 80212a6:	f886 8001 	strb.w	r8, [r6, #1]
 80212aa:	70b3      	strb	r3, [r6, #2]
 80212ac:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80212ae:	3603      	adds	r6, #3
 80212b0:	449b      	add	fp, r3
 80212b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80212b4:	441c      	add	r4, r3
 80212b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80212b8:	3b01      	subs	r3, #1
 80212ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80212bc:	e774      	b.n	80211a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80212be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80212c0:	449b      	add	fp, r3
 80212c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80212c4:	441c      	add	r4, r3
 80212c6:	9b06      	ldr	r3, [sp, #24]
 80212c8:	3b01      	subs	r3, #1
 80212ca:	9306      	str	r3, [sp, #24]
 80212cc:	9b07      	ldr	r3, [sp, #28]
 80212ce:	3303      	adds	r3, #3
 80212d0:	9307      	str	r3, [sp, #28]
 80212d2:	e74a      	b.n	802116a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80212d4:	d024      	beq.n	8021320 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80212d6:	9b06      	ldr	r3, [sp, #24]
 80212d8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80212da:	3b01      	subs	r3, #1
 80212dc:	fb00 b003 	mla	r0, r0, r3, fp
 80212e0:	1400      	asrs	r0, r0, #16
 80212e2:	f53f af5e 	bmi.w	80211a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80212e6:	3901      	subs	r1, #1
 80212e8:	4288      	cmp	r0, r1
 80212ea:	f6bf af5a 	bge.w	80211a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80212ee:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80212f0:	fb01 4303 	mla	r3, r1, r3, r4
 80212f4:	141b      	asrs	r3, r3, #16
 80212f6:	f53f af54 	bmi.w	80211a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80212fa:	3a01      	subs	r2, #1
 80212fc:	4293      	cmp	r3, r2
 80212fe:	f6bf af50 	bge.w	80211a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021302:	9b07      	ldr	r3, [sp, #28]
 8021304:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021308:	1cde      	adds	r6, r3, #3
 802130a:	f1be 0f00 	cmp.w	lr, #0
 802130e:	dc5f      	bgt.n	80213d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021310:	9b06      	ldr	r3, [sp, #24]
 8021312:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021316:	9b07      	ldr	r3, [sp, #28]
 8021318:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802131c:	4423      	add	r3, r4
 802131e:	9307      	str	r3, [sp, #28]
 8021320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021322:	2b00      	cmp	r3, #0
 8021324:	f340 80c5 	ble.w	80214b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021328:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802132c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802132e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021332:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021336:	eef0 6a62 	vmov.f32	s13, s5
 802133a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802133e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021342:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021346:	ee16 ba90 	vmov	fp, s13
 802134a:	eef0 6a43 	vmov.f32	s13, s6
 802134e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021352:	ee16 4a90 	vmov	r4, s13
 8021356:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802135a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802135e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021362:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021366:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802136a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802136e:	ee12 2a90 	vmov	r2, s5
 8021372:	eef0 2a47 	vmov.f32	s5, s14
 8021376:	fb92 f3f3 	sdiv	r3, r2, r3
 802137a:	ee13 2a10 	vmov	r2, s6
 802137e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8021380:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021382:	eeb0 3a67 	vmov.f32	s6, s15
 8021386:	fb92 f3f3 	sdiv	r3, r2, r3
 802138a:	9328      	str	r3, [sp, #160]	@ 0xa0
 802138c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802138e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021390:	3b01      	subs	r3, #1
 8021392:	9309      	str	r3, [sp, #36]	@ 0x24
 8021394:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021396:	bf08      	it	eq
 8021398:	4613      	moveq	r3, r2
 802139a:	9306      	str	r3, [sp, #24]
 802139c:	e6d7      	b.n	802114e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802139e:	f110 0c01 	adds.w	ip, r0, #1
 80213a2:	d483      	bmi.n	80212ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80213a4:	4563      	cmp	r3, ip
 80213a6:	db81      	blt.n	80212ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80213a8:	f115 0c01 	adds.w	ip, r5, #1
 80213ac:	f53f af7e 	bmi.w	80212ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80213b0:	4567      	cmp	r7, ip
 80213b2:	f6ff af7b 	blt.w	80212ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80213b6:	b23f      	sxth	r7, r7
 80213b8:	b21b      	sxth	r3, r3
 80213ba:	9700      	str	r7, [sp, #0]
 80213bc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80213c0:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80213c4:	9a08      	ldr	r2, [sp, #32]
 80213c6:	4631      	mov	r1, r6
 80213c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80213ca:	f7ff fdf9 	bl	8020fc0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80213ce:	e76d      	b.n	80212ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80213d0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80213d2:	ea4f 402b 	mov.w	r0, fp, asr #16
 80213d6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80213da:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80213de:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 80213e2:	1421      	asrs	r1, r4, #16
 80213e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80213e6:	fb0c 0101 	mla	r1, ip, r1, r0
 80213ea:	9808      	ldr	r0, [sp, #32]
 80213ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80213f0:	1845      	adds	r5, r0, r1
 80213f2:	5c40      	ldrb	r0, [r0, r1]
 80213f4:	796f      	ldrb	r7, [r5, #5]
 80213f6:	7869      	ldrb	r1, [r5, #1]
 80213f8:	f895 8002 	ldrb.w	r8, [r5, #2]
 80213fc:	f895 a003 	ldrb.w	sl, [r5, #3]
 8021400:	f895 9004 	ldrb.w	r9, [r5, #4]
 8021404:	970c      	str	r7, [sp, #48]	@ 0x30
 8021406:	b1a2      	cbz	r2, 8021432 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8021408:	2703      	movs	r7, #3
 802140a:	f06f 0304 	mvn.w	r3, #4
 802140e:	3505      	adds	r5, #5
 8021410:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021414:	eb05 070c 	add.w	r7, r5, ip
 8021418:	f815 500c 	ldrb.w	r5, [r5, ip]
 802141c:	9513      	str	r5, [sp, #76]	@ 0x4c
 802141e:	787d      	ldrb	r5, [r7, #1]
 8021420:	9515      	str	r5, [sp, #84]	@ 0x54
 8021422:	78bd      	ldrb	r5, [r7, #2]
 8021424:	9517      	str	r5, [sp, #92]	@ 0x5c
 8021426:	78fd      	ldrb	r5, [r7, #3]
 8021428:	9514      	str	r5, [sp, #80]	@ 0x50
 802142a:	793d      	ldrb	r5, [r7, #4]
 802142c:	9516      	str	r5, [sp, #88]	@ 0x58
 802142e:	797d      	ldrb	r5, [r7, #5]
 8021430:	9518      	str	r5, [sp, #96]	@ 0x60
 8021432:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021436:	b292      	uxth	r2, r2
 8021438:	3603      	adds	r6, #3
 802143a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802143e:	fb03 f502 	mul.w	r5, r3, r2
 8021442:	011b      	lsls	r3, r3, #4
 8021444:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021448:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 802144c:	1b5b      	subs	r3, r3, r5
 802144e:	b292      	uxth	r2, r2
 8021450:	b29b      	uxth	r3, r3
 8021452:	1abf      	subs	r7, r7, r2
 8021454:	fb03 f909 	mul.w	r9, r3, r9
 8021458:	b2bf      	uxth	r7, r7
 802145a:	fb03 fa0a 	mul.w	sl, r3, sl
 802145e:	fb07 9901 	mla	r9, r7, r1, r9
 8021462:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021464:	fb07 aa00 	mla	sl, r7, r0, sl
 8021468:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802146a:	fb02 9901 	mla	r9, r2, r1, r9
 802146e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021470:	fb02 aa00 	mla	sl, r2, r0, sl
 8021474:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8021476:	fb05 9901 	mla	r9, r5, r1, r9
 802147a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802147c:	fb05 aa00 	mla	sl, r5, r0, sl
 8021480:	434b      	muls	r3, r1
 8021482:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021484:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021488:	fb07 3308 	mla	r3, r7, r8, r3
 802148c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021490:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021494:	fb02 3201 	mla	r2, r2, r1, r3
 8021498:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802149a:	f806 9c05 	strb.w	r9, [r6, #-5]
 802149e:	fb05 2503 	mla	r5, r5, r3, r2
 80214a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80214a4:	122d      	asrs	r5, r5, #8
 80214a6:	449b      	add	fp, r3
 80214a8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80214aa:	f806 5c04 	strb.w	r5, [r6, #-4]
 80214ae:	441c      	add	r4, r3
 80214b0:	e72b      	b.n	802130a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214b2:	b01b      	add	sp, #108	@ 0x6c
 80214b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080214b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80214b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214bc:	b087      	sub	sp, #28
 80214be:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80214c2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80214c6:	fb05 7003 	mla	r0, r5, r3, r7
 80214ca:	2d00      	cmp	r5, #0
 80214cc:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80214d0:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80214d4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80214d8:	f2c0 811f 	blt.w	802171a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80214dc:	45a8      	cmp	r8, r5
 80214de:	f340 811c 	ble.w	802171a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80214e2:	2f00      	cmp	r7, #0
 80214e4:	f2c0 8117 	blt.w	8021716 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80214e8:	42bb      	cmp	r3, r7
 80214ea:	f340 8114 	ble.w	8021716 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80214ee:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80214f2:	1c7a      	adds	r2, r7, #1
 80214f4:	f100 8114 	bmi.w	8021720 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80214f8:	4293      	cmp	r3, r2
 80214fa:	f340 8111 	ble.w	8021720 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80214fe:	2c00      	cmp	r4, #0
 8021500:	f000 8110 	beq.w	8021724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8021504:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021508:	3501      	adds	r5, #1
 802150a:	f100 810f 	bmi.w	802172c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802150e:	45a8      	cmp	r8, r5
 8021510:	f340 810c 	ble.w	802172c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021514:	f1be 0f00 	cmp.w	lr, #0
 8021518:	f000 810b 	beq.w	8021732 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802151c:	2f00      	cmp	r7, #0
 802151e:	f2c0 8103 	blt.w	8021728 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8021522:	42bb      	cmp	r3, r7
 8021524:	f340 8100 	ble.w	8021728 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8021528:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802152c:	3701      	adds	r7, #1
 802152e:	f100 8103 	bmi.w	8021738 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021532:	42bb      	cmp	r3, r7
 8021534:	f340 8100 	ble.w	8021738 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021538:	2c00      	cmp	r4, #0
 802153a:	f000 80ff 	beq.w	802173c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 802153e:	3301      	adds	r3, #1
 8021540:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021544:	fa1f fc84 	uxth.w	ip, r4
 8021548:	fa1f fe8e 	uxth.w	lr, lr
 802154c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021550:	fb0c f90e 	mul.w	r9, ip, lr
 8021554:	0e13      	lsrs	r3, r2, #24
 8021556:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802155a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802155e:	9302      	str	r3, [sp, #8]
 8021560:	ebac 0709 	sub.w	r7, ip, r9
 8021564:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8021568:	fa1f f48e 	uxth.w	r4, lr
 802156c:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8021570:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021574:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021578:	fb0a fe0e 	mul.w	lr, sl, lr
 802157c:	1b1b      	subs	r3, r3, r4
 802157e:	fb0a f606 	mul.w	r6, sl, r6
 8021582:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021586:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802158a:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802158e:	b29b      	uxth	r3, r3
 8021590:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021594:	b2bf      	uxth	r7, r7
 8021596:	9301      	str	r3, [sp, #4]
 8021598:	44e6      	add	lr, ip
 802159a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802159e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215a2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80215a6:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80215aa:	9303      	str	r3, [sp, #12]
 80215ac:	0a33      	lsrs	r3, r6, #8
 80215ae:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80215b2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80215b6:	9304      	str	r3, [sp, #16]
 80215b8:	fb0b f606 	mul.w	r6, fp, r6
 80215bc:	fb0b f000 	mul.w	r0, fp, r0
 80215c0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80215c4:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80215c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80215cc:	44b6      	add	lr, r6
 80215ce:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80215d2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80215d6:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80215da:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80215de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215e2:	fb08 f606 	mul.w	r6, r8, r6
 80215e6:	0a03      	lsrs	r3, r0, #8
 80215e8:	fb08 f505 	mul.w	r5, r8, r5
 80215ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80215f0:	0a30      	lsrs	r0, r6, #8
 80215f2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80215f6:	9305      	str	r3, [sp, #20]
 80215f8:	0e13      	lsrs	r3, r2, #24
 80215fa:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80215fe:	fb0e fe07 	mul.w	lr, lr, r7
 8021602:	4430      	add	r0, r6
 8021604:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8021608:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802160c:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8021610:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021614:	0a00      	lsrs	r0, r0, #8
 8021616:	435e      	muls	r6, r3
 8021618:	0a2d      	lsrs	r5, r5, #8
 802161a:	435a      	muls	r2, r3
 802161c:	9b03      	ldr	r3, [sp, #12]
 802161e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021622:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021626:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802162a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802162e:	44b4      	add	ip, r6
 8021630:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8021634:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021638:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802163c:	9e01      	ldr	r6, [sp, #4]
 802163e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021642:	fb03 ee06 	mla	lr, r3, r6, lr
 8021646:	9b04      	ldr	r3, [sp, #16]
 8021648:	0a12      	lsrs	r2, r2, #8
 802164a:	fb0c ee09 	mla	lr, ip, r9, lr
 802164e:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8021652:	9b05      	ldr	r3, [sp, #20]
 8021654:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021658:	fb00 ee04 	mla	lr, r0, r4, lr
 802165c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021660:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8021664:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8021668:	9b01      	ldr	r3, [sp, #4]
 802166a:	fb07 fe0e 	mul.w	lr, r7, lr
 802166e:	fb07 f70b 	mul.w	r7, r7, fp
 8021672:	fb03 ee06 	mla	lr, r3, r6, lr
 8021676:	fb03 730a 	mla	r3, r3, sl, r7
 802167a:	fb09 e202 	mla	r2, r9, r2, lr
 802167e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8021682:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021686:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 802168a:	fb04 3408 	mla	r4, r4, r8, r3
 802168e:	9b02      	ldr	r3, [sp, #8]
 8021690:	b292      	uxth	r2, r2
 8021692:	fb09 4903 	mla	r9, r9, r3, r4
 8021696:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802169a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802169e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80216a2:	fb09 f902 	mul.w	r9, r9, r2
 80216a6:	ea40 0e0e 	orr.w	lr, r0, lr
 80216aa:	f109 0301 	add.w	r3, r9, #1
 80216ae:	fa5f f08e 	uxtb.w	r0, lr
 80216b2:	fb10 f002 	smulbb	r0, r0, r2
 80216b6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80216ba:	780b      	ldrb	r3, [r1, #0]
 80216bc:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 80216c0:	fa5f f989 	uxtb.w	r9, r9
 80216c4:	fb03 0309 	mla	r3, r3, r9, r0
 80216c8:	b29b      	uxth	r3, r3
 80216ca:	1c58      	adds	r0, r3, #1
 80216cc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80216d0:	7848      	ldrb	r0, [r1, #1]
 80216d2:	fb10 f009 	smulbb	r0, r0, r9
 80216d6:	121b      	asrs	r3, r3, #8
 80216d8:	700b      	strb	r3, [r1, #0]
 80216da:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80216de:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80216e2:	fb03 0302 	mla	r3, r3, r2, r0
 80216e6:	b29b      	uxth	r3, r3
 80216e8:	1c58      	adds	r0, r3, #1
 80216ea:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80216ee:	121b      	asrs	r3, r3, #8
 80216f0:	704b      	strb	r3, [r1, #1]
 80216f2:	788b      	ldrb	r3, [r1, #2]
 80216f4:	fb13 f909 	smulbb	r9, r3, r9
 80216f8:	fb0e 9e02 	mla	lr, lr, r2, r9
 80216fc:	fa1f fe8e 	uxth.w	lr, lr
 8021700:	f10e 0301 	add.w	r3, lr, #1
 8021704:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8021708:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802170c:	f881 e002 	strb.w	lr, [r1, #2]
 8021710:	b007      	add	sp, #28
 8021712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021716:	2600      	movs	r6, #0
 8021718:	e6eb      	b.n	80214f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 802171a:	2000      	movs	r0, #0
 802171c:	4606      	mov	r6, r0
 802171e:	e6f3      	b.n	8021508 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021720:	2000      	movs	r0, #0
 8021722:	e6f1      	b.n	8021508 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021724:	4620      	mov	r0, r4
 8021726:	e6ef      	b.n	8021508 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021728:	2500      	movs	r5, #0
 802172a:	e6ff      	b.n	802152c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 802172c:	2200      	movs	r2, #0
 802172e:	4615      	mov	r5, r2
 8021730:	e708      	b.n	8021544 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021732:	4672      	mov	r2, lr
 8021734:	4675      	mov	r5, lr
 8021736:	e705      	b.n	8021544 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021738:	2200      	movs	r2, #0
 802173a:	e703      	b.n	8021544 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802173c:	4622      	mov	r2, r4
 802173e:	e701      	b.n	8021544 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08021740 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021744:	b09d      	sub	sp, #116	@ 0x74
 8021746:	9219      	str	r2, [sp, #100]	@ 0x64
 8021748:	9307      	str	r3, [sp, #28]
 802174a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 802174c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8021750:	901b      	str	r0, [sp, #108]	@ 0x6c
 8021752:	931a      	str	r3, [sp, #104]	@ 0x68
 8021754:	6850      	ldr	r0, [r2, #4]
 8021756:	9117      	str	r1, [sp, #92]	@ 0x5c
 8021758:	6812      	ldr	r2, [r2, #0]
 802175a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802175e:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8021762:	fb00 1303 	mla	r3, r0, r3, r1
 8021766:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802176a:	18d3      	adds	r3, r2, r3
 802176c:	930a      	str	r3, [sp, #40]	@ 0x28
 802176e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021770:	681b      	ldr	r3, [r3, #0]
 8021772:	9310      	str	r3, [sp, #64]	@ 0x40
 8021774:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8021778:	930b      	str	r3, [sp, #44]	@ 0x2c
 802177a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802177c:	2b00      	cmp	r3, #0
 802177e:	dc03      	bgt.n	8021788 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021780:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021782:	2b00      	cmp	r3, #0
 8021784:	f340 8368 	ble.w	8021e58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021788:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802178a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802178e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021792:	1e48      	subs	r0, r1, #1
 8021794:	1e57      	subs	r7, r2, #1
 8021796:	9b07      	ldr	r3, [sp, #28]
 8021798:	2b00      	cmp	r3, #0
 802179a:	f340 8187 	ble.w	8021aac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802179e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80217a2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80217a6:	d406      	bmi.n	80217b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80217a8:	4584      	cmp	ip, r0
 80217aa:	da04      	bge.n	80217b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	db02      	blt.n	80217b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80217b0:	42bb      	cmp	r3, r7
 80217b2:	f2c0 817c 	blt.w	8021aae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80217b6:	f11c 0c01 	adds.w	ip, ip, #1
 80217ba:	f100 816c 	bmi.w	8021a96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80217be:	4561      	cmp	r1, ip
 80217c0:	f2c0 8169 	blt.w	8021a96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80217c4:	3301      	adds	r3, #1
 80217c6:	f100 8166 	bmi.w	8021a96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80217ca:	429a      	cmp	r2, r3
 80217cc:	f2c0 8163 	blt.w	8021a96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80217d0:	9b07      	ldr	r3, [sp, #28]
 80217d2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80217d4:	9318      	str	r3, [sp, #96]	@ 0x60
 80217d6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80217d8:	2b00      	cmp	r3, #0
 80217da:	f340 8186 	ble.w	8021aea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80217de:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80217e0:	142a      	asrs	r2, r5, #16
 80217e2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80217e6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80217ea:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80217ee:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80217f2:	f100 81cb 	bmi.w	8021b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80217f6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80217fa:	4542      	cmp	r2, r8
 80217fc:	f280 81c6 	bge.w	8021b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021800:	2800      	cmp	r0, #0
 8021802:	f2c0 81c3 	blt.w	8021b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021806:	f103 38ff 	add.w	r8, r3, #4294967295
 802180a:	4540      	cmp	r0, r8
 802180c:	f280 81be 	bge.w	8021b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021810:	fa0f f38e 	sxth.w	r3, lr
 8021814:	fb00 2203 	mla	r2, r0, r3, r2
 8021818:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802181a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802181e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8021822:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021826:	2900      	cmp	r1, #0
 8021828:	f000 81a6 	beq.w	8021b78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802182c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021830:	900c      	str	r0, [sp, #48]	@ 0x30
 8021832:	0e00      	lsrs	r0, r0, #24
 8021834:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021836:	f1bc 0f00 	cmp.w	ip, #0
 802183a:	d00f      	beq.n	802185c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802183c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8021840:	3b01      	subs	r3, #1
 8021842:	009b      	lsls	r3, r3, #2
 8021844:	3304      	adds	r3, #4
 8021846:	eb08 0003 	add.w	r0, r8, r3
 802184a:	f858 3003 	ldr.w	r3, [r8, r3]
 802184e:	9308      	str	r3, [sp, #32]
 8021850:	0e1b      	lsrs	r3, r3, #24
 8021852:	9311      	str	r3, [sp, #68]	@ 0x44
 8021854:	6843      	ldr	r3, [r0, #4]
 8021856:	930d      	str	r3, [sp, #52]	@ 0x34
 8021858:	0e1b      	lsrs	r3, r3, #24
 802185a:	9314      	str	r3, [sp, #80]	@ 0x50
 802185c:	b289      	uxth	r1, r1
 802185e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021860:	fa1f fc8c 	uxth.w	ip, ip
 8021864:	0108      	lsls	r0, r1, #4
 8021866:	fb01 f90c 	mul.w	r9, r1, ip
 802186a:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802186e:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8021872:	eba0 0809 	sub.w	r8, r0, r9
 8021876:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021878:	fa1f f18c 	uxth.w	r1, ip
 802187c:	fa1f f888 	uxth.w	r8, r8
 8021880:	1a5b      	subs	r3, r3, r1
 8021882:	fb08 f000 	mul.w	r0, r8, r0
 8021886:	b29b      	uxth	r3, r3
 8021888:	fb03 000e 	mla	r0, r3, lr, r0
 802188c:	fb01 0004 	mla	r0, r1, r4, r0
 8021890:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021892:	fb09 0004 	mla	r0, r9, r4, r0
 8021896:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802189a:	2800      	cmp	r0, #0
 802189c:	f000 80f2 	beq.w	8021a84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80218a0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80218a4:	d01b      	beq.n	80218de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80218a6:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80218aa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80218ae:	fb0e fa0a 	mul.w	sl, lr, sl
 80218b2:	fb0e fe02 	mul.w	lr, lr, r2
 80218b6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80218ba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80218be:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80218c2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80218c6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80218ca:	4452      	add	r2, sl
 80218cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218d0:	0a12      	lsrs	r2, r2, #8
 80218d2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80218d6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80218da:	ea42 020c 	orr.w	r2, r2, ip
 80218de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80218e0:	2cff      	cmp	r4, #255	@ 0xff
 80218e2:	d021      	beq.n	8021928 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80218e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80218e6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80218ea:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80218ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80218f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80218f2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80218f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80218f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80218fc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021900:	fb04 fa0a 	mul.w	sl, r4, sl
 8021904:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021908:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802190c:	44de      	add	lr, fp
 802190e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021912:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021916:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802191a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802191e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021922:	ea4e 040a 	orr.w	r4, lr, sl
 8021926:	940c      	str	r4, [sp, #48]	@ 0x30
 8021928:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802192a:	2cff      	cmp	r4, #255	@ 0xff
 802192c:	d021      	beq.n	8021972 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802192e:	9c08      	ldr	r4, [sp, #32]
 8021930:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021934:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021936:	fb04 fb0b 	mul.w	fp, r4, fp
 802193a:	9c08      	ldr	r4, [sp, #32]
 802193c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021940:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021942:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021946:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802194a:	fb04 fa0a 	mul.w	sl, r4, sl
 802194e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021952:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021956:	44de      	add	lr, fp
 8021958:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802195c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021960:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021964:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021968:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802196c:	ea4e 040a 	orr.w	r4, lr, sl
 8021970:	9408      	str	r4, [sp, #32]
 8021972:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021974:	2cff      	cmp	r4, #255	@ 0xff
 8021976:	d021      	beq.n	80219bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021978:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802197a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802197e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021980:	fb04 fb0b 	mul.w	fp, r4, fp
 8021984:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021986:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802198a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802198c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021990:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021994:	fb04 fa0a 	mul.w	sl, r4, sl
 8021998:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802199c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80219a0:	44de      	add	lr, fp
 80219a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80219a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80219aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80219ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80219b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80219b6:	ea4e 040a 	orr.w	r4, lr, sl
 80219ba:	940d      	str	r4, [sp, #52]	@ 0x34
 80219bc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80219be:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80219c2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80219c6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80219ca:	9c08      	ldr	r4, [sp, #32]
 80219cc:	fb08 fc0c 	mul.w	ip, r8, ip
 80219d0:	fb03 cc0e 	mla	ip, r3, lr, ip
 80219d4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80219d8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80219da:	fb01 cc0e 	mla	ip, r1, lr, ip
 80219de:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80219e2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80219e4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80219e8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80219ec:	fb08 f80e 	mul.w	r8, r8, lr
 80219f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219f4:	fb03 8202 	mla	r2, r3, r2, r8
 80219f8:	9b08      	ldr	r3, [sp, #32]
 80219fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80219fe:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8021a02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021a04:	fb01 220a 	mla	r2, r1, sl, r2
 8021a08:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8021a0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021a0e:	fb09 2901 	mla	r9, r9, r1, r2
 8021a12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021a14:	4343      	muls	r3, r0
 8021a16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021a1a:	1c58      	adds	r0, r3, #1
 8021a1c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8021a20:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021a24:	783b      	ldrb	r3, [r7, #0]
 8021a26:	ea4c 0c09 	orr.w	ip, ip, r9
 8021a2a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021a2e:	fa5f f28c 	uxtb.w	r2, ip
 8021a32:	b2c0      	uxtb	r0, r0
 8021a34:	fb12 f201 	smulbb	r2, r2, r1
 8021a38:	fb03 2300 	mla	r3, r3, r0, r2
 8021a3c:	b29b      	uxth	r3, r3
 8021a3e:	1c5a      	adds	r2, r3, #1
 8021a40:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a44:	787a      	ldrb	r2, [r7, #1]
 8021a46:	fb12 f200 	smulbb	r2, r2, r0
 8021a4a:	121b      	asrs	r3, r3, #8
 8021a4c:	703b      	strb	r3, [r7, #0]
 8021a4e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021a52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021a56:	fb03 2301 	mla	r3, r3, r1, r2
 8021a5a:	b29b      	uxth	r3, r3
 8021a5c:	1c5a      	adds	r2, r3, #1
 8021a5e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a62:	121b      	asrs	r3, r3, #8
 8021a64:	707b      	strb	r3, [r7, #1]
 8021a66:	78bb      	ldrb	r3, [r7, #2]
 8021a68:	fb13 f000 	smulbb	r0, r3, r0
 8021a6c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021a70:	fa1f fc8c 	uxth.w	ip, ip
 8021a74:	f10c 0301 	add.w	r3, ip, #1
 8021a78:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021a7c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021a80:	f887 c002 	strb.w	ip, [r7, #2]
 8021a84:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021a86:	3703      	adds	r7, #3
 8021a88:	441d      	add	r5, r3
 8021a8a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021a8c:	441e      	add	r6, r3
 8021a8e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021a90:	3b01      	subs	r3, #1
 8021a92:	9318      	str	r3, [sp, #96]	@ 0x60
 8021a94:	e69f      	b.n	80217d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021a96:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021a98:	441d      	add	r5, r3
 8021a9a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021a9c:	441e      	add	r6, r3
 8021a9e:	9b07      	ldr	r3, [sp, #28]
 8021aa0:	3b01      	subs	r3, #1
 8021aa2:	9307      	str	r3, [sp, #28]
 8021aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021aa6:	3303      	adds	r3, #3
 8021aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8021aaa:	e674      	b.n	8021796 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021aac:	d025      	beq.n	8021afa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8021aae:	9b07      	ldr	r3, [sp, #28]
 8021ab0:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8021ab2:	3b01      	subs	r3, #1
 8021ab4:	fb00 5003 	mla	r0, r0, r3, r5
 8021ab8:	1400      	asrs	r0, r0, #16
 8021aba:	f53f ae89 	bmi.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021abe:	3901      	subs	r1, #1
 8021ac0:	4288      	cmp	r0, r1
 8021ac2:	f6bf ae85 	bge.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021ac6:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8021ac8:	fb01 6303 	mla	r3, r1, r3, r6
 8021acc:	141b      	asrs	r3, r3, #16
 8021ace:	f53f ae7f 	bmi.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021ad2:	3a01      	subs	r2, #1
 8021ad4:	4293      	cmp	r3, r2
 8021ad6:	f6bf ae7b 	bge.w	80217d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021ada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021adc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021ae0:	f103 0e03 	add.w	lr, r3, #3
 8021ae4:	f1bb 0f00 	cmp.w	fp, #0
 8021ae8:	dc6e      	bgt.n	8021bc8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8021aea:	9b07      	ldr	r3, [sp, #28]
 8021aec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021af2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021af6:	4423      	add	r3, r4
 8021af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8021afa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	f340 81ab 	ble.w	8021e58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021b06:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021b08:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021b0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021b10:	eef0 6a62 	vmov.f32	s13, s5
 8021b14:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021b18:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021b1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b20:	ee16 5a90 	vmov	r5, s13
 8021b24:	eef0 6a43 	vmov.f32	s13, s6
 8021b28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b2c:	ee16 6a90 	vmov	r6, s13
 8021b30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021b34:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021b38:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021b3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021b40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021b44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021b48:	ee12 2a90 	vmov	r2, s5
 8021b4c:	eef0 2a47 	vmov.f32	s5, s14
 8021b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b54:	ee13 2a10 	vmov	r2, s6
 8021b58:	9329      	str	r3, [sp, #164]	@ 0xa4
 8021b5a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021b5c:	eeb0 3a67 	vmov.f32	s6, s15
 8021b60:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b64:	932a      	str	r3, [sp, #168]	@ 0xa8
 8021b66:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021b68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8021b6a:	3b01      	subs	r3, #1
 8021b6c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021b6e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021b70:	bf08      	it	eq
 8021b72:	4613      	moveq	r3, r2
 8021b74:	9307      	str	r3, [sp, #28]
 8021b76:	e600      	b.n	802177a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021b78:	f1bc 0f00 	cmp.w	ip, #0
 8021b7c:	f43f ae6e 	beq.w	802185c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021b80:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021b84:	9308      	str	r3, [sp, #32]
 8021b86:	0e1b      	lsrs	r3, r3, #24
 8021b88:	9311      	str	r3, [sp, #68]	@ 0x44
 8021b8a:	e667      	b.n	802185c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021b8c:	f112 0801 	adds.w	r8, r2, #1
 8021b90:	f53f af78 	bmi.w	8021a84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021b94:	45c6      	cmp	lr, r8
 8021b96:	f6ff af75 	blt.w	8021a84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021b9a:	f110 0801 	adds.w	r8, r0, #1
 8021b9e:	f53f af71 	bmi.w	8021a84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021ba2:	4543      	cmp	r3, r8
 8021ba4:	f6ff af6e 	blt.w	8021a84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021ba8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8021baa:	b21b      	sxth	r3, r3
 8021bac:	9201      	str	r2, [sp, #4]
 8021bae:	9300      	str	r3, [sp, #0]
 8021bb0:	fa0f f38e 	sxth.w	r3, lr
 8021bb4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021bba:	e9cd c404 	strd	ip, r4, [sp, #16]
 8021bbe:	4639      	mov	r1, r7
 8021bc0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8021bc2:	f7ff fc79 	bl	80214b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021bc6:	e75d      	b.n	8021a84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021bc8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021bca:	142f      	asrs	r7, r5, #16
 8021bcc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021bce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021bd2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021bd6:	1433      	asrs	r3, r6, #16
 8021bd8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021bdc:	fb02 7303 	mla	r3, r2, r3, r7
 8021be0:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8021be4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8021be8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021bec:	2900      	cmp	r1, #0
 8021bee:	f000 812a 	beq.w	8021e46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8021bf2:	687c      	ldr	r4, [r7, #4]
 8021bf4:	940e      	str	r4, [sp, #56]	@ 0x38
 8021bf6:	0e24      	lsrs	r4, r4, #24
 8021bf8:	9415      	str	r4, [sp, #84]	@ 0x54
 8021bfa:	b178      	cbz	r0, 8021c1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021bfc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8021c00:	3a01      	subs	r2, #1
 8021c02:	0092      	lsls	r2, r2, #2
 8021c04:	3204      	adds	r2, #4
 8021c06:	eb07 0802 	add.w	r8, r7, r2
 8021c0a:	58ba      	ldr	r2, [r7, r2]
 8021c0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8021c0e:	0e12      	lsrs	r2, r2, #24
 8021c10:	9212      	str	r2, [sp, #72]	@ 0x48
 8021c12:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8021c16:	920f      	str	r2, [sp, #60]	@ 0x3c
 8021c18:	0e12      	lsrs	r2, r2, #24
 8021c1a:	9216      	str	r2, [sp, #88]	@ 0x58
 8021c1c:	b289      	uxth	r1, r1
 8021c1e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021c20:	b280      	uxth	r0, r0
 8021c22:	fb01 f900 	mul.w	r9, r1, r0
 8021c26:	0109      	lsls	r1, r1, #4
 8021c28:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021c2c:	eba1 0809 	sub.w	r8, r1, r9
 8021c30:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8021c34:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021c36:	b280      	uxth	r0, r0
 8021c38:	fa1f f888 	uxth.w	r8, r8
 8021c3c:	1a12      	subs	r2, r2, r0
 8021c3e:	fb08 f101 	mul.w	r1, r8, r1
 8021c42:	b292      	uxth	r2, r2
 8021c44:	fb02 110c 	mla	r1, r2, ip, r1
 8021c48:	fb00 1104 	mla	r1, r0, r4, r1
 8021c4c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021c4e:	fb09 1104 	mla	r1, r9, r4, r1
 8021c52:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021c56:	2900      	cmp	r1, #0
 8021c58:	f000 80ec 	beq.w	8021e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8021c5c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8021c60:	d019      	beq.n	8021c96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8021c62:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021c66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021c6a:	fb0c fa0a 	mul.w	sl, ip, sl
 8021c6e:	fb0c fc03 	mul.w	ip, ip, r3
 8021c72:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021c76:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021c7a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8021c7e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021c82:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021c86:	4453      	add	r3, sl
 8021c88:	0a3f      	lsrs	r7, r7, #8
 8021c8a:	0a1b      	lsrs	r3, r3, #8
 8021c8c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021c90:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021c94:	433b      	orrs	r3, r7
 8021c96:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021c98:	2cff      	cmp	r4, #255	@ 0xff
 8021c9a:	d020      	beq.n	8021cde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8021c9c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021c9e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021ca2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021ca4:	4367      	muls	r7, r4
 8021ca6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021ca8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021cac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021cb0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021cb2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021cb6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021cba:	fb04 fa0a 	mul.w	sl, r4, sl
 8021cbe:	44bc      	add	ip, r7
 8021cc0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021cc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021cc8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021ccc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021cd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021cd4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021cd8:	ea4c 040a 	orr.w	r4, ip, sl
 8021cdc:	940e      	str	r4, [sp, #56]	@ 0x38
 8021cde:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021ce0:	2cff      	cmp	r4, #255	@ 0xff
 8021ce2:	d020      	beq.n	8021d26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8021ce4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021ce6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021cea:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021cec:	4367      	muls	r7, r4
 8021cee:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021cf0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021cf4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021cf8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021cfa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021cfe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021d02:	fb04 fa0a 	mul.w	sl, r4, sl
 8021d06:	44bc      	add	ip, r7
 8021d08:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021d0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d10:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021d14:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021d18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d1c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021d20:	ea4c 040a 	orr.w	r4, ip, sl
 8021d24:	9409      	str	r4, [sp, #36]	@ 0x24
 8021d26:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021d28:	2cff      	cmp	r4, #255	@ 0xff
 8021d2a:	d020      	beq.n	8021d6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8021d2c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021d2e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021d32:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021d34:	4367      	muls	r7, r4
 8021d36:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021d38:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021d3c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021d40:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021d42:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021d46:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021d4a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021d4e:	44bc      	add	ip, r7
 8021d50:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021d54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d58:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021d5c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021d60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d64:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021d68:	ea4c 040a 	orr.w	r4, ip, sl
 8021d6c:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021d6e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021d70:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8021d74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021d78:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021d7c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021d7e:	fb08 f707 	mul.w	r7, r8, r7
 8021d82:	fb02 770c 	mla	r7, r2, ip, r7
 8021d86:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021d8a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021d8c:	fb00 770c 	mla	r7, r0, ip, r7
 8021d90:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021d94:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021d96:	fb09 770c 	mla	r7, r9, ip, r7
 8021d9a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8021d9e:	fb08 f80c 	mul.w	r8, r8, ip
 8021da2:	0a3f      	lsrs	r7, r7, #8
 8021da4:	fb02 8303 	mla	r3, r2, r3, r8
 8021da8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021daa:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8021dae:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8021db2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021db4:	fb00 330a 	mla	r3, r0, sl, r3
 8021db8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8021dbc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021dbe:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021dc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021dc4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dc8:	434b      	muls	r3, r1
 8021dca:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021dce:	1c59      	adds	r1, r3, #1
 8021dd0:	ea47 070c 	orr.w	r7, r7, ip
 8021dd4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021dd8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021ddc:	b2fa      	uxtb	r2, r7
 8021dde:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021de2:	fb12 f200 	smulbb	r2, r2, r0
 8021de6:	b2c9      	uxtb	r1, r1
 8021de8:	fb03 2301 	mla	r3, r3, r1, r2
 8021dec:	b29b      	uxth	r3, r3
 8021dee:	1c5a      	adds	r2, r3, #1
 8021df0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021df4:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021df8:	fb12 f201 	smulbb	r2, r2, r1
 8021dfc:	121b      	asrs	r3, r3, #8
 8021dfe:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021e02:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021e06:	0c3f      	lsrs	r7, r7, #16
 8021e08:	fb03 2300 	mla	r3, r3, r0, r2
 8021e0c:	b29b      	uxth	r3, r3
 8021e0e:	1c5a      	adds	r2, r3, #1
 8021e10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021e14:	121b      	asrs	r3, r3, #8
 8021e16:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021e1a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021e1e:	fb13 f101 	smulbb	r1, r3, r1
 8021e22:	fb07 1700 	mla	r7, r7, r0, r1
 8021e26:	b2bf      	uxth	r7, r7
 8021e28:	1c79      	adds	r1, r7, #1
 8021e2a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021e2e:	123f      	asrs	r7, r7, #8
 8021e30:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021e34:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021e36:	f10e 0e03 	add.w	lr, lr, #3
 8021e3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021e3e:	441d      	add	r5, r3
 8021e40:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021e42:	441e      	add	r6, r3
 8021e44:	e64e      	b.n	8021ae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021e46:	2800      	cmp	r0, #0
 8021e48:	f43f aee8 	beq.w	8021c1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021e4c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8021e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8021e52:	0e12      	lsrs	r2, r2, #24
 8021e54:	9212      	str	r2, [sp, #72]	@ 0x48
 8021e56:	e6e1      	b.n	8021c1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021e58:	b01d      	add	sp, #116	@ 0x74
 8021e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e5e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e62:	b087      	sub	sp, #28
 8021e64:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8021e68:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8021e6c:	fb05 7003 	mla	r0, r5, r3, r7
 8021e70:	2d00      	cmp	r5, #0
 8021e72:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8021e76:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8021e7a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8021e7e:	f2c0 810a 	blt.w	8022096 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021e82:	45a8      	cmp	r8, r5
 8021e84:	f340 8107 	ble.w	8022096 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021e88:	2f00      	cmp	r7, #0
 8021e8a:	f2c0 8102 	blt.w	8022092 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021e8e:	42bb      	cmp	r3, r7
 8021e90:	f340 80ff 	ble.w	8022092 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021e94:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021e98:	1c7a      	adds	r2, r7, #1
 8021e9a:	f100 80ff 	bmi.w	802209c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021e9e:	4293      	cmp	r3, r2
 8021ea0:	f340 80fc 	ble.w	802209c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021ea4:	2c00      	cmp	r4, #0
 8021ea6:	f000 80fb 	beq.w	80220a0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8021eaa:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021eae:	3501      	adds	r5, #1
 8021eb0:	f100 80fa 	bmi.w	80220a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021eb4:	45a8      	cmp	r8, r5
 8021eb6:	f340 80f7 	ble.w	80220a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021eba:	f1be 0f00 	cmp.w	lr, #0
 8021ebe:	f000 80f6 	beq.w	80220ae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8021ec2:	2f00      	cmp	r7, #0
 8021ec4:	f2c0 80ee 	blt.w	80220a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021ec8:	42bb      	cmp	r3, r7
 8021eca:	f340 80eb 	ble.w	80220a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021ece:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8021ed2:	3701      	adds	r7, #1
 8021ed4:	f100 80ee 	bmi.w	80220b4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021ed8:	42bb      	cmp	r3, r7
 8021eda:	f340 80eb 	ble.w	80220b4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021ede:	2c00      	cmp	r4, #0
 8021ee0:	f000 80ea 	beq.w	80220b8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8021ee4:	3301      	adds	r3, #1
 8021ee6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021eea:	fa1f fc84 	uxth.w	ip, r4
 8021eee:	fa1f fe8e 	uxth.w	lr, lr
 8021ef2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021ef6:	fb0c f90e 	mul.w	r9, ip, lr
 8021efa:	0e13      	lsrs	r3, r2, #24
 8021efc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021f00:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8021f04:	9302      	str	r3, [sp, #8]
 8021f06:	ebac 0709 	sub.w	r7, ip, r9
 8021f0a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8021f0e:	fa1f f48e 	uxth.w	r4, lr
 8021f12:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8021f16:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021f1a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021f1e:	fb0a fe0e 	mul.w	lr, sl, lr
 8021f22:	1b1b      	subs	r3, r3, r4
 8021f24:	fb0a f606 	mul.w	r6, sl, r6
 8021f28:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021f2c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021f30:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8021f34:	b29b      	uxth	r3, r3
 8021f36:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021f3a:	b2bf      	uxth	r7, r7
 8021f3c:	9301      	str	r3, [sp, #4]
 8021f3e:	44e6      	add	lr, ip
 8021f40:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8021f44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f48:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021f4c:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8021f50:	9303      	str	r3, [sp, #12]
 8021f52:	0a33      	lsrs	r3, r6, #8
 8021f54:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8021f58:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8021f5c:	9304      	str	r3, [sp, #16]
 8021f5e:	fb0b f606 	mul.w	r6, fp, r6
 8021f62:	fb0b f000 	mul.w	r0, fp, r0
 8021f66:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8021f6a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021f6e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021f72:	44b6      	add	lr, r6
 8021f74:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8021f78:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021f7c:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8021f80:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8021f84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f88:	fb08 f606 	mul.w	r6, r8, r6
 8021f8c:	0a03      	lsrs	r3, r0, #8
 8021f8e:	fb08 f505 	mul.w	r5, r8, r5
 8021f92:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021f96:	0a30      	lsrs	r0, r6, #8
 8021f98:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021f9c:	9305      	str	r3, [sp, #20]
 8021f9e:	0e13      	lsrs	r3, r2, #24
 8021fa0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021fa4:	fb0e fe07 	mul.w	lr, lr, r7
 8021fa8:	4430      	add	r0, r6
 8021faa:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8021fae:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021fb2:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8021fb6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021fba:	0a00      	lsrs	r0, r0, #8
 8021fbc:	435e      	muls	r6, r3
 8021fbe:	0a2d      	lsrs	r5, r5, #8
 8021fc0:	435a      	muls	r2, r3
 8021fc2:	9b03      	ldr	r3, [sp, #12]
 8021fc4:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021fc8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021fcc:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021fd0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021fd4:	44b4      	add	ip, r6
 8021fd6:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8021fda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021fde:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021fe2:	9e01      	ldr	r6, [sp, #4]
 8021fe4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021fe8:	fb03 ee06 	mla	lr, r3, r6, lr
 8021fec:	9b04      	ldr	r3, [sp, #16]
 8021fee:	0a12      	lsrs	r2, r2, #8
 8021ff0:	fb0c ee09 	mla	lr, ip, r9, lr
 8021ff4:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8021ff8:	9b05      	ldr	r3, [sp, #20]
 8021ffa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021ffe:	fb00 ee04 	mla	lr, r0, r4, lr
 8022002:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022006:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802200a:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 802200e:	9b01      	ldr	r3, [sp, #4]
 8022010:	fb07 fe0e 	mul.w	lr, r7, lr
 8022014:	fb07 f70b 	mul.w	r7, r7, fp
 8022018:	fb03 ee06 	mla	lr, r3, r6, lr
 802201c:	fb03 730a 	mla	r3, r3, sl, r7
 8022020:	fb09 e202 	mla	r2, r9, r2, lr
 8022024:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8022028:	fb04 2e0e 	mla	lr, r4, lr, r2
 802202c:	fb04 3408 	mla	r4, r4, r8, r3
 8022030:	9b02      	ldr	r3, [sp, #8]
 8022032:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022036:	fb09 4903 	mla	r9, r9, r3, r4
 802203a:	780b      	ldrb	r3, [r1, #0]
 802203c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022040:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8022044:	ea40 0e0e 	orr.w	lr, r0, lr
 8022048:	fa5f f989 	uxtb.w	r9, r9
 802204c:	fb03 f209 	mul.w	r2, r3, r9
 8022050:	1c53      	adds	r3, r2, #1
 8022052:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022056:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802205a:	700b      	strb	r3, [r1, #0]
 802205c:	784b      	ldrb	r3, [r1, #1]
 802205e:	fb03 f309 	mul.w	r3, r3, r9
 8022062:	1c5a      	adds	r2, r3, #1
 8022064:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022068:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802206c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022070:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022074:	704b      	strb	r3, [r1, #1]
 8022076:	788b      	ldrb	r3, [r1, #2]
 8022078:	fb03 f909 	mul.w	r9, r3, r9
 802207c:	f109 0301 	add.w	r3, r9, #1
 8022080:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022084:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8022088:	f881 e002 	strb.w	lr, [r1, #2]
 802208c:	b007      	add	sp, #28
 802208e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022092:	2600      	movs	r6, #0
 8022094:	e700      	b.n	8021e98 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8022096:	2000      	movs	r0, #0
 8022098:	4606      	mov	r6, r0
 802209a:	e708      	b.n	8021eae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802209c:	2000      	movs	r0, #0
 802209e:	e706      	b.n	8021eae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80220a0:	4620      	mov	r0, r4
 80220a2:	e704      	b.n	8021eae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 80220a4:	2500      	movs	r5, #0
 80220a6:	e714      	b.n	8021ed2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 80220a8:	2200      	movs	r2, #0
 80220aa:	4615      	mov	r5, r2
 80220ac:	e71d      	b.n	8021eea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80220ae:	4672      	mov	r2, lr
 80220b0:	4675      	mov	r5, lr
 80220b2:	e71a      	b.n	8021eea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80220b4:	2200      	movs	r2, #0
 80220b6:	e718      	b.n	8021eea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80220b8:	4622      	mov	r2, r4
 80220ba:	e716      	b.n	8021eea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

080220bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80220bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220c0:	b099      	sub	sp, #100	@ 0x64
 80220c2:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 80220c6:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80220c8:	9017      	str	r0, [sp, #92]	@ 0x5c
 80220ca:	9306      	str	r3, [sp, #24]
 80220cc:	6850      	ldr	r0, [r2, #4]
 80220ce:	6812      	ldr	r2, [r2, #0]
 80220d0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 80220d4:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 80220d8:	fb00 1303 	mla	r3, r0, r3, r1
 80220dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80220e0:	18d3      	adds	r3, r2, r3
 80220e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80220e4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80220e6:	681b      	ldr	r3, [r3, #0]
 80220e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80220ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80220ec:	2b00      	cmp	r3, #0
 80220ee:	dc03      	bgt.n	80220f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80220f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80220f2:	2b00      	cmp	r3, #0
 80220f4:	f340 8360 	ble.w	80227b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80220f8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80220fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80220fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022102:	1e48      	subs	r0, r1, #1
 8022104:	1e57      	subs	r7, r2, #1
 8022106:	9b06      	ldr	r3, [sp, #24]
 8022108:	2b00      	cmp	r3, #0
 802210a:	f340 817b 	ble.w	8022404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802210e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022112:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022116:	d406      	bmi.n	8022126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022118:	4584      	cmp	ip, r0
 802211a:	da04      	bge.n	8022126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802211c:	2b00      	cmp	r3, #0
 802211e:	db02      	blt.n	8022126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022120:	42bb      	cmp	r3, r7
 8022122:	f2c0 8170 	blt.w	8022406 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022126:	f11c 0c01 	adds.w	ip, ip, #1
 802212a:	f100 8160 	bmi.w	80223ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802212e:	4561      	cmp	r1, ip
 8022130:	f2c0 815d 	blt.w	80223ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022134:	3301      	adds	r3, #1
 8022136:	f100 815a 	bmi.w	80223ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802213a:	429a      	cmp	r2, r3
 802213c:	f2c0 8157 	blt.w	80223ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022140:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022144:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022146:	f1b8 0f00 	cmp.w	r8, #0
 802214a:	f340 8179 	ble.w	8022440 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802214e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8022150:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022154:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022156:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802215a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802215e:	142a      	asrs	r2, r5, #16
 8022160:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022164:	689b      	ldr	r3, [r3, #8]
 8022166:	f100 81be 	bmi.w	80224e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802216a:	f103 39ff 	add.w	r9, r3, #4294967295
 802216e:	454a      	cmp	r2, r9
 8022170:	f280 81b9 	bge.w	80224e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022174:	f1bc 0f00 	cmp.w	ip, #0
 8022178:	f2c0 81b5 	blt.w	80224e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802217c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022180:	45cc      	cmp	ip, r9
 8022182:	f280 81b0 	bge.w	80224e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022186:	b21b      	sxth	r3, r3
 8022188:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802218a:	fb0c 2203 	mla	r2, ip, r3, r2
 802218e:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8022192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022196:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802219a:	2900      	cmp	r1, #0
 802219c:	f000 8197 	beq.w	80224ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80221a0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80221a4:	940a      	str	r4, [sp, #40]	@ 0x28
 80221a6:	0e24      	lsrs	r4, r4, #24
 80221a8:	9411      	str	r4, [sp, #68]	@ 0x44
 80221aa:	b180      	cbz	r0, 80221ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80221ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80221b0:	3b01      	subs	r3, #1
 80221b2:	009b      	lsls	r3, r3, #2
 80221b4:	3304      	adds	r3, #4
 80221b6:	eb09 0c03 	add.w	ip, r9, r3
 80221ba:	f859 3003 	ldr.w	r3, [r9, r3]
 80221be:	9307      	str	r3, [sp, #28]
 80221c0:	0e1b      	lsrs	r3, r3, #24
 80221c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80221c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80221c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80221ca:	0e1b      	lsrs	r3, r3, #24
 80221cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80221ce:	b289      	uxth	r1, r1
 80221d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80221d2:	b280      	uxth	r0, r0
 80221d4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80221d6:	fb01 fa00 	mul.w	sl, r1, r0
 80221da:	0109      	lsls	r1, r1, #4
 80221dc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80221e0:	eba1 090a 	sub.w	r9, r1, sl
 80221e4:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80221e8:	b280      	uxth	r0, r0
 80221ea:	fa1f f989 	uxth.w	r9, r9
 80221ee:	1a09      	subs	r1, r1, r0
 80221f0:	fb09 f303 	mul.w	r3, r9, r3
 80221f4:	b289      	uxth	r1, r1
 80221f6:	fb01 330e 	mla	r3, r1, lr, r3
 80221fa:	fb00 3304 	mla	r3, r0, r4, r3
 80221fe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022200:	fb0a 3304 	mla	r3, sl, r4, r3
 8022204:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022208:	2b00      	cmp	r3, #0
 802220a:	f000 80e8 	beq.w	80223de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802220e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022212:	d01b      	beq.n	802224c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8022214:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8022218:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802221c:	fb0e fb0b 	mul.w	fp, lr, fp
 8022220:	fb0e fe02 	mul.w	lr, lr, r2
 8022224:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8022228:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802222c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022230:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022234:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022238:	445a      	add	r2, fp
 802223a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802223e:	0a12      	lsrs	r2, r2, #8
 8022240:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022244:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022248:	ea42 020c 	orr.w	r2, r2, ip
 802224c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802224e:	2cff      	cmp	r4, #255	@ 0xff
 8022250:	d021      	beq.n	8022296 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022252:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022254:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022258:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802225a:	fb04 fc0c 	mul.w	ip, r4, ip
 802225e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022260:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022264:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8022268:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802226a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802226e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022272:	fb04 fb0b 	mul.w	fp, r4, fp
 8022276:	44e6      	add	lr, ip
 8022278:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 802227c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022280:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022284:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022288:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802228c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8022290:	ea4e 040b 	orr.w	r4, lr, fp
 8022294:	940a      	str	r4, [sp, #40]	@ 0x28
 8022296:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022298:	2cff      	cmp	r4, #255	@ 0xff
 802229a:	d021      	beq.n	80222e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802229c:	9c07      	ldr	r4, [sp, #28]
 802229e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80222a2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80222a4:	fb04 fc0c 	mul.w	ip, r4, ip
 80222a8:	9c07      	ldr	r4, [sp, #28]
 80222aa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80222ae:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80222b2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80222b4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80222b8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80222bc:	fb04 fb0b 	mul.w	fp, r4, fp
 80222c0:	44e6      	add	lr, ip
 80222c2:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80222c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222ca:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80222ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80222d2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80222d6:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80222da:	ea4e 040b 	orr.w	r4, lr, fp
 80222de:	9407      	str	r4, [sp, #28]
 80222e0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80222e2:	2cff      	cmp	r4, #255	@ 0xff
 80222e4:	d021      	beq.n	802232a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80222e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80222e8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80222ec:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80222ee:	fb04 fc0c 	mul.w	ip, r4, ip
 80222f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80222f4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80222f8:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80222fc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80222fe:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022302:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022306:	fb04 fb0b 	mul.w	fp, r4, fp
 802230a:	44e6      	add	lr, ip
 802230c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8022310:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022314:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022318:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802231c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022320:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8022324:	ea4e 040b 	orr.w	r4, lr, fp
 8022328:	940b      	str	r4, [sp, #44]	@ 0x2c
 802232a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802232c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8022330:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022334:	2bff      	cmp	r3, #255	@ 0xff
 8022336:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802233a:	9c07      	ldr	r4, [sp, #28]
 802233c:	fb09 fc0c 	mul.w	ip, r9, ip
 8022340:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022344:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022348:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802234a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802234e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022352:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022354:	fb0a cc0e 	mla	ip, sl, lr, ip
 8022358:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802235c:	fb09 f90e 	mul.w	r9, r9, lr
 8022360:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022364:	fb01 9202 	mla	r2, r1, r2, r9
 8022368:	9907      	ldr	r1, [sp, #28]
 802236a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802236e:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8022372:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022374:	fb00 220b 	mla	r2, r0, fp, r2
 8022378:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802237c:	fb0a 2a00 	mla	sl, sl, r0, r2
 8022380:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022384:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022388:	ea4c 0c0a 	orr.w	ip, ip, sl
 802238c:	fa5f f08c 	uxtb.w	r0, ip
 8022390:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022394:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022398:	f000 80a2 	beq.w	80224e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802239c:	43db      	mvns	r3, r3
 802239e:	783a      	ldrb	r2, [r7, #0]
 80223a0:	f897 a002 	ldrb.w	sl, [r7, #2]
 80223a4:	b2db      	uxtb	r3, r3
 80223a6:	fb02 fe03 	mul.w	lr, r2, r3
 80223aa:	fb0a fa03 	mul.w	sl, sl, r3
 80223ae:	f10e 0201 	add.w	r2, lr, #1
 80223b2:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80223b6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80223ba:	703a      	strb	r2, [r7, #0]
 80223bc:	787a      	ldrb	r2, [r7, #1]
 80223be:	fb02 f003 	mul.w	r0, r2, r3
 80223c2:	f10a 0301 	add.w	r3, sl, #1
 80223c6:	1c42      	adds	r2, r0, #1
 80223c8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80223cc:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80223d0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80223d4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80223d8:	707a      	strb	r2, [r7, #1]
 80223da:	f887 c002 	strb.w	ip, [r7, #2]
 80223de:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80223e0:	3703      	adds	r7, #3
 80223e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80223e6:	441d      	add	r5, r3
 80223e8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80223ea:	441e      	add	r6, r3
 80223ec:	e6ab      	b.n	8022146 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80223ee:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80223f0:	441d      	add	r5, r3
 80223f2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80223f4:	441e      	add	r6, r3
 80223f6:	9b06      	ldr	r3, [sp, #24]
 80223f8:	3b01      	subs	r3, #1
 80223fa:	9306      	str	r3, [sp, #24]
 80223fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80223fe:	3303      	adds	r3, #3
 8022400:	9309      	str	r3, [sp, #36]	@ 0x24
 8022402:	e680      	b.n	8022106 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022404:	d024      	beq.n	8022450 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8022406:	9b06      	ldr	r3, [sp, #24]
 8022408:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802240a:	3b01      	subs	r3, #1
 802240c:	fb00 5003 	mla	r0, r0, r3, r5
 8022410:	1400      	asrs	r0, r0, #16
 8022412:	f53f ae95 	bmi.w	8022140 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022416:	3901      	subs	r1, #1
 8022418:	4288      	cmp	r0, r1
 802241a:	f6bf ae91 	bge.w	8022140 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802241e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8022420:	fb01 6303 	mla	r3, r1, r3, r6
 8022424:	141b      	asrs	r3, r3, #16
 8022426:	f53f ae8b 	bmi.w	8022140 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802242a:	3a01      	subs	r2, #1
 802242c:	4293      	cmp	r3, r2
 802242e:	f6bf ae87 	bge.w	8022140 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022434:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022438:	1cdf      	adds	r7, r3, #3
 802243a:	f1bb 0f00 	cmp.w	fp, #0
 802243e:	dc6e      	bgt.n	802251e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022440:	9b06      	ldr	r3, [sp, #24]
 8022442:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022448:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802244c:	4423      	add	r3, r4
 802244e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022450:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022452:	2b00      	cmp	r3, #0
 8022454:	f340 81b0 	ble.w	80227b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8022458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802245c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802245e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022462:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022466:	eef0 6a62 	vmov.f32	s13, s5
 802246a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802246e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022472:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022476:	ee16 5a90 	vmov	r5, s13
 802247a:	eef0 6a43 	vmov.f32	s13, s6
 802247e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022482:	ee16 6a90 	vmov	r6, s13
 8022486:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802248a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802248e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022492:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022496:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802249a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802249e:	ee12 2a90 	vmov	r2, s5
 80224a2:	eef0 2a47 	vmov.f32	s5, s14
 80224a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80224aa:	ee13 2a10 	vmov	r2, s6
 80224ae:	9325      	str	r3, [sp, #148]	@ 0x94
 80224b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80224b2:	eeb0 3a67 	vmov.f32	s6, s15
 80224b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80224ba:	9326      	str	r3, [sp, #152]	@ 0x98
 80224bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80224be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80224c0:	3b01      	subs	r3, #1
 80224c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80224c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80224c6:	bf08      	it	eq
 80224c8:	4613      	moveq	r3, r2
 80224ca:	9306      	str	r3, [sp, #24]
 80224cc:	e60d      	b.n	80220ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80224ce:	2800      	cmp	r0, #0
 80224d0:	f43f ae7d 	beq.w	80221ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80224d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80224d8:	9307      	str	r3, [sp, #28]
 80224da:	0e1b      	lsrs	r3, r3, #24
 80224dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80224de:	e676      	b.n	80221ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80224e0:	7038      	strb	r0, [r7, #0]
 80224e2:	7079      	strb	r1, [r7, #1]
 80224e4:	e779      	b.n	80223da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80224e6:	f112 0901 	adds.w	r9, r2, #1
 80224ea:	f53f af78 	bmi.w	80223de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80224ee:	454b      	cmp	r3, r9
 80224f0:	f6ff af75 	blt.w	80223de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80224f4:	f11c 0901 	adds.w	r9, ip, #1
 80224f8:	f53f af71 	bmi.w	80223de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80224fc:	45ce      	cmp	lr, r9
 80224fe:	f6ff af6e 	blt.w	80223de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022502:	b21b      	sxth	r3, r3
 8022504:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8022508:	fa0f f28e 	sxth.w	r2, lr
 802250c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8022510:	9200      	str	r2, [sp, #0]
 8022512:	4639      	mov	r1, r7
 8022514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022516:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8022518:	f7ff fca1 	bl	8021e5e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802251c:	e75f      	b.n	80223de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802251e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022520:	1429      	asrs	r1, r5, #16
 8022522:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022524:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022528:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802252c:	1433      	asrs	r3, r6, #16
 802252e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022532:	fb0c 1303 	mla	r3, ip, r3, r1
 8022536:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022538:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802253c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022540:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022544:	2a00      	cmp	r2, #0
 8022546:	f000 8129 	beq.w	802279c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802254a:	684c      	ldr	r4, [r1, #4]
 802254c:	940c      	str	r4, [sp, #48]	@ 0x30
 802254e:	0e24      	lsrs	r4, r4, #24
 8022550:	9413      	str	r4, [sp, #76]	@ 0x4c
 8022552:	b198      	cbz	r0, 802257c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022554:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8022558:	f10c 3cff 	add.w	ip, ip, #4294967295
 802255c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8022560:	f10c 0c04 	add.w	ip, ip, #4
 8022564:	eb01 080c 	add.w	r8, r1, ip
 8022568:	f851 100c 	ldr.w	r1, [r1, ip]
 802256c:	9108      	str	r1, [sp, #32]
 802256e:	0e09      	lsrs	r1, r1, #24
 8022570:	9110      	str	r1, [sp, #64]	@ 0x40
 8022572:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022576:	910d      	str	r1, [sp, #52]	@ 0x34
 8022578:	0e09      	lsrs	r1, r1, #24
 802257a:	9114      	str	r1, [sp, #80]	@ 0x50
 802257c:	b292      	uxth	r2, r2
 802257e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022580:	b280      	uxth	r0, r0
 8022582:	fb02 f900 	mul.w	r9, r2, r0
 8022586:	0112      	lsls	r2, r2, #4
 8022588:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802258c:	eba2 0809 	sub.w	r8, r2, r9
 8022590:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8022594:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022596:	b280      	uxth	r0, r0
 8022598:	fa1f f888 	uxth.w	r8, r8
 802259c:	1a09      	subs	r1, r1, r0
 802259e:	fb08 f202 	mul.w	r2, r8, r2
 80225a2:	b289      	uxth	r1, r1
 80225a4:	fb01 220e 	mla	r2, r1, lr, r2
 80225a8:	fb00 2204 	mla	r2, r0, r4, r2
 80225ac:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80225ae:	fb09 2204 	mla	r2, r9, r4, r2
 80225b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80225b6:	2a00      	cmp	r2, #0
 80225b8:	f000 80e8 	beq.w	802278c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80225bc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80225c0:	d01b      	beq.n	80225fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80225c2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80225c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80225ca:	fb0e fa0a 	mul.w	sl, lr, sl
 80225ce:	fb0e fe03 	mul.w	lr, lr, r3
 80225d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80225d6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80225da:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80225de:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80225e2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80225e6:	4453      	add	r3, sl
 80225e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80225ec:	0a1b      	lsrs	r3, r3, #8
 80225ee:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80225f2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80225f6:	ea43 030c 	orr.w	r3, r3, ip
 80225fa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80225fc:	2cff      	cmp	r4, #255	@ 0xff
 80225fe:	d021      	beq.n	8022644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8022600:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022602:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022606:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022608:	fb04 fc0c 	mul.w	ip, r4, ip
 802260c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802260e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022612:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022616:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022618:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802261c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022620:	fb04 fa0a 	mul.w	sl, r4, sl
 8022624:	44e6      	add	lr, ip
 8022626:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802262a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802262e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022632:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022636:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802263a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802263e:	ea4e 040a 	orr.w	r4, lr, sl
 8022642:	940c      	str	r4, [sp, #48]	@ 0x30
 8022644:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022646:	2cff      	cmp	r4, #255	@ 0xff
 8022648:	d021      	beq.n	802268e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 802264a:	9c08      	ldr	r4, [sp, #32]
 802264c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022650:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022652:	fb04 fc0c 	mul.w	ip, r4, ip
 8022656:	9c08      	ldr	r4, [sp, #32]
 8022658:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802265c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802265e:	fb04 fa0e 	mul.w	sl, r4, lr
 8022662:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022666:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802266a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802266e:	44e6      	add	lr, ip
 8022670:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022674:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022678:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802267c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022680:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022684:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022688:	ea4e 040a 	orr.w	r4, lr, sl
 802268c:	9408      	str	r4, [sp, #32]
 802268e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022690:	2cff      	cmp	r4, #255	@ 0xff
 8022692:	d021      	beq.n	80226d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8022694:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022696:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802269a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802269c:	fb04 fc0c 	mul.w	ip, r4, ip
 80226a0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80226a2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80226a6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80226aa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80226ac:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80226b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80226b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80226b8:	44e6      	add	lr, ip
 80226ba:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80226be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80226c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80226c6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80226ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80226ce:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80226d2:	ea4e 040a 	orr.w	r4, lr, sl
 80226d6:	940d      	str	r4, [sp, #52]	@ 0x34
 80226d8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80226da:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80226de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80226e2:	2aff      	cmp	r2, #255	@ 0xff
 80226e4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80226e8:	9c08      	ldr	r4, [sp, #32]
 80226ea:	fb08 fc0c 	mul.w	ip, r8, ip
 80226ee:	fb01 cc0e 	mla	ip, r1, lr, ip
 80226f2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80226f6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80226f8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80226fc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022700:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022702:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022706:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 802270a:	fb08 f80e 	mul.w	r8, r8, lr
 802270e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022712:	fb01 8303 	mla	r3, r1, r3, r8
 8022716:	9908      	ldr	r1, [sp, #32]
 8022718:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802271c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8022720:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022722:	fb00 330a 	mla	r3, r0, sl, r3
 8022726:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 802272a:	fb09 3e0e 	mla	lr, r9, lr, r3
 802272e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022732:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022736:	ea4c 0c0e 	orr.w	ip, ip, lr
 802273a:	fa5f f08c 	uxtb.w	r0, ip
 802273e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022742:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022746:	d032      	beq.n	80227ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8022748:	43d2      	mvns	r2, r2
 802274a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802274e:	b2d2      	uxtb	r2, r2
 8022750:	fb0e fe02 	mul.w	lr, lr, r2
 8022754:	f10e 0301 	add.w	r3, lr, #1
 8022758:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802275c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022760:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8022764:	4350      	muls	r0, r2
 8022766:	f807 3c03 	strb.w	r3, [r7, #-3]
 802276a:	1c43      	adds	r3, r0, #1
 802276c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022770:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022774:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8022778:	4353      	muls	r3, r2
 802277a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802277e:	1c5a      	adds	r2, r3, #1
 8022780:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022784:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8022788:	f807 cc01 	strb.w	ip, [r7, #-1]
 802278c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802278e:	3703      	adds	r7, #3
 8022790:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022794:	441d      	add	r5, r3
 8022796:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022798:	441e      	add	r6, r3
 802279a:	e64e      	b.n	802243a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802279c:	2800      	cmp	r0, #0
 802279e:	f43f aeed 	beq.w	802257c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80227a2:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80227a6:	9108      	str	r1, [sp, #32]
 80227a8:	0e09      	lsrs	r1, r1, #24
 80227aa:	9110      	str	r1, [sp, #64]	@ 0x40
 80227ac:	e6e6      	b.n	802257c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80227ae:	f807 0c03 	strb.w	r0, [r7, #-3]
 80227b2:	f807 1c02 	strb.w	r1, [r7, #-2]
 80227b6:	e7e7      	b.n	8022788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80227b8:	b019      	add	sp, #100	@ 0x64
 80227ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080227c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80227c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 80227c8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80227cc:	2c00      	cmp	r4, #0
 80227ce:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80227d2:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 80227d6:	fb00 4e03 	mla	lr, r0, r3, r4
 80227da:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80227de:	f2c0 80b8 	blt.w	8022952 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80227e2:	45a1      	cmp	r9, r4
 80227e4:	f340 80b5 	ble.w	8022952 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80227e8:	2800      	cmp	r0, #0
 80227ea:	f2c0 80b2 	blt.w	8022952 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80227ee:	4580      	cmp	r8, r0
 80227f0:	f340 80af 	ble.w	8022952 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80227f4:	ea4f 055e 	mov.w	r5, lr, lsr #1
 80227f8:	f01e 0f01 	tst.w	lr, #1
 80227fc:	5d56      	ldrb	r6, [r2, r5]
 80227fe:	bf0c      	ite	eq
 8022800:	f006 060f 	andeq.w	r6, r6, #15
 8022804:	1136      	asrne	r6, r6, #4
 8022806:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802280a:	b2f6      	uxtb	r6, r6
 802280c:	f114 0a01 	adds.w	sl, r4, #1
 8022810:	f100 80a1 	bmi.w	8022956 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022814:	45d1      	cmp	r9, sl
 8022816:	f340 809e 	ble.w	8022956 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802281a:	2800      	cmp	r0, #0
 802281c:	f2c0 809b 	blt.w	8022956 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022820:	4580      	cmp	r8, r0
 8022822:	f340 8098 	ble.w	8022956 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022826:	2f00      	cmp	r7, #0
 8022828:	f000 8097 	beq.w	802295a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 802282c:	f10e 0b01 	add.w	fp, lr, #1
 8022830:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022834:	f01b 0f01 	tst.w	fp, #1
 8022838:	5d55      	ldrb	r5, [r2, r5]
 802283a:	bf0c      	ite	eq
 802283c:	f005 050f 	andeq.w	r5, r5, #15
 8022840:	112d      	asrne	r5, r5, #4
 8022842:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022846:	b2ed      	uxtb	r5, r5
 8022848:	f1bc 0f00 	cmp.w	ip, #0
 802284c:	f000 8089 	beq.w	8022962 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8022850:	2c00      	cmp	r4, #0
 8022852:	f100 0001 	add.w	r0, r0, #1
 8022856:	f2c0 8082 	blt.w	802295e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802285a:	45a1      	cmp	r9, r4
 802285c:	dd7f      	ble.n	802295e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802285e:	2800      	cmp	r0, #0
 8022860:	db7d      	blt.n	802295e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022862:	4580      	cmp	r8, r0
 8022864:	dd7b      	ble.n	802295e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022866:	eb03 0b0e 	add.w	fp, r3, lr
 802286a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802286e:	f01b 0f01 	tst.w	fp, #1
 8022872:	5d14      	ldrb	r4, [r2, r4]
 8022874:	bf0c      	ite	eq
 8022876:	f004 040f 	andeq.w	r4, r4, #15
 802287a:	1124      	asrne	r4, r4, #4
 802287c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022880:	b2e4      	uxtb	r4, r4
 8022882:	f1ba 0f00 	cmp.w	sl, #0
 8022886:	db6f      	blt.n	8022968 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022888:	45d1      	cmp	r9, sl
 802288a:	dd6d      	ble.n	8022968 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802288c:	2800      	cmp	r0, #0
 802288e:	db6b      	blt.n	8022968 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022890:	4580      	cmp	r8, r0
 8022892:	dd69      	ble.n	8022968 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022894:	2f00      	cmp	r7, #0
 8022896:	d069      	beq.n	802296c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8022898:	3301      	adds	r3, #1
 802289a:	449e      	add	lr, r3
 802289c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80228a0:	f01e 0f01 	tst.w	lr, #1
 80228a4:	5cd0      	ldrb	r0, [r2, r3]
 80228a6:	bf0c      	ite	eq
 80228a8:	f000 000f 	andeq.w	r0, r0, #15
 80228ac:	1100      	asrne	r0, r0, #4
 80228ae:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80228b2:	b2c3      	uxtb	r3, r0
 80228b4:	b2ba      	uxth	r2, r7
 80228b6:	fa1f fc8c 	uxth.w	ip, ip
 80228ba:	fb02 f00c 	mul.w	r0, r2, ip
 80228be:	0112      	lsls	r2, r2, #4
 80228c0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80228c4:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80228c8:	1a12      	subs	r2, r2, r0
 80228ca:	fa1f fc8c 	uxth.w	ip, ip
 80228ce:	b292      	uxth	r2, r2
 80228d0:	eba7 070c 	sub.w	r7, r7, ip
 80228d4:	436a      	muls	r2, r5
 80228d6:	b2bf      	uxth	r7, r7
 80228d8:	fb06 2207 	mla	r2, r6, r7, r2
 80228dc:	fb0c 2404 	mla	r4, ip, r4, r2
 80228e0:	fb00 4303 	mla	r3, r0, r3, r4
 80228e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80228e8:	b38b      	cbz	r3, 802294e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 80228ea:	4a21      	ldr	r2, [pc, #132]	@ (8022970 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 80228ec:	6814      	ldr	r4, [r2, #0]
 80228ee:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 80228f2:	b2e5      	uxtb	r5, r4
 80228f4:	4353      	muls	r3, r2
 80228f6:	1c5a      	adds	r2, r3, #1
 80228f8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80228fc:	1212      	asrs	r2, r2, #8
 80228fe:	b290      	uxth	r0, r2
 8022900:	43d2      	mvns	r2, r2
 8022902:	fb15 f500 	smulbb	r5, r5, r0
 8022906:	b2d3      	uxtb	r3, r2
 8022908:	780a      	ldrb	r2, [r1, #0]
 802290a:	fb02 5203 	mla	r2, r2, r3, r5
 802290e:	b292      	uxth	r2, r2
 8022910:	1c55      	adds	r5, r2, #1
 8022912:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022916:	784d      	ldrb	r5, [r1, #1]
 8022918:	fb15 f503 	smulbb	r5, r5, r3
 802291c:	1212      	asrs	r2, r2, #8
 802291e:	700a      	strb	r2, [r1, #0]
 8022920:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022924:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022928:	fb02 5200 	mla	r2, r2, r0, r5
 802292c:	b292      	uxth	r2, r2
 802292e:	1c55      	adds	r5, r2, #1
 8022930:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022934:	1212      	asrs	r2, r2, #8
 8022936:	704a      	strb	r2, [r1, #1]
 8022938:	788a      	ldrb	r2, [r1, #2]
 802293a:	fb12 f303 	smulbb	r3, r2, r3
 802293e:	fb04 3300 	mla	r3, r4, r0, r3
 8022942:	b29b      	uxth	r3, r3
 8022944:	1c5a      	adds	r2, r3, #1
 8022946:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802294a:	121b      	asrs	r3, r3, #8
 802294c:	708b      	strb	r3, [r1, #2]
 802294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022952:	2600      	movs	r6, #0
 8022954:	e75a      	b.n	802280c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8022956:	2500      	movs	r5, #0
 8022958:	e776      	b.n	8022848 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802295a:	463d      	mov	r5, r7
 802295c:	e774      	b.n	8022848 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802295e:	2400      	movs	r4, #0
 8022960:	e78f      	b.n	8022882 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8022962:	4663      	mov	r3, ip
 8022964:	4664      	mov	r4, ip
 8022966:	e7a5      	b.n	80228b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022968:	2300      	movs	r3, #0
 802296a:	e7a3      	b.n	80228b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802296c:	463b      	mov	r3, r7
 802296e:	e7a1      	b.n	80228b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022970:	2402642c 	.word	0x2402642c

08022974 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022978:	b097      	sub	sp, #92	@ 0x5c
 802297a:	9214      	str	r2, [sp, #80]	@ 0x50
 802297c:	9309      	str	r3, [sp, #36]	@ 0x24
 802297e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8022980:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022984:	9015      	str	r0, [sp, #84]	@ 0x54
 8022986:	910c      	str	r1, [sp, #48]	@ 0x30
 8022988:	6850      	ldr	r0, [r2, #4]
 802298a:	930e      	str	r3, [sp, #56]	@ 0x38
 802298c:	6812      	ldr	r2, [r2, #0]
 802298e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8022992:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8022996:	fb00 1303 	mla	r3, r0, r3, r1
 802299a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802299e:	eb02 0a03 	add.w	sl, r2, r3
 80229a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80229a4:	689b      	ldr	r3, [r3, #8]
 80229a6:	3301      	adds	r3, #1
 80229a8:	f023 0301 	bic.w	r3, r3, #1
 80229ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80229ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80229b0:	681f      	ldr	r7, [r3, #0]
 80229b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	dc03      	bgt.n	80229c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80229b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80229ba:	2b00      	cmp	r3, #0
 80229bc:	f340 8247 	ble.w	8022e4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80229c0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80229c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80229c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80229ca:	1e48      	subs	r0, r1, #1
 80229cc:	f102 3cff 	add.w	ip, r2, #4294967295
 80229d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	f340 80e5 	ble.w	8022ba2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80229d8:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80229dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80229e0:	d406      	bmi.n	80229f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80229e2:	4586      	cmp	lr, r0
 80229e4:	da04      	bge.n	80229f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80229e6:	2b00      	cmp	r3, #0
 80229e8:	db02      	blt.n	80229f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80229ea:	4563      	cmp	r3, ip
 80229ec:	f2c0 80da 	blt.w	8022ba4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80229f0:	f11e 0e01 	adds.w	lr, lr, #1
 80229f4:	f100 80cb 	bmi.w	8022b8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80229f8:	4571      	cmp	r1, lr
 80229fa:	f2c0 80c8 	blt.w	8022b8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80229fe:	3301      	adds	r3, #1
 8022a00:	f100 80c5 	bmi.w	8022b8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022a04:	429a      	cmp	r2, r3
 8022a06:	f2c0 80c2 	blt.w	8022b8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022a0c:	46d0      	mov	r8, sl
 8022a0e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8022a12:	930d      	str	r3, [sp, #52]	@ 0x34
 8022a14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	f340 80e3 	ble.w	8022be2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8022a1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022a1e:	1430      	asrs	r0, r6, #16
 8022a20:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022a24:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022a28:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022a2c:	142b      	asrs	r3, r5, #16
 8022a2e:	f100 812e 	bmi.w	8022c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022a32:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022a36:	455b      	cmp	r3, fp
 8022a38:	f280 8129 	bge.w	8022c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022a3c:	2800      	cmp	r0, #0
 8022a3e:	f2c0 8126 	blt.w	8022c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022a42:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022a46:	4558      	cmp	r0, fp
 8022a48:	f280 8121 	bge.w	8022c8e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022a4c:	fb00 3309 	mla	r3, r0, r9, r3
 8022a50:	0858      	lsrs	r0, r3, #1
 8022a52:	07dc      	lsls	r4, r3, #31
 8022a54:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022a58:	bf54      	ite	pl
 8022a5a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a5e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a62:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a66:	fa5f fc8c 	uxtb.w	ip, ip
 8022a6a:	2a00      	cmp	r2, #0
 8022a6c:	f000 80fe 	beq.w	8022c6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022a70:	1c58      	adds	r0, r3, #1
 8022a72:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022a76:	07c0      	lsls	r0, r0, #31
 8022a78:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022a7c:	bf54      	ite	pl
 8022a7e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022a82:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022a86:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022a8a:	fa5f f08e 	uxtb.w	r0, lr
 8022a8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8022a90:	b1d9      	cbz	r1, 8022aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022a92:	444b      	add	r3, r9
 8022a94:	0858      	lsrs	r0, r3, #1
 8022a96:	07dc      	lsls	r4, r3, #31
 8022a98:	f103 0301 	add.w	r3, r3, #1
 8022a9c:	5c38      	ldrb	r0, [r7, r0]
 8022a9e:	bf54      	ite	pl
 8022aa0:	f000 000f 	andpl.w	r0, r0, #15
 8022aa4:	1100      	asrmi	r0, r0, #4
 8022aa6:	07dc      	lsls	r4, r3, #31
 8022aa8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022aac:	b2c0      	uxtb	r0, r0
 8022aae:	900a      	str	r0, [sp, #40]	@ 0x28
 8022ab0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8022ab4:	f817 e000 	ldrb.w	lr, [r7, r0]
 8022ab8:	bf54      	ite	pl
 8022aba:	f00e 030f 	andpl.w	r3, lr, #15
 8022abe:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022ac2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ac6:	b2db      	uxtb	r3, r3
 8022ac8:	9311      	str	r3, [sp, #68]	@ 0x44
 8022aca:	b292      	uxth	r2, r2
 8022acc:	b289      	uxth	r1, r1
 8022ace:	0113      	lsls	r3, r2, #4
 8022ad0:	fb02 f001 	mul.w	r0, r2, r1
 8022ad4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022ad6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8022ada:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8022ade:	1a1b      	subs	r3, r3, r0
 8022ae0:	b289      	uxth	r1, r1
 8022ae2:	b29b      	uxth	r3, r3
 8022ae4:	ebae 0e01 	sub.w	lr, lr, r1
 8022ae8:	4353      	muls	r3, r2
 8022aea:	fa1f fe8e 	uxth.w	lr, lr
 8022aee:	fb0c 320e 	mla	r2, ip, lr, r3
 8022af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022af4:	fb01 2203 	mla	r2, r1, r3, r2
 8022af8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022afa:	fb00 2203 	mla	r2, r0, r3, r2
 8022afe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022b02:	2a00      	cmp	r2, #0
 8022b04:	d039      	beq.n	8022b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022b06:	4bc7      	ldr	r3, [pc, #796]	@ (8022e24 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8022b08:	6819      	ldr	r1, [r3, #0]
 8022b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022b0c:	fa5f fc81 	uxtb.w	ip, r1
 8022b10:	435a      	muls	r2, r3
 8022b12:	1c53      	adds	r3, r2, #1
 8022b14:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022b18:	1212      	asrs	r2, r2, #8
 8022b1a:	b290      	uxth	r0, r2
 8022b1c:	43d2      	mvns	r2, r2
 8022b1e:	fb1c fc00 	smulbb	ip, ip, r0
 8022b22:	b2d3      	uxtb	r3, r2
 8022b24:	f898 2000 	ldrb.w	r2, [r8]
 8022b28:	fb02 c203 	mla	r2, r2, r3, ip
 8022b2c:	b292      	uxth	r2, r2
 8022b2e:	f102 0c01 	add.w	ip, r2, #1
 8022b32:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022b36:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022b3a:	fb1c fc03 	smulbb	ip, ip, r3
 8022b3e:	1212      	asrs	r2, r2, #8
 8022b40:	f888 2000 	strb.w	r2, [r8]
 8022b44:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022b48:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022b4c:	fb02 c200 	mla	r2, r2, r0, ip
 8022b50:	b292      	uxth	r2, r2
 8022b52:	f102 0c01 	add.w	ip, r2, #1
 8022b56:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022b5a:	1212      	asrs	r2, r2, #8
 8022b5c:	f888 2001 	strb.w	r2, [r8, #1]
 8022b60:	f898 2002 	ldrb.w	r2, [r8, #2]
 8022b64:	fb12 f303 	smulbb	r3, r2, r3
 8022b68:	fb01 3300 	mla	r3, r1, r0, r3
 8022b6c:	b29b      	uxth	r3, r3
 8022b6e:	1c5a      	adds	r2, r3, #1
 8022b70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b74:	121b      	asrs	r3, r3, #8
 8022b76:	f888 3002 	strb.w	r3, [r8, #2]
 8022b7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022b7c:	f108 0803 	add.w	r8, r8, #3
 8022b80:	441d      	add	r5, r3
 8022b82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022b84:	441e      	add	r6, r3
 8022b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022b88:	3b01      	subs	r3, #1
 8022b8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8022b8c:	e742      	b.n	8022a14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022b8e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022b90:	f10a 0a03 	add.w	sl, sl, #3
 8022b94:	441d      	add	r5, r3
 8022b96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022b98:	441e      	add	r6, r3
 8022b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b9c:	3b01      	subs	r3, #1
 8022b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022ba0:	e716      	b.n	80229d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022ba2:	d024      	beq.n	8022bee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8022ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022ba6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8022ba8:	3b01      	subs	r3, #1
 8022baa:	fb00 5003 	mla	r0, r0, r3, r5
 8022bae:	1400      	asrs	r0, r0, #16
 8022bb0:	f53f af2b 	bmi.w	8022a0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022bb4:	3901      	subs	r1, #1
 8022bb6:	4288      	cmp	r0, r1
 8022bb8:	f6bf af27 	bge.w	8022a0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022bbc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8022bbe:	fb01 6303 	mla	r3, r1, r3, r6
 8022bc2:	141b      	asrs	r3, r3, #16
 8022bc4:	f53f af21 	bmi.w	8022a0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022bc8:	3a01      	subs	r2, #1
 8022bca:	4293      	cmp	r3, r2
 8022bcc:	f6bf af1d 	bge.w	8022a0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022bd0:	f10a 0e03 	add.w	lr, sl, #3
 8022bd4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8022bd8:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8022bdc:	f1b8 0f00 	cmp.w	r8, #0
 8022be0:	dc76      	bgt.n	8022cd0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8022be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022be4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022be8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022bec:	44a2      	add	sl, r4
 8022bee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	f340 812c 	ble.w	8022e4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8022bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022bfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022bfc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022c00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022c04:	eef0 6a62 	vmov.f32	s13, s5
 8022c08:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022c0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022c10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c14:	ee16 5a90 	vmov	r5, s13
 8022c18:	eef0 6a43 	vmov.f32	s13, s6
 8022c1c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022c20:	ee16 6a90 	vmov	r6, s13
 8022c24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022c28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022c2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022c30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022c34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022c38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022c3c:	ee12 2a90 	vmov	r2, s5
 8022c40:	eef0 2a47 	vmov.f32	s5, s14
 8022c44:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c48:	ee13 2a10 	vmov	r2, s6
 8022c4c:	9323      	str	r3, [sp, #140]	@ 0x8c
 8022c4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c50:	eeb0 3a67 	vmov.f32	s6, s15
 8022c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c58:	9324      	str	r3, [sp, #144]	@ 0x90
 8022c5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022c5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022c5e:	3b01      	subs	r3, #1
 8022c60:	930c      	str	r3, [sp, #48]	@ 0x30
 8022c62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c64:	bf08      	it	eq
 8022c66:	4613      	moveq	r3, r2
 8022c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c6a:	e6a2      	b.n	80229b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022c6c:	2900      	cmp	r1, #0
 8022c6e:	f43f af2c 	beq.w	8022aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022c72:	eb09 0003 	add.w	r0, r9, r3
 8022c76:	0843      	lsrs	r3, r0, #1
 8022c78:	07c0      	lsls	r0, r0, #31
 8022c7a:	5cfb      	ldrb	r3, [r7, r3]
 8022c7c:	bf54      	ite	pl
 8022c7e:	f003 030f 	andpl.w	r3, r3, #15
 8022c82:	111b      	asrmi	r3, r3, #4
 8022c84:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022c88:	b2db      	uxtb	r3, r3
 8022c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c8c:	e71d      	b.n	8022aca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022c8e:	f113 0b01 	adds.w	fp, r3, #1
 8022c92:	f53f af72 	bmi.w	8022b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022c96:	45dc      	cmp	ip, fp
 8022c98:	f6ff af6f 	blt.w	8022b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022c9c:	f110 0b01 	adds.w	fp, r0, #1
 8022ca0:	f53f af6b 	bmi.w	8022b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022ca4:	45de      	cmp	lr, fp
 8022ca6:	f6ff af68 	blt.w	8022b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022caa:	9302      	str	r3, [sp, #8]
 8022cac:	fa0f f38e 	sxth.w	r3, lr
 8022cb0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022cb2:	9301      	str	r3, [sp, #4]
 8022cb4:	fa0f f38c 	sxth.w	r3, ip
 8022cb8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022cbc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022cc0:	9300      	str	r3, [sp, #0]
 8022cc2:	463a      	mov	r2, r7
 8022cc4:	464b      	mov	r3, r9
 8022cc6:	4641      	mov	r1, r8
 8022cc8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8022cca:	f7ff fd79 	bl	80227c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8022cce:	e754      	b.n	8022b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022cd0:	142a      	asrs	r2, r5, #16
 8022cd2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022cd6:	1433      	asrs	r3, r6, #16
 8022cd8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022cdc:	fb09 2303 	mla	r3, r9, r3, r2
 8022ce0:	085a      	lsrs	r2, r3, #1
 8022ce2:	07dc      	lsls	r4, r3, #31
 8022ce4:	5cba      	ldrb	r2, [r7, r2]
 8022ce6:	bf54      	ite	pl
 8022ce8:	f002 020f 	andpl.w	r2, r2, #15
 8022cec:	1112      	asrmi	r2, r2, #4
 8022cee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022cf2:	b2d2      	uxtb	r2, r2
 8022cf4:	2900      	cmp	r1, #0
 8022cf6:	f000 8097 	beq.w	8022e28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8022cfa:	f103 0b01 	add.w	fp, r3, #1
 8022cfe:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8022d02:	f01b 0f01 	tst.w	fp, #1
 8022d06:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022d0a:	bf0c      	ite	eq
 8022d0c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022d10:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022d14:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022d18:	fa5f f48c 	uxtb.w	r4, ip
 8022d1c:	9412      	str	r4, [sp, #72]	@ 0x48
 8022d1e:	b300      	cbz	r0, 8022d62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022d20:	444b      	add	r3, r9
 8022d22:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022d26:	07dc      	lsls	r4, r3, #31
 8022d28:	f103 0301 	add.w	r3, r3, #1
 8022d2c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022d30:	bf54      	ite	pl
 8022d32:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022d36:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022d3a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022d3e:	fa5f f48c 	uxtb.w	r4, ip
 8022d42:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022d46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022d48:	07dc      	lsls	r4, r3, #31
 8022d4a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022d4e:	bf54      	ite	pl
 8022d50:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022d54:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022d58:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022d5c:	fa5f f38c 	uxtb.w	r3, ip
 8022d60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022d62:	b289      	uxth	r1, r1
 8022d64:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022d66:	b280      	uxth	r0, r0
 8022d68:	fb01 f300 	mul.w	r3, r1, r0
 8022d6c:	0109      	lsls	r1, r1, #4
 8022d6e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022d72:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8022d76:	1ac9      	subs	r1, r1, r3
 8022d78:	b280      	uxth	r0, r0
 8022d7a:	b289      	uxth	r1, r1
 8022d7c:	ebac 0c00 	sub.w	ip, ip, r0
 8022d80:	4361      	muls	r1, r4
 8022d82:	fa1f fc8c 	uxth.w	ip, ip
 8022d86:	fb02 120c 	mla	r2, r2, ip, r1
 8022d8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022d8c:	fb00 2001 	mla	r0, r0, r1, r2
 8022d90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022d92:	fb03 0302 	mla	r3, r3, r2, r0
 8022d96:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	d039      	beq.n	8022e12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022d9e:	4a21      	ldr	r2, [pc, #132]	@ (8022e24 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8022da0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022da4:	6810      	ldr	r0, [r2, #0]
 8022da6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022da8:	fa5f fc80 	uxtb.w	ip, r0
 8022dac:	4353      	muls	r3, r2
 8022dae:	1c5a      	adds	r2, r3, #1
 8022db0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022db4:	121b      	asrs	r3, r3, #8
 8022db6:	b29a      	uxth	r2, r3
 8022db8:	43db      	mvns	r3, r3
 8022dba:	fb1c fc02 	smulbb	ip, ip, r2
 8022dbe:	b2db      	uxtb	r3, r3
 8022dc0:	fb01 c103 	mla	r1, r1, r3, ip
 8022dc4:	b289      	uxth	r1, r1
 8022dc6:	f101 0c01 	add.w	ip, r1, #1
 8022dca:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022dce:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022dd2:	fb1c fc03 	smulbb	ip, ip, r3
 8022dd6:	1209      	asrs	r1, r1, #8
 8022dd8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022ddc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022de0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022de4:	fb01 c102 	mla	r1, r1, r2, ip
 8022de8:	b289      	uxth	r1, r1
 8022dea:	f101 0c01 	add.w	ip, r1, #1
 8022dee:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022df2:	1209      	asrs	r1, r1, #8
 8022df4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022df8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022dfc:	fb11 f303 	smulbb	r3, r1, r3
 8022e00:	fb00 3002 	mla	r0, r0, r2, r3
 8022e04:	b280      	uxth	r0, r0
 8022e06:	1c42      	adds	r2, r0, #1
 8022e08:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022e0c:	1200      	asrs	r0, r0, #8
 8022e0e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022e12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022e14:	f10e 0e03 	add.w	lr, lr, #3
 8022e18:	f108 38ff 	add.w	r8, r8, #4294967295
 8022e1c:	441d      	add	r5, r3
 8022e1e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022e20:	441e      	add	r6, r3
 8022e22:	e6db      	b.n	8022bdc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8022e24:	2402642c 	.word	0x2402642c
 8022e28:	2800      	cmp	r0, #0
 8022e2a:	d09a      	beq.n	8022d62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022e2c:	444b      	add	r3, r9
 8022e2e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022e32:	07db      	lsls	r3, r3, #31
 8022e34:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022e38:	bf54      	ite	pl
 8022e3a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022e3e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022e42:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022e46:	fa5f f38c 	uxtb.w	r3, ip
 8022e4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e4c:	e789      	b.n	8022d62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022e4e:	b017      	add	sp, #92	@ 0x5c
 8022e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e54 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e58:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8022e5c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8022e60:	2d00      	cmp	r5, #0
 8022e62:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8022e66:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8022e6a:	fb04 5e03 	mla	lr, r4, r3, r5
 8022e6e:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8022e72:	f2c0 80b1 	blt.w	8022fd8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022e76:	45a9      	cmp	r9, r5
 8022e78:	f340 80ae 	ble.w	8022fd8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022e7c:	2c00      	cmp	r4, #0
 8022e7e:	f2c0 80ab 	blt.w	8022fd8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022e82:	45a0      	cmp	r8, r4
 8022e84:	f340 80a8 	ble.w	8022fd8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022e88:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8022e8c:	f01e 0f01 	tst.w	lr, #1
 8022e90:	5d97      	ldrb	r7, [r2, r6]
 8022e92:	bf0c      	ite	eq
 8022e94:	f007 070f 	andeq.w	r7, r7, #15
 8022e98:	113f      	asrne	r7, r7, #4
 8022e9a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8022e9e:	b2ff      	uxtb	r7, r7
 8022ea0:	f115 0a01 	adds.w	sl, r5, #1
 8022ea4:	f100 809a 	bmi.w	8022fdc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022ea8:	45d1      	cmp	r9, sl
 8022eaa:	f340 8097 	ble.w	8022fdc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022eae:	2c00      	cmp	r4, #0
 8022eb0:	f2c0 8094 	blt.w	8022fdc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022eb4:	45a0      	cmp	r8, r4
 8022eb6:	f340 8091 	ble.w	8022fdc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022eba:	2800      	cmp	r0, #0
 8022ebc:	f000 8090 	beq.w	8022fe0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8022ec0:	f10e 0b01 	add.w	fp, lr, #1
 8022ec4:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8022ec8:	f01b 0f01 	tst.w	fp, #1
 8022ecc:	5d96      	ldrb	r6, [r2, r6]
 8022ece:	bf0c      	ite	eq
 8022ed0:	f006 060f 	andeq.w	r6, r6, #15
 8022ed4:	1136      	asrne	r6, r6, #4
 8022ed6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022eda:	b2f6      	uxtb	r6, r6
 8022edc:	f1bc 0f00 	cmp.w	ip, #0
 8022ee0:	f000 8082 	beq.w	8022fe8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8022ee4:	2d00      	cmp	r5, #0
 8022ee6:	f104 0401 	add.w	r4, r4, #1
 8022eea:	db7b      	blt.n	8022fe4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022eec:	45a9      	cmp	r9, r5
 8022eee:	dd79      	ble.n	8022fe4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022ef0:	2c00      	cmp	r4, #0
 8022ef2:	db77      	blt.n	8022fe4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022ef4:	45a0      	cmp	r8, r4
 8022ef6:	dd75      	ble.n	8022fe4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022ef8:	eb03 0b0e 	add.w	fp, r3, lr
 8022efc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022f00:	f01b 0f01 	tst.w	fp, #1
 8022f04:	5d55      	ldrb	r5, [r2, r5]
 8022f06:	bf0c      	ite	eq
 8022f08:	f005 050f 	andeq.w	r5, r5, #15
 8022f0c:	112d      	asrne	r5, r5, #4
 8022f0e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022f12:	b2ed      	uxtb	r5, r5
 8022f14:	f1ba 0f00 	cmp.w	sl, #0
 8022f18:	db69      	blt.n	8022fee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022f1a:	45d1      	cmp	r9, sl
 8022f1c:	dd67      	ble.n	8022fee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022f1e:	2c00      	cmp	r4, #0
 8022f20:	db65      	blt.n	8022fee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022f22:	45a0      	cmp	r8, r4
 8022f24:	dd63      	ble.n	8022fee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022f26:	2800      	cmp	r0, #0
 8022f28:	d063      	beq.n	8022ff2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8022f2a:	3301      	adds	r3, #1
 8022f2c:	449e      	add	lr, r3
 8022f2e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022f32:	f01e 0f01 	tst.w	lr, #1
 8022f36:	5cd4      	ldrb	r4, [r2, r3]
 8022f38:	bf0c      	ite	eq
 8022f3a:	f004 040f 	andeq.w	r4, r4, #15
 8022f3e:	1124      	asrne	r4, r4, #4
 8022f40:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022f44:	b2e3      	uxtb	r3, r4
 8022f46:	b282      	uxth	r2, r0
 8022f48:	fa1f fc8c 	uxth.w	ip, ip
 8022f4c:	fb02 f40c 	mul.w	r4, r2, ip
 8022f50:	0112      	lsls	r2, r2, #4
 8022f52:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8022f56:	fa1f f08c 	uxth.w	r0, ip
 8022f5a:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8022f5e:	1b12      	subs	r2, r2, r4
 8022f60:	ebac 0c00 	sub.w	ip, ip, r0
 8022f64:	b292      	uxth	r2, r2
 8022f66:	fa1f fc8c 	uxth.w	ip, ip
 8022f6a:	4372      	muls	r2, r6
 8022f6c:	fb07 220c 	mla	r2, r7, ip, r2
 8022f70:	fb00 2005 	mla	r0, r0, r5, r2
 8022f74:	fb04 0303 	mla	r3, r4, r3, r0
 8022f78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022f7c:	b353      	cbz	r3, 8022fd4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8022f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8022ff8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8022f80:	7808      	ldrb	r0, [r1, #0]
 8022f82:	6814      	ldr	r4, [r2, #0]
 8022f84:	b29a      	uxth	r2, r3
 8022f86:	43db      	mvns	r3, r3
 8022f88:	b2e5      	uxtb	r5, r4
 8022f8a:	b2db      	uxtb	r3, r3
 8022f8c:	fb15 f502 	smulbb	r5, r5, r2
 8022f90:	fb00 5003 	mla	r0, r0, r3, r5
 8022f94:	b280      	uxth	r0, r0
 8022f96:	1c45      	adds	r5, r0, #1
 8022f98:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022f9c:	784d      	ldrb	r5, [r1, #1]
 8022f9e:	fb15 f503 	smulbb	r5, r5, r3
 8022fa2:	1200      	asrs	r0, r0, #8
 8022fa4:	7008      	strb	r0, [r1, #0]
 8022fa6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022faa:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022fae:	fb00 5002 	mla	r0, r0, r2, r5
 8022fb2:	b280      	uxth	r0, r0
 8022fb4:	1c45      	adds	r5, r0, #1
 8022fb6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022fba:	1200      	asrs	r0, r0, #8
 8022fbc:	7048      	strb	r0, [r1, #1]
 8022fbe:	7888      	ldrb	r0, [r1, #2]
 8022fc0:	fb10 f303 	smulbb	r3, r0, r3
 8022fc4:	fb04 3202 	mla	r2, r4, r2, r3
 8022fc8:	b292      	uxth	r2, r2
 8022fca:	1c53      	adds	r3, r2, #1
 8022fcc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022fd0:	1212      	asrs	r2, r2, #8
 8022fd2:	708a      	strb	r2, [r1, #2]
 8022fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fd8:	2700      	movs	r7, #0
 8022fda:	e761      	b.n	8022ea0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8022fdc:	2600      	movs	r6, #0
 8022fde:	e77d      	b.n	8022edc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022fe0:	4606      	mov	r6, r0
 8022fe2:	e77b      	b.n	8022edc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022fe4:	2500      	movs	r5, #0
 8022fe6:	e795      	b.n	8022f14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8022fe8:	4663      	mov	r3, ip
 8022fea:	4665      	mov	r5, ip
 8022fec:	e7ab      	b.n	8022f46 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022fee:	2300      	movs	r3, #0
 8022ff0:	e7a9      	b.n	8022f46 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022ff2:	4603      	mov	r3, r0
 8022ff4:	e7a7      	b.n	8022f46 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022ff6:	bf00      	nop
 8022ff8:	2402642c 	.word	0x2402642c

08022ffc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023000:	b093      	sub	sp, #76	@ 0x4c
 8023002:	461c      	mov	r4, r3
 8023004:	920c      	str	r2, [sp, #48]	@ 0x30
 8023006:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023008:	9011      	str	r0, [sp, #68]	@ 0x44
 802300a:	9107      	str	r1, [sp, #28]
 802300c:	6850      	ldr	r0, [r2, #4]
 802300e:	6812      	ldr	r2, [r2, #0]
 8023010:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023014:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8023018:	fb00 1303 	mla	r3, r0, r3, r1
 802301c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023020:	eb02 0b03 	add.w	fp, r2, r3
 8023024:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023026:	689b      	ldr	r3, [r3, #8]
 8023028:	3301      	adds	r3, #1
 802302a:	f023 0301 	bic.w	r3, r3, #1
 802302e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023030:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023032:	f8d3 8000 	ldr.w	r8, [r3]
 8023036:	9b07      	ldr	r3, [sp, #28]
 8023038:	2b00      	cmp	r3, #0
 802303a:	dc03      	bgt.n	8023044 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802303c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802303e:	2b00      	cmp	r3, #0
 8023040:	f340 822b 	ble.w	802349a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023044:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023046:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802304a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802304e:	1e48      	subs	r0, r1, #1
 8023050:	1e57      	subs	r7, r2, #1
 8023052:	2c00      	cmp	r4, #0
 8023054:	f340 80d7 	ble.w	8023206 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023058:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802305c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023060:	d406      	bmi.n	8023070 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023062:	4584      	cmp	ip, r0
 8023064:	da04      	bge.n	8023070 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023066:	2b00      	cmp	r3, #0
 8023068:	db02      	blt.n	8023070 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802306a:	42bb      	cmp	r3, r7
 802306c:	f2c0 80cc 	blt.w	8023208 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023070:	f11c 0c01 	adds.w	ip, ip, #1
 8023074:	f100 80bf 	bmi.w	80231f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023078:	4561      	cmp	r1, ip
 802307a:	f2c0 80bc 	blt.w	80231f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802307e:	3301      	adds	r3, #1
 8023080:	f100 80b9 	bmi.w	80231f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023084:	429a      	cmp	r2, r3
 8023086:	f2c0 80b6 	blt.w	80231f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802308a:	46a2      	mov	sl, r4
 802308c:	465f      	mov	r7, fp
 802308e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023092:	f1ba 0f00 	cmp.w	sl, #0
 8023096:	f340 80d4 	ble.w	8023242 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802309a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802309e:	1430      	asrs	r0, r6, #16
 80230a0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80230a4:	9308      	str	r3, [sp, #32]
 80230a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80230a8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80230ac:	142b      	asrs	r3, r5, #16
 80230ae:	f100 8124 	bmi.w	80232fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80230b2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80230b6:	4293      	cmp	r3, r2
 80230b8:	f280 811f 	bge.w	80232fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80230bc:	2800      	cmp	r0, #0
 80230be:	f2c0 811c 	blt.w	80232fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80230c2:	f10e 32ff 	add.w	r2, lr, #4294967295
 80230c6:	4290      	cmp	r0, r2
 80230c8:	f280 8117 	bge.w	80232fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80230cc:	fb00 3309 	mla	r3, r0, r9, r3
 80230d0:	0858      	lsrs	r0, r3, #1
 80230d2:	07da      	lsls	r2, r3, #31
 80230d4:	9a08      	ldr	r2, [sp, #32]
 80230d6:	f818 c000 	ldrb.w	ip, [r8, r0]
 80230da:	bf54      	ite	pl
 80230dc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80230e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80230e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80230e8:	fa5f fc8c 	uxtb.w	ip, ip
 80230ec:	2a00      	cmp	r2, #0
 80230ee:	f000 80ed 	beq.w	80232cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80230f2:	1c58      	adds	r0, r3, #1
 80230f4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80230f8:	07c0      	lsls	r0, r0, #31
 80230fa:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80230fe:	bf54      	ite	pl
 8023100:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023104:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023108:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802310c:	fa5f fe8e 	uxtb.w	lr, lr
 8023110:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8023114:	b1c9      	cbz	r1, 802314a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023116:	444b      	add	r3, r9
 8023118:	0858      	lsrs	r0, r3, #1
 802311a:	07da      	lsls	r2, r3, #31
 802311c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023120:	bf54      	ite	pl
 8023122:	f000 000f 	andpl.w	r0, r0, #15
 8023126:	1100      	asrmi	r0, r0, #4
 8023128:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802312c:	b2c0      	uxtb	r0, r0
 802312e:	900a      	str	r0, [sp, #40]	@ 0x28
 8023130:	1c58      	adds	r0, r3, #1
 8023132:	0843      	lsrs	r3, r0, #1
 8023134:	07c2      	lsls	r2, r0, #31
 8023136:	f818 3003 	ldrb.w	r3, [r8, r3]
 802313a:	bf54      	ite	pl
 802313c:	f003 030f 	andpl.w	r3, r3, #15
 8023140:	111b      	asrmi	r3, r3, #4
 8023142:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023146:	b2db      	uxtb	r3, r3
 8023148:	930e      	str	r3, [sp, #56]	@ 0x38
 802314a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802314e:	b289      	uxth	r1, r1
 8023150:	fb02 f301 	mul.w	r3, r2, r1
 8023154:	0112      	lsls	r2, r2, #4
 8023156:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802315a:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802315e:	1ad2      	subs	r2, r2, r3
 8023160:	b289      	uxth	r1, r1
 8023162:	b292      	uxth	r2, r2
 8023164:	1a40      	subs	r0, r0, r1
 8023166:	fa1f fe80 	uxth.w	lr, r0
 802316a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802316c:	4342      	muls	r2, r0
 802316e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023174:	fb01 c102 	mla	r1, r1, r2, ip
 8023178:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802317a:	fb03 1302 	mla	r3, r3, r2, r1
 802317e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023182:	b383      	cbz	r3, 80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023184:	4ac6      	ldr	r2, [pc, #792]	@ (80234a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023186:	2bff      	cmp	r3, #255	@ 0xff
 8023188:	6812      	ldr	r2, [r2, #0]
 802318a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802318e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8023192:	b2d2      	uxtb	r2, r2
 8023194:	f000 80ac 	beq.w	80232f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023198:	b299      	uxth	r1, r3
 802319a:	43db      	mvns	r3, r3
 802319c:	f897 c000 	ldrb.w	ip, [r7]
 80231a0:	fb12 f201 	smulbb	r2, r2, r1
 80231a4:	b2db      	uxtb	r3, r3
 80231a6:	fb10 f001 	smulbb	r0, r0, r1
 80231aa:	fb0c 2203 	mla	r2, ip, r3, r2
 80231ae:	fb1e f101 	smulbb	r1, lr, r1
 80231b2:	b292      	uxth	r2, r2
 80231b4:	f102 0c01 	add.w	ip, r2, #1
 80231b8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80231bc:	1212      	asrs	r2, r2, #8
 80231be:	703a      	strb	r2, [r7, #0]
 80231c0:	787a      	ldrb	r2, [r7, #1]
 80231c2:	fb02 0003 	mla	r0, r2, r3, r0
 80231c6:	b280      	uxth	r0, r0
 80231c8:	1c42      	adds	r2, r0, #1
 80231ca:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80231ce:	78ba      	ldrb	r2, [r7, #2]
 80231d0:	fb02 1303 	mla	r3, r2, r3, r1
 80231d4:	1200      	asrs	r0, r0, #8
 80231d6:	b29b      	uxth	r3, r3
 80231d8:	7078      	strb	r0, [r7, #1]
 80231da:	f103 0e01 	add.w	lr, r3, #1
 80231de:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80231e2:	121b      	asrs	r3, r3, #8
 80231e4:	70bb      	strb	r3, [r7, #2]
 80231e6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80231e8:	3703      	adds	r7, #3
 80231ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80231ee:	441d      	add	r5, r3
 80231f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80231f2:	441e      	add	r6, r3
 80231f4:	e74d      	b.n	8023092 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80231f6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80231f8:	3c01      	subs	r4, #1
 80231fa:	f10b 0b03 	add.w	fp, fp, #3
 80231fe:	441d      	add	r5, r3
 8023200:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023202:	441e      	add	r6, r3
 8023204:	e725      	b.n	8023052 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023206:	d021      	beq.n	802324c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8023208:	1e63      	subs	r3, r4, #1
 802320a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802320c:	fb00 5003 	mla	r0, r0, r3, r5
 8023210:	1400      	asrs	r0, r0, #16
 8023212:	f53f af3a 	bmi.w	802308a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023216:	3901      	subs	r1, #1
 8023218:	4288      	cmp	r0, r1
 802321a:	f6bf af36 	bge.w	802308a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802321e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8023220:	fb01 6303 	mla	r3, r1, r3, r6
 8023224:	141b      	asrs	r3, r3, #16
 8023226:	f53f af30 	bmi.w	802308a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802322a:	3a01      	subs	r2, #1
 802322c:	4293      	cmp	r3, r2
 802322e:	f6bf af2c 	bge.w	802308a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023232:	f10b 0c03 	add.w	ip, fp, #3
 8023236:	46a6      	mov	lr, r4
 8023238:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802323c:	f1be 0f00 	cmp.w	lr, #0
 8023240:	dc79      	bgt.n	8023336 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023242:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023246:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802324a:	44a3      	add	fp, r4
 802324c:	9b07      	ldr	r3, [sp, #28]
 802324e:	2b00      	cmp	r3, #0
 8023250:	f340 8123 	ble.w	802349a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023254:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023258:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802325a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802325e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023262:	eef0 6a62 	vmov.f32	s13, s5
 8023266:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802326a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802326e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023272:	ee16 5a90 	vmov	r5, s13
 8023276:	eef0 6a43 	vmov.f32	s13, s6
 802327a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802327e:	ee16 6a90 	vmov	r6, s13
 8023282:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023286:	ee61 7a27 	vmul.f32	s15, s2, s15
 802328a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802328e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023292:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023296:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802329a:	ee12 2a90 	vmov	r2, s5
 802329e:	eef0 2a47 	vmov.f32	s5, s14
 80232a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232a6:	ee13 2a10 	vmov	r2, s6
 80232aa:	931f      	str	r3, [sp, #124]	@ 0x7c
 80232ac:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80232ae:	eeb0 3a67 	vmov.f32	s6, s15
 80232b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80232b6:	9320      	str	r3, [sp, #128]	@ 0x80
 80232b8:	9b07      	ldr	r3, [sp, #28]
 80232ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80232bc:	3b01      	subs	r3, #1
 80232be:	9307      	str	r3, [sp, #28]
 80232c0:	bf08      	it	eq
 80232c2:	4614      	moveq	r4, r2
 80232c4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80232c6:	bf18      	it	ne
 80232c8:	461c      	movne	r4, r3
 80232ca:	e6b4      	b.n	8023036 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80232cc:	2900      	cmp	r1, #0
 80232ce:	f43f af3c 	beq.w	802314a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80232d2:	eb09 0003 	add.w	r0, r9, r3
 80232d6:	0843      	lsrs	r3, r0, #1
 80232d8:	07c0      	lsls	r0, r0, #31
 80232da:	f818 3003 	ldrb.w	r3, [r8, r3]
 80232de:	bf54      	ite	pl
 80232e0:	f003 030f 	andpl.w	r3, r3, #15
 80232e4:	111b      	asrmi	r3, r3, #4
 80232e6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80232ea:	b2db      	uxtb	r3, r3
 80232ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80232ee:	e72c      	b.n	802314a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80232f0:	703a      	strb	r2, [r7, #0]
 80232f2:	7078      	strb	r0, [r7, #1]
 80232f4:	f887 e002 	strb.w	lr, [r7, #2]
 80232f8:	e775      	b.n	80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80232fa:	1c5a      	adds	r2, r3, #1
 80232fc:	f53f af73 	bmi.w	80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023300:	4594      	cmp	ip, r2
 8023302:	f6ff af70 	blt.w	80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023306:	1c42      	adds	r2, r0, #1
 8023308:	f53f af6d 	bmi.w	80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802330c:	4596      	cmp	lr, r2
 802330e:	f6ff af6a 	blt.w	80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023312:	9302      	str	r3, [sp, #8]
 8023314:	fa0f f38e 	sxth.w	r3, lr
 8023318:	9a08      	ldr	r2, [sp, #32]
 802331a:	9301      	str	r3, [sp, #4]
 802331c:	fa0f f38c 	sxth.w	r3, ip
 8023320:	9105      	str	r1, [sp, #20]
 8023322:	4639      	mov	r1, r7
 8023324:	9300      	str	r3, [sp, #0]
 8023326:	464b      	mov	r3, r9
 8023328:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802332c:	4642      	mov	r2, r8
 802332e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8023330:	f7ff fd90 	bl	8022e54 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023334:	e757      	b.n	80231e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023336:	142a      	asrs	r2, r5, #16
 8023338:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802333c:	1433      	asrs	r3, r6, #16
 802333e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8023342:	fb09 2303 	mla	r3, r9, r3, r2
 8023346:	085a      	lsrs	r2, r3, #1
 8023348:	07d9      	lsls	r1, r3, #31
 802334a:	f818 2002 	ldrb.w	r2, [r8, r2]
 802334e:	bf54      	ite	pl
 8023350:	f002 020f 	andpl.w	r2, r2, #15
 8023354:	1112      	asrmi	r2, r2, #4
 8023356:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802335a:	b2d2      	uxtb	r2, r2
 802335c:	2800      	cmp	r0, #0
 802335e:	f000 8085 	beq.w	802346c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8023362:	f103 0a01 	add.w	sl, r3, #1
 8023366:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802336a:	f01a 0f01 	tst.w	sl, #1
 802336e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023372:	bf0c      	ite	eq
 8023374:	f001 010f 	andeq.w	r1, r1, #15
 8023378:	1109      	asrne	r1, r1, #4
 802337a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802337e:	b2c9      	uxtb	r1, r1
 8023380:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023382:	b1df      	cbz	r7, 80233bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023384:	444b      	add	r3, r9
 8023386:	0859      	lsrs	r1, r3, #1
 8023388:	f013 0f01 	tst.w	r3, #1
 802338c:	f103 0301 	add.w	r3, r3, #1
 8023390:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023394:	bf0c      	ite	eq
 8023396:	f001 010f 	andeq.w	r1, r1, #15
 802339a:	1109      	asrne	r1, r1, #4
 802339c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80233a0:	b2c9      	uxtb	r1, r1
 80233a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80233a4:	0859      	lsrs	r1, r3, #1
 80233a6:	07db      	lsls	r3, r3, #31
 80233a8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80233ac:	bf54      	ite	pl
 80233ae:	f001 010f 	andpl.w	r1, r1, #15
 80233b2:	1109      	asrmi	r1, r1, #4
 80233b4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80233b8:	b2c9      	uxtb	r1, r1
 80233ba:	9110      	str	r1, [sp, #64]	@ 0x40
 80233bc:	b280      	uxth	r0, r0
 80233be:	b2bf      	uxth	r7, r7
 80233c0:	fb00 f307 	mul.w	r3, r0, r7
 80233c4:	0100      	lsls	r0, r0, #4
 80233c6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80233ca:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 80233ce:	1ac0      	subs	r0, r0, r3
 80233d0:	b2bf      	uxth	r7, r7
 80233d2:	b280      	uxth	r0, r0
 80233d4:	1bc9      	subs	r1, r1, r7
 80233d6:	fa1f fa81 	uxth.w	sl, r1
 80233da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80233dc:	4348      	muls	r0, r1
 80233de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80233e0:	fb02 020a 	mla	r2, r2, sl, r0
 80233e4:	fb07 2701 	mla	r7, r7, r1, r2
 80233e8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80233ea:	fb03 7302 	mla	r3, r3, r2, r7
 80233ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80233f2:	b393      	cbz	r3, 802345a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80233f4:	4a2a      	ldr	r2, [pc, #168]	@ (80234a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80233f6:	2bff      	cmp	r3, #255	@ 0xff
 80233f8:	6811      	ldr	r1, [r2, #0]
 80233fa:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80233fe:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8023402:	b2c9      	uxtb	r1, r1
 8023404:	d042      	beq.n	802348c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023406:	b298      	uxth	r0, r3
 8023408:	43db      	mvns	r3, r3
 802340a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802340e:	fb11 f100 	smulbb	r1, r1, r0
 8023412:	b2db      	uxtb	r3, r3
 8023414:	fb17 f700 	smulbb	r7, r7, r0
 8023418:	fb02 1103 	mla	r1, r2, r3, r1
 802341c:	fb1a f000 	smulbb	r0, sl, r0
 8023420:	b289      	uxth	r1, r1
 8023422:	1c4a      	adds	r2, r1, #1
 8023424:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023428:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802342c:	fb02 7703 	mla	r7, r2, r3, r7
 8023430:	1209      	asrs	r1, r1, #8
 8023432:	b2bf      	uxth	r7, r7
 8023434:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023438:	1c7a      	adds	r2, r7, #1
 802343a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802343e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8023442:	fb02 0303 	mla	r3, r2, r3, r0
 8023446:	123f      	asrs	r7, r7, #8
 8023448:	b29b      	uxth	r3, r3
 802344a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802344e:	1c5a      	adds	r2, r3, #1
 8023450:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023454:	121b      	asrs	r3, r3, #8
 8023456:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802345a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802345c:	f10c 0c03 	add.w	ip, ip, #3
 8023460:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023464:	441d      	add	r5, r3
 8023466:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023468:	441e      	add	r6, r3
 802346a:	e6e7      	b.n	802323c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802346c:	2f00      	cmp	r7, #0
 802346e:	d0a5      	beq.n	80233bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023470:	444b      	add	r3, r9
 8023472:	0859      	lsrs	r1, r3, #1
 8023474:	07db      	lsls	r3, r3, #31
 8023476:	f818 1001 	ldrb.w	r1, [r8, r1]
 802347a:	bf54      	ite	pl
 802347c:	f001 010f 	andpl.w	r1, r1, #15
 8023480:	1109      	asrmi	r1, r1, #4
 8023482:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023486:	b2c9      	uxtb	r1, r1
 8023488:	910b      	str	r1, [sp, #44]	@ 0x2c
 802348a:	e797      	b.n	80233bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802348c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023490:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023494:	f80c ac01 	strb.w	sl, [ip, #-1]
 8023498:	e7df      	b.n	802345a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802349a:	b013      	add	sp, #76	@ 0x4c
 802349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234a0:	2402642c 	.word	0x2402642c

080234a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 80234a4:	b530      	push	{r4, r5, lr}
 80234a6:	b29d      	uxth	r5, r3
 80234a8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80234ac:	780c      	ldrb	r4, [r1, #0]
 80234ae:	b298      	uxth	r0, r3
 80234b0:	7813      	ldrb	r3, [r2, #0]
 80234b2:	fb14 f405 	smulbb	r4, r4, r5
 80234b6:	fb13 f300 	smulbb	r3, r3, r0
 80234ba:	441c      	add	r4, r3
 80234bc:	b2a4      	uxth	r4, r4
 80234be:	1c63      	adds	r3, r4, #1
 80234c0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80234c4:	7853      	ldrb	r3, [r2, #1]
 80234c6:	fb13 f300 	smulbb	r3, r3, r0
 80234ca:	1224      	asrs	r4, r4, #8
 80234cc:	7014      	strb	r4, [r2, #0]
 80234ce:	784c      	ldrb	r4, [r1, #1]
 80234d0:	fb14 f405 	smulbb	r4, r4, r5
 80234d4:	441c      	add	r4, r3
 80234d6:	b2a4      	uxth	r4, r4
 80234d8:	1c63      	adds	r3, r4, #1
 80234da:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80234de:	1224      	asrs	r4, r4, #8
 80234e0:	7054      	strb	r4, [r2, #1]
 80234e2:	788b      	ldrb	r3, [r1, #2]
 80234e4:	7891      	ldrb	r1, [r2, #2]
 80234e6:	fb13 f305 	smulbb	r3, r3, r5
 80234ea:	fb11 f000 	smulbb	r0, r1, r0
 80234ee:	4403      	add	r3, r0
 80234f0:	b29b      	uxth	r3, r3
 80234f2:	1c59      	adds	r1, r3, #1
 80234f4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80234f8:	121b      	asrs	r3, r3, #8
 80234fa:	7093      	strb	r3, [r2, #2]
 80234fc:	bd30      	pop	{r4, r5, pc}
	...

08023500 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8023500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023504:	461c      	mov	r4, r3
 8023506:	b08b      	sub	sp, #44	@ 0x2c
 8023508:	460e      	mov	r6, r1
 802350a:	4615      	mov	r5, r2
 802350c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802350e:	4682      	mov	sl, r0
 8023510:	6861      	ldr	r1, [r4, #4]
 8023512:	aa06      	add	r2, sp, #24
 8023514:	6820      	ldr	r0, [r4, #0]
 8023516:	2702      	movs	r7, #2
 8023518:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802351c:	3504      	adds	r5, #4
 802351e:	c203      	stmia	r2!, {r0, r1}
 8023520:	6818      	ldr	r0, [r3, #0]
 8023522:	aa08      	add	r2, sp, #32
 8023524:	6859      	ldr	r1, [r3, #4]
 8023526:	c203      	stmia	r2!, {r0, r1}
 8023528:	a806      	add	r0, sp, #24
 802352a:	f7f2 fef3 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802352e:	4621      	mov	r1, r4
 8023530:	a808      	add	r0, sp, #32
 8023532:	f7f2 ff17 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023536:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802353a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802353e:	f002 0301 	and.w	r3, r2, #1
 8023542:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8023546:	9302      	str	r3, [sp, #8]
 8023548:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802354c:	f003 0101 	and.w	r1, r3, #1
 8023550:	9101      	str	r1, [sp, #4]
 8023552:	9801      	ldr	r0, [sp, #4]
 8023554:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8023558:	4403      	add	r3, r0
 802355a:	fb01 2303 	mla	r3, r1, r3, r2
 802355e:	fb93 f3f7 	sdiv	r3, r3, r7
 8023562:	441e      	add	r6, r3
 8023564:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8023568:	441a      	add	r2, r3
 802356a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802356e:	4419      	add	r1, r3
 8023570:	4b70      	ldr	r3, [pc, #448]	@ (8023734 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8023572:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023576:	6818      	ldr	r0, [r3, #0]
 8023578:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 802357c:	6803      	ldr	r3, [r0, #0]
 802357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023580:	4798      	blx	r3
 8023582:	4a6d      	ldr	r2, [pc, #436]	@ (8023738 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8023584:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8023588:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802358c:	8813      	ldrh	r3, [r2, #0]
 802358e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8023592:	fb03 1404 	mla	r4, r3, r4, r1
 8023596:	4611      	mov	r1, r2
 8023598:	fb0b f303 	mul.w	r3, fp, r3
 802359c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80235a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235a4:	4404      	add	r4, r0
 80235a6:	4423      	add	r3, r4
 80235a8:	d073      	beq.n	8023692 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80235aa:	9705      	str	r7, [sp, #20]
 80235ac:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80235b0:	9b03      	ldr	r3, [sp, #12]
 80235b2:	429c      	cmp	r4, r3
 80235b4:	f080 80b5 	bcs.w	8023722 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80235b8:	9b02      	ldr	r3, [sp, #8]
 80235ba:	b35b      	cbz	r3, 8023614 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 80235bc:	7831      	ldrb	r1, [r6, #0]
 80235be:	4622      	mov	r2, r4
 80235c0:	1c77      	adds	r7, r6, #1
 80235c2:	3403      	adds	r4, #3
 80235c4:	f001 010f 	and.w	r1, r1, #15
 80235c8:	f108 3bff 	add.w	fp, r8, #4294967295
 80235cc:	464b      	mov	r3, r9
 80235ce:	4650      	mov	r0, sl
 80235d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80235d4:	4429      	add	r1, r5
 80235d6:	f7ff ff65 	bl	80234a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80235da:	f1bb 0f01 	cmp.w	fp, #1
 80235de:	dd1c      	ble.n	802361a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 80235e0:	7839      	ldrb	r1, [r7, #0]
 80235e2:	4622      	mov	r2, r4
 80235e4:	464b      	mov	r3, r9
 80235e6:	4650      	mov	r0, sl
 80235e8:	0909      	lsrs	r1, r1, #4
 80235ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80235ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80235f2:	4429      	add	r1, r5
 80235f4:	f7ff ff56 	bl	80234a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80235f8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80235fc:	1ce2      	adds	r2, r4, #3
 80235fe:	464b      	mov	r3, r9
 8023600:	f001 010f 	and.w	r1, r1, #15
 8023604:	4650      	mov	r0, sl
 8023606:	3406      	adds	r4, #6
 8023608:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802360c:	4429      	add	r1, r5
 802360e:	f7ff ff49 	bl	80234a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023612:	e7e2      	b.n	80235da <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8023614:	4637      	mov	r7, r6
 8023616:	46c3      	mov	fp, r8
 8023618:	e7df      	b.n	80235da <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802361a:	d10a      	bne.n	8023632 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 802361c:	7839      	ldrb	r1, [r7, #0]
 802361e:	4622      	mov	r2, r4
 8023620:	3403      	adds	r4, #3
 8023622:	464b      	mov	r3, r9
 8023624:	0909      	lsrs	r1, r1, #4
 8023626:	4650      	mov	r0, sl
 8023628:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802362c:	4429      	add	r1, r5
 802362e:	f7ff ff39 	bl	80234a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8023632:	9b04      	ldr	r3, [sp, #16]
 8023634:	9a01      	ldr	r2, [sp, #4]
 8023636:	881b      	ldrh	r3, [r3, #0]
 8023638:	eba3 0308 	sub.w	r3, r3, r8
 802363c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023640:	441c      	add	r4, r3
 8023642:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023646:	4413      	add	r3, r2
 8023648:	9a05      	ldr	r2, [sp, #20]
 802364a:	fb93 f3f2 	sdiv	r3, r3, r2
 802364e:	441e      	add	r6, r3
 8023650:	e7ae      	b.n	80235b0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 8023652:	4632      	mov	r2, r6
 8023654:	46c4      	mov	ip, r8
 8023656:	e037      	b.n	80236c8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8023658:	d10e      	bne.n	8023678 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 802365a:	7812      	ldrb	r2, [r2, #0]
 802365c:	3003      	adds	r0, #3
 802365e:	0912      	lsrs	r2, r2, #4
 8023660:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023664:	18ac      	adds	r4, r5, r2
 8023666:	5caa      	ldrb	r2, [r5, r2]
 8023668:	f800 2c03 	strb.w	r2, [r0, #-3]
 802366c:	7862      	ldrb	r2, [r4, #1]
 802366e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8023672:	78a2      	ldrb	r2, [r4, #2]
 8023674:	f800 2c01 	strb.w	r2, [r0, #-1]
 8023678:	880c      	ldrh	r4, [r1, #0]
 802367a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802367e:	eba4 0408 	sub.w	r4, r4, r8
 8023682:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023686:	4404      	add	r4, r0
 8023688:	9801      	ldr	r0, [sp, #4]
 802368a:	4402      	add	r2, r0
 802368c:	fb92 f2f7 	sdiv	r2, r2, r7
 8023690:	4416      	add	r6, r2
 8023692:	429c      	cmp	r4, r3
 8023694:	d245      	bcs.n	8023722 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8023696:	9a02      	ldr	r2, [sp, #8]
 8023698:	2a00      	cmp	r2, #0
 802369a:	d0da      	beq.n	8023652 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 802369c:	7830      	ldrb	r0, [r6, #0]
 802369e:	1c72      	adds	r2, r6, #1
 80236a0:	3403      	adds	r4, #3
 80236a2:	f000 000f 	and.w	r0, r0, #15
 80236a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80236aa:	eb05 0c00 	add.w	ip, r5, r0
 80236ae:	5c28      	ldrb	r0, [r5, r0]
 80236b0:	f804 0c03 	strb.w	r0, [r4, #-3]
 80236b4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80236b8:	f804 0c02 	strb.w	r0, [r4, #-2]
 80236bc:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80236c0:	f108 3cff 	add.w	ip, r8, #4294967295
 80236c4:	f804 0c01 	strb.w	r0, [r4, #-1]
 80236c8:	f1bc 0f01 	cmp.w	ip, #1
 80236cc:	4620      	mov	r0, r4
 80236ce:	f104 0406 	add.w	r4, r4, #6
 80236d2:	ddc1      	ble.n	8023658 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80236d4:	7810      	ldrb	r0, [r2, #0]
 80236d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80236da:	0900      	lsrs	r0, r0, #4
 80236dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80236e0:	eb05 0e00 	add.w	lr, r5, r0
 80236e4:	5c28      	ldrb	r0, [r5, r0]
 80236e6:	f804 0c06 	strb.w	r0, [r4, #-6]
 80236ea:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80236ee:	f804 0c05 	strb.w	r0, [r4, #-5]
 80236f2:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80236f6:	f804 0c04 	strb.w	r0, [r4, #-4]
 80236fa:	f812 0b01 	ldrb.w	r0, [r2], #1
 80236fe:	f000 000f 	and.w	r0, r0, #15
 8023702:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023706:	eb05 0e00 	add.w	lr, r5, r0
 802370a:	5c28      	ldrb	r0, [r5, r0]
 802370c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8023710:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023714:	f804 0c02 	strb.w	r0, [r4, #-2]
 8023718:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802371c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8023720:	e7d2      	b.n	80236c8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8023722:	4b04      	ldr	r3, [pc, #16]	@ (8023734 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8023724:	6818      	ldr	r0, [r3, #0]
 8023726:	6803      	ldr	r3, [r0, #0]
 8023728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802372a:	4798      	blx	r3
 802372c:	b00b      	add	sp, #44	@ 0x2c
 802372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023732:	bf00      	nop
 8023734:	2402641c 	.word	0x2402641c
 8023738:	24026416 	.word	0x24026416

0802373c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 802373c:	b530      	push	{r4, r5, lr}
 802373e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8023742:	780d      	ldrb	r5, [r1, #0]
 8023744:	28ff      	cmp	r0, #255	@ 0xff
 8023746:	d107      	bne.n	8023758 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8023748:	2bff      	cmp	r3, #255	@ 0xff
 802374a:	d105      	bne.n	8023758 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802374c:	7015      	strb	r5, [r2, #0]
 802374e:	784b      	ldrb	r3, [r1, #1]
 8023750:	7053      	strb	r3, [r2, #1]
 8023752:	788b      	ldrb	r3, [r1, #2]
 8023754:	7093      	strb	r3, [r2, #2]
 8023756:	bd30      	pop	{r4, r5, pc}
 8023758:	fb10 f003 	smulbb	r0, r0, r3
 802375c:	b283      	uxth	r3, r0
 802375e:	1c58      	adds	r0, r3, #1
 8023760:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023764:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023768:	b284      	uxth	r4, r0
 802376a:	43c0      	mvns	r0, r0
 802376c:	fb15 f504 	smulbb	r5, r5, r4
 8023770:	b2c3      	uxtb	r3, r0
 8023772:	7810      	ldrb	r0, [r2, #0]
 8023774:	fb00 5003 	mla	r0, r0, r3, r5
 8023778:	b280      	uxth	r0, r0
 802377a:	1c45      	adds	r5, r0, #1
 802377c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023780:	7855      	ldrb	r5, [r2, #1]
 8023782:	fb15 f503 	smulbb	r5, r5, r3
 8023786:	1200      	asrs	r0, r0, #8
 8023788:	7010      	strb	r0, [r2, #0]
 802378a:	7848      	ldrb	r0, [r1, #1]
 802378c:	fb00 5004 	mla	r0, r0, r4, r5
 8023790:	b280      	uxth	r0, r0
 8023792:	1c45      	adds	r5, r0, #1
 8023794:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023798:	1200      	asrs	r0, r0, #8
 802379a:	7050      	strb	r0, [r2, #1]
 802379c:	7888      	ldrb	r0, [r1, #2]
 802379e:	7891      	ldrb	r1, [r2, #2]
 80237a0:	fb11 f303 	smulbb	r3, r1, r3
 80237a4:	fb00 3304 	mla	r3, r0, r4, r3
 80237a8:	b29b      	uxth	r3, r3
 80237aa:	1c59      	adds	r1, r3, #1
 80237ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80237b0:	121b      	asrs	r3, r3, #8
 80237b2:	e7cf      	b.n	8023754 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080237b4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80237b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237b8:	461d      	mov	r5, r3
 80237ba:	b08f      	sub	sp, #60	@ 0x3c
 80237bc:	460c      	mov	r4, r1
 80237be:	4616      	mov	r6, r2
 80237c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80237c2:	4680      	mov	r8, r0
 80237c4:	6869      	ldr	r1, [r5, #4]
 80237c6:	aa0a      	add	r2, sp, #40	@ 0x28
 80237c8:	6828      	ldr	r0, [r5, #0]
 80237ca:	3604      	adds	r6, #4
 80237cc:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 80237d0:	4f57      	ldr	r7, [pc, #348]	@ (8023930 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 80237d2:	c203      	stmia	r2!, {r0, r1}
 80237d4:	6818      	ldr	r0, [r3, #0]
 80237d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80237d8:	6859      	ldr	r1, [r3, #4]
 80237da:	c203      	stmia	r2!, {r0, r1}
 80237dc:	a80a      	add	r0, sp, #40	@ 0x28
 80237de:	f7f2 fd99 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80237e2:	4629      	mov	r1, r5
 80237e4:	a80c      	add	r0, sp, #48	@ 0x30
 80237e6:	2502      	movs	r5, #2
 80237e8:	f7f2 fdbc 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80237ec:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80237f0:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 80237f4:	f002 0301 	and.w	r3, r2, #1
 80237f8:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 80237fc:	9304      	str	r3, [sp, #16]
 80237fe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023802:	f003 0101 	and.w	r1, r3, #1
 8023806:	9103      	str	r1, [sp, #12]
 8023808:	9803      	ldr	r0, [sp, #12]
 802380a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802380e:	4403      	add	r3, r0
 8023810:	6838      	ldr	r0, [r7, #0]
 8023812:	fb01 2303 	mla	r3, r1, r3, r2
 8023816:	fb93 f3f5 	sdiv	r3, r3, r5
 802381a:	18e5      	adds	r5, r4, r3
 802381c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8023820:	441a      	add	r2, r3
 8023822:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8023826:	4419      	add	r1, r3
 8023828:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802382c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8023830:	6803      	ldr	r3, [r0, #0]
 8023832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023834:	4798      	blx	r3
 8023836:	4a3f      	ldr	r2, [pc, #252]	@ (8023934 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8023838:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802383c:	8813      	ldrh	r3, [r2, #0]
 802383e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8023842:	9207      	str	r2, [sp, #28]
 8023844:	fb03 1404 	mla	r4, r3, r4, r1
 8023848:	fb0a f303 	mul.w	r3, sl, r3
 802384c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023850:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023854:	4404      	add	r4, r0
 8023856:	18e3      	adds	r3, r4, r3
 8023858:	e9cd 3705 	strd	r3, r7, [sp, #20]
 802385c:	9b05      	ldr	r3, [sp, #20]
 802385e:	429c      	cmp	r4, r3
 8023860:	d25d      	bcs.n	802391e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8023862:	9b04      	ldr	r3, [sp, #16]
 8023864:	2b00      	cmp	r3, #0
 8023866:	d037      	beq.n	80238d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8023868:	782b      	ldrb	r3, [r5, #0]
 802386a:	1c6f      	adds	r7, r5, #1
 802386c:	f003 030f 	and.w	r3, r3, #15
 8023870:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023874:	9309      	str	r3, [sp, #36]	@ 0x24
 8023876:	0e1b      	lsrs	r3, r3, #24
 8023878:	d006      	beq.n	8023888 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 802387a:	9300      	str	r3, [sp, #0]
 802387c:	4622      	mov	r2, r4
 802387e:	464b      	mov	r3, r9
 8023880:	a909      	add	r1, sp, #36	@ 0x24
 8023882:	4640      	mov	r0, r8
 8023884:	f7ff ff5a 	bl	802373c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023888:	3403      	adds	r4, #3
 802388a:	f10b 3aff 	add.w	sl, fp, #4294967295
 802388e:	f1ba 0f01 	cmp.w	sl, #1
 8023892:	dd24      	ble.n	80238de <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8023894:	783b      	ldrb	r3, [r7, #0]
 8023896:	091b      	lsrs	r3, r3, #4
 8023898:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802389c:	9308      	str	r3, [sp, #32]
 802389e:	0e1b      	lsrs	r3, r3, #24
 80238a0:	d006      	beq.n	80238b0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80238a2:	9300      	str	r3, [sp, #0]
 80238a4:	4622      	mov	r2, r4
 80238a6:	464b      	mov	r3, r9
 80238a8:	a908      	add	r1, sp, #32
 80238aa:	4640      	mov	r0, r8
 80238ac:	f7ff ff46 	bl	802373c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80238b0:	f817 3b01 	ldrb.w	r3, [r7], #1
 80238b4:	f003 030f 	and.w	r3, r3, #15
 80238b8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80238bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80238be:	0e1b      	lsrs	r3, r3, #24
 80238c0:	d006      	beq.n	80238d0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80238c2:	9300      	str	r3, [sp, #0]
 80238c4:	1ce2      	adds	r2, r4, #3
 80238c6:	464b      	mov	r3, r9
 80238c8:	a909      	add	r1, sp, #36	@ 0x24
 80238ca:	4640      	mov	r0, r8
 80238cc:	f7ff ff36 	bl	802373c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80238d0:	3406      	adds	r4, #6
 80238d2:	f1aa 0a02 	sub.w	sl, sl, #2
 80238d6:	e7da      	b.n	802388e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80238d8:	462f      	mov	r7, r5
 80238da:	46da      	mov	sl, fp
 80238dc:	e7d7      	b.n	802388e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80238de:	d10e      	bne.n	80238fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 80238e0:	783b      	ldrb	r3, [r7, #0]
 80238e2:	091b      	lsrs	r3, r3, #4
 80238e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80238e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80238ea:	0e1b      	lsrs	r3, r3, #24
 80238ec:	d006      	beq.n	80238fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 80238ee:	9300      	str	r3, [sp, #0]
 80238f0:	4622      	mov	r2, r4
 80238f2:	464b      	mov	r3, r9
 80238f4:	a909      	add	r1, sp, #36	@ 0x24
 80238f6:	4640      	mov	r0, r8
 80238f8:	f7ff ff20 	bl	802373c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80238fc:	3403      	adds	r4, #3
 80238fe:	9b07      	ldr	r3, [sp, #28]
 8023900:	9a03      	ldr	r2, [sp, #12]
 8023902:	881b      	ldrh	r3, [r3, #0]
 8023904:	eba3 030b 	sub.w	r3, r3, fp
 8023908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802390c:	441c      	add	r4, r3
 802390e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023912:	4413      	add	r3, r2
 8023914:	2202      	movs	r2, #2
 8023916:	fb93 f3f2 	sdiv	r3, r3, r2
 802391a:	441d      	add	r5, r3
 802391c:	e79e      	b.n	802385c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 802391e:	9b06      	ldr	r3, [sp, #24]
 8023920:	6818      	ldr	r0, [r3, #0]
 8023922:	6803      	ldr	r3, [r0, #0]
 8023924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023926:	4798      	blx	r3
 8023928:	b00f      	add	sp, #60	@ 0x3c
 802392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802392e:	bf00      	nop
 8023930:	2402641c 	.word	0x2402641c
 8023934:	24026416 	.word	0x24026416

08023938 <CRC_Lock>:
 8023938:	4a2d      	ldr	r2, [pc, #180]	@ (80239f0 <CRC_Lock+0xb8>)
 802393a:	b530      	push	{r4, r5, lr}
 802393c:	6813      	ldr	r3, [r2, #0]
 802393e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8023942:	f023 0301 	bic.w	r3, r3, #1
 8023946:	6013      	str	r3, [r2, #0]
 8023948:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802394c:	4b29      	ldr	r3, [pc, #164]	@ (80239f4 <CRC_Lock+0xbc>)
 802394e:	681c      	ldr	r4, [r3, #0]
 8023950:	4014      	ands	r4, r2
 8023952:	42ac      	cmp	r4, r5
 8023954:	d005      	beq.n	8023962 <CRC_Lock+0x2a>
 8023956:	681c      	ldr	r4, [r3, #0]
 8023958:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802395c:	4014      	ands	r4, r2
 802395e:	42ac      	cmp	r4, r5
 8023960:	d125      	bne.n	80239ae <CRC_Lock+0x76>
 8023962:	4b25      	ldr	r3, [pc, #148]	@ (80239f8 <CRC_Lock+0xc0>)
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	2b00      	cmp	r3, #0
 8023968:	d139      	bne.n	80239de <CRC_Lock+0xa6>
 802396a:	4b24      	ldr	r3, [pc, #144]	@ (80239fc <CRC_Lock+0xc4>)
 802396c:	681a      	ldr	r2, [r3, #0]
 802396e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023972:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8023976:	d00d      	beq.n	8023994 <CRC_Lock+0x5c>
 8023978:	681a      	ldr	r2, [r3, #0]
 802397a:	f240 4483 	movw	r4, #1155	@ 0x483
 802397e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023982:	42a2      	cmp	r2, r4
 8023984:	d006      	beq.n	8023994 <CRC_Lock+0x5c>
 8023986:	681b      	ldr	r3, [r3, #0]
 8023988:	f240 4285 	movw	r2, #1157	@ 0x485
 802398c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023990:	4293      	cmp	r3, r2
 8023992:	d124      	bne.n	80239de <CRC_Lock+0xa6>
 8023994:	4b1a      	ldr	r3, [pc, #104]	@ (8023a00 <CRC_Lock+0xc8>)
 8023996:	2201      	movs	r2, #1
 8023998:	601a      	str	r2, [r3, #0]
 802399a:	681a      	ldr	r2, [r3, #0]
 802399c:	2a00      	cmp	r2, #0
 802399e:	d1fc      	bne.n	802399a <CRC_Lock+0x62>
 80239a0:	4b18      	ldr	r3, [pc, #96]	@ (8023a04 <CRC_Lock+0xcc>)
 80239a2:	6018      	str	r0, [r3, #0]
 80239a4:	6818      	ldr	r0, [r3, #0]
 80239a6:	1a43      	subs	r3, r0, r1
 80239a8:	4258      	negs	r0, r3
 80239aa:	4158      	adcs	r0, r3
 80239ac:	e00e      	b.n	80239cc <CRC_Lock+0x94>
 80239ae:	681b      	ldr	r3, [r3, #0]
 80239b0:	4013      	ands	r3, r2
 80239b2:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80239b6:	4293      	cmp	r3, r2
 80239b8:	d111      	bne.n	80239de <CRC_Lock+0xa6>
 80239ba:	4b13      	ldr	r3, [pc, #76]	@ (8023a08 <CRC_Lock+0xd0>)
 80239bc:	f240 4286 	movw	r2, #1158	@ 0x486
 80239c0:	681b      	ldr	r3, [r3, #0]
 80239c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80239c6:	4293      	cmp	r3, r2
 80239c8:	d001      	beq.n	80239ce <CRC_Lock+0x96>
 80239ca:	2000      	movs	r0, #0
 80239cc:	bd30      	pop	{r4, r5, pc}
 80239ce:	4b0f      	ldr	r3, [pc, #60]	@ (8023a0c <CRC_Lock+0xd4>)
 80239d0:	2201      	movs	r2, #1
 80239d2:	601a      	str	r2, [r3, #0]
 80239d4:	681a      	ldr	r2, [r3, #0]
 80239d6:	2a00      	cmp	r2, #0
 80239d8:	d1fc      	bne.n	80239d4 <CRC_Lock+0x9c>
 80239da:	4b0d      	ldr	r3, [pc, #52]	@ (8023a10 <CRC_Lock+0xd8>)
 80239dc:	e7e1      	b.n	80239a2 <CRC_Lock+0x6a>
 80239de:	4b0d      	ldr	r3, [pc, #52]	@ (8023a14 <CRC_Lock+0xdc>)
 80239e0:	2201      	movs	r2, #1
 80239e2:	601a      	str	r2, [r3, #0]
 80239e4:	681a      	ldr	r2, [r3, #0]
 80239e6:	2a00      	cmp	r2, #0
 80239e8:	d1fc      	bne.n	80239e4 <CRC_Lock+0xac>
 80239ea:	4b0b      	ldr	r3, [pc, #44]	@ (8023a18 <CRC_Lock+0xe0>)
 80239ec:	e7d9      	b.n	80239a2 <CRC_Lock+0x6a>
 80239ee:	bf00      	nop
 80239f0:	e0002000 	.word	0xe0002000
 80239f4:	e000ed00 	.word	0xe000ed00
 80239f8:	e0042000 	.word	0xe0042000
 80239fc:	5c001000 	.word	0x5c001000
 8023a00:	58024c08 	.word	0x58024c08
 8023a04:	58024c00 	.word	0x58024c00
 8023a08:	46008ff0 	.word	0x46008ff0
 8023a0c:	46024c08 	.word	0x46024c08
 8023a10:	46024c00 	.word	0x46024c00
 8023a14:	40023008 	.word	0x40023008
 8023a18:	40023000 	.word	0x40023000

08023a1c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023a1c:	6101      	str	r1, [r0, #16]
 8023a1e:	4770      	bx	lr

08023a20 <_ZN8touchgfx8Gestures4tickEv>:
 8023a20:	7b83      	ldrb	r3, [r0, #14]
 8023a22:	b14b      	cbz	r3, 8023a38 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023a24:	8903      	ldrh	r3, [r0, #8]
 8023a26:	3301      	adds	r3, #1
 8023a28:	b29b      	uxth	r3, r3
 8023a2a:	2b07      	cmp	r3, #7
 8023a2c:	8103      	strh	r3, [r0, #8]
 8023a2e:	bf81      	itttt	hi
 8023a30:	2300      	movhi	r3, #0
 8023a32:	8143      	strhhi	r3, [r0, #10]
 8023a34:	8183      	strhhi	r3, [r0, #12]
 8023a36:	7383      	strbhi	r3, [r0, #14]
 8023a38:	4770      	bx	lr
	...

08023a3c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023a3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023a40:	4698      	mov	r8, r3
 8023a42:	8883      	ldrh	r3, [r0, #4]
 8023a44:	4604      	mov	r4, r0
 8023a46:	4617      	mov	r7, r2
 8023a48:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023a4c:	eba8 0303 	sub.w	r3, r8, r3
 8023a50:	4a19      	ldr	r2, [pc, #100]	@ (8023ab8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8023a52:	460e      	mov	r6, r1
 8023a54:	b21b      	sxth	r3, r3
 8023a56:	88c1      	ldrh	r1, [r0, #6]
 8023a58:	9200      	str	r2, [sp, #0]
 8023a5a:	2000      	movs	r0, #0
 8023a5c:	2b00      	cmp	r3, #0
 8023a5e:	8aa2      	ldrh	r2, [r4, #20]
 8023a60:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8023a64:	bfb8      	it	lt
 8023a66:	425b      	neglt	r3, r3
 8023a68:	f88d 0004 	strb.w	r0, [sp, #4]
 8023a6c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023a70:	b21b      	sxth	r3, r3
 8023a72:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023a76:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023a7a:	4293      	cmp	r3, r2
 8023a7c:	dc07      	bgt.n	8023a8e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8023a7e:	1a69      	subs	r1, r5, r1
 8023a80:	b209      	sxth	r1, r1
 8023a82:	2900      	cmp	r1, #0
 8023a84:	bfb8      	it	lt
 8023a86:	4249      	neglt	r1, r1
 8023a88:	b209      	sxth	r1, r1
 8023a8a:	428a      	cmp	r2, r1
 8023a8c:	da10      	bge.n	8023ab0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8023a8e:	6920      	ldr	r0, [r4, #16]
 8023a90:	4669      	mov	r1, sp
 8023a92:	eba8 0606 	sub.w	r6, r8, r6
 8023a96:	1bef      	subs	r7, r5, r7
 8023a98:	6803      	ldr	r3, [r0, #0]
 8023a9a:	685b      	ldr	r3, [r3, #4]
 8023a9c:	4798      	blx	r3
 8023a9e:	2300      	movs	r3, #0
 8023aa0:	2001      	movs	r0, #1
 8023aa2:	8166      	strh	r6, [r4, #10]
 8023aa4:	8123      	strh	r3, [r4, #8]
 8023aa6:	81a7      	strh	r7, [r4, #12]
 8023aa8:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023aac:	80e5      	strh	r5, [r4, #6]
 8023aae:	73a0      	strb	r0, [r4, #14]
 8023ab0:	b004      	add	sp, #16
 8023ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ab6:	bf00      	nop
 8023ab8:	080294d4 	.word	0x080294d4

08023abc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023abe:	461e      	mov	r6, r3
 8023ac0:	1e4b      	subs	r3, r1, #1
 8023ac2:	b085      	sub	sp, #20
 8023ac4:	4604      	mov	r4, r0
 8023ac6:	2b01      	cmp	r3, #1
 8023ac8:	460d      	mov	r5, r1
 8023aca:	4617      	mov	r7, r2
 8023acc:	d84b      	bhi.n	8023b66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023ace:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023ad2:	1cd3      	adds	r3, r2, #3
 8023ad4:	b29b      	uxth	r3, r3
 8023ad6:	2b06      	cmp	r3, #6
 8023ad8:	d916      	bls.n	8023b08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023ada:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8023b7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023ade:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023ae2:	f8cd c004 	str.w	ip, [sp, #4]
 8023ae6:	f04f 0c00 	mov.w	ip, #0
 8023aea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023aee:	6900      	ldr	r0, [r0, #16]
 8023af0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023af4:	a901      	add	r1, sp, #4
 8023af6:	f88d c008 	strb.w	ip, [sp, #8]
 8023afa:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023afe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023b02:	6803      	ldr	r3, [r0, #0]
 8023b04:	689b      	ldr	r3, [r3, #8]
 8023b06:	4798      	blx	r3
 8023b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023b0c:	1cd3      	adds	r3, r2, #3
 8023b0e:	b29b      	uxth	r3, r3
 8023b10:	2b06      	cmp	r3, #6
 8023b12:	d916      	bls.n	8023b42 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023b14:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8023b7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023b18:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023b1c:	f8cd c004 	str.w	ip, [sp, #4]
 8023b20:	f04f 0c01 	mov.w	ip, #1
 8023b24:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023b28:	6920      	ldr	r0, [r4, #16]
 8023b2a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023b2e:	a901      	add	r1, sp, #4
 8023b30:	f88d c008 	strb.w	ip, [sp, #8]
 8023b34:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023b38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023b3c:	6803      	ldr	r3, [r0, #0]
 8023b3e:	689b      	ldr	r3, [r3, #8]
 8023b40:	4798      	blx	r3
 8023b42:	4b0d      	ldr	r3, [pc, #52]	@ (8023b78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8023b44:	a901      	add	r1, sp, #4
 8023b46:	6920      	ldr	r0, [r4, #16]
 8023b48:	9301      	str	r3, [sp, #4]
 8023b4a:	2300      	movs	r3, #0
 8023b4c:	f88d 5008 	strb.w	r5, [sp, #8]
 8023b50:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023b54:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023b58:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023b5c:	6803      	ldr	r3, [r0, #0]
 8023b5e:	681b      	ldr	r3, [r3, #0]
 8023b60:	4798      	blx	r3
 8023b62:	b005      	add	sp, #20
 8023b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b66:	2900      	cmp	r1, #0
 8023b68:	d1eb      	bne.n	8023b42 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023b6a:	80a2      	strh	r2, [r4, #4]
 8023b6c:	80c6      	strh	r6, [r0, #6]
 8023b6e:	60a1      	str	r1, [r4, #8]
 8023b70:	81a1      	strh	r1, [r4, #12]
 8023b72:	73a1      	strb	r1, [r4, #14]
 8023b74:	e7e5      	b.n	8023b42 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023b76:	bf00      	nop
 8023b78:	080294c0 	.word	0x080294c0
 8023b7c:	080294e8 	.word	0x080294e8

08023b80 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8023b80:	10c9      	asrs	r1, r1, #3
 8023b82:	2900      	cmp	r1, #0
 8023b84:	bfb8      	it	lt
 8023b86:	4249      	neglt	r1, r1
 8023b88:	2801      	cmp	r0, #1
 8023b8a:	d108      	bne.n	8023b9e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8023b8c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023b90:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8023b94:	4601      	mov	r1, r0
 8023b96:	dd02      	ble.n	8023b9e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8023b98:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8023b9c:	4770      	bx	lr
 8023b9e:	29ff      	cmp	r1, #255	@ 0xff
 8023ba0:	bfa8      	it	ge
 8023ba2:	21ff      	movge	r1, #255	@ 0xff
 8023ba4:	4608      	mov	r0, r1
 8023ba6:	4770      	bx	lr

08023ba8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023ba8:	b410      	push	{r4}
 8023baa:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8023bae:	429c      	cmp	r4, r3
 8023bb0:	d803      	bhi.n	8023bba <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8023bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023bb6:	f7f0 beb7 	b.w	8014928 <_ZN8touchgfx7Outline6lineToEii>
 8023bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023bbe:	4770      	bx	lr

08023bc0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8023bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bc4:	b08b      	sub	sp, #44	@ 0x2c
 8023bc6:	4606      	mov	r6, r0
 8023bc8:	468a      	mov	sl, r1
 8023bca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023bce:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8023bd2:	9308      	str	r3, [sp, #32]
 8023bd4:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8023bd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8023bda:	f7f1 f810 	bl	8014bfe <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8023bde:	68b5      	ldr	r5, [r6, #8]
 8023be0:	4604      	mov	r4, r0
 8023be2:	2d00      	cmp	r5, #0
 8023be4:	d044      	beq.n	8023c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8023be6:	6873      	ldr	r3, [r6, #4]
 8023be8:	42ab      	cmp	r3, r5
 8023bea:	d33d      	bcc.n	8023c68 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8023bec:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023bf0:	f04f 0800 	mov.w	r8, #0
 8023bf4:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8023bf8:	eb02 0b03 	add.w	fp, r2, r3
 8023bfc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8023c00:	fb02 1203 	mla	r2, r2, r3, r1
 8023c04:	9205      	str	r2, [sp, #20]
 8023c06:	1e6a      	subs	r2, r5, #1
 8023c08:	9204      	str	r2, [sp, #16]
 8023c0a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8023c0e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023c12:	454b      	cmp	r3, r9
 8023c14:	463a      	mov	r2, r7
 8023c16:	d008      	beq.n	8023c2a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8023c18:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8023c1c:	eb03 0b09 	add.w	fp, r3, r9
 8023c20:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8023c24:	fb03 1309 	mla	r3, r3, r9, r1
 8023c28:	9305      	str	r3, [sp, #20]
 8023c2a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8023c2e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8023c32:	4498      	add	r8, r3
 8023c34:	9b04      	ldr	r3, [sp, #16]
 8023c36:	3b01      	subs	r3, #1
 8023c38:	9304      	str	r3, [sp, #16]
 8023c3a:	9b04      	ldr	r3, [sp, #16]
 8023c3c:	3301      	adds	r3, #1
 8023c3e:	d015      	beq.n	8023c6c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8023c40:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8023c44:	42bb      	cmp	r3, r7
 8023c46:	d117      	bne.n	8023c78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8023c48:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8023c4c:	9b04      	ldr	r3, [sp, #16]
 8023c4e:	4548      	cmp	r0, r9
 8023c50:	f103 33ff 	add.w	r3, r3, #4294967295
 8023c54:	d17d      	bne.n	8023d52 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8023c56:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8023c5a:	4401      	add	r1, r0
 8023c5c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023c60:	4480      	add	r8, r0
 8023c62:	e7e9      	b.n	8023c38 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8023c64:	461f      	mov	r7, r3
 8023c66:	e042      	b.n	8023cee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8023c68:	2000      	movs	r0, #0
 8023c6a:	e002      	b.n	8023c72 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8023c6c:	2900      	cmp	r1, #0
 8023c6e:	d16d      	bne.n	8023d4c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8023c70:	2001      	movs	r0, #1
 8023c72:	b00b      	add	sp, #44	@ 0x2c
 8023c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c78:	b379      	cbz	r1, 8023cda <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8023c7a:	2f00      	cmp	r7, #0
 8023c7c:	db29      	blt.n	8023cd2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8023c7e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8023c82:	42bb      	cmp	r3, r7
 8023c84:	dd25      	ble.n	8023cd2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8023c86:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8023c8a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8023c8e:	f7ff ff77 	bl	8023b80 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8023c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c94:	fb10 f003 	smulbb	r0, r0, r3
 8023c98:	b280      	uxth	r0, r0
 8023c9a:	1c41      	adds	r1, r0, #1
 8023c9c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023ca0:	1209      	asrs	r1, r1, #8
 8023ca2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8023ca6:	d014      	beq.n	8023cd2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8023ca8:	b2c9      	uxtb	r1, r1
 8023caa:	9808      	ldr	r0, [sp, #32]
 8023cac:	b2ba      	uxth	r2, r7
 8023cae:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8023cb0:	9102      	str	r1, [sp, #8]
 8023cb2:	2101      	movs	r1, #1
 8023cb4:	4413      	add	r3, r2
 8023cb6:	4402      	add	r2, r0
 8023cb8:	9101      	str	r1, [sp, #4]
 8023cba:	fa0f f18b 	sxth.w	r1, fp
 8023cbe:	f8da 0000 	ldr.w	r0, [sl]
 8023cc2:	b21b      	sxth	r3, r3
 8023cc4:	9100      	str	r1, [sp, #0]
 8023cc6:	b212      	sxth	r2, r2
 8023cc8:	6941      	ldr	r1, [r0, #20]
 8023cca:	4650      	mov	r0, sl
 8023ccc:	460d      	mov	r5, r1
 8023cce:	9905      	ldr	r1, [sp, #20]
 8023cd0:	47a8      	blx	r5
 8023cd2:	9b04      	ldr	r3, [sp, #16]
 8023cd4:	1c7a      	adds	r2, r7, #1
 8023cd6:	3301      	adds	r3, #1
 8023cd8:	d0ca      	beq.n	8023c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8023cda:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023cde:	1abb      	subs	r3, r7, r2
 8023ce0:	2b00      	cmp	r3, #0
 8023ce2:	dd31      	ble.n	8023d48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8023ce4:	2a00      	cmp	r2, #0
 8023ce6:	dabd      	bge.n	8023c64 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8023ce8:	2f00      	cmp	r7, #0
 8023cea:	dd2d      	ble.n	8023d48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8023cec:	2200      	movs	r2, #0
 8023cee:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8023cf2:	19d1      	adds	r1, r2, r7
 8023cf4:	4299      	cmp	r1, r3
 8023cf6:	db02      	blt.n	8023cfe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8023cf8:	1a9f      	subs	r7, r3, r2
 8023cfa:	2f00      	cmp	r7, #0
 8023cfc:	dd24      	ble.n	8023d48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8023cfe:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8023d02:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8023d06:	f7ff ff3b 	bl	8023b80 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8023d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d0c:	fb10 f003 	smulbb	r0, r0, r3
 8023d10:	b280      	uxth	r0, r0
 8023d12:	1c41      	adds	r1, r0, #1
 8023d14:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023d18:	1209      	asrs	r1, r1, #8
 8023d1a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8023d1e:	d013      	beq.n	8023d48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8023d20:	b292      	uxth	r2, r2
 8023d22:	9808      	ldr	r0, [sp, #32]
 8023d24:	b2c9      	uxtb	r1, r1
 8023d26:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8023d28:	b23f      	sxth	r7, r7
 8023d2a:	4413      	add	r3, r2
 8023d2c:	9102      	str	r1, [sp, #8]
 8023d2e:	4402      	add	r2, r0
 8023d30:	fa0f f18b 	sxth.w	r1, fp
 8023d34:	f8da 0000 	ldr.w	r0, [sl]
 8023d38:	b21b      	sxth	r3, r3
 8023d3a:	9100      	str	r1, [sp, #0]
 8023d3c:	b212      	sxth	r2, r2
 8023d3e:	9701      	str	r7, [sp, #4]
 8023d40:	9905      	ldr	r1, [sp, #20]
 8023d42:	6947      	ldr	r7, [r0, #20]
 8023d44:	4650      	mov	r0, sl
 8023d46:	47b8      	blx	r7
 8023d48:	464b      	mov	r3, r9
 8023d4a:	e75e      	b.n	8023c0a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8023d4c:	2f00      	cmp	r7, #0
 8023d4e:	da96      	bge.n	8023c7e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8023d50:	e78e      	b.n	8023c70 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8023d52:	2900      	cmp	r1, #0
 8023d54:	d0f8      	beq.n	8023d48 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8023d56:	e790      	b.n	8023c7a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08023d58 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8023d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023d5c:	461e      	mov	r6, r3
 8023d5e:	4b36      	ldr	r3, [pc, #216]	@ (8023e38 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8023d60:	2500      	movs	r5, #0
 8023d62:	f100 0814 	add.w	r8, r0, #20
 8023d66:	4604      	mov	r4, r0
 8023d68:	4617      	mov	r7, r2
 8023d6a:	e9c0 3100 	strd	r3, r1, [r0]
 8023d6e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8023d72:	8185      	strh	r5, [r0, #12]
 8023d74:	8103      	strh	r3, [r0, #8]
 8023d76:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8023d7a:	81c5      	strh	r5, [r0, #14]
 8023d7c:	7283      	strb	r3, [r0, #10]
 8023d7e:	8205      	strh	r5, [r0, #16]
 8023d80:	8245      	strh	r5, [r0, #18]
 8023d82:	4640      	mov	r0, r8
 8023d84:	f7f0 f916 	bl	8013fb4 <_ZN8touchgfx7OutlineC1Ev>
 8023d88:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8023d8c:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8023d90:	466b      	mov	r3, sp
 8023d92:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8023d96:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8023d9a:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8023d9e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8023da2:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8023da6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8023daa:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8023dae:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8023db2:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8023db6:	6830      	ldr	r0, [r6, #0]
 8023db8:	6871      	ldr	r1, [r6, #4]
 8023dba:	8872      	ldrh	r2, [r6, #2]
 8023dbc:	8835      	ldrh	r5, [r6, #0]
 8023dbe:	c303      	stmia	r3!, {r0, r1}
 8023dc0:	887b      	ldrh	r3, [r7, #2]
 8023dc2:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8023dc6:	4413      	add	r3, r2
 8023dc8:	883a      	ldrh	r2, [r7, #0]
 8023dca:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8023dce:	442a      	add	r2, r5
 8023dd0:	81e3      	strh	r3, [r4, #14]
 8023dd2:	8220      	strh	r0, [r4, #16]
 8023dd4:	4668      	mov	r0, sp
 8023dd6:	81a2      	strh	r2, [r4, #12]
 8023dd8:	8261      	strh	r1, [r4, #18]
 8023dda:	4639      	mov	r1, r7
 8023ddc:	f7f2 fac2 	bl	8016364 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023de0:	f104 000c 	add.w	r0, r4, #12
 8023de4:	f7f2 fa96 	bl	8016314 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023de8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8023dec:	f8bd 2000 	ldrh.w	r2, [sp]
 8023df0:	4640      	mov	r0, r8
 8023df2:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8023df6:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8023dfa:	f7f0 f8c0 	bl	8013f7e <_ZN8touchgfx7Outline5resetEv>
 8023dfe:	f9bd 3000 	ldrsh.w	r3, [sp]
 8023e02:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8023e06:	4620      	mov	r0, r4
 8023e08:	015b      	lsls	r3, r3, #5
 8023e0a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8023e0c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8023e10:	015b      	lsls	r3, r3, #5
 8023e12:	6523      	str	r3, [r4, #80]	@ 0x50
 8023e14:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8023e18:	015b      	lsls	r3, r3, #5
 8023e1a:	6563      	str	r3, [r4, #84]	@ 0x54
 8023e1c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8023e20:	015b      	lsls	r3, r3, #5
 8023e22:	65a3      	str	r3, [r4, #88]	@ 0x58
 8023e24:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8023e28:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8023e2c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8023e30:	b002      	add	sp, #8
 8023e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e36:	bf00      	nop
 8023e38:	08029778 	.word	0x08029778

08023e3c <_ZN8touchgfx6Canvas5closeEv>:
 8023e3c:	b538      	push	{r3, r4, r5, lr}
 8023e3e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8023e42:	4604      	mov	r4, r0
 8023e44:	b193      	cbz	r3, 8023e6c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023e46:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8023e4a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8023e4e:	4213      	tst	r3, r2
 8023e50:	d10c      	bne.n	8023e6c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023e52:	f100 0514 	add.w	r5, r0, #20
 8023e56:	b123      	cbz	r3, 8023e62 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023e58:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8023e5c:	4628      	mov	r0, r5
 8023e5e:	f7ff fea3 	bl	8023ba8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023e62:	4628      	mov	r0, r5
 8023e64:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8023e68:	f7ff fe9e 	bl	8023ba8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023e6c:	2300      	movs	r3, #0
 8023e6e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8023e72:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8023e76:	4298      	cmp	r0, r3
 8023e78:	bf34      	ite	cc
 8023e7a:	2000      	movcc	r0, #0
 8023e7c:	2001      	movcs	r0, #1
 8023e7e:	bd38      	pop	{r3, r4, r5, pc}

08023e80 <_ZN8touchgfx6Canvas6renderEh>:
 8023e80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023e84:	7a85      	ldrb	r5, [r0, #10]
 8023e86:	4604      	mov	r4, r0
 8023e88:	4369      	muls	r1, r5
 8023e8a:	1c4d      	adds	r5, r1, #1
 8023e8c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8023e90:	122d      	asrs	r5, r5, #8
 8023e92:	f000 8098 	beq.w	8023fc6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8023e96:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8023e9a:	2b00      	cmp	r3, #0
 8023e9c:	f000 8093 	beq.w	8023fc6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8023ea0:	f7ff ffcc 	bl	8023e3c <_ZN8touchgfx6Canvas5closeEv>
 8023ea4:	4607      	mov	r7, r0
 8023ea6:	2800      	cmp	r0, #0
 8023ea8:	d045      	beq.n	8023f36 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8023eaa:	6860      	ldr	r0, [r4, #4]
 8023eac:	4e47      	ldr	r6, [pc, #284]	@ (8023fcc <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8023eae:	6803      	ldr	r3, [r0, #0]
 8023eb0:	6837      	ldr	r7, [r6, #0]
 8023eb2:	689b      	ldr	r3, [r3, #8]
 8023eb4:	4798      	blx	r3
 8023eb6:	4601      	mov	r1, r0
 8023eb8:	4638      	mov	r0, r7
 8023eba:	f7ed fb99 	bl	80115f0 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8023ebe:	4607      	mov	r7, r0
 8023ec0:	f7e0 fa0a 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8023ec4:	6803      	ldr	r3, [r0, #0]
 8023ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023ec8:	4798      	blx	r3
 8023eca:	4680      	mov	r8, r0
 8023ecc:	f7e0 fa04 	bl	80042d8 <_ZN8touchgfx3HAL3lcdEv>
 8023ed0:	6803      	ldr	r3, [r0, #0]
 8023ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023ed4:	4798      	blx	r3
 8023ed6:	280b      	cmp	r0, #11
 8023ed8:	d85a      	bhi.n	8023f90 <_ZN8touchgfx6Canvas6renderEh+0x110>
 8023eda:	e8df f000 	tbb	[pc, r0]
 8023ede:	5b50      	.short	0x5b50
 8023ee0:	3059066b 	.word	0x3059066b
 8023ee4:	64646440 	.word	0x64646440
 8023ee8:	6464      	.short	0x6464
 8023eea:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8023eee:	2208      	movs	r2, #8
 8023ef0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023ef4:	fb91 f2f2 	sdiv	r2, r1, r2
 8023ef8:	fb08 2303 	mla	r3, r8, r3, r2
 8023efc:	441f      	add	r7, r3
 8023efe:	424b      	negs	r3, r1
 8023f00:	f001 0107 	and.w	r1, r1, #7
 8023f04:	f003 0307 	and.w	r3, r3, #7
 8023f08:	bf58      	it	pl
 8023f0a:	4259      	negpl	r1, r3
 8023f0c:	b2c9      	uxtb	r1, r1
 8023f0e:	b2ed      	uxtb	r5, r5
 8023f10:	463a      	mov	r2, r7
 8023f12:	fa0f f388 	sxth.w	r3, r8
 8023f16:	f104 0014 	add.w	r0, r4, #20
 8023f1a:	e9cd 1500 	strd	r1, r5, [sp]
 8023f1e:	6861      	ldr	r1, [r4, #4]
 8023f20:	f7ff fe4e 	bl	8023bc0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8023f24:	4607      	mov	r7, r0
 8023f26:	6860      	ldr	r0, [r4, #4]
 8023f28:	6803      	ldr	r3, [r0, #0]
 8023f2a:	691b      	ldr	r3, [r3, #16]
 8023f2c:	4798      	blx	r3
 8023f2e:	6830      	ldr	r0, [r6, #0]
 8023f30:	6803      	ldr	r3, [r0, #0]
 8023f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023f34:	4798      	blx	r3
 8023f36:	4638      	mov	r0, r7
 8023f38:	b002      	add	sp, #8
 8023f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f3e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8023f42:	2204      	movs	r2, #4
 8023f44:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023f48:	fb91 f2f2 	sdiv	r2, r1, r2
 8023f4c:	fb08 2303 	mla	r3, r8, r3, r2
 8023f50:	441f      	add	r7, r3
 8023f52:	424b      	negs	r3, r1
 8023f54:	f001 0103 	and.w	r1, r1, #3
 8023f58:	f003 0303 	and.w	r3, r3, #3
 8023f5c:	e7d4      	b.n	8023f08 <_ZN8touchgfx6Canvas6renderEh+0x88>
 8023f5e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8023f62:	2202      	movs	r2, #2
 8023f64:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023f68:	2900      	cmp	r1, #0
 8023f6a:	fb91 f2f2 	sdiv	r2, r1, r2
 8023f6e:	f001 0101 	and.w	r1, r1, #1
 8023f72:	fb08 2303 	mla	r3, r8, r3, r2
 8023f76:	bfb8      	it	lt
 8023f78:	4249      	neglt	r1, r1
 8023f7a:	441f      	add	r7, r3
 8023f7c:	e7c6      	b.n	8023f0c <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8023f7e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023f86:	fb08 f303 	mul.w	r3, r8, r3
 8023f8a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023f8e:	441f      	add	r7, r3
 8023f90:	2100      	movs	r1, #0
 8023f92:	e7bc      	b.n	8023f0e <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8023f94:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023f98:	2103      	movs	r1, #3
 8023f9a:	fb08 f203 	mul.w	r2, r8, r3
 8023f9e:	89a3      	ldrh	r3, [r4, #12]
 8023fa0:	fb13 2301 	smlabb	r3, r3, r1, r2
 8023fa4:	e7f3      	b.n	8023f8e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8023fa6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023faa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023fae:	fb08 2303 	mla	r3, r8, r3, r2
 8023fb2:	e7ec      	b.n	8023f8e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8023fb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023fbc:	fb08 f303 	mul.w	r3, r8, r3
 8023fc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023fc4:	e7e3      	b.n	8023f8e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8023fc6:	2701      	movs	r7, #1
 8023fc8:	e7b5      	b.n	8023f36 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8023fca:	bf00      	nop
 8023fcc:	2402641c 	.word	0x2402641c

08023fd0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8023fd0:	4b06      	ldr	r3, [pc, #24]	@ (8023fec <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8023fd2:	b510      	push	{r4, lr}
 8023fd4:	781b      	ldrb	r3, [r3, #0]
 8023fd6:	2b01      	cmp	r3, #1
 8023fd8:	d107      	bne.n	8023fea <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8023fda:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8023fde:	680b      	ldr	r3, [r1, #0]
 8023fe0:	6814      	ldr	r4, [r2, #0]
 8023fe2:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023fe6:	6013      	str	r3, [r2, #0]
 8023fe8:	600c      	str	r4, [r1, #0]
 8023fea:	bd10      	pop	{r4, pc}
 8023fec:	24026414 	.word	0x24026414

08023ff0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023ff0:	b513      	push	{r0, r1, r4, lr}
 8023ff2:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8023ff6:	4604      	mov	r4, r0
 8023ff8:	e9cd 2100 	strd	r2, r1, [sp]
 8023ffc:	b9a3      	cbnz	r3, 8024028 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8023ffe:	466a      	mov	r2, sp
 8024000:	a901      	add	r1, sp, #4
 8024002:	4620      	mov	r0, r4
 8024004:	f7ff ffe4 	bl	8023fd0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8024008:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802400a:	9901      	ldr	r1, [sp, #4]
 802400c:	9a00      	ldr	r2, [sp, #0]
 802400e:	1ac9      	subs	r1, r1, r3
 8024010:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024012:	1ad2      	subs	r2, r2, r3
 8024014:	9101      	str	r1, [sp, #4]
 8024016:	2a00      	cmp	r2, #0
 8024018:	9200      	str	r2, [sp, #0]
 802401a:	da0b      	bge.n	8024034 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802401c:	2301      	movs	r3, #1
 802401e:	2900      	cmp	r1, #0
 8024020:	da0e      	bge.n	8024040 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8024022:	f043 0304 	orr.w	r3, r3, #4
 8024026:	e013      	b.n	8024050 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8024028:	f7ff ff08 	bl	8023e3c <_ZN8touchgfx6Canvas5closeEv>
 802402c:	2800      	cmp	r0, #0
 802402e:	d1e6      	bne.n	8023ffe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8024030:	b002      	add	sp, #8
 8024032:	bd10      	pop	{r4, pc}
 8024034:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8024036:	429a      	cmp	r2, r3
 8024038:	bfac      	ite	ge
 802403a:	2302      	movge	r3, #2
 802403c:	2300      	movlt	r3, #0
 802403e:	e7ee      	b.n	802401e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8024040:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8024042:	4281      	cmp	r1, r0
 8024044:	bfac      	ite	ge
 8024046:	2008      	movge	r0, #8
 8024048:	2000      	movlt	r0, #0
 802404a:	4318      	orrs	r0, r3
 802404c:	b2c3      	uxtb	r3, r0
 802404e:	b158      	cbz	r0, 8024068 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8024050:	2200      	movs	r2, #0
 8024052:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8024056:	9901      	ldr	r1, [sp, #4]
 8024058:	9a00      	ldr	r2, [sp, #0]
 802405a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802405c:	6722      	str	r2, [r4, #112]	@ 0x70
 802405e:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8024062:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8024066:	e7e3      	b.n	8024030 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8024068:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802406c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8024070:	4298      	cmp	r0, r3
 8024072:	d803      	bhi.n	802407c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8024074:	f104 0014 	add.w	r0, r4, #20
 8024078:	f7f0 fc70 	bl	801495c <_ZN8touchgfx7Outline6moveToEii>
 802407c:	2301      	movs	r3, #1
 802407e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024082:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8024086:	2300      	movs	r3, #0
 8024088:	e7e5      	b.n	8024056 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802408a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802408a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802408c:	ab02      	add	r3, sp, #8
 802408e:	4604      	mov	r4, r0
 8024090:	9101      	str	r1, [sp, #4]
 8024092:	a901      	add	r1, sp, #4
 8024094:	f843 2d08 	str.w	r2, [r3, #-8]!
 8024098:	461a      	mov	r2, r3
 802409a:	f7ff ff99 	bl	8023fd0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802409e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80240a0:	9901      	ldr	r1, [sp, #4]
 80240a2:	9a00      	ldr	r2, [sp, #0]
 80240a4:	1ac9      	subs	r1, r1, r3
 80240a6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80240a8:	1ad2      	subs	r2, r2, r3
 80240aa:	9101      	str	r1, [sp, #4]
 80240ac:	2a00      	cmp	r2, #0
 80240ae:	9200      	str	r2, [sp, #0]
 80240b0:	db1c      	blt.n	80240ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80240b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80240b4:	429a      	cmp	r2, r3
 80240b6:	bfac      	ite	ge
 80240b8:	2002      	movge	r0, #2
 80240ba:	2000      	movlt	r0, #0
 80240bc:	2900      	cmp	r1, #0
 80240be:	db17      	blt.n	80240f0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80240c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80240c2:	4299      	cmp	r1, r3
 80240c4:	bfac      	ite	ge
 80240c6:	2308      	movge	r3, #8
 80240c8:	2300      	movlt	r3, #0
 80240ca:	4303      	orrs	r3, r0
 80240cc:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80240d0:	b2dd      	uxtb	r5, r3
 80240d2:	b978      	cbnz	r0, 80240f4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80240d4:	f104 0014 	add.w	r0, r4, #20
 80240d8:	f7ff fd66 	bl	8023ba8 <_ZN8touchgfx10Rasterizer6lineToEii>
 80240dc:	9b01      	ldr	r3, [sp, #4]
 80240de:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 80240e2:	6623      	str	r3, [r4, #96]	@ 0x60
 80240e4:	9b00      	ldr	r3, [sp, #0]
 80240e6:	6663      	str	r3, [r4, #100]	@ 0x64
 80240e8:	b002      	add	sp, #8
 80240ea:	bd70      	pop	{r4, r5, r6, pc}
 80240ec:	2001      	movs	r0, #1
 80240ee:	e7e5      	b.n	80240bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80240f0:	2304      	movs	r3, #4
 80240f2:	e7ea      	b.n	80240ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80240f4:	b113      	cbz	r3, 80240fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80240f6:	ea10 0305 	ands.w	r3, r0, r5
 80240fa:	d11c      	bne.n	8024136 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80240fc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8024100:	f104 0614 	add.w	r6, r4, #20
 8024104:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8024108:	b98b      	cbnz	r3, 802412e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802410a:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802410e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8024112:	4298      	cmp	r0, r3
 8024114:	d802      	bhi.n	802411c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8024116:	4630      	mov	r0, r6
 8024118:	f7f0 fc20 	bl	801495c <_ZN8touchgfx7Outline6moveToEii>
 802411c:	2301      	movs	r3, #1
 802411e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8024122:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8024126:	4630      	mov	r0, r6
 8024128:	e9dd 2100 	ldrd	r2, r1, [sp]
 802412c:	e7d4      	b.n	80240d8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802412e:	4630      	mov	r0, r6
 8024130:	f7ff fd3a 	bl	8023ba8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024134:	e7f7      	b.n	8024126 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8024136:	461d      	mov	r5, r3
 8024138:	e7d0      	b.n	80240dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802413c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 802413c:	b538      	push	{r3, r4, r5, lr}
 802413e:	ed2d 8b10 	vpush	{d8-d15}
 8024142:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8024146:	4605      	mov	r5, r0
 8024148:	eeb0 ca40 	vmov.f32	s24, s0
 802414c:	460c      	mov	r4, r1
 802414e:	eef0 ca60 	vmov.f32	s25, s1
 8024152:	ed9f ba57 	vldr	s22, [pc, #348]	@ 80242b0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8024156:	eeb0 da41 	vmov.f32	s26, s2
 802415a:	eef0 da61 	vmov.f32	s27, s3
 802415e:	eeb0 ea42 	vmov.f32	s28, s4
 8024162:	eef0 ea62 	vmov.f32	s29, s5
 8024166:	eef0 aa6b 	vmov.f32	s21, s23
 802416a:	2c08      	cmp	r4, #8
 802416c:	d86e      	bhi.n	802424c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802416e:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8024172:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8024176:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 802417a:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802417e:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8024182:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8024186:	ee7c faad 	vadd.f32	s31, s25, s27
 802418a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802418e:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8024192:	ee3d aaae 	vadd.f32	s20, s27, s29
 8024196:	ee2f fa2b 	vmul.f32	s30, s30, s23
 802419a:	ee6f faab 	vmul.f32	s31, s31, s23
 802419e:	ee69 9aab 	vmul.f32	s19, s19, s23
 80241a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80241a6:	ee2a aa2b 	vmul.f32	s20, s20, s23
 80241aa:	ee7f 8a29 	vadd.f32	s17, s30, s19
 80241ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80241b2:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 80241b6:	ee68 8aab 	vmul.f32	s17, s17, s23
 80241ba:	bf48      	it	mi
 80241bc:	eef1 7a67 	vnegmi.f32	s15, s15
 80241c0:	ee29 9a2b 	vmul.f32	s18, s18, s23
 80241c4:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 80241c8:	eef4 7acb 	vcmpe.f32	s15, s22
 80241cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80241d0:	dd3f      	ble.n	8024252 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 80241d2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80241d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80241da:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80241de:	ee27 7a06 	vmul.f32	s14, s14, s12
 80241e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80241e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80241ea:	d847      	bhi.n	802427c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80241ec:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 80241f0:	ee3e 0aed 	vsub.f32	s0, s29, s27
 80241f4:	f000 fa39 	bl	802466a <atan2f>
 80241f8:	eeb0 8a40 	vmov.f32	s16, s0
 80241fc:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8024200:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8024204:	f000 fa31 	bl	802466a <atan2f>
 8024208:	ee38 0a40 	vsub.f32	s0, s16, s0
 802420c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80242b4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8024210:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024218:	bf48      	it	mi
 802421a:	eeb1 0a40 	vnegmi.f32	s0, s0
 802421e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024226:	bfa4      	itt	ge
 8024228:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 80242b8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 802422c:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8024230:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80242bc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8024234:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802423c:	d51e      	bpl.n	802427c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802423e:	eef0 0a49 	vmov.f32	s1, s18
 8024242:	4628      	mov	r0, r5
 8024244:	eeb0 0a68 	vmov.f32	s0, s17
 8024248:	f7ee f852 	bl	80122f0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802424c:	ecbd 8b10 	vpop	{d8-d15}
 8024250:	bd38      	pop	{r3, r4, r5, pc}
 8024252:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8024256:	eeb0 7a68 	vmov.f32	s14, s17
 802425a:	eef0 6a49 	vmov.f32	s13, s18
 802425e:	eea7 7aea 	vfms.f32	s14, s15, s21
 8024262:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8024266:	eee7 6aea 	vfms.f32	s13, s15, s21
 802426a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802426e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8024272:	eef4 7ac6 	vcmpe.f32	s15, s12
 8024276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802427a:	d9e0      	bls.n	802423e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 802427c:	3401      	adds	r4, #1
 802427e:	eef0 0a6c 	vmov.f32	s1, s25
 8024282:	eeb0 0a4c 	vmov.f32	s0, s24
 8024286:	4628      	mov	r0, r5
 8024288:	4621      	mov	r1, r4
 802428a:	eef0 2a49 	vmov.f32	s5, s18
 802428e:	eeb0 2a68 	vmov.f32	s4, s17
 8024292:	eef0 1a6f 	vmov.f32	s3, s31
 8024296:	eeb0 1a4f 	vmov.f32	s2, s30
 802429a:	f7ff ff4f 	bl	802413c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802429e:	eef0 da4a 	vmov.f32	s27, s20
 80242a2:	eeb0 da69 	vmov.f32	s26, s19
 80242a6:	eef0 ca49 	vmov.f32	s25, s18
 80242aa:	eeb0 ca68 	vmov.f32	s24, s17
 80242ae:	e75c      	b.n	802416a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 80242b0:	2edbe6ff 	.word	0x2edbe6ff
 80242b4:	40490fdb 	.word	0x40490fdb
 80242b8:	40c90fdb 	.word	0x40c90fdb
 80242bc:	3dcccccd 	.word	0x3dcccccd

080242c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 80242c0:	b530      	push	{r4, r5, lr}
 80242c2:	ed2d 8b10 	vpush	{d8-d15}
 80242c6:	eef0 8a40 	vmov.f32	s17, s0
 80242ca:	b085      	sub	sp, #20
 80242cc:	eef0 9a60 	vmov.f32	s19, s1
 80242d0:	4604      	mov	r4, r0
 80242d2:	eef0 fa41 	vmov.f32	s31, s2
 80242d6:	460d      	mov	r5, r1
 80242d8:	eeb0 fa61 	vmov.f32	s30, s3
 80242dc:	eef0 ba42 	vmov.f32	s23, s4
 80242e0:	eeb0 ca62 	vmov.f32	s24, s5
 80242e4:	eef0 aa43 	vmov.f32	s21, s6
 80242e8:	eeb0 ba63 	vmov.f32	s22, s7
 80242ec:	2d08      	cmp	r5, #8
 80242ee:	f200 8113 	bhi.w	8024518 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 80242f2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80242f6:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 80242fa:	ee7f 6aab 	vadd.f32	s13, s31, s23
 80242fe:	ee38 daaf 	vadd.f32	s26, s17, s31
 8024302:	ee26 6a27 	vmul.f32	s12, s12, s15
 8024306:	ee7c ca0b 	vadd.f32	s25, s24, s22
 802430a:	ee2d da27 	vmul.f32	s26, s26, s15
 802430e:	ed8d 6a01 	vstr	s12, [sp, #4]
 8024312:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8024316:	ee6c caa7 	vmul.f32	s25, s25, s15
 802431a:	eeb0 ea4d 	vmov.f32	s28, s26
 802431e:	ee79 da8f 	vadd.f32	s27, s19, s30
 8024322:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8024326:	eea6 eaa7 	vfma.f32	s28, s13, s15
 802432a:	ee66 6a27 	vmul.f32	s13, s12, s15
 802432e:	ee6d daa7 	vmul.f32	s27, s27, s15
 8024332:	edcd 6a03 	vstr	s13, [sp, #12]
 8024336:	eef0 6a6c 	vmov.f32	s13, s25
 802433a:	eef0 ea6d 	vmov.f32	s29, s27
 802433e:	ee2e ea27 	vmul.f32	s28, s28, s15
 8024342:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024346:	eee7 ea27 	vfma.f32	s29, s14, s15
 802434a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802434e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8024352:	eef0 6a67 	vmov.f32	s13, s15
 8024356:	ed8d 7a02 	vstr	s14, [sp, #8]
 802435a:	ed9d 7a03 	vldr	s14, [sp, #12]
 802435e:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8024362:	ed9d 7a02 	vldr	s14, [sp, #8]
 8024366:	ee3e aa87 	vadd.f32	s20, s29, s14
 802436a:	ee29 9a27 	vmul.f32	s18, s18, s15
 802436e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8024372:	2d00      	cmp	r5, #0
 8024374:	f000 810b 	beq.w	802458e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024378:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 802437c:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80245d4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8024380:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8024384:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8024388:	ee3f 6aea 	vsub.f32	s12, s31, s21
 802438c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8024390:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8024394:	eea6 7a27 	vfma.f32	s14, s12, s15
 8024398:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 802439c:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 80243a0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80243a4:	eea5 6a27 	vfma.f32	s12, s10, s15
 80243a8:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 80243ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243b0:	bf48      	it	mi
 80243b2:	eeb1 7a47 	vnegmi.f32	s14, s14
 80243b6:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80243ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243be:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80243c2:	bf48      	it	mi
 80243c4:	eeb1 6a46 	vnegmi.f32	s12, s12
 80243c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243cc:	f340 80a8 	ble.w	8024520 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 80243d0:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80243d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243d8:	dd5a      	ble.n	8024490 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80243da:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80243de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80243e2:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80243e6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80243ea:	ee65 7a85 	vmul.f32	s15, s11, s10
 80243ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80243f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80243f6:	f200 80ca 	bhi.w	802458e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80243fa:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80243fe:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8024402:	f000 f932 	bl	802466a <atan2f>
 8024406:	eeb0 8a40 	vmov.f32	s16, s0
 802440a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802440e:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8024412:	f000 f92a 	bl	802466a <atan2f>
 8024416:	ee38 fa40 	vsub.f32	s30, s16, s0
 802441a:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802441e:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8024422:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8024426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802442a:	bf48      	it	mi
 802442c:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8024430:	f000 f91b 	bl	802466a <atan2f>
 8024434:	ee30 0a48 	vsub.f32	s0, s0, s16
 8024438:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80245d8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802443c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024444:	eeb4 fae7 	vcmpe.f32	s30, s15
 8024448:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80245d8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802444c:	bf48      	it	mi
 802444e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8024452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024456:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802445a:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80245dc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802445e:	bfa4      	itt	ge
 8024460:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80245e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8024464:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8024468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802446c:	bfa4      	itt	ge
 802446e:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80245e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8024472:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8024476:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802447a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024482:	f140 8084 	bpl.w	802458e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024486:	eef0 0a4a 	vmov.f32	s1, s20
 802448a:	eeb0 0a49 	vmov.f32	s0, s18
 802448e:	e040      	b.n	8024512 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8024490:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8024494:	ee27 7a07 	vmul.f32	s14, s14, s14
 8024498:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802449c:	ee67 7a85 	vmul.f32	s15, s15, s10
 80244a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80244a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244a8:	d871      	bhi.n	802458e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80244aa:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80244ae:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80244b2:	f000 f8da 	bl	802466a <atan2f>
 80244b6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80244ba:	eeb0 8a40 	vmov.f32	s16, s0
 80244be:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80244c2:	f000 f8d2 	bl	802466a <atan2f>
 80244c6:	ee38 0a40 	vsub.f32	s0, s16, s0
 80244ca:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80245d8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80244ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80244d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244d6:	bf48      	it	mi
 80244d8:	eeb1 0a40 	vnegmi.f32	s0, s0
 80244dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80244e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244e4:	bfa4      	itt	ge
 80244e6:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80245e0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80244ea:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80244ee:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80245dc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80244f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80244f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244fa:	d548      	bpl.n	802458e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80244fc:	eef0 0a4f 	vmov.f32	s1, s30
 8024500:	4620      	mov	r0, r4
 8024502:	eeb0 0a6f 	vmov.f32	s0, s31
 8024506:	f7ed fef3 	bl	80122f0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 802450a:	eef0 0a4c 	vmov.f32	s1, s24
 802450e:	eeb0 0a6b 	vmov.f32	s0, s23
 8024512:	4620      	mov	r0, r4
 8024514:	f7ed feec 	bl	80122f0 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8024518:	b005      	add	sp, #20
 802451a:	ecbd 8b10 	vpop	{d8-d15}
 802451e:	bd30      	pop	{r4, r5, pc}
 8024520:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80245d4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8024524:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8024528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802452c:	dd19      	ble.n	8024562 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802452e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8024532:	ee26 7a06 	vmul.f32	s14, s12, s12
 8024536:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802453a:	ee67 7a85 	vmul.f32	s15, s15, s10
 802453e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024546:	d822      	bhi.n	802458e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024548:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802454c:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8024550:	f000 f88b 	bl	802466a <atan2f>
 8024554:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8024558:	eeb0 8a40 	vmov.f32	s16, s0
 802455c:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8024560:	e7af      	b.n	80244c2 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8024562:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8024566:	eeb0 7a49 	vmov.f32	s14, s18
 802456a:	eeb0 6a4a 	vmov.f32	s12, s20
 802456e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8024572:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8024576:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802457a:	ee66 7a06 	vmul.f32	s15, s12, s12
 802457e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8024582:	eef4 7ac5 	vcmpe.f32	s15, s10
 8024586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802458a:	f67f af7c 	bls.w	8024486 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802458e:	3501      	adds	r5, #1
 8024590:	eef0 0a69 	vmov.f32	s1, s19
 8024594:	eeb0 0a68 	vmov.f32	s0, s17
 8024598:	4620      	mov	r0, r4
 802459a:	4629      	mov	r1, r5
 802459c:	eef0 3a4a 	vmov.f32	s7, s20
 80245a0:	eeb0 3a49 	vmov.f32	s6, s18
 80245a4:	eef0 2a6e 	vmov.f32	s5, s29
 80245a8:	eeb0 2a4e 	vmov.f32	s4, s28
 80245ac:	eef0 1a6d 	vmov.f32	s3, s27
 80245b0:	eeb0 1a4d 	vmov.f32	s2, s26
 80245b4:	f7ff fe84 	bl	80242c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80245b8:	eeb0 ca6c 	vmov.f32	s24, s25
 80245bc:	eddd ba01 	vldr	s23, [sp, #4]
 80245c0:	eef0 9a4a 	vmov.f32	s19, s20
 80245c4:	ed9d fa02 	vldr	s30, [sp, #8]
 80245c8:	eef0 8a49 	vmov.f32	s17, s18
 80245cc:	eddd fa03 	vldr	s31, [sp, #12]
 80245d0:	e68c      	b.n	80242ec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80245d2:	bf00      	nop
 80245d4:	2edbe6ff 	.word	0x2edbe6ff
 80245d8:	40490fdb 	.word	0x40490fdb
 80245dc:	3dcccccd 	.word	0x3dcccccd
 80245e0:	40c90fdb 	.word	0x40c90fdb

080245e4 <_ZN8touchgfx6CanvasD1Ev>:
 80245e4:	4b04      	ldr	r3, [pc, #16]	@ (80245f8 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80245e6:	b510      	push	{r4, lr}
 80245e8:	4604      	mov	r4, r0
 80245ea:	f840 3b14 	str.w	r3, [r0], #20
 80245ee:	f7ef fcbe 	bl	8013f6e <_ZN8touchgfx7OutlineD1Ev>
 80245f2:	4620      	mov	r0, r4
 80245f4:	bd10      	pop	{r4, pc}
 80245f6:	bf00      	nop
 80245f8:	08029778 	.word	0x08029778

080245fc <_ZN8touchgfx6CanvasD0Ev>:
 80245fc:	b510      	push	{r4, lr}
 80245fe:	4604      	mov	r4, r0
 8024600:	f7ff fff0 	bl	80245e4 <_ZN8touchgfx6CanvasD1Ev>
 8024604:	2174      	movs	r1, #116	@ 0x74
 8024606:	4620      	mov	r0, r4
 8024608:	f000 f807 	bl	802461a <_ZdlPvj>
 802460c:	4620      	mov	r0, r4
 802460e:	bd10      	pop	{r4, pc}

08024610 <__aeabi_atexit>:
 8024610:	460b      	mov	r3, r1
 8024612:	4601      	mov	r1, r0
 8024614:	4618      	mov	r0, r3
 8024616:	f000 bc59 	b.w	8024ecc <__cxa_atexit>

0802461a <_ZdlPvj>:
 802461a:	f000 b812 	b.w	8024642 <_ZdlPv>

0802461e <__cxa_guard_acquire>:
 802461e:	6802      	ldr	r2, [r0, #0]
 8024620:	07d2      	lsls	r2, r2, #31
 8024622:	4603      	mov	r3, r0
 8024624:	d405      	bmi.n	8024632 <__cxa_guard_acquire+0x14>
 8024626:	7842      	ldrb	r2, [r0, #1]
 8024628:	b102      	cbz	r2, 802462c <__cxa_guard_acquire+0xe>
 802462a:	deff      	udf	#255	@ 0xff
 802462c:	2001      	movs	r0, #1
 802462e:	7058      	strb	r0, [r3, #1]
 8024630:	4770      	bx	lr
 8024632:	2000      	movs	r0, #0
 8024634:	4770      	bx	lr

08024636 <__cxa_guard_release>:
 8024636:	2301      	movs	r3, #1
 8024638:	6003      	str	r3, [r0, #0]
 802463a:	4770      	bx	lr

0802463c <__cxa_pure_virtual>:
 802463c:	b508      	push	{r3, lr}
 802463e:	f000 f80f 	bl	8024660 <_ZSt9terminatev>

08024642 <_ZdlPv>:
 8024642:	f000 bb8d 	b.w	8024d60 <free>

08024646 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024646:	b508      	push	{r3, lr}
 8024648:	4780      	blx	r0
 802464a:	f000 fb56 	bl	8024cfa <abort>
	...

08024650 <_ZSt13get_terminatev>:
 8024650:	4b02      	ldr	r3, [pc, #8]	@ (802465c <_ZSt13get_terminatev+0xc>)
 8024652:	6818      	ldr	r0, [r3, #0]
 8024654:	f3bf 8f5b 	dmb	ish
 8024658:	4770      	bx	lr
 802465a:	bf00      	nop
 802465c:	240000d8 	.word	0x240000d8

08024660 <_ZSt9terminatev>:
 8024660:	b508      	push	{r3, lr}
 8024662:	f7ff fff5 	bl	8024650 <_ZSt13get_terminatev>
 8024666:	f7ff ffee 	bl	8024646 <_ZN10__cxxabiv111__terminateEPFvvE>

0802466a <atan2f>:
 802466a:	f000 b9cd 	b.w	8024a08 <__ieee754_atan2f>
	...

08024670 <sqrtf>:
 8024670:	b508      	push	{r3, lr}
 8024672:	ed2d 8b02 	vpush	{d8}
 8024676:	eeb0 8a40 	vmov.f32	s16, s0
 802467a:	f000 f9c2 	bl	8024a02 <__ieee754_sqrtf>
 802467e:	eeb4 8a48 	vcmp.f32	s16, s16
 8024682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024686:	d60c      	bvs.n	80246a2 <sqrtf+0x32>
 8024688:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80246a8 <sqrtf+0x38>
 802468c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8024690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024694:	d505      	bpl.n	80246a2 <sqrtf+0x32>
 8024696:	f000 fe87 	bl	80253a8 <__errno>
 802469a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802469e:	2321      	movs	r3, #33	@ 0x21
 80246a0:	6003      	str	r3, [r0, #0]
 80246a2:	ecbd 8b02 	vpop	{d8}
 80246a6:	bd08      	pop	{r3, pc}
 80246a8:	00000000 	.word	0x00000000

080246ac <sinf_poly>:
 80246ac:	07cb      	lsls	r3, r1, #31
 80246ae:	d412      	bmi.n	80246d6 <sinf_poly+0x2a>
 80246b0:	ee21 5b00 	vmul.f64	d5, d1, d0
 80246b4:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80246b8:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80246bc:	eea6 7b01 	vfma.f64	d7, d6, d1
 80246c0:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80246c4:	ee21 1b05 	vmul.f64	d1, d1, d5
 80246c8:	eea6 0b05 	vfma.f64	d0, d6, d5
 80246cc:	eea7 0b01 	vfma.f64	d0, d7, d1
 80246d0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80246d4:	4770      	bx	lr
 80246d6:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80246da:	ee21 5b01 	vmul.f64	d5, d1, d1
 80246de:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80246e2:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80246e6:	eea1 7b06 	vfma.f64	d7, d1, d6
 80246ea:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80246ee:	eea1 0b06 	vfma.f64	d0, d1, d6
 80246f2:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80246f6:	ee21 1b05 	vmul.f64	d1, d1, d5
 80246fa:	eea5 0b06 	vfma.f64	d0, d5, d6
 80246fe:	e7e5      	b.n	80246cc <sinf_poly+0x20>

08024700 <sinf>:
 8024700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024702:	ee10 4a10 	vmov	r4, s0
 8024706:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802470a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802470e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8024712:	eef0 7a40 	vmov.f32	s15, s0
 8024716:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802471a:	d218      	bcs.n	802474e <sinf+0x4e>
 802471c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8024720:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8024724:	d20a      	bcs.n	802473c <sinf+0x3c>
 8024726:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 802472a:	d103      	bne.n	8024734 <sinf+0x34>
 802472c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8024730:	ed8d 1a01 	vstr	s2, [sp, #4]
 8024734:	eeb0 0a67 	vmov.f32	s0, s15
 8024738:	b003      	add	sp, #12
 802473a:	bd30      	pop	{r4, r5, pc}
 802473c:	483a      	ldr	r0, [pc, #232]	@ (8024828 <sinf+0x128>)
 802473e:	eeb0 0b46 	vmov.f64	d0, d6
 8024742:	2100      	movs	r1, #0
 8024744:	b003      	add	sp, #12
 8024746:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802474a:	f7ff bfaf 	b.w	80246ac <sinf_poly>
 802474e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8024752:	4293      	cmp	r3, r2
 8024754:	d824      	bhi.n	80247a0 <sinf+0xa0>
 8024756:	4b34      	ldr	r3, [pc, #208]	@ (8024828 <sinf+0x128>)
 8024758:	ed93 7b08 	vldr	d7, [r3, #32]
 802475c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024760:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8024764:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024768:	ee17 1a90 	vmov	r1, s15
 802476c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8024770:	1609      	asrs	r1, r1, #24
 8024772:	ee07 1a90 	vmov	s15, r1
 8024776:	f001 0203 	and.w	r2, r1, #3
 802477a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802477e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8024782:	ed92 0b00 	vldr	d0, [r2]
 8024786:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802478a:	f011 0f02 	tst.w	r1, #2
 802478e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8024792:	bf08      	it	eq
 8024794:	4618      	moveq	r0, r3
 8024796:	ee26 1b06 	vmul.f64	d1, d6, d6
 802479a:	ee20 0b06 	vmul.f64	d0, d0, d6
 802479e:	e7d1      	b.n	8024744 <sinf+0x44>
 80247a0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80247a4:	d237      	bcs.n	8024816 <sinf+0x116>
 80247a6:	4921      	ldr	r1, [pc, #132]	@ (802482c <sinf+0x12c>)
 80247a8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80247ac:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80247b0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80247b4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80247b8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80247bc:	6a10      	ldr	r0, [r2, #32]
 80247be:	6912      	ldr	r2, [r2, #16]
 80247c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80247c4:	40ab      	lsls	r3, r5
 80247c6:	fba0 5003 	umull	r5, r0, r0, r3
 80247ca:	4359      	muls	r1, r3
 80247cc:	fbe3 0102 	umlal	r0, r1, r3, r2
 80247d0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80247d4:	0f9d      	lsrs	r5, r3, #30
 80247d6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80247da:	1ac9      	subs	r1, r1, r3
 80247dc:	f7db ff5e 	bl	800069c <__aeabi_l2d>
 80247e0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80247e4:	4b10      	ldr	r3, [pc, #64]	@ (8024828 <sinf+0x128>)
 80247e6:	f004 0203 	and.w	r2, r4, #3
 80247ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80247ee:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8024820 <sinf+0x120>
 80247f2:	ed92 0b00 	vldr	d0, [r2]
 80247f6:	ec41 0b17 	vmov	d7, r0, r1
 80247fa:	f014 0f02 	tst.w	r4, #2
 80247fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024802:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8024806:	4629      	mov	r1, r5
 8024808:	bf08      	it	eq
 802480a:	4618      	moveq	r0, r3
 802480c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024810:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024814:	e796      	b.n	8024744 <sinf+0x44>
 8024816:	b003      	add	sp, #12
 8024818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802481c:	f000 b8e2 	b.w	80249e4 <__math_invalidf>
 8024820:	54442d18 	.word	0x54442d18
 8024824:	3c1921fb 	.word	0x3c1921fb
 8024828:	080297e8 	.word	0x080297e8
 802482c:	08029784 	.word	0x08029784

08024830 <sinf_poly>:
 8024830:	07cb      	lsls	r3, r1, #31
 8024832:	d412      	bmi.n	802485a <sinf_poly+0x2a>
 8024834:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024838:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802483c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8024840:	eea6 7b01 	vfma.f64	d7, d6, d1
 8024844:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8024848:	ee21 1b05 	vmul.f64	d1, d1, d5
 802484c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024850:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024854:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024858:	4770      	bx	lr
 802485a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802485e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024862:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8024866:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802486a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802486e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8024872:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024876:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802487a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802487e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024882:	e7e5      	b.n	8024850 <sinf_poly+0x20>
 8024884:	0000      	movs	r0, r0
	...

08024888 <cosf>:
 8024888:	b538      	push	{r3, r4, r5, lr}
 802488a:	ee10 4a10 	vmov	r4, s0
 802488e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024892:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8024896:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 802489a:	d21f      	bcs.n	80248dc <cosf+0x54>
 802489c:	ee27 7b07 	vmul.f64	d7, d7, d7
 80248a0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80248a4:	f0c0 8082 	bcc.w	80249ac <cosf+0x124>
 80248a8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80248ac:	4b44      	ldr	r3, [pc, #272]	@ (80249c0 <cosf+0x138>)
 80248ae:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80248b2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80248b6:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80248ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80248be:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80248c2:	eea7 0b05 	vfma.f64	d0, d7, d5
 80248c6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80248ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80248ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 80248d2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80248d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80248da:	bd38      	pop	{r3, r4, r5, pc}
 80248dc:	f240 422e 	movw	r2, #1070	@ 0x42e
 80248e0:	4293      	cmp	r3, r2
 80248e2:	d829      	bhi.n	8024938 <cosf+0xb0>
 80248e4:	4b36      	ldr	r3, [pc, #216]	@ (80249c0 <cosf+0x138>)
 80248e6:	ed93 6b08 	vldr	d6, [r3, #32]
 80248ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80248ee:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80248f2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80248f6:	ee16 1a90 	vmov	r1, s13
 80248fa:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80248fe:	1609      	asrs	r1, r1, #24
 8024900:	ee06 1a90 	vmov	s13, r1
 8024904:	f001 0203 	and.w	r2, r1, #3
 8024908:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802490c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8024910:	ed92 0b00 	vldr	d0, [r2]
 8024914:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8024918:	f011 0f02 	tst.w	r1, #2
 802491c:	f081 0101 	eor.w	r1, r1, #1
 8024920:	eea5 7b46 	vfms.f64	d7, d5, d6
 8024924:	bf08      	it	eq
 8024926:	4618      	moveq	r0, r3
 8024928:	ee27 1b07 	vmul.f64	d1, d7, d7
 802492c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024930:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024934:	f7ff bf7c 	b.w	8024830 <sinf_poly>
 8024938:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802493c:	d232      	bcs.n	80249a4 <cosf+0x11c>
 802493e:	4921      	ldr	r1, [pc, #132]	@ (80249c4 <cosf+0x13c>)
 8024940:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8024944:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8024948:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802494c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8024950:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8024954:	6a10      	ldr	r0, [r2, #32]
 8024956:	6912      	ldr	r2, [r2, #16]
 8024958:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802495c:	40ab      	lsls	r3, r5
 802495e:	fba0 5003 	umull	r5, r0, r0, r3
 8024962:	4359      	muls	r1, r3
 8024964:	fbe3 0102 	umlal	r0, r1, r3, r2
 8024968:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802496c:	0f9d      	lsrs	r5, r3, #30
 802496e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8024972:	1ac9      	subs	r1, r1, r3
 8024974:	f7db fe92 	bl	800069c <__aeabi_l2d>
 8024978:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802497c:	4b10      	ldr	r3, [pc, #64]	@ (80249c0 <cosf+0x138>)
 802497e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80249b8 <cosf+0x130>
 8024982:	ec41 0b17 	vmov	d7, r0, r1
 8024986:	f004 0203 	and.w	r2, r4, #3
 802498a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802498e:	ed92 0b00 	vldr	d0, [r2]
 8024992:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024996:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802499a:	f014 0f02 	tst.w	r4, #2
 802499e:	f085 0101 	eor.w	r1, r5, #1
 80249a2:	e7bf      	b.n	8024924 <cosf+0x9c>
 80249a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80249a8:	f000 b81c 	b.w	80249e4 <__math_invalidf>
 80249ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80249b0:	e793      	b.n	80248da <cosf+0x52>
 80249b2:	bf00      	nop
 80249b4:	f3af 8000 	nop.w
 80249b8:	54442d18 	.word	0x54442d18
 80249bc:	3c1921fb 	.word	0x3c1921fb
 80249c0:	080297e8 	.word	0x080297e8
 80249c4:	08029784 	.word	0x08029784

080249c8 <with_errnof>:
 80249c8:	b510      	push	{r4, lr}
 80249ca:	ed2d 8b02 	vpush	{d8}
 80249ce:	eeb0 8a40 	vmov.f32	s16, s0
 80249d2:	4604      	mov	r4, r0
 80249d4:	f000 fce8 	bl	80253a8 <__errno>
 80249d8:	eeb0 0a48 	vmov.f32	s0, s16
 80249dc:	ecbd 8b02 	vpop	{d8}
 80249e0:	6004      	str	r4, [r0, #0]
 80249e2:	bd10      	pop	{r4, pc}

080249e4 <__math_invalidf>:
 80249e4:	eef0 7a40 	vmov.f32	s15, s0
 80249e8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80249ec:	eef4 7a67 	vcmp.f32	s15, s15
 80249f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80249f4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80249f8:	d602      	bvs.n	8024a00 <__math_invalidf+0x1c>
 80249fa:	2021      	movs	r0, #33	@ 0x21
 80249fc:	f7ff bfe4 	b.w	80249c8 <with_errnof>
 8024a00:	4770      	bx	lr

08024a02 <__ieee754_sqrtf>:
 8024a02:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024a06:	4770      	bx	lr

08024a08 <__ieee754_atan2f>:
 8024a08:	ee10 2a90 	vmov	r2, s1
 8024a0c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8024a10:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8024a14:	b510      	push	{r4, lr}
 8024a16:	eef0 7a40 	vmov.f32	s15, s0
 8024a1a:	d806      	bhi.n	8024a2a <__ieee754_atan2f+0x22>
 8024a1c:	ee10 0a10 	vmov	r0, s0
 8024a20:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8024a24:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024a28:	d904      	bls.n	8024a34 <__ieee754_atan2f+0x2c>
 8024a2a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8024a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8024a32:	bd10      	pop	{r4, pc}
 8024a34:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8024a38:	d103      	bne.n	8024a42 <__ieee754_atan2f+0x3a>
 8024a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a3e:	f000 b881 	b.w	8024b44 <atanf>
 8024a42:	1794      	asrs	r4, r2, #30
 8024a44:	f004 0402 	and.w	r4, r4, #2
 8024a48:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8024a4c:	b93b      	cbnz	r3, 8024a5e <__ieee754_atan2f+0x56>
 8024a4e:	2c02      	cmp	r4, #2
 8024a50:	d05c      	beq.n	8024b0c <__ieee754_atan2f+0x104>
 8024a52:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8024b20 <__ieee754_atan2f+0x118>
 8024a56:	2c03      	cmp	r4, #3
 8024a58:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8024a5c:	e7e7      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024a5e:	b939      	cbnz	r1, 8024a70 <__ieee754_atan2f+0x68>
 8024a60:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8024b24 <__ieee754_atan2f+0x11c>
 8024a64:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8024b28 <__ieee754_atan2f+0x120>
 8024a68:	2800      	cmp	r0, #0
 8024a6a:	fe67 7a87 	vselge.f32	s15, s15, s14
 8024a6e:	e7de      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024a70:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8024a74:	d110      	bne.n	8024a98 <__ieee754_atan2f+0x90>
 8024a76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024a7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8024a7e:	d107      	bne.n	8024a90 <__ieee754_atan2f+0x88>
 8024a80:	2c02      	cmp	r4, #2
 8024a82:	d846      	bhi.n	8024b12 <__ieee754_atan2f+0x10a>
 8024a84:	4b29      	ldr	r3, [pc, #164]	@ (8024b2c <__ieee754_atan2f+0x124>)
 8024a86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024a8a:	edd3 7a00 	vldr	s15, [r3]
 8024a8e:	e7ce      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024a90:	2c02      	cmp	r4, #2
 8024a92:	d841      	bhi.n	8024b18 <__ieee754_atan2f+0x110>
 8024a94:	4b26      	ldr	r3, [pc, #152]	@ (8024b30 <__ieee754_atan2f+0x128>)
 8024a96:	e7f6      	b.n	8024a86 <__ieee754_atan2f+0x7e>
 8024a98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024a9c:	d0e0      	beq.n	8024a60 <__ieee754_atan2f+0x58>
 8024a9e:	1a5b      	subs	r3, r3, r1
 8024aa0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8024aa4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8024aa8:	da1a      	bge.n	8024ae0 <__ieee754_atan2f+0xd8>
 8024aaa:	2a00      	cmp	r2, #0
 8024aac:	da01      	bge.n	8024ab2 <__ieee754_atan2f+0xaa>
 8024aae:	313c      	adds	r1, #60	@ 0x3c
 8024ab0:	db19      	blt.n	8024ae6 <__ieee754_atan2f+0xde>
 8024ab2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8024ab6:	f000 f919 	bl	8024cec <fabsf>
 8024aba:	f000 f843 	bl	8024b44 <atanf>
 8024abe:	eef0 7a40 	vmov.f32	s15, s0
 8024ac2:	2c01      	cmp	r4, #1
 8024ac4:	d012      	beq.n	8024aec <__ieee754_atan2f+0xe4>
 8024ac6:	2c02      	cmp	r4, #2
 8024ac8:	d017      	beq.n	8024afa <__ieee754_atan2f+0xf2>
 8024aca:	2c00      	cmp	r4, #0
 8024acc:	d0af      	beq.n	8024a2e <__ieee754_atan2f+0x26>
 8024ace:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8024b34 <__ieee754_atan2f+0x12c>
 8024ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024ad6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8024b38 <__ieee754_atan2f+0x130>
 8024ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024ade:	e7a6      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024ae0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8024b24 <__ieee754_atan2f+0x11c>
 8024ae4:	e7ed      	b.n	8024ac2 <__ieee754_atan2f+0xba>
 8024ae6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8024b3c <__ieee754_atan2f+0x134>
 8024aea:	e7ea      	b.n	8024ac2 <__ieee754_atan2f+0xba>
 8024aec:	ee17 3a90 	vmov	r3, s15
 8024af0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8024af4:	ee07 3a90 	vmov	s15, r3
 8024af8:	e799      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024afa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8024b34 <__ieee754_atan2f+0x12c>
 8024afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024b02:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8024b38 <__ieee754_atan2f+0x130>
 8024b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024b0a:	e790      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024b0c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8024b38 <__ieee754_atan2f+0x130>
 8024b10:	e78d      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024b12:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8024b40 <__ieee754_atan2f+0x138>
 8024b16:	e78a      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024b18:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8024b3c <__ieee754_atan2f+0x134>
 8024b1c:	e787      	b.n	8024a2e <__ieee754_atan2f+0x26>
 8024b1e:	bf00      	nop
 8024b20:	c0490fdb 	.word	0xc0490fdb
 8024b24:	3fc90fdb 	.word	0x3fc90fdb
 8024b28:	bfc90fdb 	.word	0xbfc90fdb
 8024b2c:	080298d4 	.word	0x080298d4
 8024b30:	080298c8 	.word	0x080298c8
 8024b34:	33bbbd2e 	.word	0x33bbbd2e
 8024b38:	40490fdb 	.word	0x40490fdb
 8024b3c:	00000000 	.word	0x00000000
 8024b40:	3f490fdb 	.word	0x3f490fdb

08024b44 <atanf>:
 8024b44:	b538      	push	{r3, r4, r5, lr}
 8024b46:	ee10 5a10 	vmov	r5, s0
 8024b4a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8024b4e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8024b52:	eef0 7a40 	vmov.f32	s15, s0
 8024b56:	d30f      	bcc.n	8024b78 <atanf+0x34>
 8024b58:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8024b5c:	d904      	bls.n	8024b68 <atanf+0x24>
 8024b5e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8024b62:	eeb0 0a67 	vmov.f32	s0, s15
 8024b66:	bd38      	pop	{r3, r4, r5, pc}
 8024b68:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8024ca0 <atanf+0x15c>
 8024b6c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8024ca4 <atanf+0x160>
 8024b70:	2d00      	cmp	r5, #0
 8024b72:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8024b76:	e7f4      	b.n	8024b62 <atanf+0x1e>
 8024b78:	4b4b      	ldr	r3, [pc, #300]	@ (8024ca8 <atanf+0x164>)
 8024b7a:	429c      	cmp	r4, r3
 8024b7c:	d810      	bhi.n	8024ba0 <atanf+0x5c>
 8024b7e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8024b82:	d20a      	bcs.n	8024b9a <atanf+0x56>
 8024b84:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8024cac <atanf+0x168>
 8024b88:	ee30 7a07 	vadd.f32	s14, s0, s14
 8024b8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024b90:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8024b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b98:	dce3      	bgt.n	8024b62 <atanf+0x1e>
 8024b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8024b9e:	e013      	b.n	8024bc8 <atanf+0x84>
 8024ba0:	f000 f8a4 	bl	8024cec <fabsf>
 8024ba4:	4b42      	ldr	r3, [pc, #264]	@ (8024cb0 <atanf+0x16c>)
 8024ba6:	429c      	cmp	r4, r3
 8024ba8:	d84f      	bhi.n	8024c4a <atanf+0x106>
 8024baa:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8024bae:	429c      	cmp	r4, r3
 8024bb0:	d841      	bhi.n	8024c36 <atanf+0xf2>
 8024bb2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8024bb6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8024bba:	eea0 7a27 	vfma.f32	s14, s0, s15
 8024bbe:	2300      	movs	r3, #0
 8024bc0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024bc4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024bc8:	1c5a      	adds	r2, r3, #1
 8024bca:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8024bce:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8024cb4 <atanf+0x170>
 8024bd2:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8024cb8 <atanf+0x174>
 8024bd6:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8024cbc <atanf+0x178>
 8024bda:	ee66 6a06 	vmul.f32	s13, s12, s12
 8024bde:	eee6 5a87 	vfma.f32	s11, s13, s14
 8024be2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8024cc0 <atanf+0x17c>
 8024be6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024bea:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8024cc4 <atanf+0x180>
 8024bee:	eee7 5a26 	vfma.f32	s11, s14, s13
 8024bf2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8024cc8 <atanf+0x184>
 8024bf6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024bfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8024ccc <atanf+0x188>
 8024bfe:	eee7 5a26 	vfma.f32	s11, s14, s13
 8024c02:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8024cd0 <atanf+0x18c>
 8024c06:	eea6 5a87 	vfma.f32	s10, s13, s14
 8024c0a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8024cd4 <atanf+0x190>
 8024c0e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8024c12:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8024cd8 <atanf+0x194>
 8024c16:	eea7 5a26 	vfma.f32	s10, s14, s13
 8024c1a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8024cdc <atanf+0x198>
 8024c1e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8024c22:	ee27 7a26 	vmul.f32	s14, s14, s13
 8024c26:	eea5 7a86 	vfma.f32	s14, s11, s12
 8024c2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8024c2e:	d121      	bne.n	8024c74 <atanf+0x130>
 8024c30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024c34:	e795      	b.n	8024b62 <atanf+0x1e>
 8024c36:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8024c3a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8024c3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024c42:	2301      	movs	r3, #1
 8024c44:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024c48:	e7be      	b.n	8024bc8 <atanf+0x84>
 8024c4a:	4b25      	ldr	r3, [pc, #148]	@ (8024ce0 <atanf+0x19c>)
 8024c4c:	429c      	cmp	r4, r3
 8024c4e:	d80b      	bhi.n	8024c68 <atanf+0x124>
 8024c50:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8024c54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024c58:	eea0 7a27 	vfma.f32	s14, s0, s15
 8024c5c:	2302      	movs	r3, #2
 8024c5e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024c66:	e7af      	b.n	8024bc8 <atanf+0x84>
 8024c68:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8024c6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024c70:	2303      	movs	r3, #3
 8024c72:	e7a9      	b.n	8024bc8 <atanf+0x84>
 8024c74:	4a1b      	ldr	r2, [pc, #108]	@ (8024ce4 <atanf+0x1a0>)
 8024c76:	491c      	ldr	r1, [pc, #112]	@ (8024ce8 <atanf+0x1a4>)
 8024c78:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8024c7c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8024c80:	edd3 6a00 	vldr	s13, [r3]
 8024c84:	ee37 7a66 	vsub.f32	s14, s14, s13
 8024c88:	2d00      	cmp	r5, #0
 8024c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024c8e:	edd2 7a00 	vldr	s15, [r2]
 8024c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024c96:	bfb8      	it	lt
 8024c98:	eef1 7a67 	vneglt.f32	s15, s15
 8024c9c:	e761      	b.n	8024b62 <atanf+0x1e>
 8024c9e:	bf00      	nop
 8024ca0:	bfc90fdb 	.word	0xbfc90fdb
 8024ca4:	3fc90fdb 	.word	0x3fc90fdb
 8024ca8:	3edfffff 	.word	0x3edfffff
 8024cac:	7149f2ca 	.word	0x7149f2ca
 8024cb0:	3f97ffff 	.word	0x3f97ffff
 8024cb4:	3c8569d7 	.word	0x3c8569d7
 8024cb8:	3d4bda59 	.word	0x3d4bda59
 8024cbc:	bd6ef16b 	.word	0xbd6ef16b
 8024cc0:	3d886b35 	.word	0x3d886b35
 8024cc4:	3dba2e6e 	.word	0x3dba2e6e
 8024cc8:	3e124925 	.word	0x3e124925
 8024ccc:	3eaaaaab 	.word	0x3eaaaaab
 8024cd0:	bd15a221 	.word	0xbd15a221
 8024cd4:	bd9d8795 	.word	0xbd9d8795
 8024cd8:	bde38e38 	.word	0xbde38e38
 8024cdc:	be4ccccd 	.word	0xbe4ccccd
 8024ce0:	401bffff 	.word	0x401bffff
 8024ce4:	080298f0 	.word	0x080298f0
 8024ce8:	080298e0 	.word	0x080298e0

08024cec <fabsf>:
 8024cec:	ee10 3a10 	vmov	r3, s0
 8024cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8024cf4:	ee00 3a10 	vmov	s0, r3
 8024cf8:	4770      	bx	lr

08024cfa <abort>:
 8024cfa:	b508      	push	{r3, lr}
 8024cfc:	2006      	movs	r0, #6
 8024cfe:	f000 fae1 	bl	80252c4 <raise>
 8024d02:	2001      	movs	r0, #1
 8024d04:	f7dc fe4e 	bl	80019a4 <_exit>

08024d08 <__assert_func>:
 8024d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024d0a:	4614      	mov	r4, r2
 8024d0c:	461a      	mov	r2, r3
 8024d0e:	4b09      	ldr	r3, [pc, #36]	@ (8024d34 <__assert_func+0x2c>)
 8024d10:	681b      	ldr	r3, [r3, #0]
 8024d12:	4605      	mov	r5, r0
 8024d14:	68d8      	ldr	r0, [r3, #12]
 8024d16:	b954      	cbnz	r4, 8024d2e <__assert_func+0x26>
 8024d18:	4b07      	ldr	r3, [pc, #28]	@ (8024d38 <__assert_func+0x30>)
 8024d1a:	461c      	mov	r4, r3
 8024d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024d20:	9100      	str	r1, [sp, #0]
 8024d22:	462b      	mov	r3, r5
 8024d24:	4905      	ldr	r1, [pc, #20]	@ (8024d3c <__assert_func+0x34>)
 8024d26:	f000 f983 	bl	8025030 <fiprintf>
 8024d2a:	f7ff ffe6 	bl	8024cfa <abort>
 8024d2e:	4b04      	ldr	r3, [pc, #16]	@ (8024d40 <__assert_func+0x38>)
 8024d30:	e7f4      	b.n	8024d1c <__assert_func+0x14>
 8024d32:	bf00      	nop
 8024d34:	240000e8 	.word	0x240000e8
 8024d38:	0802993b 	.word	0x0802993b
 8024d3c:	0802990d 	.word	0x0802990d
 8024d40:	08029900 	.word	0x08029900

08024d44 <atexit>:
 8024d44:	2300      	movs	r3, #0
 8024d46:	4601      	mov	r1, r0
 8024d48:	461a      	mov	r2, r3
 8024d4a:	4618      	mov	r0, r3
 8024d4c:	f000 bb68 	b.w	8025420 <__register_exitproc>

08024d50 <malloc>:
 8024d50:	4b02      	ldr	r3, [pc, #8]	@ (8024d5c <malloc+0xc>)
 8024d52:	4601      	mov	r1, r0
 8024d54:	6818      	ldr	r0, [r3, #0]
 8024d56:	f000 b82d 	b.w	8024db4 <_malloc_r>
 8024d5a:	bf00      	nop
 8024d5c:	240000e8 	.word	0x240000e8

08024d60 <free>:
 8024d60:	4b02      	ldr	r3, [pc, #8]	@ (8024d6c <free+0xc>)
 8024d62:	4601      	mov	r1, r0
 8024d64:	6818      	ldr	r0, [r3, #0]
 8024d66:	f000 bbb7 	b.w	80254d8 <_free_r>
 8024d6a:	bf00      	nop
 8024d6c:	240000e8 	.word	0x240000e8

08024d70 <sbrk_aligned>:
 8024d70:	b570      	push	{r4, r5, r6, lr}
 8024d72:	4e0f      	ldr	r6, [pc, #60]	@ (8024db0 <sbrk_aligned+0x40>)
 8024d74:	460c      	mov	r4, r1
 8024d76:	6831      	ldr	r1, [r6, #0]
 8024d78:	4605      	mov	r5, r0
 8024d7a:	b911      	cbnz	r1, 8024d82 <sbrk_aligned+0x12>
 8024d7c:	f000 faf2 	bl	8025364 <_sbrk_r>
 8024d80:	6030      	str	r0, [r6, #0]
 8024d82:	4621      	mov	r1, r4
 8024d84:	4628      	mov	r0, r5
 8024d86:	f000 faed 	bl	8025364 <_sbrk_r>
 8024d8a:	1c43      	adds	r3, r0, #1
 8024d8c:	d103      	bne.n	8024d96 <sbrk_aligned+0x26>
 8024d8e:	f04f 34ff 	mov.w	r4, #4294967295
 8024d92:	4620      	mov	r0, r4
 8024d94:	bd70      	pop	{r4, r5, r6, pc}
 8024d96:	1cc4      	adds	r4, r0, #3
 8024d98:	f024 0403 	bic.w	r4, r4, #3
 8024d9c:	42a0      	cmp	r0, r4
 8024d9e:	d0f8      	beq.n	8024d92 <sbrk_aligned+0x22>
 8024da0:	1a21      	subs	r1, r4, r0
 8024da2:	4628      	mov	r0, r5
 8024da4:	f000 fade 	bl	8025364 <_sbrk_r>
 8024da8:	3001      	adds	r0, #1
 8024daa:	d1f2      	bne.n	8024d92 <sbrk_aligned+0x22>
 8024dac:	e7ef      	b.n	8024d8e <sbrk_aligned+0x1e>
 8024dae:	bf00      	nop
 8024db0:	24026e58 	.word	0x24026e58

08024db4 <_malloc_r>:
 8024db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024db8:	1ccd      	adds	r5, r1, #3
 8024dba:	f025 0503 	bic.w	r5, r5, #3
 8024dbe:	3508      	adds	r5, #8
 8024dc0:	2d0c      	cmp	r5, #12
 8024dc2:	bf38      	it	cc
 8024dc4:	250c      	movcc	r5, #12
 8024dc6:	2d00      	cmp	r5, #0
 8024dc8:	4606      	mov	r6, r0
 8024dca:	db01      	blt.n	8024dd0 <_malloc_r+0x1c>
 8024dcc:	42a9      	cmp	r1, r5
 8024dce:	d904      	bls.n	8024dda <_malloc_r+0x26>
 8024dd0:	230c      	movs	r3, #12
 8024dd2:	6033      	str	r3, [r6, #0]
 8024dd4:	2000      	movs	r0, #0
 8024dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8024eb0 <_malloc_r+0xfc>
 8024dde:	f000 f869 	bl	8024eb4 <__malloc_lock>
 8024de2:	f8d8 3000 	ldr.w	r3, [r8]
 8024de6:	461c      	mov	r4, r3
 8024de8:	bb44      	cbnz	r4, 8024e3c <_malloc_r+0x88>
 8024dea:	4629      	mov	r1, r5
 8024dec:	4630      	mov	r0, r6
 8024dee:	f7ff ffbf 	bl	8024d70 <sbrk_aligned>
 8024df2:	1c43      	adds	r3, r0, #1
 8024df4:	4604      	mov	r4, r0
 8024df6:	d158      	bne.n	8024eaa <_malloc_r+0xf6>
 8024df8:	f8d8 4000 	ldr.w	r4, [r8]
 8024dfc:	4627      	mov	r7, r4
 8024dfe:	2f00      	cmp	r7, #0
 8024e00:	d143      	bne.n	8024e8a <_malloc_r+0xd6>
 8024e02:	2c00      	cmp	r4, #0
 8024e04:	d04b      	beq.n	8024e9e <_malloc_r+0xea>
 8024e06:	6823      	ldr	r3, [r4, #0]
 8024e08:	4639      	mov	r1, r7
 8024e0a:	4630      	mov	r0, r6
 8024e0c:	eb04 0903 	add.w	r9, r4, r3
 8024e10:	f000 faa8 	bl	8025364 <_sbrk_r>
 8024e14:	4581      	cmp	r9, r0
 8024e16:	d142      	bne.n	8024e9e <_malloc_r+0xea>
 8024e18:	6821      	ldr	r1, [r4, #0]
 8024e1a:	1a6d      	subs	r5, r5, r1
 8024e1c:	4629      	mov	r1, r5
 8024e1e:	4630      	mov	r0, r6
 8024e20:	f7ff ffa6 	bl	8024d70 <sbrk_aligned>
 8024e24:	3001      	adds	r0, #1
 8024e26:	d03a      	beq.n	8024e9e <_malloc_r+0xea>
 8024e28:	6823      	ldr	r3, [r4, #0]
 8024e2a:	442b      	add	r3, r5
 8024e2c:	6023      	str	r3, [r4, #0]
 8024e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8024e32:	685a      	ldr	r2, [r3, #4]
 8024e34:	bb62      	cbnz	r2, 8024e90 <_malloc_r+0xdc>
 8024e36:	f8c8 7000 	str.w	r7, [r8]
 8024e3a:	e00f      	b.n	8024e5c <_malloc_r+0xa8>
 8024e3c:	6822      	ldr	r2, [r4, #0]
 8024e3e:	1b52      	subs	r2, r2, r5
 8024e40:	d420      	bmi.n	8024e84 <_malloc_r+0xd0>
 8024e42:	2a0b      	cmp	r2, #11
 8024e44:	d917      	bls.n	8024e76 <_malloc_r+0xc2>
 8024e46:	1961      	adds	r1, r4, r5
 8024e48:	42a3      	cmp	r3, r4
 8024e4a:	6025      	str	r5, [r4, #0]
 8024e4c:	bf18      	it	ne
 8024e4e:	6059      	strne	r1, [r3, #4]
 8024e50:	6863      	ldr	r3, [r4, #4]
 8024e52:	bf08      	it	eq
 8024e54:	f8c8 1000 	streq.w	r1, [r8]
 8024e58:	5162      	str	r2, [r4, r5]
 8024e5a:	604b      	str	r3, [r1, #4]
 8024e5c:	4630      	mov	r0, r6
 8024e5e:	f000 f82f 	bl	8024ec0 <__malloc_unlock>
 8024e62:	f104 000b 	add.w	r0, r4, #11
 8024e66:	1d23      	adds	r3, r4, #4
 8024e68:	f020 0007 	bic.w	r0, r0, #7
 8024e6c:	1ac2      	subs	r2, r0, r3
 8024e6e:	bf1c      	itt	ne
 8024e70:	1a1b      	subne	r3, r3, r0
 8024e72:	50a3      	strne	r3, [r4, r2]
 8024e74:	e7af      	b.n	8024dd6 <_malloc_r+0x22>
 8024e76:	6862      	ldr	r2, [r4, #4]
 8024e78:	42a3      	cmp	r3, r4
 8024e7a:	bf0c      	ite	eq
 8024e7c:	f8c8 2000 	streq.w	r2, [r8]
 8024e80:	605a      	strne	r2, [r3, #4]
 8024e82:	e7eb      	b.n	8024e5c <_malloc_r+0xa8>
 8024e84:	4623      	mov	r3, r4
 8024e86:	6864      	ldr	r4, [r4, #4]
 8024e88:	e7ae      	b.n	8024de8 <_malloc_r+0x34>
 8024e8a:	463c      	mov	r4, r7
 8024e8c:	687f      	ldr	r7, [r7, #4]
 8024e8e:	e7b6      	b.n	8024dfe <_malloc_r+0x4a>
 8024e90:	461a      	mov	r2, r3
 8024e92:	685b      	ldr	r3, [r3, #4]
 8024e94:	42a3      	cmp	r3, r4
 8024e96:	d1fb      	bne.n	8024e90 <_malloc_r+0xdc>
 8024e98:	2300      	movs	r3, #0
 8024e9a:	6053      	str	r3, [r2, #4]
 8024e9c:	e7de      	b.n	8024e5c <_malloc_r+0xa8>
 8024e9e:	230c      	movs	r3, #12
 8024ea0:	6033      	str	r3, [r6, #0]
 8024ea2:	4630      	mov	r0, r6
 8024ea4:	f000 f80c 	bl	8024ec0 <__malloc_unlock>
 8024ea8:	e794      	b.n	8024dd4 <_malloc_r+0x20>
 8024eaa:	6005      	str	r5, [r0, #0]
 8024eac:	e7d6      	b.n	8024e5c <_malloc_r+0xa8>
 8024eae:	bf00      	nop
 8024eb0:	24026e5c 	.word	0x24026e5c

08024eb4 <__malloc_lock>:
 8024eb4:	4801      	ldr	r0, [pc, #4]	@ (8024ebc <__malloc_lock+0x8>)
 8024eb6:	f000 baa2 	b.w	80253fe <__retarget_lock_acquire_recursive>
 8024eba:	bf00      	nop
 8024ebc:	24026fa0 	.word	0x24026fa0

08024ec0 <__malloc_unlock>:
 8024ec0:	4801      	ldr	r0, [pc, #4]	@ (8024ec8 <__malloc_unlock+0x8>)
 8024ec2:	f000 ba9d 	b.w	8025400 <__retarget_lock_release_recursive>
 8024ec6:	bf00      	nop
 8024ec8:	24026fa0 	.word	0x24026fa0

08024ecc <__cxa_atexit>:
 8024ecc:	b510      	push	{r4, lr}
 8024ece:	4604      	mov	r4, r0
 8024ed0:	4804      	ldr	r0, [pc, #16]	@ (8024ee4 <__cxa_atexit+0x18>)
 8024ed2:	4613      	mov	r3, r2
 8024ed4:	b120      	cbz	r0, 8024ee0 <__cxa_atexit+0x14>
 8024ed6:	460a      	mov	r2, r1
 8024ed8:	2002      	movs	r0, #2
 8024eda:	4621      	mov	r1, r4
 8024edc:	f000 faa0 	bl	8025420 <__register_exitproc>
 8024ee0:	bd10      	pop	{r4, pc}
 8024ee2:	bf00      	nop
 8024ee4:	08025421 	.word	0x08025421

08024ee8 <std>:
 8024ee8:	2300      	movs	r3, #0
 8024eea:	b510      	push	{r4, lr}
 8024eec:	4604      	mov	r4, r0
 8024eee:	e9c0 3300 	strd	r3, r3, [r0]
 8024ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024ef6:	6083      	str	r3, [r0, #8]
 8024ef8:	8181      	strh	r1, [r0, #12]
 8024efa:	6643      	str	r3, [r0, #100]	@ 0x64
 8024efc:	81c2      	strh	r2, [r0, #14]
 8024efe:	6183      	str	r3, [r0, #24]
 8024f00:	4619      	mov	r1, r3
 8024f02:	2208      	movs	r2, #8
 8024f04:	305c      	adds	r0, #92	@ 0x5c
 8024f06:	f000 f99b 	bl	8025240 <memset>
 8024f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8024f40 <std+0x58>)
 8024f0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8024f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8024f44 <std+0x5c>)
 8024f10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024f12:	4b0d      	ldr	r3, [pc, #52]	@ (8024f48 <std+0x60>)
 8024f14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024f16:	4b0d      	ldr	r3, [pc, #52]	@ (8024f4c <std+0x64>)
 8024f18:	6323      	str	r3, [r4, #48]	@ 0x30
 8024f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8024f50 <std+0x68>)
 8024f1c:	6224      	str	r4, [r4, #32]
 8024f1e:	429c      	cmp	r4, r3
 8024f20:	d006      	beq.n	8024f30 <std+0x48>
 8024f22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8024f26:	4294      	cmp	r4, r2
 8024f28:	d002      	beq.n	8024f30 <std+0x48>
 8024f2a:	33d0      	adds	r3, #208	@ 0xd0
 8024f2c:	429c      	cmp	r4, r3
 8024f2e:	d105      	bne.n	8024f3c <std+0x54>
 8024f30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024f38:	f000 ba60 	b.w	80253fc <__retarget_lock_init_recursive>
 8024f3c:	bd10      	pop	{r4, pc}
 8024f3e:	bf00      	nop
 8024f40:	08025091 	.word	0x08025091
 8024f44:	080250b3 	.word	0x080250b3
 8024f48:	080250eb 	.word	0x080250eb
 8024f4c:	0802510f 	.word	0x0802510f
 8024f50:	24026e60 	.word	0x24026e60

08024f54 <stdio_exit_handler>:
 8024f54:	4a02      	ldr	r2, [pc, #8]	@ (8024f60 <stdio_exit_handler+0xc>)
 8024f56:	4903      	ldr	r1, [pc, #12]	@ (8024f64 <stdio_exit_handler+0x10>)
 8024f58:	4803      	ldr	r0, [pc, #12]	@ (8024f68 <stdio_exit_handler+0x14>)
 8024f5a:	f000 b87b 	b.w	8025054 <_fwalk_sglue>
 8024f5e:	bf00      	nop
 8024f60:	240000dc 	.word	0x240000dc
 8024f64:	08025c15 	.word	0x08025c15
 8024f68:	240000ec 	.word	0x240000ec

08024f6c <cleanup_stdio>:
 8024f6c:	6841      	ldr	r1, [r0, #4]
 8024f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8024fa0 <cleanup_stdio+0x34>)
 8024f70:	4299      	cmp	r1, r3
 8024f72:	b510      	push	{r4, lr}
 8024f74:	4604      	mov	r4, r0
 8024f76:	d001      	beq.n	8024f7c <cleanup_stdio+0x10>
 8024f78:	f000 fe4c 	bl	8025c14 <_fflush_r>
 8024f7c:	68a1      	ldr	r1, [r4, #8]
 8024f7e:	4b09      	ldr	r3, [pc, #36]	@ (8024fa4 <cleanup_stdio+0x38>)
 8024f80:	4299      	cmp	r1, r3
 8024f82:	d002      	beq.n	8024f8a <cleanup_stdio+0x1e>
 8024f84:	4620      	mov	r0, r4
 8024f86:	f000 fe45 	bl	8025c14 <_fflush_r>
 8024f8a:	68e1      	ldr	r1, [r4, #12]
 8024f8c:	4b06      	ldr	r3, [pc, #24]	@ (8024fa8 <cleanup_stdio+0x3c>)
 8024f8e:	4299      	cmp	r1, r3
 8024f90:	d004      	beq.n	8024f9c <cleanup_stdio+0x30>
 8024f92:	4620      	mov	r0, r4
 8024f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024f98:	f000 be3c 	b.w	8025c14 <_fflush_r>
 8024f9c:	bd10      	pop	{r4, pc}
 8024f9e:	bf00      	nop
 8024fa0:	24026e60 	.word	0x24026e60
 8024fa4:	24026ec8 	.word	0x24026ec8
 8024fa8:	24026f30 	.word	0x24026f30

08024fac <global_stdio_init.part.0>:
 8024fac:	b510      	push	{r4, lr}
 8024fae:	4b0b      	ldr	r3, [pc, #44]	@ (8024fdc <global_stdio_init.part.0+0x30>)
 8024fb0:	4c0b      	ldr	r4, [pc, #44]	@ (8024fe0 <global_stdio_init.part.0+0x34>)
 8024fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8024fe4 <global_stdio_init.part.0+0x38>)
 8024fb4:	601a      	str	r2, [r3, #0]
 8024fb6:	4620      	mov	r0, r4
 8024fb8:	2200      	movs	r2, #0
 8024fba:	2104      	movs	r1, #4
 8024fbc:	f7ff ff94 	bl	8024ee8 <std>
 8024fc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8024fc4:	2201      	movs	r2, #1
 8024fc6:	2109      	movs	r1, #9
 8024fc8:	f7ff ff8e 	bl	8024ee8 <std>
 8024fcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8024fd0:	2202      	movs	r2, #2
 8024fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024fd6:	2112      	movs	r1, #18
 8024fd8:	f7ff bf86 	b.w	8024ee8 <std>
 8024fdc:	24026f98 	.word	0x24026f98
 8024fe0:	24026e60 	.word	0x24026e60
 8024fe4:	08024f55 	.word	0x08024f55

08024fe8 <__sfp_lock_acquire>:
 8024fe8:	4801      	ldr	r0, [pc, #4]	@ (8024ff0 <__sfp_lock_acquire+0x8>)
 8024fea:	f000 ba08 	b.w	80253fe <__retarget_lock_acquire_recursive>
 8024fee:	bf00      	nop
 8024ff0:	24026fa2 	.word	0x24026fa2

08024ff4 <__sfp_lock_release>:
 8024ff4:	4801      	ldr	r0, [pc, #4]	@ (8024ffc <__sfp_lock_release+0x8>)
 8024ff6:	f000 ba03 	b.w	8025400 <__retarget_lock_release_recursive>
 8024ffa:	bf00      	nop
 8024ffc:	24026fa2 	.word	0x24026fa2

08025000 <__sinit>:
 8025000:	b510      	push	{r4, lr}
 8025002:	4604      	mov	r4, r0
 8025004:	f7ff fff0 	bl	8024fe8 <__sfp_lock_acquire>
 8025008:	6a23      	ldr	r3, [r4, #32]
 802500a:	b11b      	cbz	r3, 8025014 <__sinit+0x14>
 802500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025010:	f7ff bff0 	b.w	8024ff4 <__sfp_lock_release>
 8025014:	4b04      	ldr	r3, [pc, #16]	@ (8025028 <__sinit+0x28>)
 8025016:	6223      	str	r3, [r4, #32]
 8025018:	4b04      	ldr	r3, [pc, #16]	@ (802502c <__sinit+0x2c>)
 802501a:	681b      	ldr	r3, [r3, #0]
 802501c:	2b00      	cmp	r3, #0
 802501e:	d1f5      	bne.n	802500c <__sinit+0xc>
 8025020:	f7ff ffc4 	bl	8024fac <global_stdio_init.part.0>
 8025024:	e7f2      	b.n	802500c <__sinit+0xc>
 8025026:	bf00      	nop
 8025028:	08024f6d 	.word	0x08024f6d
 802502c:	24026f98 	.word	0x24026f98

08025030 <fiprintf>:
 8025030:	b40e      	push	{r1, r2, r3}
 8025032:	b503      	push	{r0, r1, lr}
 8025034:	4601      	mov	r1, r0
 8025036:	ab03      	add	r3, sp, #12
 8025038:	4805      	ldr	r0, [pc, #20]	@ (8025050 <fiprintf+0x20>)
 802503a:	f853 2b04 	ldr.w	r2, [r3], #4
 802503e:	6800      	ldr	r0, [r0, #0]
 8025040:	9301      	str	r3, [sp, #4]
 8025042:	f000 fabd 	bl	80255c0 <_vfiprintf_r>
 8025046:	b002      	add	sp, #8
 8025048:	f85d eb04 	ldr.w	lr, [sp], #4
 802504c:	b003      	add	sp, #12
 802504e:	4770      	bx	lr
 8025050:	240000e8 	.word	0x240000e8

08025054 <_fwalk_sglue>:
 8025054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025058:	4607      	mov	r7, r0
 802505a:	4688      	mov	r8, r1
 802505c:	4614      	mov	r4, r2
 802505e:	2600      	movs	r6, #0
 8025060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025064:	f1b9 0901 	subs.w	r9, r9, #1
 8025068:	d505      	bpl.n	8025076 <_fwalk_sglue+0x22>
 802506a:	6824      	ldr	r4, [r4, #0]
 802506c:	2c00      	cmp	r4, #0
 802506e:	d1f7      	bne.n	8025060 <_fwalk_sglue+0xc>
 8025070:	4630      	mov	r0, r6
 8025072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025076:	89ab      	ldrh	r3, [r5, #12]
 8025078:	2b01      	cmp	r3, #1
 802507a:	d907      	bls.n	802508c <_fwalk_sglue+0x38>
 802507c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025080:	3301      	adds	r3, #1
 8025082:	d003      	beq.n	802508c <_fwalk_sglue+0x38>
 8025084:	4629      	mov	r1, r5
 8025086:	4638      	mov	r0, r7
 8025088:	47c0      	blx	r8
 802508a:	4306      	orrs	r6, r0
 802508c:	3568      	adds	r5, #104	@ 0x68
 802508e:	e7e9      	b.n	8025064 <_fwalk_sglue+0x10>

08025090 <__sread>:
 8025090:	b510      	push	{r4, lr}
 8025092:	460c      	mov	r4, r1
 8025094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025098:	f000 f93e 	bl	8025318 <_read_r>
 802509c:	2800      	cmp	r0, #0
 802509e:	bfab      	itete	ge
 80250a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80250a2:	89a3      	ldrhlt	r3, [r4, #12]
 80250a4:	181b      	addge	r3, r3, r0
 80250a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80250aa:	bfac      	ite	ge
 80250ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80250ae:	81a3      	strhlt	r3, [r4, #12]
 80250b0:	bd10      	pop	{r4, pc}

080250b2 <__swrite>:
 80250b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80250b6:	461f      	mov	r7, r3
 80250b8:	898b      	ldrh	r3, [r1, #12]
 80250ba:	05db      	lsls	r3, r3, #23
 80250bc:	4605      	mov	r5, r0
 80250be:	460c      	mov	r4, r1
 80250c0:	4616      	mov	r6, r2
 80250c2:	d505      	bpl.n	80250d0 <__swrite+0x1e>
 80250c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80250c8:	2302      	movs	r3, #2
 80250ca:	2200      	movs	r2, #0
 80250cc:	f000 f912 	bl	80252f4 <_lseek_r>
 80250d0:	89a3      	ldrh	r3, [r4, #12]
 80250d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80250d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80250da:	81a3      	strh	r3, [r4, #12]
 80250dc:	4632      	mov	r2, r6
 80250de:	463b      	mov	r3, r7
 80250e0:	4628      	mov	r0, r5
 80250e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80250e6:	f000 b94d 	b.w	8025384 <_write_r>

080250ea <__sseek>:
 80250ea:	b510      	push	{r4, lr}
 80250ec:	460c      	mov	r4, r1
 80250ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80250f2:	f000 f8ff 	bl	80252f4 <_lseek_r>
 80250f6:	1c43      	adds	r3, r0, #1
 80250f8:	89a3      	ldrh	r3, [r4, #12]
 80250fa:	bf15      	itete	ne
 80250fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80250fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8025102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8025106:	81a3      	strheq	r3, [r4, #12]
 8025108:	bf18      	it	ne
 802510a:	81a3      	strhne	r3, [r4, #12]
 802510c:	bd10      	pop	{r4, pc}

0802510e <__sclose>:
 802510e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025112:	f000 b8df 	b.w	80252d4 <_close_r>

08025116 <__swbuf_r>:
 8025116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025118:	460e      	mov	r6, r1
 802511a:	4614      	mov	r4, r2
 802511c:	4605      	mov	r5, r0
 802511e:	b118      	cbz	r0, 8025128 <__swbuf_r+0x12>
 8025120:	6a03      	ldr	r3, [r0, #32]
 8025122:	b90b      	cbnz	r3, 8025128 <__swbuf_r+0x12>
 8025124:	f7ff ff6c 	bl	8025000 <__sinit>
 8025128:	69a3      	ldr	r3, [r4, #24]
 802512a:	60a3      	str	r3, [r4, #8]
 802512c:	89a3      	ldrh	r3, [r4, #12]
 802512e:	071a      	lsls	r2, r3, #28
 8025130:	d501      	bpl.n	8025136 <__swbuf_r+0x20>
 8025132:	6923      	ldr	r3, [r4, #16]
 8025134:	b943      	cbnz	r3, 8025148 <__swbuf_r+0x32>
 8025136:	4621      	mov	r1, r4
 8025138:	4628      	mov	r0, r5
 802513a:	f000 f82b 	bl	8025194 <__swsetup_r>
 802513e:	b118      	cbz	r0, 8025148 <__swbuf_r+0x32>
 8025140:	f04f 37ff 	mov.w	r7, #4294967295
 8025144:	4638      	mov	r0, r7
 8025146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025148:	6823      	ldr	r3, [r4, #0]
 802514a:	6922      	ldr	r2, [r4, #16]
 802514c:	1a98      	subs	r0, r3, r2
 802514e:	6963      	ldr	r3, [r4, #20]
 8025150:	b2f6      	uxtb	r6, r6
 8025152:	4283      	cmp	r3, r0
 8025154:	4637      	mov	r7, r6
 8025156:	dc05      	bgt.n	8025164 <__swbuf_r+0x4e>
 8025158:	4621      	mov	r1, r4
 802515a:	4628      	mov	r0, r5
 802515c:	f000 fd5a 	bl	8025c14 <_fflush_r>
 8025160:	2800      	cmp	r0, #0
 8025162:	d1ed      	bne.n	8025140 <__swbuf_r+0x2a>
 8025164:	68a3      	ldr	r3, [r4, #8]
 8025166:	3b01      	subs	r3, #1
 8025168:	60a3      	str	r3, [r4, #8]
 802516a:	6823      	ldr	r3, [r4, #0]
 802516c:	1c5a      	adds	r2, r3, #1
 802516e:	6022      	str	r2, [r4, #0]
 8025170:	701e      	strb	r6, [r3, #0]
 8025172:	6962      	ldr	r2, [r4, #20]
 8025174:	1c43      	adds	r3, r0, #1
 8025176:	429a      	cmp	r2, r3
 8025178:	d004      	beq.n	8025184 <__swbuf_r+0x6e>
 802517a:	89a3      	ldrh	r3, [r4, #12]
 802517c:	07db      	lsls	r3, r3, #31
 802517e:	d5e1      	bpl.n	8025144 <__swbuf_r+0x2e>
 8025180:	2e0a      	cmp	r6, #10
 8025182:	d1df      	bne.n	8025144 <__swbuf_r+0x2e>
 8025184:	4621      	mov	r1, r4
 8025186:	4628      	mov	r0, r5
 8025188:	f000 fd44 	bl	8025c14 <_fflush_r>
 802518c:	2800      	cmp	r0, #0
 802518e:	d0d9      	beq.n	8025144 <__swbuf_r+0x2e>
 8025190:	e7d6      	b.n	8025140 <__swbuf_r+0x2a>
	...

08025194 <__swsetup_r>:
 8025194:	b538      	push	{r3, r4, r5, lr}
 8025196:	4b29      	ldr	r3, [pc, #164]	@ (802523c <__swsetup_r+0xa8>)
 8025198:	4605      	mov	r5, r0
 802519a:	6818      	ldr	r0, [r3, #0]
 802519c:	460c      	mov	r4, r1
 802519e:	b118      	cbz	r0, 80251a8 <__swsetup_r+0x14>
 80251a0:	6a03      	ldr	r3, [r0, #32]
 80251a2:	b90b      	cbnz	r3, 80251a8 <__swsetup_r+0x14>
 80251a4:	f7ff ff2c 	bl	8025000 <__sinit>
 80251a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80251ac:	0719      	lsls	r1, r3, #28
 80251ae:	d422      	bmi.n	80251f6 <__swsetup_r+0x62>
 80251b0:	06da      	lsls	r2, r3, #27
 80251b2:	d407      	bmi.n	80251c4 <__swsetup_r+0x30>
 80251b4:	2209      	movs	r2, #9
 80251b6:	602a      	str	r2, [r5, #0]
 80251b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80251bc:	81a3      	strh	r3, [r4, #12]
 80251be:	f04f 30ff 	mov.w	r0, #4294967295
 80251c2:	e033      	b.n	802522c <__swsetup_r+0x98>
 80251c4:	0758      	lsls	r0, r3, #29
 80251c6:	d512      	bpl.n	80251ee <__swsetup_r+0x5a>
 80251c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80251ca:	b141      	cbz	r1, 80251de <__swsetup_r+0x4a>
 80251cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80251d0:	4299      	cmp	r1, r3
 80251d2:	d002      	beq.n	80251da <__swsetup_r+0x46>
 80251d4:	4628      	mov	r0, r5
 80251d6:	f000 f97f 	bl	80254d8 <_free_r>
 80251da:	2300      	movs	r3, #0
 80251dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80251de:	89a3      	ldrh	r3, [r4, #12]
 80251e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80251e4:	81a3      	strh	r3, [r4, #12]
 80251e6:	2300      	movs	r3, #0
 80251e8:	6063      	str	r3, [r4, #4]
 80251ea:	6923      	ldr	r3, [r4, #16]
 80251ec:	6023      	str	r3, [r4, #0]
 80251ee:	89a3      	ldrh	r3, [r4, #12]
 80251f0:	f043 0308 	orr.w	r3, r3, #8
 80251f4:	81a3      	strh	r3, [r4, #12]
 80251f6:	6923      	ldr	r3, [r4, #16]
 80251f8:	b94b      	cbnz	r3, 802520e <__swsetup_r+0x7a>
 80251fa:	89a3      	ldrh	r3, [r4, #12]
 80251fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025204:	d003      	beq.n	802520e <__swsetup_r+0x7a>
 8025206:	4621      	mov	r1, r4
 8025208:	4628      	mov	r0, r5
 802520a:	f000 fd51 	bl	8025cb0 <__smakebuf_r>
 802520e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025212:	f013 0201 	ands.w	r2, r3, #1
 8025216:	d00a      	beq.n	802522e <__swsetup_r+0x9a>
 8025218:	2200      	movs	r2, #0
 802521a:	60a2      	str	r2, [r4, #8]
 802521c:	6962      	ldr	r2, [r4, #20]
 802521e:	4252      	negs	r2, r2
 8025220:	61a2      	str	r2, [r4, #24]
 8025222:	6922      	ldr	r2, [r4, #16]
 8025224:	b942      	cbnz	r2, 8025238 <__swsetup_r+0xa4>
 8025226:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802522a:	d1c5      	bne.n	80251b8 <__swsetup_r+0x24>
 802522c:	bd38      	pop	{r3, r4, r5, pc}
 802522e:	0799      	lsls	r1, r3, #30
 8025230:	bf58      	it	pl
 8025232:	6962      	ldrpl	r2, [r4, #20]
 8025234:	60a2      	str	r2, [r4, #8]
 8025236:	e7f4      	b.n	8025222 <__swsetup_r+0x8e>
 8025238:	2000      	movs	r0, #0
 802523a:	e7f7      	b.n	802522c <__swsetup_r+0x98>
 802523c:	240000e8 	.word	0x240000e8

08025240 <memset>:
 8025240:	4402      	add	r2, r0
 8025242:	4603      	mov	r3, r0
 8025244:	4293      	cmp	r3, r2
 8025246:	d100      	bne.n	802524a <memset+0xa>
 8025248:	4770      	bx	lr
 802524a:	f803 1b01 	strb.w	r1, [r3], #1
 802524e:	e7f9      	b.n	8025244 <memset+0x4>

08025250 <strncmp>:
 8025250:	b510      	push	{r4, lr}
 8025252:	b16a      	cbz	r2, 8025270 <strncmp+0x20>
 8025254:	3901      	subs	r1, #1
 8025256:	1884      	adds	r4, r0, r2
 8025258:	f810 2b01 	ldrb.w	r2, [r0], #1
 802525c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8025260:	429a      	cmp	r2, r3
 8025262:	d103      	bne.n	802526c <strncmp+0x1c>
 8025264:	42a0      	cmp	r0, r4
 8025266:	d001      	beq.n	802526c <strncmp+0x1c>
 8025268:	2a00      	cmp	r2, #0
 802526a:	d1f5      	bne.n	8025258 <strncmp+0x8>
 802526c:	1ad0      	subs	r0, r2, r3
 802526e:	bd10      	pop	{r4, pc}
 8025270:	4610      	mov	r0, r2
 8025272:	e7fc      	b.n	802526e <strncmp+0x1e>

08025274 <_raise_r>:
 8025274:	291f      	cmp	r1, #31
 8025276:	b538      	push	{r3, r4, r5, lr}
 8025278:	4605      	mov	r5, r0
 802527a:	460c      	mov	r4, r1
 802527c:	d904      	bls.n	8025288 <_raise_r+0x14>
 802527e:	2316      	movs	r3, #22
 8025280:	6003      	str	r3, [r0, #0]
 8025282:	f04f 30ff 	mov.w	r0, #4294967295
 8025286:	bd38      	pop	{r3, r4, r5, pc}
 8025288:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802528a:	b112      	cbz	r2, 8025292 <_raise_r+0x1e>
 802528c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025290:	b94b      	cbnz	r3, 80252a6 <_raise_r+0x32>
 8025292:	4628      	mov	r0, r5
 8025294:	f000 f864 	bl	8025360 <_getpid_r>
 8025298:	4622      	mov	r2, r4
 802529a:	4601      	mov	r1, r0
 802529c:	4628      	mov	r0, r5
 802529e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80252a2:	f000 b84b 	b.w	802533c <_kill_r>
 80252a6:	2b01      	cmp	r3, #1
 80252a8:	d00a      	beq.n	80252c0 <_raise_r+0x4c>
 80252aa:	1c59      	adds	r1, r3, #1
 80252ac:	d103      	bne.n	80252b6 <_raise_r+0x42>
 80252ae:	2316      	movs	r3, #22
 80252b0:	6003      	str	r3, [r0, #0]
 80252b2:	2001      	movs	r0, #1
 80252b4:	e7e7      	b.n	8025286 <_raise_r+0x12>
 80252b6:	2100      	movs	r1, #0
 80252b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80252bc:	4620      	mov	r0, r4
 80252be:	4798      	blx	r3
 80252c0:	2000      	movs	r0, #0
 80252c2:	e7e0      	b.n	8025286 <_raise_r+0x12>

080252c4 <raise>:
 80252c4:	4b02      	ldr	r3, [pc, #8]	@ (80252d0 <raise+0xc>)
 80252c6:	4601      	mov	r1, r0
 80252c8:	6818      	ldr	r0, [r3, #0]
 80252ca:	f7ff bfd3 	b.w	8025274 <_raise_r>
 80252ce:	bf00      	nop
 80252d0:	240000e8 	.word	0x240000e8

080252d4 <_close_r>:
 80252d4:	b538      	push	{r3, r4, r5, lr}
 80252d6:	4d06      	ldr	r5, [pc, #24]	@ (80252f0 <_close_r+0x1c>)
 80252d8:	2300      	movs	r3, #0
 80252da:	4604      	mov	r4, r0
 80252dc:	4608      	mov	r0, r1
 80252de:	602b      	str	r3, [r5, #0]
 80252e0:	f7dc fb82 	bl	80019e8 <_close>
 80252e4:	1c43      	adds	r3, r0, #1
 80252e6:	d102      	bne.n	80252ee <_close_r+0x1a>
 80252e8:	682b      	ldr	r3, [r5, #0]
 80252ea:	b103      	cbz	r3, 80252ee <_close_r+0x1a>
 80252ec:	6023      	str	r3, [r4, #0]
 80252ee:	bd38      	pop	{r3, r4, r5, pc}
 80252f0:	24026f9c 	.word	0x24026f9c

080252f4 <_lseek_r>:
 80252f4:	b538      	push	{r3, r4, r5, lr}
 80252f6:	4d07      	ldr	r5, [pc, #28]	@ (8025314 <_lseek_r+0x20>)
 80252f8:	4604      	mov	r4, r0
 80252fa:	4608      	mov	r0, r1
 80252fc:	4611      	mov	r1, r2
 80252fe:	2200      	movs	r2, #0
 8025300:	602a      	str	r2, [r5, #0]
 8025302:	461a      	mov	r2, r3
 8025304:	f7dc fb7a 	bl	80019fc <_lseek>
 8025308:	1c43      	adds	r3, r0, #1
 802530a:	d102      	bne.n	8025312 <_lseek_r+0x1e>
 802530c:	682b      	ldr	r3, [r5, #0]
 802530e:	b103      	cbz	r3, 8025312 <_lseek_r+0x1e>
 8025310:	6023      	str	r3, [r4, #0]
 8025312:	bd38      	pop	{r3, r4, r5, pc}
 8025314:	24026f9c 	.word	0x24026f9c

08025318 <_read_r>:
 8025318:	b538      	push	{r3, r4, r5, lr}
 802531a:	4d07      	ldr	r5, [pc, #28]	@ (8025338 <_read_r+0x20>)
 802531c:	4604      	mov	r4, r0
 802531e:	4608      	mov	r0, r1
 8025320:	4611      	mov	r1, r2
 8025322:	2200      	movs	r2, #0
 8025324:	602a      	str	r2, [r5, #0]
 8025326:	461a      	mov	r2, r3
 8025328:	f7dc fb42 	bl	80019b0 <_read>
 802532c:	1c43      	adds	r3, r0, #1
 802532e:	d102      	bne.n	8025336 <_read_r+0x1e>
 8025330:	682b      	ldr	r3, [r5, #0]
 8025332:	b103      	cbz	r3, 8025336 <_read_r+0x1e>
 8025334:	6023      	str	r3, [r4, #0]
 8025336:	bd38      	pop	{r3, r4, r5, pc}
 8025338:	24026f9c 	.word	0x24026f9c

0802533c <_kill_r>:
 802533c:	b538      	push	{r3, r4, r5, lr}
 802533e:	4d07      	ldr	r5, [pc, #28]	@ (802535c <_kill_r+0x20>)
 8025340:	2300      	movs	r3, #0
 8025342:	4604      	mov	r4, r0
 8025344:	4608      	mov	r0, r1
 8025346:	4611      	mov	r1, r2
 8025348:	602b      	str	r3, [r5, #0]
 802534a:	f7dc fb23 	bl	8001994 <_kill>
 802534e:	1c43      	adds	r3, r0, #1
 8025350:	d102      	bne.n	8025358 <_kill_r+0x1c>
 8025352:	682b      	ldr	r3, [r5, #0]
 8025354:	b103      	cbz	r3, 8025358 <_kill_r+0x1c>
 8025356:	6023      	str	r3, [r4, #0]
 8025358:	bd38      	pop	{r3, r4, r5, pc}
 802535a:	bf00      	nop
 802535c:	24026f9c 	.word	0x24026f9c

08025360 <_getpid_r>:
 8025360:	f7dc bb16 	b.w	8001990 <_getpid>

08025364 <_sbrk_r>:
 8025364:	b538      	push	{r3, r4, r5, lr}
 8025366:	4d06      	ldr	r5, [pc, #24]	@ (8025380 <_sbrk_r+0x1c>)
 8025368:	2300      	movs	r3, #0
 802536a:	4604      	mov	r4, r0
 802536c:	4608      	mov	r0, r1
 802536e:	602b      	str	r3, [r5, #0]
 8025370:	f7dc fb46 	bl	8001a00 <_sbrk>
 8025374:	1c43      	adds	r3, r0, #1
 8025376:	d102      	bne.n	802537e <_sbrk_r+0x1a>
 8025378:	682b      	ldr	r3, [r5, #0]
 802537a:	b103      	cbz	r3, 802537e <_sbrk_r+0x1a>
 802537c:	6023      	str	r3, [r4, #0]
 802537e:	bd38      	pop	{r3, r4, r5, pc}
 8025380:	24026f9c 	.word	0x24026f9c

08025384 <_write_r>:
 8025384:	b538      	push	{r3, r4, r5, lr}
 8025386:	4d07      	ldr	r5, [pc, #28]	@ (80253a4 <_write_r+0x20>)
 8025388:	4604      	mov	r4, r0
 802538a:	4608      	mov	r0, r1
 802538c:	4611      	mov	r1, r2
 802538e:	2200      	movs	r2, #0
 8025390:	602a      	str	r2, [r5, #0]
 8025392:	461a      	mov	r2, r3
 8025394:	f7dc fb1a 	bl	80019cc <_write>
 8025398:	1c43      	adds	r3, r0, #1
 802539a:	d102      	bne.n	80253a2 <_write_r+0x1e>
 802539c:	682b      	ldr	r3, [r5, #0]
 802539e:	b103      	cbz	r3, 80253a2 <_write_r+0x1e>
 80253a0:	6023      	str	r3, [r4, #0]
 80253a2:	bd38      	pop	{r3, r4, r5, pc}
 80253a4:	24026f9c 	.word	0x24026f9c

080253a8 <__errno>:
 80253a8:	4b01      	ldr	r3, [pc, #4]	@ (80253b0 <__errno+0x8>)
 80253aa:	6818      	ldr	r0, [r3, #0]
 80253ac:	4770      	bx	lr
 80253ae:	bf00      	nop
 80253b0:	240000e8 	.word	0x240000e8

080253b4 <__libc_init_array>:
 80253b4:	b570      	push	{r4, r5, r6, lr}
 80253b6:	4d0d      	ldr	r5, [pc, #52]	@ (80253ec <__libc_init_array+0x38>)
 80253b8:	4c0d      	ldr	r4, [pc, #52]	@ (80253f0 <__libc_init_array+0x3c>)
 80253ba:	1b64      	subs	r4, r4, r5
 80253bc:	10a4      	asrs	r4, r4, #2
 80253be:	2600      	movs	r6, #0
 80253c0:	42a6      	cmp	r6, r4
 80253c2:	d109      	bne.n	80253d8 <__libc_init_array+0x24>
 80253c4:	4d0b      	ldr	r5, [pc, #44]	@ (80253f4 <__libc_init_array+0x40>)
 80253c6:	4c0c      	ldr	r4, [pc, #48]	@ (80253f8 <__libc_init_array+0x44>)
 80253c8:	f000 fcd0 	bl	8025d6c <_init>
 80253cc:	1b64      	subs	r4, r4, r5
 80253ce:	10a4      	asrs	r4, r4, #2
 80253d0:	2600      	movs	r6, #0
 80253d2:	42a6      	cmp	r6, r4
 80253d4:	d105      	bne.n	80253e2 <__libc_init_array+0x2e>
 80253d6:	bd70      	pop	{r4, r5, r6, pc}
 80253d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80253dc:	4798      	blx	r3
 80253de:	3601      	adds	r6, #1
 80253e0:	e7ee      	b.n	80253c0 <__libc_init_array+0xc>
 80253e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80253e6:	4798      	blx	r3
 80253e8:	3601      	adds	r6, #1
 80253ea:	e7f2      	b.n	80253d2 <__libc_init_array+0x1e>
 80253ec:	08029ddc 	.word	0x08029ddc
 80253f0:	08029ddc 	.word	0x08029ddc
 80253f4:	08029ddc 	.word	0x08029ddc
 80253f8:	08029df8 	.word	0x08029df8

080253fc <__retarget_lock_init_recursive>:
 80253fc:	4770      	bx	lr

080253fe <__retarget_lock_acquire_recursive>:
 80253fe:	4770      	bx	lr

08025400 <__retarget_lock_release_recursive>:
 8025400:	4770      	bx	lr

08025402 <memcpy>:
 8025402:	440a      	add	r2, r1
 8025404:	4291      	cmp	r1, r2
 8025406:	f100 33ff 	add.w	r3, r0, #4294967295
 802540a:	d100      	bne.n	802540e <memcpy+0xc>
 802540c:	4770      	bx	lr
 802540e:	b510      	push	{r4, lr}
 8025410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025418:	4291      	cmp	r1, r2
 802541a:	d1f9      	bne.n	8025410 <memcpy+0xe>
 802541c:	bd10      	pop	{r4, pc}
	...

08025420 <__register_exitproc>:
 8025420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025424:	4d27      	ldr	r5, [pc, #156]	@ (80254c4 <__register_exitproc+0xa4>)
 8025426:	4607      	mov	r7, r0
 8025428:	6828      	ldr	r0, [r5, #0]
 802542a:	4691      	mov	r9, r2
 802542c:	460e      	mov	r6, r1
 802542e:	4698      	mov	r8, r3
 8025430:	f7ff ffe5 	bl	80253fe <__retarget_lock_acquire_recursive>
 8025434:	4a24      	ldr	r2, [pc, #144]	@ (80254c8 <__register_exitproc+0xa8>)
 8025436:	6814      	ldr	r4, [r2, #0]
 8025438:	b93c      	cbnz	r4, 802544a <__register_exitproc+0x2a>
 802543a:	4b24      	ldr	r3, [pc, #144]	@ (80254cc <__register_exitproc+0xac>)
 802543c:	6013      	str	r3, [r2, #0]
 802543e:	4a24      	ldr	r2, [pc, #144]	@ (80254d0 <__register_exitproc+0xb0>)
 8025440:	b112      	cbz	r2, 8025448 <__register_exitproc+0x28>
 8025442:	6812      	ldr	r2, [r2, #0]
 8025444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8025448:	4c20      	ldr	r4, [pc, #128]	@ (80254cc <__register_exitproc+0xac>)
 802544a:	6863      	ldr	r3, [r4, #4]
 802544c:	2b1f      	cmp	r3, #31
 802544e:	dd06      	ble.n	802545e <__register_exitproc+0x3e>
 8025450:	6828      	ldr	r0, [r5, #0]
 8025452:	f7ff ffd5 	bl	8025400 <__retarget_lock_release_recursive>
 8025456:	f04f 30ff 	mov.w	r0, #4294967295
 802545a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802545e:	b32f      	cbz	r7, 80254ac <__register_exitproc+0x8c>
 8025460:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8025464:	b968      	cbnz	r0, 8025482 <__register_exitproc+0x62>
 8025466:	4b1b      	ldr	r3, [pc, #108]	@ (80254d4 <__register_exitproc+0xb4>)
 8025468:	2b00      	cmp	r3, #0
 802546a:	d0f1      	beq.n	8025450 <__register_exitproc+0x30>
 802546c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8025470:	f7ff fc6e 	bl	8024d50 <malloc>
 8025474:	2800      	cmp	r0, #0
 8025476:	d0eb      	beq.n	8025450 <__register_exitproc+0x30>
 8025478:	2300      	movs	r3, #0
 802547a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802547e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8025482:	6863      	ldr	r3, [r4, #4]
 8025484:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025488:	2201      	movs	r2, #1
 802548a:	409a      	lsls	r2, r3
 802548c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025490:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8025494:	4313      	orrs	r3, r2
 8025496:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802549a:	2f02      	cmp	r7, #2
 802549c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80254a0:	bf02      	ittt	eq
 80254a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80254a6:	4313      	orreq	r3, r2
 80254a8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80254ac:	6863      	ldr	r3, [r4, #4]
 80254ae:	6828      	ldr	r0, [r5, #0]
 80254b0:	1c5a      	adds	r2, r3, #1
 80254b2:	3302      	adds	r3, #2
 80254b4:	6062      	str	r2, [r4, #4]
 80254b6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80254ba:	f7ff ffa1 	bl	8025400 <__retarget_lock_release_recursive>
 80254be:	2000      	movs	r0, #0
 80254c0:	e7cb      	b.n	802545a <__register_exitproc+0x3a>
 80254c2:	bf00      	nop
 80254c4:	24000138 	.word	0x24000138
 80254c8:	24027030 	.word	0x24027030
 80254cc:	24026fa4 	.word	0x24026fa4
 80254d0:	0802993c 	.word	0x0802993c
 80254d4:	08024d51 	.word	0x08024d51

080254d8 <_free_r>:
 80254d8:	b538      	push	{r3, r4, r5, lr}
 80254da:	4605      	mov	r5, r0
 80254dc:	2900      	cmp	r1, #0
 80254de:	d041      	beq.n	8025564 <_free_r+0x8c>
 80254e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80254e4:	1f0c      	subs	r4, r1, #4
 80254e6:	2b00      	cmp	r3, #0
 80254e8:	bfb8      	it	lt
 80254ea:	18e4      	addlt	r4, r4, r3
 80254ec:	f7ff fce2 	bl	8024eb4 <__malloc_lock>
 80254f0:	4a1d      	ldr	r2, [pc, #116]	@ (8025568 <_free_r+0x90>)
 80254f2:	6813      	ldr	r3, [r2, #0]
 80254f4:	b933      	cbnz	r3, 8025504 <_free_r+0x2c>
 80254f6:	6063      	str	r3, [r4, #4]
 80254f8:	6014      	str	r4, [r2, #0]
 80254fa:	4628      	mov	r0, r5
 80254fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025500:	f7ff bcde 	b.w	8024ec0 <__malloc_unlock>
 8025504:	42a3      	cmp	r3, r4
 8025506:	d908      	bls.n	802551a <_free_r+0x42>
 8025508:	6820      	ldr	r0, [r4, #0]
 802550a:	1821      	adds	r1, r4, r0
 802550c:	428b      	cmp	r3, r1
 802550e:	bf01      	itttt	eq
 8025510:	6819      	ldreq	r1, [r3, #0]
 8025512:	685b      	ldreq	r3, [r3, #4]
 8025514:	1809      	addeq	r1, r1, r0
 8025516:	6021      	streq	r1, [r4, #0]
 8025518:	e7ed      	b.n	80254f6 <_free_r+0x1e>
 802551a:	461a      	mov	r2, r3
 802551c:	685b      	ldr	r3, [r3, #4]
 802551e:	b10b      	cbz	r3, 8025524 <_free_r+0x4c>
 8025520:	42a3      	cmp	r3, r4
 8025522:	d9fa      	bls.n	802551a <_free_r+0x42>
 8025524:	6811      	ldr	r1, [r2, #0]
 8025526:	1850      	adds	r0, r2, r1
 8025528:	42a0      	cmp	r0, r4
 802552a:	d10b      	bne.n	8025544 <_free_r+0x6c>
 802552c:	6820      	ldr	r0, [r4, #0]
 802552e:	4401      	add	r1, r0
 8025530:	1850      	adds	r0, r2, r1
 8025532:	4283      	cmp	r3, r0
 8025534:	6011      	str	r1, [r2, #0]
 8025536:	d1e0      	bne.n	80254fa <_free_r+0x22>
 8025538:	6818      	ldr	r0, [r3, #0]
 802553a:	685b      	ldr	r3, [r3, #4]
 802553c:	6053      	str	r3, [r2, #4]
 802553e:	4408      	add	r0, r1
 8025540:	6010      	str	r0, [r2, #0]
 8025542:	e7da      	b.n	80254fa <_free_r+0x22>
 8025544:	d902      	bls.n	802554c <_free_r+0x74>
 8025546:	230c      	movs	r3, #12
 8025548:	602b      	str	r3, [r5, #0]
 802554a:	e7d6      	b.n	80254fa <_free_r+0x22>
 802554c:	6820      	ldr	r0, [r4, #0]
 802554e:	1821      	adds	r1, r4, r0
 8025550:	428b      	cmp	r3, r1
 8025552:	bf04      	itt	eq
 8025554:	6819      	ldreq	r1, [r3, #0]
 8025556:	685b      	ldreq	r3, [r3, #4]
 8025558:	6063      	str	r3, [r4, #4]
 802555a:	bf04      	itt	eq
 802555c:	1809      	addeq	r1, r1, r0
 802555e:	6021      	streq	r1, [r4, #0]
 8025560:	6054      	str	r4, [r2, #4]
 8025562:	e7ca      	b.n	80254fa <_free_r+0x22>
 8025564:	bd38      	pop	{r3, r4, r5, pc}
 8025566:	bf00      	nop
 8025568:	24026e5c 	.word	0x24026e5c

0802556c <__sfputc_r>:
 802556c:	6893      	ldr	r3, [r2, #8]
 802556e:	3b01      	subs	r3, #1
 8025570:	2b00      	cmp	r3, #0
 8025572:	b410      	push	{r4}
 8025574:	6093      	str	r3, [r2, #8]
 8025576:	da08      	bge.n	802558a <__sfputc_r+0x1e>
 8025578:	6994      	ldr	r4, [r2, #24]
 802557a:	42a3      	cmp	r3, r4
 802557c:	db01      	blt.n	8025582 <__sfputc_r+0x16>
 802557e:	290a      	cmp	r1, #10
 8025580:	d103      	bne.n	802558a <__sfputc_r+0x1e>
 8025582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025586:	f7ff bdc6 	b.w	8025116 <__swbuf_r>
 802558a:	6813      	ldr	r3, [r2, #0]
 802558c:	1c58      	adds	r0, r3, #1
 802558e:	6010      	str	r0, [r2, #0]
 8025590:	7019      	strb	r1, [r3, #0]
 8025592:	4608      	mov	r0, r1
 8025594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025598:	4770      	bx	lr

0802559a <__sfputs_r>:
 802559a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802559c:	4606      	mov	r6, r0
 802559e:	460f      	mov	r7, r1
 80255a0:	4614      	mov	r4, r2
 80255a2:	18d5      	adds	r5, r2, r3
 80255a4:	42ac      	cmp	r4, r5
 80255a6:	d101      	bne.n	80255ac <__sfputs_r+0x12>
 80255a8:	2000      	movs	r0, #0
 80255aa:	e007      	b.n	80255bc <__sfputs_r+0x22>
 80255ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80255b0:	463a      	mov	r2, r7
 80255b2:	4630      	mov	r0, r6
 80255b4:	f7ff ffda 	bl	802556c <__sfputc_r>
 80255b8:	1c43      	adds	r3, r0, #1
 80255ba:	d1f3      	bne.n	80255a4 <__sfputs_r+0xa>
 80255bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080255c0 <_vfiprintf_r>:
 80255c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255c4:	460d      	mov	r5, r1
 80255c6:	b09d      	sub	sp, #116	@ 0x74
 80255c8:	4614      	mov	r4, r2
 80255ca:	4698      	mov	r8, r3
 80255cc:	4606      	mov	r6, r0
 80255ce:	b118      	cbz	r0, 80255d8 <_vfiprintf_r+0x18>
 80255d0:	6a03      	ldr	r3, [r0, #32]
 80255d2:	b90b      	cbnz	r3, 80255d8 <_vfiprintf_r+0x18>
 80255d4:	f7ff fd14 	bl	8025000 <__sinit>
 80255d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80255da:	07d9      	lsls	r1, r3, #31
 80255dc:	d405      	bmi.n	80255ea <_vfiprintf_r+0x2a>
 80255de:	89ab      	ldrh	r3, [r5, #12]
 80255e0:	059a      	lsls	r2, r3, #22
 80255e2:	d402      	bmi.n	80255ea <_vfiprintf_r+0x2a>
 80255e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80255e6:	f7ff ff0a 	bl	80253fe <__retarget_lock_acquire_recursive>
 80255ea:	89ab      	ldrh	r3, [r5, #12]
 80255ec:	071b      	lsls	r3, r3, #28
 80255ee:	d501      	bpl.n	80255f4 <_vfiprintf_r+0x34>
 80255f0:	692b      	ldr	r3, [r5, #16]
 80255f2:	b99b      	cbnz	r3, 802561c <_vfiprintf_r+0x5c>
 80255f4:	4629      	mov	r1, r5
 80255f6:	4630      	mov	r0, r6
 80255f8:	f7ff fdcc 	bl	8025194 <__swsetup_r>
 80255fc:	b170      	cbz	r0, 802561c <_vfiprintf_r+0x5c>
 80255fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025600:	07dc      	lsls	r4, r3, #31
 8025602:	d504      	bpl.n	802560e <_vfiprintf_r+0x4e>
 8025604:	f04f 30ff 	mov.w	r0, #4294967295
 8025608:	b01d      	add	sp, #116	@ 0x74
 802560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802560e:	89ab      	ldrh	r3, [r5, #12]
 8025610:	0598      	lsls	r0, r3, #22
 8025612:	d4f7      	bmi.n	8025604 <_vfiprintf_r+0x44>
 8025614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025616:	f7ff fef3 	bl	8025400 <__retarget_lock_release_recursive>
 802561a:	e7f3      	b.n	8025604 <_vfiprintf_r+0x44>
 802561c:	2300      	movs	r3, #0
 802561e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025620:	2320      	movs	r3, #32
 8025622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025626:	f8cd 800c 	str.w	r8, [sp, #12]
 802562a:	2330      	movs	r3, #48	@ 0x30
 802562c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80257dc <_vfiprintf_r+0x21c>
 8025630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025634:	f04f 0901 	mov.w	r9, #1
 8025638:	4623      	mov	r3, r4
 802563a:	469a      	mov	sl, r3
 802563c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025640:	b10a      	cbz	r2, 8025646 <_vfiprintf_r+0x86>
 8025642:	2a25      	cmp	r2, #37	@ 0x25
 8025644:	d1f9      	bne.n	802563a <_vfiprintf_r+0x7a>
 8025646:	ebba 0b04 	subs.w	fp, sl, r4
 802564a:	d00b      	beq.n	8025664 <_vfiprintf_r+0xa4>
 802564c:	465b      	mov	r3, fp
 802564e:	4622      	mov	r2, r4
 8025650:	4629      	mov	r1, r5
 8025652:	4630      	mov	r0, r6
 8025654:	f7ff ffa1 	bl	802559a <__sfputs_r>
 8025658:	3001      	adds	r0, #1
 802565a:	f000 80a7 	beq.w	80257ac <_vfiprintf_r+0x1ec>
 802565e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025660:	445a      	add	r2, fp
 8025662:	9209      	str	r2, [sp, #36]	@ 0x24
 8025664:	f89a 3000 	ldrb.w	r3, [sl]
 8025668:	2b00      	cmp	r3, #0
 802566a:	f000 809f 	beq.w	80257ac <_vfiprintf_r+0x1ec>
 802566e:	2300      	movs	r3, #0
 8025670:	f04f 32ff 	mov.w	r2, #4294967295
 8025674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025678:	f10a 0a01 	add.w	sl, sl, #1
 802567c:	9304      	str	r3, [sp, #16]
 802567e:	9307      	str	r3, [sp, #28]
 8025680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025684:	931a      	str	r3, [sp, #104]	@ 0x68
 8025686:	4654      	mov	r4, sl
 8025688:	2205      	movs	r2, #5
 802568a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802568e:	4853      	ldr	r0, [pc, #332]	@ (80257dc <_vfiprintf_r+0x21c>)
 8025690:	f7da fe26 	bl	80002e0 <memchr>
 8025694:	9a04      	ldr	r2, [sp, #16]
 8025696:	b9d8      	cbnz	r0, 80256d0 <_vfiprintf_r+0x110>
 8025698:	06d1      	lsls	r1, r2, #27
 802569a:	bf44      	itt	mi
 802569c:	2320      	movmi	r3, #32
 802569e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80256a2:	0713      	lsls	r3, r2, #28
 80256a4:	bf44      	itt	mi
 80256a6:	232b      	movmi	r3, #43	@ 0x2b
 80256a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80256ac:	f89a 3000 	ldrb.w	r3, [sl]
 80256b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80256b2:	d015      	beq.n	80256e0 <_vfiprintf_r+0x120>
 80256b4:	9a07      	ldr	r2, [sp, #28]
 80256b6:	4654      	mov	r4, sl
 80256b8:	2000      	movs	r0, #0
 80256ba:	f04f 0c0a 	mov.w	ip, #10
 80256be:	4621      	mov	r1, r4
 80256c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80256c4:	3b30      	subs	r3, #48	@ 0x30
 80256c6:	2b09      	cmp	r3, #9
 80256c8:	d94b      	bls.n	8025762 <_vfiprintf_r+0x1a2>
 80256ca:	b1b0      	cbz	r0, 80256fa <_vfiprintf_r+0x13a>
 80256cc:	9207      	str	r2, [sp, #28]
 80256ce:	e014      	b.n	80256fa <_vfiprintf_r+0x13a>
 80256d0:	eba0 0308 	sub.w	r3, r0, r8
 80256d4:	fa09 f303 	lsl.w	r3, r9, r3
 80256d8:	4313      	orrs	r3, r2
 80256da:	9304      	str	r3, [sp, #16]
 80256dc:	46a2      	mov	sl, r4
 80256de:	e7d2      	b.n	8025686 <_vfiprintf_r+0xc6>
 80256e0:	9b03      	ldr	r3, [sp, #12]
 80256e2:	1d19      	adds	r1, r3, #4
 80256e4:	681b      	ldr	r3, [r3, #0]
 80256e6:	9103      	str	r1, [sp, #12]
 80256e8:	2b00      	cmp	r3, #0
 80256ea:	bfbb      	ittet	lt
 80256ec:	425b      	neglt	r3, r3
 80256ee:	f042 0202 	orrlt.w	r2, r2, #2
 80256f2:	9307      	strge	r3, [sp, #28]
 80256f4:	9307      	strlt	r3, [sp, #28]
 80256f6:	bfb8      	it	lt
 80256f8:	9204      	strlt	r2, [sp, #16]
 80256fa:	7823      	ldrb	r3, [r4, #0]
 80256fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80256fe:	d10a      	bne.n	8025716 <_vfiprintf_r+0x156>
 8025700:	7863      	ldrb	r3, [r4, #1]
 8025702:	2b2a      	cmp	r3, #42	@ 0x2a
 8025704:	d132      	bne.n	802576c <_vfiprintf_r+0x1ac>
 8025706:	9b03      	ldr	r3, [sp, #12]
 8025708:	1d1a      	adds	r2, r3, #4
 802570a:	681b      	ldr	r3, [r3, #0]
 802570c:	9203      	str	r2, [sp, #12]
 802570e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025712:	3402      	adds	r4, #2
 8025714:	9305      	str	r3, [sp, #20]
 8025716:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80257ec <_vfiprintf_r+0x22c>
 802571a:	7821      	ldrb	r1, [r4, #0]
 802571c:	2203      	movs	r2, #3
 802571e:	4650      	mov	r0, sl
 8025720:	f7da fdde 	bl	80002e0 <memchr>
 8025724:	b138      	cbz	r0, 8025736 <_vfiprintf_r+0x176>
 8025726:	9b04      	ldr	r3, [sp, #16]
 8025728:	eba0 000a 	sub.w	r0, r0, sl
 802572c:	2240      	movs	r2, #64	@ 0x40
 802572e:	4082      	lsls	r2, r0
 8025730:	4313      	orrs	r3, r2
 8025732:	3401      	adds	r4, #1
 8025734:	9304      	str	r3, [sp, #16]
 8025736:	f814 1b01 	ldrb.w	r1, [r4], #1
 802573a:	4829      	ldr	r0, [pc, #164]	@ (80257e0 <_vfiprintf_r+0x220>)
 802573c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025740:	2206      	movs	r2, #6
 8025742:	f7da fdcd 	bl	80002e0 <memchr>
 8025746:	2800      	cmp	r0, #0
 8025748:	d03f      	beq.n	80257ca <_vfiprintf_r+0x20a>
 802574a:	4b26      	ldr	r3, [pc, #152]	@ (80257e4 <_vfiprintf_r+0x224>)
 802574c:	bb1b      	cbnz	r3, 8025796 <_vfiprintf_r+0x1d6>
 802574e:	9b03      	ldr	r3, [sp, #12]
 8025750:	3307      	adds	r3, #7
 8025752:	f023 0307 	bic.w	r3, r3, #7
 8025756:	3308      	adds	r3, #8
 8025758:	9303      	str	r3, [sp, #12]
 802575a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802575c:	443b      	add	r3, r7
 802575e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025760:	e76a      	b.n	8025638 <_vfiprintf_r+0x78>
 8025762:	fb0c 3202 	mla	r2, ip, r2, r3
 8025766:	460c      	mov	r4, r1
 8025768:	2001      	movs	r0, #1
 802576a:	e7a8      	b.n	80256be <_vfiprintf_r+0xfe>
 802576c:	2300      	movs	r3, #0
 802576e:	3401      	adds	r4, #1
 8025770:	9305      	str	r3, [sp, #20]
 8025772:	4619      	mov	r1, r3
 8025774:	f04f 0c0a 	mov.w	ip, #10
 8025778:	4620      	mov	r0, r4
 802577a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802577e:	3a30      	subs	r2, #48	@ 0x30
 8025780:	2a09      	cmp	r2, #9
 8025782:	d903      	bls.n	802578c <_vfiprintf_r+0x1cc>
 8025784:	2b00      	cmp	r3, #0
 8025786:	d0c6      	beq.n	8025716 <_vfiprintf_r+0x156>
 8025788:	9105      	str	r1, [sp, #20]
 802578a:	e7c4      	b.n	8025716 <_vfiprintf_r+0x156>
 802578c:	fb0c 2101 	mla	r1, ip, r1, r2
 8025790:	4604      	mov	r4, r0
 8025792:	2301      	movs	r3, #1
 8025794:	e7f0      	b.n	8025778 <_vfiprintf_r+0x1b8>
 8025796:	ab03      	add	r3, sp, #12
 8025798:	9300      	str	r3, [sp, #0]
 802579a:	462a      	mov	r2, r5
 802579c:	4b12      	ldr	r3, [pc, #72]	@ (80257e8 <_vfiprintf_r+0x228>)
 802579e:	a904      	add	r1, sp, #16
 80257a0:	4630      	mov	r0, r6
 80257a2:	f3af 8000 	nop.w
 80257a6:	4607      	mov	r7, r0
 80257a8:	1c78      	adds	r0, r7, #1
 80257aa:	d1d6      	bne.n	802575a <_vfiprintf_r+0x19a>
 80257ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80257ae:	07d9      	lsls	r1, r3, #31
 80257b0:	d405      	bmi.n	80257be <_vfiprintf_r+0x1fe>
 80257b2:	89ab      	ldrh	r3, [r5, #12]
 80257b4:	059a      	lsls	r2, r3, #22
 80257b6:	d402      	bmi.n	80257be <_vfiprintf_r+0x1fe>
 80257b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80257ba:	f7ff fe21 	bl	8025400 <__retarget_lock_release_recursive>
 80257be:	89ab      	ldrh	r3, [r5, #12]
 80257c0:	065b      	lsls	r3, r3, #25
 80257c2:	f53f af1f 	bmi.w	8025604 <_vfiprintf_r+0x44>
 80257c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80257c8:	e71e      	b.n	8025608 <_vfiprintf_r+0x48>
 80257ca:	ab03      	add	r3, sp, #12
 80257cc:	9300      	str	r3, [sp, #0]
 80257ce:	462a      	mov	r2, r5
 80257d0:	4b05      	ldr	r3, [pc, #20]	@ (80257e8 <_vfiprintf_r+0x228>)
 80257d2:	a904      	add	r1, sp, #16
 80257d4:	4630      	mov	r0, r6
 80257d6:	f000 f879 	bl	80258cc <_printf_i>
 80257da:	e7e4      	b.n	80257a6 <_vfiprintf_r+0x1e6>
 80257dc:	08029940 	.word	0x08029940
 80257e0:	0802994a 	.word	0x0802994a
 80257e4:	00000000 	.word	0x00000000
 80257e8:	0802559b 	.word	0x0802559b
 80257ec:	08029946 	.word	0x08029946

080257f0 <_printf_common>:
 80257f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80257f4:	4616      	mov	r6, r2
 80257f6:	4698      	mov	r8, r3
 80257f8:	688a      	ldr	r2, [r1, #8]
 80257fa:	690b      	ldr	r3, [r1, #16]
 80257fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025800:	4293      	cmp	r3, r2
 8025802:	bfb8      	it	lt
 8025804:	4613      	movlt	r3, r2
 8025806:	6033      	str	r3, [r6, #0]
 8025808:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802580c:	4607      	mov	r7, r0
 802580e:	460c      	mov	r4, r1
 8025810:	b10a      	cbz	r2, 8025816 <_printf_common+0x26>
 8025812:	3301      	adds	r3, #1
 8025814:	6033      	str	r3, [r6, #0]
 8025816:	6823      	ldr	r3, [r4, #0]
 8025818:	0699      	lsls	r1, r3, #26
 802581a:	bf42      	ittt	mi
 802581c:	6833      	ldrmi	r3, [r6, #0]
 802581e:	3302      	addmi	r3, #2
 8025820:	6033      	strmi	r3, [r6, #0]
 8025822:	6825      	ldr	r5, [r4, #0]
 8025824:	f015 0506 	ands.w	r5, r5, #6
 8025828:	d106      	bne.n	8025838 <_printf_common+0x48>
 802582a:	f104 0a19 	add.w	sl, r4, #25
 802582e:	68e3      	ldr	r3, [r4, #12]
 8025830:	6832      	ldr	r2, [r6, #0]
 8025832:	1a9b      	subs	r3, r3, r2
 8025834:	42ab      	cmp	r3, r5
 8025836:	dc26      	bgt.n	8025886 <_printf_common+0x96>
 8025838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802583c:	6822      	ldr	r2, [r4, #0]
 802583e:	3b00      	subs	r3, #0
 8025840:	bf18      	it	ne
 8025842:	2301      	movne	r3, #1
 8025844:	0692      	lsls	r2, r2, #26
 8025846:	d42b      	bmi.n	80258a0 <_printf_common+0xb0>
 8025848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802584c:	4641      	mov	r1, r8
 802584e:	4638      	mov	r0, r7
 8025850:	47c8      	blx	r9
 8025852:	3001      	adds	r0, #1
 8025854:	d01e      	beq.n	8025894 <_printf_common+0xa4>
 8025856:	6823      	ldr	r3, [r4, #0]
 8025858:	6922      	ldr	r2, [r4, #16]
 802585a:	f003 0306 	and.w	r3, r3, #6
 802585e:	2b04      	cmp	r3, #4
 8025860:	bf02      	ittt	eq
 8025862:	68e5      	ldreq	r5, [r4, #12]
 8025864:	6833      	ldreq	r3, [r6, #0]
 8025866:	1aed      	subeq	r5, r5, r3
 8025868:	68a3      	ldr	r3, [r4, #8]
 802586a:	bf0c      	ite	eq
 802586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025870:	2500      	movne	r5, #0
 8025872:	4293      	cmp	r3, r2
 8025874:	bfc4      	itt	gt
 8025876:	1a9b      	subgt	r3, r3, r2
 8025878:	18ed      	addgt	r5, r5, r3
 802587a:	2600      	movs	r6, #0
 802587c:	341a      	adds	r4, #26
 802587e:	42b5      	cmp	r5, r6
 8025880:	d11a      	bne.n	80258b8 <_printf_common+0xc8>
 8025882:	2000      	movs	r0, #0
 8025884:	e008      	b.n	8025898 <_printf_common+0xa8>
 8025886:	2301      	movs	r3, #1
 8025888:	4652      	mov	r2, sl
 802588a:	4641      	mov	r1, r8
 802588c:	4638      	mov	r0, r7
 802588e:	47c8      	blx	r9
 8025890:	3001      	adds	r0, #1
 8025892:	d103      	bne.n	802589c <_printf_common+0xac>
 8025894:	f04f 30ff 	mov.w	r0, #4294967295
 8025898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802589c:	3501      	adds	r5, #1
 802589e:	e7c6      	b.n	802582e <_printf_common+0x3e>
 80258a0:	18e1      	adds	r1, r4, r3
 80258a2:	1c5a      	adds	r2, r3, #1
 80258a4:	2030      	movs	r0, #48	@ 0x30
 80258a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80258aa:	4422      	add	r2, r4
 80258ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80258b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80258b4:	3302      	adds	r3, #2
 80258b6:	e7c7      	b.n	8025848 <_printf_common+0x58>
 80258b8:	2301      	movs	r3, #1
 80258ba:	4622      	mov	r2, r4
 80258bc:	4641      	mov	r1, r8
 80258be:	4638      	mov	r0, r7
 80258c0:	47c8      	blx	r9
 80258c2:	3001      	adds	r0, #1
 80258c4:	d0e6      	beq.n	8025894 <_printf_common+0xa4>
 80258c6:	3601      	adds	r6, #1
 80258c8:	e7d9      	b.n	802587e <_printf_common+0x8e>
	...

080258cc <_printf_i>:
 80258cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80258d0:	7e0f      	ldrb	r7, [r1, #24]
 80258d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80258d4:	2f78      	cmp	r7, #120	@ 0x78
 80258d6:	4691      	mov	r9, r2
 80258d8:	4680      	mov	r8, r0
 80258da:	460c      	mov	r4, r1
 80258dc:	469a      	mov	sl, r3
 80258de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80258e2:	d807      	bhi.n	80258f4 <_printf_i+0x28>
 80258e4:	2f62      	cmp	r7, #98	@ 0x62
 80258e6:	d80a      	bhi.n	80258fe <_printf_i+0x32>
 80258e8:	2f00      	cmp	r7, #0
 80258ea:	f000 80d2 	beq.w	8025a92 <_printf_i+0x1c6>
 80258ee:	2f58      	cmp	r7, #88	@ 0x58
 80258f0:	f000 80b9 	beq.w	8025a66 <_printf_i+0x19a>
 80258f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80258f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80258fc:	e03a      	b.n	8025974 <_printf_i+0xa8>
 80258fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8025902:	2b15      	cmp	r3, #21
 8025904:	d8f6      	bhi.n	80258f4 <_printf_i+0x28>
 8025906:	a101      	add	r1, pc, #4	@ (adr r1, 802590c <_printf_i+0x40>)
 8025908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802590c:	08025965 	.word	0x08025965
 8025910:	08025979 	.word	0x08025979
 8025914:	080258f5 	.word	0x080258f5
 8025918:	080258f5 	.word	0x080258f5
 802591c:	080258f5 	.word	0x080258f5
 8025920:	080258f5 	.word	0x080258f5
 8025924:	08025979 	.word	0x08025979
 8025928:	080258f5 	.word	0x080258f5
 802592c:	080258f5 	.word	0x080258f5
 8025930:	080258f5 	.word	0x080258f5
 8025934:	080258f5 	.word	0x080258f5
 8025938:	08025a79 	.word	0x08025a79
 802593c:	080259a3 	.word	0x080259a3
 8025940:	08025a33 	.word	0x08025a33
 8025944:	080258f5 	.word	0x080258f5
 8025948:	080258f5 	.word	0x080258f5
 802594c:	08025a9b 	.word	0x08025a9b
 8025950:	080258f5 	.word	0x080258f5
 8025954:	080259a3 	.word	0x080259a3
 8025958:	080258f5 	.word	0x080258f5
 802595c:	080258f5 	.word	0x080258f5
 8025960:	08025a3b 	.word	0x08025a3b
 8025964:	6833      	ldr	r3, [r6, #0]
 8025966:	1d1a      	adds	r2, r3, #4
 8025968:	681b      	ldr	r3, [r3, #0]
 802596a:	6032      	str	r2, [r6, #0]
 802596c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025974:	2301      	movs	r3, #1
 8025976:	e09d      	b.n	8025ab4 <_printf_i+0x1e8>
 8025978:	6833      	ldr	r3, [r6, #0]
 802597a:	6820      	ldr	r0, [r4, #0]
 802597c:	1d19      	adds	r1, r3, #4
 802597e:	6031      	str	r1, [r6, #0]
 8025980:	0606      	lsls	r6, r0, #24
 8025982:	d501      	bpl.n	8025988 <_printf_i+0xbc>
 8025984:	681d      	ldr	r5, [r3, #0]
 8025986:	e003      	b.n	8025990 <_printf_i+0xc4>
 8025988:	0645      	lsls	r5, r0, #25
 802598a:	d5fb      	bpl.n	8025984 <_printf_i+0xb8>
 802598c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025990:	2d00      	cmp	r5, #0
 8025992:	da03      	bge.n	802599c <_printf_i+0xd0>
 8025994:	232d      	movs	r3, #45	@ 0x2d
 8025996:	426d      	negs	r5, r5
 8025998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802599c:	4859      	ldr	r0, [pc, #356]	@ (8025b04 <_printf_i+0x238>)
 802599e:	230a      	movs	r3, #10
 80259a0:	e011      	b.n	80259c6 <_printf_i+0xfa>
 80259a2:	6821      	ldr	r1, [r4, #0]
 80259a4:	6833      	ldr	r3, [r6, #0]
 80259a6:	0608      	lsls	r0, r1, #24
 80259a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80259ac:	d402      	bmi.n	80259b4 <_printf_i+0xe8>
 80259ae:	0649      	lsls	r1, r1, #25
 80259b0:	bf48      	it	mi
 80259b2:	b2ad      	uxthmi	r5, r5
 80259b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80259b6:	4853      	ldr	r0, [pc, #332]	@ (8025b04 <_printf_i+0x238>)
 80259b8:	6033      	str	r3, [r6, #0]
 80259ba:	bf14      	ite	ne
 80259bc:	230a      	movne	r3, #10
 80259be:	2308      	moveq	r3, #8
 80259c0:	2100      	movs	r1, #0
 80259c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80259c6:	6866      	ldr	r6, [r4, #4]
 80259c8:	60a6      	str	r6, [r4, #8]
 80259ca:	2e00      	cmp	r6, #0
 80259cc:	bfa2      	ittt	ge
 80259ce:	6821      	ldrge	r1, [r4, #0]
 80259d0:	f021 0104 	bicge.w	r1, r1, #4
 80259d4:	6021      	strge	r1, [r4, #0]
 80259d6:	b90d      	cbnz	r5, 80259dc <_printf_i+0x110>
 80259d8:	2e00      	cmp	r6, #0
 80259da:	d04b      	beq.n	8025a74 <_printf_i+0x1a8>
 80259dc:	4616      	mov	r6, r2
 80259de:	fbb5 f1f3 	udiv	r1, r5, r3
 80259e2:	fb03 5711 	mls	r7, r3, r1, r5
 80259e6:	5dc7      	ldrb	r7, [r0, r7]
 80259e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80259ec:	462f      	mov	r7, r5
 80259ee:	42bb      	cmp	r3, r7
 80259f0:	460d      	mov	r5, r1
 80259f2:	d9f4      	bls.n	80259de <_printf_i+0x112>
 80259f4:	2b08      	cmp	r3, #8
 80259f6:	d10b      	bne.n	8025a10 <_printf_i+0x144>
 80259f8:	6823      	ldr	r3, [r4, #0]
 80259fa:	07df      	lsls	r7, r3, #31
 80259fc:	d508      	bpl.n	8025a10 <_printf_i+0x144>
 80259fe:	6923      	ldr	r3, [r4, #16]
 8025a00:	6861      	ldr	r1, [r4, #4]
 8025a02:	4299      	cmp	r1, r3
 8025a04:	bfde      	ittt	le
 8025a06:	2330      	movle	r3, #48	@ 0x30
 8025a08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025a0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025a10:	1b92      	subs	r2, r2, r6
 8025a12:	6122      	str	r2, [r4, #16]
 8025a14:	f8cd a000 	str.w	sl, [sp]
 8025a18:	464b      	mov	r3, r9
 8025a1a:	aa03      	add	r2, sp, #12
 8025a1c:	4621      	mov	r1, r4
 8025a1e:	4640      	mov	r0, r8
 8025a20:	f7ff fee6 	bl	80257f0 <_printf_common>
 8025a24:	3001      	adds	r0, #1
 8025a26:	d14a      	bne.n	8025abe <_printf_i+0x1f2>
 8025a28:	f04f 30ff 	mov.w	r0, #4294967295
 8025a2c:	b004      	add	sp, #16
 8025a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a32:	6823      	ldr	r3, [r4, #0]
 8025a34:	f043 0320 	orr.w	r3, r3, #32
 8025a38:	6023      	str	r3, [r4, #0]
 8025a3a:	4833      	ldr	r0, [pc, #204]	@ (8025b08 <_printf_i+0x23c>)
 8025a3c:	2778      	movs	r7, #120	@ 0x78
 8025a3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025a42:	6823      	ldr	r3, [r4, #0]
 8025a44:	6831      	ldr	r1, [r6, #0]
 8025a46:	061f      	lsls	r7, r3, #24
 8025a48:	f851 5b04 	ldr.w	r5, [r1], #4
 8025a4c:	d402      	bmi.n	8025a54 <_printf_i+0x188>
 8025a4e:	065f      	lsls	r7, r3, #25
 8025a50:	bf48      	it	mi
 8025a52:	b2ad      	uxthmi	r5, r5
 8025a54:	6031      	str	r1, [r6, #0]
 8025a56:	07d9      	lsls	r1, r3, #31
 8025a58:	bf44      	itt	mi
 8025a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8025a5e:	6023      	strmi	r3, [r4, #0]
 8025a60:	b11d      	cbz	r5, 8025a6a <_printf_i+0x19e>
 8025a62:	2310      	movs	r3, #16
 8025a64:	e7ac      	b.n	80259c0 <_printf_i+0xf4>
 8025a66:	4827      	ldr	r0, [pc, #156]	@ (8025b04 <_printf_i+0x238>)
 8025a68:	e7e9      	b.n	8025a3e <_printf_i+0x172>
 8025a6a:	6823      	ldr	r3, [r4, #0]
 8025a6c:	f023 0320 	bic.w	r3, r3, #32
 8025a70:	6023      	str	r3, [r4, #0]
 8025a72:	e7f6      	b.n	8025a62 <_printf_i+0x196>
 8025a74:	4616      	mov	r6, r2
 8025a76:	e7bd      	b.n	80259f4 <_printf_i+0x128>
 8025a78:	6833      	ldr	r3, [r6, #0]
 8025a7a:	6825      	ldr	r5, [r4, #0]
 8025a7c:	6961      	ldr	r1, [r4, #20]
 8025a7e:	1d18      	adds	r0, r3, #4
 8025a80:	6030      	str	r0, [r6, #0]
 8025a82:	062e      	lsls	r6, r5, #24
 8025a84:	681b      	ldr	r3, [r3, #0]
 8025a86:	d501      	bpl.n	8025a8c <_printf_i+0x1c0>
 8025a88:	6019      	str	r1, [r3, #0]
 8025a8a:	e002      	b.n	8025a92 <_printf_i+0x1c6>
 8025a8c:	0668      	lsls	r0, r5, #25
 8025a8e:	d5fb      	bpl.n	8025a88 <_printf_i+0x1bc>
 8025a90:	8019      	strh	r1, [r3, #0]
 8025a92:	2300      	movs	r3, #0
 8025a94:	6123      	str	r3, [r4, #16]
 8025a96:	4616      	mov	r6, r2
 8025a98:	e7bc      	b.n	8025a14 <_printf_i+0x148>
 8025a9a:	6833      	ldr	r3, [r6, #0]
 8025a9c:	1d1a      	adds	r2, r3, #4
 8025a9e:	6032      	str	r2, [r6, #0]
 8025aa0:	681e      	ldr	r6, [r3, #0]
 8025aa2:	6862      	ldr	r2, [r4, #4]
 8025aa4:	2100      	movs	r1, #0
 8025aa6:	4630      	mov	r0, r6
 8025aa8:	f7da fc1a 	bl	80002e0 <memchr>
 8025aac:	b108      	cbz	r0, 8025ab2 <_printf_i+0x1e6>
 8025aae:	1b80      	subs	r0, r0, r6
 8025ab0:	6060      	str	r0, [r4, #4]
 8025ab2:	6863      	ldr	r3, [r4, #4]
 8025ab4:	6123      	str	r3, [r4, #16]
 8025ab6:	2300      	movs	r3, #0
 8025ab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025abc:	e7aa      	b.n	8025a14 <_printf_i+0x148>
 8025abe:	6923      	ldr	r3, [r4, #16]
 8025ac0:	4632      	mov	r2, r6
 8025ac2:	4649      	mov	r1, r9
 8025ac4:	4640      	mov	r0, r8
 8025ac6:	47d0      	blx	sl
 8025ac8:	3001      	adds	r0, #1
 8025aca:	d0ad      	beq.n	8025a28 <_printf_i+0x15c>
 8025acc:	6823      	ldr	r3, [r4, #0]
 8025ace:	079b      	lsls	r3, r3, #30
 8025ad0:	d413      	bmi.n	8025afa <_printf_i+0x22e>
 8025ad2:	68e0      	ldr	r0, [r4, #12]
 8025ad4:	9b03      	ldr	r3, [sp, #12]
 8025ad6:	4298      	cmp	r0, r3
 8025ad8:	bfb8      	it	lt
 8025ada:	4618      	movlt	r0, r3
 8025adc:	e7a6      	b.n	8025a2c <_printf_i+0x160>
 8025ade:	2301      	movs	r3, #1
 8025ae0:	4632      	mov	r2, r6
 8025ae2:	4649      	mov	r1, r9
 8025ae4:	4640      	mov	r0, r8
 8025ae6:	47d0      	blx	sl
 8025ae8:	3001      	adds	r0, #1
 8025aea:	d09d      	beq.n	8025a28 <_printf_i+0x15c>
 8025aec:	3501      	adds	r5, #1
 8025aee:	68e3      	ldr	r3, [r4, #12]
 8025af0:	9903      	ldr	r1, [sp, #12]
 8025af2:	1a5b      	subs	r3, r3, r1
 8025af4:	42ab      	cmp	r3, r5
 8025af6:	dcf2      	bgt.n	8025ade <_printf_i+0x212>
 8025af8:	e7eb      	b.n	8025ad2 <_printf_i+0x206>
 8025afa:	2500      	movs	r5, #0
 8025afc:	f104 0619 	add.w	r6, r4, #25
 8025b00:	e7f5      	b.n	8025aee <_printf_i+0x222>
 8025b02:	bf00      	nop
 8025b04:	08029951 	.word	0x08029951
 8025b08:	08029962 	.word	0x08029962

08025b0c <__sflush_r>:
 8025b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b14:	0716      	lsls	r6, r2, #28
 8025b16:	4605      	mov	r5, r0
 8025b18:	460c      	mov	r4, r1
 8025b1a:	d454      	bmi.n	8025bc6 <__sflush_r+0xba>
 8025b1c:	684b      	ldr	r3, [r1, #4]
 8025b1e:	2b00      	cmp	r3, #0
 8025b20:	dc02      	bgt.n	8025b28 <__sflush_r+0x1c>
 8025b22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025b24:	2b00      	cmp	r3, #0
 8025b26:	dd48      	ble.n	8025bba <__sflush_r+0xae>
 8025b28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025b2a:	2e00      	cmp	r6, #0
 8025b2c:	d045      	beq.n	8025bba <__sflush_r+0xae>
 8025b2e:	2300      	movs	r3, #0
 8025b30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025b34:	682f      	ldr	r7, [r5, #0]
 8025b36:	6a21      	ldr	r1, [r4, #32]
 8025b38:	602b      	str	r3, [r5, #0]
 8025b3a:	d030      	beq.n	8025b9e <__sflush_r+0x92>
 8025b3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025b3e:	89a3      	ldrh	r3, [r4, #12]
 8025b40:	0759      	lsls	r1, r3, #29
 8025b42:	d505      	bpl.n	8025b50 <__sflush_r+0x44>
 8025b44:	6863      	ldr	r3, [r4, #4]
 8025b46:	1ad2      	subs	r2, r2, r3
 8025b48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025b4a:	b10b      	cbz	r3, 8025b50 <__sflush_r+0x44>
 8025b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8025b4e:	1ad2      	subs	r2, r2, r3
 8025b50:	2300      	movs	r3, #0
 8025b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025b54:	6a21      	ldr	r1, [r4, #32]
 8025b56:	4628      	mov	r0, r5
 8025b58:	47b0      	blx	r6
 8025b5a:	1c43      	adds	r3, r0, #1
 8025b5c:	89a3      	ldrh	r3, [r4, #12]
 8025b5e:	d106      	bne.n	8025b6e <__sflush_r+0x62>
 8025b60:	6829      	ldr	r1, [r5, #0]
 8025b62:	291d      	cmp	r1, #29
 8025b64:	d82b      	bhi.n	8025bbe <__sflush_r+0xb2>
 8025b66:	4a2a      	ldr	r2, [pc, #168]	@ (8025c10 <__sflush_r+0x104>)
 8025b68:	410a      	asrs	r2, r1
 8025b6a:	07d6      	lsls	r6, r2, #31
 8025b6c:	d427      	bmi.n	8025bbe <__sflush_r+0xb2>
 8025b6e:	2200      	movs	r2, #0
 8025b70:	6062      	str	r2, [r4, #4]
 8025b72:	04d9      	lsls	r1, r3, #19
 8025b74:	6922      	ldr	r2, [r4, #16]
 8025b76:	6022      	str	r2, [r4, #0]
 8025b78:	d504      	bpl.n	8025b84 <__sflush_r+0x78>
 8025b7a:	1c42      	adds	r2, r0, #1
 8025b7c:	d101      	bne.n	8025b82 <__sflush_r+0x76>
 8025b7e:	682b      	ldr	r3, [r5, #0]
 8025b80:	b903      	cbnz	r3, 8025b84 <__sflush_r+0x78>
 8025b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8025b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025b86:	602f      	str	r7, [r5, #0]
 8025b88:	b1b9      	cbz	r1, 8025bba <__sflush_r+0xae>
 8025b8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025b8e:	4299      	cmp	r1, r3
 8025b90:	d002      	beq.n	8025b98 <__sflush_r+0x8c>
 8025b92:	4628      	mov	r0, r5
 8025b94:	f7ff fca0 	bl	80254d8 <_free_r>
 8025b98:	2300      	movs	r3, #0
 8025b9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8025b9c:	e00d      	b.n	8025bba <__sflush_r+0xae>
 8025b9e:	2301      	movs	r3, #1
 8025ba0:	4628      	mov	r0, r5
 8025ba2:	47b0      	blx	r6
 8025ba4:	4602      	mov	r2, r0
 8025ba6:	1c50      	adds	r0, r2, #1
 8025ba8:	d1c9      	bne.n	8025b3e <__sflush_r+0x32>
 8025baa:	682b      	ldr	r3, [r5, #0]
 8025bac:	2b00      	cmp	r3, #0
 8025bae:	d0c6      	beq.n	8025b3e <__sflush_r+0x32>
 8025bb0:	2b1d      	cmp	r3, #29
 8025bb2:	d001      	beq.n	8025bb8 <__sflush_r+0xac>
 8025bb4:	2b16      	cmp	r3, #22
 8025bb6:	d11e      	bne.n	8025bf6 <__sflush_r+0xea>
 8025bb8:	602f      	str	r7, [r5, #0]
 8025bba:	2000      	movs	r0, #0
 8025bbc:	e022      	b.n	8025c04 <__sflush_r+0xf8>
 8025bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025bc2:	b21b      	sxth	r3, r3
 8025bc4:	e01b      	b.n	8025bfe <__sflush_r+0xf2>
 8025bc6:	690f      	ldr	r7, [r1, #16]
 8025bc8:	2f00      	cmp	r7, #0
 8025bca:	d0f6      	beq.n	8025bba <__sflush_r+0xae>
 8025bcc:	0793      	lsls	r3, r2, #30
 8025bce:	680e      	ldr	r6, [r1, #0]
 8025bd0:	bf08      	it	eq
 8025bd2:	694b      	ldreq	r3, [r1, #20]
 8025bd4:	600f      	str	r7, [r1, #0]
 8025bd6:	bf18      	it	ne
 8025bd8:	2300      	movne	r3, #0
 8025bda:	eba6 0807 	sub.w	r8, r6, r7
 8025bde:	608b      	str	r3, [r1, #8]
 8025be0:	f1b8 0f00 	cmp.w	r8, #0
 8025be4:	dde9      	ble.n	8025bba <__sflush_r+0xae>
 8025be6:	6a21      	ldr	r1, [r4, #32]
 8025be8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8025bea:	4643      	mov	r3, r8
 8025bec:	463a      	mov	r2, r7
 8025bee:	4628      	mov	r0, r5
 8025bf0:	47b0      	blx	r6
 8025bf2:	2800      	cmp	r0, #0
 8025bf4:	dc08      	bgt.n	8025c08 <__sflush_r+0xfc>
 8025bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025bfe:	81a3      	strh	r3, [r4, #12]
 8025c00:	f04f 30ff 	mov.w	r0, #4294967295
 8025c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025c08:	4407      	add	r7, r0
 8025c0a:	eba8 0800 	sub.w	r8, r8, r0
 8025c0e:	e7e7      	b.n	8025be0 <__sflush_r+0xd4>
 8025c10:	dfbffffe 	.word	0xdfbffffe

08025c14 <_fflush_r>:
 8025c14:	b538      	push	{r3, r4, r5, lr}
 8025c16:	690b      	ldr	r3, [r1, #16]
 8025c18:	4605      	mov	r5, r0
 8025c1a:	460c      	mov	r4, r1
 8025c1c:	b913      	cbnz	r3, 8025c24 <_fflush_r+0x10>
 8025c1e:	2500      	movs	r5, #0
 8025c20:	4628      	mov	r0, r5
 8025c22:	bd38      	pop	{r3, r4, r5, pc}
 8025c24:	b118      	cbz	r0, 8025c2e <_fflush_r+0x1a>
 8025c26:	6a03      	ldr	r3, [r0, #32]
 8025c28:	b90b      	cbnz	r3, 8025c2e <_fflush_r+0x1a>
 8025c2a:	f7ff f9e9 	bl	8025000 <__sinit>
 8025c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025c32:	2b00      	cmp	r3, #0
 8025c34:	d0f3      	beq.n	8025c1e <_fflush_r+0xa>
 8025c36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8025c38:	07d0      	lsls	r0, r2, #31
 8025c3a:	d404      	bmi.n	8025c46 <_fflush_r+0x32>
 8025c3c:	0599      	lsls	r1, r3, #22
 8025c3e:	d402      	bmi.n	8025c46 <_fflush_r+0x32>
 8025c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025c42:	f7ff fbdc 	bl	80253fe <__retarget_lock_acquire_recursive>
 8025c46:	4628      	mov	r0, r5
 8025c48:	4621      	mov	r1, r4
 8025c4a:	f7ff ff5f 	bl	8025b0c <__sflush_r>
 8025c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025c50:	07da      	lsls	r2, r3, #31
 8025c52:	4605      	mov	r5, r0
 8025c54:	d4e4      	bmi.n	8025c20 <_fflush_r+0xc>
 8025c56:	89a3      	ldrh	r3, [r4, #12]
 8025c58:	059b      	lsls	r3, r3, #22
 8025c5a:	d4e1      	bmi.n	8025c20 <_fflush_r+0xc>
 8025c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025c5e:	f7ff fbcf 	bl	8025400 <__retarget_lock_release_recursive>
 8025c62:	e7dd      	b.n	8025c20 <_fflush_r+0xc>

08025c64 <__swhatbuf_r>:
 8025c64:	b570      	push	{r4, r5, r6, lr}
 8025c66:	460c      	mov	r4, r1
 8025c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c6c:	2900      	cmp	r1, #0
 8025c6e:	b096      	sub	sp, #88	@ 0x58
 8025c70:	4615      	mov	r5, r2
 8025c72:	461e      	mov	r6, r3
 8025c74:	da0d      	bge.n	8025c92 <__swhatbuf_r+0x2e>
 8025c76:	89a3      	ldrh	r3, [r4, #12]
 8025c78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8025c7c:	f04f 0100 	mov.w	r1, #0
 8025c80:	bf14      	ite	ne
 8025c82:	2340      	movne	r3, #64	@ 0x40
 8025c84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8025c88:	2000      	movs	r0, #0
 8025c8a:	6031      	str	r1, [r6, #0]
 8025c8c:	602b      	str	r3, [r5, #0]
 8025c8e:	b016      	add	sp, #88	@ 0x58
 8025c90:	bd70      	pop	{r4, r5, r6, pc}
 8025c92:	466a      	mov	r2, sp
 8025c94:	f000 f848 	bl	8025d28 <_fstat_r>
 8025c98:	2800      	cmp	r0, #0
 8025c9a:	dbec      	blt.n	8025c76 <__swhatbuf_r+0x12>
 8025c9c:	9901      	ldr	r1, [sp, #4]
 8025c9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8025ca2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8025ca6:	4259      	negs	r1, r3
 8025ca8:	4159      	adcs	r1, r3
 8025caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025cae:	e7eb      	b.n	8025c88 <__swhatbuf_r+0x24>

08025cb0 <__smakebuf_r>:
 8025cb0:	898b      	ldrh	r3, [r1, #12]
 8025cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025cb4:	079d      	lsls	r5, r3, #30
 8025cb6:	4606      	mov	r6, r0
 8025cb8:	460c      	mov	r4, r1
 8025cba:	d507      	bpl.n	8025ccc <__smakebuf_r+0x1c>
 8025cbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8025cc0:	6023      	str	r3, [r4, #0]
 8025cc2:	6123      	str	r3, [r4, #16]
 8025cc4:	2301      	movs	r3, #1
 8025cc6:	6163      	str	r3, [r4, #20]
 8025cc8:	b003      	add	sp, #12
 8025cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025ccc:	ab01      	add	r3, sp, #4
 8025cce:	466a      	mov	r2, sp
 8025cd0:	f7ff ffc8 	bl	8025c64 <__swhatbuf_r>
 8025cd4:	9f00      	ldr	r7, [sp, #0]
 8025cd6:	4605      	mov	r5, r0
 8025cd8:	4639      	mov	r1, r7
 8025cda:	4630      	mov	r0, r6
 8025cdc:	f7ff f86a 	bl	8024db4 <_malloc_r>
 8025ce0:	b948      	cbnz	r0, 8025cf6 <__smakebuf_r+0x46>
 8025ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ce6:	059a      	lsls	r2, r3, #22
 8025ce8:	d4ee      	bmi.n	8025cc8 <__smakebuf_r+0x18>
 8025cea:	f023 0303 	bic.w	r3, r3, #3
 8025cee:	f043 0302 	orr.w	r3, r3, #2
 8025cf2:	81a3      	strh	r3, [r4, #12]
 8025cf4:	e7e2      	b.n	8025cbc <__smakebuf_r+0xc>
 8025cf6:	89a3      	ldrh	r3, [r4, #12]
 8025cf8:	6020      	str	r0, [r4, #0]
 8025cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025cfe:	81a3      	strh	r3, [r4, #12]
 8025d00:	9b01      	ldr	r3, [sp, #4]
 8025d02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8025d06:	b15b      	cbz	r3, 8025d20 <__smakebuf_r+0x70>
 8025d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025d0c:	4630      	mov	r0, r6
 8025d0e:	f000 f81d 	bl	8025d4c <_isatty_r>
 8025d12:	b128      	cbz	r0, 8025d20 <__smakebuf_r+0x70>
 8025d14:	89a3      	ldrh	r3, [r4, #12]
 8025d16:	f023 0303 	bic.w	r3, r3, #3
 8025d1a:	f043 0301 	orr.w	r3, r3, #1
 8025d1e:	81a3      	strh	r3, [r4, #12]
 8025d20:	89a3      	ldrh	r3, [r4, #12]
 8025d22:	431d      	orrs	r5, r3
 8025d24:	81a5      	strh	r5, [r4, #12]
 8025d26:	e7cf      	b.n	8025cc8 <__smakebuf_r+0x18>

08025d28 <_fstat_r>:
 8025d28:	b538      	push	{r3, r4, r5, lr}
 8025d2a:	4d07      	ldr	r5, [pc, #28]	@ (8025d48 <_fstat_r+0x20>)
 8025d2c:	2300      	movs	r3, #0
 8025d2e:	4604      	mov	r4, r0
 8025d30:	4608      	mov	r0, r1
 8025d32:	4611      	mov	r1, r2
 8025d34:	602b      	str	r3, [r5, #0]
 8025d36:	f7db fe5a 	bl	80019ee <_fstat>
 8025d3a:	1c43      	adds	r3, r0, #1
 8025d3c:	d102      	bne.n	8025d44 <_fstat_r+0x1c>
 8025d3e:	682b      	ldr	r3, [r5, #0]
 8025d40:	b103      	cbz	r3, 8025d44 <_fstat_r+0x1c>
 8025d42:	6023      	str	r3, [r4, #0]
 8025d44:	bd38      	pop	{r3, r4, r5, pc}
 8025d46:	bf00      	nop
 8025d48:	24026f9c 	.word	0x24026f9c

08025d4c <_isatty_r>:
 8025d4c:	b538      	push	{r3, r4, r5, lr}
 8025d4e:	4d06      	ldr	r5, [pc, #24]	@ (8025d68 <_isatty_r+0x1c>)
 8025d50:	2300      	movs	r3, #0
 8025d52:	4604      	mov	r4, r0
 8025d54:	4608      	mov	r0, r1
 8025d56:	602b      	str	r3, [r5, #0]
 8025d58:	f7db fe4e 	bl	80019f8 <_isatty>
 8025d5c:	1c43      	adds	r3, r0, #1
 8025d5e:	d102      	bne.n	8025d66 <_isatty_r+0x1a>
 8025d60:	682b      	ldr	r3, [r5, #0]
 8025d62:	b103      	cbz	r3, 8025d66 <_isatty_r+0x1a>
 8025d64:	6023      	str	r3, [r4, #0]
 8025d66:	bd38      	pop	{r3, r4, r5, pc}
 8025d68:	24026f9c 	.word	0x24026f9c

08025d6c <_init>:
 8025d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d6e:	bf00      	nop
 8025d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d72:	bc08      	pop	{r3}
 8025d74:	469e      	mov	lr, r3
 8025d76:	4770      	bx	lr

08025d78 <_fini>:
 8025d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d7a:	bf00      	nop
 8025d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d7e:	bc08      	pop	{r3}
 8025d80:	469e      	mov	lr, r3
 8025d82:	4770      	bx	lr
